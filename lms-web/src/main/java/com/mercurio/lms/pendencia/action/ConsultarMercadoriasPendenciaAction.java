package com.mercurio.lms.pendencia.action;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

import org.joda.time.DateTime;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.FindDefinition;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.util.FilterList;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.entrega.model.service.ReciboReembolsoService;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.model.service.CtoInternacionalService;
import com.mercurio.lms.expedicao.model.service.DoctoServicoService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.pendencia.model.service.MdaService;
import com.mercurio.lms.rnc.model.service.MotivoAberturaNcService;
import com.mercurio.lms.rnc.model.service.NaoConformidadeService;
import com.mercurio.lms.seguros.model.service.TipoSinistroService;
import com.mercurio.lms.vendas.model.service.ClienteService;


/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.pendencia.consultarMercadoriasPendenciaAction"
 */

public class ConsultarMercadoriasPendenciaAction extends CrudAction {
	
	private NaoConformidadeService naoConformidadeService;
	private DoctoServicoService doctoServicoService;
	private FilialService filialService;
	private ClienteService clienteService;
	private MotivoAberturaNcService motivoAberturaNcService;
	private DomainValueService domainValueService;
	private ConhecimentoService conhecimentoService;
	private CtoInternacionalService ctoInternacionalService;
	private MdaService mdaService;
	private ReciboReembolsoService reciboReembolsoService;
	private TipoSinistroService tipoSinistroService;

	/*
	 * Getters and Setters
	 */
	
	public ClienteService getClienteService() {
		return clienteService;
	}
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}
	public DoctoServicoService getDoctoServicoService() {
		return doctoServicoService;
	}
	public void setDoctoServicoService(DoctoServicoService doctoServicoService) {
		this.doctoServicoService = doctoServicoService;
	}
	public FilialService getFilialService() {
		return filialService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public MotivoAberturaNcService getMotivoAberturaNcService() {
		return motivoAberturaNcService;
	}
	public void setMotivoAberturaNcService(MotivoAberturaNcService motivoAberturaNcService) {
		this.motivoAberturaNcService = motivoAberturaNcService;
	}
	public NaoConformidadeService getNaoConformidadeService() {
		return naoConformidadeService;
	}		
	public ConhecimentoService getConhecimentoService() {
		return conhecimentoService;
	}
	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
	}
	public CtoInternacionalService getCtoInternacionalService() {
		return ctoInternacionalService;
	}
	public void setCtoInternacionalService(CtoInternacionalService ctoInternacionalService) {
		this.ctoInternacionalService = ctoInternacionalService;
	}
	public DomainValueService getDomainValueService() {
		return domainValueService;
	}
	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}
	public MdaService getMdaService() {
		return mdaService;
	}
	public void setMdaService(MdaService mdaService) {
		this.mdaService = mdaService;
	}
	public ReciboReembolsoService getReciboReembolsoService() {
		return reciboReembolsoService;
	}
	public void setReciboReembolsoService(ReciboReembolsoService reciboReembolsoService) {
		this.reciboReembolsoService = reciboReembolsoService;
	}
	public void setNaoConformidadeService(NaoConformidadeService naoConformidadeService) {
		this.naoConformidadeService = naoConformidadeService;
	}
	public TipoSinistroService getTipoSinistroService() {
		return tipoSinistroService;
	}
	public void setTipoSinistroService(TipoSinistroService tipoSinistroService) {
		this.tipoSinistroService = tipoSinistroService;
	}
	public void setService(NaoConformidadeService serviceService) {
		this.defaultService = serviceService;
	}
	public NaoConformidadeService getService() {
		return (NaoConformidadeService) this.defaultService;
	}
	
	/*
	 * Regras de negocio
	 */
	
	/**
	 * 
	 * @param criteria
	 * @return
	 */
	public ResultSetPage findPaginated(TypedFlatMap criteria) {
		
		Long idFilialAbertura = criteria.getLong("filialAbertura.idFilial");
		Long idFilialResponsavel = criteria.getLong("filialResponsavel.idFilial");
		
		DateTime dhInclusaoInicial = criteria.getDateTime("dhInclusaoInicial");
		DateTime dhInclusaoFinal = criteria.getDateTime("dhInclusaoFinal");

		String tpDoctoServico = criteria.getString("doctoServico.tpDocumentoServico");  
		Long idFilialOrigem = criteria.getLong("doctoServico.filialByIdFilialOrigem.idFilial");
		Long idDoctoServico = criteria.getLong("doctoServico.idDoctoServico");
		
		Long idMotivoAberturaNc = criteria.getLong("motivoAberturaNc.idMotivoAberturaNC");
		Long idClienteRemetente = criteria.getLong("clienteRemetente.idCliente");
		Long idClienteDestinatario = criteria.getLong("clienteDestinatario.idCliente");
		
		String dsOcorrenciaNC = criteria.getString("dsOcorrenciaNC");
		
		
		return this.getService().findPaginatedNaoConformidadeRegistrarOcorrencia(idFilialAbertura, idFilialResponsavel, 
    		dhInclusaoInicial, dhInclusaoFinal,  tpDoctoServico, idFilialOrigem, idDoctoServico, idMotivoAberturaNc, idClienteRemetente, 
    		idClienteDestinatario, dsOcorrenciaNC, FindDefinition.createFindDefinition(criteria));
	}
	
	/**
	 * 
	 * @param criteria
	 * @return
	 */
	public Integer getRowCount(TypedFlatMap criteria) {

		Long idFilialAbertura = criteria.getLong("filialAbertura.idFilial");
		Long idFilialResponsavel = criteria.getLong("filialResponsavel.idFilial");
		
		DateTime dhInclusaoInicial = criteria.getDateTime("dhInclusaoInicial");
		DateTime dhInclusaoFinal = criteria.getDateTime("dhInclusaoFinal");

		String tpDoctoServico = criteria.getString("doctoServico.tpDocumentoServico");  
		Long idFilialOrigem = criteria.getLong("doctoServico.filialByIdFilialOrigem.idFilial");
		Long idDoctoServico = criteria.getLong("doctoServico.idDoctoServico");
		
		Long idMotivoAberturaNc = criteria.getLong("motivoAberturaNc.idMotivoAberturaNC");
		Long idClienteRemetente = criteria.getLong("clienteRemetente.idCliente");
		Long idClienteDestinatario = criteria.getLong("clienteDestinatario.idCliente");
		
		String dsOcorrenciaNC = criteria.getString("dsOcorrenciaNC");
		
		return this.getService().getRowCountNaoConformidadeRegistrarOcorrencia(idFilialAbertura, idFilialResponsavel, 
    		dhInclusaoInicial, dhInclusaoFinal, tpDoctoServico, idFilialOrigem, idDoctoServico, idMotivoAberturaNc, idClienteRemetente, 
    		idClienteDestinatario, dsOcorrenciaNC);
	}
	
	
	
	//################################
    // Metodos para a tag documents
    //################################
    
    /**
	 * Método que popula a combo de tipos de documento apenas com CTR, CRT, MDA, CTE, NTE.
     * 
     * @param criteria
     * @return List
     */
    public List findTipoDocumentoServico(Map criteria) {
		List dominiosValidos = Arrays.asList("CTR", "CRT", "MDA", "NFT", "CTE", "NTE");
        List retorno = getDomainValueService().findByDomainNameAndValues("DM_TIPO_DOCUMENTO_SERVICO", dominiosValidos);
        return retorno;
    }
	
	/** 
     * Busca a filial baseado no documento de serviço
     * @param criteria
     * @return
     */
    public List findLookupFilialByDocumentoServico(Map criteria) {
    	
    	FilterList filter = new FilterList(getFilialService().findLookup(criteria)) {
			public Map filterItem(Object item) {
	    			Filial filial = (Filial)item;
	    			TypedFlatMap typedFlatMap = new TypedFlatMap();
		    		typedFlatMap.put("idFilial", filial.getIdFilial());
			    	typedFlatMap.put("sgFilial", filial.getSgFilial());
				return typedFlatMap;
			}
    	};
    	
    	return (List)filter.doFilter();
    }
    
    //
    public List findLookupServiceDocumentFilialCTR(Map criteria) {
        return findLookupFilialByDocumentoServico(criteria);
    }
    
    public List findLookupServiceDocumentNumberCTR(Map criteria) {
        return getConhecimentoService().findLookup(criteria);
     }
    
    public List findLookupServiceDocumentFilialCRT(Map criteria) {
        return findLookupFilialByDocumentoServico(criteria);
    }
    
     public List findLookupServiceDocumentNumberCRT(Map criteria) {
        return getCtoInternacionalService().findLookup(criteria);
     }
     
     public List findLookupServiceDocumentFilialMDA(Map criteria) {
         return findLookupFilialByDocumentoServico(criteria);
     }
     
     public List findLookupServiceDocumentNumberMDA(Map criteria) {
        return getMdaService().findLookup(criteria);
     }
     
     public List findLookupServiceDocumentoFilialRRE(Map criteria) {
     	return findLookupFilialByDocumentoServico(criteria);
     }
     
     public List findLookupServiceDocumentNumberRRE(Map criteria) {
         return getReciboReembolsoService().findLookup(criteria);
     }
     
     public List findLookupServiceDocumentFilialNFT(Map criteria) {
      	return findLookupFilialByDocumentoServico(criteria);
      }
      
      public List findLookupServiceDocumentNumberNFT(Map criteria) {
          return getConhecimentoService().findLookup(criteria);
      }
     
     public List findLookupServiceNotaFiscalTranporte(Map criteria) {
    	 return getConhecimentoService().findLookup(criteria);
     }
     
	public List findLookupServiceDocumentFilialCTE(Map criteria) {
		return findLookupFilialByDocumentoServico(criteria);
	}

	public List findLookupServiceDocumentNumberCTE(Map criteria) {
		return getConhecimentoService().findLookup(criteria);
	}

	public List findLookupServiceDocumentFilialNTE(Map criteria) {
		return findLookupFilialByDocumentoServico(criteria);
	}

	public List findLookupServiceDocumentNumberNTE(Map criteria) {
		return getConhecimentoService().findLookup(criteria);
	}

     //################################
     // Metodos para os objetos default
     //################################
     
     public List findLookupFilial(TypedFlatMap criteria) {
    	 return this.getFilialService().findLookupBySgFilial((String)criteria.get("sgFilial"), (String)criteria.get("tpAcesso"));
     }
     
     public List findClienteLookup(Map criteria) {
    	 return this.getClienteService().findLookup(criteria);
     }
     
     public List findMotivoAberturaNc(Map criteria) {
    	 return this.getMotivoAberturaNcService().findOrderByDsMotivoAbertura(criteria);
     }
     
     public void validaCamposObrigatorios(TypedFlatMap criteria){
 		Long idFilialAbertura = criteria.getLong("filialAbertura.idFilial");
		Long idFilialResponsavel = criteria.getLong("filialResponsavel.idFilial");
		if (idFilialAbertura==null && idFilialResponsavel==null){
			throw new BusinessException("LMS-17024");
		}
     }
}
