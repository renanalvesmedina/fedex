package com.mercurio.lms.pendencia.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.joda.time.DateTime;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.service.UsuarioService;
import com.mercurio.lms.expedicao.model.DoctoServico;
import com.mercurio.lms.expedicao.model.service.DoctoServicoService;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.pendencia.model.ItemMda;
import com.mercurio.lms.pendencia.model.Mda;
import com.mercurio.lms.pendencia.model.service.ItemMdaService;
import com.mercurio.lms.pendencia.model.service.MdaService;
import com.mercurio.lms.sim.model.LocalizacaoMercadoria;
import com.mercurio.lms.sim.model.service.IncluirEventosRastreabilidadeInternacionalService;
import com.mercurio.lms.sim.model.service.LocalizacaoMercadoriaService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;


/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.pendencia.registrarRecebimentoMDAAction"
 */

public class RegistrarRecebimentoMDAAction extends CrudAction {
	private ItemMdaService itemMdaService;
	private FilialService filialService;
	private UsuarioService usuarioService;
	private LocalizacaoMercadoriaService localizacaoMercadoriaService;
	private IncluirEventosRastreabilidadeInternacionalService incluirEventosRastreabilidadeInternacionalService;
	private DoctoServicoService doctoServicoService;
	
	
	public void setMdaService(MdaService mdaService) {
		this.defaultService = mdaService;
	}
	
	public MdaService getMdaService() {
		return ((MdaService)defaultService);
	}
	
	public DoctoServicoService getDoctoServicoService() {
		return doctoServicoService;
	}
	
	public void setDoctoServicoService(DoctoServicoService doctoServicoService) {
		this.doctoServicoService = doctoServicoService;
	}
	
	public List findLookupBySgFilial(TypedFlatMap criteria) {
		return this.getFilialService().findLookupBySgFilial((String)criteria.get("sgFilial"), (String)criteria.get("tpAcesso"));
	}	
    
	public ItemMdaService getItemMdaService() {
		return itemMdaService;
	}
	
	public void setItemMdaService(ItemMdaService itemMdaService) {
		this.itemMdaService = itemMdaService;
	}
	
	public FilialService getFilialService() {
		return filialService;
	}
	
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	
	public UsuarioService getUsuarioService() {
		return usuarioService;
	}
	
	public void setUsuarioService(UsuarioService usuarioService) {
		this.usuarioService = usuarioService;
	}
	
	public LocalizacaoMercadoriaService getLocalizacaoMercadoriaService() {
		return localizacaoMercadoriaService;
	}
	
	public void setLocalizacaoMercadoriaService(
			LocalizacaoMercadoriaService localizacaoMercadoriaService) {
		this.localizacaoMercadoriaService = localizacaoMercadoriaService;
	}
	
	public IncluirEventosRastreabilidadeInternacionalService getIncluirEventosRastreabilidadeInternacionalService() {
		return incluirEventosRastreabilidadeInternacionalService;
	}
	
	public void setIncluirEventosRastreabilidadeInternacionalService(
			IncluirEventosRastreabilidadeInternacionalService incluirEventosRastreabilidadeInternacionalService) {
		this.incluirEventosRastreabilidadeInternacionalService = incluirEventosRastreabilidadeInternacionalService;
	}
	
	public List findMdaByNrDoctoServicoByIdFilialOrigem(TypedFlatMap criteria) {
		Long nrDoctoServico = criteria.getLong("nrDoctoServico");
		Long idFilialOrigem = criteria.getLong("filialByIdFilialOrigem.idFilial");
		
		List result = this.getMdaService().findMdaByNrDoctoServicoByIdFilialOrigem(nrDoctoServico, idFilialOrigem);
		
    	List listMda = new ArrayList();
    	for (Iterator iter = result.iterator(); iter.hasNext();) {
			Mda mda = (Mda) iter.next();			
    		TypedFlatMap mapMda = new TypedFlatMap();    		
    		
    		mapMda.put("idDoctoServico", mda.getIdDoctoServico());
    		mapMda.put("nrDoctoServico", mda.getNrDoctoServico());
    		mapMda.put("tpDestinatarioMda.description", mda.getTpDestinatarioMda().getDescription());
    		mapMda.put("tpDestinatarioMda.value", mda.getTpDestinatarioMda().getValue());
    		mapMda.put("tpDestinatarioMda.status", mda.getTpDestinatarioMda().getStatus());
    		mapMda.put("tpStatusMda.description", mda.getTpStatusMda().getDescription());
    		mapMda.put("tpStatusMda.value", mda.getTpStatusMda().getValue());
    		mapMda.put("tpStatusMda.status", mda.getTpStatusMda().getStatus());
    
    		//Se MDA está recebido então mostra dhRecebimento.
    		if (mda.getTpStatusMda().getValue().equals("N")) {
    			mapMda.put("dhRecebimento", mda.getDhRecebimento());
    		}
    		
    		mapMda.put("moeda.siglaSimbolo", mda.getMoeda().getSiglaSimbolo());
    		mapMda.put("vlTotalDocServico", mda.getVlTotalDocServico());    		
    		
    		if (mda.getFilialByIdFilialOrigem() != null) {
    			mapMda.put("filialByIdFilialOrigem.idFilial", mda.getFilialByIdFilialOrigem().getIdFilial());
    			mapMda.put("filialByIdFilialOrigem.sgFilial", mda.getFilialByIdFilialOrigem().getSgFilial());
    			mapMda.put("filialByIdFilialOrigem.pessoa.nmFantasia", mda.getFilialByIdFilialOrigem().getPessoa().getNmFantasia());	
			}    		
    		if (mda.getFilialByIdFilialDestino() != null) {
    			mapMda.put("filialByIdFilialDestino.idFilial", mda.getFilialByIdFilialDestino().getIdFilial());
    			mapMda.put("filialByIdFilialDestino.sgFilial", mda.getFilialByIdFilialDestino().getSgFilial());
    			mapMda.put("filialByIdFilialDestino.pessoa.nmFantasia", mda.getFilialByIdFilialDestino().getPessoa().getNmFantasia());	
			}
       		if (mda.getClienteByIdClienteRemetente() != null) {
    			mapMda.put("clienteByIdClienteRemetente.idCliente", mda.getClienteByIdClienteRemetente().getIdCliente());
    			mapMda.put("clienteByIdClienteRemetente.pessoa.nrIdentificacaoFormatado",
    					FormatUtils.formatIdentificacao(mda.getClienteByIdClienteRemetente().getPessoa().getTpIdentificacao(), 
    													mda.getClienteByIdClienteRemetente().getPessoa().getNrIdentificacao()));
    			mapMda.put("clienteByIdClienteRemetente.pessoa.nmPessoa", mda.getClienteByIdClienteRemetente().getPessoa().getNmPessoa());
			}
    		if (mda.getClienteByIdClienteDestinatario() != null) {
    			mapMda.put("clienteByIdClienteDestinatario.idCliente", mda.getClienteByIdClienteDestinatario().getIdCliente());
    			mapMda.put("clienteByIdClienteDestinatario.pessoa.nrIdentificacaoFormatado",
    					FormatUtils.formatIdentificacao(mda.getClienteByIdClienteDestinatario().getPessoa().getTpIdentificacao(), 
    													mda.getClienteByIdClienteDestinatario().getPessoa().getNrIdentificacao()));    			
    			mapMda.put("clienteByIdClienteDestinatario.pessoa.nmPessoa", mda.getClienteByIdClienteDestinatario().getPessoa().getNmPessoa());
			}
    		if (mda.getClienteByIdClienteConsignatario() != null) {
    			mapMda.put("clienteByIdClienteConsignatario.idCliente", mda.getClienteByIdClienteConsignatario().getIdCliente());
    			mapMda.put("clienteByIdClienteConsignatario.pessoa.nrIdentificacaoFormatado",
    					FormatUtils.formatIdentificacao(mda.getClienteByIdClienteConsignatario().getPessoa().getTpIdentificacao(), 
    													mda.getClienteByIdClienteConsignatario().getPessoa().getNrIdentificacao()));    			
    			mapMda.put("clienteByIdClienteConsignatario.pessoa.nmPessoa", mda.getClienteByIdClienteConsignatario().getPessoa().getNmPessoa());
			}    		
    		if (mda.getUsuarioByIdUsuarioRecebidoPor() != null) {
    			mapMda.put("usuarioByIdUsuarioRecebidoPor.idUsuario", mda.getUsuarioByIdUsuarioRecebidoPor().getIdUsuario());
    			mapMda.put("usuarioByIdUsuarioRecebidoPor.nrMatricula", mda.getUsuarioByIdUsuarioRecebidoPor().getNrMatricula());
    			mapMda.put("usuarioByIdUsuarioRecebidoPor.nmUsuario", mda.getUsuarioByIdUsuarioRecebidoPor().getNmUsuario());
    		}
    		if (mda.getNmRecebedorCliente() != null) {
    			mapMda.put("nmRecebedorCliente", mda.getNmRecebedorCliente());
			}
    		
    		listMda.add(mapMda);    		
    	}
    	
    	return listMda;		
	}
	
    public List findLookupUsuarioFuncionario(TypedFlatMap criteria) {
    	String nrMatricula = criteria.getString("nrMatricula");
    	if (nrMatricula.length() < 9) {
    		nrMatricula = FormatUtils.fillNumberWithZero(nrMatricula, 9);
		}
    	
    	return this.getUsuarioService().findLookupUsuarioFuncionario(criteria.getLong("idUsuario"), 
    																 nrMatricula, 
    																 null, null, null, null, true);
    }
    
    
    /**
     * Método que atualiza o MDA.
     * 
     * @param parameters
     * @return
     */
    public Serializable store(TypedFlatMap parameters) {
    	TypedFlatMap map = new TypedFlatMap();
    	
    	Long idMda = parameters.getLong("mda.idDoctoServico");
    	Long idUsuarioRecebidoPor = parameters.getLong("usuarioByIdUsuarioRecebidoPor.idUsuario");
    	String nmRecebedorCliente = parameters.getString("nmRecebedorCliente");

    	DateTime dataHoraRecebimento = getMdaService().executeRecebimentoMda(idMda, idUsuarioRecebidoPor, nmRecebedorCliente);
    	
    	map.put("dhRecebimento", dataHoraRecebimento);
    	return map;
    }
    
    /**
     * Método que valida um Documento de Serviço antes de salvar o registro.
     * @param criteria
     */
    public void validaDoctoServico(TypedFlatMap criteria) {
    	DoctoServico doctoServico = this.getMdaService().findMdaByIdDoctoServico(criteria.getLong("idDoctoServico"));
    	
    	// Verifica se o Documento de Serviço está bloqueado.
    	if (doctoServico.getBlBloqueado().booleanValue()) {
			throw new BusinessException("LMS-17012");
		}    	
    	// Verifica se a filial de localização do documento de serviço é diferente dá filial do usuario logado.
    	if (doctoServico.getFilialLocalizacao() != null &&
    			!doctoServico.getFilialLocalizacao().getIdFilial().equals(SessionUtils.getFilialSessao().getIdFilial())) {
    		throw new BusinessException("LMS-17013");
		}
    	// Verifica se a filial de destino do documento de serviço é diferente dá filial do usuario logado.
    	if (doctoServico.getFilialByIdFilialDestino() != null && 
    			!doctoServico.getFilialByIdFilialDestino().getIdFilial().equals(SessionUtils.getFilialSessao().getIdFilial())) {
    		throw new BusinessException("LMS-17015");
		}
    	// Verifica se a localização do Documento de Serviço corresponde a 'No Terminal', 'Em Descarga' ou 'Retornada no Terminal (35)'.
		LocalizacaoMercadoria localizacaoNoTerminal = this.getLocalizacaoMercadoriaService().
																			findLocalizacaoMercadoriaByCodigo(Short.valueOf("24"));
		LocalizacaoMercadoria localizacaoEmDescarga = this.getLocalizacaoMercadoriaService().
																			findLocalizacaoMercadoriaByCodigo(Short.valueOf("34"));
		LocalizacaoMercadoria localizacaoRetornadaTerminal = this.getLocalizacaoMercadoriaService().
																			findLocalizacaoMercadoriaByCodigo(Short.valueOf("35"));
		if ( doctoServico.getLocalizacaoMercadoria() != null && 
				(!doctoServico.getLocalizacaoMercadoria().getIdLocalizacaoMercadoria().equals(
    											localizacaoNoTerminal.getIdLocalizacaoMercadoria()) && 
    		     !doctoServico.getLocalizacaoMercadoria().getIdLocalizacaoMercadoria().equals(
    			 								localizacaoEmDescarga.getIdLocalizacaoMercadoria())&& 
    			 !doctoServico.getLocalizacaoMercadoria().getIdLocalizacaoMercadoria().equals(
    					 						localizacaoRetornadaTerminal.getIdLocalizacaoMercadoria())) ) {
    		throw new BusinessException("LMS-17014");
		}
    }
    
    /**
     * Retorna um ResultSetPage com os objetos de ItemMDA a serem mostrados na grid.
     * 
     * @param TypedFlatMap criteria
     * @return
     */
    public ResultSetPage findPaginatedItemMda(TypedFlatMap criteria) {
    	criteria.put("idDoctoServico", criteria.getLong("mda.idDoctoServico"));
    	ResultSetPage resultSetPage = this.getItemMdaService().findPaginatedItemMda(criteria);
    	
    	List listItemMda = new ArrayList();
    	for (Iterator iter = resultSetPage.getList().iterator(); iter.hasNext();) {
    		ItemMda itemMda = (ItemMda) iter.next();
    		TypedFlatMap mapItemMda = new TypedFlatMap();
    		
    		mapItemMda.put("idItemMda", itemMda.getIdItemMda());
    		if (itemMda.getDoctoServico() != null) {
        		mapItemMda.put("doctoServico.tpDocumentoServico.description", itemMda.getDoctoServico().getTpDocumentoServico().getDescription());
        		mapItemMda.put("doctoServico.tpDocumentoServico.value", itemMda.getDoctoServico().getTpDocumentoServico().getValue());
        		mapItemMda.put("doctoServico.tpDocumentoServico.status", itemMda.getDoctoServico().getTpDocumentoServico().getStatus());
        		mapItemMda.put("doctoServico.filialByIdFilialOrigem.sgFilial", itemMda.getDoctoServico().getFilialByIdFilialOrigem().getSgFilial());
        		mapItemMda.put("doctoServico.nrDoctoServico", itemMda.getDoctoServico().getNrDoctoServico());
			}
    		mapItemMda.put("dsMercadoria", itemMda.getDsMercadoria());
    		mapItemMda.put("qtVolumes", itemMda.getQtVolumes());
    		mapItemMda.put("psItem", itemMda.getPsItem());
    		mapItemMda.put("moeda.sgMoeda", itemMda.getMoeda().getSgMoeda());
    		mapItemMda.put("moeda.dsSimbolo", itemMda.getMoeda().getDsSimbolo());
    		mapItemMda.put("vlMercadoria", itemMda.getVlMercadoria());
    		mapItemMda.put("naturezaProduto.dsNaturezaProduto", itemMda.getNaturezaProduto().getDsNaturezaProduto());
    		mapItemMda.put("obItemMda", itemMda.getObItemMda());
    		
    		if (itemMda.getNaoConformidade() != null) {
    			mapItemMda.put("naoConformidade.filial.sgFilial", itemMda.getNaoConformidade().getFilial().getSgFilial());
    			mapItemMda.put("naoConformidade.nrNaoConformidade", itemMda.getNaoConformidade().getNrNaoConformidade());
			}    		
    		
    		listItemMda.add(mapItemMda);
    	}
    	resultSetPage.setList(listItemMda);
    	
    	return resultSetPage;
    }
    
    /**
     * Faz a consulta ao banco, retornando o numero de registros encontrados 
     * para determinados parametros.
     * 
     * @param TypedFlatMap criteria
     * @return
     */
    public Integer getRowCountItemMda(TypedFlatMap criteria) {
    	criteria.put("idDoctoServico", criteria.getLong("mda.idDoctoServico"));
    	return this.getItemMdaService().getRowCountItemMda(criteria);    	
    }    
    
	/**
	 * Pega a data atual do sistema
	 */
	public DateTime getDataHoraAtual() {
    	return JTDateTimeUtils.getDataHoraAtual();
	}    

}
