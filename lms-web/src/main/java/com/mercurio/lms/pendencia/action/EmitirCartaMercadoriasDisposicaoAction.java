package com.mercurio.lms.pendencia.action;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.mercurio.adsm.framework.model.FindDefinition;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.pojo.UsuarioADSM;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.model.service.UsuarioADSMService;
import com.mercurio.adsm.framework.report.ReportExecutionManager;
import com.mercurio.adsm.framework.util.FilterList;
import com.mercurio.adsm.framework.util.FilterResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.Contato;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.entrega.model.service.OcorrenciaEntregaService;
import com.mercurio.lms.entrega.model.service.ReciboReembolsoService;
import com.mercurio.lms.expedicao.model.DoctoServico;
import com.mercurio.lms.expedicao.model.NotaFiscalConhecimento;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.model.service.CtoInternacionalService;
import com.mercurio.lms.expedicao.model.service.DoctoServicoService;
import com.mercurio.lms.expedicao.model.service.NotaFiscalConhecimentoService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.pendencia.model.service.MdaService;
import com.mercurio.lms.pendencia.model.service.OcorrenciaDoctoServicoService;
import com.mercurio.lms.pendencia.report.EmitirCartaMercadoriasDisposicaoService;
import com.mercurio.lms.sim.model.service.IncluirEventosRastreabilidadeInternacionalService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.service.ClienteService;


/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.pendencia.emitirCartaMercadoriasDisposicaoAction"
 */

public class EmitirCartaMercadoriasDisposicaoAction {

	private DomainValueService domainValueService;
	private ConhecimentoService conhecimentoService;
	private CtoInternacionalService ctoInternacionalService;
	private MdaService mdaService;
	private ReciboReembolsoService reciboReembolsoService;
	private FilialService filialService;
	private DoctoServicoService doctoServicoService;
	private ClienteService clienteService;
	private OcorrenciaDoctoServicoService ocorrenciaDoctoServicoService;
	private EmitirCartaMercadoriasDisposicaoService emitirCartaMercadoriasDisposicaoService;
	private NotaFiscalConhecimentoService notaFiscalConhecimentoService;	
	private IncluirEventosRastreabilidadeInternacionalService incluirEventosRastreabilidadeInternacionalService;
	private OcorrenciaEntregaService ocorrenciaEntregaService;
	private ReportExecutionManager reportExecutionManager;
	private ConfiguracoesFacade configuracoesFacade;
	private UsuarioADSMService usuarioADSMService;

	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}
	
	public NotaFiscalConhecimentoService getNotaFiscalConhecimentoService() {
		return notaFiscalConhecimentoService;
	}

	public void setNotaFiscalConhecimentoService(NotaFiscalConhecimentoService notaFiscalConhecimentoService) {
		this.notaFiscalConhecimentoService = notaFiscalConhecimentoService;
	}

	public void setEmitirCartaMercadoriasDisposicaoService(EmitirCartaMercadoriasDisposicaoService emitirCartaMercadoriasDisposicaoService) {
		this.emitirCartaMercadoriasDisposicaoService = emitirCartaMercadoriasDisposicaoService;
	}	
	
	public EmitirCartaMercadoriasDisposicaoService getEmitirCartaMercadoriasDisposicaoService() {
		return emitirCartaMercadoriasDisposicaoService;
	}

	public DomainValueService getDomainValueService() {
		return domainValueService;
	}

	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}

	public ConhecimentoService getConhecimentoService() {
		return conhecimentoService;
	}

	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
	}

	public CtoInternacionalService getCtoInternacionalService() {
		return ctoInternacionalService;
	}

	public void setCtoInternacionalService(
			CtoInternacionalService ctoInternacionalService) {
		this.ctoInternacionalService = ctoInternacionalService;
	}

	public MdaService getMdaService() {
		return mdaService;
	}

	public void setMdaService(MdaService mdaService) {
		this.mdaService = mdaService;
	}

	public ReciboReembolsoService getReciboReembolsoService() {
		return reciboReembolsoService;
	}

	public void setReciboReembolsoService(
			ReciboReembolsoService reciboReembolsoService) {
		this.reciboReembolsoService = reciboReembolsoService;
	}
	
	public FilialService getFilialService() {
		return filialService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	
	public DoctoServicoService getDoctoServicoService() {
		return doctoServicoService;
	}

	public void setDoctoServicoService(DoctoServicoService doctoServicoService) {
		this.doctoServicoService = doctoServicoService;
	}
	
	public ClienteService getClienteService() {
		return clienteService;
	}

	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}
	
	public OcorrenciaDoctoServicoService getOcorrenciaDoctoServicoService() {
		return ocorrenciaDoctoServicoService;
	}

	public void setOcorrenciaDoctoServicoService(OcorrenciaDoctoServicoService ocorrenciaDoctoServicoService) {
		this.ocorrenciaDoctoServicoService = ocorrenciaDoctoServicoService;
	}
	
	public IncluirEventosRastreabilidadeInternacionalService getIncluirEventosRastreabilidadeInternacionalService() {
		return incluirEventosRastreabilidadeInternacionalService;
	}

	public void setIncluirEventosRastreabilidadeInternacionalService(
			IncluirEventosRastreabilidadeInternacionalService incluirEventosRastreabilidadeInternacionalService) {
		this.incluirEventosRastreabilidadeInternacionalService = incluirEventosRastreabilidadeInternacionalService;
	}
	
	public OcorrenciaEntregaService getOcorrenciaEntregaService() {
		return ocorrenciaEntregaService;
	}

	public void setOcorrenciaEntregaService(
			OcorrenciaEntregaService ocorrenciaEntregaService) {
		this.ocorrenciaEntregaService = ocorrenciaEntregaService;
	}
	
	//################################
    // Metodos default para a tela
    //################################	

	public String execute(TypedFlatMap parameters) throws Exception {
		return this.reportExecutionManager.generateReportLocator(this.emitirCartaMercadoriasDisposicaoService, parameters);
	}

	public ResultSetPage findPaginated(TypedFlatMap criteria) {
		criteria.put("_currentPage", "1");
		criteria.put("_pageSize", "10000");
		Long idDoctoServico = criteria.getLong("doctoServico.idDoctoServico");
		
		FilterResultSetPage filterResultSetPage = new FilterResultSetPage(
				this.getDoctoServicoService()
					.findPaginatedDoctoServicoWithNFConhecimento(idDoctoServico, FindDefinition.createFindDefinition(criteria))) {
						public Map filterItem(Object item) {
							NotaFiscalConhecimento notaFiscalConhecimento = (NotaFiscalConhecimento)item;
							
				    		TypedFlatMap result = new TypedFlatMap();
				    		result.put("idNotaFiscalConhecimento", notaFiscalConhecimento.getIdNotaFiscalConhecimento());
				    		result.put("nrNotaFiscal", notaFiscalConhecimento.getNrNotaFiscal());
				    		result.put("dtEmissao", notaFiscalConhecimento.getDtEmissao());
				    		result.put("dtSaida", notaFiscalConhecimento.getDtEmissao());
				    		result.put("qtVolumes", notaFiscalConhecimento.getQtVolumes());
				    		result.put("psMercadoria", notaFiscalConhecimento.getPsMercadoria());
				    		result.put("siglaSimbolo", notaFiscalConhecimento.getConhecimento().getMoeda().getSiglaSimbolo());
				    		result.put("vlTotal", notaFiscalConhecimento.getVlTotal());
				    		
				    		return result;
						}
					};
        return (ResultSetPage)filterResultSetPage.doFilter();
	}

	public Integer getRowCount(TypedFlatMap criteria) {
		Long idDoctoServico = criteria.getLong("doctoServico.idDoctoServico");
		return this.getDoctoServicoService().getRowCountDoctoServicoWithNFConhecimento(idDoctoServico);
	}
	
	//################################
    // Metodos para a tag documents
    //################################
	

	/**
	 * Método que popula a combo de tipos de documento apenas com CTR, CRT, MDA, CTE, NTE.
     * 
     * @param criteria
     * @return List
     */
    public List findTipoDocumentoServico(Map criteria) {
		List dominiosValidos = Arrays.asList("CTR", "CRT", "NFT", "MDA", "CTE", "NTE");
        List retorno = getDomainValueService().findByDomainNameAndValues("DM_TIPO_DOCUMENTO_SERVICO", dominiosValidos);
        return retorno;
    }
    
    /**
     * Busca a filial baseado no documento de serviço
     * @param criteria
     * @return
     */
    public List findLookupFilialByDocumentoServico(Map criteria) {
    	FilterList filter = new FilterList(getFilialService().findLookup(criteria)) {
			public Map filterItem(Object item) {
				Filial filial = (Filial)item;
    			TypedFlatMap typedFlatMap = new TypedFlatMap();
	    		typedFlatMap.put("idFilial", filial.getIdFilial());
		    	typedFlatMap.put("sgFilial", filial.getSgFilial());
				return typedFlatMap;
			}
    	};
    	return (List)filter.doFilter();
    }

    
    // FIND'S LOOKUP'S PARA FILIAL DO TIPO DE DOCTO DE SERVICO ESCOLHIDO
    public List findLookupServiceDocumentFilialCTR(Map criteria) {
        return findLookupFilialByDocumentoServico(criteria);
    }

     public List findLookupServiceDocumentFilialCRT(Map criteria) {
        return findLookupFilialByDocumentoServico(criteria);
    }
    
     public List findLookupServiceDocumentFilialNDN(Map criteria) {
    	 return findLookupFilialByDocumentoServico(criteria);
     }
     
     public List findLookupServiceDocumentFilialNFT(Map criteria) {
    	 return findLookupFilialByDocumentoServico(criteria);
     }
     
     public List findLookupServiceDocumentFilialNFS(Map criteria) {
    	 return findLookupFilialByDocumentoServico(criteria);
     }
     
     public List findLookupServiceDocumentFilialMDA(Map criteria) {
    	 return findLookupFilialByDocumentoServico(criteria);
     }
     
     public List findLookupServiceDocumentFilialRRE(Map criteria) {
    	 return findLookupFilialByDocumentoServico(criteria);
     }
     
	public List findLookupServiceDocumentFilialCTE(Map criteria) {
		return findLookupFilialByDocumentoServico(criteria);
	}

	public List findLookupServiceDocumentFilialNTE(Map criteria) {
		return findLookupFilialByDocumentoServico(criteria);
	}

     //findLookup's para a tag documento de serviço 
    public List findLookupServiceDocumentNumberCTR(Map criteria) {
    	return getConhecimentoService().findLookup(criteria);
    }

    public List findLookupServiceDocumentNumberCRT(Map criteria) {
    	return getCtoInternacionalService().findLookup(criteria);
    }
    
    public List findLookupServiceDocumentNumberNFT(Map criteria) {
    	return getConhecimentoService().findLookup(criteria);
    }

    public List findLookupServiceDocumentNumberRRE(Map criteria) {
    	return getReciboReembolsoService().findLookup(criteria);
    }
    
    public List findLookupServiceDocumentNumberMDA(Map criteria) {
    	return getMdaService().findLookup(criteria);
    }
     
	public List findLookupServiceDocumentNumberCTE(Map criteria) {
		return getConhecimentoService().findLookup(criteria);
	}

	public List findLookupServiceDocumentNumberNTE(Map criteria) {
		return getConhecimentoService().findLookup(criteria);
	}

     //################################
     // Metodos para os objetos default
     //################################
     
     /**
      * Busca os dados basicos da tela de <code>emitirCartaMercadoriaDisposicao</code>.
      * 
      * @param TypedFlatMap criteria
      */
	public TypedFlatMap findBasicData(TypedFlatMap criteria) {

   	 	TypedFlatMap returnMap = new TypedFlatMap();
   	 
	   	Usuario usuario = SessionUtils.getUsuarioLogado();
	   	Filial filial = SessionUtils.getFilialSessao();
	   	 
	   	Long idCliente = this.getDoctoServicoService().findIdClienteRemetenteById(criteria.getLong("idDoctoServico"));
	   	Cliente cliente = this.getClienteService().findById(idCliente);
	   	 
	   	returnMap.put("clienteRemetente.idCliente",  cliente.getIdCliente());
	   	returnMap.put("clienteRemetente.pessoa.nmPessoa",  cliente.getPessoa().getNmPessoa());
	   	returnMap.put("clienteRemetente.pessoa.nrIdentificacao",  FormatUtils
	   			.formatIdentificacao(cliente.getPessoa().getTpIdentificacao(), 
	   					String.valueOf(cliente.getPessoa().getNrIdentificacao())));
	   	 
	   	String email = cliente.getPessoa().getDsEmail();
	   	String contatosCliente = "";
	   	List<Contato> contatos = configuracoesFacade.findContatosByIdPessoaAndTipoContato(idCliente, "OC");
	   	if(contatos != null && contatos.size() > 0){
	   		String emails = "";
	   		for (Contato contato : contatos) {
	   			if(caracteresMaior256Caracteres(emails, contato.getDsEmail())){
	   				continue;
	    		}
	       	    if(!StringUtils.isEmpty(contato.getDsEmail())){
	       	    	emails += contato.getDsEmail() + ";";
	       	    	contatosCliente += contato.getNmContato() + " ; ";
	       	    }				
	   		 }
	   		 email = (emails.equals("") ? email : emails.substring(0, (emails.lastIndexOf(";") == -1 ? emails.length() : emails.lastIndexOf(";"))));
	   		 contatosCliente = contatosCliente.substring(0, (contatosCliente.lastIndexOf(";") == -1 ? contatosCliente.length() : contatosCliente.lastIndexOf(";")));
	   	 }
	   	 
	   	 if (email == null || StringUtils.isEmpty(email)){
	   	     returnMap.put("errorKey", "LMS-17056: "+configuracoesFacade.getMensagem("LMS-17056"));
	   	 }
	   	 
	   	 returnMap.put("clienteRemetente.pessoa.dsMail", email );
	   	 if (!contatosCliente.equals("")) returnMap.put("contatoCliente", contatosCliente);
	   	 returnMap.put("filial.idFilial",  filial.getIdFilial());
	   	 returnMap.put("filial.pessoa.nmFantasia",  filial.getPessoa().getNmFantasia());
	   	 returnMap.put("filial.sgFilial",  filial.getSgFilial());
	   	 
	   	 UsuarioADSM usuarioADSM = usuarioADSMService.findUsuarioADSMByLogin(usuario.getLogin());
	   	 
	   	 returnMap.put("usuario.nmUsuario", usuario.getNmUsuario());
	        returnMap.put("usuario.nrMatricula", usuario.getNrMatricula());
	   	 returnMap.put("usuario.dsEmail", usuario.getDsEmail());
	   	 returnMap.put("nrDdd", usuarioADSM.getNrDdd());
	   	 returnMap.put("nrTelefone", usuarioADSM.getNrFone());
	   	 
	   	 return returnMap;
    }
     
    private boolean caracteresMaior256Caracteres(String retorno, String string) {
    	String caracteres = retorno + string;
		if (caracteres.length() > 256)
			return true;
		return false;
	}

	/**
      * Realiza a geracao do <code>EventoDoctoServico</code> para o doctoServico
      * em questao.
      * 
      * @param criteria
      */
     public TypedFlatMap updateEventoDoctoServico(Long idDoctoServico, String emailDestinatario) {
    	 DoctoServico doctoServico = doctoServicoService.findByIdJoinFilial(idDoctoServico);
    	 String strDoctoServico = doctoServico.getFilialByIdFilialOrigem().getSgFilial() + " " + StringUtils.leftPad(doctoServico.getNrDoctoServico().toString(), 8, '0');
    	 this.getIncluirEventosRastreabilidadeInternacionalService()
    	 	.generateEventoDocumento(
    			Short.valueOf("48"),
    			doctoServico.getIdDoctoServico(),
    			SessionUtils.getFilialSessao().getIdFilial(), 
    			strDoctoServico,
    			JTDateTimeUtils.getDataHoraAtual(),
    			null,
    			buildDsObservacao(SessionUtils.getFilialSessao(), emailDestinatario),
    			doctoServico.getTpDocumentoServico().getValue());
    	 
    	 return null;
     }
     
     private String buildDsObservacao(Filial filial, String email){
     	return filial.getSiglaNomeFilial() + ", Email do Destinatário: " + email; 
     }
     
     /**
      * Busca os dados da ocorrencia de um documento de servico em questao  
      * 
      * @param criteria
      * @return
      */
     public TypedFlatMap findOcorrenciaByIdDoctoServico(TypedFlatMap criteria) {
    	 
    	 TypedFlatMap result = this.getOcorrenciaDoctoServicoService()
    	 		.findOcorrenciaByIdDoctoServico(criteria.getLong("idDoctoServico"));
    	 
    	 return result;
     }

 	public List findOcorrenciaEntrega(Map criteria){
		return ocorrenciaEntregaService.findLookup(criteria);
	}
     
     public void sendEmailCartaOcorrencia(TypedFlatMap criteria) {
    	 Long idDoctoServico = criteria.getLong("formBean.doctoServico.idDoctoServico");
    	 
    	 DoctoServico doctoServico = doctoServicoService.findByIdJoinFilial(idDoctoServico);
    	 criteria.put("nrDoctoServico", doctoServico.getNrDoctoServico());
    	 criteria.put("tpDoctoServico", doctoServico.getTpDocumentoServico().getDescriptionAsString());
    	 criteria.put("sgfilialOrigem", doctoServico.getFilialByIdFilialOrigem().getSgFilial());
    	 
    	//notas fiscais
 		List<Map> idsNotasFiscais = (List<Map>)criteria.get("idsNotaFiscalConhecimento");
 		NotaFiscalConhecimento nf = null;
 		StringBuilder notasFiscais = new StringBuilder();
 		for (Map mapNotasFiscais : idsNotasFiscais) {
 			nf = notaFiscalConhecimentoService.findById( Long.valueOf((String)mapNotasFiscais.get("idNotaFiscalConhecimento")));
 			if (nf != null){
 				if (notasFiscais.length() > 0){
 					notasFiscais.append(", ");
 				}
 				notasFiscais.append("NF ").append(nf.getNrNotaFiscal());
 			}
 		}
 		criteria.put("notasFiscais", notasFiscais.toString());
    	 
		String emailDestinatario = criteria.getString("formBean.clienteRemetente.pessoa.dsMail");
    	 
		this.updateEventoDoctoServico(idDoctoServico, emailDestinatario);
    	this.getNotaFiscalConhecimentoService().sendEmailCartaOcorrencia(criteria, emailDestinatario, criteria.getString("formBean.usuario.dsEmail"));
     }    
     
     /**
 	 * Faz a validacao do PCE.
 	 *  
 	 * @param criteria
 	 * @return
 	 */
 	public TypedFlatMap validatePCE(TypedFlatMap criteria) {
 		Long idDoctoServico = criteria.getLong("idDoctoServico");
 		return this.getNotaFiscalConhecimentoService().validatePCE(idDoctoServico);
 	}

 	/**
 	 * Faz a validacao de documento bloqueado
 	 *  
 	 * @param criteria
 	 * @return
 	 */
 	public TypedFlatMap validateDocBloqueado(TypedFlatMap criteria) {
 		Long idDoctoServico = criteria.getLong("idDoctoServico");
 		return this.getNotaFiscalConhecimentoService().validateDocBloqueado(idDoctoServico);
 	}

	public void setReportExecutionManager(
			ReportExecutionManager reportExecutionManager) {
		this.reportExecutionManager = reportExecutionManager;
	}

    public void setUsuarioADSMService(UsuarioADSMService usuarioADSMService) {
        this.usuarioADSMService = usuarioADSMService;
    }
}
