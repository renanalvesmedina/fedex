package com.mercurio.lms.pendencia.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.pendencia.model.OcorrenciaPendencia;
import com.mercurio.lms.pendencia.model.service.OcorrenciaPendenciaService;
import com.mercurio.lms.sim.model.Evento;
import com.mercurio.lms.sim.model.service.EventoService;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;



/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.pendencia.manterOcorrenciasPendenciaAction"
 */
public class ManterOcorrenciasPendenciaAction extends CrudAction {
	
	private EventoService eventoService;

	public Serializable storeCustom(TypedFlatMap tfm) {
		
		OcorrenciaPendencia ocorrenciaPendencia = new OcorrenciaPendencia();
		ocorrenciaPendencia.setIdOcorrenciaPendencia(tfm.getLong("idOcorrenciaPendencia"));
		ocorrenciaPendencia.setBlApreensao(tfm.getBoolean("blApreensao"));
		ocorrenciaPendencia.setBlDescontaDpe(tfm.getBoolean("blDescontaDPE"));
		ocorrenciaPendencia.setBlExigeRnc(tfm.getBoolean("blExigeRNC"));
		ocorrenciaPendencia.setBlPermiteOcorParaManif(tfm.getBoolean("blPermiteOcorrenciaManifesto"));
		ocorrenciaPendencia.setCdOcorrencia(tfm.getShort("cdOcorrencia"));
		ocorrenciaPendencia.setDsOcorrencia(tfm.getVarcharI18n("dsOcorrencia"));
		
		Evento evento = new Evento();
		evento.setIdEvento(tfm.getLong("evento.idEvento"));
		ocorrenciaPendencia.setEvento(evento);
		ocorrenciaPendencia.setTpOcorrencia(tfm.getDomainValue("tpOcorrencia"));
		ocorrenciaPendencia.setTpPermissaoUnidade(tfm.getDomainValue("tpPermissaoUnidade"));
		ocorrenciaPendencia.setTpSituacao(tfm.getDomainValue("tpSituacao"));
		
		return getOcorrenciaPendenciaService().store(ocorrenciaPendencia);
	}
	
	public ResultSetPage findPaginatedCustom(TypedFlatMap tfm) {
		List list = new ArrayList();
		ResultSetPage rsp = getOcorrenciaPendenciaService().findPaginated(tfm);
		for(Iterator it = rsp.getList().iterator(); it.hasNext(); ) {
			OcorrenciaPendencia ocorrenciaPendencia = (OcorrenciaPendencia)it.next();
			Map map = new HashMap(10);
			map.put("idOcorrenciaPendencia", ocorrenciaPendencia.getIdOcorrenciaPendencia());
			map.put("cdOcorrencia", ocorrenciaPendencia.getCdOcorrencia());
			map.put("dsOcorrencia", ocorrenciaPendencia.getDsOcorrencia());
			map.put("tpOcorrencia", ocorrenciaPendencia.getTpOcorrencia());
			map.put("blDescontaDpe", ocorrenciaPendencia.getBlDescontaDpe());
			map.put("blExigeRNC", ocorrenciaPendencia.getBlExigeRnc());
			map.put("blApreensao", ocorrenciaPendencia.getBlApreensao());
			map.put("tpPermissaoUnidade", ocorrenciaPendencia.getTpPermissaoUnidade());
			map.put("blPermiteOcorrenciaManifesto", ocorrenciaPendencia.getBlPermiteOcorParaManif());
			map.put("tpSituacao", ocorrenciaPendencia.getTpSituacao());
			list.add(map);
		}
		rsp.setList(list);
		return rsp;
	}
	
	public Integer getRowCountCustom(TypedFlatMap tfm) {
		return getOcorrenciaPendenciaService().getRowCount(tfm);
	}

	public TypedFlatMap findByIdCustom(java.lang.Long id) {
		OcorrenciaPendencia ocorrenciaPendencia = getOcorrenciaPendenciaService().findById(id);
		TypedFlatMap tfm = new TypedFlatMap();
		tfm.put("idOcorrenciaPendencia", ocorrenciaPendencia.getIdOcorrenciaPendencia());
		tfm.put("cdOcorrencia", ocorrenciaPendencia.getCdOcorrencia());
		tfm.put("dsOcorrencia", ocorrenciaPendencia.getDsOcorrencia());
		tfm.put("tpOcorrencia.value", ocorrenciaPendencia.getTpOcorrencia().getValue());
		if (ocorrenciaPendencia.getEvento()!=null) {
			tfm.put("evento.idEvento", ocorrenciaPendencia.getEvento().getIdEvento());
			tfm.put("evento.cdEvento", ocorrenciaPendencia.getEvento().getCdEvento());
			tfm.put("evento.dsEvento", ocorrenciaPendencia.getEvento().getDsEvento());
		}
		tfm.put("blDescontaDPE", ocorrenciaPendencia.getBlDescontaDpe());
		tfm.put("blExigeRNC", ocorrenciaPendencia.getBlExigeRnc());
		tfm.put("tpPermissaoUnidade.value", ocorrenciaPendencia.getTpPermissaoUnidade().getValue());
		tfm.put("blApreensao", ocorrenciaPendencia.getBlApreensao());
		tfm.put("blPermiteOcorrenciaManifesto", ocorrenciaPendencia.getBlPermiteOcorParaManif());
		tfm.put("tpSituacao.value", ocorrenciaPendencia.getTpSituacao().getValue());
    	return tfm;
    }	
	
    public List findLookupEvento(Map criteria){
    	return eventoService.findLookupEvento(criteria);
    }

    /*********************************************************************************************
     * General Methods
     *********************************************************************************************/
	public void removeById(java.lang.Long id) {
        getOcorrenciaPendenciaService().removeById(id);
    }

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	getOcorrenciaPendenciaService().removeByIds(ids);
    }
    
    /*********************************************************************************************
     * Getters n' Setters
     *********************************************************************************************/
	public void setOcorrenciaPendenciaService(OcorrenciaPendenciaService ocorrenciaPendenciaService) {
		super.defaultService = ocorrenciaPendenciaService;
	}
	
	private OcorrenciaPendenciaService getOcorrenciaPendenciaService() {
		return (OcorrenciaPendenciaService) super.defaultService;
	}

	public void setEventoService(EventoService eventoService) {
		this.eventoService = eventoService;
	}

}
