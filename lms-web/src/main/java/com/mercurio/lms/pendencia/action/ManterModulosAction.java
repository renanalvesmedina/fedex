package com.mercurio.lms.pendencia.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.pendencia.model.Modulo;
import com.mercurio.lms.pendencia.model.service.ModuloService;
import com.mercurio.lms.portaria.model.Terminal;
import com.mercurio.lms.portaria.model.service.TerminalService;
import com.mercurio.lms.util.session.SessionUtils;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;


/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.pendencia.manterModulosAction"
 */

public class ManterModulosAction extends CrudAction {
	
	private ModuloService moduloService;
	private FilialService filialService;
	private TerminalService terminalService;
	
	public ModuloService getModuloService() {
		return moduloService;
	}

	public Serializable store(TypedFlatMap tfm) {
		Modulo modulo = new Modulo();
		modulo.setIdModulo(tfm.getLong("idModulo"));
		Terminal terminal = new Terminal();
		terminal.setIdTerminal(tfm.getLong("terminal.idTerminal"));
		modulo.setTerminal(terminal);
		modulo.setNrModulo(tfm.getShort("numeroModulo"));
		modulo.setTpSituacao(tfm.getDomainValue("situacao"));
		return getModuloService().store(modulo);
	}
	
	public ResultSetPage findPaginatedCustom(TypedFlatMap tfm) {
		ResultSetPage rsp = getModuloService().findPaginatedCustom(tfm); 
		return rsp;
	}
	
	public Integer getRowCountCustom(TypedFlatMap tfm) {
		return getModuloService().getRowCountCustom(tfm);
	}
	
	public void setModuloService(ModuloService moduloService) {
		this.moduloService = moduloService;
	}
	
    public FilialService getFilialService() {
		return filialService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	
	public TerminalService getTerminalService() {
		return terminalService;
	}

	public void setTerminalService(TerminalService terminalService) {
		this.terminalService = terminalService;
	}

	public void removeById(java.lang.Long id) {
        getModuloService().removeById(id);
    }

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	getModuloService().removeByIds(ids);
    }

    public TypedFlatMap findByIdCustom(java.lang.Long id) {
    	Modulo modulo = getModuloService().findById(id);
    	Terminal terminal = modulo.getTerminal();
    	
    	TypedFlatMap tfm = new TypedFlatMap();
    	tfm.put("idModulo", modulo.getIdModulo());
    	tfm.put("terminal.filial.idFilial", terminal != null ? terminal.getFilial().getIdFilial() : null);
    	tfm.put("terminal.filial.sgFilial", terminal != null ? terminal.getFilial().getSgFilial() : null);
    	tfm.put("terminal.filial.pessoa.nmFantasia", terminal != null ? terminal.getFilial().getPessoa().getNmFantasia() : null);
    	tfm.put("terminal.idTerminal", terminal != null ? terminal.getIdTerminal() : null);
    	tfm.put("numeroModulo", modulo.getNrModulo());
    	tfm.put("situacao", modulo.getTpSituacao().getValue());
    	
    	return tfm;
    }

    /**
     * Busca o usuario da sessao e retorna para a tela
     * 
     * @return
     */
    public TypedFlatMap findFilialUsuarioLogado() {
    	
    	Filial filial = SessionUtils.getFilialSessao();

    	TypedFlatMap tfm = new TypedFlatMap();
    	tfm.put("filial.idFilial", filial.getIdFilial());
    	tfm.put("filial.sgFilial", filial.getSgFilial());
    	tfm.put("filial.pessoa.nmPessoa", filial.getPessoa().getNmFantasia());

    	return tfm;
    }
    
	public List findLookupFilial(Map map) {
		List listFilialLookup = this.filialService.findLookup(map);
		List result = new ArrayList();
		if (listFilialLookup.size() > 0) {
			for (Iterator iter = listFilialLookup.iterator(); iter.hasNext();) {
				Filial filial = (Filial) iter.next();
				if (SessionUtils.isFilialAllowedByUsuario(filial)) {
					result.add(filial);
				} 
			}
			if (result.size()==0){
				throw new BusinessException("LMS-00050");
			}
		}
		return result;
	}

    
	/**
	 * Método para retornar uma coleção de Terminais ordenados por dsTerminal.
	 * Utilizado em combobox.
	 * 
	 * @author Moacir Zardo Junior
	 * @param criteria
	 * @return List ordenada pela descrição do setor
	 */
    public List findTerminaisVigentesOrVigenciaFuturaByFilial(TypedFlatMap tfm){
    	Long idFilial = tfm.getLong("terminal.filial.idFilial");
        return getModuloService().findTerminaisVigentesOrVigenciaFuturaByFilial(idFilial);
    }
}
