package com.mercurio.lms.pendencia.action;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.joda.time.DateTime;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.util.FilterList;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Moeda;
import com.mercurio.lms.configuracoes.model.service.MoedaService;
import com.mercurio.lms.expedicao.model.DoctoServico;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.model.service.CtoInternacionalService;
import com.mercurio.lms.expedicao.model.service.DoctoServicoService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.pendencia.model.OcorrenciaPendencia;
import com.mercurio.lms.pendencia.model.service.MdaService;
import com.mercurio.lms.pendencia.model.service.OcorrenciaDoctoServicoService;
import com.mercurio.lms.pendencia.model.service.OcorrenciaPendenciaService;
import com.mercurio.lms.rnc.model.NaoConformidade;
import com.mercurio.lms.rnc.model.service.NaoConformidadeService;
import com.mercurio.lms.seguros.model.ProcessoSinistro;
import com.mercurio.lms.seguros.model.service.ProcessoSinistroService;
import com.mercurio.lms.sim.model.service.EventoDocumentoServicoService;
import com.mercurio.lms.sim.model.service.EventoService;
import com.mercurio.lms.util.session.SessionUtils;


/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.pendencia.registrarOcorrenciasDocumentosServicoAction"
 */ 

public class RegistrarOcorrenciasDocumentosServicoAction extends CrudAction {
	private DoctoServicoService doctoServicoService;
	private ConhecimentoService conhecimentoService;
	private CtoInternacionalService ctoInternacionalService;
	private MdaService mdaService;
	private DomainValueService domainValueService;
	private FilialService filialService;
	private OcorrenciaPendenciaService ocorrenciaPendenciaService;
	private NaoConformidadeService naoConformidadeService;
	private MoedaService moedaService;
	private ProcessoSinistroService processoSinistroService;
	private EventoDocumentoServicoService eventoDocumentoServicoService;
	private EventoService eventoService;
	private OcorrenciaDoctoServicoService ocorrenciaDoctoServicoService;
	
	
	public ConhecimentoService getConhecimentoService() {
		return conhecimentoService;
	}
	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
	}
	public CtoInternacionalService getCtoInternacionalService() {
		return ctoInternacionalService;
	}
	public void setCtoInternacionalService(CtoInternacionalService ctoInternacionalService) {
		this.ctoInternacionalService = ctoInternacionalService;
	}
	public DoctoServicoService getDoctoServicoService() {
		return doctoServicoService;
	}
	public void setDoctoServicoService(DoctoServicoService doctoServicoService) {
		this.doctoServicoService = doctoServicoService;
	}
	public DomainValueService getDomainValueService() {
		return domainValueService;
	}
	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}
	public EventoDocumentoServicoService getEventoDocumentoServicoService() {
		return eventoDocumentoServicoService;
	}
	public void setEventoDocumentoServicoService(EventoDocumentoServicoService eventoDocumentoServicoService) {
		this.eventoDocumentoServicoService = eventoDocumentoServicoService;
	}
	public EventoService getEventoService() {
		return eventoService;
	}
	public void setEventoService(EventoService eventoService) {
		this.eventoService = eventoService;
	}
	public FilialService getFilialService() {
		return filialService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public MdaService getMdaService() {
		return mdaService;
	}
	public void setMdaService(MdaService mdaService) {
		this.mdaService = mdaService;
	}
	public MoedaService getMoedaService() {
		return moedaService;
	}
	public void setMoedaService(MoedaService moedaService) {
		this.moedaService = moedaService;
	}
	public NaoConformidadeService getNaoConformidadeService() {
		return naoConformidadeService;
	}
	public void setNaoConformidadeService(NaoConformidadeService naoConformidadeService) {
		this.naoConformidadeService = naoConformidadeService;
	}
	public OcorrenciaDoctoServicoService getOcorrenciaDoctoServicoService() {
		return ocorrenciaDoctoServicoService;
	}
	public void setOcorrenciaDoctoServicoService(OcorrenciaDoctoServicoService ocorrenciaDoctoServicoService) {
		this.ocorrenciaDoctoServicoService = ocorrenciaDoctoServicoService;
	}
	public OcorrenciaPendenciaService getOcorrenciaPendenciaService() {
		return ocorrenciaPendenciaService;
	}
	public void setOcorrenciaPendenciaService(OcorrenciaPendenciaService ocorrenciaPendenciaService) {
		this.ocorrenciaPendenciaService = ocorrenciaPendenciaService;
	}
	public ProcessoSinistroService getProcessoSinistroService() {
		return processoSinistroService;
	}
	public void setProcessoSinistroService(ProcessoSinistroService processoSinistroService) {
		this.processoSinistroService = processoSinistroService;
	}
	
	
	
	public List findLookupOcorrenciaPendencia(TypedFlatMap criteria) {
		return this.getOcorrenciaPendenciaService().findLookupToRegistrarOcorrenciasDoctosServico(criteria);
	}	

	public List findLookupBySgFilial(Map criteria) {
		return this.getFilialService().findLookupBySgFilial((String)criteria.get("sgFilial"), (String)criteria.get("tpAcesso"));
	}
	
	public List findLookupNaoConformidade(Map criteria) {
		return this.getNaoConformidadeService().findLookup(criteria);
	}
	
   	public List findMoeda(Map criteria) {
		List retorno = new ArrayList();
		List listMoedas = this.getMoedaService().find(criteria);
		for (Iterator iter = listMoedas.iterator(); iter.hasNext();) {
			TypedFlatMap map = new TypedFlatMap();
			Moeda moeda = (Moeda) iter.next();
			map.put("idMoeda", moeda.getIdMoeda());
			map.put("siglaSimbolo", moeda.getSiglaSimbolo());
			map.put("tpSituacao.value", moeda.getTpSituacao().getValue());
			retorno.add(map);
		}
		return retorno;
	}
	
	/**
	 * Método que salva o registro no banco.
	 * @param mapBean
	 * @return
	 */
	public TypedFlatMap store(TypedFlatMap mapBean) {
		mapBean.put("blOcorrenciaDocumentoManual", Boolean.TRUE);
		DateTime dataHora = getOcorrenciaDoctoServicoService().executeRegistrarOcorrenciaDoctoServico(mapBean);
		TypedFlatMap map = new TypedFlatMap();
		map.put("dataHora", dataHora);
		return map;
	}
	
	
	/**
	 * Pega o usuario logado na sessão com sua moeda e sua respectiva filial. 
	 */
	public TypedFlatMap getDadosSessao() {
		TypedFlatMap map = new TypedFlatMap();
		Boolean blMatriz = Boolean.FALSE;
		
		// Verifica se a filial em questão é uma Matriz.
		blMatriz = Boolean.valueOf(SessionUtils.isFilialSessaoMatriz());
		
		map.put("blMatriz", blMatriz);		
		map.put("idMoedaSessao", SessionUtils.getMoedaSessao().getIdMoeda());
						
		return map;
	}	
	
	/**
	 * Método que valida se o DoctoServico possui código do evento igual a '21' 
	 * não permitir bloquear / liberar.
	 * @param criteria
	 */
	public TypedFlatMap validaDoctoServico(TypedFlatMap criteria) {
		Long idDoctoServico = criteria.getLong("idDoctoServico");
		eventoDocumentoServicoService.validateDoctoServico(idDoctoServico);
		return getDadosNaoConformidadeAndProcessoSinistro(idDoctoServico);
	}


	/**
	 * Método que valida a Ocorrencia Pendencia.
	 * @param criteria
	 */
	public TypedFlatMap validaOcorrenciaPendencia(TypedFlatMap criteria) {
		return ocorrenciaPendenciaService.
			validateOcorrenciaPendenciaByRegistroOcorrenciasDocumentoServico(
									criteria.getBoolean("ocorrenciaPendencia.blExigeRnc"),
									criteria.getLong("naoConformidade.idNaoConformidade"), 
									criteria.getLong("doctoServico.idDoctoServico"), 
									criteria.getLong("ocorrenciaPendencia.evento.idEvento"),
									criteria.getLong("ocorrenciaPendencia.idOcorrenciaPendencia"),
									criteria.getLong("idOcorrenciaBloqueio"),
									criteria.getString("ocorrenciaPendencia.tpOcorrencia"));
	} 
	
	/**
	 * Método que busca uma NaoConformidade a partir de um ID de DoctoServico.
	 * 
	 * @param criteria
	 * @return
	 */
	private TypedFlatMap getDadosNaoConformidadeAndProcessoSinistro(Long idDoctoServico) {
		DoctoServico doctoServico = doctoServicoService.findById(idDoctoServico);
		TypedFlatMap map = new TypedFlatMap();

		if (doctoServico.getBlBloqueado().booleanValue() == true){
		// Então buscar a ocorrência de bloqueio.	
			OcorrenciaPendencia ocorrenciaBloqueio = ocorrenciaPendenciaService.findOcorrenciaBloqueioFromOcorrenciaDoctoServicoEmAberto(idDoctoServico);
			if (ocorrenciaBloqueio==null){
				//A flag do doctoServico indica que existe uma ocorrencia de bloqueio em aberto, mas ela nao existe.
				//Cadastrar uma mensagem e disparar uma exception?
			}
			map.put("idOcorrenciaBloqueio", ocorrenciaBloqueio.getIdOcorrenciaPendencia());
			map.put("cdOcorrenciaBloqueio", ocorrenciaBloqueio.getCdOcorrencia());
			map.put("dsOcorrenciaBloqueio", ocorrenciaBloqueio.getDsOcorrencia());
		}

		NaoConformidade naoConformidade = this.getNaoConformidadeService().findNaoConformidadeByIdDoctoServico(idDoctoServico);
		if (naoConformidade != null) {
			map.put("idNaoConformidade", naoConformidade.getIdNaoConformidade());
			map.put("sgFilial", naoConformidade.getFilial().getSgFilial());
			map.put("nrNaoConformidade", naoConformidade.getNrNaoConformidade());
		}

		List<ProcessoSinistro> processosSinistroList = this.getProcessoSinistroService().findProcessoSinistroByIdDoctoServico(idDoctoServico);
		
		if (processosSinistroList != null && !processosSinistroList.isEmpty()) {
			map.put("idProcessoSinistro", processosSinistroList.get(0).getIdProcessoSinistro());
			map.put("nrProcessoSinistro", processosSinistroList.get(0).getNrProcessoSinistro());
		}
		
		return map;
	}	
	

    /**
     * #############################
     * # Documento Servico Methods #
     * #############################
     */

	/**
	 * Busca os tipos de documento serviço.
	 * @param criteria
	 * @return
	 */
    public List findTipoDocumentoServico(TypedFlatMap criteria) {
    	List dominiosValidos = new ArrayList();
    	dominiosValidos.add("CTR");
    	dominiosValidos.add("CRT");
    	dominiosValidos.add("NFT");
    	dominiosValidos.add("CTE");
    	dominiosValidos.add("NTE");
    	List retorno = this.getDomainValueService().findByDomainNameAndValues("DM_TIPO_DOCUMENTO_SERVICO", dominiosValidos);
    	return retorno;
    }	
	
    /**
     * Busca a filial baseado no documento de serviço
     * @param criteria
     * @return
     */
    public List findLookupFilialByDocumentoServico(Map criteria) {
    	FilterList filter = new FilterList(this.getFilialService().findLookup(criteria)) {
			public Map filterItem(Object item) {
				Filial filial = (Filial)item;
    			TypedFlatMap typedFlatMap = new TypedFlatMap();
	    		typedFlatMap.put("idFilial", filial.getIdFilial());
		    	typedFlatMap.put("sgFilial", filial.getSgFilial());
				return typedFlatMap;
			}
    	};
    	return (List)filter.doFilter();
    }

    
    /**
     * FindLookup para filial do tipo de DoctoServico Escolhido.
     */ 
    public List findLookupServiceDocumentFilialCTR(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }

    public List findLookupServiceDocumentFilialCRT(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }

    public List findLookupServiceDocumentFilialNFT(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }    
    
    public List findLookupServiceDocumentFilialMDA(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }
    
    public List findLookupServiceDocumentFilialCTE(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }
    
    /**
     * FindLookup para a tag DoctoServico.
     */  
    public List findLookupServiceDocumentNumberCTR(Map criteria) {
    	return this.getConhecimentoService().findLookup(criteria);
    }

    public List findLookupServiceDocumentNumberCRT(Map criteria) {    	
    	return this.getCtoInternacionalService().findLookup(criteria);
    }
    
    public List findLookupServiceDocumentNumberNFT(Map criteria) {
    	return this.getConhecimentoService().findLookup(criteria);
    }

    public List findLookupServiceDocumentNumberMDA(Map criteria) {
    	return this.getMdaService().findLookup(criteria);
    }
    
    public List findLookupServiceDocumentNumberCTE(Map criteria) {
    	return this.getConhecimentoService().findLookup(criteria);
}
}
