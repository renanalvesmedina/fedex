package com.mercurio.lms.pendencia.action;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.joda.time.YearMonthDay;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.masterdetail.ItemList;
import com.mercurio.adsm.framework.model.masterdetail.ItemListConfig;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailAction;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailFactory;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailKey;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntry;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntryConfig;
import com.mercurio.adsm.framework.util.FilterList;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.EnderecoPessoa;
import com.mercurio.lms.configuracoes.model.Moeda;
import com.mercurio.lms.configuracoes.model.Servico;
import com.mercurio.lms.configuracoes.model.Setor;
import com.mercurio.lms.configuracoes.model.service.EnderecoPessoaService;
import com.mercurio.lms.configuracoes.model.service.MoedaService;
import com.mercurio.lms.configuracoes.model.service.ServicoService;
import com.mercurio.lms.configuracoes.model.service.SetorService;
import com.mercurio.lms.configuracoes.model.service.UsuarioService;
import com.mercurio.lms.entrega.model.service.ReciboReembolsoService;
import com.mercurio.lms.expedicao.model.Conhecimento;
import com.mercurio.lms.expedicao.model.NaturezaProduto;
import com.mercurio.lms.expedicao.model.NotaFiscalConhecimento;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.model.service.CtoInternacionalService;
import com.mercurio.lms.expedicao.model.service.DoctoServicoService;
import com.mercurio.lms.expedicao.model.service.NaturezaProdutoService;
import com.mercurio.lms.expedicao.model.service.NotaFiscalConhecimentoService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.FluxoFilial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.McdService;
import com.mercurio.lms.municipios.model.service.PpeService;
import com.mercurio.lms.pendencia.model.ItemMda;
import com.mercurio.lms.pendencia.model.Mda;
import com.mercurio.lms.pendencia.model.NfItemMda;
import com.mercurio.lms.pendencia.model.service.ItemMdaService;
import com.mercurio.lms.pendencia.model.service.MdaService;
import com.mercurio.lms.rnc.model.NaoConformidade;
import com.mercurio.lms.rnc.model.service.NaoConformidadeService;
import com.mercurio.lms.util.BigDecimalUtils;
import com.mercurio.lms.util.CompareUtils;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.service.ClienteService;


/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.pendencia.abrirMDAAction"
 */

public class AbrirMDAAction extends MasterDetailAction {
	private ItemMdaService itemMdaService;
	private ClienteService clienteService;
	private EnderecoPessoaService enderecoPessoaService;
	private MoedaService moedaService;
	private FilialService filialService;	
	private NaturezaProdutoService naturezaProdutoService;
	private DoctoServicoService doctoServicoService;
	private SetorService setorService;
	private UsuarioService usuarioService;
	private ConhecimentoService conhecimentoService;
	private CtoInternacionalService ctoInternacionalService;
	private ReciboReembolsoService reciboReembolsoService;
	private NaoConformidadeService naoConformidadeService;
	private NotaFiscalConhecimentoService notaFiscalConhecimentoService;
	private PpeService ppeService;
	private McdService mcdService;
	private ServicoService servicoService;

	public ItemMdaService getItemMdaService() {
		return itemMdaService;
	}
	public void setItemMdaService(ItemMdaService itemMdaService) {
		this.itemMdaService = itemMdaService;
	}
	public ClienteService getClienteService() {
		return clienteService;
	}
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}
	public EnderecoPessoaService getEnderecoPessoaService() {
		return enderecoPessoaService;
	}
	public void setEnderecoPessoaService(EnderecoPessoaService enderecoPessoaService) {
		this.enderecoPessoaService = enderecoPessoaService;
	}
	public FilialService getFilialService() {
		return filialService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public MoedaService getMoedaService() {
		return moedaService;
	}
	public void setMoedaService(MoedaService moedaService) {
		this.moedaService = moedaService;
	}
	public NaturezaProdutoService getNaturezaProdutoService() {
		return naturezaProdutoService;
	}
	public void setNaturezaProdutoService(NaturezaProdutoService naturezaProdutoService) {
		this.naturezaProdutoService = naturezaProdutoService;
	}
	public DoctoServicoService getDoctoServicoService() {
		return doctoServicoService;
	}
	public void setDoctoServicoService(DoctoServicoService doctoServicoService) {
		this.doctoServicoService = doctoServicoService;
	}
	public SetorService getSetorService() {
		return setorService;
	}
	public void setSetorService(SetorService setorService) {
		this.setorService = setorService;
	}
	public UsuarioService getUsuarioService() {
		return usuarioService;
	}
	public void setUsuarioService(UsuarioService usuarioService) {
		this.usuarioService = usuarioService;
	}
	public ConhecimentoService getConhecimentoService() {
		return conhecimentoService;
	}
	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
	}
	public CtoInternacionalService getCtoInternacionalService() {
		return ctoInternacionalService;
	}
	public void setCtoInternacionalService(
			CtoInternacionalService ctoInternacionalService) {
		this.ctoInternacionalService = ctoInternacionalService;
	}
	public ReciboReembolsoService getReciboReembolsoService() {
		return reciboReembolsoService;
	}
	public void setReciboReembolsoService(ReciboReembolsoService reciboReembolsoService) {
		this.reciboReembolsoService = reciboReembolsoService;
	}
	public NaoConformidadeService getNaoConformidadeService() {
		return naoConformidadeService;
	}
	public void setNaoConformidadeService(
			NaoConformidadeService naoConformidadeService) {
		this.naoConformidadeService = naoConformidadeService;
	}
	public NotaFiscalConhecimentoService getNotaFiscalConhecimentoService() {
		return notaFiscalConhecimentoService;
	}
	public void setNotaFiscalConhecimentoService(NotaFiscalConhecimentoService notaFiscalConhecimentoService) {
		this.notaFiscalConhecimentoService = notaFiscalConhecimentoService;
	}
	public PpeService getPpeService() {
		return ppeService;
	}
	public void setPpeService(PpeService ppeService) {
		this.ppeService = ppeService;
	}
	public ServicoService getServicoService() {
		return servicoService;
	}
	public void setServicoService(ServicoService servicoService) {
		this.servicoService = servicoService;
	}
	public void setMdaService(MdaService mdaService) {
		this.setMasterService(mdaService);
	}
	public McdService getMcdService() {
		return mcdService;
	}
	public void setMcdService(McdService mcdService) {
		this.mcdService = mcdService;
	}
	public MdaService getMdaService() {
		return (MdaService) super.getMasterService();
	}	

	
	/**
	 * Declaração serviço principal da Action.
	 */
	
	public List findLookupFilial(Map criteria) {		
		return this.getFilialService().findLookup(criteria);
	}
	
	public List findLookupCliente(Map criteria) {		
		return this.getClienteService().findLookup(criteria);
	}
	
	public List findLookupEnderecoPessoa(Map criteria) {		
		return this.getEnderecoPessoaService().findLookup(criteria);
	}
	
	public List findMoeda(Map criteria) {		
		return this.getMoedaService().find(criteria);
	}

	public List findNaturezaProduto(Map criteria) {		
		return this.getNaturezaProdutoService().find(criteria);
	}
	
	public List findLookupDoctoServico(Map criteria) {
		return this.getDoctoServicoService().findLookup(criteria);
	}
		
	public List findLookupBySgFilial(Map criteria) {
		return this.getFilialService().findLookupBySgFilial((String)criteria.get("sgFilial"), (String)criteria.get("tpAcesso"));
	}
	
	public List findLookupNaoConformidade(Map criteria) {
		List naoConformidades = this.getNaoConformidadeService().findLookup(criteria);
		for (Iterator iter = naoConformidades.iterator(); iter.hasNext();) {
			NaoConformidade naoConformidade = (NaoConformidade) iter.next();
			if(naoConformidade.getDoctoServico()!=null && naoConformidade.getDoctoServico().getTpDocumentoServico().getValue().equals("CTR")){
				Conhecimento conhecimento = (Conhecimento)naoConformidade.getDoctoServico();
				conhecimento.setNotaFiscalConhecimentos(this.findNotasFiscaisConhecimento(conhecimento.getIdDoctoServico()));
	    		conhecimento.setNaturezaProduto(this.getNaturezaProdutoService().findById(conhecimento.getNaturezaProduto().getIdNaturezaProduto()));
			}
			
		}
		return naoConformidades;
		
	}
	
    public List findLookupUsuarioFuncionario(TypedFlatMap tfm){
    	String nrMatricula = tfm.getString("nrMatricula");
    	if (nrMatricula.length() < 9) {
    		nrMatricula = FormatUtils.fillNumberWithZero(nrMatricula, 9);
		}
    	
    	return this.getUsuarioService().findLookupUsuarioFuncionario(tfm.getLong("idUsuario"), 
    																 nrMatricula, 
    																 tfm.getLong("filial.idFilial"), 
    																 null, null, null, true);
    }
	
	/**
	 * Retorna o EnderecoPessoa referente ao ID do Cliente
	 */
	public Map getEnderecoPessoa(TypedFlatMap criteria) {
		TypedFlatMap tfm = new TypedFlatMap();		
		Long idPessoa = criteria.getLong("pessoa.idPessoa");
		String tpIdentificacao = criteria.getString("pessoa.tpIdentificacao");
		String tipoSelecionado = criteria.getString("tipoSelecionado");
		YearMonthDay dataAtual = JTDateTimeUtils.getDataAtual();
		
		List listEnderecoPessoa = new ArrayList();
		
		if(tpIdentificacao.equals("CNPJ")) {
			listEnderecoPessoa = this.getEnderecoPessoaService().findEnderecoPessoaByIdPessoaByTipoEnderecoPessoa(idPessoa, "COM", dataAtual);
			
			if (listEnderecoPessoa.size() == 0) {
				if (tipoSelecionado.equals("remetente")) {
					listEnderecoPessoa = this.getEnderecoPessoaService().findEnderecoPessoaByIdPessoaByTipoEnderecoPessoa(idPessoa, "COL", dataAtual);
				} else if (tipoSelecionado.equals("destinatario") || tipoSelecionado.equals("consignatario")) {
					listEnderecoPessoa = this.getEnderecoPessoaService().findEnderecoPessoaByIdPessoaByTipoEnderecoPessoa(idPessoa, "ENT", dataAtual);
				}
			}
			if (listEnderecoPessoa.size() == 0) {
				listEnderecoPessoa = this.getEnderecoPessoaService().findEnderecoPessoaByIdPessoaByTipoEnderecoPessoa(idPessoa, "RES", dataAtual);				
			}			
		} else if(tpIdentificacao.equals("CPF")) {
			listEnderecoPessoa = this.getEnderecoPessoaService().findEnderecoPessoaByIdPessoaByTipoEnderecoPessoa(idPessoa, "RES", dataAtual);
			if (listEnderecoPessoa.size() == 0) {
				listEnderecoPessoa = this.getEnderecoPessoaService().findEnderecoPessoaByIdPessoaByTipoEnderecoPessoa(idPessoa, "COM", dataAtual);				
			}
			if (listEnderecoPessoa.size() == 0) {
				if (tipoSelecionado.equals("remetente")) {
					listEnderecoPessoa = this.getEnderecoPessoaService().findEnderecoPessoaByIdPessoaByTipoEnderecoPessoa(idPessoa, "COL", dataAtual);
				} else if (tipoSelecionado.equals("destinatario") || tipoSelecionado.equals("consignatario")) {
					listEnderecoPessoa = this.getEnderecoPessoaService().findEnderecoPessoaByIdPessoaByTipoEnderecoPessoa(idPessoa, "ENT", dataAtual);
				}			
			}
		}

		EnderecoPessoa enderecoPessoa;
		if(listEnderecoPessoa.size() == 1) {			
			enderecoPessoa = (EnderecoPessoa) listEnderecoPessoa.get(0);
		} else if(listEnderecoPessoa.size() == 0) {			
			enderecoPessoa = this.getEnderecoPessoaService().findEnderecoPessoaPadrao(idPessoa);
			if (enderecoPessoa == null) {
				return null;
			}
		} else {	
			return null;
		}
		
		//FIXME Ao inves de montar um Map, utilizar o método formatEnderecoPessoaCompleto(EnderecoPessoa ep,Boolean withBairro)
		//da classe EnderecoPessoaService e retornar a String já montada.
		tfm.put("idEnderecoPessoa", enderecoPessoa.getIdEnderecoPessoa());
		tfm.put("tipoLogradouro.dsTipoLogradouro", enderecoPessoa.getTipoLogradouro().getDsTipoLogradouro());
		tfm.put("dsEndereco", enderecoPessoa.getDsEndereco());
		tfm.put("nrEndereco", enderecoPessoa.getNrEndereco());
		tfm.put("dsComplemento", enderecoPessoa.getDsComplemento());
		tfm.put("dsBairro", enderecoPessoa.getDsBairro());
		tfm.put("nrCep", enderecoPessoa.getNrCep());
		tfm.put("municipio.idMunicipio", enderecoPessoa.getMunicipio().getIdMunicipio());
		tfm.put("municipio.nmMunicipio", enderecoPessoa.getMunicipio().getNmMunicipio());
		tfm.put("municipio.unidadeFederativa.sgUnidadeFederativa", enderecoPessoa.getMunicipio().getUnidadeFederativa().getSgUnidadeFederativa());
		
		return tfm;
		
	}	
	
	/**
	 * Método que retorna os dados do Setor.
	 * @param criteria
	 * @return
	 */
	public List findSetor(TypedFlatMap criteria) {
		List retorno = new ArrayList();
		List setores = this.getSetorService().findSetorOrderByDsSetor(criteria);
		for (Iterator iter = setores.iterator(); iter.hasNext();) {
			TypedFlatMap mapSetor = new TypedFlatMap();
			Setor setor = (Setor) iter.next();
			mapSetor.put("idSetor", setor.getIdSetor());
			mapSetor.put("dsSetor", setor.getDsSetor());
			retorno.add(mapSetor);
		}
		return retorno;
	}
	
	
	/**
	 * Pega o usuario logado na sessão com sua moeda e sua respectiva filial. 
	 */
	public TypedFlatMap getDadosSessao() {
		TypedFlatMap map = new TypedFlatMap();
		Boolean blMatriz = Boolean.FALSE;
		
		Filial filial = SessionUtils.getFilialSessao();
		Moeda moeda = SessionUtils.getMoedaSessao();
		
		// Verifica se a filial em questão é uma Matriz.
		blMatriz = Boolean.valueOf(SessionUtils.isFilialSessaoMatriz());
		
		map.put("blMatriz", blMatriz);
		map.put("idFilialSessao", filial.getIdFilial());
		map.put("sgFilialSessao", filial.getSgFilial());
		map.put("nmFilialSessao", filial.getPessoa().getNmFantasia());		
		map.put("idMoedaSessao", moeda.getIdMoeda());
		map.put("pessoa.idPessoa", filial.getPessoa().getIdPessoa());		
		map.put("pessoa.tpIdentificacao.description", filial.getPessoa().getTpIdentificacao().getDescription());
		map.put("pessoa.tpIdentificacao.value", filial.getPessoa().getTpIdentificacao().getValue());
		map.put("pessoa.tpIdentificacao.status", filial.getPessoa().getTpIdentificacao().getStatus());
						
		map.put("idUsuario", SessionUtils.getUsuarioLogado().getIdUsuario());
		map.put("nrMatricula", SessionUtils.getUsuarioLogado().getNrMatricula());
		map.put("nmUsuario", SessionUtils.getUsuarioLogado().getNmUsuario());
						
		return map;
	}	
	
	/**
	 * Método que busca uma NaoConformidade a partir de um ID de DoctoServico.
	 * 
	 * @param criteria
	 * @return
	 */
	public TypedFlatMap getDadosNaoConformidade(TypedFlatMap criteria) {
		TypedFlatMap mapNC = new TypedFlatMap();
		
		NaoConformidade naoConformidade = this.getNaoConformidadeService().
											findNaoConformidadeByIdDoctoServico(criteria.getLong("idDoctoServico"));
		
		if (naoConformidade != null) {
			mapNC.put("idNaoConformidade", naoConformidade.getIdNaoConformidade());
			mapNC.put("sgFilial", naoConformidade.getFilial().getSgFilial());
			mapNC.put("nrNaoConformidade", naoConformidade.getNrNaoConformidade());
		}
				
		return mapNC;
	}
	
	/**
	 * Método que busca as notas fiscais de conhecimento relacionado com o DoctoServico.
	 * @param criteria
	 * @return
	 */
	public TypedFlatMap getNotasFiscalConhecimento(TypedFlatMap criteria) {
		TypedFlatMap map = new TypedFlatMap();
		List listNotaFiscalConhecimento = this.findNotasFiscaisConhecimento(criteria.getLong("idDoctoServico"));
		List listNotas = new ArrayList();
		for (Iterator iter = listNotaFiscalConhecimento.iterator(); iter.hasNext();) {
			NotaFiscalConhecimento notaFiscalConhecimento = (NotaFiscalConhecimento) iter.next();
			TypedFlatMap mapNotas = new TypedFlatMap();
			mapNotas.put("idNotaFiscalConhecimento", notaFiscalConhecimento.getIdNotaFiscalConhecimento());
			mapNotas.put("nrNotaFiscal", notaFiscalConhecimento.getNrNotaFiscal());	
			listNotas.add(mapNotas);
		}
		map.put("notaFiscalConhecimentoSource", listNotas);
		
		return map;
	}
	
	
    /**
     * #############################
     * # Documento Servico Methods #
     * #############################
     */
        
	/**
	 * Busca os tipos de documento serviço.
	 * @param criteria
	 * @return
	 */
    public List findTipoDocumentoServico(TypedFlatMap criteria) {
    	List dominiosValidos = Arrays.asList("CTR"
    	,"CRT"
    	,"NFT"
    	,"MDA"  
    	,"CTE"
    	,"NTE");
    	List retorno = this.getDomainValueService().findByDomainNameAndValues("DM_TIPO_DOCUMENTO_SERVICO", dominiosValidos);
    	return retorno;
    }	
	
    /**
     * Busca a filial baseado no documento de serviço
     * @param criteria
     * @return
     */
    public List findLookupFilialByDocumentoServico(Map criteria) {
    	FilterList filter = new FilterList(getFilialService().findLookup(criteria)) {
			public Map filterItem(Object item) {
				Filial filial = (Filial)item;
    			TypedFlatMap typedFlatMap = new TypedFlatMap();
	    		typedFlatMap.put("idFilial", filial.getIdFilial());
		    	typedFlatMap.put("sgFilial", filial.getSgFilial());
		    	typedFlatMap.put("pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
				return typedFlatMap;
			}
    	};
    	return (List)filter.doFilter();
    }

    
    /**
     * FindLookup para filial do tipo de DoctoServico Escolhido.
     */ 
    public List findLookupServiceDocumentFilialCTR(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }

    public List findLookupServiceDocumentFilialCRT(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }

    public List findLookupServiceDocumentFilialNFT(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }    
    
    public List findLookupServiceDocumentFilialMDA(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }
    
    public List findLookupServiceDocumentFilialCTE(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }
    
    public List findLookupServiceDocumentFilialNTE(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }
    
    /**
     * FindLookup para a tag DoctoServico.
     */  
    public List findLookupServiceDocumentNumberCTR(Map criteria) {
    	List list = this.getConhecimentoService().findLookup(criteria);
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		Conhecimento conhecimento = (Conhecimento) iter.next();
    		conhecimento.setNaturezaProduto(this.getNaturezaProdutoService().
    														findById(conhecimento.getNaturezaProduto().getIdNaturezaProduto()));
    		conhecimento.setNotaFiscalConhecimentos(this.findNotasFiscaisConhecimento(conhecimento.getIdDoctoServico()));
    	}
    	return list;
    }

    public List findLookupServiceDocumentNumberCRT(Map criteria) {    	
    	return this.getCtoInternacionalService().findLookup(criteria);
    }
    
    public List findLookupServiceDocumentNumberNFT(Map criteria) {
    	return this.getConhecimentoService().findLookup(criteria);
    }

    public List findLookupServiceDocumentNumberMDA(Map criteria) {
    	return this.getMdaService().findLookup(criteria);
    }
    
    public List findLookupServiceDocumentNumberCTE(Map criteria) {
    	return this.getConhecimentoService().findLookup(criteria);
    }
    
    public List findLookupServiceDocumentNumberNTE(Map criteria) {
    	return this.getConhecimentoService().findLookup(criteria);
    }
    
    
    /**
     * Método que valida se os valores dos campos informados não são 
     * menores que os valores do DoctoServico. 
     * @param criteria
     */
    public void validateCamposDoctoServico(TypedFlatMap criteria) {
    	String campo = criteria.getString("campo");

    	if (criteria.getInteger("valorDoctoServico") != null) {
	    	if (campo.equals("Volumes")) {    		
	    		Integer valorDoctoServico = criteria.getInteger("valorDoctoServico");
	    		Integer valorInformado = criteria.getInteger("valorInformado");
	    		
	    		if (valorInformado.intValue() > valorDoctoServico.intValue()) {
					throw new BusinessException("LMS-17011", new Object[]{campo, valorInformado, valorDoctoServico});
				}			
			} else if (campo.equals("Peso")) {
	    		BigDecimal valorDoctoServico = criteria.getBigDecimal("valorDoctoServico") != null ? 
											   criteria.getBigDecimal("valorDoctoServico") : BigDecimalUtils.ZERO;
	    		BigDecimal valorInformado = criteria.getBigDecimal("valorInformado");
	    		
	    		if (CompareUtils.gt(valorInformado, valorDoctoServico)) {
					throw new BusinessException("LMS-17011", new Object[]{campo, 
													FormatUtils.formatDecimal("#,###,##0.000", valorInformado), 
													FormatUtils.formatDecimal("#,###,##0.000", valorDoctoServico)});
				}	
			} else if (campo.equals("Valor Mercadoria")) {
	    		BigDecimal valorDoctoServico = criteria.getBigDecimal("valorDoctoServico") != null ? 
	    									   criteria.getBigDecimal("valorDoctoServico") : BigDecimalUtils.ZERO;
	    		BigDecimal valorInformado = criteria.getBigDecimal("valorInformado");
	    		String siglaSimbolo = criteria.getString("siglaSimbolo");
	    		
	    		if (CompareUtils.gt(valorInformado, valorDoctoServico)) {
					throw new BusinessException("LMS-17011", new Object[]{campo, 
							siglaSimbolo + " " + FormatUtils.formatDecimal("#,###,###,###,###,##0.00", valorInformado), 
							siglaSimbolo + " " + FormatUtils.formatDecimal("#,###,###,###,###,##0.00", valorDoctoServico)});
				}
			}
    	}
    }

	
	/**
	 * ##############################################################################################
	 * #							 INICIO DOS MÉTODOS PARA TELA DE DF2							#
	 * ##############################################################################################
	 */
    
    public TypedFlatMap store(TypedFlatMap tfmBean) {  	
    	MasterEntry entry = getMasterFromSession(tfmBean.getLong("idDoctoServico"), true);
    	Mda mda = (Mda) entry.getMaster();
    	
    	mda.setIdDoctoServico(tfmBean.getLong("idDoctoServico"));
    	if (tfmBean.getLong("nrDoctoServico") != null) {
    		mda.setNrDoctoServico(tfmBean.getLong("nrDoctoServico"));
		}
    	if (tfmBean.getLong("clienteByIdClienteRemetente.idCliente") != null) {
			mda.setClienteByIdClienteRemetente(this.getClienteService().findById(tfmBean.getLong("clienteByIdClienteRemetente.idCliente")));
		} else { // REMETENTE É FILIAL
			mda.setClienteByIdClienteRemetente(this.getClienteService().findById(tfmBean.getLong("filialByIdFilialOrigem.idFilial")));
		}
    	
    	if (tfmBean.getLong("enderecoPessoaRemetente.idEnderecoPessoa") != null) {
			mda.setEnderecoRemetente(this.getEnderecoPessoaService().findById(tfmBean.getLong("enderecoPessoaRemetente.idEnderecoPessoa")));
		}    	

    	Cliente clienteDestinatario = null;
    	if (tfmBean.getLong("clienteByIdClienteDestinatario.idCliente") != null) {
    		clienteDestinatario = clienteService.findById(tfmBean.getLong("clienteByIdClienteDestinatario.idCliente"));
    	} else { // DESTINATARIO É FILIAL
    		clienteDestinatario = clienteService.findById(tfmBean.getLong("filialByIdFilialDestino.idFilial"));
    	}
		mda.setClienteByIdClienteDestinatario(clienteDestinatario);

    	if (tfmBean.getLong("enderecoPessoaDestinatario.idEnderecoPessoa") != null) {
			mda.setEnderecoDestinatario(this.getEnderecoPessoaService().findById(tfmBean.getLong("enderecoPessoaDestinatario.idEnderecoPessoa")));
		}    	
    	if (tfmBean.getLong("clienteByIdClienteConsignatario.idCliente") != null) {
			mda.setClienteByIdClienteConsignatario(this.getClienteService().findById(tfmBean.getLong("clienteByIdClienteConsignatario.idCliente")));
		}
    	if (tfmBean.getLong("enderecoPessoaConsignatario.idEnderecoPessoa") != null) {
			mda.setEnderecoConsignatario(this.getEnderecoPessoaService().findById(tfmBean.getLong("enderecoPessoaConsignatario.idEnderecoPessoa")));
		}

    	mda.setUsuarioByIdUsuarioInclusao(SessionUtils.getUsuarioLogado());


    	Filial filialOrigem = null;
    	if (tfmBean.getLong("filialByIdFilialOrigem.idFilial") != null) {
    		filialOrigem = this.getFilialService().findById(tfmBean.getLong("filialByIdFilialOrigem.idFilial")); 
    	}
    	else {
    		filialOrigem = SessionUtils.getFilialSessao();
    	}
		mda.setFilialByIdFilialOrigem(filialOrigem);
		mda.setFilialLocalizacao(filialOrigem);
    	
    	
    	Filial filialDestino = null;
    	if (tfmBean.getLong("filialByIdFilialDestino.idFilial") != null) {
    		filialDestino = this.getFilialService().findById(tfmBean.getLong("filialByIdFilialDestino.idFilial"));
    	} else if (clienteDestinatario != null){
    		filialDestino = clienteDestinatario.getFilialByIdFilialAtendeOperacional();
    	} else if (tfmBean.getLong("municipioDestinatario.idMunicipio") != null){    		
    		Long idFilial = this.getPpeService().findFilialColetaMunicipio(tfmBean.getLong("municipioDestinatario.idMunicipio"), null, null);
    		filialDestino = this.getFilialService().findById(idFilial);
    	} else {
    		filialDestino = SessionUtils.getFilialSessao();
    	}
		mda.setFilialByIdFilialDestino(filialDestino);
		mda.setFilialDestinoOperacional(filialDestino);

		mda.setLocalizacaoMercadoria(null);

		Servico servico = servicoService.findServicoBySigla("RNC");
		mda.setServico(servico);

		FluxoFilial fluxoFilial = mcdService.findFluxoEntreFiliais(
			filialOrigem.getIdFilial(),
			filialDestino.getIdFilial(),
			servico.getIdServico(),
			null
		);
		mda.setFluxoFilial(fluxoFilial);

    	mda.setDhInclusao(JTDateTimeUtils.getDataHoraAtual());
		mda.setTpDocumentoServico(new DomainValue("MDA"));
    	mda.setBlBloqueado(Boolean.FALSE);
    	mda.setPaisOrigem(SessionUtils.getPaisSessao());
    	mda.setMoeda(SessionUtils.getMoedaSessao());
    	mda.setTpCalculoPreco(new DomainValue("N"));
    	mda.setVlBaseCalcImposto(BigDecimalUtils.ZERO);
    	mda.setVlImposto(BigDecimalUtils.ZERO);
    	mda.setVlTotalDocServico(BigDecimalUtils.ZERO);
    	mda.setTpRemetenteMda(tfmBean.getDomainValue("tpRemetenteMda"));
    	mda.setTpDestinatarioMda(tfmBean.getDomainValue("tpDestinatarioMda"));
    	mda.setTpStatusMda(new DomainValue("G"));
    	if (tfmBean.getLong("usuarioByIdUsuarioDestino.idUsuario") != null) {
    		mda.setUsuarioByIdUsuarioDestino(this.getUsuarioService().findById(tfmBean.getLong("usuarioByIdUsuarioDestino.idUsuario")));
    	}
    	if (tfmBean.getLong("setor.idSetor") != null) {
    		mda.setSetor(this.getSetorService().findById(tfmBean.getLong("setor.idSetor")));
		}
    	mda.setUsuarioByIdUsuarioGeradaPor(SessionUtils.getUsuarioLogado());
    	mda.setObMda(tfmBean.getString("obMda"));
    	    	
    	ItemList items = getItemsFromSession(entry, "itemMda");
    	ItemListConfig itemsConfig = getMasterConfig().getItemListConfig("itemMda");    	
    			
    	TypedFlatMap mapBeanStored = this.getMdaService().storeAll(mda, items, itemsConfig);   	
    	items.resetItemsState(); 
    	updateMasterInSession(entry);
    	
    	if (filialDestino != null) {
    		mapBeanStored.put("filialByIdFilialDestino.idFilial", filialDestino.getIdFilial());
    		mapBeanStored.put("filialByIdFilialDestino.sgFilial", filialDestino.getSgFilial());
    		mapBeanStored.put("filialByIdFilialDestino.pessoa.nmFantasia", filialDestino.getPessoa().getNmFantasia());
		}
    	
    	return mapBeanStored;
    }    
    
    
	/**
	 * Salva a referencia do objeto Master na sessão.
	 * não devem ser inicializadas as coleções que representam os filhos
	 * já que o usuário pode vir a não utilizar a aba de filhos, evitando assim
	 * a carga desnecessária de objetos na sessão e a partir do banco de dados.
	 * 
	 * @param id
	 */
    public Object findById(java.lang.Long id) {
		Object masterObj = this.getMdaService().findById(id);
		putMasterInSession(masterObj); 		
		return masterObj;
    }
    
    public TypedFlatMap findDocumentoCancelado(TypedFlatMap criteria){
    	return this.getMdaService().findDocumentoCancelado(criteria);		
    }
    
    
    /**
     * Remoção de um conjunto de registros Master.
     * 
	 *
     */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	this.getMdaService().removeByIds(ids);
    }

    /**
     * Remoção de um registro Master.
     */    
    public void removeById(java.lang.Long id) {
    	this.getMdaService().removeById(id);
		newMaster();
    }     
    
    /**
     * Salva um item Descrição Padrão na sessão.
     */
    public Serializable saveItemMda(TypedFlatMap parameters) {
		return saveItemInstance(parameters, "itemMda");
    }     
    
    /**
     * Remove uma lista de registros items.
	 *  
	 * @param ids ids dos desciçoes item a serem removidos.
	 * 
	 * 
     */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIdsItemMda(List ids) {
    	super.removeItemByIds(ids, "itemMda");
    }     
    
	/**
	 * FindPaginated para grid de PreManifestoDocumento
	 * @param criteria
	 * @return
	 */
	public ResultSetPage findPaginatedItemMda(TypedFlatMap criteria) {
    	ResultSetPage rspItemMda = findPaginatedItemList(criteria, "itemMda");
    	
    	List listItemMda = new ArrayList();
    	for(int i=0; i< rspItemMda.getList().size(); i++) {
    		ItemMda itemMda = (ItemMda) rspItemMda.getList().get(i);
    		TypedFlatMap mapItemMda = new TypedFlatMap();    		
    		
    		mapItemMda.put("idItemMda", itemMda.getIdItemMda());    		
    		mapItemMda.put("qtVolumes", itemMda.getQtVolumes());
    		mapItemMda.put("vlMercadoria", itemMda.getVlMercadoria());
    		mapItemMda.put("psItem", itemMda.getPsItem());
    		mapItemMda.put("dsMercadoria", itemMda.getDsMercadoria());
    		mapItemMda.put("obItemMda", itemMda.getObItemMda());    		    		
    		mapItemMda.put("naturezaProduto.idNaturezaProduto", itemMda.getNaturezaProduto().getIdNaturezaProduto());
    		mapItemMda.put("naturezaProduto.dsNaturezaProduto", itemMda.getNaturezaProduto().getDsNaturezaProduto());			
    		mapItemMda.put("moeda.idMoeda", itemMda.getMoeda().getIdMoeda());
    		mapItemMda.put("moeda.dsSimbolo", itemMda.getMoeda().getDsSimbolo());
    		mapItemMda.put("moeda.sgMoeda", itemMda.getMoeda().getSgMoeda());
    		    		
    		if (itemMda.getDoctoServico() != null) {
    			mapItemMda.put("doctoServico.idDoctoServico", itemMda.getDoctoServico().getIdDoctoServico());    			
    			mapItemMda.put("doctoServico.nrDoctoServico", itemMda.getDoctoServico().getNrDoctoServico());    			
    			mapItemMda.put("doctoServico.tpDocumentoServico.description", itemMda.getDoctoServico().getTpDocumentoServico().getDescription());
    			mapItemMda.put("doctoServico.tpDocumentoServico.value", itemMda.getDoctoServico().getTpDocumentoServico().getValue());
    			mapItemMda.put("doctoServico.tpDocumentoServico.status", itemMda.getDoctoServico().getTpDocumentoServico().getStatus());    		   			
    			mapItemMda.put("doctoServico.filialByIdFilialOrigem.idFilial", itemMda.getDoctoServico().getFilialByIdFilialOrigem().getIdFilial());
    			mapItemMda.put("doctoServico.filialByIdFilialOrigem.sgFilial", itemMda.getDoctoServico().getFilialByIdFilialOrigem().getSgFilial());    			
			}
    		
    		if (itemMda.getNaoConformidade() != null) {
    			mapItemMda.put("naoConformidade.idNaoConformidade", itemMda.getNaoConformidade().getIdNaoConformidade());
    			mapItemMda.put("naoConformidade.filial.sgFilial", itemMda.getNaoConformidade().getFilial().getSgFilial());
    			mapItemMda.put("naoConformidade.nrNaoConformidade", itemMda.getNaoConformidade().getNrNaoConformidade());

			}
    		
    		List listNfItemMda = new ArrayList();
    		for(int j=0; j<itemMda.getNfItemMdas().size(); j++) {
    			NfItemMda nfItemMda = (NfItemMda) itemMda.getNfItemMdas().get(j);
    			TypedFlatMap mapNfItemMda = new TypedFlatMap();    			
    			mapNfItemMda.put("idNfItemMda", nfItemMda.getIdNfItemMda());
    			mapNfItemMda.put("nrNotaFiscal", nfItemMda.getNotaFiscalConhecimento().getNrNotaFiscal());
    			mapNfItemMda.put("idNotaFiscalConhecimento", nfItemMda.getNotaFiscalConhecimento().getIdNotaFiscalConhecimento());
    			
    			listNfItemMda.add(mapNfItemMda);
    		}    		
    		mapItemMda.put("nfItemMdas", listNfItemMda);
    				
    		listItemMda.add(mapItemMda);
    	}
    	
    	rspItemMda.setList(listItemMda);
    	
    	return rspItemMda;
	}
	
	/**
	 * GetRowCount para grid de PreManifestoDocumento
	 * @param criteria
	 * @return
	 */
	public Integer getRowCountItemMda(TypedFlatMap criteria) {
		return getRowCountItemList(criteria, "itemMda");
	}
	
    public Object findByIdItemMda(MasterDetailKey key) {
    	ItemMda itemMda = (ItemMda) findItemById(key, "itemMda");
    	TypedFlatMap mapItemMda = new TypedFlatMap();   		
		
		mapItemMda.put("idItemMda", itemMda.getIdItemMda());    		
		mapItemMda.put("qtVolumes", itemMda.getQtVolumes());
		mapItemMda.put("vlMercadoria", itemMda.getVlMercadoria());
		mapItemMda.put("psItem", itemMda.getPsItem());
		mapItemMda.put("dsMercadoria", itemMda.getDsMercadoria());
		mapItemMda.put("obItemMda", itemMda.getObItemMda());    		    		
		mapItemMda.put("naturezaProduto.idNaturezaProduto", itemMda.getNaturezaProduto().getIdNaturezaProduto());
		mapItemMda.put("naturezaProduto.dsNaturezaProduto", itemMda.getNaturezaProduto().getDsNaturezaProduto());			
		mapItemMda.put("moeda.idMoeda", itemMda.getMoeda().getIdMoeda());
		mapItemMda.put("moeda.dsSimbolo", itemMda.getMoeda().getDsSimbolo());
		mapItemMda.put("moeda.sgMoeda", itemMda.getMoeda().getSgMoeda());
		    		
		if (itemMda.getDoctoServico() != null) {
			mapItemMda.put("doctoServico.idDoctoServico", itemMda.getDoctoServico().getIdDoctoServico());    			
			mapItemMda.put("doctoServico.nrDoctoServico", itemMda.getDoctoServico().getNrDoctoServico());
			mapItemMda.put("doctoServico.tpDocumentoServico.description", itemMda.getDoctoServico().getTpDocumentoServico().getDescription());
			mapItemMda.put("doctoServico.tpDocumentoServico.value", itemMda.getDoctoServico().getTpDocumentoServico().getValue());
			mapItemMda.put("doctoServico.tpDocumentoServico.status", itemMda.getDoctoServico().getTpDocumentoServico().getStatus());    		   			
			mapItemMda.put("doctoServico.filialByIdFilialOrigem.idFilial", itemMda.getDoctoServico().getFilialByIdFilialOrigem().getIdFilial());
			mapItemMda.put("doctoServico.filialByIdFilialOrigem.sgFilial", itemMda.getDoctoServico().getFilialByIdFilialOrigem().getSgFilial());    			
			
			List listNotaFiscalConhecimento = this.findNotasFiscaisConhecimento(itemMda.getDoctoServico().getIdDoctoServico());
			List listNotas = new ArrayList();
			for (Iterator iter = listNotaFiscalConhecimento.iterator(); iter.hasNext();) {
				NotaFiscalConhecimento notaFiscalConhecimento = (NotaFiscalConhecimento) iter.next();
				TypedFlatMap mapNotas = new TypedFlatMap();
				mapNotas.put("idNotaFiscalConhecimento", notaFiscalConhecimento.getIdNotaFiscalConhecimento());
				mapNotas.put("nrNotaFiscal", notaFiscalConhecimento.getNrNotaFiscal());	
				listNotas.add(mapNotas);
			}
			mapItemMda.put("notaFiscalConhecimentoSource", listNotas);	
		}
		
		if (itemMda.getNaoConformidade() != null) {
			mapItemMda.put("naoConformidade.idNaoConformidade", itemMda.getNaoConformidade().getIdNaoConformidade());
			mapItemMda.put("naoConformidade.filial.sgFilial", itemMda.getNaoConformidade().getFilial().getSgFilial());
			mapItemMda.put("naoConformidade.nrNaoConformidade", itemMda.getNaoConformidade().getNrNaoConformidade());
		}
		
		List listNfItemMda = new ArrayList();
		for(int j=0; j<itemMda.getNfItemMdas().size(); j++) {
			NfItemMda nfItemMda = (NfItemMda) itemMda.getNfItemMdas().get(j);
			TypedFlatMap mapNfItemMda = new TypedFlatMap();    			
			mapNfItemMda.put("idNfItemMda", nfItemMda.getIdNfItemMda());
			mapNfItemMda.put("nrNotaFiscal", nfItemMda.getNotaFiscalConhecimento().getNrNotaFiscal());
			mapNfItemMda.put("idNotaFiscalConhecimento", nfItemMda.getNotaFiscalConhecimento().getIdNotaFiscalConhecimento());
			
			listNfItemMda.add(mapNfItemMda);
		}    		
		mapItemMda.put("nfItemMdas", listNfItemMda);
		
		return mapItemMda;   	
    }    	
    
    
	protected MasterEntryConfig createMasterConfig(MasterDetailFactory masterFactory) {
		
		/**
		 * Declaracao da classe pai
		 */		
		MasterEntryConfig config = masterFactory.createMasterEntryConfig(Mda.class, true);		
				
		/**
		 * Esta classe e reponsavel por ordenar a List dos filhos que estao
		 * em memoria de acordo com as regras de negocio
		 */
    	Comparator descComparator = new Comparator() {
			public int compare(Object obj1, Object obj2) {
        		return 1; 		
			}
    	};		
		
    	
    	/**
    	 * Esta instancia é responsavel por carregar os 
    	 * items filhos na sessão a partir do banco de dados.
    	 */
    	ItemListConfig itemInit = new ItemListConfig() {
 
    		/**
    		 * Find paginated do filho
    		 * Passa por este ponto apenas na primeira vez em que a list filha e chamada.
    		 * Apos a primeira vez ela e carregada da memoria
    		 * 
    		 * @param masterId id do pai
    		 * @param parameters todos os parametros vindo da tela pai
    		 */    		
			public List initialize(Long masterId, Map parameters) {	
				return getItemMdaService().findItemMdaByMda(masterId);
			}

			/**
			 * Busca rowCount da grid da tela filha
			 * Passa por este ponto apenas na primeira vez em que a list filha e chamada.
    		 * Apos a primeira vez ela e carregada da memoria
			 * 
			 * @param masterId id do pai
			 * @param parameters todos os parametros vindo da tela pai
			 */			
			public Integer getRowCount(Long masterId, Map parameters) {
				return Integer.valueOf(getItemMdaService().findItemMdaByMda(masterId).size());
			}
			
			/**
			 * Chama esta funcao depois de editar um item da grid filho
			 * E retira atributos desnecessarios para o filho
			 * 
			 * @param newBean 
			 * @param oldBean 
			 */
			public void modifyItemValues(Object newBean, Object bean) {
		        ItemMda itemMdaNew = (ItemMda) newBean;
		        ItemMda itemMdaOld = (ItemMda) bean;
		        
		        itemMdaOld.setIdItemMda(itemMdaNew.getIdItemMda());
		        itemMdaOld.setQtVolumes(itemMdaNew.getQtVolumes());
		        itemMdaOld.setVlMercadoria(itemMdaNew.getVlMercadoria());
		        itemMdaOld.setPsItem(itemMdaNew.getPsItem());
		        itemMdaOld.setDsMercadoria(itemMdaNew.getDsMercadoria());
		        itemMdaOld.setObItemMda(itemMdaNew.getObItemMda());
		        itemMdaOld.setNaturezaProduto(itemMdaNew.getNaturezaProduto());
		        itemMdaOld.setMoeda(itemMdaNew.getMoeda());
		        itemMdaOld.setDoctoServico(itemMdaNew.getDoctoServico());
		        itemMdaOld.setMda(itemMdaNew.getMda());
		        itemMdaOld.setNaoConformidade(itemMdaNew.getNaoConformidade());
		
		        List listNfItemMdas = new ArrayList();
				for(int i=0; i<itemMdaNew.getNfItemMdas().size(); i++) {
					NfItemMda nfItemMda = (NfItemMda) itemMdaNew.getNfItemMdas().get(i);
					nfItemMda.setItemMda(itemMdaOld);
					listNfItemMdas.add(nfItemMda);
				}
				itemMdaOld.getNfItemMdas().clear();
				itemMdaOld.setNfItemMdas(listNfItemMdas);
			}
			
			/**
			 * Todos os dados a serem carregados na grid pelo form passam antes por este
			 * metodo. Para se fazer uma validacao...
			 * Recomenda-se que o bean em questao seja gerado nesta classe a partir dos
			 * parametros enviados da tela para se evitar um 'ReflectionUtils'
			 * 
			 * @param parameters 
			 * @param bean a ser istanciado
			 * @return Object bean instanciado
			 */
			public Object populateNewItemInstance(Map parameters, Object bean) {
				ItemMda itemMda = (ItemMda) bean;				
				TypedFlatMap param = (TypedFlatMap) parameters;
				
				itemMda.setIdItemMda(param.getLong("idItemMda"));
				itemMda.setQtVolumes(param.getInteger("qtVolumes"));
				itemMda.setVlMercadoria(param.getBigDecimal("vlMercadoria"));				
				itemMda.setPsItem(param.getBigDecimal("psItem"));
				itemMda.setDsMercadoria(param.getString("dsMercadoria"));
				itemMda.setObItemMda(param.getString("obItemMda"));				
				itemMda.setNaturezaProduto(getNaturezaProdutoService().findById(param.getLong("naturezaProduto.idNaturezaProduto")));
				if (param.getLong("moeda.idMoeda") != null) {
					itemMda.setMoeda(getMoedaService().findById(param.getLong("moeda.idMoeda")));
				} else {
					itemMda.setMoeda(SessionUtils.getMoedaSessao());
				}
								
				if (param.getLong("doctoServico.idDoctoServico") != null) {
					itemMda.setDoctoServico(getDoctoServicoService().findDoctoServicoById(param.getLong("doctoServico.idDoctoServico")));
				}
				
				if (param.getLong("masterId") != null) {
					itemMda.setMda(getMdaService().findById(param.getLong("masterId")));
				}
				
				if (param.getLong("naoConformidade.idNaoConformidade") != null) {
					itemMda.setNaoConformidade(getNaoConformidadeService().findById(param.getLong("naoConformidade.idNaoConformidade")));
				}

				List listMapNfItemMda = param.getList("nfItemMdas");		
				List listNfItemMda = new ArrayList();
				if(listMapNfItemMda != null) {
					for (int i=0; i<listMapNfItemMda.size(); i++) {
						TypedFlatMap typedFlatMap = (TypedFlatMap) listMapNfItemMda.get(i);
						NfItemMda nfItemMda = new NfItemMda();						
						nfItemMda.setNotaFiscalConhecimento(getNotaFiscalConhecimentoService().findById(typedFlatMap.getLong("idNotaFiscalConhecimento")));	
						nfItemMda.setItemMda(itemMda);					
						listNfItemMda.add(nfItemMda);
					}
				}				
				itemMda.setNfItemMdas(listNfItemMda);

				return itemMda;
			}			

    	};    	
    	
    	config.addItemConfig("itemMda", ItemMda.class, itemInit, descComparator);
    	
		return config;
	}
	
	/**
	 * Busca as notas fiscais de um conhecimento.
	 * @param idDoctoServico
	 * @return
	 */
	public List findNotasFiscaisConhecimento(Long idDoctoServico){
		return this.getNotaFiscalConhecimentoService().findByConhecimento(idDoctoServico);
	}

	/**
	 * Busca a naturezaProduto de um conhecimento.
	 * @param idConhecimento
	 * @return
	 */
	public NaturezaProduto findNaturezaProdutoByIdConhecimento(Long idConhecimento){
		return this.getNaturezaProdutoService().findByIdConhecimento(idConhecimento);
	}
	
	/**
	 * ##############################################################################################
	 * #							 FIM DOS MÉTODOS PARA TELA DE DF2								#
	 * ##############################################################################################
	 */		
}
