package com.mercurio.lms.pendencia.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.report.ReportActionSupport;
import com.mercurio.adsm.framework.util.FilterList;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.configuracoes.model.service.MoedaService;
import com.mercurio.lms.contasreceber.model.service.NotaDebitoNacionalService;
import com.mercurio.lms.entrega.model.service.ReciboReembolsoService;
import com.mercurio.lms.expedicao.model.Conhecimento;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.model.service.CtoInternacionalService;
import com.mercurio.lms.expedicao.model.service.NotaFiscalServicoService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.pendencia.model.service.MdaService;
import com.mercurio.lms.pendencia.model.service.OcorrenciaDoctoServicoService;
import com.mercurio.lms.pendencia.report.EmitirComunicadoApreensaoClienteService;


/**
 * Generated by: ADSM ActionGenerator
 *
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.pendencia.emitirComunicadoApreensaoClienteAction"
 */

public class EmitirComunicadoApreensaoClienteAction extends ReportActionSupport {

	private DomainValueService domainValueService;
    private ConhecimentoService conhecimentoService;
    private CtoInternacionalService ctoInternacionalService;
    private NotaFiscalServicoService notaFiscalServicoService;
    private NotaDebitoNacionalService notaDebitoNacionalService;
    private MdaService mdaService;
    private MoedaService moedaService;
    private ReciboReembolsoService reciboReembolsoService;
    private FilialService filialService;
    private OcorrenciaDoctoServicoService ocorrenciaDoctoServicoService;
    private EmitirComunicadoApreensaoClienteService emitirComunicadoApreensaoClienteService;


    public EmitirComunicadoApreensaoClienteService getEmitirComunicadoApreensaoClienteService() {
		return emitirComunicadoApreensaoClienteService;
	}

	public void setEmitirComunicadoApreensaoClienteService(
			EmitirComunicadoApreensaoClienteService emitirComunicadoApreensaoClienteService) {
		this.reportServiceSupport = emitirComunicadoApreensaoClienteService;
		this.emitirComunicadoApreensaoClienteService = emitirComunicadoApreensaoClienteService;
	}

	private OcorrenciaDoctoServicoService getOcorrenciaDoctoServicoService() {
		return ocorrenciaDoctoServicoService;
	}

	public void setOcorrenciaDoctoServicoService(OcorrenciaDoctoServicoService ocorrenciaDoctoServico) {
		this.ocorrenciaDoctoServicoService = ocorrenciaDoctoServico;
	}

	private MdaService getMdaService() {
		return mdaService;
	}

	public void setMdaService(MdaService mdaService) {
		this.mdaService = mdaService;
	}

	private ReciboReembolsoService getReciboReembolsoService() {
		return reciboReembolsoService;
	}

	public void setReciboReembolsoService(ReciboReembolsoService reciboReembolsoService) {
		this.reciboReembolsoService = reciboReembolsoService;
	}

	private NotaDebitoNacionalService getNotaDebitoNacionalService() {
		return notaDebitoNacionalService;
	}

	public void setNotaDebitoNacionalService(
			NotaDebitoNacionalService notaDebitoNacionalService) {
		this.notaDebitoNacionalService = notaDebitoNacionalService;
	}

	private NotaFiscalServicoService getNotaFiscalServicoService() {
		return notaFiscalServicoService;
	}

	public void setNotaFiscalServicoService(NotaFiscalServicoService notaFiscalServicoService) {
		this.notaFiscalServicoService = notaFiscalServicoService;
	}

	private ConhecimentoService getConhecimentoService() {
		return conhecimentoService;
	}

	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
	}

	private CtoInternacionalService getCtoInternacionalService() {
		return ctoInternacionalService;
	}

	public void setCtoInternacionalService(
			CtoInternacionalService ctoInternacionalService) {
		this.ctoInternacionalService = ctoInternacionalService;
	}

	private FilialService getFilialService() {
		return filialService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	private DomainValueService getDomainValueService() {
		return domainValueService;
	}

	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}

    public MoedaService getMoedaService() {
		return moedaService;
	}

	public void setMoedaService(MoedaService moedaService) {
		this.moedaService = moedaService;
	}

	public List findComboMoeda(Map map) {
    	return getMoedaService().findMoedaOrderBySgSimbolo(false);
    }

	/**
     * Método que popula a combo de tipos de documento apenas com CTR, CRT, MDA.
     *
     * @param criteria
     * @return List
     */
    public List findTipoDocumentoServico(Map criteria) {
        List retorno = getDomainValueService().findDomainValues("DM_TIPO_DOCUMENTO_SERVICO");
    	List dominiosValidos = new ArrayList();

        for (Iterator iter = retorno.iterator(); iter.hasNext();) {
			DomainValue domainValue = (DomainValue) iter.next();

			if (!"MDA".equalsIgnoreCase( domainValue.getValue() )
					&& !"RRE".equalsIgnoreCase( domainValue.getValue() )
					&& !"NFS".equalsIgnoreCase( domainValue.getValue() )
					&& !"NDN".equalsIgnoreCase( domainValue.getValue() )) {
				dominiosValidos.add(domainValue.getValue());		
			}
		}
        return getDomainValueService().findByDomainNameAndValues("DM_TIPO_DOCUMENTO_SERVICO", dominiosValidos);
    }

    /**
     * Busca a filial baseado no documento de serviço
     * @param criteria
     * @return
     */
    public List findLookupFilialByDocumentoServico(Map criteria) {
    	FilterList filter = new FilterList(getFilialService().findLookup(criteria)) {
			public Map filterItem(Object item) {
				Filial filial = (Filial)item;
    			TypedFlatMap typedFlatMap = new TypedFlatMap();
	    		typedFlatMap.put("idFilial", filial.getIdFilial());
		    	typedFlatMap.put("sgFilial", filial.getSgFilial());
		    	typedFlatMap.put("pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
				return typedFlatMap;
			}
    	};
    	return (List)filter.doFilter();
    }


    // FIND'S LOOKUP'S PARA FILIAL DO TIPO DE DOCTO DE SERVICO ESCOLHIDO
 	public List findLookupServiceDocumentFilialCTE(Map criteria) {
		return findLookupFilialByDocumentoServico(criteria);
	}

    public List findLookupServiceDocumentFilialCTR(Map criteria) {
        return findLookupFilialByDocumentoServico(criteria);
    }

     public List findLookupServiceDocumentFilialCRT(Map criteria) {
        return findLookupFilialByDocumentoServico(criteria);
    }

     public List findLookupServiceDocumentFilialNDN(Map criteria) {
    	 return findLookupFilialByDocumentoServico(criteria);
     }

     public List findLookupServiceDocumentFilialNFT(Map criteria) {
    	 return findLookupFilialByDocumentoServico(criteria);
     }

     public List findLookupServiceDocumentFilialNFS(Map criteria) {
    	 return findLookupFilialByDocumentoServico(criteria);
     }

     public List findLookupServiceDocumentFilialMDA(Map criteria) {
    	 return findLookupFilialByDocumentoServico(criteria);
     }

     public List findLookupServiceDocumentFilialRRE(Map criteria) {
    	 return findLookupFilialByDocumentoServico(criteria);
     }

//   findLookup's para a tag documento de serviço
     public List findLookupServiceDocumentNumberCTE(Map criteria) {
    	 return getConhecimentoService().findLookup(criteria);
     }

    public List findLookupServiceDocumentNumberCTR(Map criteria) {
    	return getConhecimentoService().findLookup(criteria);
    }

    public List findLookupServiceDocumentNumberCRT(Map criteria) {
    	return getCtoInternacionalService().findLookup(criteria);
    }

    public List findLookupServiceDocumentNumberNDN(Map criteria) {
    	return getNotaDebitoNacionalService().findLookup(criteria);
    }

    public List findLookupServiceDocumentNumberNFT(Map criteria) {
    	return getConhecimentoService().findLookup(criteria);
    }

    public List findLookupServiceDocumentNumberNFS(Map criteria) {
    	return getNotaFiscalServicoService().findLookup(criteria);
    }

    public List findLookupServiceDocumentNumberRRE(Map criteria) {
    	return getReciboReembolsoService().findLookup(criteria);
    }

    public List findLookupServiceDocumentNumberMDA(Map criteria) {
    	return getMdaService().findLookup(criteria);
    }
// *****************************************************************************
    public Serializable executeVerificaComunicadoApreensao(TypedFlatMap tfm) {
    	List<Conhecimento> conhecimento = getConhecimentoService().findLookup(tfm);
    	if (conhecimento != null && conhecimento.size() == 1) {
    		if (Boolean.FALSE.equals(conhecimento.get(0).getBlBloqueado())) {
    			throw new BusinessException("LMS-17007");
    		}
    	}
    	Long idDoctoServico = tfm.getLong("idDoctoServico");
    	return getOcorrenciaDoctoServicoService().executeVerificaComunicadoApreensao(idDoctoServico);
    }

    public Serializable findByIdToComunicadoApreensaoAoCliente(TypedFlatMap tfm) {
    	Long idOcorrenciaDoctoServico = tfm.getLong("idOcorrenciaDoctoServico");
    	return getOcorrenciaDoctoServicoService().findByIdToComunicadoApreensaoAoCliente(idOcorrenciaDoctoServico);
    }

    public void executeEnviarPorEmail(TypedFlatMap tfm) {
    	getOcorrenciaDoctoServicoService().executeEnviarEmailComunicadoApreensaoCliente(tfm);
    }

    /**
	 * Faz a validacao do PCE.
	 *
	 * @param criteria
	 * @return
	 */
	public TypedFlatMap validatePCE(TypedFlatMap criteria) {
		Long idDoctoServico = criteria.getLong("idDoctoServico");
		return this.getReciboReembolsoService().validatePCE(idDoctoServico);
	}
}