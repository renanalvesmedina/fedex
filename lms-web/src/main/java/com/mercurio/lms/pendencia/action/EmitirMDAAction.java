package com.mercurio.lms.pendencia.action;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.joda.time.DateTime;

import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.report.ReportExecutionManager;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.expedicao.model.DoctoServico;
import com.mercurio.lms.expedicao.model.service.DoctoServicoService;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.pendencia.model.Mda;
import com.mercurio.lms.pendencia.model.service.MdaService;
import com.mercurio.lms.pendencia.report.EmitirMDAService;
import com.mercurio.lms.sim.ConstantesSim;
import com.mercurio.lms.sim.model.service.IncluirEventosRastreabilidadeInternacionalService;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;


/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.pendencia.emitirMDAAction"
 */
public class EmitirMDAAction {
	private FilialService filialService;
	private MdaService mdaService;
	private DoctoServicoService doctoServicoService;
	private IncluirEventosRastreabilidadeInternacionalService incluirEventosRastreabilidadeInternacionalService;
	private EmitirMDAService emitirMDAService;
	private ReportExecutionManager reportExecutionManager;  
	
	/**
	 * Declaração serviço principal da Action.
	 */
	public void setEmitirMDAService(EmitirMDAService emitirMDAService) {
		this.emitirMDAService = emitirMDAService;
	}
	
	/**
	 * Método que executa o relátorio.
	 */
	public String execute(TypedFlatMap reportParams) throws Exception {
		return this.reportExecutionManager.generateReportLocator(this.emitirMDAService, reportParams);
	}
	
	public List findLookupBySgFilial(TypedFlatMap criteria) {
		return this.getFilialService().findLookupBySgFilial((String)criteria.get("sgFilial"), (String)criteria.get("tpAcesso"));
	}

	public List findMdaByNrDoctoServicoByIdFilialOrigem(TypedFlatMap criteria) {
		Long nrDoctoServico = criteria.getLong("nrDoctoServico");
		Long idFilialOrigem = criteria.getLong("filialByIdFilialOrigem.idFilial");
		
		List result = this.getMdaService().findMdaByNrDoctoServicoByIdFilialOrigem(nrDoctoServico, idFilialOrigem);
		
    	List listMda = new ArrayList();
    	for (Iterator iter = result.iterator(); iter.hasNext();) {
			Mda mda = (Mda) iter.next();			
    		TypedFlatMap mapMda = new TypedFlatMap();    		
    		
    		mapMda.put("idDoctoServico", mda.getIdDoctoServico());
    		mapMda.put("nrDoctoServico", mda.getNrDoctoServico());
    		    		
    		listMda.add(mapMda);    		
    	}
    	
    	return listMda;		
	}
	
	/**
	 * Método que atualiza os dados na tabela de DoctoServico e MDA.
	 * @param criteria
	 */
	public void atualizaDados(TypedFlatMap criteria) {
		// Busca um DoctoServico e atualiza a Data de Emissão.
		DoctoServico doctoServico = this.getDoctoServicoService().findByIdJoinFilial(criteria.getLong("mda.idDoctoServico"));
		DateTime dataHoraAtual = JTDateTimeUtils.getDataHoraAtual();
		
		if (doctoServico.getDhEmissao() == null) {
			doctoServico.setDhEmissao(JTDateTimeUtils.getDataHoraAtual());
			this.getDoctoServicoService().store(doctoServico);
			
			// Busca um MDA e atualiza o ID do Usuario Emitido.
			Mda mda = this.getMdaService().findMdaByIdDoctoServico(criteria.getLong("mda.idDoctoServico"));
			mda.setTpStatusMda(new DomainValue("E"));
			mda.setUsuarioByIdUsuarioEmitidoPor(SessionUtils.getUsuarioLogado());
			this.getMdaService().store(mda);
			
			String strDocumento = doctoServico.getFilialByIdFilialOrigem().getSgFilial() + " " + StringUtils.leftPad(doctoServico.getNrDoctoServico().toString(), 8, '0');
			this.getIncluirEventosRastreabilidadeInternacionalService().generateEventoDocumento(
					ConstantesSim.EVENTO_MDA_EMITIDA, doctoServico.getIdDoctoServico(), 
					SessionUtils.getFilialSessao().getIdFilial(), 
					strDocumento, dataHoraAtual, null, SessionUtils.getFilialSessao().getSiglaNomeFilial(), doctoServico.getTpDocumentoServico().getValue());
		}
	}


	public FilialService getFilialService() {
		return filialService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public MdaService getMdaService() {
		return mdaService;
	}
	public void setMdaService(MdaService mdaService) {
		this.mdaService = mdaService;
	}
	public DoctoServicoService getDoctoServicoService() {
		return doctoServicoService;
	}
	public void setDoctoServicoService(DoctoServicoService doctoServicoService) {
		this.doctoServicoService = doctoServicoService;
	}
	public IncluirEventosRastreabilidadeInternacionalService getIncluirEventosRastreabilidadeInternacionalService() {
		return incluirEventosRastreabilidadeInternacionalService;
	}
	public void setIncluirEventosRastreabilidadeInternacionalService(
			IncluirEventosRastreabilidadeInternacionalService incluirEventosRastreabilidadeInternacionalService) {
		this.incluirEventosRastreabilidadeInternacionalService = incluirEventosRastreabilidadeInternacionalService;
	}
	public ReportExecutionManager getReportExecutionManager() {
		return reportExecutionManager;
	}
	public void setReportExecutionManager(
			ReportExecutionManager reportExecutionManager) {
		this.reportExecutionManager = reportExecutionManager;
	}	

}
