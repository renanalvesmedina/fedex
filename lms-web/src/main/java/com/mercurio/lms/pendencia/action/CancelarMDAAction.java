package com.mercurio.lms.pendencia.action;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.joda.time.DateTime;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.service.ManifestoService;
import com.mercurio.lms.carregamento.model.service.PreManifestoDocumentoService;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.expedicao.model.DoctoServico;
import com.mercurio.lms.expedicao.model.service.DoctoServicoService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.pendencia.model.ItemMda;
import com.mercurio.lms.pendencia.model.Mda;
import com.mercurio.lms.pendencia.model.service.ItemMdaService;
import com.mercurio.lms.pendencia.model.service.MdaService;
import com.mercurio.lms.sim.ConstantesSim;
import com.mercurio.lms.sim.model.service.IncluirEventosRastreabilidadeInternacionalService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;


/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.pendencia.cancelarMDAAction"
 */

public class CancelarMDAAction extends CrudAction {
	private ItemMdaService itemMdaService;
	private FilialService filialService;
	private PreManifestoDocumentoService preManifestoDocumentoService;
	private ManifestoService manifestoService;
	private IncluirEventosRastreabilidadeInternacionalService incluirEventosRastreabilidadeInternacionalService;
	private DoctoServicoService doctoServicoService;
		
	
	public void setMdaService(MdaService mdaService) {
		this.defaultService = mdaService;
	}
	public MdaService getMdaService() {
		return ((MdaService)defaultService);
	}
	
	public DoctoServicoService getDoctoServicoService() {
		return doctoServicoService;
	}
	
	public void setDoctoServicoService(DoctoServicoService doctoServicoService) {
		this.doctoServicoService = doctoServicoService;
	}
	
	public List findLookupBySgFilial(TypedFlatMap criteria) {
		return this.getFilialService().findLookupBySgFilial((String)criteria.get("sgFilial"), (String)criteria.get("tpAcesso"));
	}
	
	public ItemMdaService getItemMdaService() {
		return itemMdaService;
	}
	
	public void setItemMdaService(ItemMdaService itemMdaService) {
		this.itemMdaService = itemMdaService;
	}
	
	public FilialService getFilialService() {
		return filialService;
	}
	
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	
	public PreManifestoDocumentoService getPreManifestoDocumentoService() {
		return preManifestoDocumentoService;
	}
	
	public void setPreManifestoDocumentoService(
			PreManifestoDocumentoService preManifestoDocumentoService) {
		this.preManifestoDocumentoService = preManifestoDocumentoService;
	}
	
	public ManifestoService getManifestoService() {
		return manifestoService;
	}
	
	public void setManifestoService(ManifestoService manifestoService) {
		this.manifestoService = manifestoService;
	}
	
	public IncluirEventosRastreabilidadeInternacionalService getIncluirEventosRastreabilidadeInternacionalService() {
		return incluirEventosRastreabilidadeInternacionalService;
	}
	
	public void setIncluirEventosRastreabilidadeInternacionalService(
			IncluirEventosRastreabilidadeInternacionalService incluirEventosRastreabilidadeInternacionalService) {
		this.incluirEventosRastreabilidadeInternacionalService = incluirEventosRastreabilidadeInternacionalService;
	}

	public List findMdaByNrDoctoServicoByIdFilialOrigem(TypedFlatMap criteria) {
		Long nrDoctoServico = criteria.getLong("nrDoctoServico");
		Long idFilialOrigem = criteria.getLong("filialByIdFilialOrigem.idFilial");
		
		List result = this.getMdaService().findMdaByNrDoctoServicoByIdFilialOrigem(nrDoctoServico, idFilialOrigem);
		
    	List listMda = new ArrayList();
    	for (Iterator iter = result.iterator(); iter.hasNext();) {
			Mda mda = (Mda) iter.next();			
    		TypedFlatMap mapMda = new TypedFlatMap();    		
    		
    		mapMda.put("idDoctoServico", mda.getIdDoctoServico());
    		mapMda.put("nrDoctoServico", mda.getNrDoctoServico());
    		mapMda.put("tpStatusMda.description", mda.getTpStatusMda().getDescription());
    		mapMda.put("tpStatusMda.value", mda.getTpStatusMda().getValue());
    		mapMda.put("tpStatusMda.status", mda.getTpStatusMda().getStatus());
    		
    		//Se MDA está cancelado então mostra dhCancelamento.
    		if (mda.getTpStatusMda().getValue().equals("C")) {
    			mapMda.put("dhCancelamento", mda.getDhCancelamento());
    		}
    		
    		if (mda.getFilialByIdFilialOrigem() != null) {
    			mapMda.put("filialByIdFilialOrigem.idFilial", mda.getFilialByIdFilialOrigem().getIdFilial());
    			mapMda.put("filialByIdFilialOrigem.sgFilial", mda.getFilialByIdFilialOrigem().getSgFilial());
    			mapMda.put("filialByIdFilialOrigem.pessoa.nmFantasia", mda.getFilialByIdFilialOrigem().getPessoa().getNmFantasia());	
			}    		
    		if (mda.getFilialByIdFilialDestino() != null) {
    			mapMda.put("filialByIdFilialDestino.idFilial", mda.getFilialByIdFilialDestino().getIdFilial());
    			mapMda.put("filialByIdFilialDestino.sgFilial", mda.getFilialByIdFilialDestino().getSgFilial());
    			mapMda.put("filialByIdFilialDestino.pessoa.nmFantasia", mda.getFilialByIdFilialDestino().getPessoa().getNmFantasia());	
			}
       		if (mda.getClienteByIdClienteRemetente() != null) {
    			mapMda.put("clienteByIdClienteRemetente.idCliente", mda.getClienteByIdClienteRemetente().getIdCliente());
    			mapMda.put("clienteByIdClienteRemetente.pessoa.nrIdentificacaoFormatado",
    					FormatUtils.formatIdentificacao(mda.getClienteByIdClienteRemetente().getPessoa().getTpIdentificacao(), 
    													mda.getClienteByIdClienteRemetente().getPessoa().getNrIdentificacao()));
    			mapMda.put("clienteByIdClienteRemetente.pessoa.nmPessoa", mda.getClienteByIdClienteRemetente().getPessoa().getNmPessoa());
			}
    		if (mda.getClienteByIdClienteDestinatario() != null) {
    			mapMda.put("clienteByIdClienteDestinatario.idCliente", mda.getClienteByIdClienteDestinatario().getIdCliente());
    			mapMda.put("clienteByIdClienteDestinatario.pessoa.nrIdentificacaoFormatado",
    					FormatUtils.formatIdentificacao(mda.getClienteByIdClienteDestinatario().getPessoa().getTpIdentificacao(), 
    													mda.getClienteByIdClienteDestinatario().getPessoa().getNrIdentificacao()));    			
    			mapMda.put("clienteByIdClienteDestinatario.pessoa.nmPessoa", mda.getClienteByIdClienteDestinatario().getPessoa().getNmPessoa());
			}
    		if (mda.getClienteByIdClienteConsignatario() != null) {
    			mapMda.put("clienteByIdClienteConsignatario.idCliente", mda.getClienteByIdClienteConsignatario().getIdCliente());
    			mapMda.put("clienteByIdClienteConsignatario.pessoa.nrIdentificacaoFormatado",
    					FormatUtils.formatIdentificacao(mda.getClienteByIdClienteConsignatario().getPessoa().getTpIdentificacao(), 
    													mda.getClienteByIdClienteConsignatario().getPessoa().getNrIdentificacao()));    			
    			mapMda.put("clienteByIdClienteConsignatario.pessoa.nmPessoa", mda.getClienteByIdClienteConsignatario().getPessoa().getNmPessoa());
			}
    		
    		/*
    		 * Busca o PreManifestoDocumento e verifica se existe um documento associado a um manifesto.
    		 * Caso não exista, retorna TRUE.
    		 */
    		if (mda.getTpStatusMda().getValue().equals("E")||mda.getTpStatusMda().getValue().equals("G")) {
	    		List listPreManifestoDocto = this.getPreManifestoDocumentoService().
	    														findPreManifestoDocumentoByIdDoctoServico(mda.getIdDoctoServico());
	    		if (listPreManifestoDocto.isEmpty()) {
	    			mapMda.put("blManifesto", Boolean.TRUE);
	    		} 
    		}
    		    		
    		listMda.add(mapMda);    		
    	}
    	
    	return listMda;		
	}
    
    /**
     * Método que cancela o MDA.
     * 
     * @param parameters
     * @return
     */
    public TypedFlatMap store(TypedFlatMap parameters) {
    	Long idMda = parameters.getLong("mda.idDoctoServico");
    	this.gerarEventoDoctoServico(idMda);
    	Mda mda = this.getMdaService().findById(idMda);
    	mda.setTpStatusMda(new DomainValue("C"));
    	DateTime dataHoraCancelamento = JTDateTimeUtils.getDataHoraAtual(); 
    	mda.setDhCancelamento(dataHoraCancelamento);
    	this.getMdaService().store(mda);
    	
    	TypedFlatMap map = new TypedFlatMap(); 
    	map.put("dhCancelamento", dataHoraCancelamento);
    	return map;
    }
    
	public TypedFlatMap findDadosSessao(){
		Filial fil = SessionUtils.getFilialSessao();
		Usuario usuario = SessionUtils.getUsuarioLogado();
		TypedFlatMap retorno = new TypedFlatMap(); 
	
		retorno.put("idFilial", fil.getIdFilial());
		retorno.put("sgFilial", fil.getSgFilial());
		retorno.put("nmFantasia", fil.getPessoa().getNmFantasia());
		retorno.put("idUsuario", usuario.getIdUsuario());
		retorno.put("nrMatricula", usuario.getNrMatricula());
		retorno.put("nome", usuario.getNmUsuario());
		
		return retorno;
	}

    /**
	 * Método que gera um evento para o Documento de Serviço.
	 * @param criteria
	 */
    private void gerarEventoDoctoServico(Long idMda) {
    	DoctoServico doctoServico = doctoServicoService.findByIdJoinFilial(idMda);
    	String strDocumento = doctoServico.getFilialByIdFilialOrigem().getSgFilial() + " " + StringUtils.leftPad(doctoServico.getNrDoctoServico().toString(), 8, '0');
		this.getIncluirEventosRastreabilidadeInternacionalService().generateEventoDocumento(
				ConstantesSim.EVENTO_CANCELAMENTO_MDA, idMda, 
				SessionUtils.getFilialSessao().getIdFilial(), 
				strDocumento, JTDateTimeUtils.getDataHoraAtual(), null, doctoServico.getFilialByIdFilialOrigem().getSiglaNomeFilial(), doctoServico.getTpDocumentoServico().getValue());
    }    
     
    /**
     * Retorna um ResultSetPage com os objetos de ItemMDA a serem mostrados na grid.
     * 
     * @param TypedFlatMap criteria
     * @return
     */
    public ResultSetPage findPaginatedItemMda(TypedFlatMap criteria) {
    	criteria.put("idDoctoServico", criteria.getLong("mda.idDoctoServico"));
    	ResultSetPage resultSetPage = this.getItemMdaService().findPaginatedItemMda(criteria);
    	
    	List listItemMda = new ArrayList();
    	for (Iterator iter = resultSetPage.getList().iterator(); iter.hasNext();) {
    		ItemMda itemMda = (ItemMda) iter.next();
    		TypedFlatMap mapItemMda = new TypedFlatMap();
    		
    		mapItemMda.put("idItemMda", itemMda.getIdItemMda());
    		if (itemMda.getDoctoServico() != null) {
        		mapItemMda.put("doctoServico.tpDocumentoServico.description", itemMda.getDoctoServico().getTpDocumentoServico().getDescription());
        		mapItemMda.put("doctoServico.tpDocumentoServico.value", itemMda.getDoctoServico().getTpDocumentoServico().getValue());
        		mapItemMda.put("doctoServico.tpDocumentoServico.status", itemMda.getDoctoServico().getTpDocumentoServico().getStatus());
        		mapItemMda.put("doctoServico.filialByIdFilialOrigem.sgFilial", itemMda.getDoctoServico().getFilialByIdFilialOrigem().getSgFilial());
        		mapItemMda.put("doctoServico.nrDoctoServico", itemMda.getDoctoServico().getNrDoctoServico());				
			}
    		mapItemMda.put("dsMercadoria", itemMda.getDsMercadoria());
    		mapItemMda.put("naturezaProduto.dsNaturezaProduto", itemMda.getNaturezaProduto().getDsNaturezaProduto());    		
    		mapItemMda.put("qtVolumes", itemMda.getQtVolumes());
    		mapItemMda.put("psItem", itemMda.getPsItem());
    		    		
    		listItemMda.add(mapItemMda);
    	}
    	resultSetPage.setList(listItemMda);
    	
    	return resultSetPage;
    }
    
    /**
     * Faz a consulta ao banco, retornando o numero de registros encontrados 
     * para determinados parametros.
     * 
     * @param TypedFlatMap criteria
     * @return
     */
    public Integer getRowCountItemMda(TypedFlatMap criteria) {
    	criteria.put("idDoctoServico", criteria.getLong("mda.idDoctoServico"));
    	return this.getItemMdaService().getRowCountItemMda(criteria);    	
    }    
    
	/**
	 * Pega a data atual do sistema
	 */
	public DateTime getDataHoraAtual() {
    	return JTDateTimeUtils.getDataHoraAtual();
	}     
    

}
