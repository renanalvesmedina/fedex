package com.mercurio.lms.sim.action;

import java.io.File;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.joda.time.DateTime;
import org.joda.time.TimeOfDay;
import org.joda.time.YearMonthDay;

import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.hibernate.VarcharI18n;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.report.ReportActionSupport;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.service.ControleCargaService;
import com.mercurio.lms.carregamento.model.service.PreManifestoDocumentoService;
import com.mercurio.lms.coleta.model.PedidoColeta;
import com.mercurio.lms.coleta.model.service.ManifestoColetaService;
import com.mercurio.lms.coleta.model.service.PedidoColetaService;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.EnderecoPessoa;
import com.mercurio.lms.configuracoes.model.TipoLogradouro;
import com.mercurio.lms.configuracoes.model.service.EnderecoPessoaService;
import com.mercurio.lms.configuracoes.model.service.TipoServicoService;
import com.mercurio.lms.contasreceber.model.service.ConsultarDadosCobrancaDocumentoServicoService;
import com.mercurio.lms.contasreceber.model.service.DevedorDocServFatService;
import com.mercurio.lms.entrega.model.service.AgendamentoEntregaService;
import com.mercurio.lms.entrega.model.service.ChequeReembolsoService;
import com.mercurio.lms.entrega.model.service.ManifestoEntregaService;
import com.mercurio.lms.entrega.model.service.MirService;
import com.mercurio.lms.entrega.model.service.ReciboReembolsoService;
import com.mercurio.lms.expedicao.model.service.AwbService;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.model.service.CtoCtoCooperadaService;
import com.mercurio.lms.expedicao.model.service.DadosComplementoService;
import com.mercurio.lms.expedicao.model.service.DoctoServicoService;
import com.mercurio.lms.expedicao.model.service.ImpostoServicoService;
import com.mercurio.lms.expedicao.model.service.ItemNfCtoService;
import com.mercurio.lms.expedicao.model.service.ManifestoInternacionalService;
import com.mercurio.lms.expedicao.model.service.ManifestoViagemNacionalService;
import com.mercurio.lms.expedicao.model.service.NotaFiscalConhecimentoService;
import com.mercurio.lms.expedicao.model.service.NotaFiscalCtoCooperadaService;
import com.mercurio.lms.expedicao.model.service.ObservacaoDoctoServicoService;
import com.mercurio.lms.expedicao.model.service.ParcelaCtoCooperadaService;
import com.mercurio.lms.expedicao.model.service.ParcelaDoctoServicoService;
import com.mercurio.lms.expedicao.model.service.ServicoEmbalagemService;
import com.mercurio.lms.municipios.model.Empresa;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.EmpresaService;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.pendencia.model.service.OcorrenciaDoctoServicoService;
import com.mercurio.lms.rnc.model.service.NaoConformidadeService;
import com.mercurio.lms.rnc.model.service.OcorrenciaNaoConformidadeService;
import com.mercurio.lms.rnc.report.EmitirRNCService;
import com.mercurio.lms.sim.model.service.EventoDocumentoServicoService;
import com.mercurio.lms.sim.report.EmitirLocalizacaoMercadoriaService;
import com.mercurio.lms.tabelaprecos.model.service.ParcelaPrecoService;
import com.mercurio.lms.util.AliasToTypedFlatMapResultTransformer;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.JTFormatUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.service.ClienteService;
import com.mercurio.lms.vendas.model.service.InformacaoDoctoClienteService;

/**
 * Generated by: ADSM ActionGenerator
 *
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.sim.consultarLocalizacoesMercadoriasAction"
 */

public class ConsultarLocalizacoesMercadoriasAction extends ReportActionSupport {
	private EmpresaService empresaService;
	private TipoServicoService tipoServicoService;
	private FilialService filialService;
	private ClienteService clienteService;
	private ControleCargaService controleCargaService;
	private ManifestoColetaService manifestoColetaService;
	private DomainValueService domainValueService;
	private MirService mirService;
	private AwbService awbService;
	private PedidoColetaService pedidoColetaService;
	private ManifestoEntregaService manifestoEntregaService;

	private ReciboReembolsoService reciboReembolsoService;
	private ConhecimentoService conhecimentoService;
	private InformacaoDoctoClienteService informacaoDoctoClienteService;
	private NotaFiscalConhecimentoService notaFiscalConhecimentoService;
	private DevedorDocServFatService devedorDocServFatService;
	private ServicoEmbalagemService servicoEmbalagemService;
	private ObservacaoDoctoServicoService observacaoDoctoServicoService;
	private ChequeReembolsoService chequeReembolsoService;
	private DadosComplementoService dadosComplementoService;
	private DoctoServicoService doctoServicoService;
	private AgendamentoEntregaService agendamentoEntregaService;
	private ParcelaDoctoServicoService parcelaDoctoServicoService;
	private ImpostoServicoService impostoServicoService;
	private ItemNfCtoService itemNfCtoService;

	private ManifestoViagemNacionalService manifestoViagemNacionalService;
	private EventoDocumentoServicoService eventoDocumentoServicoService;
	
	private OcorrenciaDoctoServicoService ocorrenciaDoctoServicoService;
	private ManifestoInternacionalService manifestoInternacionalService;
	private NaoConformidadeService naoConformidadeService;
	private CtoCtoCooperadaService ctoCtoCooperadaService;
	private OcorrenciaNaoConformidadeService ocorrenciaNaoConformidadeService;
	private ConsultarDadosCobrancaDocumentoServicoService consultarDadosCobrancaDocumentoServicoService;
	private NotaFiscalCtoCooperadaService notaFiscalCtoCooperadaService;
	private ParcelaCtoCooperadaService parcelaCtoCooperadaService;
	private EmitirLocalizacaoMercadoriaService emitirLocalizacaoMercadoriaService;
	private ConfiguracoesFacade configuracoesFacade;
	private EmitirRNCService emitirRNCService;
	private EnderecoPessoaService enderecoPessoaService;
	private PreManifestoDocumentoService preManifestoDocumentoService;
	private ParcelaPrecoService parcelaPrecoService;

	public List findPaginatedComplEmbalagens(TypedFlatMap criteria) {
		return servicoEmbalagemService.findPaginatedComplEmbalagens(criteria.getLong("idDoctoServico"));
	}
	
	public List findPaginatedComplObservacoes(TypedFlatMap criteria) {
		return observacaoDoctoServicoService.findPaginatedComplObservacoes(criteria.getLong("idDoctoServico"));
	}
	
	public Map findReembolsoByIdReembolsado(Long idDoctoServico) {
		return reciboReembolsoService.findReembolsoByIdReembolsado(idDoctoServico);
	}
	
	public List findPaginatedChequesByIdReembolso(TypedFlatMap criteria) {
		return chequeReembolsoService.findPaginatedChequesByIdReembolso(criteria.getLong("idDoctoServico"));
	}

	//*********COMBOS****************
	public List findComboEmpresa(Map criteria) {
		criteria = new HashMap();
		criteria.put("tpEmpresa", "M");
		
		List lista = empresaService.findComboEmpresa(criteria);
		
		if(!lista.isEmpty()) {
			for(Iterator iter = lista.iterator();iter.hasNext();) {
				Map map = (Map)iter.next();
				if(map.get("nrIdentificacao")!= null) {
					String nrIdentificacao = FormatUtils.formatIdentificacao(((Map)map.get("tpIdentificacao")).get("value").toString(), map.get("nrIdentificacao").toString());
					((Map)map.get("pessoa")).put("nrIdentificacao", nrIdentificacao);
				}
			}
		}
		return lista;
	}
	
	public List findComboTipoServico(Map criteria) {
		return tipoServicoService.find(criteria);
	}
	
	public List findLookupFilial(TypedFlatMap criteria) {
		return filialService.findLookupAsPaginated(criteria);
	}

	public List findLookupCliente(Map criteria) {
		Map map = new HashMap();
		// Atenção: se forem colocados outros criterias, deve ser considerado
		// que neste ponto está ocorrendo um aninhamento em pessoa.
		String nmFantasia = (String)criteria.get("nmFantasia");
		if (StringUtils.isNotBlank(nmFantasia)) {
			criteria.put("nmFantasia",nmFantasia.concat("%"));
			map.put("pessoa", criteria);
			return clienteService.findLookup(map);
		}		
		return clienteService.findLookup(criteria);
	}

	public List findLookupControleCarga(Map criteria) {
		return controleCargaService.findLookup(criteria);
	}

	public List findLookupManifestoColeta(Map criteria) {
		return manifestoColetaService.findLookup(criteria);
	}

	public List findLookupManifestoEntrega(Map criteria) {
		return manifestoEntregaService.findLookup(criteria);
	}

	/**
	 * Método usado para definir os tipos de manifestos usados
	 * @param criteria
	 * @return
	 */
	public List findTipoManifesto(Map criteria) {
		List dominiosValidos = new ArrayList();
		dominiosValidos.add("VN");
		List retorno = domainValueService.findByDomainNameAndValues("DM_TAG_MANIFESTO", dominiosValidos);
		return retorno;
	}

	public List findLookupMir(Map criteria) {
		return mirService.findLookup(criteria);
	}

	public List findLookupAwb(Map criteria) {
		return awbService.findLookup(criteria);
	}

	public List findTipoDocumentoServico(Map criteria) {
		List dominiosValidos = new ArrayList();
		dominiosValidos.add("CTR");
		dominiosValidos.add("CRT");
		dominiosValidos.add("NFT");
		dominiosValidos.add("RRE"); 

		List retorno = domainValueService.findByDomainNameAndValues("DM_TIPO_DOCUMENTO_SERVICO", dominiosValidos);
		return retorno;
	}

	public List findLookupPedidoColeta(Map criteria) {
		List listPedidosColeta = pedidoColetaService.findLookup(criteria);
		List listRetorno = new ArrayList();
		TypedFlatMap map = null;
		for (Iterator iter = listPedidosColeta.iterator(); iter.hasNext();) {
			PedidoColeta pedidocoleta = (PedidoColeta) iter.next();
			map = new TypedFlatMap();
			map.put("idPedidoColeta", pedidocoleta.getIdPedidoColeta());
			map.put("filialByIdFilialResponsavel.pessoa.nmFantasia", pedidocoleta.getFilialByIdFilialResponsavel().getPessoa().getNmFantasia());
			map.put("filialByIdFilialResponsavel.sgFilial", pedidocoleta.getFilialByIdFilialResponsavel().getSgFilial());
			map.put("filialByIdFilialResponsavel.idFilial", pedidocoleta.getFilialByIdFilialResponsavel().getIdFilial());
			map.put("nrColeta", pedidocoleta.getNrColeta());
			listRetorno.add(map);
		}
		return listRetorno;
	}

	public List findLookupServiceDocumentFilialRRE(Map criteria) {
		return findLookupFilialByDocumentoServico(criteria);
	}

	public List findLookupServiceDocumentFilialCTR(Map criteria) {
		return findLookupFilialByDocumentoServico(criteria);
	}

	public List findLookupServiceDocumentFilialCRT(Map criteria) {
		return findLookupFilialByDocumentoServico(criteria);
	}

	public List findLookupServiceDocumentFilialNFT(Map criteria) {
		return findLookupFilialByDocumentoServico(criteria);
	}

	public List findLookupServiceDocumentFilialMDA(Map criteria) {
		return findLookupFilialByDocumentoServico(criteria);
	}

	//manifesto de viagem
	public List findLookupManifestoDocumentFilialVN(Map criteria) {
		return findLookupFilialByManifesto(criteria);
	}

	public List findLookupManifestoDocumentFilialVI(Map criteria) {
		return findLookupFilialByManifesto(criteria);
	}

	public List findLookupFilialByManifesto(Map criteria) {
		List list = filialService.findLookup(criteria);
		List retorno = new ArrayList();
		for (Iterator iter = list.iterator(); iter.hasNext();) {
			Filial filial = (Filial)iter.next();
			TypedFlatMap typedFlatMap = new TypedFlatMap();
			typedFlatMap.put("idFilial", filial.getIdFilial());
			typedFlatMap.put("sgFilial", filial.getSgFilial());
			typedFlatMap.put("pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
			retorno.add(typedFlatMap);
		}
		return retorno;
	}

	public List findLookupManifestoDocumentNumberVN(Map criteria) {
		List list = manifestoViagemNacionalService.findLookup(criteria);
		return list;
	}

	public List findLookupManifestoDocumentNumberVI(Map criteria) {
		List list = manifestoInternacionalService.findLookup(criteria);
		return list;
	}

	public List findLookupFilialByDocumentoServico(Map criteria) {
			List list = filialService.findLookup(criteria);
			List retorno = new ArrayList();
			for (Iterator iter = list.iterator(); iter.hasNext();) {
				Filial filial = (Filial)iter.next();
				TypedFlatMap typedFlatMap = new TypedFlatMap();
				typedFlatMap.put("idFilial", filial.getIdFilial());
				typedFlatMap.put("sgFilial", filial.getSgFilial());
				typedFlatMap.put("pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
				retorno.add(typedFlatMap);
			}
			return retorno;
	}

	public List findLookupServiceDocumentNumberRRE(TypedFlatMap criteria) {
		criteria.put("nrDoctoServico",criteria.get("nrReciboReembolso"));
		List listReembolsado = null;
		List lista = doctoServicoService.findLookupCustomReemb(criteria);
		if(!lista.isEmpty()) {
			lista = AliasToTypedFlatMapResultTransformer.getInstance().transformListResult(lista);
			TypedFlatMap map = (TypedFlatMap)lista.get(0);
			listReembolsado = reciboReembolsoService.findReembolsadoByIdReembolso(map.getLong("doctoServico.idDoctoServico"));
			if(!listReembolsado.isEmpty()) {
				map.put("idDoctoServicoReembolsado",listReembolsado.get(0));
			}
			if(map.getLong("nrDoctoServico")!= null)
				map.put("nrReciboReembolso",map.getLong("nrDoctoServico"));
		}
		return lista;
	}

	public List findLookupServiceDocumentNumberCTR(TypedFlatMap criteria) {
		criteria.put("nrDoctoServico",criteria.get("nrConhecimento"));
		List lista = doctoServicoService.findLookupCustomLocMerc(criteria);
		if(!lista.isEmpty()) {
			lista = AliasToTypedFlatMapResultTransformer.getInstance().transformListResult(lista);
			DomainValue dvRem = null;
			DomainValue dvDest = null;
			TypedFlatMap map = (TypedFlatMap)lista.get(0);

			DomainValue finalidade = conhecimentoService.findTpConhecimentoByIdConhecimento(map.getLong("doctoServico.idDoctoServico"));
			map.put("finalidade",finalidade.getValue());

			List menorNF = notaFiscalConhecimentoService.findNFByIdConhecimento(map.getLong("doctoServico.idDoctoServico"));
			if(!menorNF.isEmpty()) {
				map.put("nfCliente", (Integer)menorNF.get(0));
			}
			if(map.getVarcharI18n("tpIdentificacaoRem.description")!= null) {
				dvRem = new DomainValue();
				dvRem.setValue(map.getVarcharI18n("tpIdentificacaoRem.description").toString());
				map.put("remetente.pessoa.nrIdentificacao", FormatUtils.formatIdentificacao(dvRem,map.getString("remetente.pessoa.nrIdentificacao")));
			}
			if(map.getVarcharI18n("tpIdentificacaoDest.description")!= null) {
				dvDest = new DomainValue();
				dvDest.setValue(map.getVarcharI18n("tpIdentificacaoDest.description").toString());
				map.put("destinatario.pessoa.nrIdentificacao", FormatUtils.formatIdentificacao(dvDest,map.getString("destinatario.pessoa.nrIdentificacao")));
			} 
			if(map.get("nrDoctoServico")!= null) {
				map.put("nrConhecimento",map.getLong("nrDoctoServico"));
			}	
			if(map.get("dhEmissao")!= null) {
				map.put("dhEmissao",JTFormatUtils.format(map.getDateTime("dhEmissao"),"dd/MM/yyyy"));
			}	
		}
		return lista;
	}

	public List findLookupServiceDocumentNumberCRT(TypedFlatMap criteria) {
		criteria.put("nrDoctoServico",criteria.get("nrCrt"));
		List lista = doctoServicoService.findLookupCustomLocMerc(criteria);
		if(!lista.isEmpty()) {
			lista = AliasToTypedFlatMapResultTransformer.getInstance().transformListResult(lista);
			DomainValue dvRem = null;
			DomainValue dvDest = null;
			TypedFlatMap map = (TypedFlatMap)lista.get(0);
			if(map.getVarcharI18n("tpIdentificacaoRem.description")!= null) {
				dvRem = new DomainValue();
				dvRem.setValue(map.getVarcharI18n("tpIdentificacaoRem.description").toString());
				map.put("remetente.pessoa.nrIdentificacao", FormatUtils.formatIdentificacao(dvRem,map.getString("remetente.pessoa.nrIdentificacao")));
			}
			if(map.getVarcharI18n("tpIdentificacaoDest.description")!= null) {
				dvDest = new DomainValue();
				dvDest.setValue(map.getVarcharI18n("tpIdentificacaoDest.description").toString());
				map.put("destinatario.pessoa.nrIdentificacao", FormatUtils.formatIdentificacao(dvDest,map.getString("destinatario.pessoa.nrIdentificacao")));
			} 
			if(map.get("nrDoctoServico")!= null)
				map.put("nrCrt",(Long)map.get("nrDoctoServico"));
			
			if(map.get("dhEmissao")!= null) {
				map.put("dhEmissao",JTFormatUtils.format(map.getDateTime("dhEmissao"),"dd/MM/yyyy"));
			}	
		}
		return lista;
	}

	public List findLookupServiceDocumentNumberNFT(TypedFlatMap criteria) {
		criteria.put("nrDoctoServico",criteria.get("nrConhecimento"));
		List lista = doctoServicoService.findLookupCustomLocMerc(criteria);
		if(!lista.isEmpty()) {
			lista = AliasToTypedFlatMapResultTransformer.getInstance().transformListResult(lista);
			DomainValue dvRem = null;
			DomainValue dvDest = null;
			TypedFlatMap map = (TypedFlatMap)lista.get(0);
			if(map.getVarcharI18n("tpIdentificacaoRem.description")!= null) {
				dvRem = new DomainValue();
				dvRem.setValue(map.getVarcharI18n("tpIdentificacaoRem.description").toString());
				map.put("remetente.pessoa.nrIdentificacao", FormatUtils.formatIdentificacao(dvRem,map.getString("remetente.pessoa.nrIdentificacao")));
			}
			if(map.getVarcharI18n("tpIdentificacaoDest.description")!= null) {
				dvDest = new DomainValue();
				dvDest.setValue(map.getVarcharI18n("tpIdentificacaoDest.description").toString());
				map.put("destinatario.pessoa.nrIdentificacao", FormatUtils.formatIdentificacao(dvDest,map.getString("destinatario.pessoa.nrIdentificacao")));
			} 
			if(map.get("nrDoctoServico")!= null)
				map.put("nrConhecimento",(Long)map.get("nrDoctoServico"));

			if(map.get("dhEmissao")!= null) {
				map.put("dhEmissao",JTFormatUtils.format(map.getDateTime("dhEmissao"),"dd/MM/yyyy"));
			}	
		}
		return lista;
	}

	public List findLookupServiceDocumentNumberMDA(TypedFlatMap criteria) {
		List lista = doctoServicoService.findLookupCustomLocMerc(criteria);
		if(!lista.isEmpty()) {
			lista = AliasToTypedFlatMapResultTransformer.getInstance().transformListResult(lista);
			DomainValue dvRem = null;
			DomainValue dvDest = null;
			TypedFlatMap map = (TypedFlatMap)lista.get(0);
			if(map.getVarcharI18n("tpIdentificacaoRem.description")!= null) {
				dvRem = new DomainValue();
				dvRem.setValue(map.getVarcharI18n("tpIdentificacaoRem.description").toString());
				map.put("remetente.pessoa.nrIdentificacao", FormatUtils.formatIdentificacao(dvRem,map.getString("remetente.pessoa.nrIdentificacao")));
			}
			if(map.getVarcharI18n("tpIdentificacaoDest.description")!= null) {
				dvDest = new DomainValue();
				dvDest.setValue(map.getVarcharI18n("tpIdentificacaoDest.description").toString());
				map.put("destinatario.pessoa.nrIdentificacao", FormatUtils.formatIdentificacao(dvDest,map.getString("destinatario.pessoa.nrIdentificacao")));
			} 
			if(map.get("nrDoctoServico")!= null)
				map.put("nrDoctoServico",(Long)map.get("nrDoctoServico"));

			if(map.get("dhEmissao")!= null) {
				map.put("dhEmissao",JTFormatUtils.format(map.getDateTime("dhEmissao"),"dd/MM/yyyy")); 
			}	
		}
		return lista;
	}

	public TypedFlatMap findEmpresaUsuarioLogado() {
		TypedFlatMap typedFlatMap = new TypedFlatMap();
		Empresa empresa = SessionUtils.getEmpresaSessao();
		typedFlatMap.put("idEmpresa", empresa.getIdEmpresa());
		typedFlatMap.put("nomeEmpresa", empresa.getPessoa().getNmPessoa());	
		typedFlatMap.put("nrIdentificacaoEmpresa", FormatUtils.formatIdentificacao(empresa.getPessoa()));
		typedFlatMap.put("dtInicial",JTFormatUtils.format(JTDateTimeUtils.getDataAtual().minusDays(15)));
		typedFlatMap.put("dtFinal",JTFormatUtils.format(JTDateTimeUtils.getDataAtual()));
		return typedFlatMap;
	}

	public List findComboDoctoCliente(TypedFlatMap criteria) {
		return informacaoDoctoClienteService.find(criteria);
	}

	public ResultSetPage findPaginatedConsultaLocalizacaoMercadoria(TypedFlatMap criteria) {
		if(criteria.getLong("idDoctoServicoReembolsado")!= null) {
			criteria.put("idDoctoServico",criteria.getLong("idDoctoServicoReembolsado"));
		}
		ResultSetPage rs = doctoServicoService.findPaginatedConsultaLocalizacaoMercadoria(criteria);
		return rs;
	}

	public Integer getRowCountConsultaLocalizacaoMercadoria(TypedFlatMap criteria) {
		if(criteria.getLong("idDoctoServicoReembolsado")!= null) {
			criteria.put("idDoctoServico",criteria.getLong("idDoctoServicoReembolsado"));
		}
		return doctoServicoService.getRowCountConsultaLocalizacaoMercadoria(criteria);
	}

	public Map findByIdDetalhamento(TypedFlatMap criteria) {
		Map map = (Map)doctoServicoService.findByIdDSByLocalizacaoMercadoria(criteria);
		return map;
	}

	public Map findByIdDetailAbaPrincipal(TypedFlatMap criteria) {
		Map map = (Map)doctoServicoService.findByIdDSByLocalizacaoMercadoriaPrincipal(criteria);

		map.put("nrIdentificacaoRem", FormatUtils.formatIdentificacao((DomainValue)map.get("tpIdentificacaoRem"),(String)map.get("nrIdentificacaoRem")));
		map.put("nrIdentificacaoDest",FormatUtils.formatIdentificacao((DomainValue)map.get("tpIdentificacaoDest"),(String)map.get("nrIdentificacaoDest")));
		if(map.get("dhBaixa")!= null) {
			map.put("dhBaixa", JTFormatUtils.format((DateTime)map.get("dhBaixa")));
		}
		if(map.get("nrDiasRealEntrega") != null) {
			Integer qtdediasUteis = Integer.valueOf(((Short)map.get("nrDiasRealEntrega")).intValue());
			if(map.get("nrDiasBloqueio") != null) {
				Short nrDiasBloqueio = (Short)map.get("nrDiasBloqueio");
				qtdediasUteis = qtdediasUteis - Integer.valueOf(nrDiasBloqueio.intValue());
			}
			map.put("qtdediasUteis", qtdediasUteis);
		}

		String progrDtTurno= "";
		if(map.get("dtAgendamento")!= null) {
			YearMonthDay data = (YearMonthDay)map.get("dtAgendamento");
			progrDtTurno = JTFormatUtils.format(data);
			if(map.get("dsTurno")!= null)
				progrDtTurno = progrDtTurno+" - "+map.get("dsTurno").toString();
		}else if(map.get("dsTurno")!= null)
			progrDtTurno = map.get("dsTurno").toString();

		String progrHorario= "";
		if(map.get("hrPreferenciaInicial")!= null) {
			TimeOfDay hrPreferenciaInicial = (TimeOfDay)map.get("hrPreferenciaInicial");
			progrHorario = JTFormatUtils.format(hrPreferenciaInicial);
			if(map.get("hrPreferenciaFinal")!= null) {
				TimeOfDay hrPreferenciaFinal = (TimeOfDay)map.get("hrPreferenciaFinal");
				progrHorario = progrHorario+" às "+JTFormatUtils.format(hrPreferenciaFinal);
			}	
		} else if(map.get("hrPreferenciaFinal")!= null) {
			TimeOfDay hrPreferenciaFinal = (TimeOfDay)map.get("hrPreferenciaFinal");
			progrHorario = JTFormatUtils.format(hrPreferenciaFinal);
		}
		if (!progrHorario.equalsIgnoreCase(""))
			map.put("programacao",progrDtTurno +" "+ progrHorario);
		else 
			map.put("programacao",progrDtTurno);

		return map;
	}

	public List findNotasFiscaisByConhecimento(TypedFlatMap criteria) {
		return notaFiscalConhecimentoService.findNFByIdDoctoServico(criteria.getLong("idDoctoServico"));
	}

	public List findPaginatedIntegrantes(TypedFlatMap criteria) {
		List listaClientes = doctoServicoService.findPaginatedIntegrantes(criteria.getLong("idDoctoServico"));
		List listaNova = null;
		Long idRegistro =Long.valueOf(0);
		if(!listaClientes.isEmpty()) {
			listaNova = new ArrayList();
			Map mapClientes = (HashMap)listaClientes.get(0);
			if(mapClientes.get("nmPessoaRem")!= null) {
				Map map = new HashMap();
				idRegistro = idRegistro + Long.valueOf(1);
				map.put("tipoCliente", configuracoesFacade.getMensagem("remetente"));
				
				if(mapClientes.get("tpIdentificacaoRem")!= null)
					map.put("tpIdentificacao", mapClientes.get("tpIdentificacaoRem"));
				
				if(mapClientes.get("nrIdentificacaoRem")!= null)
					map.put("nrIdentificacao", FormatUtils.formatIdentificacao((DomainValue)mapClientes.get("tpIdentificacaoRem"),mapClientes.get("nrIdentificacaoRem").toString()));
				map.put("nmPessoa", mapClientes.get("nmPessoaRem"));
				map.put("municipio", mapClientes.get("municipioRem"));
				map.put("idCliente", mapClientes.get("idClienteRem"));
				map.put("idRegistro", idRegistro);
				listaNova.add(map);
			}
			if(mapClientes.get("nmPessoaDest")!= null) {
				Map map = new HashMap();
				idRegistro = idRegistro + Long.valueOf(1);
				map.put("tipoCliente", configuracoesFacade.getMensagem("destinatario"));
				map.put("tpIdentificacao", mapClientes.get("tpIdentificacaoDest"));
				map.put("nrIdentificacao", FormatUtils.formatIdentificacao((DomainValue)mapClientes.get("tpIdentificacaoDest"), mapClientes.get("nrIdentificacaoDest").toString()));
				map.put("nmPessoa", mapClientes.get("nmPessoaDest"));
				map.put("municipio", mapClientes.get("municipioDest"));
				map.put("idCliente", mapClientes.get("idClienteDest"));
				map.put("idRegistro", idRegistro);
				listaNova.add(map);
			}
			if(mapClientes.get("nmPessoaCons")!= null) {
				Map map = new HashMap();
				idRegistro = idRegistro + Long.valueOf(1);
				map.put("tipoCliente", configuracoesFacade.getMensagem("consignatario"));
				map.put("tpIdentificacao", mapClientes.get("tpIdentificacaoCons"));
				map.put("nrIdentificacao", FormatUtils.formatIdentificacao((DomainValue)mapClientes.get("tpIdentificacaoCons"), mapClientes.get("nrIdentificacaoCons").toString()));
				map.put("nmPessoa", mapClientes.get("nmPessoaCons"));
				map.put("municipio", mapClientes.get("municipioCons"));
				map.put("idCliente", mapClientes.get("idClienteCons"));
				map.put("idRegistro", idRegistro);
				listaNova.add(map);
			}
			if(mapClientes.get("nmPessoaRedes")!= null) {
				Map map = new HashMap();
				idRegistro = idRegistro + Long.valueOf(1);
				map.put("tipoCliente", configuracoesFacade.getMensagem("redespacho"));
				map.put("tpIdentificacao", mapClientes.get("tpIdentificacaoRedes"));
				map.put("nrIdentificacao", FormatUtils.formatIdentificacao((DomainValue)mapClientes.get("tpIdentificacaoRedes"), mapClientes.get("nrIdentificacaoRedes").toString()));
				map.put("nmPessoa", mapClientes.get("nmPessoaRedes"));
				map.put("municipio", mapClientes.get("municipioRedes"));
				map.put("idCliente", mapClientes.get("idClienteRedes"));
				map.put("idRegistro", idRegistro);
				listaNova.add(map);
			}
		}
		List listaDevedores = devedorDocServFatService.findDevedoresByIdDoctoServico(criteria.getLong("idDoctoServico"));
		if(!listaDevedores.isEmpty()) {
			for(Iterator iter = listaDevedores.iterator();iter.hasNext();) {
				Map mapDev = (Map)iter.next();
				idRegistro = idRegistro + Long.valueOf(1);
				if(mapDev.get("tpIdentificacao")!= null)
					mapDev.put("nrIdentificacao",FormatUtils.formatIdentificacao((DomainValue)mapDev.get("tpIdentificacao"),mapDev.get("nrIdentificacao").toString()));
				mapDev.put("idRegistro", idRegistro);
				mapDev.put("tipoCliente", configuracoesFacade.getMensagem("responsavelFrete"));
				listaNova.add(mapDev);
			}
		}
		return listaNova;
	}

	public List findPaginatedDadosCompl(TypedFlatMap criteria) {
		return dadosComplementoService.findPaginatedDadosCompl(criteria.getLong("idDoctoServico"));
	}

	public List findPaginatedComplNF(TypedFlatMap criteria) {
		return notaFiscalConhecimentoService.findPaginatedComplNF(criteria.getLong("idDoctoServico"));
	}

	public List findPaginatedRastreamento(TypedFlatMap criteria) {
		Long idDoctoServico = criteria.getLong("idDoctoServico");
		List lista = new ArrayList();
		List listaMercManEnt = reciboReembolsoService.findRastreamentoME(idDoctoServico);
		if(!listaMercManEnt.isEmpty()) {
			Map map = (Map)listaMercManEnt.get(0);
			lista.add(map);
		}
		List listaReemDest = reciboReembolsoService.findRastreamentoReembDest(idDoctoServico);
		if(!listaReemDest.isEmpty()) {
			Map map = (Map)listaReemDest.get(0);
			lista.add(map);
		}
		List listaMirEntAdm = reciboReembolsoService.findRastreamentoMirEntregaAdm(idDoctoServico);
		if(!listaMirEntAdm.isEmpty()) {
			Map map = (Map)listaMirEntAdm.get(0);
			lista.add(map);
			if(map.get("dhRecebimento")!= null) {
				Map mapMirRecebida = new HashMap();
				mapMirRecebida.put("evento","Recebimento da MIR no administrativo");
				mapMirRecebida.put("sgFilial",map.get("sgFilial"));
				mapMirRecebida.put("nrDocto", map.get("nrDocto"));
				mapMirRecebida.put("dhEnvio", map.get("dhEnvio"));
				mapMirRecebida.put("origem", map.get("origem"));
				mapMirRecebida.put("dhRecebimento", map.get("dhRecebimento"));
				mapMirRecebida.put("destino", map.get("destino"));
				map.put("dhRecebimento","");
				lista.add(mapMirRecebida);
			}
		}

		List listaMirDestOr = reciboReembolsoService.findRastreamentoMirDestOri(idDoctoServico);
		if(!listaMirDestOr.isEmpty()) {
			Map map = (Map)listaMirDestOr.get(0);
			lista.add(map);
			if(map.get("dhRecebimento")!= null) {
				Map mapMirDestOr = new HashMap();
				mapMirDestOr.put("evento","Recebimento da MIR na origem");
				mapMirDestOr.put("sgFilial",map.get("sgFilial"));
				mapMirDestOr.put("nrDocto", map.get("nrDocto"));
				mapMirDestOr.put("dhEnvio", map.get("dhEnvio"));
				mapMirDestOr.put("origem", map.get("origem"));
				mapMirDestOr.put("dhRecebimento", map.get("dhRecebimento"));
				mapMirDestOr.put("destino", map.get("destino"));
				lista.add(mapMirDestOr);
			}
		}

		List listaMirEnt = reciboReembolsoService.findRastreamentoMirEnt(idDoctoServico);
		if(!listaMirEnt.isEmpty()) {
			Map map = (Map)listaMirEnt.get(0);
			lista.add(map);
			if(map.get("dhRecebimento")!= null) {
				Map mapMirEnt = new HashMap();
				mapMirEnt.put("evento","Recebimento da MIR na origem");
				mapMirEnt.put("sgFilial",map.get("sgFilial"));
				mapMirEnt.put("nrDocto", map.get("nrDocto"));
				mapMirEnt.put("dhEnvio", map.get("dhEnvio"));
				mapMirEnt.put("origem", map.get("origem"));
				mapMirEnt.put("dhRecebimento", map.get("dhRecebimento"));
				mapMirEnt.put("destino", map.get("destino"));
				lista.add(mapMirEnt);
			}
		}
		return lista;
	}
	
	public Map findAgendamentosByDoctoServico(TypedFlatMap criteria) {
		Map map = null;
		List lista = agendamentoEntregaService.findAgendamentosByDoctoServico(criteria.getLong("idDoctoServico"));
		if(!lista.isEmpty()) {
			map =(Map) lista.get(0);
			DomainValue tipoAgend = (DomainValue) map.get("tpAgendamento");
			map.put("tpAgendamento", tipoAgend.getDescription());
			DomainValue situAgend = (DomainValue) map.get("tpSituacaoAgendamento");
			map.put("tpSituacaoAgendamento", situAgend.getDescription());
			if(map.get("nrDdd")!= null)
				map.put("nrTelefone","("+map.get("nrDdd")+")"+" "+map.get("nrTelefone"));
			if(map.get("dhContato")!= null)
				map.put("dhContato",JTFormatUtils.format((DateTime)map.get("dhContato")));

			if(map.get("dhCancelamento")!= null)
				map.put("dhCancelamento",JTFormatUtils.format((DateTime)map.get("dhCancelamento")));
		}
		return map;
	}

	public Map findAgendamentoByIdAgendamento(Long idAgendamento) {
		Map map = null;
		List lista = agendamentoEntregaService.findAgendamentoByIdAgendamento(idAgendamento);
		if(!lista.isEmpty()) {
			map = (Map)lista.get(0);
			DomainValue tipoAgend = (DomainValue) map.get("tpAgendamento");
			map.put("tpAgendamento", tipoAgend.getDescription());
			DomainValue situAgend = (DomainValue) map.get("tpSituacaoAgendamento");
			map.put("tpSituacaoAgendamento", situAgend.getDescription());
			if(map.get("nrDdd")!= null)
				map.put("nrTelefone","("+map.get("nrDdd")+")"+" "+map.get("nrTelefone"));
			if(map.get("dhContato")!= null)
				map.put("dhContato",JTFormatUtils.format((DateTime)map.get("dhContato")));
				
		}	
		return map;
	}
	
	public List findPaginatedAgendamentosByDoctoServico(TypedFlatMap criteria) {
		return agendamentoEntregaService.findPaginatedAgendamentosByDoctoServico(criteria.getLong("idDoctoServico"));
	}

	public List findPaginatedParcelaPreco(TypedFlatMap criteria) {
		List lista = parcelaDoctoServicoService.findPaginatedParcelasPreco(criteria.getLong("idDoctoServico"));
		for(Iterator iter = lista.iterator();iter.hasNext();) {
			Map map = (HashMap)iter.next();

			BigDecimal vlTotalParcelas = (BigDecimal)map.get("vlTotalParcelas");
			if(vlTotalParcelas.intValue()> 0) {
				BigDecimal vlParcela = (BigDecimal)map.get("vlParcela");
				BigDecimal analise = vlParcela.divide(vlTotalParcelas, 4, RoundingMode.HALF_EVEN).multiply(new BigDecimal(100));
				map.put("analise",analise);
			}
			
			String vlTotalParcelas2 = map.get("dsSimbolo") +" "+FormatUtils.formatDecimal("#,###,###,###,##0.00",(BigDecimal)map.get("vlTotalParcelas"));
			map.put("vlTotalParcelas",vlTotalParcelas2);
		}
		if(lista!= null && !lista.isEmpty()) {
			Map map = (Map)lista.get(0);
			if(map.get("vlDesconto")!= null) {
				Map mapDesconto = new HashMap();
				mapDesconto.put("nmParcelaPreco",configuracoesFacade.getMensagem("desconto"));
				mapDesconto.put("vlParcela",map.get("vlDesconto"));
				mapDesconto.put("analise","");
				mapDesconto.put("dsSimbolo",map.get("moeda"));
				lista.add(mapDesconto);
			}
		}
		return lista;
	}

	public List findPaginatedCalculoServico(TypedFlatMap criteria) {
		List lista = parcelaDoctoServicoService.findPaginatedCalculoServico(criteria.getLong("idDoctoServico"));

		for(Iterator iter = lista.iterator();iter.hasNext();) {
			Map map = (Map)iter.next();
			BigDecimal vlTotalServicos = (BigDecimal)map.get("vlTotalServicos");
			if(vlTotalServicos.intValue() > 0) {
				BigDecimal vlParcela = (BigDecimal)map.get("vlParcela");
				BigDecimal analise = vlParcela.divide(vlTotalServicos, 4, RoundingMode.HALF_UP).multiply(new BigDecimal(100));
				map.put("analise", analise);
			}
		}
		return lista;
	}

	public Map findTotaisCalculoServico(Long idDoctoServico) {
		Map map = doctoServicoService.findTotaisCalculoServico(idDoctoServico);
		if(map != null) {
			if(map.get("vlTotalServicos")!= null) {
				String vlTotalServicos = map.get("dsSimbolo") +" "+FormatUtils.formatDecimal("#,###,###,###,##0.00",(BigDecimal)map.get("vlTotalServicos"));
				map.put("vlTotalServicos",vlTotalServicos);
			}
			if(map.get("vlTotalDocServico") != null) {
				String vlTotalCTRC = map.get("dsSimbolo") +" "+FormatUtils.formatDecimal("#,###,###,###,##0.00",(BigDecimal)map.get("vlTotalDocServico"));
				map.put("vlTotalDocServico",vlTotalCTRC);
			}
			if(map.get("vlICMSST") != null) {
				String vlICMSST = map.get("dsSimbolo") +" "+FormatUtils.formatDecimal("#,###,###,###,##0.00",(BigDecimal)map.get("vlICMSST"));
				map.put("vlICMSST",vlICMSST);
			}
			if(map.get("vlLiquido") != null) {
				String vlLiquido = map.get("dsSimbolo") +" "+FormatUtils.formatDecimal("#,###,###,###,##0.00",(BigDecimal)map.get("vlLiquido"));
				map.put("vlLiquido",vlLiquido);
			}
		}
		return map;
	}

	public Map findTipoTributacaoIcms(Long idDoctoServico) {
		Map map = (Map)impostoServicoService.findTipoTributacaoIcms(idDoctoServico).get(0);
		return map;
	}

	public List findPaginatedImpostos(TypedFlatMap criteria) {
		List lista = impostoServicoService.findPaginatedImpostos(criteria.getLong("idDoctoServico"));
		Map mapIcmsDoctoServico = impostoServicoService.findIcmsDoctoServico(criteria.getLong("idDoctoServico"));
		if(mapIcmsDoctoServico != null) {
			if(mapIcmsDoctoServico.get("vlImposto")!= null) {
				Map mapImposto = new HashMap();
				DomainValue dv = new DomainValue();
				dv.setValue("ICMS");
				dv.setDescription( new VarcharI18n("ICMS"));
				mapImposto.put("tpImposto",dv);
				mapImposto.put("vlBaseCalculo",mapIcmsDoctoServico.get("vlBaseCalcImposto"));
				mapImposto.put("pcAliquota",mapIcmsDoctoServico.get("pcAliquotaIcms"));
				mapImposto.put("vlImpostoServico",mapIcmsDoctoServico.get("vlImposto"));
				mapImposto.put("dsSimbolo",mapIcmsDoctoServico.get("dsSimbolo"));
				mapImposto.put("sgMoeda",mapIcmsDoctoServico.get("sgMoeda"));
				lista.add(mapImposto);
			}
		}
		return lista;			
	}	

	public Map findDadosCalculoFrete(Long idDoctoServico) {
		Map map = new HashMap();
		List listaDC = parcelaDoctoServicoService.findDadosCalculoFrete(idDoctoServico);
		if(!listaDC.isEmpty()) {
			map = (Map)listaDC.get(0);
			DomainValue dvTipoTabelaPreco = null;
			if(map.get("tpTipoTabelaPreco")!= null)
				dvTipoTabelaPreco = (DomainValue)map.get("tpTipoTabelaPreco");

			if(dvTipoTabelaPreco != null && map.get("tpSubtipoTabelaPreco") != null && map.get("nrVersao")!= null) {
				Integer nrVersao = (Integer)map.get("nrVersao");
				String tabelaPreco = dvTipoTabelaPreco.getDescription()+String.valueOf(nrVersao.intValue())+"-"+map.get("tpSubtipoTabelaPreco").toString();
				map.put("tabelaPreco",tabelaPreco);
			}	
			DomainValue dvCalculoPreco = (DomainValue)map.get("tpCalculoPreco");
			if(dvCalculoPreco!=null)
				map.put("tpCalculoPreco",dvCalculoPreco.getDescription());
		}

		List listaConh = parcelaDoctoServicoService.findDadosCalculoDoctoServico(idDoctoServico);
		if(!listaConh.isEmpty()) {
			List listaValorReemb = parcelaDoctoServicoService.findValorMercadoriaReembolso(idDoctoServico);
			if(!listaValorReemb.isEmpty()) {
				Map mapReemb = (Map)listaValorReemb.get(0);
				if(mapReemb.get("vlMercadoriaReemb")!= null)
					mapReemb.put("vlMercadoriaReemb",mapReemb.get("dsSimbolo")+ " "+ FormatUtils.formatDecimal("#,###,###,###,##0.00", (BigDecimal)mapReemb.get("vlMercadoriaReemb")));
				map.putAll(mapReemb);
			}	
			map.putAll((Map)listaConh.get(0));
		}	

		List listaConhI = parcelaDoctoServicoService.findDadosCalculoDoctoServicoInternacional(idDoctoServico);
		if(!listaConhI.isEmpty()) {
			Map mapConhI = (Map)listaConhI.get(0);
			if(mapConhI.get("vlMercadoriaI")!= null)
				mapConhI.put("vlMercadoriaI",mapConhI.get("dsSimbolo")+ " "+ FormatUtils.formatDecimal("#,###,###,###,##0.00", (BigDecimal)mapConhI.get("vlMercadoriaI")));
			if(mapConhI.get("vlFreteExterno")!= null)
				mapConhI.put("vlFreteExterno",mapConhI.get("dsSimbolo")+ " "+ FormatUtils.formatDecimal("#,###,###,###,##0.00", (BigDecimal)mapConhI.get("vlFreteExterno")));
			map.putAll(mapConhI);
		}	
		return map;
	}

	public Map findComplementosOutros(Long idDoctoServico) {
		List lista = doctoServicoService.findComplementosOutros(idDoctoServico);
		Map map = null;
		Map mapConh = null;
		if(lista!= null && !lista.isEmpty()) {
			map = (Map)lista.get(0);

			if(map.get("dhInclusao")!= null)
				map.put("dhInclusao", JTFormatUtils.format((DateTime)map.get("dhInclusao")));

			if(map.get("dhAlteracao")!= null)
				map.put("dhAlteracao", JTFormatUtils.format((DateTime)map.get("dhAlteracao")));

			List listaConh = conhecimentoService.findComplementosOutrosIndicadorCooperacao(idDoctoServico);
			if(lista!= null && !listaConh.isEmpty()) {

				mapConh = (Map)listaConh.get(0);

				DomainValue dv = (DomainValue)mapConh.get("tpCtrcParceria");
				if(dv != null)
					map.put("indicadorCooperacao",dv.getDescription());

				if(mapConh.get("idConhecimento")!= null) {
					map.put("idConhecimento", Integer.valueOf(mapConh.get("idConhecimento").toString()));
				}	

				map.put("indicadorEDICliente",mapConh.get("blIndicadorEdi"));
			}	
		}
		return map;
	}

	public Map findRespostaAbas(Long idDoctoServico) {
		Map mapAbas = new HashMap();
		boolean abaReemb = reciboReembolsoService.findReembolsoAba(idDoctoServico);
		if(abaReemb == true)
			mapAbas.put("abaReemb", "true");
		boolean abaAgend = agendamentoEntregaService.findAgendamentosAba(idDoctoServico);
		if(abaAgend == true)
			mapAbas.put("abaAgend","true");
		boolean abaEmb = servicoEmbalagemService.findEmbalagensAba(idDoctoServico);
		if(abaEmb == true)
			mapAbas.put("abaEmb","true");
		boolean abaDados = dadosComplementoService.findDadosComplAba(idDoctoServico);
		if(abaDados == true)
			mapAbas.put("abaDados","true");

		return mapAbas;
	}

	public Map findRespostaAbasDetalhamento(Long idDoctoServico) {
		Map mapAbas = new HashMap();
		boolean abaRNC = naoConformidadeService.findNCByIdDoctoServico(idDoctoServico);
		if(abaRNC == true)
			mapAbas.put("abaRNC", "true");
		boolean abaBloqueio = ocorrenciaDoctoServicoService.findOcorDSByIdDoctoServico(idDoctoServico);
		if(abaBloqueio == true)
			mapAbas.put("abaBloqueio","true");
		boolean abaParceiras = ctoCtoCooperadaService.findCoopByIdDoctoServico(idDoctoServico);
		if(abaParceiras == true)
			mapAbas.put("abaParceiras","true");
		
		boolean abaCC = preManifestoDocumentoService.findCCByIdDoctoServico(idDoctoServico);
		if(abaCC == false)
			abaCC = doctoServicoService.findCCByIdDoctoServico(idDoctoServico);
		if(abaCC == true)	
			mapAbas.put("abaCC","true");

		return mapAbas;
	}

	public List findPaginatedItemNFC(TypedFlatMap criteria) {
		return itemNfCtoService.findPaginatedItemNFC(criteria.getLong("idNotaFiscalConhecimento"));
	}

	public TypedFlatMap findRetornoPopPupDoctoServico(TypedFlatMap criteria) {
		List lista = doctoServicoService.findLookupCustomLocMerc(criteria);
		TypedFlatMap map = null;
		if(!lista.isEmpty()) {
			lista = AliasToTypedFlatMapResultTransformer.getInstance().transformListResult(lista);
			DomainValue dvRem = null;
			DomainValue dvDest = null;
			map = (TypedFlatMap)lista.get(0);

			DomainValue finalidade = conhecimentoService.findTpConhecimentoByIdConhecimento(map.getLong("doctoServico.idDoctoServico"));
			if(finalidade != null)
				map.put("finalidade",finalidade.getValue());

			List menorNF = notaFiscalConhecimentoService.findNFByIdConhecimento(map.getLong("doctoServico.idDoctoServico"));
			if(!menorNF.isEmpty()) {
				map.put("nfCliente", (Integer)menorNF.get(0));
			}
			if(map.getVarcharI18n("tpIdentificacaoRem.value")!= null) {
				dvRem = new DomainValue();
				dvRem.setValue(map.getVarcharI18n("tpIdentificacaoRem.value").toString());
				map.put("remetente.pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(dvRem,map.getString("remetente.pessoa.nrIdentificacao")));
				map.put("remetente.pessoa.nrIdentificacao", FormatUtils.formatIdentificacao(dvRem,map.getString("remetente.pessoa.nrIdentificacao")));

				if(map.get("remetenteFantasia.pessoa.nmFantasia")!= null)
					map.put("remetenteFantasia.nmFantasia", map.getString("remetenteFantasia.pessoa.nmFantasia"));
				else
					map.put("remetenteFantasia.nmFantasia", "");
			}
			if(map.getVarcharI18n("tpIdentificacaoDest.value")!= null) {
				dvDest = new DomainValue();
				dvDest.setValue(map.getVarcharI18n("tpIdentificacaoDest.value").toString());
				map.put("destinatario.pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(dvDest,map.getString("destinatario.pessoa.nrIdentificacao")));

				if(map.get("destinatariofantasia.pessoa.nmFantasia")!= null)
					map.put("destinatarioFantasia.nmFantasia", map.getString("destinatariofantasia.pessoa.nmFantasia"));
				else
					map.put("destinatarioFantasia.nmFantasia", "");
			} 
			map.put("idDoctoServico",map.getLong("doctoServico.idDoctoServico"));
			map.put("filialByIdFilialOrigem.sgFilial",map.get("filialOrigem.sgFilial"));
			map.put("filialByIdFilialOrigem.idFilial",map.get("filialOrigem.idFilial"));
			map.put("filialByIdFilialOrigem.pessoa.nmFantasia",map.get("filialOrigem.pessoa.nmFantasia"));

			if(map.get("dhEmissao")!= null) {
				map.put("periodoInicial",JTFormatUtils.format(map.getDateTime("dhEmissao"),"dd/MM/yyyy"));
				map.put("periodoFinal",JTFormatUtils.format(map.getDateTime("dhEmissao"),"dd/MM/yyyy"));
			}	
		}		
		return map;
	}

	public List findPaginatedControleCarga(TypedFlatMap criteria) {
		return controleCargaService.findPaginatedControleCargaByLocalizacoMerc(criteria.getLong("idDoctoServico"));
	}

	public Map findManifestoColetaByIdDoctoServico(Long idDoctoServico) {
		Map map = manifestoColetaService.findManifestoColetaByIdDoctoServico(idDoctoServico);
		if(map != null) {
			if(map.get("tpModoPedidoColeta")!= null) {
				DomainValue tpModoPedidoColeta = (DomainValue)map.get("tpModoPedidoColeta");
				map.put("tpModoPedidoColeta",tpModoPedidoColeta.getDescription());
			}
			if(map.get("tpPedidoColeta")!= null) {
				DomainValue tpPedidoColeta = (DomainValue)map.get("tpPedidoColeta");
				map.put("tpPedidoColeta", tpPedidoColeta.getDescription());
			}
			if(map.get("dhEmissao")!= null)
				map.put("dhEmissao", JTFormatUtils.format((DateTime)map.get("dhEmissao")));
			
			if(map.get("dhColetaDisponivel")!= null)
				map.put("dhColetaDisponivel", JTFormatUtils.format((DateTime)map.get("dhColetaDisponivel")));
		}
		return map;
	}

	public List findPaginatedManifestoViagem(TypedFlatMap criteria) {
		ResultSetPage rs = manifestoViagemNacionalService.findPaginatedManifestosViagemByLocalizacaoMercadoria(criteria.getLong("idDoctoServico"));
		return rs.getList();
	}

	public ResultSetPage findPaginatedManifestoEntrega(TypedFlatMap criteria) {
		return manifestoEntregaService.findPaginatedManifestoEntregaByIdDoctoServico(criteria.getLong("idDoctoServico"));
	}

	public ResultSetPage findPaginatedEventos(TypedFlatMap criteria) {
		return eventoDocumentoServicoService.findPaginatedEventosByIdDoctoServico(criteria.getLong("idDoctoServico"));
	}

	public ResultSetPage findPaginatedBloqueiosLiberacoes(TypedFlatMap criteria) {
		return ocorrenciaDoctoServicoService.findPaginatedBloqueiosLiberacoesByIdDoctoServ(criteria.getLong("idDoctoServico"));
	}

	//ABA RNC
	public Map findByIdDetailAbaRNC(TypedFlatMap criteria) {
		Map map = new HashMap();
		List lista = naoConformidadeService.findNaoConformidadeByIdDoctoServicoLocMerc(criteria.getLong("idDoctoServico"));
		if(!lista.isEmpty()) {
			map = (Map)lista.get(0);
			DomainValue dv = (DomainValue)map.get("tpStatusNaoConformidade");
			map.put("tpStatusNaoConformidade",dv.getValue());
			
			if(map.get("dhEmissao")!= null)
				map.put("dhEmissao", JTFormatUtils.format((DateTime)map.get("dhEmissao")));
		}
		return map;
	}

	public List findPaginatedOcorrenciaNaoConformidade(TypedFlatMap criteria) {
		return ocorrenciaNaoConformidadeService.findPaginatedOcorrenciaNaoConformidade(criteria.getLong("idNaoConformidade"));
	}

	//ABA COBRANÇA
	/**
	 * 
	 * @param criteria
	 * @return
	 */
	public List findPaginatedDevedorDocServFatByDoctoServico(TypedFlatMap criteria) {
		return consultarDadosCobrancaDocumentoServicoService.findDevedorDocServFatByDoctoServico(criteria);
	}

	/**
	 * 
	 * @param criteria
	 * @return Map
	 */
	public Map findDevedorDocServFatDetail(TypedFlatMap criteria) {
		return consultarDadosCobrancaDocumentoServicoService.findDevedorDocServFatDetail(criteria);
	}

	//ABA PARCEIRAS
	public Map findCooperadaByIdConhecimento(Long idDoctoServico) {
		List lista = ctoCtoCooperadaService.findCooperadaByIdConhecimento(idDoctoServico);
		Map map = null;
		if(!lista.isEmpty()) {
			map = (Map)lista.get(0);
			
			if(map.get("idCtoCtoCooperada") != null){
				List listaNF = notaFiscalCtoCooperadaService.findNotaFiscalByIdCooperada((Long)map.get("idCtoCtoCooperada"));
				if(!listaNF.isEmpty()){
					Map map2 = (Map)listaNF.get(0);
					if(map2.get("qtVolumes")!= null)
						map.put("volumes",(Integer)map2.get("qtVolumes"));
					
					if(map2.get("psMercadoria")!= null)
						map.put("pesoReal",map2.get("psMercadoria"));
					
					if(map2.get("vlTotal") != null) {
						map.put("valorMercadoria",map.get("dsSimboloMoeda")+ " "+ FormatUtils.formatDecimal("#,###,###,###,##0.00", (BigDecimal)map2.get("vlTotal")));
					}
					
				}
			}
			
			if(map.get("tpIdentificacaoCooperada")!= null) {
				DomainValue dvCoop = (DomainValue)map.get("tpIdentificacaoCooperada");
				map.put("nrIdentificacaoCooperada",FormatUtils.formatIdentificacao(dvCoop.getValue(),map.get("nrIdentificacaoCooperada").toString()));
			}	
			if(map.get("tpConhecimento")!= null) {
				DomainValue dvConh = (DomainValue)map.get("tpConhecimento");
				map.put("tpConhecimento",dvConh.getDescription());
			}	
			if(map.get("tpIdentificacaoRem")!= null) {
				DomainValue dvRem = (DomainValue)map.get("tpIdentificacaoRem");
				map.put("nrIdentificacaoRem", FormatUtils.formatIdentificacao(dvRem.getValue(),map.get("nrIdentificacaoRem").toString()));
			}	
			if(map.get("tpIdentificacaoDest")!= null) {
				DomainValue dvDest = (DomainValue)map.get("tpIdentificacaoDest");
				map.put("nrIdentificacaoDest", FormatUtils.formatIdentificacao(dvDest.getValue(),map.get("nrIdentificacaoDest").toString()));
			}
			if(map.get("vlFrete") != null) {
				map.put("vlFrete",map.get("dsSimboloMoeda")+ " "+ FormatUtils.formatDecimal("#,###,###,###,##0.00", (BigDecimal)map.get("vlFrete")));
			}
			
			if(map.get("dhEmissao")!= null)
				map.put("dhEmissao", JTFormatUtils.format((DateTime)map.get("dhEmissao")));
			
			if(map.get("dtEntrega")!= null)
				map.put("dtEntrega", JTFormatUtils.format((DateTime)map.get("dtEntrega")));
		}	
		return map;
		
	}
	
	public List findPaginatedIntegrantesAbaParcerias(TypedFlatMap criteria) {
		List listaClientes = ctoCtoCooperadaService.findPaginatedIntegrantes(criteria.getLong("idDoctoServico"));
		List listaNova = null;
		Long idRegistro =Long.valueOf(0);
		if(!listaClientes.isEmpty()) {
			listaNova = new ArrayList();
			Map mapClientes = (HashMap)listaClientes.get(0);
			if(mapClientes.get("nmPessoaRem")!= null) {
				Map map = new HashMap();
				idRegistro = idRegistro + Long.valueOf(1);
				map.put("tipoCliente", configuracoesFacade.getMensagem("remetente"));
				map.put("tpIdentificacao", mapClientes.get("tpIdentificacaoRem"));
				map.put("nrIdentificacao", FormatUtils.formatIdentificacao((DomainValue)mapClientes.get("tpIdentificacaoRem"),mapClientes.get("nrIdentificacaoRem").toString()));
				map.put("nmPessoa", mapClientes.get("nmPessoaRem"));
				map.put("municipio", mapClientes.get("municipioRem"));
				map.put("idCliente", mapClientes.get("idClienteRem"));
				map.put("idRegistro", idRegistro);
				listaNova.add(map);
			}
			if(mapClientes.get("nmPessoaDest")!= null) {
				Map map = new HashMap();
				idRegistro = idRegistro + Long.valueOf(1);
				map.put("tipoCliente", configuracoesFacade.getMensagem("destinatario"));
				map.put("tpIdentificacao", mapClientes.get("tpIdentificacaoDest"));
				map.put("nrIdentificacao", FormatUtils.formatIdentificacao((DomainValue)mapClientes.get("tpIdentificacaoDest"), mapClientes.get("nrIdentificacaoDest").toString()));
				map.put("nmPessoa", mapClientes.get("nmPessoaDest"));
				map.put("municipio", mapClientes.get("municipioDest"));
				map.put("idCliente", mapClientes.get("idClienteDest"));
				map.put("idRegistro", idRegistro);
				listaNova.add(map);
			}
			if(mapClientes.get("nmPessoaConsi")!= null) {
				Map map = new HashMap();
				idRegistro = idRegistro + Long.valueOf(1);
				map.put("tipoCliente", configuracoesFacade.getMensagem("consignatario"));
				map.put("tpIdentificacao", mapClientes.get("tpIdentificacaoConsi"));
				map.put("nrIdentificacao", FormatUtils.formatIdentificacao((DomainValue)mapClientes.get("tpIdentificacaoConsi"), mapClientes.get("nrIdentificacaoConsi").toString()));
				map.put("nmPessoa", mapClientes.get("nmPessoaConsi"));
				map.put("municipio", mapClientes.get("municipioConsi"));
				map.put("idCliente", mapClientes.get("idClienteConsi"));
				map.put("idRegistro", idRegistro);
				listaNova.add(map);
			}
			if(mapClientes.get("nmPessoaRedes")!= null) {
				Map map = new HashMap();
				idRegistro = idRegistro + Long.valueOf(1);
				map.put("tipoCliente", configuracoesFacade.getMensagem("redespacho"));
				map.put("tpIdentificacao", mapClientes.get("tpIdentificacaoRedes"));
				map.put("nrIdentificacao", FormatUtils.formatIdentificacao((DomainValue)mapClientes.get("tpIdentificacaoRedes"), mapClientes.get("nrIdentificacaoRedes").toString()));
				map.put("nmPessoa", mapClientes.get("nmPessoaRedes"));
				map.put("municipio", mapClientes.get("municipioRedes"));
				map.put("idCliente", mapClientes.get("idClienteRedes"));
				map.put("idRegistro", idRegistro);
				listaNova.add(map);
			}
			if(mapClientes.get("nmPessoaDev")!= null) {
				Map map = new HashMap();
				idRegistro = idRegistro + Long.valueOf(1);
				map.put("tipoCliente", configuracoesFacade.getMensagem("responsavelFrete"));
				map.put("tpIdentificacao", mapClientes.get("tpIdentificacaoDev"));
				map.put("nrIdentificacao", FormatUtils.formatIdentificacao((DomainValue)mapClientes.get("tpIdentificacaoDev"), mapClientes.get("nrIdentificacaoDev").toString()));
				map.put("nmPessoa", mapClientes.get("nmPessoaDev"));
				map.put("municipio", mapClientes.get("municipioDev"));
				map.put("idCliente", mapClientes.get("idClienteDev"));
				map.put("idRegistro", idRegistro);
				listaNova.add(map);
			}
		}
		return listaNova;
	}
	
	public List findPaginatedEnderecoIntegrante(Map mapIntegrante) {
		List lista = enderecoPessoaService.findEnderecoPessoaByIdPessoa(Long.valueOf(mapIntegrante.get("idIntegrante").toString()));

		for (Iterator iter = lista.iterator(); iter.hasNext();) {
			Map map = (Map)iter.next();

			EnderecoPessoa enderecoPessoa = new EnderecoPessoa();
			TipoLogradouro tipoLogradouro = new TipoLogradouro();
			if(map.get("nrEndereco")!= null)
				enderecoPessoa.setNrEndereco(map.get("nrEndereco").toString());
			if(map.get("dsEndereco")!= null)
				enderecoPessoa.setDsEndereco(map.get("dsEndereco").toString());
			if(map.get("dsComplemento")!= null)
				enderecoPessoa.setDsComplemento(map.get("dsComplemento").toString());
			if(map.get("dsTipoLogradouro")!= null)
				tipoLogradouro.setDsTipoLogradouro((VarcharI18n)map.get("dsTipoLogradouro"));

			enderecoPessoa.setTipoLogradouro(tipoLogradouro);

			map.put("enderecoCompleto",this.enderecoPessoaService.getEnderecoCompleto(enderecoPessoa.getIdEnderecoPessoa()));
			map.put("tpEndereco", map.get("tpEndereco"));
		}
		return lista;
	}
	
	public List findPaginatedNotaFiscalAbaParcerias(TypedFlatMap criteria) {
		return notaFiscalCtoCooperadaService.findNotaFiscalByIdConhecimento(criteria.getLong("idDoctoServico"));
	}
	
	public Map findDadosCalculoByIdConhecimento(Long idDoctoServico) {
		Map map = ctoCtoCooperadaService.findDadosCalculoByIdConhecimento(idDoctoServico);
		if(map.get("valorMercadoria")!= null)
			map.put("valorMercadoria",map.get("dsSimbolo").toString()+ " " +FormatUtils.formatDecimal("#,###,###,###,##0.00",(BigDecimal)map.get("valorMercadoria")));
		return map;
	}
	
	public Map findOutrosByIdConhecimento(Long idDoctoServico) {
		Map map = ctoCtoCooperadaService.findOutrosByIdConhecimento(idDoctoServico);
		
		if(map.get("dhInclusao")!= null)
			map.put("dhInclusao", JTFormatUtils.format((DateTime)map.get("dhInclusao")));
			
		if(map.get("tpModal")!= null) {
			DomainValue dv= (DomainValue)map.get("tpModal");
			map.put("tpModal",dv.getDescription());
		}
		return map;
	}
	
	public List findPaginatedDadosFrete(TypedFlatMap criteria) {
		return parcelaCtoCooperadaService.findPaginatedDadosFrete(criteria.getLong("idDoctoServico"));
	}

	public Map findVlFreteParceriasDadosFrete(Long idDoctoServico) {
		Map map = parcelaCtoCooperadaService.findVlFreteDadosFrete(idDoctoServico);
		if(map != null) {
			String totalFrete = map.get("moeda") +" "+FormatUtils.formatDecimal("#,###,###,###,##0.00",(BigDecimal)map.get("vlFrete"));
			map.put("totalFrete",totalFrete);
		}
		return map;
	}
	
	public List findServicosAdicionaisFrete(Long idDoctoServico) {
		List lista = parcelaPrecoService.findServicosAdicionaisFrete(idDoctoServico);
		for(Iterator iter= lista.iterator();iter.hasNext();){
			Map mapa = (Map)iter.next();
			
			if(mapa.get("cdParcelaPreco").toString().equalsIgnoreCase("IDArmazenagem")){
				mapa.put("qtDiasArmazenagem", mapa.get("qtDias"));
				mapa.put("qtPaletesArmazenagem", mapa.get("qtPaletes"));
			}
			
			if(mapa.get("cdParcelaPreco").toString().equalsIgnoreCase("IDEstadiaVeiculo")){
				mapa.put("qtDiasEstadiaVeiculo", mapa.get("qtDias"));
				
			}
			if(mapa.get("cdParcelaPreco").toString().equalsIgnoreCase("IDPaletizacao")){
				mapa.put("qtPaletesPaletizacao", mapa.get("qtPaletes"));
			}
			
			if(mapa.get("dtPrimeiroCheque")!= null){
				mapa.put("dtPrimeiroCheque", JTFormatUtils.format((YearMonthDay)mapa.get("dtPrimeiroCheque")));
			}
			
			if(mapa.get("vlMercadoria")!= null){
				mapa.put("vlMercadoria", FormatUtils.formatDecimal("#,###,###,###,##0.00",(BigDecimal)mapa.get("vlMercadoria")));
			}
		}
		return lista;
	}

	@Override
	public File execute(TypedFlatMap parameters) throws Exception {
		this.reportServiceSupport = this.emitirLocalizacaoMercadoriaService;
		return super.execute(parameters);
	}

	public File executeRNC(TypedFlatMap parameters) throws Exception {
		this.reportServiceSupport = this.emitirRNCService;

		return super.execute(parameters);
	}

	public void setParcelaPrecoService(ParcelaPrecoService parcelaPrecoService) {
		this.parcelaPrecoService = parcelaPrecoService;
	}
	public void setEnderecoPessoaService(EnderecoPessoaService enderecoPessoaService) {
		this.enderecoPessoaService = enderecoPessoaService;
	}
	public void setEmitirRNCService(EmitirRNCService emitirRNCService) {
		this.emitirRNCService = emitirRNCService;
	}
	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}
	public void setEmitirLocalizacaoMercadoriaService(EmitirLocalizacaoMercadoriaService emitirLocalizacaoMercadoriaService) {
		this.emitirLocalizacaoMercadoriaService = emitirLocalizacaoMercadoriaService;
	}
	public void setParcelaCtoCooperadaService(ParcelaCtoCooperadaService parcelaCtoCooperadaService) {
		this.parcelaCtoCooperadaService = parcelaCtoCooperadaService;
	}
	public void setNotaFiscalCtoCooperadaService(NotaFiscalCtoCooperadaService notaFiscalCtoCooperadaService) {
		this.notaFiscalCtoCooperadaService = notaFiscalCtoCooperadaService;
	}
	public void setConsultarDadosCobrancaDocumentoServicoService(ConsultarDadosCobrancaDocumentoServicoService consultarDadosCobrancaDocumentoServicoService) {
		this.consultarDadosCobrancaDocumentoServicoService = consultarDadosCobrancaDocumentoServicoService;
	}
	public void setOcorrenciaNaoConformidadeService(OcorrenciaNaoConformidadeService ocorrenciaNaoConformidadeService) {
		this.ocorrenciaNaoConformidadeService = ocorrenciaNaoConformidadeService;
	}
	public void setCtoCtoCooperadaService(CtoCtoCooperadaService ctoCtoCooperadaService) {
		this.ctoCtoCooperadaService = ctoCtoCooperadaService;
	}
	public void setNaoConformidadeService(NaoConformidadeService naoConformidadeService) {
		this.naoConformidadeService = naoConformidadeService;
	}
	public void setManifestoInternacionalService(ManifestoInternacionalService manifestoInternacionalService) {
		this.manifestoInternacionalService = manifestoInternacionalService;
	}
	public void setOcorrenciaDoctoServicoService(OcorrenciaDoctoServicoService ocorrenciaDoctoServicoService) {
		this.ocorrenciaDoctoServicoService = ocorrenciaDoctoServicoService;
	}
	public void setEventoDocumentoServicoService(EventoDocumentoServicoService eventoDocumentoServicoService) {
		this.eventoDocumentoServicoService = eventoDocumentoServicoService;
	}
	public void setManifestoViagemNacionalService(ManifestoViagemNacionalService manifestoViagemNacionalService) {
		this.manifestoViagemNacionalService = manifestoViagemNacionalService;
	}
	public void setItemNfCtoService(ItemNfCtoService itemNfCtoService) {
		this.itemNfCtoService = itemNfCtoService;
	}
	public void setImpostoServicoService(ImpostoServicoService impostoServicoService) {
		this.impostoServicoService = impostoServicoService;
	}
	public void setParcelaDoctoServicoService(ParcelaDoctoServicoService parcelaDoctoServicoService) {
		this.parcelaDoctoServicoService = parcelaDoctoServicoService;
	}
	public void setAgendamentoEntregaService(AgendamentoEntregaService agendamentoEntregaService) {
		this.agendamentoEntregaService = agendamentoEntregaService;
	}	
	public void setManifestoEntregaService(ManifestoEntregaService manifestoEntregaService) {
		this.manifestoEntregaService = manifestoEntregaService;
	}
	public void setPreManifestoDocumentoService(PreManifestoDocumentoService preManifestoDocumentoService) {
		this.preManifestoDocumentoService = preManifestoDocumentoService;
	}
	public void setDevedorDocServFatService(DevedorDocServFatService devedorDocServFatService) {
		this.devedorDocServFatService = devedorDocServFatService;
	}
	public void setServicoEmbalagemService(ServicoEmbalagemService servicoEmbalagemService) {
		this.servicoEmbalagemService = servicoEmbalagemService;
	}
	public void setObservacaoDoctoServicoService(ObservacaoDoctoServicoService observacaoDoctoServicoService) {
		this.observacaoDoctoServicoService = observacaoDoctoServicoService;
	}
	public void setDadosComplementoService(DadosComplementoService dadosComplementoService) {
		this.dadosComplementoService = dadosComplementoService;
	}
	public void setChequeReembolsoService(ChequeReembolsoService chequeReembolsoService) {
		this.chequeReembolsoService = chequeReembolsoService;
	}
	public void setDoctoServicoService(DoctoServicoService doctoServicoService) {
		this.doctoServicoService = doctoServicoService;
	}
	public void setInformacaoDoctoClienteService(InformacaoDoctoClienteService informacaoDoctoClienteService) {
		this.informacaoDoctoClienteService = informacaoDoctoClienteService;
	}
	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
	}
	public void setReciboReembolsoService(ReciboReembolsoService reciboReembolsoService) {
		this.reciboReembolsoService = reciboReembolsoService;
	}
	public void setPedidoColetaService(PedidoColetaService pedidoColetaService) {
		this.pedidoColetaService = pedidoColetaService;
	}
	public void setAwbService(AwbService awbService) {
		this.awbService = awbService;
	}
	public void setMirService(MirService mirService) {
		this.mirService = mirService;
	}
	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}
	public void setManifestoColetaService(ManifestoColetaService manifestoColetaService) {
		this.manifestoColetaService = manifestoColetaService;
	}
	public void setControleCargaService(ControleCargaService controleCargaService) {
		this.controleCargaService = controleCargaService;
	}
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public void setTipoServicoService(TipoServicoService tipoServicoService) {
		this.tipoServicoService = tipoServicoService;
	}
	public void setEmpresaService(EmpresaService empresaService) {
		this.empresaService = empresaService;
	}
	public void setNotaFiscalConhecimentoService(NotaFiscalConhecimentoService notaFiscalConhecimentoService) {
		this.notaFiscalConhecimentoService = notaFiscalConhecimentoService;
	}	
}
