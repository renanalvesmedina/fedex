package com.mercurio.lms.sim.action;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.util.FilterList;
import com.mercurio.adsm.framework.util.FilterResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.contasreceber.model.service.NotaDebitoNacionalService;
import com.mercurio.lms.entrega.model.service.ManifestoEntregaService;
import com.mercurio.lms.entrega.model.service.ReciboReembolsoService;
import com.mercurio.lms.expedicao.model.DoctoServico;
import com.mercurio.lms.expedicao.model.NotaFiscalConhecimento;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.model.service.CtoInternacionalService;
import com.mercurio.lms.expedicao.model.service.DoctoServicoService;
import com.mercurio.lms.expedicao.model.service.ManifestoInternacionalService;
import com.mercurio.lms.expedicao.model.service.ManifestoViagemNacionalService;
import com.mercurio.lms.expedicao.model.service.NotaFiscalConhecimentoService;
import com.mercurio.lms.expedicao.model.service.NotaFiscalServicoService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.pendencia.model.service.MdaService;
import com.mercurio.lms.sim.model.RegistroPriorizacaoDocto;
import com.mercurio.lms.sim.model.RegistroPriorizacaoEmbarq;
import com.mercurio.lms.sim.model.service.RegistroPriorizacaoDoctoService;
import com.mercurio.lms.sim.model.service.RegistroPriorizacaoEmbarqService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.service.ClienteService;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;

/** 
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.sim.registrarSolicitacoesEmbarqueAction"
 */

public class RegistrarSolicitacoesEmbarqueAction extends CrudAction {
	private DomainValueService domainValueService;
	private DoctoServicoService doctoServicoService;
	private RegistroPriorizacaoDoctoService registroPriorizacaoDoctoService;
	private FilialService filialService;
	private ManifestoEntregaService manifestoEntregaService;
	private ManifestoViagemNacionalService manifestoViagemNacionalService;
	private ManifestoInternacionalService manifestoInternacionalService;
	private ConhecimentoService conhecimentoService;
	private CtoInternacionalService ctoInternacionalService;
	private MdaService mdaService;
	private ReciboReembolsoService reciboReembolsoService;
	private ClienteService clienteService;
	private NotaFiscalServicoService notaFiscalServicoService;
	private NotaDebitoNacionalService notaDebitoNacionalService;
	private ConfiguracoesFacade configuracoesFacade;
	private NotaFiscalConhecimentoService notaFiscalConhecimentoService;
 

	public void setService(RegistroPriorizacaoEmbarqService serviceService) {
		this.defaultService = serviceService;
	}
	
	private RegistroPriorizacaoEmbarqService getService() {
		return(RegistroPriorizacaoEmbarqService)this.defaultService;
	}
	
	public void removeById(java.lang.Long id) {
		getService().removeById(id);
	}

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		getService().removeByIds(ids);
	}

	public TypedFlatMap findById(java.lang.Long id) {
		RegistroPriorizacaoEmbarq bean = getService().findById(id);
		TypedFlatMap result = new TypedFlatMap();
		
		Filial filial = bean.getFilial();
		result.put("filial.idFilial",filial.getIdFilial());
		result.put("filial.sgFilial",filial.getSgFilial());
		result.put("filial.pessoa.nmFantasia",filial.getPessoa().getNmFantasia());

		if (Hibernate.isInitialized(bean.getRemetente()) && bean.getRemetente() != null) {
			Cliente remetente = bean.getRemetente();
			result.put("remetente.idCliente",remetente.getIdCliente());
			result.put("remetente.pessoa.nrIdentificacaoFormatado",FormatUtils.formatIdentificacao(remetente.getPessoa().getTpIdentificacao(),remetente.getPessoa().getNrIdentificacao()));
			result.put("remetente.pessoa.nrIdentificacao",result.getString("remetente.pessoa.nrIdentificacaoFormatado"));
			result.put("remetente.pessoa.nmPessoa",remetente.getPessoa().getNmPessoa());
		}

		if (Hibernate.isInitialized(bean.getDestinatario()) && bean.getDestinatario() != null) {
			Cliente destinatario = bean.getDestinatario();
			result.put("destinatario.idCliente",destinatario.getIdCliente());
			result.put("destinatario.pessoa.nrIdentificacaoFormatado",FormatUtils.formatIdentificacao(destinatario.getPessoa().getTpIdentificacao(),
						destinatario.getPessoa().getNrIdentificacao()));
			result.put("destinatario.pessoa.nrIdentificacao",result.getString("destinatario.pessoa.nrIdentificacaoFormatado"));
			result.put("destinatario.pessoa.nmPessoa",destinatario.getPessoa().getNmPessoa());
		}

		result.put("nmSolicitante",bean.getNmSolicitante());
		result.put("obPriorizacao",bean.getObPriorizacao());
		result.put("dhRegistroEmbarque",bean.getDhRegistroEmbarque());
		result.put("dhRegistro",bean.getDhRegistro());
		result.put("dhCancelamento",bean.getDhCancelamento());
		result.put("obCancelamanto",bean.getObCancelamanto());
		result.put("idRegistroPriorizacaoEmbarq",bean.getIdRegistroPriorizacaoEmbarq());

		Usuario criacao = bean.getUsuarioCriacao();
		result.put("usuarioCriacao.idUsuario",criacao.getIdUsuario());
		result.put("usuarioCriacao.nmUsuario",criacao.getNmUsuario());

		if (Hibernate.isInitialized(bean.getUsuarioCancelamento()) && bean.getUsuarioCancelamento() != null) {
			Usuario cancelamento = bean.getUsuarioCancelamento();
			result.put("usuarioCancelamento.idUsuario",cancelamento.getIdUsuario());
			result.put("usuarioCancelamento.nmUsuario",cancelamento.getNmUsuario());
		}
		List doctosDb = bean.getRegistroPriorizacaoDocto();
		List doctos = new ArrayList();
		for(Iterator i = doctosDb.iterator(); i.hasNext();) {
			TypedFlatMap row = new TypedFlatMap();
			RegistroPriorizacaoDocto doctoPriorizacao = (RegistroPriorizacaoDocto)i.next();
			DoctoServico docto = doctoServicoService.findByIdJoinFilial(doctoPriorizacao.getDoctoServico().getIdDoctoServico());
			Hibernate.initialize(docto);
			Filial filialO = docto.getFilialByIdFilialOrigem();
			Hibernate.initialize(filialO);
			DomainValue tpDoctoServico = docto.getTpDocumentoServico();
			row.put("doctoServico.tpDocumentoServico.value",tpDoctoServico.getValue());
			row.put("doctoServico.tpDocumentoServico.description",tpDoctoServico.getDescription());
			row.put("doctoServico.filialByIdFilialOrigem.idFilial",filialO.getIdFilial());
			row.put("doctoServico.filialByIdFilialOrigem.sgFilial",filialO.getSgFilial());
			row.put("doctoServico.filialByIdFilialOrigem.pessoa.nmFantasia",filialO.getPessoa().getNmFantasia());
			row.put("doctoServico.idDoctoServico",docto.getIdDoctoServico());
			row.put("idDoctoServico",docto.getIdDoctoServico());
			row.put("idRegistroPriorizacaoDocto", doctoPriorizacao.getIdRegistroPriorizacaoDocto());
			row.put("doctoServico.nrDoctoServico",docto.getNrDoctoServico());
			doctos.add(row);
		}
		result.put("registroPriorizacaoDocto",doctos);
		return result;
	}

	public TypedFlatMap findNotasFiscaisByConhecimentos(TypedFlatMap parameters) {
		List doctoServicos = parameters.getList("registroPriorizacaoDocto");
		List list;
		if (doctoServicos != null && doctoServicos.size() > 0) {
			list = new ArrayList();
			for(Iterator i = doctoServicos.iterator(); i.hasNext();) {
				Long idConhecimento = ((TypedFlatMap)i.next()).getLong("registroDocumentoEntrega.doctoServico.idDoctoServico");
				List notasFiscais = getService().findNotaFiscaisByIdConhecimento(idConhecimento);
				for (Iterator i2 = notasFiscais.iterator(); i2.hasNext();) {
					TypedFlatMap row = new TypedFlatMap();
					NotaFiscalConhecimento bean = (NotaFiscalConhecimento)i2.next();
					row.put("idNotaFiscais",bean.getIdNotaFiscalConhecimento());
					row.put("nmNotaFiscais",bean.getNrNotaFiscal());
					list.add(row);
				}
			}
		} else
			list = Collections.EMPTY_LIST;

		TypedFlatMap result = new TypedFlatMap();
		result.put("notaFiscais",list);
		return result;
	}

	public TypedFlatMap validateAddDoctoServico(TypedFlatMap parameters) {
		Long idDoctoServico = parameters.getLong("idDoctoServico");
		Long idPriorizaoEmbarque = parameters.getLong("id");

		if (registroPriorizacaoDoctoService.findByIdDocto(idDoctoServico,Boolean.FALSE,idPriorizaoEmbarque).size() > 0)
			throw new BusinessException("LMS-10032");
		if (getService().getRowCountDoctoServicoEntregues(idDoctoServico).intValue() > 0)
			throw new BusinessException("LMS-10030");
		if (getService().getRowCountDoctoServicoManifesto(idDoctoServico).intValue() > 0)
			throw new BusinessException("LMS-10029");

		TypedFlatMap result = new TypedFlatMap();
		DoctoServico docto = doctoServicoService.findByIdJoinFilial(idDoctoServico);
		result.put("idDocto",idDoctoServico);
		result.put("tpDocto",docto.getTpDocumentoServico().getValue());
		result.put("idFilial",docto.getFilialByIdFilialOrigem().getIdFilial());
		result.put("sgFilial",docto.getFilialByIdFilialOrigem().getSgFilial());
		result.put("nrDocto",docto.getNrDoctoServico());
		return result;
	}

	public List findNotasFiscais(TypedFlatMap parameters) {
		List registroPriorizacaoDocto = parameters.getList("registroPriorizacaoDocto");
		if (registroPriorizacaoDocto != null && registroPriorizacaoDocto.size() > 0) {
			Long[] ids = new Long[registroPriorizacaoDocto.size()];
			int x = 0;
			for(Iterator i = registroPriorizacaoDocto.iterator(); i.hasNext();) {
				TypedFlatMap item = (TypedFlatMap)i.next();
				ids[x] = item.getLong("doctoServico.idDoctoServico");
				x++;
			}
			List nfs = getService().findNotasFiscaisByIdDocto(ids);
			List list = new ArrayList();
			for(Iterator i = nfs.iterator(); i.hasNext();) {
				NotaFiscalConhecimento nfc = (NotaFiscalConhecimento)i.next();
				TypedFlatMap row = new TypedFlatMap();
				row.put("idNotaFiscais","");

				row.put("idDoctoServico",nfc.getConhecimento().getIdDoctoServico());
				row.put("nrNotaFiscal",nfc.getNrNotaFiscal());
				list.add(row);
			}
			return list;
		}
		return null;
	}

	public TypedFlatMap cancelaRegistro(TypedFlatMap parameters) {
		getService().cancelaRegistro(parameters.getLong("idRegistroPriorizacaoEmbarq"),parameters.getString("obCancelamanto"));
		TypedFlatMap result = new TypedFlatMap();
		result.put("dhCancelamento",JTDateTimeUtils.getDataHoraAtual());
		result.put("usuarioCancelamento.idUsuario",SessionUtils.getUsuarioLogado().getIdUsuario());
		result.put("usuarioCancelamento.nmUsuario",SessionUtils.getUsuarioLogado().getNmUsuario());
		return result;
	}

	public List findLookupFilial(Map criteria) {
		return filialService.findLookupFilial(criteria);
	}

	public List findLookupCliente(Map criteria) {
		return clienteService.findLookup(criteria);
	}

	public ResultSetPage findPaginated(TypedFlatMap criteria) {
		FilterResultSetPage filter = new FilterResultSetPage(getService().findPaginated(criteria)) {
			public Map filterItem(Object item) {
				RegistroPriorizacaoEmbarq bean = (RegistroPriorizacaoEmbarq)item;
				TypedFlatMap result = new TypedFlatMap();
				final Cliente remetente = bean.getRemetente();
				if(remetente != null) {
					final Pessoa pessoaR = remetente.getPessoa();
					result.put("remetente.pessoa.tpIdentificacao",pessoaR.getTpIdentificacao());
					result.put("remetente.pessoa.nrIdentificacaoFormatado",FormatUtils.formatIdentificacao(pessoaR.getTpIdentificacao(),pessoaR.getNrIdentificacao()));
					result.put("remetente.pessoa.nmPessoa",pessoaR.getNmPessoa());
				}
				final Cliente destinatario = bean.getDestinatario();
				if (destinatario != null) {
					final Pessoa pessoaD = destinatario.getPessoa();
					result.put("destinatario.pessoa.tpIdentificacao",pessoaD.getTpIdentificacao());
					result.put("destinatario.pessoa.nrIdentificacaoFormatado",FormatUtils.formatIdentificacao(pessoaD.getTpIdentificacao(),pessoaD.getNrIdentificacao()));
					result.put("destinatario.pessoa.nmPessoa",pessoaD.getNmPessoa());
				}
				result.put("dhRegistro",bean.getDhRegistro());
				result.put("idRegistroPriorizacaoEmbarq",bean.getIdRegistroPriorizacaoEmbarq());
				if (bean.getDhCancelamento() != null)
					result.put("tpStatus",configuracoesFacade.getMensagem("cancelada"));
				else{
					Integer faltando = getService().getRowCountDoctoServiceFaltaEntreguar(bean.getIdRegistroPriorizacaoEmbarq());
					if (faltando.equals(Integer.valueOf(0)))
						result.put("tpStatus",configuracoesFacade.getMensagem("entregue"));
					else
						result.put("tpStatus",configuracoesFacade.getMensagem("aberta"));
				}
				return result;
			}
		};
		return (ResultSetPage)filter.doFilter();
	}

	public Integer getRowCount(TypedFlatMap criteria) {
		return getService().getRowCount(criteria);
	}

	public List findLookup(TypedFlatMap criteria) {
		return getService().findLookup(criteria);
	}

	public TypedFlatMap findDataSession() {
		Filial filial = SessionUtils.getFilialSessao();
		Pessoa pessoa = filial.getPessoa();
		TypedFlatMap result = new TypedFlatMap();
		result.put("filial.idFilial",filial.getIdFilial());
		result.put("filial.sgFilial",filial.getSgFilial());
		result.put("filial.pessoa.nmFantasia",pessoa.getNmFantasia());
	
		result.put("dhRegistro",JTDateTimeUtils.getDataHoraAtual());

		result.put("dtRegistroInicial",JTDateTimeUtils.getDataAtual().minusDays(31));
		result.put("dtRegistroFinal",JTDateTimeUtils.getDataAtual());

		Usuario usuario = SessionUtils.getUsuarioLogado();
		result.put("usuario.idUsuario",usuario.getIdUsuario());
		result.put("usuario.nmUsuario",usuario.getNmUsuario());
		return result;
	}

	public TypedFlatMap store(TypedFlatMap parameters) {
		RegistroPriorizacaoEmbarq bean = new RegistroPriorizacaoEmbarq();

		Filial filial = new Filial();
		filial.setIdFilial(parameters.getLong("filial.idFilial"));

		Usuario usuario = new Usuario();
		usuario.setIdUsuario(parameters.getLong("usuarioCriacao.idUsuario"));

		if (parameters.getLong("remetente.idCliente") != null) {
			Cliente remetente = new Cliente();
			remetente.setIdCliente(parameters.getLong("remetente.idCliente"));
			bean.setRemetente(remetente);
		}
		if (parameters.getLong("destinatario.idCliente") != null) {
			Cliente destinatario = new Cliente();
			destinatario.setIdCliente(parameters.getLong("destinatario.idCliente"));
			bean.setDestinatario(destinatario);
		}

		bean.setIdRegistroPriorizacaoEmbarq(parameters.getLong("idRegistroPriorizacaoEmbarq"));
		bean.setFilial(filial);
		bean.setUsuarioCriacao(usuario);
		bean.setNmSolicitante(parameters.getString("nmSolicitante"));
		bean.setObPriorizacao(parameters.getString("obPriorizacao"));
		bean.setDhRegistroEmbarque(parameters.getDateTime("dhRegistroEmbarque"));

		List doctosView = parameters.getList("registroPriorizacaoDocto");
		if (doctosView != null && doctosView.size() > 0) {
			List doctos = new ArrayList();
			for(Iterator i = doctosView.iterator(); i.hasNext();) {
				TypedFlatMap row = (TypedFlatMap)i.next();
				DoctoServico doctoServico = new DoctoServico();
				doctoServico.setIdDoctoServico(row.getLong("doctoServico.idDoctoServico"));
				RegistroPriorizacaoDocto registroPriorizacaoDocto = new RegistroPriorizacaoDocto();
				registroPriorizacaoDocto.setDoctoServico(doctoServico);
				registroPriorizacaoDocto.setRegistroPriorizacaoEmbarq(bean);
				doctos.add(registroPriorizacaoDocto);
			}
			bean.setRegistroPriorizacaoDocto(doctos);
		}

		if (bean.getRemetente() == null && bean.getDestinatario() == null)
			throw new BusinessException("LMS-10057");

			getService().store(bean);

		TypedFlatMap result = new TypedFlatMap();
		result.put("idRegistroPriorizacaoEmbarq",bean.getIdRegistroPriorizacaoEmbarq());
		return result;
	}

	public List findTipoDocumentoServico(Map criteria) {
		List<String> values = new ArrayList<String>();
		values.add("CTR");
		values.add("CRT");
		values.add("NFT");
		values.add("MDA");
		values.add("CTE");
		values.add("NTE");
		return domainValueService.findByDomainNameAndValues("DM_TIPO_DOCUMENTO_SERVICO",values);
	}

	public List findLookupFilialByDocumentoServico(Map criteria) {
		FilterList filter = new FilterList(filialService.findLookup(criteria)) {
			public Map filterItem(Object item) {
				Filial filial = (Filial) item;
				TypedFlatMap typedFlatMap = new TypedFlatMap();
				typedFlatMap.put("idFilial", filial.getIdFilial());
				typedFlatMap.put("sgFilial", filial.getSgFilial());
				typedFlatMap.put("pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
				return typedFlatMap;
			}};
		return (List) filter.doFilter();
	}
	public List findLookupServiceDocumentFilialCTR(Map criteria) {
		return findLookupFilialByDocumentoServico(criteria);
	}
	public List findLookupServiceDocumentFilialCRT(Map criteria) {
		return findLookupFilialByDocumentoServico(criteria);
	}
	public List findLookupServiceDocumentFilialMDA(Map criteria) {
		return findLookupFilialByDocumentoServico(criteria);
	}
	public List findLookupServiceDocumentFilialNFS(Map criteria) {
		return findLookupFilialByDocumentoServico(criteria);
	}
	public List findLookupServiceDocumentFilialNDN(Map criteria) {
		return findLookupFilialByDocumentoServico(criteria);
	}
	public List findLookupServiceDocumentFilialNFT(Map criteria) {
		return findLookupFilialByDocumentoServico(criteria);
	}
	public List findLookupServiceDocumentFilialRRE(Map criteria) {
		return findLookupFilialByDocumentoServico(criteria);
	}
	public List findLookupServiceDocumentFilialCTE(Map criteria) {
		return findLookupFilialByDocumentoServico(criteria);
	}
	public List findLookupServiceDocumentFilialNTE(Map criteria) {
		return findLookupFilialByDocumentoServico(criteria);
	}
	public List findLookupManifestoDocumentNumberEN(Map criteria) {
		return manifestoEntregaService.findLookup(criteria);
	}
	public List findLookupManifestoDocumentNumberVN(Map criteria) {
		return manifestoViagemNacionalService.findLookup(criteria);
	}
	public List findLookupManifestoDocumentNumberVI(Map criteria) {  
		return manifestoInternacionalService.findLookup(criteria);
	}
	public List findLookupServiceDocumentNumberCTR(Map criteria) {
		return conhecimentoService.findLookup(criteria);
	}
	public List findLookupServiceDocumentNumberCRT(Map criteria) {
		return ctoInternacionalService.findLookup(criteria);
	}
	public List findLookupServiceDocumentNumberMDA(Map criteria) {
		return mdaService.findLookup(criteria);
	}
	public List findLookupServiceDocumentNumberNFS(Map criteria) {
		return notaFiscalServicoService.findLookup(criteria);
	}
	public List findLookupServiceDocumentNumberRRE(Map criteria) {
		return reciboReembolsoService.findLookup(criteria);
	}
	public List findLookupServiceDocumentNumberNDN(Map criteria) {
		return notaDebitoNacionalService.findLookup(criteria);
	}
	public List findLookupServiceDocumentNumberNFT(Map criteria) {
		return conhecimentoService.findLookup(criteria);  
	}
	public List findLookupServiceDocumentNumberCTE(Map criteria) {
		return conhecimentoService.findLookup(criteria);  
	}
	public List findLookupServiceDocumentNumberNTE(Map criteria) {
		return conhecimentoService.findLookup(criteria);  
	}

	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
	}
	public void setCtoInternacionalService(CtoInternacionalService ctoInternacionalService) {
		this.ctoInternacionalService = ctoInternacionalService;
	}
	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public void setManifestoEntregaService(ManifestoEntregaService manifestoEntregaService) {
		this.manifestoEntregaService = manifestoEntregaService;
	}
	public void setManifestoInternacionalService(ManifestoInternacionalService manifestoInternacionalService) {
		this.manifestoInternacionalService = manifestoInternacionalService;
	}
	public void setManifestoViagemNacionalService(ManifestoViagemNacionalService manifestoViagemNacionalService) {
		this.manifestoViagemNacionalService = manifestoViagemNacionalService;
	}
	public void setMdaService(MdaService mdaService) {
		this.mdaService = mdaService;
	}
	public void setReciboReembolsoService(ReciboReembolsoService reciboReembolsoService) {
		this.reciboReembolsoService = reciboReembolsoService;
	}
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}
	public void setNotaFiscalServicoService(NotaFiscalServicoService notaFiscalServicoService) {
		this.notaFiscalServicoService = notaFiscalServicoService;
	}
	public void setNotaDebitoNacionalService(NotaDebitoNacionalService notaDebitoNacionalService) {
		this.notaDebitoNacionalService = notaDebitoNacionalService;
	}
	/**
	 * TODO: CHEGA DE DOCUMENTO SERVIÇO AQUI É O FIM,
	 * DEPOIS É SO COPIAR COLAR E IMPLEMENTAR OS FIELDS
	 */

	public void setRegistroPriorizacaoDoctoService(RegistroPriorizacaoDoctoService registroPriorizacaoDoctoService) {
		this.registroPriorizacaoDoctoService = registroPriorizacaoDoctoService;
	}

	public List find(Map criteria) {
		return clienteService.find(criteria);
	}

	public void setDoctoServicoService(DoctoServicoService doctoServicoService) {
		this.doctoServicoService = doctoServicoService;
	}

	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}
	
	public List findLookupNotaFiscalCliente(TypedFlatMap criteria) {
		if(criteria.getLong("remetente.idCliente")== null)
			throw new BusinessException("LMS-09111");
		return notaFiscalConhecimentoService.findLookupNotaFiscalCliente(criteria); 
	}

	public void setNotaFiscalConhecimentoService(NotaFiscalConhecimentoService notaFiscalConhecimentoService) {
		this.notaFiscalConhecimentoService = notaFiscalConhecimentoService;
	}
}
