package com.mercurio.lms.sim.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Servico;
import com.mercurio.lms.configuracoes.model.service.ServicoService;
import com.mercurio.lms.sim.model.ConfiguracaoComunicacao;
import com.mercurio.lms.sim.model.Evento;
import com.mercurio.lms.sim.model.EventoClienteRecebe;
import com.mercurio.lms.sim.model.service.ConfiguracaoComunicacaoService;
import com.mercurio.lms.sim.model.service.EventoClienteRecebeService;
import com.mercurio.lms.sim.model.service.EventoService;
import com.mercurio.lms.util.JTVigenciaUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.service.ClienteService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.sim.manterEventosInformadosClienteAction"
 */

public class ManterEventosInformadosClienteAction extends CrudAction {
	
	private EventoService eventoService;
	private ClienteService clienteService;
	private ConfiguracaoComunicacaoService configuracaoComunicacaoService;
	private EventoClienteRecebeService eventoClienteRecebeService;
	private ServicoService servicoService;
	
	
	/**  
	 * Ádamo B. Azambuja 
	 * Salva os dados da página de detalhamento
	 */
	public TypedFlatMap storeCustom(TypedFlatMap map) {
        TypedFlatMap retorno = new TypedFlatMap();
        ConfiguracaoComunicacao configuracaoComunicacao = new ConfiguracaoComunicacao();
        
        // Seta idConfiguracao
        if ( map.getLong("idConfiguracaoComunicacao") != null ){
        	configuracaoComunicacao.setIdConfiguracaoComunicacao(map.getLong("idConfiguracaoComunicacao"));
        }

        /* Regras para salvar um registro */
        if (map.getString("tipoAcesso").equalsIgnoreCase("CO") ){
        	if (map.getString("formaComunicacao").equalsIgnoreCase("") ) {
        		 throw new BusinessException("LMS-10016");
        	}
        }
        
        // Monta uma lista de eventos para fazer comparacao no find 
        List listaEventos = map.getList("eventos");
        List listaEventosPesq = new ArrayList();
        for (int i = 0; i < listaEventos.size(); i++) {
        	TypedFlatMap tfm = (TypedFlatMap)listaEventos.get(i);
        	Evento evento = eventoService.findByIdInitLazyProperties(tfm.getLong("idEvento"), false);
        	listaEventosPesq.add(evento);
        }  
        
        List listaEventosClienteVigente = configuracaoComunicacaoService.validateEventosClienteVigente(map.getLong("cliente.idCliente"), listaEventosPesq, map.getYearMonthDay("dataInicio"),map.getYearMonthDay("dataFim")); 
        if (listaEventosClienteVigente.size()>0){
        	 throw new BusinessException("LMS-10017");
        }
        
        
        // Seta cliente
        Cliente cliente = new Cliente();
        cliente = clienteService.findById(map.getLong("cliente.idCliente"));
        configuracaoComunicacao.setCliente(cliente);
        configuracaoComunicacao.setTpCliente(cliente.getTpCliente());
        
        // Seta servico
        Servico servico = new Servico(); 
        servico = servicoService.findById(map.getLong("servico"));
        configuracaoComunicacao.setServico(servico);

        // Seta outros dados do bean
        configuracaoComunicacao.setTpAcessoEvento(map.getDomainValue("tipoAcesso"));
        configuracaoComunicacao.setTpCliente(map.getDomainValue("tpCliente"));
        configuracaoComunicacao.setTpMeioComunicacao(map.getDomainValue("formaComunicacao"));
        configuracaoComunicacao.setDtVigenciaInicial(map.getYearMonthDay("dataInicio"));
        configuracaoComunicacao.setDtVigenciaFinal(map.getYearMonthDay("dataFim"));
        configuracaoComunicacao.setHrDeterminado(map.getTimeOfDay("horario"));
        configuracaoComunicacao.setNrIntervaloComunicacao(map.getInteger("intervaloComunicacao"));
        configuracaoComunicacao.setBlComunicacaoCadaEvento(map.getBoolean("comunicarCadaEvento"));
        configuracaoComunicacao.setBlSomenteDiasUteis(map.getBoolean("somenteDiasUteis"));
        configuracaoComunicacao.setTpDocumento(map.getDomainValue("tpDocumento"));
        // Grava a Configuracao ComunicacaoService no banco
        Long id = (Long)configuracaoComunicacaoService.store(configuracaoComunicacao);

        
        // Grava os eventos para esta configuracao
        for (int i = 0; i < listaEventos.size(); i++) {
        	TypedFlatMap tfm = (TypedFlatMap)listaEventos.get(i);
        	
        	Evento evento = eventoService.findById(tfm.getLong("idEvento"));
			EventoClienteRecebe eventoCliente = new EventoClienteRecebe();
			eventoCliente.setIdEventoClienteRecebe(tfm.getLong("IdEventoClienteRecebe"));
			eventoCliente.setEvento(evento);
			eventoCliente.setConfiguracaoComunicacao(configuracaoComunicacao);
			eventoClienteRecebeService.store(eventoCliente);
		}
        
        retorno.put("tpIdentificacao", cliente.getCliente().getPessoa().getTpIdentificacao().getValue());
        retorno.put("idConfiguracaoComunicacao", id);
        return retorno;
    }

	/**
	 * Ádamo B. Azambuja
	 * Chama o método findpaginatedCustom que realiza a pesquisa para tela de listagem
	 * */
	public ResultSetPage findPaginated(TypedFlatMap criteria) {
		return findPaginatedCustom(criteria);
	}

	
	/**
	 * Ádamo B. Azambuja
	 * Realiza o find custom da tela de pesquisa.
	 * */
    public ResultSetPage findPaginatedCustom(TypedFlatMap criteria){

    	ResultSetPage rs = eventoClienteRecebeService.findPaginatedCustom(criteria);

    	List listaRetorno = new ArrayList();
    	List listaEventosConfiguracaoComunicacao = new ArrayList();
    	listaRetorno.clear();
    	for (int i = 0 ; i <= rs.getList().size() -1; i++){
    		// pega uma configuracao da lista de resultado
    		
    		ConfiguracaoComunicacao cc = (ConfiguracaoComunicacao)rs.getList().get(i);
    		TypedFlatMap tfm = new TypedFlatMap();

    		// pega a lista de eventos da configuracao atual
    		TypedFlatMap criteriaEventosConfiguracaoComunicacao = new TypedFlatMap();
    		criteriaEventosConfiguracaoComunicacao.put("idConfiguracaoComunicacao", cc.getIdConfiguracaoComunicacao());
    		listaEventosConfiguracaoComunicacao = eventoClienteRecebeService.findByObject(criteriaEventosConfiguracaoComunicacao);
    		
    		// Trata a questao dos eventos da configuracao atual
    		String outros = "";
    		if (listaEventosConfiguracaoComunicacao.size() > 1) {
    			outros = "(Outros...)";
    		}
    		String descricaoEvento = "";
    		
    		// vamos manter a lista com 1 ou listar todos ? este for e opcional, apenas caso iremos mostrar todos eventos em tela.
    		for (int x = 0; x < 1; x++){ 
    			// Pega descricao do evento se tiver e guarda em uma variavel 
    			EventoClienteRecebe eventoClienteRecebe = (EventoClienteRecebe)listaEventosConfiguracaoComunicacao.get(x);
    			if (eventoClienteRecebe.getEvento() != null){
    				descricaoEvento = eventoClienteRecebe.getEvento().getDsEventoMercadoria();
    			}
    		}
   				tfm.put("evento", descricaoEvento);
    			tfm.put("tpCliente",cc.getTpCliente());
    			tfm.put("outros",outros);
	    		tfm.put("nrI",cc.getCliente().getPessoa().getNrIdentificacao());
	    		tfm.put("tpI",cc.getCliente().getPessoa().getTpIdentificacao());
	    		tfm.put("cliente",cc.getCliente().getPessoa().getNmPessoa());
	    		tfm.put("tipoAcesso",cc.getTpAcessoEvento());
	    		tfm.put("formaComunicacao",cc.getTpMeioComunicacao());
	    		tfm.put("intervalo",cc.getNrIntervaloComunicacao());
	    		tfm.put("horario",cc.getHrDeterminado());
	    		tfm.put("cadaEvento",cc.getBlComunicacaoCadaEvento());
	    		tfm.put("vigenciaInicial",cc.getDtVigenciaInicial());
	    		tfm.put("vigenciaFinal",cc.getDtVigenciaFinal());
	    		tfm.put("idConfiguracaoComunicacao",cc.getIdConfiguracaoComunicacao());

	    		listaRetorno.add(tfm);
    		     		
    		/*
    		 * OBS.: Este método funciona quando a configuracao tiver pelo menos 1 evento cadastrado, se nao tiver evento
    		 * ele nao mostra a configuracao sem evento cadastrado, para retornar configuracoes sem evento cadastrado alterar
    		 * este metodo, fazer um if antes do for interno para ele verificar se existe lista de eventos, se nao tiver popula
    		 * o tfm com os outros valores sem o evento, nao esquecer de colocar o listaRetorno.add no codigo.*/
    		
    		
    	}
    	rs.getList().clear();
    	criteria.get("idConfiguracaoComunicacao");
    	rs.setList(listaRetorno); 
    	return rs; 

    }
    
    /**
     * Ádamo B. Azambuja 
     * Reliza uma busca por um registro específico para tela de detalhamento
     * */
    public TypedFlatMap findByIdDetalhamento(java.lang.Long id) {
    	ResultSetPage rs = ((EventoClienteRecebeService)defaultService).findByIdDetalhamento(id);
    	List listaRetorno = new ArrayList();
    	TypedFlatMap tfm = new TypedFlatMap();
    	if (rs != null){
    		// pega uma configuracao da lista de resultado
    		ConfiguracaoComunicacao cc = (ConfiguracaoComunicacao)rs.getList().get(0);
    		
    		// pega a lista de eventos da configuracao atual
   			tfm.put("tpCliente",cc.getTpCliente().getValue());
   			tfm.put("tpDocumento",cc.getTpDocumento().getValue());
    		tfm.put("nrI",cc.getNrIntervaloComunicacao());
    		tfm.put("formaComunicacao",cc.getTpMeioComunicacao().getValue());
    		tfm.put("cliente.idCliente",cc.getCliente().getIdCliente());
    		tfm.put("cliente.pessoa.nmPessoa",cc.getCliente().getPessoa().getNmPessoa());
    		tfm.put("cliente.pessoa.nrIdentificacao",cc.getCliente().getPessoa().getNrIdentificacao());
    		tfm.put("cliente.pessoa.nrIdentificacaoFormatado",cc.getCliente().getPessoa().getNrIdentificacao());
    		tfm.put("servico",cc.getServico().getIdServico());
    		tfm.put("tipoAcesso",cc.getTpAcessoEvento().getValue());
    		tfm.put("intervaloComunicacao",cc.getNrIntervaloComunicacao());
    		tfm.put("horario",cc.getHrDeterminado());
    		tfm.put("comunicarCadaEvento",cc.getBlComunicacaoCadaEvento());
    		tfm.put("somenteDiasUteis",cc.getBlSomenteDiasUteis());
    		tfm.put("dataInicio",cc.getDtVigenciaInicial());
    		tfm.put("dataFim",cc.getDtVigenciaFinal());
			tfm.put("tpIdentificacao",cc.getCliente().getPessoa().getTpIdentificacao().getValue());
 
    		List listaEventos = new ArrayList();
    		Map mapaEventos = new HashMap();
    		for (int i = 0; i < cc.getEventoClienteRecebes().size(); i++){
    			EventoClienteRecebe eventoClienteRecebe = (EventoClienteRecebe) cc.getEventoClienteRecebes().get(i);
    			Evento evento = eventoClienteRecebe.getEvento();
    			mapaEventos.put("idEvento",evento.getIdEvento());
    			mapaEventos.put("dsEvento",evento.getDsEventoMercadoria());
    			mapaEventos.put("IdEventoClienteRecebe",eventoClienteRecebe.getIdEventoClienteRecebe());
    			listaEventos.add(mapaEventos);
    			
    		}
    		tfm.put("eventos", listaEventos);
			tfm.put("idConfiguracaoComunicacao",id);
			tfm.put("acaoVigenciaAtual",JTVigenciaUtils.getIntegerAcaoVigencia(cc));
			listaRetorno.add(tfm);
    	}
    	return tfm;
    }
    
    /**
     * Ádamo B. Azambuja
     * Busca eventos para lookup de evento da tela de litagem
     * */
	public List findEventos(TypedFlatMap criteria){
    	TypedFlatMap mapRetorno = new TypedFlatMap();
   		mapRetorno.put("tpDocumento",criteria.getDomainValue("tpDocumento"));
   		List rs = eventoService.findEventos(mapRetorno);
   		return montaRetornoEventos(rs);
 
	}
	
    
	/**
	 * Ádamo B. Azambuja
	 * Busca eventos conforme o tipo de documento escolhido para popular as listas na tela de cadastro
	 * */
    public List findEventosByTpDocumento(String tpDocumento){
    	TypedFlatMap mapRetorno = new TypedFlatMap();
    	if (tpDocumento != null)
    		mapRetorno.put("tpDocumento",tpDocumento);
    	List lista = eventoService.findEventos(mapRetorno);
    	return montaRetornoEventos(lista);
    }
    

    /**
     * Ádamo B. Azambuja
     * Apenas monta a lista com typedFlatMap com uma lista de eventos. 
     * */
    public List montaRetornoEventos(List lista){
    	List listaRetorno = new ArrayList();
    	for (int i = 0; i <= lista.size()-1; i++){
    		TypedFlatMap mapRetorno = new TypedFlatMap();
    		Evento evento = (Evento)lista.get(i);
    		String descricao = "";
    		if (evento.getDsEventoMercadoria() != null) 
    			descricao = evento.getDsEventoMercadoria();
    		
    		mapRetorno.put("dsEvento",descricao  );
    		mapRetorno.put("idEvento",evento.getIdEvento());
    		mapRetorno.put("cdEvento",evento.getCdEvento()); // Adicionado para combo
    		listaRetorno.add(mapRetorno);
    	}
    	return listaRetorno;
    }
    
    /**
     * Ádamo B. Azambuja
     * retorna o número de linhas para paginacao da tela, este método foi alterado no DAO
     * */
	public Integer getRowCount(TypedFlatMap criteria) {
		return eventoClienteRecebeService.getRowCountCustom(criteria);
		
	}
    /**
     * Ádamo B. Azambuja
     * Busca os eventos de um cliente para mostrar na tela de eventos do cliente 
     * */
    public List findEventosCliente(Long idCliente){
    	TypedFlatMap mapRetorno = new TypedFlatMap();
    	List lista = eventoService.findLookup(mapRetorno); // findLookupEvento : usar este metodo, esta em construçãos
    	mapRetorno.clear();
    	return montaRetornoEventos(lista);
    }
    
    
	
	/*
	 * Métodos padrões da classe
	 * */
	public void setService(EventoClienteRecebeService eventoClienteRecebeService) {
		this.defaultService = eventoClienteRecebeService;
	}
    public void removeById(java.lang.Long id) {
    	configuracaoComunicacaoService.removeById(id);
    }
 
	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	configuracaoComunicacaoService.removeByIds(ids);
    }

    public EventoClienteRecebe findById(java.lang.Long id) {
    	return ((EventoClienteRecebeService)defaultService).findById(id);
    }
	public EventoService getEventoService() {
		return eventoService;
	}
	public void setEventoService(EventoService eventoService) {
		this.eventoService = eventoService;
	}
	public ClienteService getClienteService() {
		return clienteService;
	}
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}
	public ConfiguracaoComunicacaoService getConfiguracaoComunicacaoService() {
		return configuracaoComunicacaoService;
	}
	public void setConfiguracaoComunicacaoService(
			ConfiguracaoComunicacaoService configuracaoComunicacaoService) {
		this.configuracaoComunicacaoService = configuracaoComunicacaoService;
	}
	public EventoClienteRecebeService getEventoClienteRecebeService() {
		return eventoClienteRecebeService;
	}
	public void setEventoClienteRecebeService(
			EventoClienteRecebeService eventoClienteRecebeService) {
		this.eventoClienteRecebeService = eventoClienteRecebeService;
	}
	public ServicoService getServicoService() {
		return servicoService;
	}
	public void setServicoService(ServicoService servicoService) {
		this.servicoService = servicoService;
	}

}
