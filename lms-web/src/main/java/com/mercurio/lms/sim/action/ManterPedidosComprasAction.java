package com.mercurio.lms.sim.action;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.joda.time.YearMonthDay;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Moeda;
import com.mercurio.lms.configuracoes.model.service.MoedaService;
import com.mercurio.lms.expedicao.model.service.DocumentoAnexoService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.sim.model.PedidoCompra;
import com.mercurio.lms.sim.model.service.PedidoCompraService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.JTFormatUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.service.ClienteService;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;

/** 
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.sim.manterPedidosComprasAction"
 */

public class ManterPedidosComprasAction extends CrudAction {
	
	private MoedaService moedaService;
	private FilialService filialService;
	private ClienteService clienteService;
	private PedidoCompraService pedidoCompraService; 
	private DocumentoAnexoService documentoAnexoService;
	
	
	/*
	 * Metodos padrao da classe
	 * */
	public void setService(PedidoCompraService pedidoCompraService) {
		this.defaultService = pedidoCompraService;
	}
    public void removeById(java.lang.Long id) {
        ((PedidoCompraService)defaultService).removeById(id);
   }

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	((PedidoCompraService)defaultService).removeByIds(ids);
    }

    public PedidoCompra findById(java.lang.Long id) {
    	return ((PedidoCompraService)defaultService).findById(id);
    }

    
    
    
    
    /*
     * Metodos da regra de negocio
     * */
    // Metodo que grava os dados da cad
    public TypedFlatMap storeCustom(TypedFlatMap map) {

    	// Objeto que vai ser persistido no banco
    	PedidoCompra pedidoCompra = new PedidoCompra();
    	if (map.getLong("idPedidoCompra") != null){
    		pedidoCompra.setIdPedidoCompra(map.getLong("idPedidoCompra"));
    		
    	}
    	if(map.getDateTime("emissaoPedido")!= null)
    		pedidoCompra.setDhEmissao(map.getDateTime("emissaoPedido"));
    	
    	// Populando objeto com dados da tela
    	if (map.getLong("filial.idFilial") != null){
	    	Filial filial = new Filial();
	    	filial = filialService.findById(map.getLong("filial.idFilial"));
	    	pedidoCompra.setFilial(filial);  
    	}
    	
    	if (map.getLong("remetente.idCliente") != null){
	    	Cliente remetente = new Cliente();
	    	remetente = clienteService.findByIdInitLazyProperties(map.getLong("remetente.idCliente"), false);
	    	pedidoCompra.setRemetente(remetente);
    	}
    	if (map.getLong("destinatario.idCliente") != null){
	    	Cliente destinatario = new Cliente();
	    	destinatario = clienteService.findById(map.getLong("destinatario.idCliente"));
	    	pedidoCompra.setDestinatario(destinatario);
    	}
		pedidoCompra.setNrPedido(map.getLong("pedido"));
		pedidoCompra.setNrPedidoInternacional(map.getString("pedidoInternacional"));
		pedidoCompra.setTpOrigem(map.getDomainValue("tpOrigem"));
    	pedidoCompra.setNrFatura(map.getString("fatura"));
    	pedidoCompra.setNrNotaFiscal(map.getString("notaFiscal"));
    	pedidoCompra.setNrPesoBruto(map.getBigDecimal("pesoBruto"));
    	pedidoCompra.setNrPesoLiquido(map.getBigDecimal("pesoLiquido"));
    	pedidoCompra.setNrQuantidadeVolumes(map.getInteger("quantidadeVolumes"));
    	
    	if (map.getLong("pedidoCompra.idMoeda") != null){
	    	Moeda moeda = new Moeda();
	    	moeda = moedaService.findById(map.getLong("pedidoCompra.idMoeda"));
	    	pedidoCompra.setMoeda(moeda) ;
    	}    	
    	
   		pedidoCompra.setUsuario(SessionUtils.getUsuarioLogado());
    	
    	
    	pedidoCompra.setVlExportacao(map.getBigDecimal("valorExportacao"));
    	pedidoCompra.setBlCartao(map.getBoolean("pagtoCartao"));
    	pedidoCompra.setTpMotalBrasil(map.getDomainValue("tpModalBrasil"));
    	pedidoCompra.setTpModalExterior(map.getDomainValue("tpModalExterior"));
    	pedidoCompra.setDhEmissao(map.getDateTime("emissaoPedido"));
    	pedidoCompra.setDtPrevisaoEntregaBrasil(map.getYearMonthDay("previsaoEntregaBrasil"));
    	pedidoCompra.setDtPrevisaoEntregaExterior(map.getYearMonthDay("previsaoEntregaExterior"));
    	pedidoCompra.setDhInclusao(JTDateTimeUtils.getDataHoraAtual());
		
    	
    	// Gravando o objeto no banco.
        Long id = (Long)getPedidoCompraService().store(pedidoCompra);
        
        TypedFlatMap retorno = new TypedFlatMap();
        retorno.put("idPedidoCompra",id);
        
        //Busca o documento de serviço associado ao número da fatura informado no pedido (NR_FATURA) 
        List lista = documentoAnexoService.findDoctoServicoByFaturaPedido(map.getLong("destinatario.idCliente"),map.getLong("remetente.idCliente"),map.getString("fatura"));
    	if (!lista.isEmpty()){
    		Map mapResult =(Map) lista.get(0);
    		retorno.put("idDoctoServicoConsulta", mapResult.get("idDoctoServicoConsulta"));
    	}
        return retorno;
    }

    
    
    //  metodo responsável por trazer informações do usuario logado
    public Map findInformacoesUsuarioLogado(Map criteria){
        TypedFlatMap typedFlatMap = new TypedFlatMap();
        typedFlatMap.put("filial.idFilial", SessionUtils.getFilialSessao().getIdFilial());
        typedFlatMap.put("filial.sgFilial", SessionUtils.getFilialSessao().getSgFilial());
        typedFlatMap.put("pessoa.nmFantasia",SessionUtils.getFilialSessao().getPessoa().getNmFantasia());  
        typedFlatMap.put("usuarioSessao",SessionUtils.getUsuarioLogado().getNmUsuario());  
        typedFlatMap.put("idUsuarioSessao",SessionUtils.getUsuarioLogado().getIdUsuario());  
        typedFlatMap.put("dataHoraAtual",JTFormatUtils.format(JTDateTimeUtils.getDataHoraAtual(), JTFormatUtils.SHORT));        
        typedFlatMap.put("dataHoraEmissao",JTDateTimeUtils.getDataHoraAtual());      
        
        return typedFlatMap;
        
    }
    
    //Find para tela de pesquisa, listagem
    public ResultSetPage findPaginatedCustom(TypedFlatMap criteria){
    	
    	ResultSetPage rs = ((PedidoCompraService)defaultService).findPaginatedCustom(criteria);
    	List listaRetorno = new ArrayList();
    	for (int i = 0 ; i <= rs.getList().size() -1; i++){
    		PedidoCompra oe = (PedidoCompra)rs.getList().get(i);
    		TypedFlatMap tfm = new TypedFlatMap();
    		if (oe.getRemetente().getPessoa() != null) {
    			tfm.put("remetente",oe.getRemetente().getPessoa().getNmPessoa());
        		tfm.put("tipoIdRemetente",oe.getRemetente().getPessoa().getTpIdentificacao());
        		tfm.put("idRemetente",FormatUtils.formatIdentificacao(oe.getRemetente().getPessoa().getTpIdentificacao(),oe.getRemetente().getPessoa().getNrIdentificacao()) );
    		}
    		tfm.put("idPedidoCompra",oe.getIdPedidoCompra());
     		if (oe.getDestinatario().getPessoa() != null) { 
     			tfm.put("destinatario",oe.getDestinatario().getPessoa().getNmPessoa());
        		tfm.put("tipoIdDestinatario",oe.getDestinatario().getPessoa().getTpIdentificacao());
         		tfm.put("idDestinatario", FormatUtils.formatIdentificacao(oe.getDestinatario().getPessoa().getTpIdentificacao(),oe.getDestinatario().getPessoa().getNrIdentificacao()) );
     		}
     		tfm.put("nrPedido",oe.getNrPedido());
     		tfm.put("nrPedidoInternacional",oe.getNrPedidoInternacional());	
     		tfm.put("origem",oe.getTpOrigem());
     		tfm.put("fatura",oe.getNrFatura());
     		tfm.put("notaFiscal",oe.getNrNotaFiscal());
     		tfm.put("cartao",oe.getBlCartao());
     		tfm.put("emissao",oe.getDhEmissao());
     		
     		listaRetorno.add(tfm);
    	}
    	rs.setList(listaRetorno);
    	return rs; 
    }
    
    // Find para tela de detalhamento
    public TypedFlatMap findByIdDetalhamento(java.lang.Long id) {
    	TypedFlatMap retorno = new TypedFlatMap();
    	
    	retorno = ((PedidoCompraService)defaultService).findByIdDetalhamento(id);
    	    	    	
    	List lista = documentoAnexoService.findDoctoServicoByFaturaPedido(retorno.getLong("destinatario.idCliente"),retorno.getLong("remetente.idCliente"),retorno.getString("fatura"));
    	if (!lista.isEmpty()){
    		Map map =(Map) lista.get(0);
    		retorno.put("idDoctoServicoConsulta", map.get("idDoctoServicoConsulta"));
    	}
    	
    	return retorno;
    }
    
    public Integer getRowCountPedidoCompraCustom(Map criteria){
        return ((PedidoCompraService)defaultService).getRowCount(criteria);
    }
	public Integer getRowCount(TypedFlatMap criteria) {
		return ((PedidoCompraService)defaultService).getRowCountCustom(criteria);
		
	}
    
    /*
     * Lookups
     * */
	public List findMoeda(Map criteria) {		
		return getMoedaService().find(criteria);
	}
    public List findLookupFilial(Map criteria) {
    	return this.getFilialService().findLookupFilial(criteria);
    }
	public List findLookupCliente(Map criteria) {		
		return clienteService.findLookup(criteria);
	}
	
	
	
	public void validatePeriodo(TypedFlatMap criteria) {
		YearMonthDay dhInicial = criteria.getYearMonthDay("dataHoraInicial");
		YearMonthDay dhFinal = criteria.getYearMonthDay("dataHoraFinal");
		if(dhFinal.isBefore(dhInicial))
			throw new BusinessException("LMS-00008");
		if(dhFinal.isAfter(dhInicial.plusDays(31)))
			throw new BusinessException("LMS-10045");
	}
	
	
	
	/*	
	 * Metodos Get e Set
	 * */
	public void setMoedaService(MoedaService moedaService) {
		this.moedaService = moedaService;
	}
	public MoedaService getMoedaService() {
		return moedaService;
	}
	public FilialService getFilialService() {
		return filialService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public ClienteService getClienteService() {
		return clienteService;
	}
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}
	public PedidoCompraService getPedidoCompraService() {
		return pedidoCompraService;
	}
	public void setPedidoCompraService(PedidoCompraService pedidoCompraService) {
		this.pedidoCompraService = pedidoCompraService;
	}

	public void setDocumentoAnexoService(DocumentoAnexoService documentoAnexoService) {
		this.documentoAnexoService = documentoAnexoService;
	}

}
