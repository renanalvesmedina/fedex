package com.mercurio.lms.sim.action;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.util.FilterList;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.service.ControleCargaService;
import com.mercurio.lms.contasreceber.model.service.FaturaService;
import com.mercurio.lms.entrega.model.service.ManifestoEntregaService;
import com.mercurio.lms.entrega.model.service.ReciboReembolsoService;
import com.mercurio.lms.expedicao.DoctoServicoLookupFacade;
import com.mercurio.lms.expedicao.model.service.AwbService;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.model.service.CtoInternacionalService;
import com.mercurio.lms.expedicao.model.service.ManifestoInternacionalService;
import com.mercurio.lms.expedicao.model.service.ManifestoViagemNacionalService;
import com.mercurio.lms.expedicao.model.service.NotaFiscalServicoService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.pendencia.model.service.MdaService;
import com.mercurio.lms.sim.model.service.EventoService;
import com.mercurio.lms.sim.model.service.IncluirEventosRastreabilidadeInternacionalService;
import com.mercurio.lms.sim.model.service.PedidoCompraService;
import com.mercurio.lms.util.AliasToNestedMapResultTransformer;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.JTFormatUtils;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.sim.gerarEventosRastreabilidadeAction"
 */

public class GerarEventosRastreabilidadeAction extends CrudAction {

	private EventoService eventoService;

	private FilialService filialService;

	private IncluirEventosRastreabilidadeInternacionalService incluirEventosRastreabilidadeInternacionalService;

	private ManifestoEntregaService manifestoEntregaService;

	private ManifestoViagemNacionalService manifestoViagemNacionalService;

	private ManifestoInternacionalService manifestoInternacionalService;

	private ConhecimentoService conhecimentoService;

	private CtoInternacionalService ctoInternacionalService;

	private MdaService mdaService;

	private ControleCargaService controleCargaService;

	private AwbService awbService;

	private FaturaService faturaService;

	private PedidoCompraService pedidoCompraService;

	private NotaFiscalServicoService notaFiscalService;

	private DomainValueService domainValueService;

	private ReciboReembolsoService reciboReembolsoService;
	
	private DoctoServicoLookupFacade doctoServicoLookupFacade;

	public void execute(TypedFlatMap parametros) {
		String tpDocumento = parametros.getString("tpDocumentoServico");
		Long idFilial = parametros.getLong("filialByIdFilialOrigem.idFilial");
		String sgFilial = parametros.getString("filialByIdFilialOrigem.sgFilial");
		String nrDocumento = parametros.getString("nrDocumento");
		Short cdEvento = parametros.getShort("evento.codigoEvento");
		DateTime dhEvento = parametros.getDateTime("dhEvento");
		String dsObservacao = parametros.getString("dsObservacao");
		String dsTimeZone = parametros.getString("dsTimezone");
		
		DateTime dhEventoWithTimeZoneInf = new DateTime(dhEvento.getYear(), 
				dhEvento.getMonthOfYear(), 
				dhEvento.getDayOfMonth(), 
				dhEvento.getHourOfDay(), 
				dhEvento.getMinuteOfHour(), 
				dhEvento.getSecondOfMinute(), 
				dhEvento.getMillisOfSecond(), 
				DateTimeZone.forID(dsTimeZone));
		
		nrDocumento = doctoServicoLookupFacade.formatarDocumentoByTipo(tpDocumento, sgFilial, nrDocumento);
		
		
		
		if (tpDocumento.equals("PED")) {
			getIncluirEventosRastreabilidadeInternacionalService()
					.generateEventosPED(
							parametros.getLong("pedidoCompra.idPedidoCompra"),
							nrDocumento, cdEvento, dhEventoWithTimeZoneInf, dsObservacao);

		} else if (tpDocumento.equals("PEI")) {
			getIncluirEventosRastreabilidadeInternacionalService()
					.generateEventosPEI(
							parametros.getLong("pedidoCompra.idPedidoCompra"),
							nrDocumento, cdEvento, dhEventoWithTimeZoneInf, dsObservacao);

		} else {
			getIncluirEventosRastreabilidadeInternacionalService()
					.executeInsereEventos(tpDocumento, nrDocumento, cdEvento,
							idFilial, dhEventoWithTimeZoneInf, dsObservacao);
		}
	}

	public List findLookupEventos(TypedFlatMap parameters) {
		return getEventoService().findLookupEvento(parameters);
	}

	public Map findDadosUsuarioLogado() {
		TypedFlatMap typedFlatMap = new TypedFlatMap();
		String nmUsuario = SessionUtils.getUsuarioLogado().getNmUsuario();

		typedFlatMap.put("usuarioInclusao", nmUsuario);
		typedFlatMap.put("dhInclusao", JTFormatUtils.format(JTDateTimeUtils
				.getDataHoraAtual(), JTFormatUtils.SHORT));
		return typedFlatMap;
	}

	/**
	 * COnsulta os tipos de documentos de servico da tag de docto servico
	 * @param criteria
	 * @return
	 */
	public List findTipoDocumentoServico(Map criteria) {
		List dominiosValidos = new ArrayList();

		dominiosValidos.add("CCA");
		dominiosValidos.add("CRT");
		dominiosValidos.add("CTR");
		dominiosValidos.add("MAE");
		dominiosValidos.add("MAV");
		dominiosValidos.add("MIC");
		dominiosValidos.add("MID");
		dominiosValidos.add("MDA");
		dominiosValidos.add("NFT");
		dominiosValidos.add("PED");
		dominiosValidos.add("PEI");

		List retorno = domainValueService.findByDomainNameAndValues(
				"DM_TIPO_DOCUMENTO", dominiosValidos);

		return retorno;
	}

	/*
	 * Lookup de filial
	 */
	public List findLookupFilialByDocumentoServico(Map criteria) {

		FilterList filter = new FilterList(getFilialService().findLookup(
				criteria)) {
			public Map filterItem(Object item) {
				Filial filial = (Filial) item;
				TypedFlatMap typedFlatMap = new TypedFlatMap();
				typedFlatMap.put("idFilial", filial.getIdFilial());
				typedFlatMap.put("sgFilial", filial.getSgFilial());
				typedFlatMap.put("pessoa.nmFantasia", filial.getPessoa()
						.getNmFantasia());
				return typedFlatMap;
			}
		};
		return (List) filter.doFilter();
	}

	/*
	 * Lookups de numero de documento
	 */
	public List findLookupDocumentoDocumentNumberCCA(Map criteria) {
		return getControleCargaService().findLookup(criteria);
	}

	public List findLookupDocumentoDocumentNumberEN(Map criteria) {
		return getManifestoEntregaService().findLookup(criteria);
	}

	public List findLookupDocumentoDocumentNumberMAV(Map criteria) {

		List toReturn = getManifestoViagemNacionalService().findLookup(criteria);
		return toReturn;
	}

	public List findLookupDocumentoDocumentNumberMIC(Map criteria) {
		return getManifestoInternacionalService().findLookup(criteria);
	}

	public List findLookupDocumentoDocumentNumberMID(Map criteria) {
		return getManifestoInternacionalService().findLookup(criteria);
	}

	public List findLookupDocumentoDocumentNumberMAE(Map criteria) {
		return getManifestoEntregaService().findLookup(criteria);
	}

	public List findLookupDocumentoDocumentNumberAWB(Map criteria) {
		return getAwbService().findLookup(criteria);
	}

	public List findLookupDocumentoDocumentNumberFAT(Map criteria) {
		return getFaturaService().findLookup(criteria);
	}

	public List findLookupDocumentoDocumentNumberPED(Map criteria) {
		return getPedidoCompraService().findLookup(criteria);
	}

	public List findLookupDocumentoDocumentNumberPEI(Map criteria) {
		return getPedidoCompraService().findLookup(criteria);
	}

	public List findLookupDocumentoDocumentNumberCTR(Map criteria) {
		return getConhecimentoService().findLookup(criteria);
	}

	public List findLookupDocumentoDocumentNumberCRT(Map criteria) {
		return getCtoInternacionalService().findLookup(criteria);
	}

	public List findLookupDocumentoDocumentNumberNFS(Map criteria) {
		return getNotaFiscalService().findLookup(criteria);
	}

	public List findLookupDocumentoDocumentNumberMDA(Map criteria) {
		return getMdaService().findLookup(criteria);
	}

	public List findLookupServiceDocumentNumberNFT(Map criteria) {
		return conhecimentoService.findLookup(criteria);
	}

	public List findLookupDocumentoDocumentNumberRRE(TypedFlatMap criteria) {
		List listaRecibo = reciboReembolsoService.findLookupCustom(criteria);
		List listaNova = AliasToNestedMapResultTransformer.getInstance()
				.transformListResult(listaRecibo);
		return listaNova;
	}
	
    public List findTimeZones() {
    	return JTDateTimeUtils.getTimeZones();
    }
    
    public Map getDefaultTimeZone() {
    	TypedFlatMap typedFlatMap = new TypedFlatMap();
    	DateTimeZone dtz = JTDateTimeUtils.getUserDtz();
    	if (dtz != null) {
    		typedFlatMap.put("dsTimezone", dtz.getID());
    	}
		return typedFlatMap;
    }

	/**
	 * @return Returns the eventoService.
	 */
	public EventoService getEventoService() {
		return eventoService;
	}

	/**
	 * @param eventoService The eventoService to set.
	 */
	public void setEventoService(EventoService eventoService) {
		this.eventoService = eventoService;
	}

	/**
	 * @return Returns the incluirEventosRastreabilidadeInternacionalService.
	 */
	public IncluirEventosRastreabilidadeInternacionalService getIncluirEventosRastreabilidadeInternacionalService() {
		return incluirEventosRastreabilidadeInternacionalService;
	}

	/**
	 * @param incluirEventosRastreabilidadeInternacionalService The incluirEventosRastreabilidadeInternacionalService to set.
	 */
	public void setIncluirEventosRastreabilidadeInternacionalService(
			IncluirEventosRastreabilidadeInternacionalService incluirEventosRastreabilidadeInternacionalService) {
		this.incluirEventosRastreabilidadeInternacionalService = incluirEventosRastreabilidadeInternacionalService;
	}

	/**
	 * @return Returns the filialService.
	 */
	public FilialService getFilialService() {
		return filialService;
	}

	/**
	 * @param filialService The filialService to set.
	 */
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	/**
	 * @return Returns the manifestoEntregaService.
	 */
	public ManifestoEntregaService getManifestoEntregaService() {
		return manifestoEntregaService;
	}

	/**
	 * @param manifestoEntregaService The manifestoEntregaService to set.
	 */
	public void setManifestoEntregaService(
			ManifestoEntregaService manifestoEntregaService) {
		this.manifestoEntregaService = manifestoEntregaService;
	}

	/**
	 * @return Returns the manifestoViagemNacionalService.
	 */
	public ManifestoViagemNacionalService getManifestoViagemNacionalService() {
		return manifestoViagemNacionalService;
	}

	/**
	 * @param manifestoViagemNacionalService The manifestoViagemNacionalService to set.
	 */
	public void setManifestoViagemNacionalService(
			ManifestoViagemNacionalService manifestoViagemNacionalService) {
		this.manifestoViagemNacionalService = manifestoViagemNacionalService;
	}

	/**
	 * @return Returns the manifestoInternacionalService.
	 */
	public ManifestoInternacionalService getManifestoInternacionalService() {
		return manifestoInternacionalService;
	}

	/**
	 * @param manifestoInternacionalService The manifestoInternacionalService to set.
	 */
	public void setManifestoInternacionalService(
			ManifestoInternacionalService manifestoInternacionalService) {
		this.manifestoInternacionalService = manifestoInternacionalService;
	}

	/**
	 * @return Returns the conhecimentoService.
	 */
	public ConhecimentoService getConhecimentoService() {
		return conhecimentoService;
	}

	/**
	 * @param conhecimentoService The conhecimentoService to set.
	 */
	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
	}

	/**
	 * @return Returns the ctoInternacionalService.
	 */
	public CtoInternacionalService getCtoInternacionalService() {
		return ctoInternacionalService;
	}

	/**
	 * @param ctoInternacionalService The ctoInternacionalService to set.
	 */
	public void setCtoInternacionalService(
			CtoInternacionalService ctoInternacionalService) {
		this.ctoInternacionalService = ctoInternacionalService;
	}

	/**
	 * @return Returns the mdaService.
	 */
	public MdaService getMdaService() {
		return mdaService;
	}

	/**
	 * @param mdaService The mdaService to set.
	 */
	public void setMdaService(MdaService mdaService) {
		this.mdaService = mdaService;
	}

	/**
	 * @return Returns the controleCargaService.
	 */
	public ControleCargaService getControleCargaService() {
		return controleCargaService;
	}

	/**
	 * @param controleCargaService The controleCargaService to set.
	 */
	public void setControleCargaService(
			ControleCargaService controleCargaService) {
		this.controleCargaService = controleCargaService;
	}

	/**
	 * @return Returns the awbService.
	 */
	public AwbService getAwbService() {
		return awbService;
	}

	/**
	 * @param awbService The awbService to set.
	 */
	public void setAwbService(AwbService awbService) {
		this.awbService = awbService;
	}

	/**
	 * @return Returns the faturaService.
	 */
	public FaturaService getFaturaService() {
		return faturaService;
	}

	/**
	 * @param faturaService The faturaService to set.
	 */
	public void setFaturaService(FaturaService faturaService) {
		this.faturaService = faturaService;
	}

	/**
	 * @return Returns the pedidoCompraService.
	 */
	public PedidoCompraService getPedidoCompraService() {
		return pedidoCompraService;
	}

	/**
	 * @param pedidoCompraService The pedidoCompraService to set.
	 */
	public void setPedidoCompraService(PedidoCompraService pedidoCompraService) {
		this.pedidoCompraService = pedidoCompraService;
	}

	/**
	 * @return Returns the notaFiscalService.
	 */
	public NotaFiscalServicoService getNotaFiscalService() {
		return notaFiscalService;
	}

	/**
	 * @param notaFiscalService The notaFiscalService to set.
	 */
	public void setNotaFiscalService(NotaFiscalServicoService notaFiscalService) {
		this.notaFiscalService = notaFiscalService;
	}

	/**
	 * @param domainValueService The domainValueService to set.
	 */
	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}

	/**
	 * @param reciboReembolsoService The reciboReembolsoService to set.
	 */
	public void setReciboReembolsoService(
			ReciboReembolsoService reciboReembolsoService) {
		this.reciboReembolsoService = reciboReembolsoService;
	}

	public void setDoctoServicoLookupFacade(
			DoctoServicoLookupFacade doctoServicoLookupFacade) {
		this.doctoServicoLookupFacade = doctoServicoLookupFacade;
	}
}
