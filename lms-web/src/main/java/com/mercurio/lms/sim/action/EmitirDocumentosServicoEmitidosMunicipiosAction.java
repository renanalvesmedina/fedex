package com.mercurio.lms.sim.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.springframework.jdbc.UncategorizedSQLException;

import com.mercurio.adsm.core.InfrastructureException;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.report.ReportActionSupport;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Moeda;
import com.mercurio.lms.configuracoes.model.MoedaPais;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.configuracoes.model.service.MoedaPaisService;
import com.mercurio.lms.municipios.model.Pais;
import com.mercurio.lms.municipios.model.service.MunicipioService;
import com.mercurio.lms.municipios.model.service.UnidadeFederativaService;
import com.mercurio.lms.sim.report.EmitirDocumentosServicoEmitidosTotaisService;
import com.mercurio.lms.sim.report.EmitirDocumentosServicoEmitidosUFService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.service.ClienteService;


/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.sim.emitirDocumentosServicoEmitidosMunicipiosAction"
 */

public class EmitirDocumentosServicoEmitidosMunicipiosAction extends ReportActionSupport {

	private ClienteService clienteService;
	private MoedaPaisService moedaPaisService;
	private EmitirDocumentosServicoEmitidosTotaisService emitirDocumentosServicoEmitidosTotaisService;
	private EmitirDocumentosServicoEmitidosUFService emitirDocumentosServicoEmitidosUFService;
	private MunicipioService municipioService;
	private UnidadeFederativaService unidadeFederativaService;
	private DomainValueService domainValueService;
	
	@Override
	public java.io.File execute(TypedFlatMap parameters) throws Exception {
		
		String tpOpcao = parameters.getString("tpOpcao");
		
		if ("M".equals(tpOpcao)){
			this.reportServiceSupport = emitirDocumentosServicoEmitidosUFService;
		} else {
			this.reportServiceSupport = emitirDocumentosServicoEmitidosTotaisService;
		}
		
		java.io.File retorno = null;
		try{
		retorno = super.execute(parameters);
		}catch(UncategorizedSQLException e){
			throw new InfrastructureException(e.getCause());
		}
		return retorno;
	}

	public List findLookupCliente(TypedFlatMap tfm){
		
		List clientes = clienteService.findLookupSimplificado(tfm.getString("pessoa.nrIdentificacao"),null);
		
		List retorno = new ArrayList();
			
		if(clientes != null && clientes.size() > 0 ) {
				
		    Pessoa element = ((Cliente)clientes.get(0)).getPessoa();
				
			TypedFlatMap map = new TypedFlatMap();
			map.put("pessoa.nrIdentificacao",element.getNrIdentificacao());
			map.put("idCliente",element.getIdPessoa());
			map.put("pessoa.nmPessoa",element.getNmPessoa());
			map.put("pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(element.getTpIdentificacao(),
																						   element.getNrIdentificacao()));
			retorno.add(map);
					
		} 
		
		return retorno;			
	}

	
	public List findComboMoedaPais() {
		Pais p = SessionUtils.getPaisSessao();
		List moedaPaises = moedaPaisService.findByPais(p.getIdPais(),Boolean.TRUE);
		
		List retorno = new ArrayList(moedaPaises.size()); 
		
		Iterator iMoedaPaises = moedaPaises.iterator();
		while (iMoedaPaises.hasNext()) {
			MoedaPais mp = (MoedaPais)iMoedaPaises.next();
			Moeda m = mp.getMoeda();
			TypedFlatMap map = new TypedFlatMap();
			map.put("idMoedaPais",mp.getIdMoedaPais());
			map.put("moeda.siglaSimbolo",m.getSiglaSimbolo());
			map.put("moeda.dsSimbolo",m.getDsSimbolo());
			map.put("moeda.idMoeda",m.getIdMoeda());
			map.put("pais.idPais",mp.getPais().getIdPais());
			retorno.add(map);
		}
		
		return retorno;
	}

	public Map findMoedaUsuario() {		
		Pais p = SessionUtils.getPaisSessao();
		MoedaPais mp = moedaPaisService.findMoedaPaisMaisUtilizada(p.getIdPais());	
		Map m = new HashMap();
		m.put("idMoedaPais", mp.getIdMoedaPais());

		return m;
	}
	
	/**
     * Método que popula a combo de tipos de documento.
     * 
     * @param criteria
     * @return List
     */
    public List findTipoDocumentoServico(Map criteria) {
        List<String> dominiosValidos = new ArrayList<String>();
        dominiosValidos.add("CTR");
        dominiosValidos.add("CRT");
        dominiosValidos.add("NFT");
        dominiosValidos.add("CTE");
        dominiosValidos.add("NTE");
        List retorno = domainValueService.findByDomainNameAndValues("DM_TIPO_DOCUMENTO_SERVICO", dominiosValidos);
        return retorno;
    }
	
	/**
	 * FindLookup de município
	 * @param flat
	 * @return
	 */
	public List findLookupMunicipio(TypedFlatMap flat) {
		return municipioService.findByNmMunicipioTpSituacaoPaisUf(flat.getString("nmMunicipio"),flat.getLong("unidadeFederativa.pais.idPais"),flat.getLong("unidadeFederativa.idUnidadeFederativa"),null);
	}

	/**
	 * FindLookup de Unidade Federativa
	 * @param flat
	 * @return
	 */
	public List findLookupUnidadeFederativa(TypedFlatMap flat) {
		return unidadeFederativaService.findUfBySgAndPais(flat.getString("sgUnidadeFederativa"),flat.getLong("pais.idPais"));
	}
	
	
	/**
	 * @param clienteService The clienteService to set.
	 */
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}


	/**
	 * @param moedaPaisService The moedaPaisService to set.
	 */
	public void setMoedaPaisService(MoedaPaisService moedaPaisService) {
		this.moedaPaisService = moedaPaisService;
	}
	

	/**
	 * @param emitirDocumentosServicoEmitidosUFService The emitirDocumentosServicoEmitidosUFService to set.
	 */
	public void setEmitirDocumentosServicoEmitidosUFService(
			EmitirDocumentosServicoEmitidosUFService emitirDocumentosServicoEmitidosUFService) {
		this.emitirDocumentosServicoEmitidosUFService = emitirDocumentosServicoEmitidosUFService;
	}

	/**
	 * @param emitirDocumentosServicoEmitidosTotaisService The emitirDocumentosServicoEmitidosTotaisService to set.
	 */
	public void setEmitirDocumentosServicoEmitidosTotaisService(
			EmitirDocumentosServicoEmitidosTotaisService emitirDocumentosServicoEmitidosTotaisService) {
		this.emitirDocumentosServicoEmitidosTotaisService = emitirDocumentosServicoEmitidosTotaisService;
	}

	public void setMunicipioService(MunicipioService municipioService) {
		this.municipioService = municipioService;
	}

	public void setUnidadeFederativaService(
			UnidadeFederativaService unidadeFederativaService) {
		this.unidadeFederativaService = unidadeFederativaService;
	}

	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}
	

}
