package com.mercurio.lms.seguros.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.core.util.Base64Util;
import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.masterdetail.ItemList;
import com.mercurio.adsm.framework.model.masterdetail.ItemListConfig;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailAction;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailFactory;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailKey;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntry;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntryConfig;
import com.mercurio.adsm.framework.report.ReportExecutionManager;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.service.MoedaService;
import com.mercurio.lms.configuracoes.model.service.PessoaService;
import com.mercurio.lms.seguros.model.ApoliceSeguro;
import com.mercurio.lms.seguros.model.ApoliceSeguroAnexo;
import com.mercurio.lms.seguros.model.ApoliceSeguroParcela;
import com.mercurio.lms.seguros.model.ReguladoraSeguradora;
import com.mercurio.lms.seguros.model.service.ApoliceSeguroAnexoService;
import com.mercurio.lms.seguros.model.service.ApoliceSeguroParcelasService;
import com.mercurio.lms.seguros.model.service.ApoliceSeguroService;
import com.mercurio.lms.seguros.model.service.ReguladoraSeguradoraService;
import com.mercurio.lms.seguros.model.service.ReguladoraSeguroService;
import com.mercurio.lms.seguros.model.service.TipoSeguroService;
import com.mercurio.lms.seguros.report.RelatorioManterApolicesSeguroService;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.seguros.manterApolicesSeguroAction"
 */

public class ManterApolicesSeguroAction extends MasterDetailAction {
	
	private static final String APOLICE_SEGURO_PARCELA_CONFIG_ALIAS = "APOLICE_SEGURO_PARCELA_CONFIG_ALIAS";
	private static final String APOLICE_SEGURO_ANEXO_CONFIG_ALIAS = "APOLICE_SEGURO_ANEXO_CONFIG_ALIAS";
	private Logger log = LogManager.getLogger(this.getClass());
	private ReguladoraSeguroService reguladoraSeguroService;
	private ReguladoraSeguradoraService reguladoraSeguradoraService;
	private TipoSeguroService tipoSeguroService;
	private MoedaService moedaService;
	private PessoaService pessoaService;
	private ApoliceSeguroParcelasService apoliceSeguroParcelasService;
	private ApoliceSeguroAnexoService apoliceSeguroAnexoService;
	private ReportExecutionManager reportExecutionManager;
	private RelatorioManterApolicesSeguroService apolicesSeguroService;

	public RelatorioManterApolicesSeguroService getApolicesSeguroService() {
		return apolicesSeguroService;
	}
	public void setApolicesSeguroService(
			RelatorioManterApolicesSeguroService apolicesSeguroService) {
		this.apolicesSeguroService = apolicesSeguroService;
	}
	public ReportExecutionManager getReportExecutionManager() {
		return reportExecutionManager;
	}
	public void setReportExecutionManager(
			ReportExecutionManager reportExecutionManager) {
		this.reportExecutionManager = reportExecutionManager;
	}
	public ReguladoraSeguroService getReguladoraSeguroService() {
		return reguladoraSeguroService;
	}
	public void setReguladoraSeguroService(ReguladoraSeguroService reguladoraSeguroService) {
		this.reguladoraSeguroService = reguladoraSeguroService;
	}
	public TipoSeguroService getTipoSeguroService() {
		return tipoSeguroService;
	}
	public void setTipoSeguroService(TipoSeguroService tipoSeguroService) {
		this.tipoSeguroService = tipoSeguroService;
	}
	public MoedaService getMoedaService() {
		return moedaService;
	}
	public void setMoedaService(MoedaService moedaService) {
		this.moedaService = moedaService;
	}
	public ReguladoraSeguradoraService getReguladoraSeguradoraService() {
		return reguladoraSeguradoraService;
	}
	
	public void setReguladoraSeguradoraService(ReguladoraSeguradoraService reguladoraSeguradoraService) {
		this.reguladoraSeguradoraService = reguladoraSeguradoraService;
	}
	
    public void removeById(java.lang.Long id) {
    	getApoliceSeguroService().removeById(id);
    }

	@SuppressWarnings("rawtypes")
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIdsParcela(List ids) {
    	super.removeItemByIds(ids, APOLICE_SEGURO_PARCELA_CONFIG_ALIAS);
    }
	
	@SuppressWarnings("rawtypes")
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIdsAnexo(List ids) {
    	super.removeItemByIds(ids, APOLICE_SEGURO_ANEXO_CONFIG_ALIAS);
    }

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	getApoliceSeguroService().removeByIds(ids);
    }

    public ApoliceSeguro findById(java.lang.Long id) {
    	ApoliceSeguro apoliceSeguro = getApoliceSeguroService().findById(id);
    	putMasterInSession(apoliceSeguro);
    	
    	return apoliceSeguro;
    }

    /**
     * Faz a consulta ao banco, retornando o numero de registros encontrados para determinados 
     * parametros.
     * 
     * @param Map criteria 
     * @return Integer numero de registros
     */
    public Integer getRowCountApolicesSeguro(Map criteria) {
    	return this.getApoliceSeguroService().getRowCountApolicesSeguro(criteria);
    } 
    
    /**
     * Retorna um map com os objetos a serem mostrados na grid.
     * 
     * @param Map criteria
     * @return ResultSetPage com os dados da grid.
     */
    public ResultSetPage findPaginatedApolicesSeguro(Map criteria) {
    	ResultSetPage rsp = this.getApoliceSeguroService().findPaginatedApolicesSeguro(criteria);
    	List result = rsp.getList();
    	List retorno = new ArrayList();
    	for (Iterator iter = result.iterator(); iter.hasNext();) {
			ApoliceSeguro apoliceSeguro = (ApoliceSeguro) iter.next();
			TypedFlatMap typedFlatMap = new TypedFlatMap();
			typedFlatMap.put("idApoliceSeguro", apoliceSeguro.getIdApoliceSeguro());
    		typedFlatMap.put("nrApolice", apoliceSeguro.getNrApolice());
    		typedFlatMap.put("reguladoraSeguro.pessoa.nmPessoa", apoliceSeguro.getReguladoraSeguro().getPessoa().getNmPessoa());
    		typedFlatMap.put("seguradora.pessoa.nmPessoa", apoliceSeguro.getSeguradora().getPessoa().getNmPessoa());
    		typedFlatMap.put("tipoSeguro.sgTipo", apoliceSeguro.getTipoSeguro().getSgTipo());
    		typedFlatMap.put("dtVigencia", apoliceSeguro.getDtVigenciaInicial().toLocalDate().toString("dd/MM/yyy") + "  " +  apoliceSeguro.getDtVigenciaFinal().toLocalDate().toString("dd/MM/yyy"));
    		typedFlatMap.put("moeda.siglaSimbolo", apoliceSeguro.getMoeda().getSiglaSimbolo());
    		typedFlatMap.put("vlLimiteApolice", apoliceSeguro.getVlLimiteApolice());
    		// LMS-7285
    		typedFlatMap.put("vlLimiteControleCarga", apoliceSeguro.getVlLimiteControleCarga());
    		
    		if(apoliceSeguro.getSegurado() != null){
    			typedFlatMap.put("segurado", apoliceSeguro.getSegurado().getNrIdentificacaoFormatado() + "  " + apoliceSeguro.getSegurado().getNmPessoa());
    		}
    		
    		retorno.add(typedFlatMap);
		}
    	rsp.setList(retorno);
    	return rsp;
    }

	/**
     * LMS- 6146 - Retorna um map com os objetos a serem mostrados na grid da aba Parcelas
     * @param criteria
     * @return ResultSetPage com os dados da grid.
     */
    @SuppressWarnings({ "rawtypes", "unchecked" })
    public ResultSetPage findPaginatedParcela(TypedFlatMap criteria){
    	ResultSetPage rsp = findPaginatedItemList(criteria, APOLICE_SEGURO_PARCELA_CONFIG_ALIAS );
    	
    	List result = rsp.getList();
    	List retorno = new ArrayList();
    	
    	for (Iterator iter = result.iterator(); iter.hasNext();) {
    		ApoliceSeguroParcela apoliceSeguroParcela = (ApoliceSeguroParcela) iter.next();
    		TypedFlatMap typedFlatMap = new TypedFlatMap();
    		typedFlatMap.put("idApoliceSeguroParcela", apoliceSeguroParcela.getIdApoliceSeguroParcela());
    		typedFlatMap.put("nrParcela", apoliceSeguroParcela.getNrParcela());
    		typedFlatMap.put("vlParcela", apoliceSeguroParcela.getVlParcela());
    		typedFlatMap.put("dtVencimento", apoliceSeguroParcela.getDtVencimento());
    		typedFlatMap.put("tpSituacaoPagamento", apoliceSeguroParcela.getTpSituacaoPagamento());
    		
    		if(apoliceSeguroParcela.getDcComprovante() != null){
    			typedFlatMap.put("dcComprovante", Base64Util.encode((byte[])apoliceSeguroParcela.getDcComprovante()));
    		}
    		
    		retorno.add(typedFlatMap);
    	}
    	
    	rsp.setList(retorno);
    	return rsp;
    }
    
    
    /**
     * LMS- 6146 - Retorna um map com os objetos a serem mostrados na grid da aba Anexos
     * @param criteria
     * @return ResultSetPage com os dados da grid.
     */
    @SuppressWarnings({ "rawtypes", "unchecked" })
    public ResultSetPage findPaginatedApoliceSeguroAnexos(TypedFlatMap criteria){
    	ResultSetPage rsp = findPaginatedItemList(criteria, APOLICE_SEGURO_ANEXO_CONFIG_ALIAS );
    	
    	List result = rsp.getList();
    	List retorno = new ArrayList();
    	
    	for (Iterator iter = result.iterator(); iter.hasNext();) {
    		ApoliceSeguroAnexo apoliceSeguroAnexo = (ApoliceSeguroAnexo) iter.next();
    		TypedFlatMap typedFlatMap = new TypedFlatMap();
    		typedFlatMap.put("idApoliceSeguroAnexo", apoliceSeguroAnexo.getIdApoliceSeguroAnexo());
    		typedFlatMap.put("dsAnexo", apoliceSeguroAnexo.getDsAnexo());
    		typedFlatMap.put("dhCriacao", apoliceSeguroAnexo.getDhCriacao());
    		typedFlatMap.put("usuario", apoliceSeguroAnexo.getUsuario().getNmUsuario());
    		typedFlatMap.put("dcArquivo", Base64Util.encode((byte[])apoliceSeguroAnexo.getDcArquivo()));
    		
    		retorno.add(typedFlatMap);
    	}
    	
    	rsp.setList(retorno);
    	
    	return rsp;
    }
    
    
    /**
     * LMS 6146
     * @param criteria
     * @return
     */
    public Integer getRowCountApoliceSeguroParcela(TypedFlatMap tfm){
    	MasterEntry entry = getMasterFromSession(tfm.getLong("idApoliceSeguro"), true);
		
		if (entry.getMasterId() == null) {
			return Integer.valueOf(0);
		}
		
		return getRowCountItemList(tfm, APOLICE_SEGURO_PARCELA_CONFIG_ALIAS);
		
    }
    
    /**
     * LMS 6146
     * @param criteria
     * @return
     */
    public Integer getRowCountApoliceSeguroAnexos(TypedFlatMap tfm){
    	MasterEntry entry = getMasterFromSession(tfm.getLong("idApoliceSeguro"), true);
		
		if (entry.getMasterId() == null) {
			return Integer.valueOf(0);
		}
		
		return getRowCountItemList(tfm, APOLICE_SEGURO_ANEXO_CONFIG_ALIAS);		
    }
    
	/**
     * Método para retornar uma list ordenada.
     * Utilizado em combobox.
     * @param criteria
     * @return
     */
    public List findReguladoraOrderByNmPessoa(Map criteria){
        return getReguladoraSeguroService().findOrderByNmPessoa(criteria);
    }
    
    /**
     * Método para retornar uma list ordenada.
     * Utilizado em combobox.
     * @param criteria
     * @return
     */
    public List findReguladoraSeguradoraOrderByNmPessoa(TypedFlatMap criteria){
    	List lista = getReguladoraSeguradoraService().findOrderByNmPessoa(criteria);
    	List result = new ArrayList();
    	TypedFlatMap map;
    	for(Iterator ite = lista.iterator(); ite.hasNext();){
    		ReguladoraSeguradora reguladoraSeguradora = (ReguladoraSeguradora)ite.next();
    		map = new TypedFlatMap();
    		map.put("tpSituacao", reguladoraSeguradora.getSeguradora().getTpSituacao());
    		map.put("seguradora.idSeguradora", reguladoraSeguradora.getSeguradora().getIdSeguradora());
    		map.put("seguradora.pessoa.nmPessoa", reguladoraSeguradora.getSeguradora().getPessoa().getNmPessoa());
    		map.put("seguradora.pessoa.idPessoa", reguladoraSeguradora.getSeguradora().getPessoa().getIdPessoa());
    		map.put("reguladoraSeguro.idReguladora", reguladoraSeguradora.getReguladoraSeguro().getIdReguladora());
    		map.put("idReguladoraSeguradora", reguladoraSeguradora.getIdReguladoraSeguradora());
    		//Exceção! onlyActiveValues da jsp não funciona neste caso.
    		if(!"A".equals(criteria.getString("tpSituacao")) || 
    		   "A".equals(reguladoraSeguradora.getSeguradora().getTpSituacao().getValue())) {
    			result.add(map);
    		}
    	}
        return result;
    }

    
    public Object findParcelas(MasterDetailKey key) {
    	ApoliceSeguroParcela apoliceParcela = (ApoliceSeguroParcela) findItemById(key, APOLICE_SEGURO_PARCELA_CONFIG_ALIAS);
    	TypedFlatMap mapItemMda = new TypedFlatMap();    	
    	
    	mapItemMda.put("idApoliceSeguroParcela", apoliceParcela.getIdApoliceSeguroParcela());
    	mapItemMda.put("idApoliceSeguro", apoliceParcela.getApoliceSeguro().getIdApoliceSeguro());
		mapItemMda.put("nrParcela", apoliceParcela.getNrParcela());
		mapItemMda.put("vlParcela", apoliceParcela.getVlParcela());
		mapItemMda.put("dtVencimento", apoliceParcela.getDtVencimento());
		mapItemMda.put("tpSituacaoPagamento.value", apoliceParcela.getTpSituacaoPagamento().getValue());
		
		if(apoliceParcela.getDcComprovante() != null){
			mapItemMda.put("dcComprovante", Base64Util.encode((byte[])apoliceParcela.getDcComprovante()));	
		}
    	
		return mapItemMda;
    }
    
    public Object findAnexos(MasterDetailKey key) {
    	ApoliceSeguroAnexo apoliceSeguroAnexo = (ApoliceSeguroAnexo) findItemById(key, APOLICE_SEGURO_ANEXO_CONFIG_ALIAS);
    	TypedFlatMap mapItemMda = new TypedFlatMap();
    	
    	mapItemMda.put("idApoliceSeguroAnexo",apoliceSeguroAnexo.getIdApoliceSeguroAnexo());
    	mapItemMda.put("dsAnexo",apoliceSeguroAnexo.getDsAnexo());
    	mapItemMda.put("dcArquivo", Base64Util.encode((byte[])apoliceSeguroAnexo.getDcArquivo()));
    	
    	return mapItemMda;
    }
    
    // LMS-6146
	public List findLookupPessoa(TypedFlatMap criteria){
		return getPessoaService().findLookup(criteria);
	}
    
    public List findTipoSeguroOrderBySgTipo(Map criteria){
        return getTipoSeguroService().findOrderBySgTipo(criteria);
    }

    public List findMoeda(TypedFlatMap criteria){
    	boolean ativo = false;
    	if(criteria != null && "A".equals(criteria.getString("tpSituacao"))) {
    		ativo = true;
    	}
    	
    	return getMoedaService().findMoedaOrderBySgSimbolo(ativo);
    }

	/**
	 * Insere, caso o id seja <code>null</code> ou atualiza uma entidade, caso contrário.
	 *
	 * @param bean entidade a ser armazenada.
	 * @return entidade que foi armazenada.
	 */
    @SuppressWarnings("rawtypes")
    public Serializable store(ApoliceSeguro bean) {
    	
    	MasterEntry master = getMasterFromSession(bean.getIdApoliceSeguro(), true);
    	ItemList listParcelas = getItemsFromSession(master, APOLICE_SEGURO_PARCELA_CONFIG_ALIAS);
    	ItemList listAnexos = getItemsFromSession(master, APOLICE_SEGURO_ANEXO_CONFIG_ALIAS);
    	
    	return getApoliceSeguroService().storeByManterApoliceSeguro(bean, listParcelas, listAnexos); 
    }

    
    /**
     * LMS 6146
     * @return
     */
    public Serializable storeItemParcela(TypedFlatMap parameters){
    	return saveItemInstance( parameters, APOLICE_SEGURO_PARCELA_CONFIG_ALIAS);
    }
    
    public Map findCalculaValorPremio(TypedFlatMap tfm){
    	boolean isGridClick = tfm.getBoolean("isGridClick");
    	Long idApoliceSeguro = tfm.getLong("idApoliceSeguro");
    	
    	MasterEntry master = getMasterFromSession(idApoliceSeguro, true);
    	
    	ItemList listParcelas = getItemsFromSession(master, APOLICE_SEGURO_PARCELA_CONFIG_ALIAS);
    	return apoliceSeguroParcelasService.findCalculaValorPremio(idApoliceSeguro, listParcelas, isGridClick);
    }
    
    
    /**
     * LMS 6146
     * @return
     */
    public Serializable storeAnexos(TypedFlatMap parameters){
    	return saveItemInstance( parameters, APOLICE_SEGURO_ANEXO_CONFIG_ALIAS);
    }
    
	public PessoaService getPessoaService() {
		return pessoaService;
	}
	public void setPessoaService(PessoaService pessoaService) {
		this.pessoaService = pessoaService;
	}
	
	public ApoliceSeguroService getApoliceSeguroService() {
		return (ApoliceSeguroService)getMasterService() ;
	}	
	
	public void setApoliceSeguroService(ApoliceSeguroService apoliceSeguroService) {
		setMasterService(apoliceSeguroService);
	}
	
	@Override
	protected MasterEntryConfig createMasterConfig(MasterDetailFactory masterFactory) {
		
		/**
		 * Declaracao da classe pai
		 */	
		MasterEntryConfig config = masterFactory.createMasterEntryConfig(ApoliceSeguro.class, true);
		
		/**
		 * Esta classe e reponsavel por ordenar a List dos filhos que estao
		 * em memoria de acordo com as regras de negocio
		 */
    	Comparator descComparator = new Comparator() {
			public int compare(Object obj1, Object obj2) {
				ApoliceSeguro apolice1 = (ApoliceSeguro) obj1;
				ApoliceSeguro apolice2 = (ApoliceSeguro) obj2;
				
				if (apolice1.getSegurado() == null) {
					if (apolice2.getSegurado() == null) {
						return 0;
					} else {
						return 1;
					}
				} else {
					if (apolice2.getSegurado() == null) {
						return -1;
					}
				}
				
				return apolice1.getSegurado().getNmPessoa().compareTo(apolice2.getSegurado().getNmPessoa());
			}
    	};
		
    	/**
    	 * Esta instancia é responsavel por carregar os 
    	 * items filhos na sessão a partir do banco de dados.
    	 */
    	ItemListConfig itemInit = new ItemListConfig() {
    		
 
    		/**
    		 * Find paginated do filho
    		 * Passa por este ponto apenas na primeira vez em que a list filha e chamada.
    		 * Apos a primeira vez ela e carregada da memoria
    		 * 
    		 * @param masterId id do pai
    		 * @param parameters todos os parametros vindo da tela pai
    		 */    		
			public List initialize(Long masterId, Map parameters) {	
				return getApoliceSeguroParcelasService().findParcelasByIdApoliceSeguro(masterId);
			}

			/**
			 * Busca rowCount da grid da tela filha
			 * Passa por este ponto apenas na primeira vez em que a list filha e chamada.
    		 * Apos a primeira vez ela e carregada da memoria
			 * 
			 * @param masterId id do pai
			 * @param parameters todos os parametros vindo da tela pai
			 */			
			public Integer getRowCount(Long masterId, Map parameters) {
				
				if (masterId==null) {
					return Integer.valueOf(0);
				}
				
				return Integer.valueOf(getApoliceSeguroParcelasService().getRowCountParcelasByIdApoliceSeguro(masterId));
			}
			
			/**
			 * Chama esta funcao depois de editar um item da grid filho
			 * E retira atributos desnecessarios para o filho
			 * 
			 * @param newBean 
			 * @param oldBean 
			 */
			public void modifyItemValues(Object newBean, Object bean) {
		        ApoliceSeguroParcela parcelaModified = (ApoliceSeguroParcela) newBean;
		        ApoliceSeguroParcela baseParcela = (ApoliceSeguroParcela) bean;
		        
		        baseParcela.setNrParcela(parcelaModified.getNrParcela());
		        baseParcela.setVlParcela(parcelaModified.getVlParcela());
		        baseParcela.setDtVencimento(parcelaModified.getDtVencimento());
		        baseParcela.setTpSituacaoPagamento(parcelaModified.getTpSituacaoPagamento());
		        
			}
			
			/**
			 * Todos os dados a serem carregados na grid pelo form passam antes por este
			 * metodo. Para se fazer uma validacao...
			 * Recomenda-se que o bean em questao seja gerado nesta classe a partir dos
			 * parametros enviados da tela para se evitar um 'ReflectionUtils'
			 * 
			 * @param mapParameter 
			 * @param bean a ser istanciado
			 * @return Object bean instanciado
			 */
			public Object populateNewItemInstance(Map mapParameter, Object bean) {
				TypedFlatMap parameters = (TypedFlatMap) mapParameter;
				ApoliceSeguroParcela apoliceParcela = (ApoliceSeguroParcela) bean;	
				MasterEntry master = getMasterFromSession(getMasterId(parameters), true);
				
		    	ItemList listParcelas = getItemsFromSession(master, APOLICE_SEGURO_PARCELA_CONFIG_ALIAS);
		    	List<ApoliceSeguroParcela> listaParcelasGrid = listParcelas.getItems();
				
		    	for (ApoliceSeguroParcela parcela : listaParcelasGrid) {
		    		
		    		if(parameters.getLong("idApoliceSeguroParcela") == null // inclusão 
		    				&& parameters.getLong("nrParcela").equals(parcela.getNrParcela())) {
		    				throw new BusinessException("uniqueCtViolated");
		    		}
		    		
		    		if(parameters.getLong("idApoliceSeguroParcela") != null // edição
		    				&& !parameters.getLong("idApoliceSeguroParcela").equals(parcela.getIdApoliceSeguroParcela()) // registro diferente do editado  
		    				&& parameters.getLong("nrParcela").equals(parcela.getNrParcela())) {
		    				throw new BusinessException("uniqueCtViolated");
		    		}
		    		
				}

				apoliceParcela.setIdApoliceSeguroParcela(parameters.getLong("idApoliceSeguroParcela"));
		    	apoliceParcela.setNrParcela( parameters.getLong("nrParcela") );
		    	apoliceParcela.setVlParcela( parameters.getBigDecimal("vlParcela") );
		    	apoliceParcela.setDtVencimento( parameters.getYearMonthDay("dtVencimento") );
		    	DomainValue tpSituacaoPagto = getDomainValueService().findDomainValueByValue("DM_TP_SIT_PAGTO_PARCELA_APOLICE",parameters.getString("tpSituacaoPagamento"));
		    	apoliceParcela.setTpSituacaoPagamento(tpSituacaoPagto);
		    	apoliceParcela.setApoliceSeguro((ApoliceSeguro)master.getMaster());
		    	
		    	try {
					
		    		if(Base64Util.decode(parameters.getString("dcComprovante")).length > 0){
		    			apoliceParcela.setDcComprovante(Base64Util.decode(parameters.getString("dcComprovante")));
		    		}
		    		
				} catch (Exception e) {
					log.error(e);
				}
		    	
				return apoliceParcela;
			}			

    	};    	
    	
    	
    	/********************************************************************
    	 * ApoliceAnexo ItemListConfig
    	 ********************************************************************/
    	ItemListConfig apoliceAnexoConfig = new ItemListConfig() {
    		
    		public List initialize(Long masterId, Map parameters) {
    			return apoliceSeguroAnexoService.findAnexosByIdApoliceSeguro(masterId);
    		}
    		
    		public Integer getRowCount(Long masterId, Map parameters) {
				if (masterId==null) {
					return Integer.valueOf(0);
				}
				
				return Integer.valueOf(apoliceSeguroAnexoService.getRowCountAnexosByIdApoliceSeguro(masterId));
    			
			}
    		
			public Map configItemDomainProperties() {
				return null;
			}
			
			public Object populateNewItemInstance(Map mapParameter, Object bean) {
				ApoliceSeguroAnexo anexo = new ApoliceSeguroAnexo();
				TypedFlatMap parameters = (TypedFlatMap) mapParameter;
						
				anexo.setIdApoliceSeguroAnexo(parameters.getLong("idApoliceSeguroAnexo"));
				anexo.setDsAnexo( parameters.getString("dsAnexo"));
		    	
		    	try {
		    		anexo.setDcArquivo(Base64Util.decode(parameters.getString("dcArquivo")));
				} catch (Exception e) {
					log.error(e);
				}
		    	
		    	apoliceSeguroAnexoService.prepareValuesToStore(anexo);
		    	
				return anexo;
			}
    		
			public void modifyItemValues(Object newBean, Object bean) {
				ApoliceSeguroAnexo anexoModified = (ApoliceSeguroAnexo) newBean;
		        ApoliceSeguroAnexo baseAnexo= (ApoliceSeguroAnexo) bean;
		        
		        baseAnexo.setDsAnexo(anexoModified.getDsAnexo());
		        
			}
			
    	};
    	
    	config.addItemConfig(APOLICE_SEGURO_PARCELA_CONFIG_ALIAS, ApoliceSeguroParcela.class, itemInit, descComparator);
    	config.addItemConfig(APOLICE_SEGURO_ANEXO_CONFIG_ALIAS, ApoliceSeguroAnexo.class, apoliceAnexoConfig, descComparator);   
    	
		return config;
	}
	
	/**
     * Geração do relatório excel
     * 
     * Jira LMS-6177
     * 
     * @param parameters
     * @return
     * @throws Exception
     */
    public String executeReport(TypedFlatMap params) throws Exception {
		return this.reportExecutionManager.generateReportLocator(this.apolicesSeguroService, params);
	}
	
	public void clearSessionItens(){
		super.removeMasterFromSession();
	}
	
	public ApoliceSeguroParcelasService getApoliceSeguroParcelasService() {
		return apoliceSeguroParcelasService;
	}
	public void setApoliceSeguroParcelasService(ApoliceSeguroParcelasService apoliceSeguroParcelasService) {
		this.apoliceSeguroParcelasService = apoliceSeguroParcelasService;
	}
	public ApoliceSeguroAnexoService getApoliceSeguroAnexoService() {
		return apoliceSeguroAnexoService;
	}
	public void setApoliceSeguroAnexoService(
			ApoliceSeguroAnexoService apoliceSeguroAnexoService) {
		this.apoliceSeguroAnexoService = apoliceSeguroAnexoService;
	}
	
	/**
	 * LMS-7285 - Lookup para {@link ApoliceSeguro}.
	 * 
	 * @param criteria
	 *            filtro para lookup
	 * @return lista de {@link ApoliceSeguro}
	 */
	@SuppressWarnings("unchecked")
	public List<ApoliceSeguro> findLookup(TypedFlatMap criteria) {
		return getApoliceSeguroService().findLookup(criteria);
	}

}
