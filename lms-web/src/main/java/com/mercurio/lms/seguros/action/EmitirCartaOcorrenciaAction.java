package com.mercurio.lms.seguros.action;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.joda.time.DateTime;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.seguros.model.ProcessoSinistro;
import com.mercurio.lms.seguros.model.SinistroDoctoServico;
import com.mercurio.lms.seguros.model.service.ProcessoSinistroService;
import com.mercurio.lms.seguros.model.service.SinistroDoctoServicoService;
import com.mercurio.lms.vendas.model.EventoPce;
import com.mercurio.lms.vendas.model.OcorrenciaPce;
import com.mercurio.lms.vendas.model.ProcessoPce;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.seguros.emitirCartaOcorrenciaAction"
 */

public class EmitirCartaOcorrenciaAction extends CrudAction {
	
	private ConfiguracoesFacade configuracoesFacade;
	private SinistroDoctoServicoService sinistroDoctoServicoService;
	
	public ConfiguracoesFacade getConfiguracoesFacade() {
		return configuracoesFacade;
	}

	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}

	public void setService(ProcessoSinistroService processoSinistroService){
		this.defaultService = processoSinistroService;
	}
	
	public ProcessoSinistroService getService() {
		return (ProcessoSinistroService) this.defaultService;
	}

	public SinistroDoctoServicoService getSinistroDoctoServicoService() {
		return sinistroDoctoServicoService;
	}

	public void setSinistroDoctoServicoService(
			SinistroDoctoServicoService sinistroDoctoServicoService) {
		this.sinistroDoctoServicoService = sinistroDoctoServicoService;
	}

	/**
	 * Popula as informacoes da grid
	 * 
	 * @param criteria
	 * @return
	 */
	public ResultSetPage findPaginated(TypedFlatMap criteria) {
		
		ResultSetPage resultSetPage = this.getService().findPaginatedSinistroDoctoServico(criteria);
					
		for (Iterator iter = resultSetPage.getList().iterator(); iter.hasNext();) {
			Map result = (Map) iter.next();
			 
			result.put("sgMoedaPrejuizo", result.get("sgMoeda"));
			result.put("dsSimboloMoedaPrejuizo", result.get("dsSimboloMoeda"));
			 
			if ((result.get("dhGeracaoCartaRetificacao")!=null) && (result.get("dhGeracaoCartaOcorrencia")!=null)) {
				
				DateTime dhGeracaoCartaRetificacao = (DateTime) result.get("dhGeracaoCartaRetificacao");
				DateTime dhGeracaoCartaOcorrencia = (DateTime) result.get("dhGeracaoCartaOcorrencia");
				
				if (dhGeracaoCartaRetificacao.getMillis()>=dhGeracaoCartaOcorrencia.getMillis()) {
					result.put("dhCarta", result.get("dhGeracaoCartaRetificacao"));
					result.put("dhEnvio", result.get("dhEnvioEmailRetificacao"));
					result.put("tipoCarta", this.getConfiguracoesFacade().getMensagem("retificacao"));
				} else {
					result.put("dhCarta", result.get("dhGeracaoCartaOcorrencia"));
					result.put("dhEnvio", result.get("dhEnvioEmailOcorrencia"));
					result.put("tipoCarta", this.getConfiguracoesFacade().getMensagem("ocorrencia"));
				}
			} else if (result.get("dhGeracaoCartaRetificacao")!=null){
				result.put("dhCarta", result.get("dhGeracaoCartaRetificacao"));
				result.put("dhEnvio", result.get("dhEnvioEmailRetificacao"));
				result.put("tipoCarta", this.getConfiguracoesFacade().getMensagem("retificacao"));
			} else if (result.get("dhGeracaoCartaOcorrencia")!=null){
				result.put("dhCarta", result.get("dhGeracaoCartaOcorrencia"));
				result.put("dhEnvio", result.get("dhEnvioEmailOcorrencia"));
				result.put("tipoCarta", this.getConfiguracoesFacade().getMensagem("ocorrencia"));
			}
		}
		
		return resultSetPage;
	}
	
	public Integer getRowCount(TypedFlatMap criteria) {
		return this.getService().getRowCountSinistroDoctoServico(criteria);
	}
	
	public List findPaginatedMails(TypedFlatMap criteria) {
		List list = this.getService().findPaginatedEnviarEmail(criteria);
		List result = new ArrayList();
		
		if (list != null && !list.isEmpty()) {

			for (Iterator iter = list.iterator(); iter.hasNext();) {
				Object[] row = (Object[]) iter.next();
				
				TypedFlatMap map = new TypedFlatMap();
				map.put("idPessoa", row[0]);
				map.put("nmPessoa", row[1]);
				map.put("dsEmail", row[2]);
				
				result.add(map);
			}
		}
		
		return result;
	}
	
	public long getRowCountMails(TypedFlatMap criteria){
		long rowCount = 0;
		try{
			rowCount = this.findPaginatedMails(criteria).size();
		}catch(Exception e){}
		return rowCount;
	}
	
    public List findLookupProcessoSinistro(TypedFlatMap tfm) {
    	TypedFlatMap resultData = new TypedFlatMap();
		List result = new ArrayList();
		for (Iterator it = this.getService().findLookup(tfm).iterator(); it.hasNext();) {
			ProcessoSinistro processoSinistro = (ProcessoSinistro)it.next();
			resultData.put("idProcessoSinistro", processoSinistro.getIdProcessoSinistro());
			resultData.put("nrProcessoSinistro", processoSinistro.getNrProcessoSinistro());
			resultData.put("dhSinistro", processoSinistro.getDhSinistro());
			resultData.put("tipoSinistro.dsTipo", processoSinistro.getTipoSinistro().getDsTipo().getValue());
			resultData.put("municipio.nmMunicipio", processoSinistro.getMunicipio().getNmMunicipio());
			resultData.put("municipio.unidadeFederativa.sgUnidadeFederativa", processoSinistro.getMunicipio().getUnidadeFederativa().getSgUnidadeFederativa());
			resultData.put("dsSinistro", processoSinistro.getDsSinistro());
			result.add(resultData);
		}
		return result;
    }
		
	/**
	 * Atualiza a data de geracao da carta de ocorrencia/retificacao...
	 * 
	 * @param criteria
	 */
	public void updateDataGeracaoCarta(TypedFlatMap criteria) {
		List idsSinistroDoctoServico = criteria.getList("idsSinistroDoctoServico");
		this.getService().updateDataGeracaoCarta(idsSinistroDoctoServico, criteria.getDomainValue("tipoCarta").getValue());	
	}
	
	/**
	 * Faz a chamada para a geracao de envio de emails com as cartas de ocorrencias.
	 * @param criteria
	 */
	public void generateEmailCartaOcorrencia(TypedFlatMap criteria) {
		this.getService().generateEmailCartaOcorrencia(criteria);
	}
	
	/**
	 * Faz a validacao do PCE.
	 *  
	 * @param criteria
	 * @return
	 */
	public TypedFlatMap validatePCE(TypedFlatMap criteria) {
		List idsSinistroDoctoServico = new ArrayList();
		List idsDoctoServico = new ArrayList();
		List<SinistroDoctoServico> sinistrosDoctoServico = sinistroDoctoServicoService.findSinistrosDoctoServicoByIdProcessoSinistro(criteria.getLong("idProcessoSinistro"));
		
		if(sinistrosDoctoServico == null || sinistrosDoctoServico.isEmpty()) {
			throw new BusinessException("LMS-22050");
		}
		
		for (SinistroDoctoServico sinistroDoctoServico : sinistrosDoctoServico) {
			idsDoctoServico.add(sinistroDoctoServico.getDoctoServico().getIdDoctoServico());
			idsSinistroDoctoServico.add(sinistroDoctoServico.getIdSinistroDoctoServico());
		}
		
		TypedFlatMap result = this.getService().validatePCE(idsDoctoServico, 
				Long.valueOf(ProcessoPce.ID_PROCESSO_PCE_SINISTRO),
				Long.valueOf(EventoPce.ID_EVENTO_PCE_EMITIR_CARTA_OCORRENCIA), 
				Long.valueOf(OcorrenciaPce.ID_OCORR_PCE_GERAR_CARTA_OCORR_EMIT_CARTA_OCORR)); 
		
		result.put("ids", idsSinistroDoctoServico);
		
		return result;
	}
	
	public TypedFlatMap findClienteByIdsSinistroDoctoServico(TypedFlatMap criteria) {
		return sinistroDoctoServicoService.findClienteByIdsSinistroDoctoServico(criteria);
	}
	
}
