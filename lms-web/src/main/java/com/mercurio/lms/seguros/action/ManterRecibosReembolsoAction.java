package com.mercurio.lms.seguros.action;

import java.io.Serializable;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.masterdetail.ItemList;
import com.mercurio.adsm.framework.model.masterdetail.ItemListConfig;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailAction;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailFactory;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailKey;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntry;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntryConfig;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.Moeda;
import com.mercurio.lms.configuracoes.model.service.MoedaService;
import com.mercurio.lms.contasreceber.model.service.NotaDebitoNacionalService;
import com.mercurio.lms.entrega.model.service.ReciboReembolsoService;
import com.mercurio.lms.expedicao.model.DoctoServico;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.model.service.CtoInternacionalService;
import com.mercurio.lms.expedicao.model.service.DoctoServicoService;
import com.mercurio.lms.expedicao.model.service.NotaFiscalServicoService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.pendencia.model.service.MdaService;
import com.mercurio.lms.seguros.model.ProcessoSinistro;
import com.mercurio.lms.seguros.model.ReciboReembolsoDoctoServico;
import com.mercurio.lms.seguros.model.ReciboReembolsoProcesso;
import com.mercurio.lms.seguros.model.SinistroDoctoServico;
import com.mercurio.lms.seguros.model.service.ProcessoSinistroService;
import com.mercurio.lms.seguros.model.service.ReciboReembolsoDoctoServicoService;
import com.mercurio.lms.seguros.model.service.ReciboReembolsoProcessoService;
import com.mercurio.lms.seguros.model.service.SinistroDoctoServicoService;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.seguros.manterRecibosReembolsoAction"
 */

public class ManterRecibosReembolsoAction extends MasterDetailAction {
	
	private DomainValueService domainValueService;
	private DoctoServicoService doctoServicoService;
	private ConhecimentoService conhecimentoService;
	private CtoInternacionalService ctoInternacionalService;
	private FilialService filialService;
	private ProcessoSinistroService processoSinistroService;
	private ReciboReembolsoDoctoServicoService reciboReembolsoDoctoServicoService;
	private SinistroDoctoServicoService sinistroDoctoServicoService;
	private MoedaService moedaService;
	private ConfiguracoesFacade configuracoesFacade;
	private NotaFiscalServicoService notaFiscalServicoService;
	private NotaDebitoNacionalService notaDebitoNacionalService;
	private ReciboReembolsoService reciboReembolsoService;
	private MdaService mdaService;
	
	
	// Observação Importante:
	// Neste caso, ao modificar o recibo de reembolso, temos alterações na entidade de processo de sinistro, que é uma DF2.
	// Dessa forma, alterações no processo de sinistro necessitam ser refletidas no objeto master da tela de processo de sinistro,
	// para prevenir o erro de Optimistic Locking Failure, por diferença no numero da versão.
	// Ver: Felipe Cuozzo ou Luis Felipe
	private ManterProcessosSinistroAction manterProcessosSinistroAction;
	
	protected MasterEntryConfig createMasterConfig(MasterDetailFactory masterFactory) {
		MasterEntryConfig config = masterFactory.createMasterEntryConfig(ReciboReembolsoProcesso.class);
		Comparator comparator = new Comparator() {
			public int compare(Object obj1, Object obj2) {
				return 0;
			}    		
    	};
    	
    	ItemListConfig itemListConfig = new ItemListConfig() {
    		
    		public List initialize(Long masterId, Map parameters) {
    			if (masterId==null)
    				return new ArrayList();
				return reciboReembolsoDoctoServicoService.findRecibosDoctoByIdReciboProcesso(masterId);
			}
    		
			public Integer getRowCount(Long masterId, Map parameters) {
    			if (masterId==null)
    				return Integer.valueOf(0);
				return reciboReembolsoDoctoServicoService.getRowCountRecibosDoctoByIdReciboProcesso(masterId);
			}
			
			public Map configItemDomainProperties() {
				return null;
			}
			
			public Object populateNewItemInstance(Map parameters, Object bean) {
				TypedFlatMap tfm = (TypedFlatMap) parameters;
				ReciboReembolsoDoctoServico reciboReembolsoDoctoServico = (ReciboReembolsoDoctoServico) bean;
				reciboReembolsoDoctoServico.setIdReciboReembolsoDoctoServ(tfm.getLong("idReciboReembolsoDoctoServ"));
				DoctoServico doctoServico = doctoServicoService.findByIdJoinFilial(tfm.getLong("doctoServico.idDoctoServico"));
				reciboReembolsoDoctoServico.setDoctoServico(doctoServico);
				reciboReembolsoDoctoServico.setVlReembolso(tfm.getBigDecimal("vlReembolso"));
				Moeda moeda = moedaService.findById(tfm.getLong("moeda.idMoeda"));
				reciboReembolsoDoctoServico.setMoeda(moeda);
				ReciboReembolsoProcesso reciboReembolsoProcesso = new ReciboReembolsoProcesso();
				reciboReembolsoProcesso.setIdReciboReembolsoProcesso(tfm.getLong("masterId"));
				reciboReembolsoDoctoServico.setReciboReembolsoProcesso(reciboReembolsoProcesso);
				
				return reciboReembolsoDoctoServico;
			}
			
			public void modifyItemValues(Object newBean, Object oldBean) {
				
				ReciboReembolsoDoctoServico newRecibo = (ReciboReembolsoDoctoServico)newBean;
				ReciboReembolsoDoctoServico oldRecibo = (ReciboReembolsoDoctoServico)oldBean;
				
				oldRecibo.setIdReciboReembolsoDoctoServ(newRecibo.getIdReciboReembolsoDoctoServ());
				oldRecibo.setDoctoServico(newRecibo.getDoctoServico());
				oldRecibo.setVlReembolso(newRecibo.getVlReembolso());
				oldRecibo.setReciboReembolsoProcesso(newRecibo.getReciboReembolsoProcesso());

				// não há permissao para mudar moeda
				// oldRecibo.setMoeda()
		    }				
    	};
		config.addItemConfig("reciboReembolsoDoctoServico", ReciboReembolsoDoctoServico.class, itemListConfig, comparator);    	
		return config;
	}

    public Serializable storeReciboReembolsoProcesso(TypedFlatMap tfm) {

    	Long idProcessoSinistro = tfm.getLong("processoSinistro.idProcessoSinistro");
    	ProcessoSinistro processoSinistro = this.processoSinistroService.findById(idProcessoSinistro);
    	processoSinistroService.validateIsProcessoSinistroFechado(processoSinistro);    	
    	
		MasterEntry master = getMasterFromSession(tfm.getLong("idReciboReembolsoProcesso"), true);
		ReciboReembolsoProcesso reciboReembolsoProcesso = (ReciboReembolsoProcesso) master.getMaster();
		ItemList itens = getItemsFromSession(master, "reciboReembolsoDoctoServico");
		ItemListConfig config = getMasterConfig().getItemListConfig("reciboReembolsoDoctoServico");
		
		BigDecimal vlReembolso = new BigDecimal(0.00);
		
    	if (itens.hasItems()) {    		
        	for(Iterator it = itens.iterator((Long)master.getMasterId(), config); it.hasNext(); ) {    		
        		ReciboReembolsoDoctoServico reciboReembolsoDoctoServico = (ReciboReembolsoDoctoServico)it.next();
        		// somando os valores de reembolso da aba de documentos de servico
        		vlReembolso = vlReembolso.add(reciboReembolsoDoctoServico.getVlReembolso());
        	}
    	} 
    		
		reciboReembolsoProcesso.setVlReembolso(vlReembolso);
    	reciboReembolsoProcesso.setIdReciboReembolsoProcesso(tfm.getLong("idReciboReembolsoProcesso"));
    	reciboReembolsoProcesso.setNrRecibo(tfm.getLong("nrReciboReembolso"));
		Moeda moeda = new Moeda();
		moeda.setIdMoeda(tfm.getLong("moeda.idMoeda"));
		reciboReembolsoProcesso.setMoeda(moeda);
    	reciboReembolsoProcesso.setDtReebolso(tfm.getYearMonthDay("dtEmissao"));
    	reciboReembolsoProcesso.setProcessoSinistro(processoSinistro);
    	
    	//LMS-6155
    	reciboReembolsoProcesso.setVlReembolsoAvulso(tfm.getBigDecimal("vlReembolsoAvulso"));
    	reciboReembolsoProcesso.setObReciboReembolso(tfm.getString("obReciboReembolso"));
    	
    	TypedFlatMap result = new TypedFlatMap();
    	Serializable id = this.getService().storeReciboReembolsoProcesso(reciboReembolsoProcesso, itens);
    	itens.resetItemsState();
    	updateMasterInSession(master);

    	// atualizando o master do processo de sinistro
    	calculaValoresProcessoSinistro(processoSinistro);

    	result.put("idReciboReembolsoProcesso", id);
    	result.put("sgSimboloReembolso", reciboReembolsoProcesso.getMoeda().getSiglaSimbolo());
    	result.put("vlReembolso", reciboReembolsoProcesso.getVlReembolso());
    	
    	return result;
    }
        
    public Serializable saveItemSessao(TypedFlatMap tfm) {
    	validateItemList(tfm);
    	return saveItemInstance(tfm, "reciboReembolsoDoctoServico");    	
    }
    
    private void validateItemList(TypedFlatMap tfm) {

    	// moeda é obrigatório
    	if (tfm.getLong("moeda.idMoeda")==null) {
    		throw new BusinessException("LMS-22016");
    	}
    	
		Long idDoctoServico = tfm.getLong("doctoServico.idDoctoServico");

		// iterando sobre a item list, para impedir documentos duplicados 
		MasterEntry master = getMasterFromSession(getMasterId(tfm), true);
		ItemList itens = getItemsFromSession(master, "reciboReembolsoDoctoServico");
		ItemListConfig config = getMasterConfig().getItemListConfig("reciboReembolsoDoctoServico");
		for (Iterator it = itens.iterator(getMasterId(tfm), tfm, config); it.hasNext(); ) {
			ReciboReembolsoDoctoServico reciboReembolsoDoctoServico = (ReciboReembolsoDoctoServico)it.next();
			
			// primeiro testa se o documento informado já consta na item list
			if (idDoctoServico.equals(reciboReembolsoDoctoServico.getDoctoServico().getIdDoctoServico())) {
				
				// se o item é novo, então dispara a exceção
				// ou então, se o documento de servico já existe noutro item, também dispara a excecao
				if (tfm.getLong("idReciboReembolsoDoctoServ")==null || (!tfm.getLong("idReciboReembolsoDoctoServ").equals(reciboReembolsoDoctoServico.getIdReciboReembolsoDoctoServ()))) {
					throw new BusinessException("LMS-22017");	
				}
			}			
		}
		
		// verifica se o documento de servico faz parte do processo de sinistro
		// e dispara exceção caso o mesmo não faça parte
		
		if (!this.sinistroDoctoServicoService
				.validateDoctoServicoInSinistroDoctoServico(idDoctoServico, tfm.getLong("processoSinistro.idProcessoSinistro"))) {
			
			DoctoServico doctoServico = doctoServicoService.findByIdJoinFilial(idDoctoServico);
			String nrDocumento = doctoServico.getTpDocumentoServico().getDescription().getValue()+" "+doctoServico.getFilialByIdFilialOrigem().getSgFilial()+" "+new DecimalFormat("00000000").format(doctoServico.getNrDoctoServico());  					
    		throw new BusinessException("LMS-22007", new Object[]{nrDocumento});
		}
    }
    
    public TypedFlatMap findItemById(MasterDetailKey key) {
    	TypedFlatMap tfm = new TypedFlatMap();
    	ReciboReembolsoDoctoServico reciboReembolsoDoctoServico = (ReciboReembolsoDoctoServico) findItemById(key, "reciboReembolsoDoctoServico");
    	tfm.put("idReciboReembolsoDoctoServ", reciboReembolsoDoctoServico.getIdReciboReembolsoDoctoServ());
    	tfm.put("doctoServico.idDoctoServico", reciboReembolsoDoctoServico.getDoctoServico().getIdDoctoServico());
    	tfm.put("doctoServico.nrDoctoServico", reciboReembolsoDoctoServico.getDoctoServico().getNrDoctoServico());
    	tfm.put("doctoServico.tpDocumentoServico.value", reciboReembolsoDoctoServico.getDoctoServico().getTpDocumentoServico().getValue());
    	tfm.put("doctoServico.filialByIdFilialOrigem.sgFilial", reciboReembolsoDoctoServico.getDoctoServico().getFilialByIdFilialOrigem().getSgFilial());
    	tfm.put("vlReembolso", reciboReembolsoDoctoServico.getVlReembolso());
    	tfm.put("sgSimboloReembolso", reciboReembolsoDoctoServico.getMoeda().getSiglaSimbolo());
    	tfm.put("moeda.idMoeda", reciboReembolsoDoctoServico.getMoeda().getIdMoeda());
    	return tfm;
    }   

    /***************************************************************************************
     * Finders
     ***************************************************************************************/
    public ResultSetPage findPaginatedRecibos(TypedFlatMap tfm) {    	
    	return getService().findPaginatedCustom(tfm);
    }

    public Integer getRowCountRecibos(TypedFlatMap tfm) {
    	return getService().getRowCountCustom(tfm);
    }
    
    public ResultSetPage findPaginatedItens(TypedFlatMap tfm) {
     	ResultSetPage rsp = super.findPaginatedItemList(tfm, "reciboReembolsoDoctoServico");
    	List<Map> list = new ArrayList<Map>();
    	for (Iterator it = rsp.getList().iterator(); it.hasNext(); ) {
    		ReciboReembolsoDoctoServico reciboReembolsoDoctoServico = (ReciboReembolsoDoctoServico)it.next();
    		Map<String, Object> map = new HashMap<String, Object>(5);    		
    		map.put("idReciboReembolsoDoctoServ", reciboReembolsoDoctoServico.getIdReciboReembolsoDoctoServ());
    		map.put("tpDocumentoServico", reciboReembolsoDoctoServico.getDoctoServico().getTpDocumentoServico().getValue());
    		map.put("nrDocumentoServico", reciboReembolsoDoctoServico.getDoctoServico().getNrDoctoServico());
    		map.put("sgFilialDocumento", reciboReembolsoDoctoServico.getDoctoServico().getFilialByIdFilialOrigem().getSgFilial());
    		map.put("siglaSimboloReembolsado", reciboReembolsoDoctoServico.getMoeda().getSiglaSimbolo());
    		map.put("vlReembolsado", reciboReembolsoDoctoServico.getVlReembolso());
    		map.put("siglaSimboloDocumento", reciboReembolsoDoctoServico.getDoctoServico().getMoeda().getSiglaSimbolo());    		
    		map.put("vlDocumento", reciboReembolsoDoctoServico.getDoctoServico().getVlTotalDocServico());
    		list.add(map);
    	}
    	rsp.setList(list);
    	return rsp; 
    }
    
    public Integer getRowCountItens(TypedFlatMap tfm) {
    	getMasterFromSession(getMasterId(tfm), true);
    	return super.getRowCountItemList(tfm, "reciboReembolsoDoctoServico");
    }

    public TypedFlatMap findById(java.lang.Long id) {
    	ReciboReembolsoProcesso reciboReembolsoProcesso = getService().findById(id);
    	putMasterInSession(reciboReembolsoProcesso);
    	TypedFlatMap tfm = new TypedFlatMap(); 
    	tfm.put("idReciboReembolsoProcesso", reciboReembolsoProcesso.getIdReciboReembolsoProcesso());
    	tfm.put("nrReciboReembolso", reciboReembolsoProcesso.getNrRecibo());
    	tfm.put("dtEmissao", reciboReembolsoProcesso.getDtReebolso());
    	tfm.put("vlReembolso", reciboReembolsoProcesso.getVlReembolso());
    	tfm.put("moeda.idMoeda", reciboReembolsoProcesso.getMoeda().getIdMoeda());
    	tfm.put("vlReembolsoAvulso", reciboReembolsoProcesso.getVlReembolsoAvulso());
    	tfm.put("obReciboReembolso", reciboReembolsoProcesso.getObReciboReembolso());
    	return tfm;
    }
    
    /**
     * Obtém a moeda da sessão para a tela;
     * @return
     */
    public TypedFlatMap getMoedaSessao() {
    	TypedFlatMap tfm = new TypedFlatMap();
    	tfm.put("sgSimboloMoeda", SessionUtils.getMoedaSessao().getSiglaSimbolo());
    	return tfm;
    }
    
    public List findComboMoeda(Map criteria) {
		List<Map> retorno = new ArrayList<Map>();
		List listMoedas = moedaService.findMoedaOrderBySgSimbolo(true);
		for (Iterator iter = listMoedas.iterator(); iter.hasNext();) {
			TypedFlatMap map = new TypedFlatMap();
			Moeda moeda = (Moeda) iter.next();
			map.put("idMoeda", moeda.getIdMoeda());
			map.put("siglaSimbolo", moeda.getSiglaSimbolo());
			retorno.add(map);
		}
		return retorno;
	}
    
    /**
     * LMS-6155
     * 
     * Método utilizado pelo botão "Incluir documentos do processo" da aba Documentos de serviço
     * popula a grid com todos os documentos de serviço que estejam relacionados com o processo de sinistro
     * e que não estejam contidos na grid
     */
    public void incluirDocumentosProcesso(TypedFlatMap parameters) {    	    	
    	
    	MasterEntry master = getMasterFromSession(parameters.getLong("idReciboReembolsoProcesso"), true);
    	ReciboReembolsoProcesso reciboReembolsoProcesso = (ReciboReembolsoProcesso)master.getMaster();   
    	
    	if (parameters.getLong("idMoeda") == null) {
    		throw new BusinessException("LMS-22016");
    	}
    	
    	Moeda moeda = moedaService.findById(parameters.getLong("idMoeda"));
    	reciboReembolsoProcesso.setMoeda(moeda);
    	
		ItemList itens = getItemsFromSession(master, "reciboReembolsoDoctoServico");
		
		List ids = new ArrayList();
		for(Object recibo : itens.getItems()) {
			ReciboReembolsoDoctoServico reciboReembolsoDoctoServico = (ReciboReembolsoDoctoServico) recibo;
			ids.add(reciboReembolsoDoctoServico.getDoctoServico().getIdDoctoServico());
		}
		
		List<SinistroDoctoServico> listaSinistros = sinistroDoctoServicoService.findSinistroDoctoServicoByIdProcessoSinistroAndListIdsDoctoServico(parameters.getLong("idProcessoSinistro"), ids);
		
		if(!listaSinistros.isEmpty()) {			
			for (SinistroDoctoServico sinistroDoctoServico : listaSinistros) {				
				TypedFlatMap tfm = new TypedFlatMap();
				
				tfm.put("doctoServico.idDoctoServico", sinistroDoctoServico.getDoctoServico().getIdDoctoServico());				
				tfm.put("masterId", master.getMaster() == null ? null : String.valueOf(master.getMasterId()));
				tfm.put("moeda.idMoeda", reciboReembolsoProcesso.getMoeda().getIdMoeda());
				tfm.put("vlReembolso", sinistroDoctoServico.getVlPrejuizo());			
				tfm.put("processoSinistro.idProcessoSinistro", parameters.getLong("idProcessoSinistro"));
				validateItemList(tfm);
				saveItemInstance(tfm, "reciboReembolsoDoctoServico");
			}
		}
    }
    
    /***************************************************************************************
     * Documento Servico Methods
     ***************************************************************************************/
        
    /**
     * LMS-6155
	 * Método que carrega a combo de doctoServico
	 * 
	 * @param criteria
	 * @return List contendo os tipos de doctoServico
	 */
	public List findTpDocumentoServico(Map criteria) {
		String tpDocFat = (String)configuracoesFacade.getValorParametro("TP_DOCTO_SEG");

		String[] dm = tpDocFat.split(";");
        List dominiosValidos = Arrays.asList(dm);
	    return domainValueService.findByDomainNameAndValues("DM_TIPO_DOCUMENTO_SERVICO", dominiosValidos);
	}
	
	/**
	 * LMS-6155
     * Busca as filiais para a lookup de documento de serviço
     * @param map sgFilial informado na lookup de filial
     * @return Lista de filiais
     */
    public List findLookupFilial(TypedFlatMap map){
		return filialService.findLookup(map);
	}
    
    public List findLookupFilialByDocumentoServico(Map criteria) {
    	List list = filialService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		Filial filial = (Filial)iter.next();
    		TypedFlatMap typedFlatMap = new TypedFlatMap();
    		typedFlatMap.put("idFilial", filial.getIdFilial());
    		typedFlatMap.put("sgFilial", filial.getSgFilial());
    		typedFlatMap.put("pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
    		retorno.add(typedFlatMap);
    	}
    	return retorno;
    }
    
    public List findLookupServiceDocumentFilialCTR(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }

    public List findLookupServiceDocumentFilialCRT(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }

    public List findLookupServiceDocumentFilialNFS(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }
    
    public List findLookupServiceDocumentFilialNFT(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }
    
    public List findLookupServiceDocumentFilialNDN(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }

    public List findLookupServiceDocumentFilialRRE(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }
    
    public List findLookupServiceDocumentFilialMDA(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }
    
	public List findLookupServiceDocumentFilialNTE(Map criteria) {
		return findLookupFilialByDocumentoServico(criteria);
	}

	public List findLookupServiceDocumentFilialNSE(Map criteria) {
		return findLookupFilialByDocumentoServico(criteria);
	}

	public List findLookupServiceDocumentFilialCTE(Map criteria) {
		return findLookupFilialByDocumentoServico(criteria);
	}

    /**
     * Busca os dados do conhecimento
     * @param tfm Critérios de pesquisa
     * @return Lista de Conhecimentos (CTRC)
     */
    public List findLookupServiceDocumentNumberCTR(Map map) {
        return this.conhecimentoService.findLookup(map);
    }

    /**
     * Busca os dados do conhecimento
     * @param map Critérios de pesquisa
     * @return Lista de Conhecimentos (CRT)
     */
    public List findLookupServiceDocumentNumberCRT(Map map) {
       return this.ctoInternacionalService.findLookup(map);
    }

    /**
     * Busca os dados do conhecimento
     * @param tfm Critérios de pesquisa
     * @return Lista de Conhecimentos (NFS)
     */
    public List findLookupServiceDocumentNumberNFS(Map map) {
       return this.notaFiscalServicoService.findLookup(map);
    }
    
    /**
     * Busca os dados do conhecimento
     * @param tfm Critérios de pesquisa
     * @return Lista de Conhecimentos (NFT)
     */
    public List findLookupServiceDocumentNumberNFT(Map map) {
       return this.conhecimentoService.findLookup(map);
    }
    
    /**
     * Busca os dados do conhecimento
     * @param tfm Critérios de pesquisa
     * @return Lista de Conhecimentos (NDN)
     */
    public List findLookupServiceDocumentNumberNDN(Map map) {
       return this.notaDebitoNacionalService.findLookup(map);
    }
    
    /**
     * Busca os dados do conhecimento
     * @param tfm Critérios de pesquisa
     * @return Lista de Conhecimentos (RRE)
     */
    public List findLookupServiceDocumentNumberRRE(Map map) {
       return this.reciboReembolsoService.findLookup(map);
    }
    
    /**
     * Busca os dados do conhecimento
     * @param tfm Critérios de pesquisa
     * @return Lista de Conhecimentos (NDN)
     */
    public List findLookupServiceDocumentNumberMDA(Map map) {
       return this.mdaService.findLookup(map);
    }    
    
    /**
    * Busca os dados do conhecimento
    * @param tfm Critérios de pesquisa
    * @return Lista de Conhecimentos (CTE)
    */
   public List findLookupServiceDocumentNumberCTE(Map map) {
      return this.conhecimentoService.findLookup(map);
   }
    
    /**
    * Busca os dados do conhecimento
    * @param tfm Critérios de pesquisa
    * @return Lista de Conhecimentos (CTE)
    */
   public List findLookupServiceDocumentNumberNTE(Map map) {
      return this.conhecimentoService.findLookup(map);
   }
       
    /***************************************************************************************
     * Removers :)
     ***************************************************************************************/
    public void removeById(java.lang.Long id) {
    	// obtendo dados do processo de sinistro
		ReciboReembolsoProcesso reciboReembolsoProcesso = getService().findById(id);
		Long idProcessoSinistro = reciboReembolsoProcesso.getProcessoSinistro().getIdProcessoSinistro();
		ProcessoSinistro processoSinistro = processoSinistroService.findById(idProcessoSinistro);
		processoSinistroService.validateIsProcessoSinistroFechado(processoSinistro);
		
		// removendo o elemento
    	List<Long> list = new ArrayList<Long>(1);
    	list.add(id);
        getService().removeByIdsCustom(list);
        
    	// atualizando dados do master de processo de sinistro
    	
    	calculaValoresProcessoSinistro(processoSinistro);
    }

    /**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	// obtendo dados do processo de sinistro
		Long idReciboReembolsoProcesso = (Long)ids.get(0);
		ReciboReembolsoProcesso reciboReembolsoProcesso = getService().findById(idReciboReembolsoProcesso);
		Long idProcessoSinistro = reciboReembolsoProcesso.getProcessoSinistro().getIdProcessoSinistro();
		ProcessoSinistro processoSinistro = processoSinistroService.findById(idProcessoSinistro);
		processoSinistroService.validateIsProcessoSinistroFechado(processoSinistro);
		
		// removendo os elementos
    	getService().removeByIdsCustom(ids);
    	
    	// atualizando dados do master de processo de sinistro
    	
    	calculaValoresProcessoSinistro(processoSinistro);
    }
    
    /**
     * Atualiza valores do processo de sinistro de acordo com os valores dos recibos de reembolso.
     * Atualiza o master da tela de processo de sinistro, para a prevenção de erro de versionamento.
     * @param processoSinistro
     */
    public void calculaValoresProcessoSinistro(ProcessoSinistro processoSinistro) {
    	// atualizando o processo de sinistro 
    	
    	processoSinistroService.calculaVlDifeIndenizadoReembolsado(processoSinistro);
    	processoSinistroService.store(processoSinistro);
    	
    	// populando dados a atualizar no master de processo de sinistro
    	TypedFlatMap dadosVersao = new TypedFlatMap();
    	
    	// atualizando dados no master de processo de sinistro
    	manterProcessosSinistroAction.updateDadosVersao(processoSinistro.getIdProcessoSinistro(), processoSinistro.getVersao(), dadosVersao);    	
    }

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeItens(List ids) {
    	super.removeItemByIds(ids, "reciboReembolsoDoctoServico");
    }

    /***************************************************************************************
     * Getters 'n Setters
     ***************************************************************************************/
    public void setService(ReciboReembolsoProcessoService reciboReembolsoProcessoService) {
    	super.setMasterService(reciboReembolsoProcessoService);
    }
    
    private ReciboReembolsoProcessoService getService() {
    	return (ReciboReembolsoProcessoService) super.getMasterService();
    }

	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}

	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
	}

	public void setCtoInternacionalService(
			CtoInternacionalService ctoInternacionalService) {
		this.ctoInternacionalService = ctoInternacionalService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public void setProcessoSinistroService(
			ProcessoSinistroService processoSinistroService) {
		this.processoSinistroService = processoSinistroService;
	}

	public void setReciboReembolsoDoctoServicoService(
			ReciboReembolsoDoctoServicoService reciboReembolsoDoctoServicoService) {
		this.reciboReembolsoDoctoServicoService = reciboReembolsoDoctoServicoService;
	}

	public void setDoctoServicoService(DoctoServicoService doctoServicoService) {
		this.doctoServicoService = doctoServicoService;
	}

	public SinistroDoctoServicoService getSinistroDoctoServicoService() {
		return sinistroDoctoServicoService;
	}

	public void setSinistroDoctoServicoService(
			SinistroDoctoServicoService sinistroDoctoServicoService) {
		this.sinistroDoctoServicoService = sinistroDoctoServicoService;
	}

	public void setMoedaService(MoedaService moedaService) {
		this.moedaService = moedaService;
	}

	public void setManterProcessosSinistroAction(
			ManterProcessosSinistroAction manterProcessosSinistroAction) {
		this.manterProcessosSinistroAction = manterProcessosSinistroAction;
	}
	
	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}
	
	public void setNotaFiscalServicoService(NotaFiscalServicoService notaFiscalServicoService){
		this.notaFiscalServicoService = notaFiscalServicoService;
	}
	
	public void setNotaDebitoNacionalService(NotaDebitoNacionalService notaDebitoNacionalService){
		this.notaDebitoNacionalService = notaDebitoNacionalService;
	}
	
	public void setReciboReembolsoService(ReciboReembolsoService reciboReembolsoService){
		this.reciboReembolsoService = reciboReembolsoService;
	}
	
	public void setMdaService(MdaService mdaService){
		this.mdaService = mdaService;
	}

}
