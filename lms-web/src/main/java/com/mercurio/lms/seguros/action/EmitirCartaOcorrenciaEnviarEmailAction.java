package com.mercurio.lms.seguros.action;

import java.io.Serializable;
import java.util.Comparator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.masterdetail.ItemListConfig;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailAction;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailFactory;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailKey;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntryConfig;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.seguros.model.ProcessoSinistro;
import com.mercurio.lms.seguros.model.service.ProcessoSinistroService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.seguros.emitirCartaOcorrenciaEnviarEmailAction"
 */

public class EmitirCartaOcorrenciaEnviarEmailAction extends MasterDetailAction {
	
	/**
	 * Declaração serviço principal da Action.
	 * 
	 * @param pedidoColetaService
	 */
	public ProcessoSinistroService getProcessoSinistroService() {
		return (ProcessoSinistroService) super.getMasterService();
	}	
	
	public void setProcessoSinistroService(ProcessoSinistroService processoSinistroService) {
		this.setMasterService(processoSinistroService);
	}

	
	//################################
	// Regras de negocio
	//################################
	
	/**
	 * Atualiza a data de geracao da carta de ocorrencia/retificacao...
	 * 
	 * @param criteria
	 */
	public void updateDataGeracaoCarta(TypedFlatMap criteria) {
		List idsSinistroDoctoServico = criteria.getList("idsSinistroDoctoServico");
		this.getProcessoSinistroService().updateDataGeracaoCarta(idsSinistroDoctoServico, criteria.getDomainValue("tipoCarta").getValue());	
	}
	
	/**
	 * Chamada para a rotina que ira gerar o e-mail de carta ocorrencia.
	 * 
	 * @param criteria
	 */
	public void generateEmailCartaOcorrencia(TypedFlatMap criteria) {
		this.getProcessoSinistroService().generateEmailCartaOcorrencia(criteria);
	}
	
    //####################################
    // Regras de DF2
    //####################################

	/**
     * Faz o findPaginated do filho
     * Possui uma chamada 'interna' para o findPaginated(initialize) 
     * contido dentro do 'createMasterConfig'
     * 
     * @param parameters
     * @return
     */
    public ResultSetPage findPaginatedPessoa(TypedFlatMap criteria) {
    	ResultSetPage result = findPaginatedItemList(criteria, "pessoa");
    	return result;
    }
    
    public Integer getRowCountPessoa(Map parameters){
    	return getRowCountItemList(parameters, "pessoa");
    }
    
    public Object findByIdPessoa(MasterDetailKey key) {
    	Pessoa pessoa = (Pessoa)findItemById(key, "pessoa");
    	return pessoa;
    }
    
    public Serializable savePessoa(TypedFlatMap parameters) {   	
    	return saveItemInstance(parameters, "pessoa");
    }
    
    public void removeByIdsPessoa(List ids) {
    	super.removeItemByIds(ids, "pessoa");
    }

	protected MasterEntryConfig createMasterConfig(MasterDetailFactory masterFactory) { 
		
		//Declaracao da classe pai
		MasterEntryConfig config = masterFactory.createMasterEntryConfig(ProcessoSinistro.class);

		/*
		 * Esta classe e reponsavel por ordenar a List dos filhos que estao
		 * em memoria de acordo com as regras de negocio
		 */
    	Comparator descComparator = new Comparator() {
			public int compare(Object obj1, Object obj2) {
				Pessoa pessoa1 = (Pessoa)obj1;
				Pessoa pessoa2 = (Pessoa)obj2;
        		return pessoa1.getNmPessoa().compareTo(pessoa2.getNmPessoa());  		
			}    		
    	};
    	    	
    	/*
    	 * Esta instancia é responsavel por carregar os 
    	 * items filhos na sessão a partir do banco de dados.
    	 */
    	ItemListConfig itemInit = new ItemListConfig() {
 
    		/**
    		 * Find paginated do filho
    		 * Passa por este ponto apenas na primeira vez em que a list filha e chamada.
    		 * Apos a primeira vez ela e carregada da memoria
    		 * 
    		 *  @param masterId id do pai
    		 *  @param parameters todos os parametros vindo da tela pai
    		 */
			public List initialize(Long masterId, Map parameters) {
				return null;
			}
			 
			/**
			 * Busca rowCount da grid da tela filha
			 * Passa por este ponto apenas na primeira vez em que a list filha e chamada.
    		 * Apos a primeira vez ela e carregada da memoria
			 * 
			 * @param masterId id do pai
			 */
			public Integer getRowCount(Long masterId, Map parameters) {
				//TODO: Gerar ???
				return Integer.valueOf(0);
			}			

			/**
			 * Todos os dados a serem carregados na grid pelo form passam antes por este
			 * metodo. Para se fazer uma validacao...
			 * Recomenda-se que o bean em questao seja gerado nesta classe a partir dos
			 * parametros enviados da tela para se evitar um 'ReflectionUtils'
			 * 
			 * @param parameters 
			 * @param bean a ser istanciado
			 * @return Object bean instanciado
			 */
			public Object populateNewItemInstance(Map parameters, Object object) {
				//TODO: Desenvolver este trecho... 
				return new Pessoa();
			}
    	};
    	//Seta as configuracoes do filho...
		config.addItemConfig("pessoa", Pessoa.class, itemInit, descComparator);
		return config;
	}
}
