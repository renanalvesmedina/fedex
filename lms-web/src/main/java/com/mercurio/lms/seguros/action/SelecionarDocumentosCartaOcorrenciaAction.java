package com.mercurio.lms.seguros.action;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.joda.time.DateTime;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.util.FilterList;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.service.PreManifestoDocumentoService;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.entrega.model.ManifestoEntrega;
import com.mercurio.lms.entrega.model.service.ManifestoEntregaService;
import com.mercurio.lms.entrega.model.service.ReciboReembolsoService;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.model.service.CtoInternacionalService;
import com.mercurio.lms.expedicao.model.service.DoctoServicoService;
import com.mercurio.lms.expedicao.model.service.ManifestoInternacionalService;
import com.mercurio.lms.expedicao.model.service.ManifestoViagemNacionalService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.pendencia.model.service.MdaService;
import com.mercurio.lms.seguros.model.ProcessoSinistro;
import com.mercurio.lms.seguros.model.service.ProcessoSinistroService;
import com.mercurio.lms.vendas.model.service.ClienteService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir. O valor
 * do <code>id</code> informado abaixo deve ser utilizado para referenciar este
 * serviço.
 * 
 * @spring.bean id="lms.seguros.selecionarDocumentosCartaOcorrenciaAction"
 */
public class SelecionarDocumentosCartaOcorrenciaAction extends CrudAction {
	private ConfiguracoesFacade configuracoesFacade;
	private ManifestoEntregaService manifestoEntregaService;
	private ManifestoViagemNacionalService manifestoViagemNacionalService;
	private ManifestoInternacionalService manifestoInternacionalService;
	private ClienteService clienteService;
	private FilialService filialService;
	private ConhecimentoService conhecimentoService;
	private DomainValueService domainValueService;
	private CtoInternacionalService ctoInternacionalService; 
	private MdaService mdaService;
	private ReciboReembolsoService reciboReembolsoService;
	private PreManifestoDocumentoService preManifestoDocumentoService;
	private DoctoServicoService doctoServicoService;
	
	public List findClienteLookup(Map criteria) {
		return this.getClienteService().findLookup(criteria);
	}

	public List findLookupFilial(Map criteria) {
		return this.getFilialService().findLookup(criteria);
	}
	
	/**
	 * Busca a filial baseado no documento de serviço
	 * 
	 * @param criteria
	 * @return
	 */
	public List findLookupFilialByDocumentoServico(Map criteria) {
		FilterList filter = new FilterList(getFilialService().findLookup(criteria)) {
			@Override
			public Map filterItem(Object item) {
				Filial filial = (Filial) item;
				TypedFlatMap typedFlatMap = new TypedFlatMap();
				typedFlatMap.put("idFilial", filial.getIdFilial());
				typedFlatMap.put("sgFilial", filial.getSgFilial());
				return typedFlatMap;
	}
		};
		return (List) filter.doFilter();
	}

	public List findLookupFilialByManifesto(Map criteria) {
		List list = filialService.findLookup(criteria);
		List retorno = new ArrayList();
		for (Iterator iter = list.iterator(); iter.hasNext();) {
			Filial filial = (Filial) iter.next();
			TypedFlatMap typedFlatMap = new TypedFlatMap();
			typedFlatMap.put("idFilial", filial.getIdFilial());
			typedFlatMap.put("sgFilial", filial.getSgFilial());
			typedFlatMap.put("pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
			retorno.add(typedFlatMap);
		}
		return retorno;
	}

	public List findLookupManifestoDocumentFilialEN(Map criteria) {
		return findLookupFilialByManifesto(criteria);
	}

	public List findLookupManifestoDocumentFilialVI(Map criteria) {
		return findLookupFilialByManifesto(criteria);
	}

	public List findLookupManifestoDocumentFilialVN(Map criteria) {
		return findLookupFilialByManifesto(criteria);
	}

	public List findLookupManifestoDocumentNumberEN(TypedFlatMap criteria) {
		criteria.put("manifesto.tpManifesto", "E");
		List list = manifestoEntregaService.findLookupByTagManifesto(criteria);
		List retorno = new ArrayList();
		for (Iterator iter = list.iterator(); iter.hasNext();) {
			ManifestoEntrega manifestoEntrega = (ManifestoEntrega) iter.next();
			TypedFlatMap typedFlatMap = new TypedFlatMap();
			typedFlatMap.put("idManifestoEntrega", manifestoEntrega.getIdManifestoEntrega());
			typedFlatMap.put("nrManifestoEntrega", manifestoEntrega.getNrManifestoEntrega());
			typedFlatMap.put("idFilialManifesto", manifestoEntrega.getManifesto().getFilialByIdFilialOrigem().getIdFilial());
			typedFlatMap.put("sgFilialManifesto", manifestoEntrega.getManifesto().getFilialByIdFilialOrigem().getSgFilial());
			typedFlatMap.put("nmFantasiaFilialManifesto", manifestoEntrega.getManifesto().getFilialByIdFilialOrigem().getPessoa().getNmFantasia());
			retorno.add(typedFlatMap);
	}
		return retorno;
	}

	public List findLookupManifestoDocumentNumberVI(Map criteria) {
		List list = manifestoInternacionalService.findLookup(criteria);
		return list;
	}

	public List findLookupManifestoDocumentNumberVN(Map criteria) {
		List list = manifestoViagemNacionalService.findLookup(criteria);
		return list;
	}

	public List findLookupServiceDocumentFilialCRT(Map criteria) {
		return findLookupFilialByDocumentoServico(criteria);
	}

	public List findLookupServiceDocumentFilialCTE(Map criteria) {
		return findLookupFilialByDocumentoServico(criteria);
	}

	public List findLookupServiceDocumentFilialCTR(Map criteria) {
		return findLookupFilialByDocumentoServico(criteria);
	}

	public List findLookupServiceDocumentFilialMDA(Map criteria) {
		return findLookupFilialByDocumentoServico(criteria);
	}

	public List findLookupServiceDocumentFilialNFT(Map criteria) {
		return findLookupFilialByDocumentoServico(criteria);
	}

	public List findLookupServiceDocumentFilialNTE(Map criteria) {
		return findLookupFilialByDocumentoServico(criteria);
	}
	
	public List findLookupServiceDocumentFilialRRE(Map criteria) {
		return findLookupFilialByDocumentoServico(criteria);
	}

	public List findLookupServiceDocumentNumberCRT(Map criteria) {
		return getCtoInternacionalService().findLookup(criteria);
	}

	public List findLookupServiceDocumentNumberCTE(Map criteria) {
		return getConhecimentoService().findLookup(criteria);
	}

	public List findLookupServiceDocumentNumberNTE(Map criteria) {
		return getCtoInternacionalService().findLookup(criteria);
	}

	public List findLookupServiceDocumentNumberCTR(Map criteria) {
		return getConhecimentoService().findLookup(criteria);
	}

	public List findLookupServiceDocumentNumberMDA(Map criteria) {
		return getMdaService().findLookup(criteria);
	}

	public List findLookupServiceDocumentNumberNFT(Map criteria) {
		return getConhecimentoService().findLookup(criteria);
	}

	public List findLookupServiceDocumentNumberRRE(Map criteria) {
		return getReciboReembolsoService().findLookup(criteria);
	}
	
	public List findLookupServiceNotaFiscalTranporte(Map criteria) {
		return getConhecimentoService().findLookup(criteria);
	}

	/**
	 * Popula as informacoes da grid
	 * 
	 * @param criteria
	 * @return
	 */
	public ResultSetPage findPaginated(TypedFlatMap criteria) {
		ResultSetPage resultSetPage = this.getService().findPaginatedSelecionarDocumentos(criteria);
		if (resultSetPage!=null) {
			for (Iterator iter = resultSetPage.getList().iterator(); iter.hasNext();) {
				Map result = (Map) iter.next();
				result.put("sgMoedaPrejuizo", result.get("sgMoeda"));
				result.put("dsSimboloMoedaPrejuizo", result.get("dsSimboloMoeda"));
				if (result.get("dhGeracaoCartaRetificacao") != null && result.get("dhGeracaoCartaOcorrencia") != null) {
					DateTime dhGeracaoCartaRetificacao = (DateTime) result.get("dhGeracaoCartaRetificacao");
					DateTime dhGeracaoCartaOcorrencia = (DateTime) result.get("dhGeracaoCartaOcorrencia");
					if (dhGeracaoCartaRetificacao.getMillis()>=dhGeracaoCartaOcorrencia.getMillis()) {
						result.put("dhCarta", result.get("dhGeracaoCartaRetificacao"));
						result.put("dhEnvio", result.get("dhEnvioEmailRetificacao"));
						result.put("tipoCarta", this.getConfiguracoesFacade().getMensagem("retificacao"));
					}
					else {
						result.put("dhCarta", result.get("dhGeracaoCartaOcorrencia"));
						result.put("dhEnvio", result.get("dhEnvioEmailOcorrencia"));
						result.put("tipoCarta", this.getConfiguracoesFacade().getMensagem("ocorrencia"));
					}
				}
				else if (result.get("dhGeracaoCartaRetificacao") != null) {
					result.put("dhCarta", result.get("dhGeracaoCartaRetificacao"));
					result.put("dhEnvio", result.get("dhEnvioEmailRetificacao"));
					result.put("tipoCarta", this.getConfiguracoesFacade().getMensagem("retificacao"));
				}
				else if (result.get("dhGeracaoCartaOcorrencia") != null) {
					result.put("dhCarta", result.get("dhGeracaoCartaOcorrencia"));
					result.put("dhEnvio", result.get("dhEnvioEmailOcorrencia"));
					result.put("tipoCarta", this.getConfiguracoesFacade().getMensagem("ocorrencia"));
				}
			}
		}
		return resultSetPage;
	}
	
	public List findProcessoSinistro(TypedFlatMap criteria) {
		List result =  this.getService().findLookup(criteria);
		if (result.size()>0) {
			ProcessoSinistro processoSinistro = (ProcessoSinistro) result.get(0);
			TypedFlatMap resultData = new TypedFlatMap();
			resultData.put("idProcessoSinistro", processoSinistro.getIdProcessoSinistro());
			resultData.put("nrProcessoSinistro", processoSinistro.getNrProcessoSinistro());
			resultData.put("idProcessoSinistro", processoSinistro.getIdProcessoSinistro());
			resultData.put("dhSinistro", processoSinistro.getDhSinistro());
			resultData.put("tipoSinistro.dsTipo", processoSinistro.getTipoSinistro().getDsTipo().getValue());
			resultData.put("municipio.nmMunicipio", processoSinistro.getMunicipio().getNmMunicipio());
			resultData.put("municipio.unidadeFederativa.sgUnidadeFederativa", processoSinistro.getMunicipio().getUnidadeFederativa().getSgUnidadeFederativa());
			resultData.put("dsSinistro", processoSinistro.getDsSinistro());
			result.clear();
			result.add(resultData);
		}
		return result;
	}
	
	/**
	 * Método que popula a combo de tipos de documento apenas com CTR, CRT, MDA.
	 * 
	 * @param criteria
	 * @return List
	 */
	public List findTipoDocumentoServico(Map criteria) {
		List dominiosValidos = new ArrayList();
		dominiosValidos.add("CTR");
		dominiosValidos.add("CRT");
		dominiosValidos.add("MDA");
		dominiosValidos.add("NTE");
		dominiosValidos.add("CTE");
		List retorno = getDomainValueService().findByDomainNameAndValues("DM_TIPO_DOCUMENTO_SERVICO", dominiosValidos);
		return retorno;
    }
    
    public List findTipoManifesto(Map criteria) {
    	List dominiosValidos = new ArrayList();
    	dominiosValidos.add("EN");
    	dominiosValidos.add("VN");
    	dominiosValidos.add("VI");
    	List retorno = domainValueService.findByDomainNameAndValues("DM_TAG_MANIFESTO", dominiosValidos);
    	return retorno;
    }

	// ###############################
	// Metodos de negocio
	// ###############################
	public ClienteService getClienteService() {
		return clienteService;
    	}

	public ConfiguracoesFacade getConfiguracoesFacade() {
		return configuracoesFacade;
    }
    
	public ConhecimentoService getConhecimentoService() {
		return conhecimentoService;
     	}

	// ################################
	// Metodos para a tag manifest
	// ################################
	public CtoInternacionalService getCtoInternacionalService() {
		return ctoInternacionalService;
     }

	public DoctoServicoService getDoctoServicoService() {
		return doctoServicoService;
    }

	public DomainValueService getDomainValueService() {
		return domainValueService;
    }
    
	public FilialService getFilialService() {
		return filialService;
	}

	public ManifestoEntregaService getManifestoEntregaService() {
		return manifestoEntregaService;
	}

	public ManifestoInternacionalService getManifestoInternacionalService() {
		return manifestoInternacionalService;
	}

	public ManifestoViagemNacionalService getManifestoViagemNacionalService() {
		return manifestoViagemNacionalService;
	}

	public MdaService getMdaService() {
		return mdaService;
	}

    //################################
    // Metodos para a tag documents
    //################################
	public PreManifestoDocumentoService getPreManifestoDocumentoService() {
		return preManifestoDocumentoService;
	}
    
	public ReciboReembolsoService getReciboReembolsoService() {
		return reciboReembolsoService;
    }
	
	public Integer getRowCount(TypedFlatMap criteria) {
		return this.getService().getRowCountSelecionarDocumentos(criteria);
			}
    	
	public ProcessoSinistroService getService() {
		return (ProcessoSinistroService) this.defaultService;
    }
    
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
    }
    
	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
     }
    
	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
    }
    
	public void setCtoInternacionalService(CtoInternacionalService ctoInternacionalService) {
		this.ctoInternacionalService = ctoInternacionalService;
     }
     
	public void setDoctoServicoService(DoctoServicoService doctoServicoService) {
		this.doctoServicoService = doctoServicoService;
     }
     
	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
     }
     
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
     }
     
	public void setManifestoEntregaService(ManifestoEntregaService manifestoEntregaService) {
		this.manifestoEntregaService = manifestoEntregaService;
     }
     
	public void setManifestoInternacionalService(ManifestoInternacionalService manifestoInternacionalService) {
		this.manifestoInternacionalService = manifestoInternacionalService;
      }
      
	public void setManifestoViagemNacionalService(ManifestoViagemNacionalService manifestoViagemNacionalService) {
		this.manifestoViagemNacionalService = manifestoViagemNacionalService;
      }
     
	public void setMdaService(MdaService mdaService) {
		this.mdaService = mdaService;
     }
     
     //###############################
     // Objetos da tela
     //###############################
	public void setPreManifestoDocumentoService(PreManifestoDocumentoService preManifestoDocumentoService) {
		this.preManifestoDocumentoService = preManifestoDocumentoService;
     }
     
	public void setReciboReembolsoService(ReciboReembolsoService reciboReembolsoService) {
		this.reciboReembolsoService = reciboReembolsoService;
     }
     
	public void setService(ProcessoSinistroService processoSinistroService) {
		this.defaultService = processoSinistroService;
     }
}
