package com.mercurio.lms.seguros.action;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.report.ReportActionSupport;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.service.ControleCargaService;
import com.mercurio.lms.carregamento.model.service.ManifestoService;
import com.mercurio.lms.configuracoes.model.service.TipoServicoService;
import com.mercurio.lms.contratacaoveiculos.model.MeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteService;
import com.mercurio.lms.expedicao.model.NaturezaProduto;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.model.service.ManifestoInternacionalService;
import com.mercurio.lms.expedicao.model.service.ManifestoViagemNacionalService;
import com.mercurio.lms.expedicao.model.service.NaturezaProdutoService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.AeroportoService;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.MunicipioService;
import com.mercurio.lms.municipios.model.service.RegionalService;
import com.mercurio.lms.municipios.model.service.RodoviaService;
import com.mercurio.lms.municipios.model.service.RotaService;
import com.mercurio.lms.municipios.model.service.UnidadeFederativaService;
import com.mercurio.lms.seguros.model.ProcessoSinistro;
import com.mercurio.lms.seguros.model.TipoSeguro;
import com.mercurio.lms.seguros.model.TipoSinistro;
import com.mercurio.lms.seguros.model.service.ProcessoSinistroService;
import com.mercurio.lms.seguros.model.service.ReguladoraSeguroService;
import com.mercurio.lms.seguros.model.service.TipoSeguroService;
import com.mercurio.lms.seguros.model.service.TipoSinistroService;
import com.mercurio.lms.seguros.report.EmitirRelatorioProcessoSinistroDetalhadoService;
import com.mercurio.lms.seguros.report.EmitirRelatorioProcessoSinistroResumidoService;
import com.mercurio.lms.util.PessoaUtils;
import com.mercurio.lms.vendas.model.service.ClienteService;
import com.mercurio.lms.vendas.model.service.GrupoEconomicoService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.seguros.emitirRelatorioProcessoSinistroAction"
 */

public class EmitirRelatorioProcessoSinistroAction extends ReportActionSupport {
	
	private AeroportoService aeroportoService;
	private ClienteService clienteService;
	private ConhecimentoService conhecimentoService;
	private ControleCargaService controleCargaService;
	private DomainValueService domainValueService;
	private FilialService filialService;
	private GrupoEconomicoService grupoEconomicoService;
	private ManifestoService manifestoService;
	private ManifestoInternacionalService manifestoInternacionalService;
	private ManifestoViagemNacionalService manifestoViagemNacionalService;
	private MeioTransporteService meioTransporteService;
	private MunicipioService municipioService;
	private NaturezaProdutoService naturezaProdutoService;
	private ProcessoSinistroService processoSinistroService;
	private RegionalService regionalService;
	private RotaService rotaService;
	private ReguladoraSeguroService reguladoraSeguroService;
	private RodoviaService rodoviaService;
	private TipoServicoService tipoServicoService;
	private TipoSeguroService tipoSeguroService;
	private TipoSinistroService tipoSinistroService;
	private UnidadeFederativaService unidadeFederativaService;
	private EmitirRelatorioProcessoSinistroDetalhadoService emitirRelatorioProcessoSinistroDetalhadoService;
	private EmitirRelatorioProcessoSinistroResumidoService emitirRelatorioProcessoSinistroResumidoService;
	
	
	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}
	public void setManifestoInternacionalService(ManifestoInternacionalService manifestoInternacionalService) {
		this.manifestoInternacionalService = manifestoInternacionalService;
	}
	public void setManifestoViagemNacionalService(ManifestoViagemNacionalService manifestoViagemNacionalService) {
		this.manifestoViagemNacionalService = manifestoViagemNacionalService;
	}
	public AeroportoService getAeroportoService() {
		return aeroportoService;
	}
	public void setAeroportoService(AeroportoService aeroportoService) {
		this.aeroportoService = aeroportoService;
	}
	public ClienteService getClienteService() {
		return clienteService;
	}
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}
	public ConhecimentoService getConhecimentoService() {
		return conhecimentoService;
	}
	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
	}
	public ControleCargaService getControleCargaService() {
		return controleCargaService;
	}
	public void setControleCargaService(ControleCargaService controleCargaService) {
		this.controleCargaService = controleCargaService;
	}
	public FilialService getFilialService() {
		return filialService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public GrupoEconomicoService getGrupoEconomicoService() {
		return grupoEconomicoService;
	}
	public void setGrupoEconomicoService(GrupoEconomicoService grupoEconomicoService) {
		this.grupoEconomicoService = grupoEconomicoService;
	}
	public ManifestoService getManifestoService() {
		return manifestoService;
	}
	public void setManifestoService(ManifestoService manifestoService) {
		this.manifestoService = manifestoService;
	}
	public MeioTransporteService getMeioTransporteService() {
		return meioTransporteService;
	}
	public void setMeioTransporteService(MeioTransporteService meioTransporteService) {
		this.meioTransporteService = meioTransporteService;
	}
	public MunicipioService getMunicipioService() {
		return municipioService;
	}
	public void setMunicipioService(MunicipioService municipioService) {
		this.municipioService = municipioService;
	}
	public NaturezaProdutoService getNaturezaProdutoService() {
		return naturezaProdutoService;
	}
	public void setNaturezaProdutoService(NaturezaProdutoService naturezaProdutoService) {
		this.naturezaProdutoService = naturezaProdutoService;
	}
	public ProcessoSinistroService getProcessoSinistroService() {
		return processoSinistroService;
	}
	public void setProcessoSinistroService(ProcessoSinistroService processoSinistroService) {
		this.processoSinistroService = processoSinistroService;
	}
	public RegionalService getRegionalService() {
		return regionalService;
	}
	public void setRegionalService(RegionalService regionalService) {
		this.regionalService = regionalService;
	}
	public ReguladoraSeguroService getReguladoraSeguroService() {
		return reguladoraSeguroService;
	}
	public void setReguladoraSeguroService(ReguladoraSeguroService reguladoraSeguroService) {
		this.reguladoraSeguroService = reguladoraSeguroService;
	}
	public RodoviaService getRodoviaService() {
		return rodoviaService;
	}
	public void setRodoviaService(RodoviaService rodoviaService) {
		this.rodoviaService = rodoviaService;
	}
	public TipoSeguroService getTipoSeguroService() {
		return tipoSeguroService;
	}
	public void setTipoSeguroService(TipoSeguroService tipoSeguroService) {
		this.tipoSeguroService = tipoSeguroService;
	}
	public TipoServicoService getTipoServicoService() {
		return tipoServicoService;
	}
	public void setTipoServicoService(TipoServicoService tipoServicoService) {
		this.tipoServicoService = tipoServicoService;
	}
	public TipoSinistroService getTipoSinistroService() {
		return tipoSinistroService;
	}
	public void setTipoSinistroService(TipoSinistroService tipoSinistroService) {
		this.tipoSinistroService = tipoSinistroService;
	}
	public UnidadeFederativaService getUnidadeFederativaService() {
		return unidadeFederativaService;
	}
	public void setUnidadeFederativaService(UnidadeFederativaService unidadeFederativaService) {
		this.unidadeFederativaService = unidadeFederativaService;
	}
	public RotaService getRotaService() {
		return rotaService;
	}
	public void setRotaService(RotaService rotaService) {
		this.rotaService = rotaService;
	}
	public EmitirRelatorioProcessoSinistroDetalhadoService getEmitirRelatorioProcessoSinistroDetalhadoService() {
		return emitirRelatorioProcessoSinistroDetalhadoService;
	}
	public void setEmitirRelatorioProcessoSinistroDetalhadoService(EmitirRelatorioProcessoSinistroDetalhadoService emitirRelatorioProcessoSinistroDetalhadoService) {
		this.emitirRelatorioProcessoSinistroDetalhadoService = emitirRelatorioProcessoSinistroDetalhadoService;
	}
	public EmitirRelatorioProcessoSinistroResumidoService getEmitirRelatorioProcessoSinistroResumidoService() {
		return emitirRelatorioProcessoSinistroResumidoService;
	}
	public void setEmitirRelatorioProcessoSinistroResumidoService(EmitirRelatorioProcessoSinistroResumidoService emitirRelatorioProcessoSinistroResumidoService) {
		this.emitirRelatorioProcessoSinistroResumidoService = emitirRelatorioProcessoSinistroResumidoService;
	}
	

	
	public List findLookupAeroporto(Map criteria) {
		return this.getAeroportoService().findLookup(criteria);
	}
	
	public List findLookupCliente(Map criteria) {
		return this.getClienteService().findLookup(criteria);
	}

	public List findLookupControleCarga(Map criteria) {
		return this.getControleCargaService().findLookup(criteria);
	}
	
	public List findLookupFilial(Map criteria) {
		return this.getFilialService().findLookup(criteria);
	}
	
	public List findLookupGrupoEconomico(Map criteria) {
		return this.getGrupoEconomicoService().findLookup(criteria);
	}
	
    public List findLookupProcessoSinistro(TypedFlatMap tfm) {
    	TypedFlatMap resultData = new TypedFlatMap();
		List result = new ArrayList();
		for (Iterator it = this.processoSinistroService.findLookup(tfm).iterator(); it.hasNext();) {
			ProcessoSinistro processoSinistro = (ProcessoSinistro)it.next();
			resultData.put("idProcessoSinistro", processoSinistro.getIdProcessoSinistro());
			resultData.put("nrProcessoSinistro", processoSinistro.getNrProcessoSinistro());
			resultData.put("processoSinistro.tipoSeguro.idTipoSeguro", processoSinistro.getTipoSeguro().getIdTipoSeguro());			
			result.add(resultData);
		}
		return result;
    }

	public List findLookupReguladoraSeguro(Map criteria) {
		Map pessoa = (Map)criteria.get("pessoa");
		if (pessoa.get("nrIdentificacao")!=null) {
			String nrIdentificacao = PessoaUtils.validateIdentificacao((String)(pessoa.get("nrIdentificacao")));
			pessoa.put("nrIdentificacao", nrIdentificacao);
		}

		return this.getReguladoraSeguroService().findLookup(criteria);
	}	

	public List findLookupRodovia(Map criteria) {
		return this.getRodoviaService().findLookup(criteria);
	}
	
	public List findLookupMeioTransporte(Map criteria) {
    	List list = meioTransporteService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		MeioTransporte meioTransporte = (MeioTransporte)iter.next();
    		TypedFlatMap tfm = new TypedFlatMap();
    		tfm.put("idMeioTransporte", meioTransporte.getIdMeioTransporte());
    		tfm.put("nrIdentificador", meioTransporte.getNrIdentificador());
    		tfm.put("nrFrota", meioTransporte.getNrFrota());
    		retorno.add(tfm);
    	}
    	return retorno;
	}
	
	/*
	 * Combos
	 */

	public List findTipoSinistro(Map criteria) {
		List retorno = new ArrayList();
		List tiposSinistros = this.getTipoSinistroService().findOrderByDsTipo(criteria);
		for (Iterator iter = tiposSinistros.iterator(); iter.hasNext();) {
			TypedFlatMap map = new TypedFlatMap();
			TipoSinistro tipoSinistro = (TipoSinistro) iter.next();
			map.put("idTipo", tipoSinistro.getIdTipoSinistro());
			map.put("dsTipo", tipoSinistro.getDsTipo());
			map.put("tpSituacao.value", tipoSinistro.getTpSituacao().getValue());
			retorno.add(map);
		}
		return retorno;
	}
	
	public List findTipoSeguro(TypedFlatMap tfm) {
		List retorno = new ArrayList();
		List tiposSeguro = this.tipoSeguroService.findOrderBySgTipo(tfm); 
		for (Iterator iter = tiposSeguro.iterator(); iter.hasNext();) {
			TypedFlatMap map = new TypedFlatMap();
			TipoSeguro tipoSeguro = (TipoSeguro) iter.next();
			map.put("idTipoSeguro", tipoSeguro.getIdTipoSeguro());
			map.put("sgTipo", tipoSeguro.getSgTipo());
			map.put("tpSituacao.value", tipoSeguro.getTpSituacao().getValue());
			retorno.add(map);
		}
		return retorno;
	}
	
	public List findNaturezaProduto(Map criteria) {		
		List retorno = new ArrayList();
		List listNaturezasProduto = this.getNaturezaProdutoService().find(criteria);
		for (Iterator iter = listNaturezasProduto.iterator(); iter.hasNext();) {
			TypedFlatMap map = new TypedFlatMap();
			NaturezaProduto naturezaProduto = (NaturezaProduto) iter.next();
			map.put("idNaturezaProduto", naturezaProduto.getIdNaturezaProduto());
			map.put("dsNaturezaProduto", naturezaProduto.getDsNaturezaProduto());
			map.put("tpSituacao.value", naturezaProduto.getTpSituacao().getValue());
			retorno.add(map);
		}
		return retorno;
	} 
	
	public List findUnidadeFederativa(Map criteria) {
		List retorno = new ArrayList();
		criteria = new HashMap();
		List listUnidadesFederativas = this.getUnidadeFederativaService().findCombo(criteria);
		for (Iterator iter = listUnidadesFederativas.iterator(); iter.hasNext();) {
			TypedFlatMap map = new TypedFlatMap();
			Map unidadeFederativa = (Map) iter.next();
			map.put("idUnidadeFederativa", unidadeFederativa.get("idUnidadeFederativa"));
			map.put("sgUnidadeFederativa", unidadeFederativa.get("sgUnidadeFederativa"));
			map.put("tpSituacao.value", ((DomainValue)unidadeFederativa.get("tpSituacao")).getValue());
			retorno.add(map);
		}
		return retorno;
	}
	
	public List findRegional(TypedFlatMap criteria) {
		List retorno = new ArrayList();
		List listRegionais = this.getRegionalService().findRegionaisVigentes();
		for (Iterator iter = listRegionais.iterator(); iter.hasNext();) {
			TypedFlatMap map = new TypedFlatMap();
			Map regional = (Map) iter.next();
			map.put("idRegional", regional.get("idRegional"));
			map.put("dsRegional", regional.get("dsRegional"));
			map.put("siglaDescricao", regional.get("siglaDescricao"));
			retorno.add(map);
		}
		return retorno; 
	}
	
	public List findLookupRota(Map criteria) {
		return this.getRotaService().findLookup(criteria);
	}
	
	public List findLookupMunicipio(Map criteria) {
		return this.getMunicipioService().findLookup(criteria);
	}
	
	//#################################
	// Regras de negocio...
	//#################################
	
	/**
	 * Executa a chamada para service do relatorio em resumido.
	 * 
	 * @return 
	 */
	public File executeProcessoSinistroResumido(TypedFlatMap criteria) throws Exception {
		this.reportServiceSupport = this.getEmitirRelatorioProcessoSinistroResumidoService();
		return this.reportServiceSupport.executeReport(criteria);
	}
	
	/**
	 * Executa a chamada para service do relatorio detalhado.
	 * 
	 * @return 
	 */
	public File executeProcessoSinistroDetalhado(TypedFlatMap criteria) throws Exception {
		this.reportServiceSupport = this.getEmitirRelatorioProcessoSinistroDetalhadoService();
		return this.reportServiceSupport.executeReport(criteria);
	}

	
	
    public List findTipoManifesto(Map criteria) {
    	List dominiosValidos = new ArrayList();
    	dominiosValidos.add("VN");
    	List retorno = domainValueService.findByDomainNameAndValues("DM_TAG_MANIFESTO", dominiosValidos);
    	return retorno;
    }

    public List findLookupManifestoDocumentFilialVN(Map criteria) {
    	return findLookupFilialByManifesto(criteria);
    }

    public List findLookupManifestoDocumentFilialVI(Map criteria) {
    	return findLookupFilialByManifesto(criteria);
    }
    
    public List findLookupFilialByManifesto(Map criteria) {
    	List list = filialService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		Filial filial = (Filial)iter.next();
    		TypedFlatMap typedFlatMap = new TypedFlatMap();
    		typedFlatMap.put("idFilial", filial.getIdFilial());
    		typedFlatMap.put("sgFilial", filial.getSgFilial());
    		typedFlatMap.put("pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
    		retorno.add(typedFlatMap);
    	}
    	return retorno;
    }

    public List findLookupManifestoDocumentNumberVN(Map criteria) {
    	List list = manifestoViagemNacionalService.findLookup(criteria);
    	return list;
    }

    public List findLookupManifestoDocumentNumberVI(Map criteria) {
    	List list = manifestoInternacionalService.findLookup(criteria);
    	return list;
    }
}