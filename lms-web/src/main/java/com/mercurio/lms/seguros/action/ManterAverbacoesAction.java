package com.mercurio.lms.seguros.action;

import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.core.InfrastructureException;
import com.mercurio.adsm.core.util.Base64Util;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.masterdetail.ItemList;
import com.mercurio.adsm.framework.model.masterdetail.ItemListConfig;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailAction;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailFactory;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailKey;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntry;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntryConfig;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.report.ReportExecutionManager;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteService;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.MunicipioService;
import com.mercurio.lms.seguros.model.Averbacao;
import com.mercurio.lms.seguros.model.AverbacaoAnexo;
import com.mercurio.lms.seguros.model.ReguladoraSeguradora;
import com.mercurio.lms.seguros.model.service.AverbacoesAnexoService;
import com.mercurio.lms.seguros.model.service.AverbacoesService;
import com.mercurio.lms.seguros.model.service.ReguladoraSeguradoraService;
import com.mercurio.lms.seguros.model.service.ReguladoraSeguroService;
import com.mercurio.lms.seguros.model.service.TipoSeguroService;
import com.mercurio.lms.seguros.report.RelatorioManterAverbacoesService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.vendas.model.service.ClienteService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.seguros.manterAverbacoesAction"
 */
public class ManterAverbacoesAction extends MasterDetailAction {

	private static final String AVERBACOES_ANEXO_ALIAS = "AVERBACOES_ANEXO_ALIAS";
	private AverbacoesAnexoService averbacoesAnexoService;
	private ClienteService clienteService;
	private DomainValueService domainValueService;
	private TipoSeguroService tipoSeguroService;
	private ReguladoraSeguradoraService reguladoraSeguradoraService;
	private ReguladoraSeguroService reguladoraSeguroService;
	private MeioTransporteService meioTransporteService;
	private FilialService filialService;
	private MunicipioService municipioService;	
	private ReportExecutionManager reportExecutionManager;
	private RelatorioManterAverbacoesService relatorioManterAverbacoesService;	
	
	@SuppressWarnings("rawtypes")
	public Serializable store(Averbacao bean) {
		MasterEntry master = getMasterFromSession(bean.getIdAverbacao(), true);
		ItemList listAnexos = getItemsFromSession(master, AVERBACOES_ANEXO_ALIAS);
		
		return getAverbacoesService().storeAverbacoes(bean, listAnexos);
	}
	
	/**
	 * Executa o store da aba de anexos
	 * @param parameters
	 * @return
	 */
	public Serializable storeAnexos(TypedFlatMap parameters){
    	return saveItemInstance( parameters, AVERBACOES_ANEXO_ALIAS);
    }
		
   	/********************************************************************
	 * Finds
	 ********************************************************************/
    /**
     * Retorna um map com os objetos a serem mostrados na grid.
     * 
     * @param Map criteria
     * @return ResultSetPage com os dados da grid.
     */
	public ResultSetPage findPaginatedAverbacoes(TypedFlatMap tfm){
		return getAverbacoesService().findPaginatedAverbacoes(tfm);
	}
	
    /**
     * Faz a consulta ao banco, retornando o numero de registros encontrados para determinados 
     * parametros.
     * 
     * @param Map criteria 
     * @return Integer numero de registros
     */
    public Integer getRowCountAverbacoes(TypedFlatMap tfm) {
    	return this.getAverbacoesService().getRowCountAverbacoes(tfm);
    } 
    
    public TypedFlatMap findById(java.lang.Long id) {
    	Averbacao averbacao = getAverbacoesService().findById(id);    	
    	putMasterInSession(averbacao);
    	
    	return mountAverbacao(averbacao);
    }
        
    /**
     * Retorna um map com os objetos a serem mostrados na grid da aba Anexos
     * @param criteria
     * @return ResultSetPage com os dados da grid.
     */
    @SuppressWarnings({ "rawtypes", "unchecked" })
    public ResultSetPage findPaginatedAverbacoesAnexos(TypedFlatMap criteria){
    	ResultSetPage rsp = findPaginatedItemList(criteria, AVERBACOES_ANEXO_ALIAS );
    	
    	List result = rsp.getList();
    	List retorno = new ArrayList();
    	
    	for (Iterator iter = result.iterator(); iter.hasNext();) {
    		AverbacaoAnexo averbacaoAnexo = (AverbacaoAnexo) iter.next();
    		TypedFlatMap typedFlatMap = new TypedFlatMap();
    		typedFlatMap.put("idAverbacaoAnexo", averbacaoAnexo.getIdAverbacaoAnexo());
    		typedFlatMap.put("dsAnexo", averbacaoAnexo.getDsAnexo());
    		typedFlatMap.put("dhCriacao", averbacaoAnexo.getDhCriacao());
    		typedFlatMap.put("usuario", averbacaoAnexo.getUsuario().getUsuarioADSM().getNmUsuario());
    		typedFlatMap.put("dcArquivo", Base64Util.encode((byte[])averbacaoAnexo.getDcArquivo()));
    		
    		retorno.add(typedFlatMap);
    	}
    	
    	rsp.setList(retorno);
    	
    	return rsp;
    }
    
    /**
     * @param criteria
     * @return
     */
    public Integer getRowCountAverbacoesAnexos(TypedFlatMap tfm){
    	MasterEntry entry = getMasterFromSession(tfm.getLong("idAverbacao"), true);
		
		if (entry.getMasterId() == null) {
			return Integer.valueOf(0);
		}
		
		return getRowCountItemList(tfm, AVERBACOES_ANEXO_ALIAS);		
    }
    
    public Object findAnexos(MasterDetailKey key) {
    	AverbacaoAnexo averbacaoAnexo = (AverbacaoAnexo) findItemById(key, AVERBACOES_ANEXO_ALIAS);
    	TypedFlatMap mapItemMda = new TypedFlatMap();
    	
    	mapItemMda.put("idAverbacaoAnexo",averbacaoAnexo.getIdAverbacaoAnexo());
    	mapItemMda.put("dsAnexo",averbacaoAnexo.getDsAnexo());
    	mapItemMda.put("dcArquivo", Base64Util.encode((byte[])averbacaoAnexo.getDcArquivo()));
    	
    	return mapItemMda;
    }
	
    public TypedFlatMap mountAverbacao(Averbacao averbacao){
    	TypedFlatMap tfm = new TypedFlatMap();
    	
    	tfm.put("idAverbacao", averbacao.getIdAverbacao());
    	
    	tfm.put("cliente.idCliente", averbacao.getCliente().getIdCliente());
    	tfm.put("cliente.pessoa.nmPessoa", averbacao.getCliente().getPessoa().getNmPessoa());
    	tfm.put("cliente.pessoa.nrIdentificacao", averbacao.getCliente().getPessoa().getNrIdentificacao());
    	tfm.put("cliente.pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(averbacao.getCliente().getPessoa()));
    	
    	if(averbacao.getTpModal() != null){
    		tfm.put("tpModal.value", averbacao.getTpModal().getValue());
        	tfm.put("tpModal.description", averbacao.getTpModal().getDescription());
    	}
    	
    	if(averbacao.getTpAbrangencia() != null){
    		tfm.put("tpAbrangencia.value", averbacao.getTpAbrangencia().getValue());
        	tfm.put("tpAbrangencia.description", averbacao.getTpAbrangencia().getDescription());
    	}
    	
    	if(averbacao.getTpFrete() != null){
    		tfm.put("tpFrete.value", averbacao.getTpFrete().getValue());
        	tfm.put("tpFrete.description", averbacao.getTpFrete().getDescription());
    	}
    	
    	tfm.put("tipoSeguro.idTipoSeguro", averbacao.getTipoSeguro().getIdTipoSeguro());
    	
    	if(averbacao.getCorretora() != null){
    		tfm.put("corretora.idReguladora", averbacao.getCorretora().getIdReguladora());
        	tfm.put("corretora.pessoa.nmPessoa", averbacao.getCorretora().getPessoa().getNmPessoa());
    	}
    	
    	tfm.put("seguradora.idSeguradora", averbacao.getSeguradora().getIdSeguradora());
    	tfm.put("dtViagem", averbacao.getDtViagem());
    	tfm.put("vlEstimado", averbacao.getVlEstimado());
    	tfm.put("psTotal", averbacao.getPsTotal());
    	tfm.put("dsNF", averbacao.getDsNF());
    	tfm.put("filialOrigem.idFilial", averbacao.getFilialOrigem().getIdFilial());
    	tfm.put("filialOrigem.sgFilial", averbacao.getFilialOrigem().getSgFilial());
    	tfm.put("filialOrigem.pessoa.nmFantasia", averbacao.getFilialOrigem().getPessoa().getNmFantasia());
    	tfm.put("filialDestino.idFilial", averbacao.getFilialDestino().getIdFilial());
    	tfm.put("filialDestino.sgFilial", averbacao.getFilialDestino().getSgFilial());
    	tfm.put("filialDestino.pessoa.nmFantasia", averbacao.getFilialOrigem().getPessoa().getNmFantasia());
    	
    	tfm.put("municipioOrigem.idMunicipio", averbacao.getMunicipioOrigem().getIdMunicipio());
    	tfm.put("municipioOrigem.unidadeFederativa.sgUnidadeFederativa", averbacao.getMunicipioOrigem().getUnidadeFederativa().getSgUnidadeFederativa());
    	tfm.put("municipioOrigem.nmMunicipio", averbacao.getMunicipioOrigem().getNmMunicipio());
    	
    	tfm.put("municipioDestino.idMunicipio", averbacao.getMunicipioDestino().getIdMunicipio());
    	tfm.put("municipioDestino.unidadeFederativa.sgUnidadeFederativa", averbacao.getMunicipioDestino().getUnidadeFederativa().getSgUnidadeFederativa());
    	tfm.put("municipioDestino.nmMunicipio", averbacao.getMunicipioDestino().getNmMunicipio());
    	
    	if(averbacao.getMeioTransporte() != null){
        	tfm.put("meioTransporte.idMeioTransporte", averbacao.getMeioTransporte().getIdMeioTransporte());
        	tfm.put("meioTransporteRodoviario2.nrFrota", averbacao.getMeioTransporte().getNrFrota());
        	tfm.put("meioTransporte.nrIdentificador", averbacao.getMeioTransporte().getNrIdentificador());
    	}

    	tfm.put("dsContingencia", averbacao.getDsContingencia());
    	tfm.put("obAverbacao", averbacao.getObAverbacao());
    	
    	return tfm;
    }
    
	/********************************************************************
	 * Combos & Lookups
	 ********************************************************************/
	 public List findLookupMunicipio(Map criteria){
			return municipioService.findLookup(criteria);
		}
	
    public List findLookupCliente(Map criteria){
    	return this.clienteService.findLookup(criteria);
    }
	
	public List findComboModal(){
		List<String> values = new ArrayList<String>();
		values.add("A"); // aereo
		values.add("R"); // rodoviário
		return domainValueService.findByDomainNameAndValues("DM_TIPO_MEIO_TRANSPORTE", values);
	}
	
    public List findTipoSeguroOrderBySgTipo(Map criteria){
        return tipoSeguroService.findOrderBySgTipo(criteria);
    }
	
    /**
     * Método para retornar uma list ordenada.
     * Utilizado em combobox.
     * @param criteria
     * @return
     */
    public List findReguladoraSeguradoraOrderByNmPessoa(TypedFlatMap criteria){
    	List lista = reguladoraSeguradoraService.findOrderByNmPessoa(criteria);
    	List result = new ArrayList();
    	TypedFlatMap map;
    	for(Iterator ite = lista.iterator(); ite.hasNext();){
    		ReguladoraSeguradora reguladoraSeguradora = (ReguladoraSeguradora)ite.next();
    		map = new TypedFlatMap();
    		map.put("tpSituacao", reguladoraSeguradora.getSeguradora().getTpSituacao());
    		map.put("seguradora.idSeguradora", reguladoraSeguradora.getSeguradora().getIdSeguradora());
    		map.put("seguradora.pessoa.nmPessoa", reguladoraSeguradora.getSeguradora().getPessoa().getNmPessoa());
    		map.put("seguradora.pessoa.idPessoa", reguladoraSeguradora.getSeguradora().getPessoa().getIdPessoa());
    		map.put("reguladoraSeguro.idReguladora", reguladoraSeguradora.getReguladoraSeguro().getIdReguladora());
    		map.put("idReguladoraSeguradora", reguladoraSeguradora.getIdReguladoraSeguradora());
    		//Exceção! onlyActiveValues da jsp não funciona neste caso.
    		if(!"A".equals(criteria.getString("tpSituacao")) || 
    		   "A".equals(reguladoraSeguradora.getSeguradora().getTpSituacao().getValue())) {
    			result.add(map);
    		}
    	}
        return result;
    }
    
	/**
     * Método para retornar uma list ordenada.
     * Utilizado em combobox.
     * @param criteria
     * @return
     */
    public List findReguladoraOrderByNmPessoa(Map criteria){
        return reguladoraSeguroService.findOrderByNmPessoa(criteria);
    }
    
    /**
     * lookup de veiculo 
     * @param map
     * @return
     */
    public List findLookupMeioTransporte(Map map) {
    	return meioTransporteService.findLookup(map);
    }
    
	public List findLookupFilial(Map criteria) {		
		return filialService.findLookup(criteria);	
	}

	/**
     * Geração do relatório excel
     * 
     * Jira LMS-6181
     * 
     * @param parameters
     * @return
     * @throws Exception
     */
    public String executeReport(TypedFlatMap params) throws Exception {
		return this.reportExecutionManager.generateReportLocator(this.relatorioManterAverbacoesService, params);
	}

	@Override
	protected MasterEntryConfig createMasterConfig(MasterDetailFactory masterFactory) {
		
		/**
		 * Declaracao da classe pai
		 */	
		MasterEntryConfig config = masterFactory.createMasterEntryConfig(Averbacao.class, true);
		
		
		/**
		 * Esta classe e reponsavel por ordenar a List dos filhos que estao
		 * em memoria de acordo com as regras de negocio
		 */
    	Comparator descComparator = new Comparator() {
    		public int compare(Object obj1, Object obj2) {
    			AverbacaoAnexo averbacaoAnexo1 = (AverbacaoAnexo) obj1;
    			AverbacaoAnexo averbacaoAnexo2 = (AverbacaoAnexo) obj2;
				
				if (averbacaoAnexo1.getDsAnexo() == null) {
					if (averbacaoAnexo2.getDsAnexo() == null) {
						return 0;
					} else {
						return 1;
					}
				} else {
					if (averbacaoAnexo2.getDsAnexo() == null) {
						return -1;
					}
				}
				
				return averbacaoAnexo1.getDsAnexo().compareTo(averbacaoAnexo2.getDsAnexo());
    		}
    	};
		
	   	/********************************************************************
    	 * AverbacoesAnexo ItemListConfig
    	 ********************************************************************/
    	ItemListConfig averbacoesAnexoItemList = configItemListAverbacoesAnexo();
    		
    	config.addItemConfig(AVERBACOES_ANEXO_ALIAS, AverbacaoAnexo.class, averbacoesAnexoItemList, descComparator);
    	
		return config;
	}

	private ItemListConfig configItemListAverbacoesAnexo() {
		return new ItemListConfig() {
    		
    		public List initialize(Long masterId) {
    			return getAverbacoesAnexoService().findAnexosByIdAverbacao(masterId);    			
    		}
    		
    		public Integer getRowCount(Long masterId) {
				if (masterId==null) {
					return Integer.valueOf(0);
				}
				
				return getAverbacoesAnexoService().getRowCountAnexosByIdAverbacao(masterId);    			
			}
    		
			public Object populateNewItemInstance(Map mapParameter, Object bean) {
				AverbacaoAnexo anexo = (AverbacaoAnexo) bean;
				TypedFlatMap parameters = (TypedFlatMap) mapParameter;
										
				anexo.setIdAverbacaoAnexo(parameters.getLong("idAverbacaoAnexo"));
				anexo.setDsAnexo( parameters.getString("dsAnexo"));
		    	
		    	try {
		    		anexo.setDcArquivo(Base64Util.decode(parameters.getString("dcArquivo")));
		    	} catch (IOException e) {
		    		throw new InfrastructureException(e.getMessage());
				}
		    	
		    	getAverbacoesAnexoService().prepareValuesToStore(anexo);
		    	
				return anexo;
			}			
    		
			public void modifyItemValues(Object newBean, Object bean) {
				AverbacaoAnexo anexoModified = (AverbacaoAnexo) newBean;
				AverbacaoAnexo baseAnexo= (AverbacaoAnexo) bean;
		        
		        baseAnexo.setDsAnexo(anexoModified.getDsAnexo());
			}
    	};
	}
	
	@SuppressWarnings("rawtypes")
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIdsAnexo(List ids) {
    	super.removeItemByIds(ids, AVERBACOES_ANEXO_ALIAS);
    }
	
	@SuppressWarnings("rawtypes")
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	getAverbacoesService().removeByIds(ids);
    }
	
	public void removeById(java.lang.Long id) {
		getAverbacoesService().removeById(id);
	}
	
	public void clearSessionItens(){
		super.removeMasterFromSession();
	}
	
   	/********************************************************************
	 * GETTERS and SETTERS
	 ********************************************************************/
	public AverbacoesService getAverbacoesService() {
		return (AverbacoesService) getMasterService();
	}

	public void setAverbacoesService(AverbacoesService averbacoesService) {
		setMasterService(averbacoesService);
	}
	
	public AverbacoesAnexoService getAverbacoesAnexoService() {
		return averbacoesAnexoService;
	}

	public void setAverbacoesAnexoService(
			AverbacoesAnexoService averbacoesAnexoService) {
		this.averbacoesAnexoService = averbacoesAnexoService;
	}

	public ClienteService getClienteService() {
		return clienteService;
	}

	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}

	public DomainValueService getDomainValueService() {
		return domainValueService;
	}

	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}

	public TipoSeguroService getTipoSeguroService() {
		return tipoSeguroService;
	}

	public void setTipoSeguroService(TipoSeguroService tipoSeguroService) {
		this.tipoSeguroService = tipoSeguroService;
	}

	public ReguladoraSeguradoraService getReguladoraSeguradoraService() {
		return reguladoraSeguradoraService;
	}

	public void setReguladoraSeguradoraService(
			ReguladoraSeguradoraService reguladoraSeguradoraService) {
		this.reguladoraSeguradoraService = reguladoraSeguradoraService;
	}

	public ReguladoraSeguroService getReguladoraSeguroService() {
		return reguladoraSeguroService;
	}

	public void setReguladoraSeguroService(
			ReguladoraSeguroService reguladoraSeguroService) {
		this.reguladoraSeguroService = reguladoraSeguroService;
	}

	public MeioTransporteService getMeioTransporteService() {
		return meioTransporteService;
	}

	public void setMeioTransporteService(MeioTransporteService meioTransporteService) {
		this.meioTransporteService = meioTransporteService;
	}

	public FilialService getFilialService() {
		return filialService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public MunicipioService getMunicipioService() {
		return municipioService;
	}

	public void setMunicipioService(MunicipioService municipioService) {
		this.municipioService = municipioService;
	}
	
	public ReportExecutionManager getReportExecutionManager() {
		return reportExecutionManager;
	}
	
	public void setReportExecutionManager(
			ReportExecutionManager reportExecutionManager) {
		this.reportExecutionManager = reportExecutionManager;
	}
	
	public RelatorioManterAverbacoesService getRelatorioManterAverbacoesService() {
		return relatorioManterAverbacoesService;
	}
	
	public void setRelatorioManterAverbacoesService(RelatorioManterAverbacoesService relatorioManterAverbacoesService) {
		this.relatorioManterAverbacoesService = relatorioManterAverbacoesService;
	}
}
