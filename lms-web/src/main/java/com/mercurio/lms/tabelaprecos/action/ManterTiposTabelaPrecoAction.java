package com.mercurio.lms.tabelaprecos.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.Manifesto;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.municipios.model.Empresa;
import com.mercurio.lms.municipios.model.service.EmpresaService;
import com.mercurio.lms.tabelaprecos.model.TipoTabelaPreco;
import com.mercurio.lms.tabelaprecos.model.service.TipoTabelaPrecoService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.vendas.model.service.ClienteService;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import org.apache.commons.collections.MapUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.tabelaprecos.manterTiposTabelaPrecoAction"
 */

public class ManterTiposTabelaPrecoAction extends CrudAction {
	private ClienteService clienteService;
	private EmpresaService empresaService;
	
	public void removeById(java.lang.Long id) {
        ((TipoTabelaPrecoService)defaultService).removeById(id);
    }

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	((TipoTabelaPrecoService)defaultService).removeByIds(ids);
    }

    public TipoTabelaPreco findById(java.lang.Long id) {
    	return ((TipoTabelaPrecoService)defaultService).findById(id);
    }

    public List findLookupEmpresa(Map criteria) {
		List result = empresaService.findLookup(criteria);
		if(!result.isEmpty()) {
			Empresa empresa = (Empresa)result.get(0);
			Pessoa pessoa = empresa.getPessoa();
			pessoa.setNrIdentificacao(FormatUtils.formatIdentificacao(pessoa.getTpIdentificacao().getValue(), pessoa.getNrIdentificacao()));
		}
		return result;
    }

	public Serializable store(TipoTabelaPreco bean) {
		TipoTabelaPreco tipoTabelaPreco = bean;
		List<Integer> listVersoesDisponiveis = new ArrayList<Integer>();
		int nrVersaoAtual = 0;
		if(tipoTabelaPreco.getCliente() != null && tipoTabelaPreco.getCliente().getIdCliente() == null){
			tipoTabelaPreco.setCliente(null);
		}

		if(tipoTabelaPreco.getNrVersaoFinal() != null) {
			for (nrVersaoAtual = tipoTabelaPreco.getNrVersao().intValue(); nrVersaoAtual <= tipoTabelaPreco.getNrVersaoFinal().intValue(); nrVersaoAtual++) {
				boolean isNrVersaoDisponivel = ((TipoTabelaPrecoService) defaultService).findNrVersaoNaoUtilizada(tipoTabelaPreco.getTpTipoTabelaPreco().getValue(), nrVersaoAtual);
				if (!isNrVersaoDisponivel) {
					listVersoesDisponiveis.add(nrVersaoAtual);
				}
			}

			for (int i = 0; i < listVersoesDisponiveis.size(); i++){
				tipoTabelaPreco.setIdTipoTabelaPreco(null);

				tipoTabelaPreco.setNrVersao(listVersoesDisponiveis.get(i));

				if((listVersoesDisponiveis.get(listVersoesDisponiveis.size() - 1))== nrVersaoAtual){
					return super.store(tipoTabelaPreco);
				}
				super.store(tipoTabelaPreco);
			}
		}
		return super.store(tipoTabelaPreco);
	}

    public List findLookupCliente(TypedFlatMap criteria) {
    	return clienteService.findLookupCliente(criteria.getString("pessoa.nrIdentificacao"));
    }

	public TypedFlatMap findByTpTipoTabelaPrecoUltimoNrVersao(String tpTipoTabelaPreco) {
		Integer nrVersao = ((TipoTabelaPrecoService)defaultService).findByTpTipoTabelaPrecoUltimoNrVersao(tpTipoTabelaPreco);
		TypedFlatMap retorno = new TypedFlatMap();
		retorno.put("nrVersao",nrVersao);

		return retorno;
	}

	public void setTipoTabelaPreco(TipoTabelaPrecoService tipoTabelaPrecoService) {
		this.defaultService = tipoTabelaPrecoService;
	}
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}
	public void setEmpresaService(EmpresaService empresaService) {
		this.empresaService = empresaService;
	}

}
