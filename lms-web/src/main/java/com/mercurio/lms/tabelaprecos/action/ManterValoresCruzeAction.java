package com.mercurio.lms.tabelaprecos.action;

import java.io.Serializable;
import java.util.List;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Moeda;
import com.mercurio.lms.configuracoes.model.service.MoedaPaisService;
import com.mercurio.lms.municipios.model.Empresa;
import com.mercurio.lms.tabelaprecos.model.ValorCruze;
import com.mercurio.lms.tabelaprecos.model.service.ValorCruzeService;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.tabelaprecos.manterValoresCruzeAction"
 */
public class ManterValoresCruzeAction extends CrudAction {
	
	private MoedaPaisService moedaPaisService;
	
	public void setService(ValorCruzeService valorCruzeService) {
		this.defaultService = valorCruzeService; 
	}
	
	public ValorCruzeService getService() {
		return (ValorCruzeService)this.defaultService; 
	}
	
	public ResultSetPage findPaginated(TypedFlatMap criteria) {
		Long idEmpresa = SessionUtils.getEmpresaSessao().getIdEmpresa();
		criteria.put("idEmpresa",idEmpresa);
		return getService().findPaginated(criteria); 
	}

	public Integer getRowCount(TypedFlatMap criteria) {
		Long idEmpresa = SessionUtils.getEmpresaSessao().getIdEmpresa();
		criteria.put("idEmpresa",idEmpresa);
		return getService().getRowCount(criteria); 
	}
	
	public Serializable findById(java.lang.Long id) {
		return getService().findById(id);
	}
	
	public List findMoedaCombo() {
		return moedaPaisService.findMoedaByPaisUsuarioLogado();
	}
	
	/**
	*
	**/
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		getService().removeByIds(ids);
	}
	
	public void removeById(java.lang.Long id) {
		getService().removeById(id);
	}
	
	public Serializable store(TypedFlatMap map) {
		ValorCruze valorCruze = new ValorCruze();
		Moeda moeda = new Moeda();
		Empresa empresa = new Empresa();
		
		valorCruze.setIdValorCruze(map.getLong("idValorCruze"));
			Long idEmpresa = SessionUtils.getEmpresaSessao().getIdEmpresa();
			empresa.setIdEmpresa(idEmpresa);
		valorCruze.setEmpresa(empresa);
		valorCruze.setNrFaixaInicialPeso(map.getBigDecimal("nrFaixaInicialPeso"));
		valorCruze.setNrFaixaFinalPeso(map.getBigDecimal("nrFaixaFinalPeso"));
			moeda.setIdMoeda(map.getLong("moeda.idMoeda"));
		valorCruze.setMoeda(moeda);
		valorCruze.setVlCruze(map.getBigDecimal("vlCruze"));
		valorCruze.setDtVigenciaInicial(map.getYearMonthDay("dtVigenciaInicial"));
		valorCruze.setDtVigenciaFinal(map.getYearMonthDay("dtVigenciaFinal"));
		
		return getService().store(valorCruze);
	}

	public TypedFlatMap validateVigencia(TypedFlatMap map) {
		Integer habilita = Integer.valueOf(0);
		if (map.getYearMonthDay("dtVigenciaInicial").compareTo(JTDateTimeUtils.getDataAtual()) <= 0){
			habilita = Integer.valueOf(1);
			if (map.getYearMonthDay("dtVigenciaFinal")!=null){
				if(map.getYearMonthDay("dtVigenciaFinal").compareTo(JTDateTimeUtils.getDataAtual()) < 0){
					habilita = Integer.valueOf(2);
				}
			}
		}
		map.put("habilita",habilita);
		return map;
	}

	public TypedFlatMap findDadosSessao() {
		TypedFlatMap map = new TypedFlatMap();
		Long idMoeda = SessionUtils.getMoedaSessao().getIdMoeda();
		
		map.put("idMoeda", idMoeda);
		
		return map;
	}

	
	public void setMoedaPaisService(MoedaPaisService moedaPaisService) {
		this.moedaPaisService = moedaPaisService;
	}

}