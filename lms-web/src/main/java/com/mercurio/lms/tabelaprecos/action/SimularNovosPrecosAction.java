package com.mercurio.lms.tabelaprecos.action;

import java.io.Serializable;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.joda.time.DateTime;
import org.joda.time.YearMonthDay;

import com.mercurio.adsm.batch.annotations.Assynchronous;
import com.mercurio.adsm.batch.annotations.AssynchronousMethod;
import com.mercurio.adsm.batch.annotations.BatchType;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.session.SessionContext;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.Moeda;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.configuracoes.model.service.JobInterfaceService;
import com.mercurio.lms.configuracoes.model.service.UsuarioService;
import com.mercurio.lms.tabelaprecos.model.TabelaPreco;
import com.mercurio.lms.tabelaprecos.model.TabelaPrecoParcela;
import com.mercurio.lms.tabelaprecos.model.TipoTabelaPreco;
import com.mercurio.lms.tabelaprecos.model.service.SubtipoTabelaPrecoService;
import com.mercurio.lms.tabelaprecos.model.service.TabelaPrecoService;
import com.mercurio.lms.tabelaprecos.model.service.TipoTabelaPrecoService;
import com.mercurio.lms.tabelaprecos.util.ConstantesTabelaPrecos;
import com.mercurio.lms.tabelaprecos.util.TabelaPrecoUtils;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.model.service.VigenciaService;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.tabelaprecos.simularNovosPrecosAction"
 */
@Assynchronous
public class SimularNovosPrecosAction extends CrudAction {

	private TipoTabelaPrecoService tipoTabelaPrecoService;
	private SubtipoTabelaPrecoService subtipoTabelaPrecoService;
	private VigenciaService vigenciaService;
	private UsuarioService usuarioService;
	private ConfiguracoesFacade configuracoesFacade;
	private DomainValueService domainValueService;
	private JobInterfaceService jobService;

	public List findTipoTabelaPreco(TypedFlatMap criteria) {
		List values = domainValueService.findDomainValues("DM_TIPO_TABELA_PRECO", true);
		if (values != null && values.size() > 0) {
			for (Iterator it = values.iterator(); it.hasNext();) {
				DomainValue domainValue = (DomainValue) it.next();
				if ("C".equals(domainValue.getValue())) {
					it.remove();
				}
			}
		}
		return values;
	}

	public List findSubtipoTabelaPreco(TypedFlatMap criteria) {
		return getSubtipoTabelaPrecoService().find(criteria);
	}

	public ResultSetPage findPaginated(TypedFlatMap criteria) {
		ResultSetPage rsp = getTabelaPrecoService().findPaginatedSimulacao(criteria);
		List result = rsp.getList();
		if (result != null && result.size() > 0) {
			for (int i = 0; i < result.size(); i++) {
				TypedFlatMap tabela = (TypedFlatMap) result.get(i);

				String tpTipoTabelaPreco = tabela.getString("tipoTabelaPreco.tpTipoTabelaPreco.value");
				Integer nrVersao = tabela.getInteger("tipoTabelaPreco.nrVersao");
				String tpSubtipoTabelaPreco = tabela.getString("subtipoTabelaPreco.tpSubtipoTabelaPreco");

				String tabelaPrecoString = TabelaPrecoUtils.formatTabelaPrecoString(tpTipoTabelaPreco, nrVersao, tpSubtipoTabelaPreco);

				tabela.put("tabelaPrecoString", tabelaPrecoString);
			}
		}
		return rsp;
	}

	public Integer getRowCount(TypedFlatMap criteria) {
		return getTabelaPrecoService().getRowCountSimulacao(criteria);
	}

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		getTabelaPrecoService().removeByIdsProposta(ids, true);
	}

	public void removeById(java.lang.Long id) {
		getTabelaPrecoService().removeById(id);
	}

	public TypedFlatMap findById(Long id) {
		TypedFlatMap result = getTabelaPrecoService().findByIdMap(id);

		Long idTabelaBase = result.getLong("tabelaPreco.idTabelaPreco");
		if (idTabelaBase != null) {
			TypedFlatMap tabelaBase = getTabelaPrecoService().findByIdMap(idTabelaBase);
			if (tabelaBase != null) {
				Moeda moeda = new Moeda();
				moeda.setSgMoeda(tabelaBase.getString("moeda.sgMoeda"));
				moeda.setDsSimbolo(tabelaBase.getString("moeda.dsSimbolo"));
				String descricaoMoeda = FormatUtils.concatSiglaSimboloMoeda(moeda);
				result.put("tabelaBase.moeda.dsMoeda", descricaoMoeda);

				result.put("tabelaBase.tabelaPrecoString", tabelaBase.get("tabelaPrecoString"));
				result.put("tabelaBase.dsDescricao", tabelaBase.get("dsDescricao"));
				result.put("tabelaBase.idTabelaPreco", tabelaBase.get("idTabelaPreco"));
			}
		}

		result.put("tabelaPreco.idTabelaPreco", result.getLong("idTabelaPreco"));
		result.put("funcionario.idUsuario", result.remove("usuario.idUsuario"));
		result.put("funcionario.nmFuncionario", result.remove("usuario.nmUsuario"));
		result.put("funcionario.nrMatricula", result.remove("usuario.nrMatricula"));

		return result;
	}

	public List findLookupTabelaPreco(Map criteria) {
		List result = getTabelaPrecoService().findLookup(criteria);
		if (result != null && result.size() > 0) {
			for (Iterator it = result.iterator(); it.hasNext();) {
				TabelaPreco tabelaPreco = (TabelaPreco) it.next();
				TipoTabelaPreco tipoTabelaPreco = tabelaPreco.getTipoTabelaPreco();
				DomainValue tpTipoTabelaPreco = tipoTabelaPreco.getTpTipoTabelaPreco();

				if ("C".equals(tpTipoTabelaPreco.getValue())) {
					it.remove();
				}
			}
		}
		return result;
	}

	public List findLookupUsuarioFuncionario(TypedFlatMap parameters) {
		String nrMatricula = parameters.getString("nrMatricula");
		return getUsuarioService().findLookupUsuarioFuncionario(null,
				nrMatricula, null, null, null, null, true);
	}

	public TypedFlatMap findProximaVersaoTabela(TypedFlatMap criteria) {
		TypedFlatMap result = new TypedFlatMap();
		result.put("disable", "false");

		String tpTipoTabelaPreco = criteria.getString("tipoTabelaPreco.tpTipoTabelaPreco");
		String tpSubtipoTabelaPreco = criteria.getString("subtipoTabelaPreco.tpSubtipoTabelaPreco");
		Integer nrVersao = getTabelaPrecoService().findUltimaVersaoTabela(tpTipoTabelaPreco, tpSubtipoTabelaPreco);
		if (nrVersao == null) {
			nrVersao = Integer.valueOf("0");
		}
		if (!"D".equals(tpTipoTabelaPreco) && !"E".equals(tpTipoTabelaPreco)) {
			result.put("disable", "true");
			int novaVersao = nrVersao.intValue() + 1;
			nrVersao = Integer.valueOf(novaVersao);
		}

		result.put("nrVersao", nrVersao);
		return result;
	}

	public void reconfiguraSessao() {
		SessionContext.remove(ConstantesTabelaPrecos.GENERALIDADES_IN_SESSION);
		SessionContext.remove(ConstantesTabelaPrecos.TAXAS_IN_SESSION);
	}

	public void validaDtVigenciaInicial(YearMonthDay dtVigenciaInicial) {
		getVigenciaService().validateInicioVigencia(dtVigenciaInicial, "LMS-30040");
	}

	public TypedFlatMap findDadosSessao() {
		TypedFlatMap result = new TypedFlatMap();
		Usuario usuario = SessionUtils.getUsuarioLogado();
		result.put("funcionario.idUsuario", usuario.getIdUsuario());
		result.put("funcionario.nrMatricula", usuario.getNrMatricula());
		result.put("funcionario.nmFuncionario", usuario.getNmUsuario());
		return result;
	}

	public TypedFlatMap scheduleGerarSimulacao(TypedFlatMap data) {
		List taxas = (List) SessionContext.get(ConstantesTabelaPrecos.TAXAS_IN_SESSION);
		prepareCollection(taxas, "T");
		List generalidades = (List) SessionContext.get(ConstantesTabelaPrecos.GENERALIDADES_IN_SESSION);
		prepareCollection(generalidades, "G");

		data.put("taxas", taxas);
		data.put("generalidades", generalidades);

		DateTime proximaExecucao = JTDateTimeUtils.getDataHoraAtual().plusMinutes(2);

		//Gera a expressão cron
		final String cronExpression = String.format("0 %d %d %d %d ? %d",
										proximaExecucao.getMinuteOfHour(),
										proximaExecucao.getHourOfDay(),
										proximaExecucao.getDayOfMonth(),
										proximaExecucao.getMonthOfYear(),
										proximaExecucao.getYear());

		Usuario usuarioLogado = SessionUtils.getUsuarioLogado();
		getJobService().schedule("tabelaprecos.GerarSimulacao",
							"Gera simulação de uma nova tabela de preço",
							cronExpression,
							new Serializable[]{data},
							usuarioLogado.getLogin(),
							Collections.EMPTY_SET);		
		
		TypedFlatMap result = new TypedFlatMap();
		result.put("resultado", "O processo de geração da simulação irá executar em segundo plano, você receberá a confirmação de execução por email!");
		return result;
	}
	
	@AssynchronousMethod(name="tabelaprecos.GerarSimulacao", type=BatchType.BIZZ_BATCH_SERVICE)
	public TypedFlatMap executeGerarSimulacao(TypedFlatMap data) {
		TabelaPreco tabelaPreco = getTabelaPrecoService().generateSimulacao(data);

		TypedFlatMap result = new TypedFlatMap();
		result.put("resultado", getConfiguracoesFacade().getMensagem("LMS-30039"));
		result.put("tabelaPreco.idTabelaPreco", tabelaPreco.getIdTabelaPreco());
		result.put("tabelaPreco.dtGeracao", tabelaPreco.getDtGeracao());
		return result;
	}

	private void prepareCollection(List list, String tpPrecificacao) {
		if (list != null && list.size() > 0) {
			for (int i = 0; i < list.size(); i++) {
				TabelaPrecoParcela tpp = (TabelaPrecoParcela) list.get(i);
				if ("T".equals(tpPrecificacao)) {
					tpp.getValorTaxa().setIdValorTaxa(null);
				} else if ("G".equals(tpPrecificacao)) {
					tpp.getGeneralidade().setIdGeneralidade(null);
				}
			}
		}
	}

	/**
	 * Efetiva a nova tabela.
	 * @param map
	 */
	public void efetivarTabela(TypedFlatMap map) {
		YearMonthDay dtVigenciaInicial = map.getYearMonthDay("dtVigenciaInicial");
		Long idTabelaPreco = map.getLong("idTabelaPreco");
		Long idSubtipoTabelaPreco = map.getLong("subtipoTabelaPreco.idSubtipoTabelaPreco");
		DomainValue tpTipoTabelaPreco = new DomainValue(map.getString("tipoTabelaPreco.tpTipoTabelaPreco"));

		getTabelaPrecoService().executeEfetivarTabela(idTabelaPreco, idSubtipoTabelaPreco, tpTipoTabelaPreco, Boolean.TRUE, dtVigenciaInicial);
	}

	/**
	 * Setter do servico padrao.
	 * @param serviceService
	 */
	public void setService(TabelaPrecoService serviceService) {
		super.defaultService = serviceService;
	}
	public TabelaPrecoService getTabelaPrecoService() {
		return (TabelaPrecoService) super.defaultService;
	}
	public TipoTabelaPrecoService getTipoTabelaPrecoService() {
		return tipoTabelaPrecoService;
	}
	public JobInterfaceService getJobService() {
		return jobService;
	}
	public void setTipoTabelaPrecoService(TipoTabelaPrecoService tipoTabelaPrecoService) {
		this.tipoTabelaPrecoService = tipoTabelaPrecoService;
	}
	public SubtipoTabelaPrecoService getSubtipoTabelaPrecoService() {
		return subtipoTabelaPrecoService;
	}
	public void setSubtipoTabelaPrecoService(
			SubtipoTabelaPrecoService subtipoTabelaPrecoService) {
		this.subtipoTabelaPrecoService = subtipoTabelaPrecoService;
	}
	public VigenciaService getVigenciaService() {
		return vigenciaService;
	}
	public void setVigenciaService(VigenciaService vigenciaService) {
		this.vigenciaService = vigenciaService;
	}
	public UsuarioService getUsuarioService() {
		return usuarioService;
	}
	public void setUsuarioService(UsuarioService usuarioService) {
		this.usuarioService = usuarioService;
	}
	public ConfiguracoesFacade getConfiguracoesFacade() {
		return configuracoesFacade;
	}
	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}
	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}
	public void setJobService(JobInterfaceService jobService) {
		this.jobService = jobService;
	}
}