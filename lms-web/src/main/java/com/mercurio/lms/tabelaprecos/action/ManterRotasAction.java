package com.mercurio.lms.tabelaprecos.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.MapUtils;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.EnderecoPessoa;
import com.mercurio.lms.configuracoes.model.service.EnderecoPessoaService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.Municipio;
import com.mercurio.lms.municipios.model.MunicipioFilial;
import com.mercurio.lms.municipios.model.Pais;
import com.mercurio.lms.municipios.model.UnidadeFederativa;
import com.mercurio.lms.municipios.model.service.AeroportoService;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.MunicipioFilialService;
import com.mercurio.lms.municipios.model.service.PaisService;
import com.mercurio.lms.municipios.model.service.TipoLocalizacaoMunicipioService;
import com.mercurio.lms.municipios.model.service.UnidadeFederativaService;
import com.mercurio.lms.municipios.model.service.ZonaService;
import com.mercurio.lms.tabelaprecos.model.GrupoRegiao;
import com.mercurio.lms.tabelaprecos.model.RotaPreco;
import com.mercurio.lms.tabelaprecos.model.service.GrupoRegiaoService;
import com.mercurio.lms.tabelaprecos.model.service.RotaPrecoService;
import com.mercurio.lms.tabelaprecos.model.service.TabelaPrecoService;
import com.mercurio.lms.vendas.model.TabelaDivisaoCliente;
import com.mercurio.lms.vendas.model.service.TabelaDivisaoClienteService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.tabelaprecos.manterRotasAction"
 */

public class ManterRotasAction extends CrudAction {
	
	private FilialService filialService;
	
	private EnderecoPessoaService enderecoPessoaService;
	
	private AeroportoService aeroportoService;
	
	private ZonaService zonaService;
	
	private PaisService paisService;
	
	private UnidadeFederativaService unidadeFederativaService;
	
	private MunicipioFilialService municipioFilialService;
	
	private TipoLocalizacaoMunicipioService tipoLocalizacaoMunicipioService;
	
	private GrupoRegiaoService grupoRegiaoService;
	
	private TabelaDivisaoClienteService tabelaDivisaoClienteService;
	
	private TabelaPrecoService tabelaPrecoService;
	
	public TipoLocalizacaoMunicipioService getTipoLocalizacaoMunicipioService() {
		return tipoLocalizacaoMunicipioService;
	}
	public void setTipoLocalizacaoMunicipioService(
			TipoLocalizacaoMunicipioService tipoLocalizacaoMunicipioService) {
		this.tipoLocalizacaoMunicipioService = tipoLocalizacaoMunicipioService;
	}
	public MunicipioFilialService getMunicipioFilialService() {
		return municipioFilialService;
	}
	public void setMunicipioFilialService(
			MunicipioFilialService municipioFilialService) {
		this.municipioFilialService = municipioFilialService;
	}
	public UnidadeFederativaService getUnidadeFederativaService() {
		return unidadeFederativaService;
	}
	public void setUnidadeFederativaService(
			UnidadeFederativaService unidadeFederativaService) {
		this.unidadeFederativaService = unidadeFederativaService;
	}
	public PaisService getPaisService() {
		return paisService;
	}
	public void setPaisService(PaisService paisService) {
		this.paisService = paisService;
	}
	public ZonaService getZonaService() {
		return zonaService;
	}
	public void setZonaService(ZonaService zonaService) {
		this.zonaService = zonaService;
	}
	public AeroportoService getAeroportoService() {
		return aeroportoService;
	}
	public void setAeroportoService(AeroportoService aeroportoService) {
		this.aeroportoService = aeroportoService;
	}
	public EnderecoPessoaService getEnderecoPessoaService() {
		return enderecoPessoaService;
	}
	public void setEnderecoPessoaService(EnderecoPessoaService enderecoPessoaService) {
		this.enderecoPessoaService = enderecoPessoaService;
	}
	public FilialService getFilialService() {
		return filialService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	
	public void setRotaPrecoService(RotaPrecoService rotaPrecoService) {
		this.defaultService = rotaPrecoService;
	}
	
	public RotaPrecoService getRotaPrecoService() {
		return ((RotaPrecoService)defaultService);
	}
	
	public TabelaDivisaoClienteService getTabelaDivisaoClienteService() {
		return tabelaDivisaoClienteService;
	}
	public void setTabelaDivisaoClienteService(
			TabelaDivisaoClienteService tabelaDivisaoClienteService) {
		this.tabelaDivisaoClienteService = tabelaDivisaoClienteService;
	}
	public ResultSetPage findPaginated(TypedFlatMap criteria) {
		return getRotaPrecoService().findPaginated(criteria);
	}
	
    public void removeById(java.lang.Long id) {
    	getRotaPrecoService().removeById(id);
    }

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	getRotaPrecoService().removeByIds(ids);
    }

    public Serializable findById(java.lang.Long id) {
    	return getRotaPrecoService().findById(id);
    }
    
    public List findZona(Map criteria){
    	return getZonaService().find(criteria);
    }
    
    public List findLookupPais(Map criteria){
    	return getPaisService().findLookup(criteria);
    }
    
    public List findUnidadeFederativaByPais(Map criteria){
    	return getUnidadeFederativaService().findByPais(criteria);
    }
    
	public List findTabelaPreco(Map criteria) {
		return getTabelaPrecoService().findLookup(criteria);
	}    
    
	public List findGruposRegiao(Map parameters){		
		Long idTabelaPreco = MapUtils.getLong(parameters,"idTabelaPreco");
		Long idUF = MapUtils.getLong(parameters,"idUF");
		List list = null;
		if(idTabelaPreco != null){
			list = getGrupoRegiaoService().findGruposRegiao(idTabelaPreco, idUF);
		}
		return list;
	}        
    
    public List findByUfGrupoRegiao(TypedFlatMap criteria){		
    	if(criteria == null || 
    	   criteria.get("unidadeFederativaByIdUf.idUnidadeFederativa") == null || 
    	   criteria.get("tabelaDivisaoCliente.idTabelaDivisaoCliente") == null) return null;
    	
    	Long idUnidadeFederativa = MapUtils.getLong(criteria, "unidadeFederativaByIdUf.idUnidadeFederativa");
    	TabelaDivisaoCliente tdc = tabelaDivisaoClienteService.findById(MapUtils.getLong(criteria, "tabelaDivisaoCliente.idTabelaDivisaoCliente"));
    	Long idTabela = tdc.getTabelaPreco().getIdTabelaPreco();
    	List<GrupoRegiao> grupos = getGrupoRegiaoService().findByUfAndTabela(idUnidadeFederativa, idTabela);
    	return grupos;
    	}
    
    public List findLookupMunicipioFilial(Map criteria){
    	List l = getMunicipioFilialService().findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = l.iterator(); iter.hasNext();) {
			MunicipioFilial mf = (MunicipioFilial) iter.next();
			TypedFlatMap data = new TypedFlatMap();
			Municipio m = mf.getMunicipio();
			if(m != null) {
				data.put("municipio.idMunicipio", m.getIdMunicipio());
		    	data.put("municipio.nmMunicipio", m.getNmMunicipio());

		    	data.putAll(findEndereco(mf.getFilial().getIdFilial()));
			}
			Filial f = mf.getFilial();
			data.put("filial.idFilial", f.getIdFilial());
			data.put("filial.sgFilial", f.getSgFilial());
			data.put("filial.pessoa.nmFantasia", f.getPessoa().getNmFantasia());
			retorno.add(data);
		}
		return retorno;
    }
    
    public List findTipoLocalizacao(Map criteria){
    	return getTipoLocalizacaoMunicipioService().find(criteria);
    }
    
    public List findTipoLocalizacaoOperacional(Map criteria){
    	return getTipoLocalizacaoMunicipioService().findTipoLocalizacaoOperacional();
    }
    
    public List findLookupFilial(Map criteria) {
    	List filiais = getFilialService().findLookupBySgFilial(criteria);
    	if(filiais != null && filiais.size() == 1){
    		Map map = (Map)filiais.get(0);
    		map.put("endereco", findEndereco((Long)map.get("idFilial")));
    	}
    	return filiais;
    }
    
	public TypedFlatMap findEndereco(Long idPessoa) {
		EnderecoPessoa ep = findEnderecoPessoa(idPessoa);
		if(ep != null){
			TypedFlatMap data = new TypedFlatMap();
	    	UnidadeFederativa uf = ep.getMunicipio().getUnidadeFederativa();
			data.put("municipio.unidadeFederativa.idUnidadeFederativa", uf.getIdUnidadeFederativa());
			Pais p = uf.getPais();
			data.put("municipio.unidadeFederativa.pais.idPais", p.getIdPais());
			data.put("municipio.unidadeFederativa.pais.nmPais", p.getNmPais());
			data.put("municipio.unidadeFederativa.pais.zona.idZona", p.getZona().getIdZona());
			data.put("municipio.unidadeFederativa.pais.zona.dsZona", p.getZona().getDsZona().getValue());
			return data;
		}
		return null;
	}
	
	 public List findLookupAeroporto(Map criteria) {
	    	List l = getAeroportoService().findLookupAeroporto(criteria);
	    	if(l != null && l.size() == 1){
	    		Map map = (Map)l.get(0);
	    		map.put("endereco", findEndereco((Long)map.get("idAeroporto")));
	    	}
	    	return l;
	 }
    
    public EnderecoPessoa findEnderecoPessoa(Long idPessoa) {
   		return getEnderecoPessoaService()
    			.findEnderecoPessoaPadrao(idPessoa);
    }
    
    public Serializable store(RotaPreco bean) {
    	return getRotaPrecoService().store(bean);
    }

    public Map findRotaById(Long idRota){
    	return getRotaPrecoService().
    	findRotaById(idRota);
    }
	public GrupoRegiaoService getGrupoRegiaoService() {
		return grupoRegiaoService;
}
	public void setGrupoRegiaoService(GrupoRegiaoService grupoRegiaoService) {
		this.grupoRegiaoService = grupoRegiaoService;
	}
	public TabelaPrecoService getTabelaPrecoService() {
		return tabelaPrecoService;
	}
	public void setTabelaPrecoService(TabelaPrecoService tabelaPrecoService) {
		this.tabelaPrecoService = tabelaPrecoService;
	}
    
}
