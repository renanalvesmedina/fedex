package com.mercurio.lms.vol.action;

import java.io.Serializable;
import java.text.Collator;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.dao.DataIntegrityViolationException;

import com.mercurio.adsm.core.util.ReflectionUtils;
import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.masterdetail.ItemList;
import com.mercurio.adsm.framework.model.masterdetail.ItemListConfig;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailAction;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailFactory;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailKey;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntry;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntryConfig;
import com.mercurio.adsm.framework.util.FilterResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Funcionario;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.configuracoes.model.service.FuncionarioService;
import com.mercurio.lms.configuracoes.model.service.UsuarioService;
import com.mercurio.lms.contratacaoveiculos.model.MeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteService;
import com.mercurio.lms.municipios.model.Empresa;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vol.model.VolEquipamentos;
import com.mercurio.lms.vol.model.VolGrfrFuncionarios;
import com.mercurio.lms.vol.model.VolGrfsVeiculos;
import com.mercurio.lms.vol.model.VolGruposFrotas;
import com.mercurio.lms.vol.model.service.VolEquipamentosService;
import com.mercurio.lms.vol.model.service.VolGrfrFuncionariosService;
import com.mercurio.lms.vol.model.service.VolGrfsVeiculosService;
import com.mercurio.lms.vol.model.service.VolGruposFrotasService;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;


/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.vol.manterGruposFrotasAction"
 * 					
 */

public class ManterGruposFrotasAction extends MasterDetailAction {
	
	private FilialService filialService;
	private MeioTransporteService meioTransporteService;
	private VolGrfsVeiculosService volGrfsVeiculosService;
	private UsuarioService usuarioService;
	private VolGrfrFuncionariosService volGrfrFuncionariosService;
	private VolEquipamentosService volEquipamentosService; 
	private FuncionarioService funcionarioService;
	
	public VolGruposFrotasService getVolGruposFrotasService() {
		return (VolGruposFrotasService) super.getMasterService();
	}	
	
	public void setVolGruposFrotasService(VolGruposFrotasService volGruposFrotasService) {
		this.setMasterService(volGruposFrotasService);
	}
	
	public void removeById(java.lang.Long id) {
		TypedFlatMap criteria = new TypedFlatMap();
		criteria.put("volGruposFrota.idGrupoFrota",id);
		
	    List volGrfsVeiculosList = getVolGrfsVeiculosService().find(criteria);
	    for (Iterator iter = volGrfsVeiculosList.iterator(); iter.hasNext(); ) {
	    	VolGrfsVeiculos volGrfsVeiculos = (VolGrfsVeiculos)iter.next();
	    	getVolGrfsVeiculosService().removeById(volGrfsVeiculos.getIdGruVeic());
	    }
	    
	    List volGrfrFuncionariosList = getVolGrfrFuncionariosService().find(criteria);
	    for (Iterator iter = volGrfrFuncionariosList.iterator(); iter.hasNext(); ) {
	    	VolGrfrFuncionarios volGrfrFuncionarios = (VolGrfrFuncionarios)iter.next();
	    	getVolGrfrFuncionariosService().removeById(volGrfrFuncionarios.getIdGruFunc());
	    }
	    
		getVolGruposFrotasService().removeById(id);
	}
	
	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		for (int i=0; i < ids.size(); i++){
			this.removeById((Long)ids.get(i));
		}
	}
	
	public Object findById(java.lang.Long id) {
		Object masterObj = getVolGruposFrotasService().findById(id);
		putMasterInSession(masterObj);
		return masterObj;
    }
	
	public ResultSetPage findPaginatedGruposFrota(TypedFlatMap criteria) {
		return getVolGruposFrotasService().findPaginatedGruposFrota(criteria);
	}
	               
	public Integer getRowCountGruposFrota(TypedFlatMap criteria) {
		return getVolGruposFrotasService().getRowCountGruposFrota(criteria);
	}

	public Serializable store(TypedFlatMap tela) {
	    /* dados da filial informado na tela */
		
		Filial filial = new Filial();
		
		filial.setIdFilial(tela.getLong("filial.idFilial"));
	
		/* Validar vigencia da Filial */
		getVolGruposFrotasService().validateFilialVigente(tela.getLong("filial.idFilial"));
		
		MasterEntry entry = getMasterFromSession(tela.getLong("idGrupoFrota"), true);
		
		VolGruposFrotas volGruposFrotas = (VolGruposFrotas)entry.getMaster();
		volGruposFrotas.setDsNome(tela.getString("dsNome"));
	    volGruposFrotas.setFilial(filial); 
		
	    boolean novoGrupo = (volGruposFrotas.getIdGrupoFrota() == null);
	    
	    Serializable s = getVolGruposFrotasService().store(volGruposFrotas);
	    
	    /* associa automaticamente o usuario logado ao grupo*/
	    if (novoGrupo) {
	    	VolGrfrFuncionarios volGrfrFuncionarios = new VolGrfrFuncionarios();
	    	volGrfrFuncionarios.setVolGruposFrota(volGruposFrotas);
	    	volGrfrFuncionarios.setUsuario(SessionUtils.getUsuarioLogado());
	    	getVolGrfrFuncionariosService().store(volGrfrFuncionarios);
	    }
	    
	    ItemList itemsMeioTransporte = getItemsFromSession(entry, "meioTransporte");
		
		/* Exclui os filhos previamente excluidos da sessão - MeioTransporte*/
		List itemsMeioTransporteRemovedItems = itemsMeioTransporte.getRemovedItems();
		for (Iterator iter = itemsMeioTransporteRemovedItems.iterator();iter.hasNext();) {
			VolGrfsVeiculos volGrfsVeiculos = (VolGrfsVeiculos)iter.next();
			
			getVolGrfsVeiculosService().removeById(volGrfsVeiculos.getIdGruVeic());
		}
		
		/* Salva os filhos - MeioTransporte*/
		List itemsMeioTransporteList = itemsMeioTransporte.getNewOrModifiedItems();
		for (Iterator iter = itemsMeioTransporteList.iterator();iter.hasNext();) {
			VolGrfsVeiculos volGrfsVeiculos = (VolGrfsVeiculos)iter.next();
			getVolGrfsVeiculosService().store(volGrfsVeiculos);
		}
		
		ItemList itemsUsuario = getItemsFromSession(entry, "usuario");
		
		/* Exclui os filhos previamente excluidos da sessão - Funcionarios*/
		List itemsUsuarioRemovedItems = itemsUsuario.getRemovedItems(); 
		for(Iterator iter = itemsUsuarioRemovedItems.iterator();iter.hasNext();){
			VolGrfrFuncionarios volGrfrFuncionarios = (VolGrfrFuncionarios)iter.next();

			getVolGrfrFuncionariosService().removeById(volGrfrFuncionarios.getIdGruFunc());
		}
		
		/* Salva os filhos - Funcionarios */
		List itemsUsuarioList = itemsUsuario.getNewOrModifiedItems(); 
		for(Iterator iter = itemsUsuarioList.iterator();iter.hasNext();){
			VolGrfrFuncionarios volGrfrFuncionarios = (VolGrfrFuncionarios)iter.next();
			if (! getVolGrfrFuncionariosService().validateGruposFrota(volGruposFrotas.getIdGrupoFrota(),volGrfrFuncionarios.getUsuario().getIdUsuario())) {
				getVolGrfrFuncionariosService().store(volGrfrFuncionarios);	
			}

		}
	    updateMasterInSession(entry);
		return s;
	}
	
	public Serializable storeMeioTransporte(TypedFlatMap parameters) {
		Long masterId = (Long) getMasterId(parameters);
    	Long idMeioTransporte = parameters.getLong("meioTransporte.idMeioTransporte");

    	MasterEntry entry = getMasterFromSession(masterId, true);
    	ItemList items = getItemsFromSession(entry, "meioTransporte");
		Serializable s = null;
		
		validaMeioTransporteEmGrupo(masterId, parameters, idMeioTransporte, items);
		
		/* busca meio de transporte em outro grupo frota 
		 * se encontrou, volta para o callback do jsp para verificar se deseja transferir o meio de transporte */
		Map r = getVolGrfsVeiculosService().findGruposFrotaByIdMeioTransporte(idMeioTransporte);
		if (r != null) {
			Map result = new HashMap();
			Map meioTransporte = new HashMap();
				
			meioTransporte.put("idMeioTransporte",idMeioTransporte);
			result.put("idGrupoFrota",r.get("idGrupoFrota"));
			result.put("idGruVeic",r.get("idGruVeic"));
			result.put("masterId",masterId);
			result.put("chave","LMS-41001");
			result.put("meioTransporte",meioTransporte);
			return (Serializable)result;
		} else {
		  s = saveItemInstance(parameters, "meioTransporte");
		}
		return s; 
	}

	/* Efetuar a transferencia de meio de transporte 
	 * entre grupos frota
	 */
	public Serializable storeMeioTransporteTransferencia(TypedFlatMap parameters) {
		/* exclui associação entre grupo frota e meio de transporte transferido para outro grupo frota */
        VolGrfsVeiculos volGrfsVeiculos = new VolGrfsVeiculos();
		volGrfsVeiculos.setIdGruVeic(parameters.getLong("idGruVeic"));
		
		ItemList itemList = loadItemList(parameters.getLong("masterId"), "meioTransporte", parameters);
		
		itemList.getRemovedItems().add(volGrfsVeiculos);
	    return saveItemInstance(parameters, "meioTransporte");
	}
	
	
	private void validaMeioTransporteEmGrupo(Long masterId, TypedFlatMap parameters, Long idMeioTranporte, ItemList items) {
    	if (items != null) {
    		// Verfica se o Meio de transporte já esta cadastrado para este Grupo de Frota (Na sessão)
    		ItemListConfig itemListConfig = getMasterConfig().getItemListConfig("meioTransporte");
	    	for (Iterator iter = items.iterator(masterId, itemListConfig); iter.hasNext();) {
	    		VolGrfsVeiculos grfsVeiculos = (VolGrfsVeiculos) iter.next();
		    	if (grfsVeiculos.getMeioTransporte() != null && grfsVeiculos.getMeioTransporte().getIdMeioTransporte().compareTo(idMeioTranporte) == 0)
		    		throw new BusinessException("LMS-41025");
	    	}
    	}
	}
 	
    public List findLookupFilialByEmpresa(TypedFlatMap map) {
    	Empresa empresa = (Empresa)SessionUtils.getEmpresasUsuarioLogado().get(0);
    	List result = getFilialService().findFilialBySgEmpresaLookup(map.getString("sgFilial"),empresa.getIdEmpresa());
    	List resultList = new ArrayList();
    	for (Iterator iter = result.iterator();iter.hasNext();) {
    		Map mapResult = (Map)iter.next();

    		TypedFlatMap tfm = new TypedFlatMap();
    		
    		tfm.put("idFilial", mapResult.get("idFilial"));
   		    tfm.put("sgFilial", mapResult.get("sgFilial"));
   		    tfm.put("pessoa.nmFantasia",mapResult.get("nmFantasia"));
    		
   		    resultList.add(tfm);
    	}
    	
    	return resultList;
    }

	public List findLookupFilialByUsuarioLogado(TypedFlatMap map) {
		List listFilial = this.filialService.findLookupByUsuarioLogado(map);
		
		if ( listFilial.isEmpty() ) {
			return listFilial;
		}
		
		List resultList = new ArrayList();
		
		Iterator iterator = listFilial.iterator();
		Map filial = (Map)iterator.next();
		TypedFlatMap typedFlatMap = new TypedFlatMap();
		typedFlatMap.put("idFilial", filial.get("idFilial") );
		typedFlatMap.put("pessoa.nmFantasia", filial.get("pessoa.nmFantasia") );
		typedFlatMap.put("sgFilial", filial.get("sgFilial") );
		resultList.add(typedFlatMap);
		
		return resultList;
	}
    
    public FilialService getFilialService() {
    	return filialService;
    }
    
    public void setFilialService(FilialService filialService) {
    	this.filialService = filialService;
    }
    
    /**
     * Busca o usuario da sessao e retorna para a tela
     * 
     * @return
     */
    public Map findFilialUsuarioLogado() {
    	
    	Filial filial = SessionUtils.getFilialSessao();
    	
    	Map mapFilial = new HashMap();
    	mapFilial.put("idFilial", filial.getIdFilial());
    	mapFilial.put("sgFilial", filial.getSgFilial());
    	
    	Map mapPessoa = new HashMap();
    	mapPessoa.put("nmFantasia", filial.getPessoa().getNmFantasia());
    	mapFilial.put("pessoa", mapPessoa);
    	
    	Map mapSessionObjects = new HashMap();
    	mapSessionObjects.put("filial", mapFilial);
    	
    	return mapSessionObjects;
    }

    public List findLookupUsuarioFuncionario(TypedFlatMap parameters) {

		Long idFilial = parameters.getLong("filial.idFilial");
		String nrMatricula = parameters.getString("nrMatricula");

		return this.getUsuarioService().findLookupUsuarioFuncionario(null,
				nrMatricula, idFilial, null, null, null, true);
	}
    
    public List findLookupMeioTransporte(Map criteria) {
    	List result = getMeioTransporteService().findLookup(criteria);
    	return result;
    }

	public MeioTransporteService getMeioTransporteService() {
		return meioTransporteService;
	}

	public void setMeioTransporteService(MeioTransporteService meioTransporteService) {
		this.meioTransporteService = meioTransporteService;
	}

	public VolGrfsVeiculosService getVolGrfsVeiculosService() {
		return volGrfsVeiculosService;
	}

	public void setVolGrfsVeiculosService(
			VolGrfsVeiculosService volGrfsVeiculosService) {
		this.volGrfsVeiculosService = volGrfsVeiculosService;
	}

	public ResultSetPage findPaginatedGruposFrotaMeiosTransporte(TypedFlatMap criteria) {
    	ResultSetPage rsp = findPaginatedItemList(criteria, "meioTransporte");
		 
		 FilterResultSetPage filter = new FilterResultSetPage(rsp) {
			 
			 	public Map filterItem(Object item) {
			 		
			 		TypedFlatMap tfm = new TypedFlatMap();
			 		VolGrfsVeiculos volGrfsVeiculos = (VolGrfsVeiculos) item;
			 		
			 		MeioTransporte meioTransporte = volGrfsVeiculos.getMeioTransporte();
			 		VolGruposFrotas volGruposFrotas = volGrfsVeiculos.getVolGruposFrota();
			 		
			 		if (Hibernate.isInitialized(meioTransporte.getVolEquipamentos())) {
			 		   List volEquipamentosList = meioTransporte.getVolEquipamentos();
			 		   if (! volEquipamentosList.isEmpty()) { 
			 		       VolEquipamentos volEquipamentos = (VolEquipamentos)volEquipamentosList.get(0);
  			 		       tfm.put("meioTransporte.volEquipamentos.idEquipamento",volEquipamentos.getIdEquipamento());
			 		       tfm.put("meioTransporte.volEquipamentos.dsNumero",volEquipamentos.getDsNumero());
			 		   }
			 		}
			 		
			 		tfm.put("meioTransporte.idMeioTransporte",meioTransporte.getIdMeioTransporte());
			 		tfm.put("meioTransporte.nrFrota",meioTransporte.getNrFrota());
			 		tfm.put("meioTransporte.nrIdentificador",meioTransporte.getNrIdentificador());
					
			 		tfm.put("volGruposFrota.idGrupoFrota",volGruposFrotas.getIdGrupoFrota());
			 		tfm.put("volGruposFrota.dsNome",volGruposFrotas.getDsNome());
			 		
			 		tfm.put("idGruVeic",volGrfsVeiculos.getIdGruVeic());
			 		return tfm;
			 	};
			 };
			 
		 return (ResultSetPage) filter.doFilter(); 
	}
	               
	public Integer getRowCountGruposFrotaMeiosTransporte(TypedFlatMap criteria) {
		return getRowCountItemList(criteria, "meioTransporte");
	}
	
	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIdsGruposFrotaMeiosTransporte(List ids) {
		super.removeItemByIds(ids,"meioTransporte");
	}
	
	
	
	public void removeItemByIds(Long idMaster,List ids, String itemConfigAlias) {
		MasterEntry entry = getMasterFromSession(idMaster, false);
    	if (entry == null) {
    		return;
    	}
    	ItemList itemList = getItemsFromSession(entry, itemConfigAlias);
    	
    	for (Iterator iter = ids.iterator(); iter.hasNext();) {
			Long id = (Long) iter.next();
			itemList.removeById(id);
		}
    	updateMasterInSession(entry); // atualiza na sessão o objeto
	}
	
	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIdsGruposFrotaUsuario(List ids) {
		MasterEntry entry = getMasterFromSession(null, false);
    	if (entry == null) {
    		return;
    	}
    	/* deve haver ao menos um usuario associado ao grupo frota */
		ItemList itemList = getItemsFromSession(entry, "usuario");
		if (ids.size() == itemList.size() ) {
			throw new BusinessException("LMS-41042");
		}
		super.removeItemByIds(ids,"usuario");
	}
	
	public List findLookupUsuario(TypedFlatMap map) {
    	return getUsuarioService().findLookupUsuario(map);
    }
		
	public ResultSetPage findPaginatedGruposFrotaUsuario(TypedFlatMap criteria) {
		
    	ResultSetPage rsp = findPaginatedItemList(criteria, "usuario");
    	
    	  FilterResultSetPage filter = new FilterResultSetPage(rsp) {
			 
		 	 public Map filterItem(Object item) {
		 		
		 		TypedFlatMap tfm = new TypedFlatMap();
		 		VolGrfrFuncionarios volGrfrFuncionarios = (VolGrfrFuncionarios) item;
		 		
		 		Usuario usuario  = volGrfrFuncionarios.getUsuario();
		 		VolGruposFrotas volGruposFrotas = volGrfrFuncionarios.getVolGruposFrota();
		 		
		 		if (Hibernate.isInitialized(volGrfrFuncionarios.getUsuario().getVfuncionario())) {
		 		   Funcionario funcionario = volGrfrFuncionarios.getUsuario().getVfuncionario();
		 		   tfm.put("funcionario.dsFuncao",funcionario.getDsFuncao());
		 		}
		 		tfm.put("usuario.nmUsuario",usuario.getNmUsuario());
		 		tfm.put("usuario.login",usuario.getLogin());
		 		tfm.put("usuario.nrMatricula",usuario.getNrMatricula());
				tfm.put("volGruposFrota.idGrupoFrota",volGruposFrotas.getIdGrupoFrota());
				tfm.put("volGruposFrota.dsNome",volGruposFrotas.getDsNome());
				tfm.put("idGruFunc",volGrfrFuncionarios.getIdGruFunc());
		 		return tfm;
		 	};
		 };
		 
	 return (ResultSetPage) filter.doFilter();
	}
	               
	public Integer getRowCountGruposFrotaUsuario(TypedFlatMap criteria) {
		return getRowCountItemList(criteria, "usuario");
	}
	
	public Serializable storeUsuarios(TypedFlatMap parameters) {
		Long masterId = (Long) getMasterId(parameters);
    	Long idUsuario = parameters.getLong("usuario.idUsuario");

    	MasterEntry entry = getMasterFromSession(masterId, true);
    	ItemList items = getItemsFromSession(entry, "usuario");
	
		validaUsuarioEmGrupo(masterId, parameters, idUsuario, items);
		  
		return saveItemInstance(parameters, "usuario");
	}
	
	private void validaUsuarioEmGrupo(Long masterId, TypedFlatMap parameters, Long idUsuario, ItemList items) {
    	if (items != null) {
    		// Verfica se o Usuario já esta cadastrado para este Grupo de Frota (Na sessão)
    		ItemListConfig itemListConfig = getMasterConfig().getItemListConfig("usuario");
	    	for (Iterator iter = items.iterator(masterId, itemListConfig); iter.hasNext();) {
	    		VolGrfrFuncionarios grfrFuncionarios = (VolGrfrFuncionarios) iter.next();
		    	if (grfrFuncionarios.getUsuario() != null && grfrFuncionarios.getUsuario().getIdUsuario().compareTo(parameters.getLong("usuario.idUsuario")) == 0)
		    		throw new BusinessException("LMS-41002");
	    	}
    	}
    	return;
	}


	public UsuarioService getUsuarioService() {
		return usuarioService;
	}

	public void setUsuarioService(UsuarioService usuarioService) {
		this.usuarioService = usuarioService;
	}

	
    //####################################
    // Dados da DF2
    //####################################
    
	public Object findByIdMeioTransporte(MasterDetailKey key) {
    	return  findItemById(key, "meioTransporte");
	}
	
	public Object findByIdUsuario(MasterDetailKey key) {
    	return  findItemById(key, "usuario");
	}
	
	@Override
	protected MasterEntryConfig createMasterConfig(MasterDetailFactory masterFactory) {
		
		MasterEntryConfig config = masterFactory.createMasterEntryConfig(VolGruposFrotas.class,true);

		Comparator meioTransporteComparator = new Comparator() {
			public int compare(Object obj1, Object obj2) {
				Collator collator = Collator.getInstance(LocaleContextHolder.getLocale());
				
				VolGrfsVeiculos v1 = (VolGrfsVeiculos)obj1;
				VolGrfsVeiculos v2 = (VolGrfsVeiculos)obj2;

				return  collator.compare(v1.getMeioTransporte().getNrFrota(),
						                 v2.getMeioTransporte().getNrFrota());
		
			}    		
    	};
    	
    	Comparator usuarioComparator = new Comparator() {
			public int compare(Object obj1, Object obj2) {
                Collator collator = Collator.getInstance(LocaleContextHolder.getLocale());
				
				VolGrfrFuncionarios v1 = (VolGrfrFuncionarios)obj1;
				VolGrfrFuncionarios v2 = (VolGrfrFuncionarios)obj2;

				return  collator.compare(v1.getUsuario().getNmUsuario(),
						                 v2.getUsuario().getNmUsuario());
			}
    	};
    	    	
    	//########################
    	// Primeira aba
    	//########################
    	ItemListConfig meioTransporteListConfig = new ItemListConfig() {
 
			public List initialize(Long masterId, Map parameters) {
				List result = getVolGruposFrotasService().findMeioTransporteByIdGrupoFrota(masterId);

				List volGrfsVeiculosList = new ArrayList(1);
				for (Iterator iter = result.iterator();iter.hasNext();) {
					TypedFlatMap tfm = (TypedFlatMap)iter.next();

					List volEquipamentosList = new ArrayList();
					VolEquipamentos volEquipamentos = new VolEquipamentos();
					volEquipamentos.setIdEquipamento(tfm.getLong("volEquipamentos.idEquipamento"));
					volEquipamentos.setDsNumero(tfm.getString("volEquipamentos.dsNumero"));
					volEquipamentosList.add(volEquipamentos); 
					
					MeioTransporte meioTransporte = new MeioTransporte();
					meioTransporte.setIdMeioTransporte(tfm.getLong("meioTransporte.idMeioTransporte"));
					meioTransporte.setNrFrota(tfm.getString("meioTransporte.nrFrota"));
					meioTransporte.setNrIdentificador(tfm.getString("meioTransporte.nrIdentificador"));
					meioTransporte.setVolEquipamentos(volEquipamentosList);
					
					VolGruposFrotas volGruposFrotas = new VolGruposFrotas();
					volGruposFrotas.setIdGrupoFrota(tfm.getLong("volGruposFrota.idGrupoFrota"));
					volGruposFrotas.setDsNome(tfm.getString("volGruposFrota.dsNome"));
					
					VolGrfsVeiculos volGrfsVeiculos = new VolGrfsVeiculos();
					volGrfsVeiculos.setIdGruVeic(tfm.getLong("idGruVeic"));
					volGrfsVeiculos.setMeioTransporte(meioTransporte);
					volGrfsVeiculos.setVolGruposFrota(volGruposFrotas);
					
					volGrfsVeiculosList.add(volGrfsVeiculos);
				}
				return volGrfsVeiculosList;			
			}
			
			public Integer getRowCount(Long masterId, Map parameters) {
				return getVolGruposFrotasService().getRowCountMeioTransporteByIdGrupoFrota(masterId);
			}			
			
            public void setMasterOnItem(Object master, Object itemBean) {
            	VolGruposFrotas volGruposFrotas = (VolGruposFrotas) master;
            	VolGrfsVeiculos volGrfsVeiculos = (VolGrfsVeiculos) itemBean;
            	volGrfsVeiculos.setVolGruposFrota(volGruposFrotas);
            }
            
			public Object populateNewItemInstance(Map parameters, Object object) {
				TypedFlatMap criteria = (TypedFlatMap) parameters;
				
				VolGrfsVeiculos volGrfsVeiculos = new VolGrfsVeiculos();
				
				//Populando objeto...
				MeioTransporte meioTransporte = getMeioTransporteService().findById(criteria.getLong("meioTransporte.idMeioTransporte"));
				
				List result =  getVolEquipamentosService().findEquipamentoByIdMeioTransporte(criteria.getLong("meioTransporte.idMeioTransporte"), null);
				if (! result.isEmpty()) {
					Map m = (Map)result.get(0);
					
					List volEquipamentosList = new ArrayList();
					VolEquipamentos volEquipamentos = new VolEquipamentos();
					volEquipamentos.setIdEquipamento((Long)m.get("idEquipamento"));
					volEquipamentos.setDsNumero((String)m.get("dsNumero"));
					volEquipamentosList.add(volEquipamentos);
					
					meioTransporte.setVolEquipamentos(volEquipamentosList);
				}
				volGrfsVeiculos.setMeioTransporte(meioTransporte);
				
				return volGrfsVeiculos;
			}
			
			public void modifyItemValues(Object newBean, Object oldBean) {
				VolGrfsVeiculos volGrfsVeiculosNew = (VolGrfsVeiculos)newBean;
				VolGrfsVeiculos volGrfsVeiculosOld = (VolGrfsVeiculos)oldBean;
				
				volGrfsVeiculosOld.setIdGruVeic(volGrfsVeiculosNew.getIdGruVeic());
				volGrfsVeiculosOld.setMeioTransporte(volGrfsVeiculosNew.getMeioTransporte());
				volGrfsVeiculosOld.setVolGruposFrota(volGrfsVeiculosNew.getVolGruposFrota());
								
			}

			public Map configItemDomainProperties() {
				return null;
			}

    	};

    	//########################
    	// Segunda aba
    	//########################
    	ItemListConfig usuarioListConfig = new ItemListConfig() {
    		 
			public List initialize(Long masterId, Map parameters) {
				
				List result = getVolGruposFrotasService().findUsuarioByIdGrupoFrota(masterId);
				List volGrfrFuncionariosList = new ArrayList(1);
				
				for (Iterator iter = result.iterator();iter.hasNext();) {
					TypedFlatMap tfm = (TypedFlatMap)iter.next();
					
					Usuario usuario  = new Usuario();
					usuario.setIdUsuario(tfm.getLong("usuario.idUsuario"));
					usuario.setNmUsuario(tfm.getString("usuario.nmUsuario"));
					usuario.setLogin(tfm.getString("usuario.login"));
					usuario.setNrMatricula(tfm.getString("usuario.nrMatricula"));
					
					Funcionario funcionario = getFuncionarioService().findByNrMatricula(usuario.getNrMatricula());
					
					if (funcionario == null ) {
						funcionario = new Funcionario();
						funcionario.setDsFuncao("");
					}
					usuario.setVfuncionario(funcionario);
					
					VolGruposFrotas volGruposFrotas = new VolGruposFrotas();
					volGruposFrotas.setIdGrupoFrota(tfm.getLong("volGruposFrota.idGrupoFrota"));
					volGruposFrotas.setDsNome(tfm.getString("volGruposFrota.dsNome"));
					
					VolGrfrFuncionarios volGrfrFuncionarios = new VolGrfrFuncionarios();
					volGrfrFuncionarios.setIdGruFunc(tfm.getLong("idGruFunc"));
					volGrfrFuncionarios.setUsuario(usuario);
					volGrfrFuncionarios.setVolGruposFrota(volGruposFrotas);
					
					volGrfrFuncionariosList.add(volGrfrFuncionarios);
				}
				return volGrfrFuncionariosList;			
			}
			
			public Integer getRowCount(Long masterId, Map parameters) {
				return getVolGruposFrotasService().getRowCountUsuarioByIdGrupoFrota(masterId);
			}			
			
            public void setMasterOnItem(Object master, Object itemBean) {
            	VolGruposFrotas volGruposFrotas = (VolGruposFrotas) master;
            	VolGrfrFuncionarios volGrfrFuncionarios = (VolGrfrFuncionarios) itemBean;
            	volGrfrFuncionarios.setVolGruposFrota(volGruposFrotas);
            }
            
			public Object populateNewItemInstance(Map parameters, Object object) {
				TypedFlatMap criteria = (TypedFlatMap) parameters;
				
				VolGrfrFuncionarios volGrfrFuncionarios = new VolGrfrFuncionarios();
				
				//Populando objeto...
				Usuario Usuario = getUsuarioService().findById(criteria.getLong("usuario.idUsuario"));
				
				volGrfrFuncionarios.setUsuario(Usuario);
				
				return volGrfrFuncionarios;
			}
			
			public void modifyItemValues(Object newBean, Object oldBean) {
				VolGrfrFuncionarios volGrfrFuncionariosNew = (VolGrfrFuncionarios)newBean;
				VolGrfrFuncionarios volGrfrFuncionariosOld = (VolGrfrFuncionarios)oldBean;
				
				volGrfrFuncionariosOld.setIdGruFunc(volGrfrFuncionariosNew.getIdGruFunc());
				volGrfrFuncionariosOld.setVolGruposFrota(volGrfrFuncionariosNew.getVolGruposFrota());
				volGrfrFuncionariosOld.setUsuario(volGrfrFuncionariosNew.getUsuario());
								
			}

			public Map configItemDomainProperties() {
				return null;
			}

    	};
    	
    	//Seta as configuracoes do filho...
    	config.addItemConfig("meioTransporte", VolGrfsVeiculos.class, meioTransporteListConfig, meioTransporteComparator);
    	config.addItemConfig("usuario", VolGrfrFuncionarios.class, usuarioListConfig,usuarioComparator);
		
		return config;
	}

	public VolGrfrFuncionariosService getVolGrfrFuncionariosService() {
		return volGrfrFuncionariosService;
	}

	public void setVolGrfrFuncionariosService(
			VolGrfrFuncionariosService volGrfrFuncionariosService) {
		this.volGrfrFuncionariosService = volGrfrFuncionariosService;
	}
	
	public void executeAssociarUsuarioFrotas(TypedFlatMap criteria)  {
		Usuario usu = SessionUtils.getUsuarioLogado();
		
		if (criteria.getLong("idUsuario") == null) {
			throw new BusinessException("LMS-41041");
		}
		
		if (usu.getIdUsuario().equals(criteria.getLong("idUsuario"))) {
			throw new BusinessException("LMS-41039");
		}
		List ids = null ;
	
		/* Se escolheu associar todos então busca todas as frotas do usuario logado*/
		if (criteria.get("frota.ids") == null) {
			ids = getVolGrfrFuncionariosService().findGruposFrotaByUsuario(SessionUtils.getUsuarioLogado().getIdUsuario());
		} else {
			ids = (List)ReflectionUtils.convertListValuesToObject((List)criteria.get("frota.ids"), Long.class);
		}
		
		Usuario usuario = this.usuarioService.findById(criteria.getLong("idUsuario"));
		
		for (Iterator iter = ids.iterator(); iter.hasNext();) {
			try {
				Long id = (Long)iter.next();
				
				VolGruposFrotas volGruposFrotas = getVolGruposFrotasService().findById(Long.valueOf(id));
		
				VolGrfrFuncionarios volGrfrFuncionarios = new VolGrfrFuncionarios();
				volGrfrFuncionarios.setVolGruposFrota(volGruposFrotas);
				volGrfrFuncionarios.setUsuario(usuario);
				
				getVolGrfrFuncionariosService().store(volGrfrFuncionarios);
			} catch (DataIntegrityViolationException e) { 
				/* continua a inserção mesmo se houver falha em 1 registro com unique constraint */
				System.out.print(e);
			}
		}
	}

	public VolEquipamentosService getVolEquipamentosService() {
		return volEquipamentosService;
	}

	public void setVolEquipamentosService(
			VolEquipamentosService volEquipamentosService) {
		this.volEquipamentosService = volEquipamentosService;
	}

	public FuncionarioService getFuncionarioService() {
		return funcionarioService;
	}

	public void setFuncionarioService(FuncionarioService funcionarioService) {
		this.funcionarioService = funcionarioService;
	}
	
}
