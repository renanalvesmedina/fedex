package com.mercurio.lms.vol.action;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.PrestadorServico;
import com.mercurio.lms.carregamento.model.service.PrestadorServicoService;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.configuracoes.model.service.UsuarioLMSService;
import com.mercurio.lms.configuracoes.model.service.UsuarioService;

import com.mercurio.lms.contratacaoveiculos.model.Motorista;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteService;
import com.mercurio.lms.contratacaoveiculos.model.service.MotoristaService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.FormatUtils;

import com.mercurio.lms.util.PessoaUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vol.model.VolEquipamentos;
import com.mercurio.lms.vol.model.VolRetiradasEqptos;
import com.mercurio.lms.vol.model.service.VolEquipamentosService;
import com.mercurio.lms.vol.model.service.VolGruposFrotasService;
import com.mercurio.lms.vol.model.service.VolRetiradasEqptosService;
import com.mercurio.lms.vol.report.EmitirTermoCompromissoService;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Generated by: ADSM ActionGenerator
 * 
 * Não inserir documentação após ou remover a tag do XDoclet a seguir. O valor
 * do <code>id</code> informado abaixo deve ser utilizado para referenciar
 * este serviço.
 * 
 * @spring.bean id="lms.vol.controleEquipamentosAction"
 */

public class ControleEquipamentosAction extends CrudAction {

	private Logger log = LogManager.getLogger(this.getClass());
	private FilialService filialService;
	private MeioTransporteService meioTransporteService;
	private VolGruposFrotasService volGruposFrotasService;
    private PrestadorServicoService prestadorServicoService;
    private VolEquipamentosService volEquipamentosService;
    private UsuarioService usuarioService;
    private UsuarioLMSService usuarioLMSService;
    private EmitirTermoCompromissoService emitirTermoCompromissoService;    	
    private MotoristaService motoristaService;
 
	public void setService(VolRetiradasEqptosService serviceService) {
		this.defaultService = serviceService;
	}

	public VolRetiradasEqptosService getVolRetiradasEqptosService() {
		return (VolRetiradasEqptosService) super.defaultService;
	}

	public void removeById(java.lang.Long id) {
		getVolRetiradasEqptosService().removeById(id);
	}

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		getVolRetiradasEqptosService().removeByIds(ids);
	}

	public TypedFlatMap findById(java.lang.Long id) {
		VolRetiradasEqptos volRetiradasEqptos = getVolRetiradasEqptosService().findById(id);
		TypedFlatMap result = new TypedFlatMap();

		result.put("idRetiradaEqp", volRetiradasEqptos.getIdRetiradaEqp());
		return result; 
	}

	public ResultSetPage findPaginated(TypedFlatMap criteria) {
		ResultSetPage rsp = getVolRetiradasEqptosService().findPaginatedControleEquipamentos(criteria);
		return rsp;
	}

	public Integer getRowCount(TypedFlatMap criteria) {
		return getVolRetiradasEqptosService().getRowCountControleEquipamentos(criteria);
	}
	
    public List findLookupMotorista(TypedFlatMap criteria) {
    	List list = motoristaService.findLookupMotorista(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		Motorista motorista = (Motorista)iter.next();
    		TypedFlatMap typedFlatMap = new TypedFlatMap();
    		typedFlatMap.put("idMotorista", motorista.getIdMotorista());
    		typedFlatMap.put("pessoa.tpIdentificacao", motorista.getPessoa().getTpIdentificacao());
    		typedFlatMap.put("pessoa.nrIdentificacao", motorista.getPessoa().getNrIdentificacao());
    		typedFlatMap.put("pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(motorista.getPessoa()));
    		typedFlatMap.put("pessoa.nmPessoa", motorista.getPessoa().getNmPessoa());
    		retorno.add(typedFlatMap);
    	}
    	return retorno;
    }
	
    /**
     * Utilizado pela tela "controleEquipamentosCad", a qual foi retirada do sistema, pois a retirada 
     * será feita eutomaticamente pelo aparelho celular. 
     * Obs.: o blTermoComp agora está em Motorista
     * @param tela
     * @return
     */
	@Deprecated
	public List findUsuario(TypedFlatMap tela){
		/* Funcionario */
		Usuario usuario = null;
		
		/* Terceiro */
		PrestadorServico prestadorServico = null;
		
		TypedFlatMap map = new TypedFlatMap(); 
		List listResult = new ArrayList();
		
		/* caso seja um funcionário pega o idUsuario, senão pega o idTerceiro */
		if(tela.getLong("idUsuario") != null){
			usuario = this.getUsuarioService().findById(tela.getLong("idUsuario"));
			if ((usuario.getBlTermoComp() != null) && (usuario.getBlTermoComp())) {
			   	map.put("blTermoComp", 'S');
			} else {
			    map.put("blTermoComp", 'N'); 
			}
			
			List listFilial = this.getFilialService().findFilialByMatriculaUsuario(usuario.getNrMatricula());
			Map filial = (Map)listFilial.get(0);
	    	map.put("idFilial", filial.get("idFilial"));
			map.put("sgFilial", filial.get("sgFilial"));
			map.put("nmFilial", filial.get("nmFilial"));
			
		}else{
			prestadorServico = this.getPrestadorServicoService().findById(tela.getLong("idTerceiro"));
			if (prestadorServico.getBlTermoComp()) {
			   	map.put("blTermoComp", 'S');
			} else {
			    map.put("blTermoComp", 'N');
			}
		}
		
		listResult.add(map);
		return listResult;
	}
	
	
	public List findLookupFilialByUsuarioLogado(TypedFlatMap map) {
		List listFilial = this.filialService.findLookupByUsuarioLogado(map);
		
		if ( listFilial.isEmpty() ) {
			return listFilial;
		}
		
		List resultList = new ArrayList();
		
		Iterator iterator = listFilial.iterator();
		Map filial = (Map)iterator.next();
		TypedFlatMap typedFlatMap = new TypedFlatMap();
		typedFlatMap.put("idFilial", filial.get("idFilial") );
		typedFlatMap.put("pessoa.nmFantasia", filial.get("pessoa.nmFantasia") );
		typedFlatMap.put("sgFilial", filial.get("sgFilial") );
		resultList.add(typedFlatMap);
		
		return resultList;
	}
	
	public List findLookupGruposFrotas(TypedFlatMap criteria) {
		List result = getVolGruposFrotasService().findGruposFrotaByUsuario(criteria);
			
		List resultList = new ArrayList();
		
		for (java.util.Iterator iter = result.iterator();iter.hasNext();) {
			TypedFlatMap resultMap = new TypedFlatMap();
			Map linha = (Map)iter.next();
			resultMap.put("idGrupoFrota", linha.get("idGrupoFrota"));
			resultMap.put("dsNome", linha.get("dsNome"));
			resultMap.put("filial.idFilial", linha.get("idFilial"));
			resultMap.put("filial.sgFilial", linha.get("sgFilial"));
			resultMap.put("filial.pessoa.nmFantasia", linha.get("nmFantasia"));
			resultList.add(resultMap);
			
		}
		
		return resultList;
	}
	
	/**
	 * Emite o Termo de Comunicação de Compromisso
	 * @param criteria
	 * @return
	 */
	public void emiteTermoCompromisso(TypedFlatMap criteria){
		try{
			this.emitirTermoCompromissoService.execute(criteria);
		}catch (Exception e) {
			log.error(e);
		}
		
	}

	public FilialService getFilialService() {
		return filialService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	/**
	 * Busca o usuario da sessao e retorna para a tela
	 * 
	 * @return
	 */
	public Map findFilialUsuarioLogado() {

		Filial filial = SessionUtils.getFilialSessao();
		
		Map mapFilial = new HashMap();
		mapFilial.put("idFilial", filial.getIdFilial());
		mapFilial.put("sgFilial", filial.getSgFilial());

		Map mapPessoa = new HashMap();
		mapPessoa.put("nmFantasia", filial.getPessoa().getNmFantasia());
		mapFilial.put("pessoa", mapPessoa);

		Map mapSessionObjects = new HashMap();
		mapSessionObjects.put("filial", mapFilial);

		return mapSessionObjects;
	}

	public List findLookupMeioTransporte(Map criteria) {
		List result = getMeioTransporteService().findLookup(criteria);
		return result;
	}
	
	
	public List findEquipamentoByIdMeioTransporte(TypedFlatMap criteria) {
		List result =  getVolEquipamentosService().findEquipamentoByIdMeioTransporte(Long.valueOf(criteria.getString("idMeioTransporte")), null);
		return result;
	}
	
	public List findEquipamentoByIdMeioTransporte(Long idMeioTransporte) {
		List result =  getVolEquipamentosService().findEquipamentoByIdMeioTransporte(idMeioTransporte, null);
		return result;
	}
	
	public List findMeioTransporte(TypedFlatMap criteria){
		List result =  getVolEquipamentosService().findMeioTransporte(Long.valueOf(criteria.getString("idMeioTransporte")));
		return result;
	}

	public List findLookupEquipamento(Map criteria) {
		
		List result = getVolEquipamentosService().findLookup(criteria);
		
        List resultList = new ArrayList();
		
		for (java.util.Iterator iter = result.iterator();iter.hasNext();) {
			TypedFlatMap resultMap = new TypedFlatMap();

			VolEquipamentos ve = (VolEquipamentos)iter.next();
			resultMap.put("idEquipamento", ve.getIdEquipamento());
			if(ve.getMeioTransporte() != null){
				resultMap.put("meioTransporte.idMeioTransporte", ve.getMeioTransporte().getIdMeioTransporte());
				resultMap.put("meioTransporte.nrFrota", ve.getMeioTransporte().getNrFrota());
				resultMap.put("meioTransporte2.nrIdentificador", ve.getMeioTransporte().getNrIdentificador());
			}else{
				resultMap.put("meioTransporte.idMeioTransporte", "");
				resultMap.put("meioTransporte.nrFrota", "");
				resultMap.put("meioTransporte2.nrIdentificador", "");
			}
			resultList.add(resultMap);
			
		}

		return resultList;

	
	}
	
	public MeioTransporteService getMeioTransporteService() {
		return meioTransporteService;
	}

	public void setMeioTransporteService(
			MeioTransporteService meioTransporteService) {
		this.meioTransporteService = meioTransporteService;
	}

	public VolGruposFrotasService getVolGruposFrotasService() {
		return volGruposFrotasService;
	}

	public void setVolGruposFrotasService(
			VolGruposFrotasService volGruposFrotasService) {
		this.volGruposFrotasService = volGruposFrotasService;
	}
	
	public List findLookupUsuarioFuncionario(TypedFlatMap criteria) {
		String nrMatricula = criteria.getString("nrMatricula"); 
    	if (nrMatricula.length() < 9) {
    		nrMatricula = FormatUtils.fillNumberWithZero(nrMatricula, 9);
		}
    	 
    	return this.getUsuarioService().findLookupUsuarioFuncionario(null, nrMatricula, null, null, null, null, true);  	
	}

	public List findLookupIntegrante(TypedFlatMap criteria) {
		Map pessoaMap = new HashMap();
		Map nrIdentificacao = new HashMap();
		nrIdentificacao.put("nrIdentificacao", PessoaUtils.validateIdentificacao(criteria.getString("pessoa.nrIdentificacao")));
		pessoaMap.put("pessoa", nrIdentificacao);
		return getPrestadorServicoService().findLookup(pessoaMap);
	}

	public PrestadorServicoService getPrestadorServicoService() {
		return prestadorServicoService;
	}

	public void setPrestadorServicoService(PrestadorServicoService prestadorServicoService) {
		this.prestadorServicoService = prestadorServicoService;
	}

	public VolEquipamentosService getVolEquipamentosService() {
		return volEquipamentosService;
	}

	public void setVolEquipamentosService(
			VolEquipamentosService volEquipamentosService) {
		this.volEquipamentosService = volEquipamentosService;
	}

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void storeDevolucao(List ids) {
		getVolRetiradasEqptosService().storeDevolucao(ids);
	}

	public EmitirTermoCompromissoService getEmitirTermoCompromissoService() {
		return emitirTermoCompromissoService;
	}

	public void setEmitirTermoCompromissoService(
			EmitirTermoCompromissoService emitirTermoCompromissoService) {
		this.emitirTermoCompromissoService = emitirTermoCompromissoService;
	}

	public UsuarioLMSService getUsuarioLMSService() {
		return usuarioLMSService;
	}

	public void setUsuarioLMSService(UsuarioLMSService usuarioLMSService) {
		this.usuarioLMSService = usuarioLMSService;
	}

	public UsuarioService getUsuarioService() {
		return usuarioService;
	}

	public void setUsuarioService(UsuarioService usuarioService) {
		this.usuarioService = usuarioService;
	}

	public MotoristaService getMotoristaService() {
		return motoristaService;
}

	public void setMotoristaService(MotoristaService motoristaService) {
		this.motoristaService = motoristaService;
	}

}
