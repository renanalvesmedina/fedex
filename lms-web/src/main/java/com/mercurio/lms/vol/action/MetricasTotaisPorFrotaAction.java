package com.mercurio.lms.vol.action;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.joda.time.YearMonthDay;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.session.SessionContext;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionKey;
import com.mercurio.lms.vol.model.VolGruposFrotas;
import com.mercurio.lms.vol.model.service.VolGruposFrotasService;


/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.vol.metricasTotaisPorFrotaAction"
 * 					
 */

public class MetricasTotaisPorFrotaAction extends CrudAction {
	private ConfiguracoesFacade configuracoesFacade;
	private FilialService filialService ;
	private VolGruposFrotasService volGruposFrotasService;
	
	public void setService(MeioTransporteService meioTransporteService) {
		this.defaultService = meioTransporteService; 
	}
    public void removeById(java.lang.Long id) {
        getMeioTransporteService().removeById(id);
    }
	private MeioTransporteService getMeioTransporteService() {
		return ((MeioTransporteService)defaultService);
	}
	
	public ResultSetPage findPaginatedTotaisPorFrota(TypedFlatMap criteria) {

		Integer pageSize = criteria.getInteger("_pageSize") - 1;
		criteria.remove("_pageSize");
		criteria.put("_pageSize",pageSize.toString());
		
		
		ResultSetPage rsp = getMeioTransporteService().findPaginatedTotaisPorFrota(criteria);
		List retorno = rsp.getList();
		List listDados = new ArrayList();
		
		int[] total = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
		
		
		for (int i = 0; i < retorno.size(); i++){
			TypedFlatMap dados = new TypedFlatMap();
			
			Object[] obj = (Object[])retorno.get(i);
						
			dados.put("idFrota",obj[0]);
			dados.put("frota",obj[1]);
			dados.put("entTotais",obj[2]);
			total[0] = total[0] + ((Long)obj[2]).intValue();
			dados.put("colTotais",obj[3]);
			total[1] = total[1] + ((Long)obj[3]).intValue();
			dados.put("totTotais",obj[4]);
			total[2] = total[2] + ((Long)obj[4]).intValue();
			dados.put("entVolumes",obj[5]);
			total[3] = total[3] + ((Long)obj[5]).intValue();
			dados.put("colVolumes",obj[6]);
			total[4] = total[4] + ((Long)obj[6]).intValue();
			dados.put("totVolumes",obj[7]);
			total[5] = total[5] + ((Long)obj[7]).intValue();
			dados.put("entNaoRealizadas",obj[8]);
			total[6] = total[6] + ((Long)obj[8]).intValue();
			dados.put("colNaoRealizadas",obj[9]);
			total[7] = total[7] + ((Long)obj[9]).intValue();
			dados.put("totNaoRealizadas",obj[10]);
			total[8] = total[8] + ((Long)obj[10]).intValue();
			dados.put("entNaoBaixados",obj[11]);
			total[9] = total[9] + ((Long)obj[11]).intValue();
			dados.put("colNaoBaixados",obj[12]);
			total[10] = total[10] + ((Long)obj[12]).intValue();
			dados.put("totNaoBaixados",obj[13]);
			total[11] = total[11] + ((Long)obj[13]).intValue();
			dados.put("entChamadas",obj[14]);
			total[12] = total[12] + ((Long)obj[14]).intValue();
			dados.put("colChamadas",obj[15]);
			total[13] = total[13] + ((Long)obj[15]).intValue();
			dados.put("totChamadas",obj[16]);
			total[14] = total[14] + ((Long)obj[16]).intValue();
			dados.put("entRecusas",obj[17]);
			total[15] = total[15] + ((Long)obj[17]).intValue();
			dados.put("tratadasReentregas",obj[18]);
			total[16] = total[16] + ((Long)obj[18]).intValue();
			dados.put("tratadasDevolucao",obj[19]);
			total[17] = total[17] + ((Long)obj[19]).intValue();
			dados.put("coletasAutomaticas",obj[20]);
			total[18] = total[18] + ((Long)obj[20]).intValue();
			dados.put("colTrocaFrotas",obj[21]);
			total[19] = total[19] + ((Long)obj[21]).intValue();
			dados.put("reentregas",obj[22]);
			total[20] = total[20] + ((Long)obj[22]).intValue();
	
			listDados.add(dados);
		}
		
		if (listDados.size() > 0){
			TypedFlatMap dados = new TypedFlatMap();
			
			dados.put("idFrota","");
			dados.put("frota",getConfiguracoesFacade().getMensagem("total"));
			dados.put("entTotais",total[0]);
			dados.put("colTotais",total[1]);
			dados.put("totTotais",total[2]);
			dados.put("entVolumes",total[3]);
			dados.put("colVolumes",total[4]);
			dados.put("totVolumes",total[5]);
			dados.put("entNaoRealizadas",total[6]);
			dados.put("colNaoRealizadas",total[7]);
			dados.put("totNaoRealizadas",total[8]);
			dados.put("entNaoBaixados",total[9]);
			dados.put("colNaoBaixados",total[10]);
			dados.put("totNaoBaixados",total[11]);
			dados.put("entChamadas",total[12]);
			dados.put("colChamadas",total[13]);
			dados.put("totChamadas",total[14]);
			dados.put("entRecusas",total[15]);
			dados.put("tratadasReentregas",total[16]);
			dados.put("tratadasDevolucao",total[17]);
			dados.put("coletasAutomaticas",total[18]);
			dados.put("colTrocaFrotas",total[19]);
			dados.put("reentregas",total[20]);
	
			listDados.add(dados);
		}
		
		rsp.setList(listDados);
		return rsp;
	}  
	
	public Integer getRowCountTotaisPorFrota(TypedFlatMap criteria){
		return getMeioTransporteService().getRowCountTotaisPorFrota(criteria);
	}
	
	public TypedFlatMap retornaDatasDefault(){
		YearMonthDay atual = JTDateTimeUtils.getDataAtual();
		YearMonthDay inicioMes = new YearMonthDay(atual.getYear(), atual.getMonthOfYear(), 1);
		
		TypedFlatMap dados = new TypedFlatMap();
		dados.put("atual",atual);
		dados.put("mes",inicioMes);
		Filial f = (Filial)SessionContext.get(SessionKey.FILIAL_KEY);
		dados.put("filial.idFilial",f.getIdFilial());
		dados.put("filial.sgFilial",f.getSgFilial());
		dados.put("filial.pessoa.nmFantasia",f.getPessoa().getNmFantasia());
		return dados;
	}
	
	
	public List findLookupGruposFrotas(Map map){
		List result = getVolGruposFrotasService().findLookup(map);
		List resultList = new ArrayList();
		
		for (java.util.Iterator iter = result.iterator();iter.hasNext();) {
			TypedFlatMap resultMap = new TypedFlatMap();

			VolGruposFrotas gf = (VolGruposFrotas)iter.next();
			resultMap.put("idGrupoFrota", gf.getIdGrupoFrota());
			resultMap.put("dsNome", gf.getDsNome());
			resultMap.put("filial.idFilial", gf.getFilial().getIdFilial());
			resultMap.put("filial.sgFilial", gf.getFilial().getSgFilial());
			resultMap.put("filial.pessoa.nmFantasia", gf.getFilial().getPessoa().getNmFantasia());
			resultList.add(resultMap); 
			
		}
		
		return resultList;
	}
	
	public ConfiguracoesFacade getConfiguracoesFacade() {
		return configuracoesFacade;
	}
	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}
	
	public List findLookupFilialByUsuarioLogado(TypedFlatMap map) {
		List listFilial = this.filialService.findLookupByUsuarioLogado(map);
		
		if ( listFilial.isEmpty() ) {
			return listFilial;
		}
		
		List resultList = new ArrayList();
		
		Iterator iterator = listFilial.iterator();
		Map filial = (Map)iterator.next();
		TypedFlatMap typedFlatMap = new TypedFlatMap();
		typedFlatMap.put("idFilial", filial.get("idFilial") );
		typedFlatMap.put("pessoa.nmFantasia", filial.get("pessoa.nmFantasia") );
		typedFlatMap.put("sgFilial", filial.get("sgFilial") );
		resultList.add(typedFlatMap);
		
		return resultList;
	}
	
	
	public FilialService getFilialService() {
		return filialService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public VolGruposFrotasService getVolGruposFrotasService() {
		return volGruposFrotasService;
	}
	public void setVolGruposFrotasService(
			VolGruposFrotasService volGruposFrotasService) {
		this.volGruposFrotasService = volGruposFrotasService;
	}
}
