package com.mercurio.lms.vol.action;


import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.configuracoes.model.service.PessoaService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vol.model.VolContatos;
import com.mercurio.lms.vol.model.service.ContatosVolService;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;



/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.vol.manterContatosVolAction"
 */

public class ManterContatosVolAction extends CrudAction {
	private FilialService filialService;
	private PessoaService pessoaService;
	private ContatosVolService contatosVolService;
	
	public TypedFlatMap findById(java.lang.Long id) { 
		 VolContatos volContatos = this.getContatosVolService().findById( id );
		 return parse (volContatos);
	}
	
	private TypedFlatMap parse(VolContatos volContatos){
		TypedFlatMap map = new TypedFlatMap();
		
		Filial filial = this.filialService.findById(volContatos.getFilial().getIdFilial());
		map.put("filial.idFilial", volContatos.getFilial().getIdFilial());
		map.put("filial.pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
		map.put("filial.sgFilial", filial.getSgFilial());
		
		Pessoa pessoa = this.pessoaService.findById(volContatos.getPessoa().getIdPessoa());
		map.put("pessoa.idPessoa", volContatos.getPessoa().getIdPessoa());
		map.put("pessoa.nrIdentificacao", FormatUtils.formatIdentificacao(pessoa));
		map.put("pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(pessoa));
		map.put("pessoa.nmPessoa", pessoa.getNmPessoa());
		
		map.put("idContato", volContatos.getIdContato());
		map.put("nmContato", volContatos.getNmContato());
		map.put("dsEmail", volContatos.getDsEmail());
		map.put("dsDepartamento", volContatos.getDsDepartamento());
		map.put("dsFuncao", volContatos.getDsFuncao());
		map.put("obContato", volContatos.getObContato());
		map.put("blAtivo", volContatos.getBlAtivo());
		
		return map;
	}

	public TypedFlatMap findDataSession() {
		Filial bean = SessionUtils.getFilialSessao();
		TypedFlatMap result = new TypedFlatMap();
		
		result.put("filial.idFilial",bean.getIdFilial());
		result.put("filial.sgFilial",bean.getSgFilial());
		result.put("filial.pessoa.nmFantasia",bean.getPessoa().getNmFantasia());
		
		return result;
	}
	
	public List findLookupFilialByUsuarioLogado(TypedFlatMap map) {
		List listFilial = this.filialService.findLookupByUsuarioLogado(map);
		
		if ( listFilial.isEmpty() ) {
			return listFilial;
		}
		
		List resultList = new ArrayList();
		
		Iterator iterator = listFilial.iterator();
		Map filial = (Map)iterator.next();
		TypedFlatMap typedFlatMap = new TypedFlatMap();
		typedFlatMap.put("idFilial", filial.get("idFilial") );
		typedFlatMap.put("pessoa.nmFantasia", filial.get("pessoa.nmFantasia") );
		typedFlatMap.put("sgFilial", filial.get("sgFilial") );
		resultList.add(typedFlatMap);
		
		return resultList;

	}
	
	/**
	 * verifica se existe o nome do contato cadastrado para a empresa
	 * @param criteria
	 */
	public void validaNomeContato(TypedFlatMap criteria){
		if( criteria.getLong("idContato") == null ){
			List result = this.getContatosVolService().findContatoVolByNomeContato(criteria);
			if (!result.isEmpty()){ 
	    		throw new BusinessException("LMS-41049");
	    	}
		}
	}
	
	/**
	 * verifica se existe e-mail cadastrado para alguma empresa
	 * @param criteria
	 */
	public void validaEmailContato(TypedFlatMap criteria){
		if( criteria.getLong("idContato") == null ){
			List result = this.getContatosVolService().findContatoVolByEmailContato(criteria);
			if (!result.isEmpty()){ 
	    		throw new BusinessException("LMS-41048");
	    	}
		}
	}

	public List findLookupEmpresa ( TypedFlatMap criteria) {
		Map mapPessoa = new HashMap();
    	mapPessoa.put("tpPessoa", criteria.getString("pessoa.tpPessoa"));
		mapPessoa.put("nrIdentificacao", criteria.getString("pessoa.nrIdentificacao"));
    	return pessoaService.findLookup(mapPessoa);
	}

	/**
	 * insere ou altera um VolContato
	 * @param criteria
	 * @return
	 */
	public Serializable store( TypedFlatMap criteria ){
		VolContatos volContatos;

		if (criteria.getLong("idContato") != null ) {
			volContatos = this.contatosVolService.findById(criteria.getLong("idContato"));
		} else {
			volContatos = new VolContatos(); 
		}

		Filial filial = filialService.findById(criteria.getLong("filial.idFilial"));
		Pessoa pessoa = pessoaService.findById(criteria.getLong("pessoa.idPessoa"));

		volContatos.setFilial(filial);
		volContatos.setPessoa(pessoa);
		volContatos.setNmContato(criteria.getString("nmContato").trim());
		volContatos.setDsEmail(criteria.getString("dsEmail").trim()); 
		volContatos.setDsDepartamento(criteria.getString("dsDepartamento"));
		volContatos.setDsFuncao(criteria.getString("dsFuncao"));
		volContatos.setObContato(criteria.getString("obContato"));
		volContatos.setBlAtivo(criteria.getBoolean("blAtivo"));

		return contatosVolService.store(volContatos);
	}

	public ResultSetPage findPaginatedContatosVol( TypedFlatMap criteria ) {
		ResultSetPage rsp = this.contatosVolService.findPaginatedContatos( criteria ); 
				
		List result = rsp.getList();
		List newResult = new ArrayList();
		
		for(Iterator it = result.iterator(); it.hasNext();){
			TypedFlatMap map = new TypedFlatMap();
			Map linha = (Map)it.next();
			map.put("idContato", linha.get("idContato"));
			map.put("nmContato", linha.get("nmContato"));
			map.put("nmPessoa", linha.get("nmPessoa"));
			map.put("tpIdentificacao", linha.get("tpIdentificacao"));
			map.put("nrIdentificacao", FormatUtils.formatIdentificacao(((DomainValue)linha.get("tpIdentificacao")).getValue(), 
					((String)linha.get("nrIdentificacao").toString().trim())));
			map.put("dsEmail", linha.get("dsEmail"));
			map.put("tpSituacao", linha.get("tpSituacao"));
			map.put("dsDepartamento", linha.get("dsDepartamento"));
			map.put("dsFuncao", linha.get("dsFuncao"));
			map.put("obContato", linha.get("obContato"));
			map.put("blAtivo", linha.get("blAtivo") == null ? Boolean.FALSE : linha.get("blAtivo"));
			newResult.add(map);
		}
		
		rsp.setList(newResult);
		return rsp;
	}
	public Integer getRowCountContatosVol(TypedFlatMap criteria){
		return this.contatosVolService.getRowCountContatos( criteria );
	}
	
	/**
	*
	*/
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids){
		this.getContatosVolService().removeByIds(ids);
	}
	
	public void removeById(java.lang.Long id) {
		this.getContatosVolService().removeById(id);
	}
	
	public FilialService getFilialService() {
		return filialService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	
	public ContatosVolService getContatosVolService() {
		return contatosVolService;
	}

	public void setContatosVolService(ContatosVolService contatosVolService) {
		this.contatosVolService = contatosVolService;
	}

	public PessoaService getPessoaService() {
		return pessoaService;
	}

	public void setPessoaService(PessoaService pessoaService) {
		this.pessoaService = pessoaService;
	}

}
