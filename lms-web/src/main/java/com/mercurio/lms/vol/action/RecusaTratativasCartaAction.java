package com.mercurio.lms.vol.action;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.report.ReportActionSupport;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.entrega.model.OcorrenciaEntrega;
import com.mercurio.lms.entrega.model.service.OcorrenciaEntregaService;
import com.mercurio.lms.expedicao.model.service.DoctoServicoService;
import com.mercurio.lms.expedicao.model.service.NotaFiscalConhecimentoService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.service.ClienteService;
import com.mercurio.lms.vol.model.service.ContatosVolService;


/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.vol.recusaTratativasCartaAction"
 */

public class RecusaTratativasCartaAction extends ReportActionSupport{
	private DoctoServicoService doctoServicoService;
	private ClienteService clienteService;
	private NotaFiscalConhecimentoService notaFiscalConhecimentoService;
	private OcorrenciaEntregaService ocorrenciaEntregaService;
	private ContatosVolService contatosVolService;
	
	
	public List findOcorrenciaEntrega(Map criteria){
		return ocorrenciaEntregaService.findLookup(criteria);
	}
	
	public List findContato(TypedFlatMap criteria){
		return contatosVolService.findContatoVolByEmailParcial(criteria); 
		
	}
	
	
    public List findOcorrenciaEntregaByCodigoTipo(TypedFlatMap criteria ){
    	Object[] tpOcorrencia = new Object[]{"N", "R"};
    	List result = new ArrayList<OcorrenciaEntrega>();
    	    	
    	OcorrenciaEntrega ocorrenciaEntrega = getOcorrenciaEntregaService().findOcorrenciaEntregaByCodigoTipo(criteria.getShort("cdOcorrenciaEntrega"), tpOcorrencia);  	
    	if( ocorrenciaEntrega != null ){
    		result.add(ocorrenciaEntrega);
    	}
    	
    	return result;
    }
	
	
	
	/**
     * Busca os dados basicos da tela de <code>emitirCartaMercadoriaDisposicao</code>.
     * 
     * @param TypedFlatMap criteria
     */
    public TypedFlatMap findBasicData(TypedFlatMap criteria) {

   	 TypedFlatMap returnMap = new TypedFlatMap();
   	 
   	 Usuario usuario = SessionUtils.getUsuarioLogado();
   	 Filial filial = SessionUtils.getFilialSessao();
   	  
   	 Long idCliente = this.getDoctoServicoService().findIdClienteRemetenteById(criteria.getLong("idDoctoServico"));
   	 Cliente cliente = this.getClienteService().findById(idCliente);
   	 
   	 returnMap.put("clienteRemetente.idCliente",  cliente.getIdCliente());
   	 returnMap.put("clienteRemetente.pessoa.nmPessoa",  cliente.getPessoa().getNmPessoa());
   	 returnMap.put("clienteRemetente.pessoa.nrIdentificacao",  FormatUtils
   			 .formatIdentificacao(cliente.getPessoa().getTpIdentificacao(), 
   					 String.valueOf(cliente.getPessoa().getNrIdentificacao())));
   	 returnMap.put("clienteRemetente.pessoa.dsMail",  cliente.getPessoa().getDsEmail());
   	 
   	 returnMap.put("filial.idFilial",  filial.getIdFilial());
   	 returnMap.put("filial.pessoa.nmFantasia",  filial.getPessoa().getNmFantasia());
   	 returnMap.put("filial.sgFilial",  filial.getSgFilial());
   	 
   	 returnMap.put("usuario.nmUsuario", usuario.getNmUsuario());
   	 returnMap.put("usuario.nrMatricula", usuario.getNrMatricula());
   	 returnMap.put("usuario.dsEmail", usuario.getDsEmail());
   	 
   	 return returnMap;
    }
    
    public void sendEmailCartaOcorrencia(TypedFlatMap criteria) {
    	
    	//ver com Marcio/Brisolara se esse campo é necessário no pdf, pois na tela recusaTratativasCarta não temos esse campo
    	 criteria.put("formBean.contatoCliente", "" );
    	 String emailContato = new String();
	     List listaEmails = (List)criteria.get("formBean.contatos");
	     Iterator iterator = listaEmails.iterator();
	     
	     while (iterator.hasNext()) {
	    	 Map map = (Map)iterator.next();
	    	 emailContato = emailContato + map.get("dsEmail")  + "; ";
		 }
	     
	     
	   	 this.getNotaFiscalConhecimentoService().sendEmailCartaOcorrencia( criteria, emailContato , null);

	   	//responsável pelo envio  
	   	this.getNotaFiscalConhecimentoService().sendEmailCartaOcorrencia( criteria, criteria.getString("formBean.usuario.dsEmail") ,null);
	   	 
    }
    
    
	public NotaFiscalConhecimentoService getNotaFiscalConhecimentoService() {
		return notaFiscalConhecimentoService;
	}

	public void setNotaFiscalConhecimentoService(
			NotaFiscalConhecimentoService notaFiscalConhecimentoService) {
		this.notaFiscalConhecimentoService = notaFiscalConhecimentoService;
	}

	public ClienteService getClienteService() {
		return clienteService;
	}

	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}

	public DoctoServicoService getDoctoServicoService() {
		return doctoServicoService;
	}

	public void setDoctoServicoService(DoctoServicoService doctoServicoService) {
		this.doctoServicoService = doctoServicoService;
	}
	
	public OcorrenciaEntregaService getOcorrenciaEntregaService() {
		return ocorrenciaEntregaService;
	}

	public void setOcorrenciaEntregaService(
			OcorrenciaEntregaService ocorrenciaEntregaService) {
		this.ocorrenciaEntregaService = ocorrenciaEntregaService;
	}
	
	public ContatosVolService getContatosVolService() {
		return contatosVolService;
	}

	public void setContatosVolService(ContatosVolService contatosVolService) {
		this.contatosVolService = contatosVolService;
	}

}
