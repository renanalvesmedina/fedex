package com.mercurio.lms.vol.action;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.vol.model.service.VolRecusasService;


/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.vol.recusaHistoricoAction"
 * 					
 */

public class RecusaHistoricoAction extends CrudAction {
	private VolRecusasService volRecusasService;
	private DomainValueService domainValueService;
	
	public ResultSetPage findPaginatedRecusaHistorico(TypedFlatMap criteria) {		
		
		Long idRecusa = criteria.getLong("idRecusa");
		
		//caso o idRecusa esteja criptografado é realiza a decriptografia
		if( idRecusa == null ) {
			idRecusa = Long.parseLong(volRecusasService.decriptografaIdRecusa(criteria.getString("idRecusa")));
			criteria.put("idRecusa", idRecusa);
		}
		
		
		ResultSetPage rsp = this.getVolRecusasService().findPaginatedRecusaHistorico(criteria);
		
		List result = rsp.getList();
		List newResult = new ArrayList();
		
		for(Iterator it =  result.iterator(); it.hasNext();){
			TypedFlatMap map = new TypedFlatMap();
			
			//default sempre existirá a situação "Não tratado" caso esteja em RECUSA
			Map linha =  (Map)it.next();
			map.put("istatus", 'N');
			map.put("data", linha.get("dhRecusa"));
			map.put("tpRecusa", domainValueService.findDomainValueDescription("DM_STATUS_RECUSA", "N"));
			map.put("responsavel", linha.get("motorista"));
			map.put("observacao", linha.get("dsOcorrenciaEntrega"));
			newResult.add(map);
			 
			//caso a recusa tenha sido inserida no sistema por engano e a situação tenha sido revertida
			DomainValue domainValue = (DomainValue)linha.get("tpRecusa");
			if( domainValue.getValue().equalsIgnoreCase("E") ){
				TypedFlatMap map1 = new TypedFlatMap();
				map1.put("istatus", 'E');
				map1.put("data", linha.get("dhRecusa"));
				map1.put("tpRecusa", domainValueService.findDomainValueDescription("DM_STATUS_RECUSA", "E"));
				map1.put("responsavel", linha.get("motorista"));
				map1.put("observacao", linha.get("dsOcorrenciaEntrega"));
				newResult.add(map1);	
			}
			
			//caso tenha carta envida
			if(linha.get("dhEnvio") != null){
				TypedFlatMap map2 = new TypedFlatMap();
				map2.put("istatus", 'C');
				map2.put("data", linha.get("dhEnvio"));
				map2.put("tpRecusa", domainValueService.findDomainValueDescription("DM_STATUS_RECUSA", "C"));
				map2.put("responsavel", linha.get("usuenv"));
				map2.put("observacao", linha.get("obEnvio"));
				newResult.add(map2);
			}
			
			//caso tenha tratativa
			if(linha.get("dhTratativa") != null){
				TypedFlatMap map3 = new TypedFlatMap();
				map3.put("data", linha.get("dhTratativa"));
				
				
				//verifica o tipo de recusa
				DomainValue opcao = (DomainValue)linha.get("tpRecusa");	
				if(opcao.getValue().equals("D")){
					map3.put("istatus" , 'D');
					map3.put("tpRecusa", domainValueService.findDomainValueDescription("DM_STATUS_RECUSA", "D"));
				}else{
					map3.put("istatus" , 'R');
					map3.put("tpRecusa", domainValueService.findDomainValueDescription("DM_STATUS_RECUSA", "R"));;
				}	
				
				//verifica quem respondeu
    			if(linha.get("emailRecusa") != null){
    				map3.put("responsavel", linha.get("emailRecusa"));
				}else{
					//colocar o contato que foi digitado, caso não tenha email
					map3.put("responsavel", linha.get("usu") + " - " + linha.get("contato"));
				}
				
				map3.put("observacao", linha.get("obTratativa"));
				newResult.add(map3);
			}
			
			//caso tenha tido resolução
			if(linha.get("dhResolucao") != null){
				TypedFlatMap map4 = new TypedFlatMap();
				map4.put("istatus" , 'M');
				map4.put("data", linha.get("dhResolucao"));
				map4.put("tpRecusa", domainValueService.findDomainValueDescription("DM_STATUS_RECUSA", "M"));
			    map4.put("responsavel", linha.get("resol"));
				map4.put("observacao", linha.get("obResolucao"));
				newResult.add(map4);
			}
			
			
		}
		rsp.setList(newResult);
		return rsp;
	}

	public Integer getRowCountRecusaHistorico(TypedFlatMap criteria) {
		return this.volRecusasService.getRowCountRecusaHistorico(criteria);
	}
	
	public TypedFlatMap findById(java.lang.Long id) {
		return (TypedFlatMap)this.find(null).get(id.intValue()-1);
	}

	public VolRecusasService getVolRecusasService() {
		return volRecusasService;
	}

	public void setVolRecusasService(VolRecusasService volRecusasService) {
		this.volRecusasService = volRecusasService;
	}

	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}

	public DomainValueService getDomainValueService() {
		return domainValueService;
	}			
	
}
