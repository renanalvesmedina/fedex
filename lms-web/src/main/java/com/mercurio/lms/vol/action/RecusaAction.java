package com.mercurio.lms.vol.action;


import com.mercurio.adsm.framework.BusinessException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.joda.time.DateTime;
import org.joda.time.YearMonthDay;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.report.ReportExecutionManager;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.EnderecoPessoa;
import com.mercurio.lms.configuracoes.model.service.PessoaService;
import com.mercurio.lms.contratacaoveiculos.model.MeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteService;
import com.mercurio.lms.entrega.model.ManifestoEntregaDocumento;
import com.mercurio.lms.entrega.model.OcorrenciaEntrega;
import com.mercurio.lms.entrega.model.service.ManifestoEntregaDocumentoService;
import com.mercurio.lms.entrega.model.service.OcorrenciaEntregaService;
import com.mercurio.lms.expedicao.model.NotaFiscalConhecimento;
import com.mercurio.lms.expedicao.model.service.DoctoServicoService;
import com.mercurio.lms.expedicao.model.service.NotaFiscalConhecimentoService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.pendencia.model.service.OcorrenciaDoctoServicoService;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.JTFormatUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.service.ClienteService;
import com.mercurio.lms.vol.model.VolContatos;
import com.mercurio.lms.vol.model.VolEmailsRecusa;
import com.mercurio.lms.vol.model.VolRecusas;
import com.mercurio.lms.vol.model.service.ContatosVolService;
import com.mercurio.lms.vol.model.service.VolEmailsRecusaService;
import com.mercurio.lms.vol.model.service.VolRecusasService;
import com.mercurio.lms.vol.report.MonitoramentoRecusasService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.vol.recusaAction"
 * 					
 */

public class RecusaAction extends CrudAction {
	private PessoaService pessoaService;
	private VolRecusasService volRecusasService;
	private VolEmailsRecusaService volEmailsRecusaService;
	private FilialService filialService;
	private DomainValueService domainValueService;
	private ContatosVolService contatosVolService;
	private MeioTransporteService meioTransporteService;
	private OcorrenciaEntregaService ocorrenciaEntregaService;
	private ManifestoEntregaDocumentoService manifestoEntregaDocumentoService;
	private OcorrenciaDoctoServicoService ocorrenciaDoctoServicoService;
	private DoctoServicoService doctoServicoService;
	private ClienteService clienteService;
	private NotaFiscalConhecimentoService notaFiscalConhecimentoService;
	private static final int TOLERANCIA = 15; // número de dias para dar resolução na recusa
	private ReportExecutionManager reportExecutionManager;
	private MonitoramentoRecusasService monitoramentoRecusasService;
	
	public TypedFlatMap findDataSession() {
		Filial bean = SessionUtils.getFilialSessao();
		TypedFlatMap result = new TypedFlatMap();
		
		result.put("filial.idFilial",bean.getIdFilial());
		result.put("filial.sgFilial",bean.getSgFilial());
		result.put("filial.pessoa.nmFantasia",bean.getPessoa().getNmFantasia());
		
		return result;
	}
	
	public List findLookupFilialByUsuarioLogado(TypedFlatMap map) {
		List listFilial = this.filialService.findLookupByUsuarioLogado(map);
		
		if ( listFilial.isEmpty() ) {
			return listFilial;
		}
		
		List resultList = new ArrayList();
		
		Iterator iterator = listFilial.iterator();
		Map filial = (Map)iterator.next();
		TypedFlatMap typedFlatMap = new TypedFlatMap();
		typedFlatMap.put("idFilial", filial.get("idFilial") );
		typedFlatMap.put("pessoa.nmFantasia", filial.get("pessoa.nmFantasia") );
		typedFlatMap.put("sgFilial", filial.get("sgFilial") );
		resultList.add(typedFlatMap);
		
		return resultList;
	}
	
	public String execute(TypedFlatMap parameters) throws Exception {
		return this.getReportExecutionManager().generateReportLocator(this.monitoramentoRecusasService, parameters);
	}

	public ResultSetPage findPaginatedRecusa(TypedFlatMap criteria) {		
		ResultSetPage rsp = this.volRecusasService.findPaginatedRecusa(criteria);	
		List result = rsp.getList();
		List newResult = new ArrayList();
		
		for(Iterator it = result.iterator(); it.hasNext();){
			TypedFlatMap map = new TypedFlatMap();
			Map linha = (Map)it.next();
			DomainValue opcao = (DomainValue)linha.get("opcaoCliente");	
			
			 // criptografa o idRecusa somente se a recusa é Não Tratada
			if(opcao.getValue().equalsIgnoreCase("N")){	
					String idRecusaCriptografado = volRecusasService.criptografaIdRecusa(linha.get("idRecusa").toString());
					map.put("idRecusa", idRecusaCriptografado);
			}else{
				map.put("idRecusa", linha.get("idRecusa"));
			}
						
			map.put("status", linha.get("opcaoCliente"));
			map.put("idDoctoServico", linha.get("idDoctoServico"));
			map.put("nrConhecimento", linha.get("nrConhecimento"));
			map.put("tpDocumentoServico", linha.get("tpDocumentoServico"));
			map.put("sgFilialDoctoServico", linha.get("sgFilial"));
			map.put("idFilialDoctoServico", linha.get("idFilial"));
			map.put("destinatario", linha.get("destinatario"));
			map.put("remetente", linha.get("remetente"));
			map.put("numero", linha.get("numero"));
			map.put("frota", linha.get("frota"));
			map.put("nrIdentificador", linha.get("nrIdentificador"));
			map.put("dpe", linha.get("dpe"));
			map.put("dhRecusa", linha.get("dhRecusa"));
			map.put("dsOcorrenciaEntrega", linha.get("dsOcorrenciaEntrega"));
			map.put("idOcorrenciaEntrega", linha.get("idOcorrenciaEntrega"));
			map.put("cdOcorrenciaEntrega", linha.get("cdOcorrenciaEntrega"));
			map.put("opcaoCliente", linha.get("opcaoCliente"));
			map.put("dhOcorrencia", linha.get("dhOcorrencia"));
			map.put("nmRecebedor", linha.get("nmRecebedor"));
			
			if(linha.get("dhResolucao") != null){
				map.put("faltam", "-");
			}else{
				map.put("faltam", faltamDias((DateTime)linha.get("dhOcorrencia")));
			}
			
			map.put("dhResolucao", linha.get("dhResolucao"));
			newResult.add(map);
		}
		
		rsp.setList(newResult);
		return rsp;
	}
	
	/**
	 * busca a data atual para preencher o período no jsp
	 * @return
	 */
	public TypedFlatMap buscaDataAtual(){
		YearMonthDay dataAtual = JTDateTimeUtils.getDataAtual();
		
		TypedFlatMap map = new TypedFlatMap();
		map.put("dataAtual", JTFormatUtils.format(dataAtual));
		
		return map;
	}
	
	public List findLookupMeioTransporte(Map criteria) {
		return meioTransporteService.findLookup(criteria);
	}	

	public List findLookupPessoa(TypedFlatMap tfm) {
		return this.pessoaService.findLookup(tfm);
	}

	private int faltamDias (DateTime data){
		int faltam = 0; 
		DateTime dataAtual = JTDateTimeUtils.getDataHoraAtual();
		int difDias = JTDateTimeUtils.getIntervalInDays(data.toYearMonthDay(),dataAtual.toYearMonthDay());	
		faltam = TOLERANCIA - difDias;
		return faltam;
	} 
	
	/**
	 * atualiza volRecusa com os dados de envio de carta
	 * @param tela
	 */	
	public void store (TypedFlatMap tela){	
		VolRecusas volRecusas = null;
			
		Long idRecusa = Long.parseLong(volRecusasService.decriptografaIdRecusa(tela.getString("idRecusa")));
		
		/*seta os campos para o VolRecusa */
		volRecusas = getVolRecusasService().findById(idRecusa);
		volRecusas.setDhEnvio(JTDateTimeUtils.getDataHoraAtual());
		volRecusas.setObEnvio(tela.getString("obEnvio"));
		volRecusas.setTpRecusa(domainValueService.findDomainValueByValue("DM_STATUS_RECUSA", "C"));
		volRecusas.setUsuarioByIdEnviou(SessionUtils.getUsuarioLogado());	
		
		//verifica se o tipo de ocorrenciaEntrega foi alterado no envio da carta, caso tenha sido altera em VolRecusa e no
		//ManifestoEntregaDocumento
		if ( tela.getLong("idOcorrenciaEntrega") != null ) {
			if( tela.getLong("idOcorrenciaEntrega") != volRecusas.getOcorrenciaEntrega().getIdOcorrenciaEntrega() ){
				OcorrenciaEntrega ocorrenciaEntrega = getOcorrenciaEntregaService().findById(tela.getLong("idOcorrenciaEntrega"));
				volRecusas.setOcorrenciaEntrega( ocorrenciaEntrega );
				
				ManifestoEntregaDocumento manifestoEntregaDocumento = 
						this.getManifestoEntregaDocumentoService().findLastManifestoEntregaDocumentoByIdDoctoServico(tela.getLong("idDoctoServico"));
				manifestoEntregaDocumento.setOcorrenciaEntrega( ocorrenciaEntrega );
				this.getManifestoEntregaDocumentoService().store(manifestoEntregaDocumento);
			}
		}
		
		/*seta os campos para o VolEmailResusa */
		Long idContato;
		List listaEmails = (List)tela.get("dsEmail");
	    Iterator iterator = listaEmails.iterator();
	     
	     while (iterator.hasNext()) {
	    	 Map map = (Map)iterator.next();
	    	 idContato = Long.parseLong( map.get("idContato").toString() );	         
	         
       		 VolEmailsRecusa volEmailsRecusa = new VolEmailsRecusa();
       		 VolContatos volContatos = null;
			 volContatos = getContatosVolService().findById(idContato);
	         volEmailsRecusa.setVolContatos(volContatos);
			 volEmailsRecusa.setVolRecusa(volRecusas);
			 getVolEmailsRecusaService().store(volEmailsRecusa);
			
       	}
		
		getVolRecusasService().store(volRecusas);
	}
	
	public TypedFlatMap buscaDadosIniciais(TypedFlatMap criteria){
		Filial f = filialService.findById(criteria.getLong("filial"));	
		MeioTransporte mt = meioTransporteService.findByIdInitLazyProperties(criteria.getLong("frota"), false);
		 		
		criteria.clear();		
		criteria.put("filial.idFilial", f.getIdFilial());
		criteria.put("filial.sgFilial", f.getSgFilial());
		criteria.put("filial.pessoa.nmFantasia", f.getPessoa().getNmFantasia());
		
		criteria.put("meioTransporte.idMeioTransporte", mt.getIdMeioTransporte());
		criteria.put("meioTransporte.nrFrota", mt.getNrFrota());
		criteria.put("meioTransporte.nrIdentificador", mt.getNrIdentificador());
		
		return criteria;
	}

	public TypedFlatMap findParamsCartaReport(TypedFlatMap criteria){
		//Parametros do relatorio...
		VolRecusas recusa = getVolRecusasService().findById(criteria.getLong("idRecusa"));
		OcorrenciaEntrega ocorrenciaEntrega = ocorrenciaEntregaService.findOcorrenciaEntregaByIdDoctoServico(criteria.getLong("idDoctoServico"));
		TypedFlatMap ocorrenciaDocto = getOcorrenciaDoctoServicoService().findOcorrenciaByIdDoctoServico(criteria.getLong("idDoctoServico"));
		List<NotaFiscalConhecimento> notaFiscalConhecimento = getNotaFiscalConhecimentoService().findByConhecimento(criteria.getLong("idDoctoServico"));
		List<VolContatos> volContatos =  (List<VolContatos>)getVolEmailsRecusaService().findContatoByIdRecusa(criteria.getLong("idRecusa"));
		Filial filial = getFilialService().findById(criteria.getLong("idFilial"));
		
		criteria.put("formBean.doctoServico.idDoctoServico", criteria.getLong("idDoctoServico"));
		criteria.put("dsOcorrencia", ocorrenciaEntrega.getDsOcorrenciaEntrega());		
		criteria.put("dhBloqueio", ocorrenciaDocto.get("dhBloqueio"));		
		criteria.put("formBean.contatoCliente", (recusa.getContato() != null)?recusa.getContato():"");
		
		criteria.put("formBean.filial.sgFilial", filial.getSgFilial());
		criteria.put("nmUsuario", SessionUtils.getUsuarioLogado().getNmUsuario());
		
		criteria.put("formBean.telefone.nrDdd", "");
        criteria.put("formBean.fax.nrDdd", "");
        criteria.put("formBean.fax.nrTelefone", "");
        criteria.put("formBean.ramal", "");
        
       	criteria.put("formBean.usuario.dsEmail", SessionUtils.getUsuarioLogado().getDsEmail());
       	criteria.put("dsHomePage", filial.getEmpresa().getDsHomePage());
       	
       	EnderecoPessoa endPessoa = filial.getPessoa().getEnderecoPessoa();
       	criteria.put("nmMunicipio", endPessoa.getMunicipio().getNmMunicipio());
       	criteria.put("dsNomeFilial", endPessoa.getPessoa().getNmPessoa());
       	
       	if(!volContatos.isEmpty()){
       		TypedFlatMap contatos = new TypedFlatMap();
       		List contatosList = new ArrayList();
       		for (VolContatos volContato : volContatos) {
       			contatos.put("dsEmail", volContato.getDsEmail());
       			contatosList.add(contatos);
			}
           	criteria.put("formBean.contatos",contatosList);
       	}
       	if(recusa.getObEnvio() != null){
       		criteria.put("formBean.observacao",recusa.getObEnvio());	
       	}
		
       	if(!notaFiscalConhecimento.isEmpty()){
       		List idsNotaFiscalConhecimento = new ArrayList();
       		for (NotaFiscalConhecimento nota: notaFiscalConhecimento) {
       			TypedFlatMap notaFiscal = new TypedFlatMap();
       			notaFiscal.put("idNotaFiscalConhecimento", nota.getIdNotaFiscalConhecimento());
       			notaFiscal.put("dtSaida", nota.getDtSaida());
       			idsNotaFiscalConhecimento.add(notaFiscal);
			}       		 
       		criteria.put("idsNotaFiscalConhecimento", idsNotaFiscalConhecimento);
       	}
       	//parametro para separar local de onde relatório é chamado
       	criteria.put("locationPageConsultaRecusas", "true");
       	
		return criteria;
	}
	
	public Integer getRowCountRecusa(TypedFlatMap criteria) {
		return this.volRecusasService.getRowCountRecusa(criteria);
	}
	
	public TypedFlatMap findById(java.lang.Long id) {
		return (TypedFlatMap)this.find(null).get(id.intValue()-1);
	}
	
	
	public VolRecusasService getVolRecusasService() {
		return volRecusasService;
	}

	public void setVolRecusasService(VolRecusasService volRecusasService) {
		this.volRecusasService = volRecusasService;
	}

	public FilialService getFilialService() {
		return filialService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public DomainValueService getDomainValueService() {
		return domainValueService;
	}

	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}

	public VolEmailsRecusaService getVolEmailsRecusaService() {
		return volEmailsRecusaService;
	}

	public void setVolEmailsRecusaService(
			VolEmailsRecusaService volEmailsRecusaService) {
		this.volEmailsRecusaService = volEmailsRecusaService;
	}

	public MeioTransporteService getMeioTransporteService() {
		return meioTransporteService;
	}

	public void setMeioTransporteService(MeioTransporteService meioTransporteService) {
		this.meioTransporteService = meioTransporteService;
	}

	public PessoaService getPessoaService() {
		return pessoaService;
	}

	public void setPessoaService(PessoaService pessoaService) {
		this.pessoaService = pessoaService;
	}

	public ContatosVolService getContatosVolService() {
		return contatosVolService;
	}

	public void setContatosVolService(ContatosVolService contatosVolService) {
		this.contatosVolService = contatosVolService;
	}

	public OcorrenciaEntregaService getOcorrenciaEntregaService() {
		return ocorrenciaEntregaService;
	}

	public void setOcorrenciaEntregaService(
			OcorrenciaEntregaService ocorrenciaEntregaService) {
		this.ocorrenciaEntregaService = ocorrenciaEntregaService;
	}

	public ManifestoEntregaDocumentoService getManifestoEntregaDocumentoService() {
		return manifestoEntregaDocumentoService;
	}

	public void setManifestoEntregaDocumentoService(
			ManifestoEntregaDocumentoService manifestoEntregaDocumentoService) {
		this.manifestoEntregaDocumentoService = manifestoEntregaDocumentoService;
	}
	
	public void setOcorrenciaDoctoServicoService(
			OcorrenciaDoctoServicoService ocorrenciaDoctoServicoService) {
		this.ocorrenciaDoctoServicoService = ocorrenciaDoctoServicoService;
	}
	
	public OcorrenciaDoctoServicoService getOcorrenciaDoctoServicoService() {
		return ocorrenciaDoctoServicoService;
}

	public void setDoctoServicoService(DoctoServicoService doctoServicoService) {
		this.doctoServicoService = doctoServicoService;
	}

	public DoctoServicoService getDoctoServicoService() {
		return doctoServicoService;
	}

	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}

	public ClienteService getClienteService() {
		return clienteService;
	}

	public void setNotaFiscalConhecimentoService(
			NotaFiscalConhecimentoService notaFiscalConhecimentoService) {
		this.notaFiscalConhecimentoService = notaFiscalConhecimentoService;
	}

	public NotaFiscalConhecimentoService getNotaFiscalConhecimentoService() {
		return notaFiscalConhecimentoService;
	}

	public ReportExecutionManager getReportExecutionManager() {
		return reportExecutionManager;
	}
	
	public void setReportExecutionManager(
			ReportExecutionManager reportExecutionManager) {
		this.reportExecutionManager = reportExecutionManager;
	}
	
	public void setMonitoramentoRecusasService(
			MonitoramentoRecusasService monitoramentoRecusasService) {
		this.monitoramentoRecusasService = monitoramentoRecusasService;
	}
        
        public void executeRetorno(TypedFlatMap criteria){
            try {
                Long idRecusa = descriptografaIdRecusa(criteria.getString("id"));
                VolRecusas volRecusaClicado = this.volRecusasService.findById(idRecusa);
                this.manifestoEntregaDocumentoService.executeReentrega(volRecusaClicado.getManifestoEntregaDocumento().getIdManifestoEntregaDocumento());
            } catch (IllegalAccessError iae){
                throw new BusinessException("LMS-09161");
            } catch (IllegalStateException e){
                throw new BusinessException("LMS-09162");
            } catch (Exception e){
                throw new BusinessException("LMS-45031");
            }
	}
        
        public Long descriptografaIdRecusa(String idRecusa){
            if(idRecusa.matches("[0-9]+")){
                return Long.parseLong(idRecusa);
            }
            return Long.parseLong(this.volRecusasService.decriptografaIdRecusa(idRecusa));
        }

}


