package com.mercurio.lms.vol.action;

import java.util.ArrayList;
import java.util.List;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;



/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.vol.manterUsuarioVolAction"
 * 					
 */


public class ManterUsuarioVolAction extends CrudAction {

	public List find(TypedFlatMap criteria) {
		List lista = new ArrayList();		
				
		//Cria os itens que serão enviados para o jsp
		TypedFlatMap item = new TypedFlatMap(); 				
		TypedFlatMap item2 = new TypedFlatMap();
		TypedFlatMap item3 = new TypedFlatMap();
		
		//Adiciona os valores que serão enviados ao jsp
		item.put("idUsuario", "1");
		item.put("loginUsuario.login", "usuario1");
		item.put("nrMatricula", "1000");
		item.put("nmUsuario", "Usuario 1");
		item.put("ctrAparelho", "true");
		item.put("termo", "true");
		
		item2.put("idUsuario", "2");
		item2.put("loginUsuario.login", "usuario2");
		item2.put("nrMatricula", "2000");
		item2.put("nmUsuario", "Usuario 2");
		item2.put("ctrAparelho", "true");
		item2.put("termo", "true");
		
		item3.put("idUsuario", "3");
		item3.put("loginUsuario.login", "usuario3");
		item3.put("nrMatricula", "3000");
		item3.put("nmUsuario", "Usuario 3");
		item3.put("ctrAparelho", "false");
		item3.put("termo", "false");
		
		//Adiciona os itens na lista
		lista.add(item);		
		lista.add(item2);
		lista.add(item3);
		return lista;
	}

	public TypedFlatMap findById(java.lang.Long id) {		
		return (TypedFlatMap)this.find(null).get(id.intValue()-1);
	}

	public ResultSetPage findPaginated(TypedFlatMap criteria) {		
		List lista = this.find(criteria);
		List pagina = new ArrayList();
		
		int fim    = criteria.getInteger("_pageSize").intValue() * criteria.getInteger("_currentPage").intValue() - 1;  
		int inicio = fim - (criteria.getInteger("_pageSize").intValue() - 1); 
		int total  = lista.size() - 1;			
		
		if(fim > total) {
			fim = total;		
		}
		
		for(int i=inicio; i <= fim ; i++) {
			pagina.add(lista.get(i));
		}
		 		
		ResultSetPage rsp = new ResultSetPage(criteria.getInteger("_currentPage"), pagina);
		
		if(total == fim) {
			rsp.setHasNextPage(false);
		}
		else {
			rsp.setHasNextPage(true);
		}
		
		if(inicio == 0) {
			rsp.setHasPriorPage(false);
		}
		else {
			rsp.setHasPriorPage(true);
		}
		
		return rsp;
	}
	

	public Integer getRowCount(TypedFlatMap criteria) {
		//FIXME pode-se utilizar o super.getRowCount() 
		return Integer.valueOf(this.find(criteria).size());
	}
	
	
	public List findLookupUso(TypedFlatMap criteria) {
		return null;
	}
	
	public List findLookupFrota(TypedFlatMap criteria) {
		return null;
	}
	
	public List findLookupFilial(TypedFlatMap criteria) {
		return null;
	}
	
	public List findLookupModelo(TypedFlatMap criteria) {
		return null;
	}
}
