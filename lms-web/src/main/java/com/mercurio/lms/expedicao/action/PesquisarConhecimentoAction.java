package com.mercurio.lms.expedicao.action;

import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.util.MapUtilsPlus;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.util.ConhecimentoUtils;
import com.mercurio.lms.expedicao.util.ConstantesExpedicao;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.AliasToNestedMapResultTransformer;
import com.mercurio.lms.vendas.model.service.ClienteService;

/**
 * Generated by: ADSM ActionGenerator
 *
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.expedicao.pesquisarConhecimentoAction"
 */
public class PesquisarConhecimentoAction extends CrudAction {
	private FilialService filialService;
	private ClienteService clienteService;
	private DomainValueService domainValueService;

	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}
	public ConhecimentoService getConhecimentoService() {
		return (ConhecimentoService)defaultService;
	}
	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.defaultService = conhecimentoService;
	}
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public List findFilial(TypedFlatMap criteria) {
		return filialService.findLookupBySgFilial(criteria.getString("sgFilial"), criteria.getString("tpAcesso"));
	} 

	public List findCliente(TypedFlatMap criteria) {
		return clienteService.findClienteByNrIdentificacao(criteria.getString("pessoa.nrIdentificacao"));
	}

	public List findTpSituacaoConhecimento() {
		List tpSituacoes = domainValueService.findDomainValues("DM_STATUS_CONHECIMENTO", Boolean.TRUE);
		for (Iterator iter = tpSituacoes.iterator(); iter.hasNext();) {
			DomainValue domainValue = (DomainValue) iter.next();
			if("P".equalsIgnoreCase(domainValue.getValue())) {
				iter.remove();
				break;
			}
		}
		return tpSituacoes;
	}

	public Integer getRowCountConhecimento(TypedFlatMap criteria) {
		return getConhecimentoService().getRowCountConhecimento(criteria);
	}

	public ResultSetPage findConhecimentoPaginated(TypedFlatMap criteria) {
		/** Busca Registros */
		ResultSetPage rsp = getConhecimentoService().findConhecimentoPaginated(criteria);
		List result = rsp.getList();
		String nrDocumentoServico = null;
		String tpDocumentoServico = null;

		/** Formata nrDocumentos */
		for (Iterator it = result.iterator(); it.hasNext();) {
			Map conhecimento = (Map) it.next();
			MapUtilsPlus mapUtils = new MapUtilsPlus(conhecimento);

			tpDocumentoServico = mapUtils.getDomainValue("tpDocumentoServico").getValue();
			if(ConstantesExpedicao.CONHECIMENTO_NACIONAL.equals(tpDocumentoServico) || ConstantesExpedicao.CONHECIMENTO_ELETRONICO.equals(tpDocumentoServico)) {
				nrDocumentoServico = ConhecimentoUtils.formatConhecimento(mapUtils.getString("sgFilialOrigem"), mapUtils.getLong("nrConhecimento"), mapUtils.getInteger("dvConhecimento"));
			} else if(ConstantesExpedicao.NOTA_FISCAL_TRANSPORTE.equals(tpDocumentoServico) || ConstantesExpedicao.NOTA_FISCAL_TRANSPORTE_ELETRONICA.equals(tpDocumentoServico)) {
				nrDocumentoServico = ConhecimentoUtils.formatNotaFiscalServico(mapUtils.getLong("nrConhecimento"));
			}
			conhecimento.put("nrDocumentoServico", nrDocumentoServico);
			conhecimento.put("nrDoctoServico", mapUtils.getObject("nrConhecimento"));
		}
		rsp.setList(AliasToNestedMapResultTransformer.getInstance().transformListResult(rsp.getList()));
		return rsp;
	}
	
	public TypedFlatMap findFilialById(Long idFilial) {
		Filial filial = filialService.findById(idFilial);
		TypedFlatMap result = new TypedFlatMap();		
		result.put("filial.sgFilial", filial.getSgFilial());
		result.put("filial.pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
		return result;
	}

}