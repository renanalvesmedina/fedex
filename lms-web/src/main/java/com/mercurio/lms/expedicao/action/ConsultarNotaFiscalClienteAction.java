package com.mercurio.lms.expedicao.action;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.MapUtils;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.model.service.NotaFiscalConhecimentoService;
import com.mercurio.lms.expedicao.model.service.NotaFiscalServicoService;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.vendas.model.service.ClienteService;
/**
 * Generated by: ADSM ActionGenerator
 * @author Andresa Vargas
 *
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.expedicao.consultarNotaFiscalClienteAction"
 */
public class ConsultarNotaFiscalClienteAction extends CrudAction {
	private NotaFiscalConhecimentoService notaFiscalConhecimentoService;
	private ClienteService clienteService;
	private FilialService filialService;
	private DomainValueService domainValueService;
	private NotaFiscalServicoService notaFiscalServicoService;
	private ConhecimentoService conhecimentoService;

	public List findLookupNotaFiscalCliente(TypedFlatMap criteria) {
		return notaFiscalConhecimentoService.findLookupNotaFiscalCliente(criteria);
	}

	public List findLookupRemetente(Map criteria) {
		return clienteService.findLookup(criteria);
	}

	public List findLookupDestinatario(Map criteria) {
		return clienteService.findLookup(criteria);
	}

	public List findLookupFilial(Map criteria) {
		return filialService.findLookupBySgFilial(MapUtils.getString(criteria, "sgFilial"), MapUtils.getString(criteria, "tpAcesso"));
	}

	public ResultSetPage findPaginatedNotaFiscalCliente(TypedFlatMap criteria) {
		ResultSetPage rsp = notaFiscalConhecimentoService.findPaginatedNotaFiscalCliente(criteria);
		List newList = new ArrayList();

		for(Iterator i = rsp.getList().iterator(); i.hasNext();) {
			Map projections = (Map)i.next();
			TypedFlatMap result = new TypedFlatMap();

			result.put("idNotaFiscalConhecimento", projections.get("idNotaFiscalConhecimento"));
			result.put("nrNotaFiscal", projections.get("nrNotaFiscal"));
			result.put("dsSerie", projections.get("dsSerie"));
			result.put("dtEmissao", projections.get("dtEmissao"));
			result.put("qtVolumes", projections.get("qtVolumes"));
			result.put("psMercadoria", projections.get("psMercadoria"));
			result.put("vlTotal", projections.get("vlTotal"));
			result.put("dsSimbolo", projections.get("dsSimbolo"));
			result.put("idDoctoServico", projections.get("idDoctoServico"));
			result.put("tpDocumentoServico", projections.get("tpDocumentoServico"));
			result.put("nrDoctoServico", projections.get("nrDoctoServico"));
			result.put("idFilialOrigem", projections.get("idFilialOrigem"));
			result.put("sgFilialOrigem", projections.get("sgFilialOrigem"));
			result.put("nmFantasiaOrigem", projections.get("nmFantasiaOrigem"));
			result.put("sgFilialDestino", projections.get("sgFilialDestino"));
			result.put("nmFantasiaDestino", projections.get("nmFantasiaDestino"));
			result.put("nrIdentificacaoRemetente",FormatUtils.formatIdentificacao((DomainValue)projections.get("tpIdentificacaoRemetente"),(String)projections.get("nrIdentificacaoRemetente")));
			result.put("tpIdentificacaoRemetente", projections.get("tpIdentificacaoRemetente"));
			result.put("remetente", projections.get("remetente"));
			result.put("nrIdentificacaoDestinatario",FormatUtils.formatIdentificacao((DomainValue)projections.get("tpIdentificacaoDestinatario"),(String)projections.get("nrIdentificacaoDestinatario")));
			result.put("destinatario", projections.get("destinatario"));
			result.put("tpIdentificacaoDestinatario", projections.get("tpIdentificacaoDestinatario"));

			newList.add(result);
		}
		rsp.setList(newList);
		return rsp;
	}

	public Long getRowCountNotaFiscalCliente(TypedFlatMap criteria) {
		return notaFiscalConhecimentoService.getRowCountNotaFiscalCliente(criteria);
	}

	public List findLookupServiceDocumentFilialCTR(Map criteria) {
		return findLookupFilialByDocumentoServico(criteria);
	}

	public List findLookupServiceDocumentFilialNFT(Map criteria) {
		return this.findLookupFilialByDocumentoServico(criteria);
	}

	public List findLookupServiceDocumentNumberNFT(Map criteria) {
		criteria.put("blBloqueado","N");
		return notaFiscalServicoService.findLookup(criteria);
	}

	public List findLookupServiceDocumentNumberCTR(Map criteria) {
		criteria.put("blBloqueado","N");
		return conhecimentoService.findLookup(criteria);
	}

	public List findLookupFilialByDocumentoServico(Map criteria) {
		return filialService.findLookupBySgFilial(MapUtils.getString(criteria, "sgFilial"), MapUtils.getString(criteria, "tpAcesso"));
	}

	public List findTpDoctoServico() {
		List dominiosValidos = new ArrayList();
		dominiosValidos.add("CTR");
		dominiosValidos.add("NFT");
		List retorno = domainValueService.findByDomainNameAndValues("DM_TIPO_DOCUMENTO_SERVICO",dominiosValidos);
		return retorno;
	}

	public TypedFlatMap findDataSession() {
		TypedFlatMap result = new TypedFlatMap();

		result.put("periodoEmissaoInicial",JTDateTimeUtils.getDataAtual().minusDays(15));
		result.put("periodoEmissaoFinal",JTDateTimeUtils.getDataAtual());

		return result;
	}

	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
	}
	public void setNotaFiscalServicoService(NotaFiscalServicoService notaFiscalServicoService) {
		this.notaFiscalServicoService = notaFiscalServicoService;
	}
	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}	
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}
	public void setNotaFiscalConhecimentoService(NotaFiscalConhecimentoService notaFiscalConhecimentoService) {
		this.notaFiscalConhecimentoService = notaFiscalConhecimentoService;
	}
}
