package com.mercurio.lms.expedicao.action;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.FindDefinition;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailAction;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.expedicao.model.Conhecimento;
import com.mercurio.lms.expedicao.model.CtoInternacional;
import com.mercurio.lms.expedicao.model.NotaFiscalConhecimento;
import com.mercurio.lms.expedicao.model.ServAdicionalDocServ;
import com.mercurio.lms.expedicao.model.service.ServAdicionalDocServService;
import com.mercurio.lms.expedicao.util.ConhecimentoUtils;
import com.mercurio.lms.expedicao.util.ConstantesExpedicao;
import com.mercurio.lms.expedicao.util.CtoInternacionalUtils;
import com.mercurio.lms.expedicao.util.ExpedicaoUtils;
import com.mercurio.lms.tabelaprecos.model.service.ParcelaPrecoService;
import com.mercurio.lms.util.BigDecimalUtils;
import com.mercurio.lms.util.CompareUtils;
import com.mercurio.lms.util.IntegerUtils;
import com.mercurio.lms.util.LongUtils;
import com.mercurio.lms.vendas.model.Cotacao;
import com.mercurio.lms.vendas.util.ConstantesVendas;
import com.mercurio.lms.vendas.util.VendasUtils;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;

/**
 * Generated by: ADSM ActionGenerator
 *
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.expedicao.digitarServicosAdicionaisAction"
 */

public class DigitarServicosAdicionaisAction extends CrudAction {
	private static int cont = 0;
	private ParcelaPrecoService parcelaPrecoService;
	private ServAdicionalDocServService servAdicionalDocServService;

	/**
	 * Busca os Ids dos Serviços Adicionais a serem utilizados no Parâmetros Gerais
	 * @param criterios
	 * @return
	 */
	public List findServicosAdicionais() {
		return parcelaPrecoService.findServicosAdicionaisParcela();
	}

	public void removeById(java.lang.Long id) {
		List servicosAdicionaisDoctoServico = getServicosAdicionaisDoctoServicoInSession();
		removeServicoAdicionalDoctoServico(servicosAdicionaisDoctoServico, id);
		setServicosAdicionaisDoctoServicoInSession(servicosAdicionaisDoctoServico);
	}
	
	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		List servicosAdicionaisDoctoServico = getServicosAdicionaisDoctoServicoInSession();
		if(ids != null) {
			for(Iterator iter = ids.iterator(); iter.hasNext();) {
				Long id = (Long) iter.next();
				removeServicoAdicionalDoctoServico(servicosAdicionaisDoctoServico, id);
			}
			setServicosAdicionaisDoctoServicoInSession(servicosAdicionaisDoctoServico);
		}
	}

	/**
	 * Remove serviço adicional
	 * 
	 * @param id
	 * @param servAdicionalMap
	 * @param docto
	 */
	private void removeServicoAdicionalDoctoServico(List servicosAdicionaisDoctoServico, Long id) {
		if(servicosAdicionaisDoctoServico != null) {
			for (Iterator iter = servicosAdicionaisDoctoServico.iterator(); iter.hasNext();) {
				ServAdicionalDocServ servicoAdicionalDoctoServico = (ServAdicionalDocServ) iter.next();
				if(CompareUtils.eq(servicoAdicionalDoctoServico.getIdServAdicionalDocServ(), id)) {
					updateReembolso(servicoAdicionalDoctoServico.getCdParcelaPreco(), Boolean.FALSE);
					iter.remove();
				}
			}
		}
	}

	public ServAdicionalDocServ findById(java.lang.Long id) {
		return findByIdInList(id, getServicosAdicionaisDoctoServicoInSession());
	}

	public ServAdicionalDocServ findByIdInList(java.lang.Long id, List servicosAdicionais) {
		if(CompareUtils.gt(id, LongUtils.ZERO)) {
			return servAdicionalDocServService.findById(id);
		}
		if(servicosAdicionais != null)
			for (Iterator iter = servicosAdicionais.iterator(); iter.hasNext();) {
				ServAdicionalDocServ servAdicionalDocServ = (ServAdicionalDocServ) iter.next();
				if(CompareUtils.eq(servAdicionalDocServ.getIdServAdicionalDocServ(), id)) {
					return servAdicionalDocServ;
				}
			}
		return null;
	}

	public Integer getRowCount(Map criteria) {
		String tpDocumentoServico = ExpedicaoUtils.getTpDocumentoInSession();

		if(ConstantesVendas.COTACAO.equals(tpDocumentoServico)) {
			String idDocumento = (String)criteria.get("idDocumento");
			if(StringUtils.isNotBlank(idDocumento)) {
				return servAdicionalDocServService.getRowCountByIdCotacao(LongUtils.getLong(idDocumento));
			}
		}

		List servicosAdicionais = getServicosAdicionaisDoctoServicoInSession();
		if(servicosAdicionais != null) {
			return Integer.valueOf(servicosAdicionais.size());
		}
		
		return IntegerUtils.ZERO;
	}

	public ResultSetPage findPaginated(Map criteria) {
		String tpDocumentoServico = ExpedicaoUtils.getTpDocumentoInSession();
		List servicosAdicionais = getServicosAdicionaisDoctoServicoInSession();
		if(servicosAdicionais != null) {
			FindDefinition findDef = FindDefinition.createFindDefinition(criteria);
			return MasterDetailAction.getResultSetPage(servicosAdicionais, findDef.getCurrentPage(), findDef.getPageSize(), null);
		}
		return ResultSetPage.EMPTY_RESULTSET;
	}

	/**
	 * Insere novo servico na sessao.
	 * 
	 * @param servicoAdicionalDoctoServico
	 */
	public void storeInSession(ServAdicionalDocServ servicoAdicionalDoctoServico) {
		List servicosAdicionaisDoctoServico = getServicosAdicionaisDoctoServicoInSession();
		servAdicionalDocServService.validadeServicoAdicionalDoctoServico(servicosAdicionaisDoctoServico, servicoAdicionalDoctoServico);

		if(servicosAdicionaisDoctoServico == null) {
			servicosAdicionaisDoctoServico = new ArrayList();
		}

		if(servicoAdicionalDoctoServico.getIdServAdicionalDocServ() == null) {
			servicoAdicionalDoctoServico.setIdServAdicionalDocServ(Long.valueOf(--cont));
			servicosAdicionaisDoctoServico.add(servicoAdicionalDoctoServico);
		} else {
			ServAdicionalDocServ servicoAdicionalDoctoServicoAux = findByIdInList(servicoAdicionalDoctoServico.getIdServAdicionalDocServ(), servicosAdicionaisDoctoServico);
			if(servicoAdicionalDoctoServicoAux != null) {
				servicoAdicionalDoctoServicoAux.setDtPrimeiroCheque(servicoAdicionalDoctoServico.getDtPrimeiroCheque());
				servicoAdicionalDoctoServicoAux.setNrKmRodado(servicoAdicionalDoctoServico.getNrKmRodado());
				servicoAdicionalDoctoServicoAux.setQtCheques(servicoAdicionalDoctoServico.getQtCheques());
				servicoAdicionalDoctoServicoAux.setVlMercadoria(servicoAdicionalDoctoServico.getVlMercadoria());
				servicoAdicionalDoctoServicoAux.setQtColetas(servicoAdicionalDoctoServico.getQtColetas());
				servicoAdicionalDoctoServicoAux.setQtDias(servicoAdicionalDoctoServico.getQtDias());
				servicoAdicionalDoctoServicoAux.setQtSegurancasAdicionais(servicoAdicionalDoctoServico.getQtSegurancasAdicionais());
				servicoAdicionalDoctoServicoAux.setQtPaletes(servicoAdicionalDoctoServico.getQtPaletes());	
				servicoAdicionalDoctoServicoAux.getServicoAdicional().setIdServicoAdicional(servicoAdicionalDoctoServico.getServicoAdicional().getIdServicoAdicional());
				servicoAdicionalDoctoServicoAux.getServicoAdicional().setDsServicoAdicional(servicoAdicionalDoctoServico.getServicoAdicional().getDsServicoAdicional());
			}
		}
		updateReembolso(servicoAdicionalDoctoServico.getCdParcelaPreco(), Boolean.TRUE);
		setServicosAdicionaisDoctoServicoInSession(servicosAdicionaisDoctoServico);
	}

	private void updateReembolso(String cdParcelaPreco, Boolean blReembolso) {
		if(ConstantesExpedicao.CD_REEMBOLSO.equalsIgnoreCase(cdParcelaPreco)) {
			if(ConstantesExpedicao.CONHECIMENTO_NACIONAL.equals(ExpedicaoUtils.getTpDocumentoInSession())) {
				Conhecimento conhecimento = ConhecimentoUtils.getConhecimentoInSession();
				conhecimento.setBlReembolso(blReembolso);
				ConhecimentoUtils.setConhecimentoInSession(conhecimento);
			}
		}
	}

	private BigDecimal findTotalNotas() {
		BigDecimal vlTotal = BigDecimalUtils.ZERO;

		Conhecimento conhecimento = ConhecimentoUtils.getConhecimentoInSession();
		List notas = conhecimento.getNotaFiscalConhecimentos();
		if(notas != null) {
			for(Iterator iter = notas.iterator(); iter.hasNext();) {
				NotaFiscalConhecimento notaFiscalConhecimento = (NotaFiscalConhecimento) iter.next();
				vlTotal = vlTotal.add(notaFiscalConhecimento.getVlTotal());
			}
		}
		return vlTotal;
	}

	private BigDecimal findVlMercadoriaCrt() {
		CtoInternacional ctoInternacional = CtoInternacionalUtils.getCtoInternacionalInSession();
		return ctoInternacional.getVlMercadoria();
	}

	public BigDecimal findVlMercadoria(TypedFlatMap criteria) {
		String tpDocumentoServico = ExpedicaoUtils.getTpDocumentoInSession();
		BigDecimal vlRetorno = BigDecimalUtils.ZERO;

		if(ConstantesExpedicao.CONHECIMENTO_NACIONAL.equals(tpDocumentoServico)){
			vlRetorno = findTotalNotas();
		} else if(ConstantesExpedicao.CONHECIMENTO_INTERNACIONAL.equals(tpDocumentoServico)){
			vlRetorno = findVlMercadoriaCrt();
		}

		return vlRetorno;
	}

	private List getServicosAdicionaisDoctoServicoInSession() {
		String tpDocumentoServico = ExpedicaoUtils.getTpDocumentoInSession();

		if(ConstantesExpedicao.CONHECIMENTO_NACIONAL.equals(tpDocumentoServico)) {
			return ConhecimentoUtils.getConhecimentoInSession().getServAdicionalDocServs();
		}
		if(ConstantesExpedicao.CONHECIMENTO_INTERNACIONAL.equals(tpDocumentoServico)) {
			CtoInternacional crt = CtoInternacionalUtils.getCtoInternacionalInSession();
			List servAdicionalDocServs = crt.getServAdicionalDocServs(); 
			if(crt.getIdDoctoServico() != null && servAdicionalDocServs == null){
				servAdicionalDocServs = servAdicionalDocServService.findServAdicionaisDocServByIdDoctoServico(crt.getIdDoctoServico());
				crt.setServAdicionalDocServs(servAdicionalDocServs);
				CtoInternacionalUtils.setCtoInternacionalInSession(crt);
			}
			return servAdicionalDocServs;
		}
		if(ConstantesVendas.COTACAO.equals(tpDocumentoServico)) {
			return VendasUtils.getCotacaoInSession().getServAdicionalDocServs();
		}
		return null;
	}

	private void setServicosAdicionaisDoctoServicoInSession(List servicosAdicionaisDoctoServico) {
		String tpDocumentoServico = ExpedicaoUtils.getTpDocumentoInSession();

		if(ConstantesExpedicao.CONHECIMENTO_NACIONAL.equals(tpDocumentoServico)) {
			Conhecimento conhecimento = ConhecimentoUtils.getConhecimentoInSession();
			conhecimento.setServAdicionalDocServs(servicosAdicionaisDoctoServico);
			ConhecimentoUtils.setConhecimentoInSession(conhecimento);
		} else if(ConstantesExpedicao.CONHECIMENTO_INTERNACIONAL.equals(tpDocumentoServico)) {
			CtoInternacional ctoInternacional = CtoInternacionalUtils.getCtoInternacionalInSession();
			ctoInternacional.setServAdicionalDocServs(servicosAdicionaisDoctoServico);
			CtoInternacionalUtils.setCtoInternacionalInSession(ctoInternacional);
		} else if(ConstantesVendas.COTACAO.equals(tpDocumentoServico)) {
			Cotacao cotacao = VendasUtils.getCotacaoInSession();
			cotacao.setServAdicionalDocServs(servicosAdicionaisDoctoServico);
			VendasUtils.setCotacaoInSession(cotacao);
		}
	}

	public void setServAdicionalDocServService(ServAdicionalDocServService servAdicionalDocServService) {
		this.servAdicionalDocServService = servAdicionalDocServService;
	}
	public void setParcelaPrecoService(ParcelaPrecoService parcelaPrecoService) {
		this.parcelaPrecoService = parcelaPrecoService;
	}
}
