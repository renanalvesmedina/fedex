package com.mercurio.lms.expedicao.action;

import java.io.Serializable;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.report.ReportActionSupport;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.expedicao.model.AduanaCtoInt;
import com.mercurio.lms.expedicao.model.CartaCorrecao;
import com.mercurio.lms.expedicao.model.CtoInternacional;
import com.mercurio.lms.expedicao.model.ObservacaoDoctoServico;
import com.mercurio.lms.expedicao.model.service.AduanaCtoIntService;
import com.mercurio.lms.expedicao.model.service.CartaCorrecaoService;
import com.mercurio.lms.expedicao.model.service.CtoInternacionalService;
import com.mercurio.lms.expedicao.model.service.ObservacaoDoctoServicoService;
import com.mercurio.lms.expedicao.report.EmitirCartaCorrecaoService;
import com.mercurio.lms.expedicao.util.ConstantesExpedicao;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;


/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.expedicao.gerarCartaCorrecaoCRTAction"
 */

public class GerarCartaCorrecaoCRTAction extends ReportActionSupport {

	private static final String MASK_18_3 = "###,###,###,###,##0.000";
	private static final String MASK_18_2 = "#,###,###,###,###,##0.00";

	private FilialService filialService;
	private CtoInternacionalService ctoInternacionalService;
	private ObservacaoDoctoServicoService observacaoDoctoServicoService;
	private CartaCorrecaoService cartaCorrecaoService;
	private AduanaCtoIntService aduanaCtoIntService;

	public void setObservacaoDoctoServicoService(ObservacaoDoctoServicoService observacaoDoctoServicoService) {
		this.observacaoDoctoServicoService = observacaoDoctoServicoService;
	}
	
	public void setAduanaCtoIntService(AduanaCtoIntService aduanaCtoIntService) {
		this.aduanaCtoIntService = aduanaCtoIntService;
	}

	public CartaCorrecaoService getCartaCorrecaoService() {
		return cartaCorrecaoService;
	}

	public void setCartaCorrecaoService(CartaCorrecaoService cartaCorrecaoService) {
		this.cartaCorrecaoService = cartaCorrecaoService;
	}

	public void setEmitirCartaCorrecaoService(EmitirCartaCorrecaoService emitirCartaCorrecaoService) {
		this.reportServiceSupport = emitirCartaCorrecaoService;
	}

	public void setCtoInternacionalService(CtoInternacionalService ctoInternacionalService) {
		this.ctoInternacionalService = ctoInternacionalService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public List findFilial(TypedFlatMap  criteria){
		return filialService.findLookupBySgFilial(criteria.getString("sgFilial"), criteria.getString("tpAcesso"));
	}
 
	public List findCtoInternacional(TypedFlatMap criteria) {
		Long nrCrt = criteria.getLong("nrCrt");
		String sgPais = criteria.getString("sgPais");
		Long idFilialOrigem = criteria.getLong("filialByIdFilialOrigem.idFilial");
		return ctoInternacionalService.findBySgPaisNrCrtByFilial(sgPais, nrCrt, idFilialOrigem);
	}

	public List findCtoInternacionalDetalhe(TypedFlatMap criteria) {
		Long nrCrt = criteria.getLong("nrCrt");
		String sgPais = criteria.getString("sgPais");
		Long idFilialOrigem = criteria.getLong("filialByIdFilialOrigem.idFilial");
		List l = ctoInternacionalService.findBySgPaisNrCrtByFilialFull(sgPais, nrCrt, idFilialOrigem);
		for (Iterator iter = l.iterator(); iter.hasNext();) {
			TypedFlatMap map = (TypedFlatMap) iter.next();
			if(!ConstantesExpedicao.DOCUMENTO_SERVICO_EMITIDO.equalsIgnoreCase(map.getString("tpSituacaoCrt.value"))) {
				throw new BusinessException("LMS-04140");
			}
			formatCampo(map, "psReal", MASK_18_3);
			formatCampo(map, "psLiquido", MASK_18_3);
			formatCampo(map, "vlVolume", MASK_18_3);
			formatCampo(map, "vlMercadoria", MASK_18_2);
			formatCampo(map, "vlTotalMercadoria", MASK_18_2);
			formatCampo(map, "vlFreteExterno", MASK_18_2);

			/** ANEXOS */
			List anexos = ctoInternacionalService.findAnexosByIdCtoInternacional(map.getLong("idDoctoServico"));
			if (anexos.size() > 0) {
				String dsAnexos = "";
				for (Iterator it = anexos.iterator(); it.hasNext();) {
					TypedFlatMap flatMap = (TypedFlatMap) it.next();
					dsAnexos += flatMap.getVarcharI18n("anexoDoctoServico.dsAnexoDoctoServico") + ": "+ flatMap.getString("documentosAnexos.dsDocumento") + "\n";
					/** Se for ultimo registro */
					if (!it.hasNext() && StringUtils.isNotEmpty(map.getString("dsAnexos"))) {
						dsAnexos += map.getString("dsAnexos");
					}
				}
				map.put("dsAnexos", dsAnexos);
			}
			/** ADUANAS */
			List aduanas = aduanaCtoIntService.findByIdCtoInternacional(map.getLong("idDoctoServico"));
			if (aduanas.size() > 0) {
				String dsAduanas = "";
				for (Iterator it = aduanas.iterator(); it.hasNext();) {
					AduanaCtoInt aci = (AduanaCtoInt) it.next();
					dsAduanas += aci.getPontoParada().getNmPontoParada() + "\n";
					/** Se for ultimo registro */
					if (!it.hasNext() && StringUtils.isNotEmpty(map.getString("dsAduana"))) {
						dsAduanas += map.getString("dsAduana");
					}
				}
				map.put("dsAduana", dsAduanas);
			}
			/** OBSERVACOES */
			List observacoes = observacaoDoctoServicoService.findByIdDoctoServico(map.getLong("idDoctoServico"));
			String observs = "";
			for (Iterator iterator = observacoes.iterator(); iterator.hasNext();) {
				ObservacaoDoctoServico ods = (ObservacaoDoctoServico) iterator.next();
				observs += ods.getDsObservacaoDoctoServico() + "\n";
			}
			map.put("observacoes", observs);
		}
		return l;
	}

	private void formatCampo(Map map, String campo, String mask) {
		Number valor = (Number)map.get(campo);
		if(valor != null) {
			map.put(campo, FormatUtils.formatDecimal(mask, valor));
		}
	}

	public Integer getRowCountCartaCorrecao(TypedFlatMap criteria) {
		return getCartaCorrecaoService().getRowCountCartaCorrecao(criteria);
	}

	public ResultSetPage findPaginatedCartaCorrecao(TypedFlatMap criteria) {
		ResultSetPage rsp = getCartaCorrecaoService().findPaginatedCartaCorrecao(criteria);
		List result = rsp.getList();
		for (Iterator iter = result.iterator(); iter.hasNext();) {
			TypedFlatMap map = (TypedFlatMap) iter.next();
			String nrPermisso = FormatUtils.formatDecimal("#000", (Number)map.remove("nrPermisso"));
			String nrCrt = FormatUtils.formatDecimal("000000", (Number)map.remove("nrCrt"));
			map.put("nrCrt", map.remove("sgPais") + "." + nrPermisso + "." + nrCrt);
		}
		return rsp;
	}

	public Serializable store(TypedFlatMap parameters) {

		TypedFlatMap toReturn = new TypedFlatMap();
		Long idCartaCorrecao = parameters.getLong("idCartaCorrecao");
		toReturn.put("idCartaCorrecao", idCartaCorrecao);
		/** Não eh permitido Alterar uma Carta */
		if (idCartaCorrecao == null) {
			CtoInternacional cto = new CtoInternacional();
			cto.setIdDoctoServico(parameters.getLong("ctoInternacional.idDoctoServico"));
			cto.setNrCrt(parameters.getLong("ctoInternacional.nrCrt"));

			CartaCorrecao cc = new CartaCorrecao();
			cc.setCtoInternacional(cto);
			cc.setNrCampo(parameters.getDomainValue("nrCampo"));
			cc.setNmDestinatario(parameters.getString("nmDestinatario"));
			cc.setDsConteudoAtual(parameters.getString("dsConteudoAtual"));
			cc.setDsConteudoAlterado(parameters.getString("dsConteudoAlterado"));
			cc.setDtEmissao(JTDateTimeUtils.getDataAtual());
			getCartaCorrecaoService().storeCartaCorrecao(cc);
			toReturn.put("idCartaCorrecao", cc.getIdCartaCorrecao());
			toReturn.put("dtEmissao", cc.getDtEmissao());
		}
		return toReturn;
	}

	public TypedFlatMap findDadosSessao() {
		TypedFlatMap toReturn = new TypedFlatMap();
		Filial filial = SessionUtils.getFilialSessao();
		toReturn.put("idFilialUsuarioLogado", filial.getIdFilial());
		toReturn.put("sgFilialUsuarioLogado", filial.getSgFilial());
		toReturn.put("nmFantasiaFilialUsuarioLogado", filial.getPessoa().getNmFantasia());
		return toReturn;
	}
	
	@Override
	public java.io.File execute(TypedFlatMap parameters) throws Exception {
		return super.execute(parameters);
	}

	public Map findById(Long id) {
		return getCartaCorrecaoService().findCartaCorrecaoById(id);
	}

	public void removeById(Long id) {
		getCartaCorrecaoService().removeById(id);
	}

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
        getCartaCorrecaoService().removeByIds(ids);
    }
}