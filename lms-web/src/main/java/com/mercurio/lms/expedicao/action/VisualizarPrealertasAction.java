package com.mercurio.lms.expedicao.action;

import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.expedicao.model.service.PreAlertaService;
import com.mercurio.lms.municipios.model.Aeroporto;
import com.mercurio.lms.municipios.model.service.AeroportoService;
import com.mercurio.lms.util.session.SessionUtils;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.expedicao.visualizarPrealertasAction"
 */
public class VisualizarPrealertasAction extends CrudAction {

	private AeroportoService aeroportoService;

	public void setAeroportoService(AeroportoService aeroportoService) {
		this.aeroportoService = aeroportoService;
	}
	public void setPreAlertaService(PreAlertaService preAlertaService) {
		this.defaultService = preAlertaService;
	}
	public PreAlertaService getPreAlertaService() {
		return (PreAlertaService) super.defaultService;
	}

	/**
	 * RowCount.
	 */
	public Integer getRowCount(Map criteria) {
		return getPreAlertaService().getRowCount(criteria);
	}

	/**
	 * Paginated.
	 */
	public ResultSetPage findPaginated(Map criteria) {
		return getPreAlertaService().findPaginated(criteria);
	}

	/**
	 * Chamada Default para buscar dados afim de evitar Multiplas chamadas.
	 * @author Andre Valadas
	 * @return
	 */
	public TypedFlatMap findDefaultParameters() {
		TypedFlatMap result = new TypedFlatMap();
		
		if(SessionUtils.getFilialSessao() != null && 
				SessionUtils.getFilialSessao().getAeroporto() != null && 
				SessionUtils.getFilialSessao().getAeroporto().getIdAeroporto() != null) {
		Long idAeroporto = SessionUtils.getFilialSessao().getAeroporto().getIdAeroporto();
		Aeroporto aeroporto = aeroportoService.findById(idAeroporto);

			
		result.put("idAeroporto", aeroporto.getIdAeroporto());
		result.put("sgAeroporto", aeroporto.getSgAeroporto());
		result.put("nmAeroporto", aeroporto.getPessoa().getNmPessoa());
		}
		return result;
	}

	/**
	 * Recebimento de PreAlertas.
	 * @author Andre Valadas
	 * @param ids
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void recebimentoPreAlerta(List idsList) {
		getPreAlertaService().executeRecebimentoPreAlerta(idsList);
	}
}