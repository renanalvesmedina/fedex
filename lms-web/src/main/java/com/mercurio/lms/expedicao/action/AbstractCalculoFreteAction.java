package com.mercurio.lms.expedicao.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.lms.configuracoes.model.ServicoAdicional;
import com.mercurio.lms.expedicao.model.CalculoFrete;
import com.mercurio.lms.expedicao.model.Conhecimento;
import com.mercurio.lms.expedicao.model.ServAdicionalDocServ;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.util.ConhecimentoUtils;
import com.mercurio.lms.expedicao.util.ConstantesExpedicao;
import com.mercurio.lms.expedicao.util.ExpedicaoUtils;
import com.mercurio.lms.tabelaprecos.model.service.ParcelaPrecoService;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.service.DivisaoClienteService;
import com.mercurio.lms.vendas.util.ClienteUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 */
public class AbstractCalculoFreteAction extends CrudAction {
	private DivisaoClienteService divisaoClienteService;
	private ParcelaPrecoService parcelaPrecoService;
	protected ConhecimentoService conhecimentoService;

	public List findDivisaoCliente() {
		List retorno = null;
		CalculoFrete calculoFrete = ExpedicaoUtils.getCalculoFreteInSession();
		Cliente cliente = calculoFrete.getClienteBase();
		if(ClienteUtils.isParametroClienteEspecial(cliente.getTpCliente().getValue())) {
			retorno = divisaoClienteService.findDivisaoClienteByIdServico(cliente.getIdCliente(), calculoFrete.getIdServico());
		}
		return retorno;
	}

	public Map findDataGrid() {
		Map retorno = new HashMap();
		Conhecimento conhecimento = ConhecimentoUtils.getConhecimentoPersistentInSession();
		CalculoFrete calculoFrete = ExpedicaoUtils.getCalculoFreteInSession();
		if(calculoFrete.getBlCalculaParcelas().booleanValue()) {
			Map parcela = parcelaPrecoService.findParcelaByCdParcelaPreco(ConstantesExpedicao.CD_FRETE_PESO);
			retorno.put("parcelaFrete", parcela);	
		}
		List servAdic = conhecimento.getServAdicionalDocServs();
		if(calculoFrete.getBlCalculaServicosAdicionais().booleanValue() && servAdic != null) {
			List servicos = new ArrayList(servAdic.size());
			for (Iterator iter = servAdic.iterator(); iter.hasNext();) {
				ServAdicionalDocServ s = (ServAdicionalDocServ) iter.next();
				Map map = new HashMap();
				ServicoAdicional sa = s.getServicoAdicional();
				map.put("dsServico", sa.getDsServicoAdicional());
				map.put("idServico", sa.getIdServicoAdicional());
				servicos.add(map);
			}
			retorno.put("servicosAdicionais", servicos);
		}
		return retorno;
	}


	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
	}
	public void setParcelaPrecoService(ParcelaPrecoService parcelaPrecoService) {
		this.parcelaPrecoService = parcelaPrecoService;
	}
	public void setDivisaoClienteService(DivisaoClienteService divisaoClienteService) {
		this.divisaoClienteService = divisaoClienteService;
	}
}