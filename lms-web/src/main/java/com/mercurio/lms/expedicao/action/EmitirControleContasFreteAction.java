package com.mercurio.lms.expedicao.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.report.ReportActionSupport;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.service.UsuarioService;
import com.mercurio.lms.expedicao.model.Impressora;
import com.mercurio.lms.expedicao.model.service.ImpressoraService;
import com.mercurio.lms.expedicao.report.ControleContaFreteService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.NetworkUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.service.ClienteService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.expedicao.emitirControleContasFreteAction"
 */
public class EmitirControleContasFreteAction extends ReportActionSupport {
	private ClienteService clienteService;
	private UsuarioService usuarioService;
	private ImpressoraService impressoraService;
	private FilialService filialService;

	public Map findFilialUsuarioLogado(){
		Map map = new HashMap();
		Filial f = SessionUtils.getFilialSessao();
		map.put("idFilial", f.getIdFilial());
		map.put("sgFilial",f.getSgFilial());
		map.put("nmFantasia",f.getPessoa().getNmFantasia());
		map.put("dsFilial", f.getSgFilial() + " - " + f.getPessoa().getNmFantasia());

		return map;
	}

	public List findFiliaisUsuario(){
		List resultado = new ArrayList();
		List filiais = SessionUtils.getFiliaisUsuarioLogado();
		for (Iterator iter = filiais.iterator(); iter.hasNext();) {
			Filial f = (Filial) iter.next();
			Map map = new HashMap();
			map.put("idFilial", f.getIdFilial());
			map.put("dsFilial", f.getSgFilial() + " - " + f.getPessoa().getNmFantasia());
			resultado.add(map);
		}
		return resultado;
	}

	public TypedFlatMap findFilialById(TypedFlatMap criteria) {
		TypedFlatMap result = null;
		List filiais = filialService.findNmSgFilialByIdFilial(criteria.getLong("filial.idFilial"));
		for (Iterator iter = filiais.iterator(); iter.hasNext();) {
			result = (TypedFlatMap) iter.next();
			result.put("nmFantasia",result.get("pessoa.nmFantasia"));
			result.put("dsFilial", result.get("sgFilial") + " - " + result.get("pessoa.nmFantasia"));
		}
		return result;
	}

	public TypedFlatMap findImpressoraUsuarioLogado(TypedFlatMap map) {
		Filial filial = SessionUtils.getFilialSessao();
		Impressora impressora = impressoraService.findImpressoraUsuario(filial.getIdFilial(),NetworkUtils.getMacAddress(map.getString("userip")));
		map.put("idImpressora",impressora.getIdImpressora());
		map.put("dsCheckIn",impressora.getDsCheckIn());
		return map;
	}

	public List findImpressoraLookup(TypedFlatMap criteria){
		return impressoraService.findImpressorasByIdFilial(criteria.getLong("idFilial"));
	}
	
	public List findClienteLookup(TypedFlatMap criteria){
		return clienteService.findLookupCliente(criteria.getString("pessoa.nrIdentificacao"));
	}

	public List findLookupUsuarioFuncionario(TypedFlatMap criteria){
		return usuarioService.findLookupUsuarioFuncionario(null,criteria.getString("nrMatricula"),null,null,null,null,true); 
	}
	
	public void setService(ControleContaFreteService service) {
		this.reportServiceSupport = service;
	}
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}
	public void setImpressoraService(ImpressoraService impressoraService) {
		this.impressoraService = impressoraService;
	}
	public void setUsuarioService(UsuarioService usuarioService) {
		this.usuarioService = usuarioService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

}
