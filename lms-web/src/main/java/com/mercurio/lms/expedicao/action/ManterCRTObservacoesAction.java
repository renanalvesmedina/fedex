package com.mercurio.lms.expedicao.action;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.expedicao.model.CtoInternacional;
import com.mercurio.lms.expedicao.model.ObservacaoDoctoServico;
import com.mercurio.lms.expedicao.model.service.ObservacaoDoctoServicoService;
import com.mercurio.lms.expedicao.util.CtoInternacionalUtils;

/**
 * Generated by: Giuliano Costa
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.expedicao.manterCRTObservacoesAction"
 */
public class ManterCRTObservacoesAction extends CrudAction {
	private ObservacaoDoctoServicoService observacaoDoctoServicoService;

	public Map findCtoInternacionalInSession(){
		CtoInternacional ctoInternacional = getCtoInternacionalInSession();
		List observacoes = ctoInternacional.getObservacaoDoctoServicos();
		TypedFlatMap retorno = new TypedFlatMap();
		
		ObservacaoDoctoServico observacaoDoctoServico = null;

		if(observacoes != null && !observacoes.isEmpty()){
			observacaoDoctoServico = (ObservacaoDoctoServico) observacoes.get(0);
		} else {
			observacaoDoctoServico = new ObservacaoDoctoServico();
			ctoInternacional.addObservacaoDoctoServico(observacaoDoctoServico);
		}

		retorno.put("ctoInternacional.dsParceiroEntrega", ctoInternacional.getDsParceiroEntrega());
		
		DomainValue tpEntregarEm = ctoInternacional.getTpEntregarEm();
		if(tpEntregarEm != null) retorno.put("ctoInternacional.tpEntregarEm", tpEntregarEm.getValue());

		retorno.put("ctoInternacional.observacaoDoctoServicos.dsObservacaoDoctoServico", observacaoDoctoServico.getDsObservacaoDoctoServico());
		retorno.put("ctoInternacional.observacaoDoctoServicos.idObservacaoDoctoServico", observacaoDoctoServico.getIdObservacaoDoctoServico());
		retorno.put("isEditavel", (ctoInternacional.getIdDoctoServico() == null ? "S" : "N"));

		return retorno;
	}
	
	public void storeInSession(TypedFlatMap criteria){
		CtoInternacional ctoInternacional = getCtoInternacionalInSession();
		List observacoes = ctoInternacional.getObservacaoDoctoServicos();
		ObservacaoDoctoServico observacaoDoctoServico = null;

		if(observacoes == null || observacoes.isEmpty()){
			observacaoDoctoServico = new ObservacaoDoctoServico();
			observacoes = new ArrayList();
			observacoes.add(observacaoDoctoServico);
			ctoInternacional.setObservacaoDoctoServicos(observacoes);
		} else {
			observacaoDoctoServico = (ObservacaoDoctoServico) observacoes.get(0);
		}

		observacaoDoctoServico.setDsObservacaoDoctoServico(criteria.getString("observacaoDoctoServicos.dsObservacaoDoctoServico"));
		observacaoDoctoServico.setBlPrioridade(Boolean.FALSE);
		ctoInternacional.setDsParceiroEntrega(criteria.getString("dsParceiroEntrega"));
		ctoInternacional.setTpEntregarEm(new DomainValue(criteria.getString("tpEntregarEm")));

		CtoInternacionalUtils.setCtoInternacionalInSession(ctoInternacional);
	}
	
	private CtoInternacional getCtoInternacionalInSession(){
		CtoInternacional ctoInternacional = CtoInternacionalUtils.getCtoInternacionalInSession();

		if(ctoInternacional.getIdDoctoServico() != null && ctoInternacional.getObservacaoDoctoServicos() == null){
			List observacaoDoctosServico = observacaoDoctoServicoService.findByIdDoctoServico(ctoInternacional.getIdDoctoServico()); 
			ctoInternacional.setObservacaoDoctoServicos(observacaoDoctosServico);
		}

		return ctoInternacional;
	}

	//Setters
	public void setObservacaoDoctoServicoService(
			ObservacaoDoctoServicoService observacaoDoctoServicoService) {
		this.observacaoDoctoServicoService = observacaoDoctoServicoService;
	}
}