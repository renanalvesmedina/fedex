package com.mercurio.lms.expedicao.action;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.service.MoedaPaisService;
import com.mercurio.lms.configuracoes.model.service.TramoFreteInternacionalService;
import com.mercurio.lms.expedicao.model.CtoInternacional;
import com.mercurio.lms.expedicao.model.TrechoCtoInt;
import com.mercurio.lms.expedicao.model.service.TrechoCtoIntService;
import com.mercurio.lms.expedicao.util.CtoInternacionalUtils;
import com.mercurio.lms.util.BigDecimalUtils;

/**
 * Generated by: Giuliano Costa
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.expedicao.manterCRTGastosAction"
 */
public class ManterCRTGastosAction extends AbstractManterCRTCalculoAction {
	private MoedaPaisService moedaPaisService;
	private TramoFreteInternacionalService tramoFreteInternacionalService;
	private TrechoCtoIntService trechoCtoIntService;

	public List findMoedaCombo(){
		return moedaPaisService.findMoedaByPaisUsuarioLogado();
	}

	private List createListTrechosToGrid(List trechos){
		List retorno = null;
		
		if(trechos != null && !trechos.isEmpty()){
			retorno = new ArrayList(trechos.size());
			
			for(int i = 0; i < trechos.size(); i++){
				TrechoCtoInt trechoCtoInt = (TrechoCtoInt) trechos.get(i);

				TypedFlatMap trechoMap = new TypedFlatMap();
				trechoMap.put("tramoFreteInternacional.dsTramoFreteInternacional", trechoCtoInt.getTramoFreteInternacional().getDsTramoFreteInternacional());
				trechoMap.put("idTrechoCtoInt", trechoCtoInt.getIdTrechoCtoInt());
				trechoMap.put("vlFreteRemetente", trechoCtoInt.getVlFreteRemetente());
				trechoMap.put("vlFreteDestinatario", trechoCtoInt.getVlFreteDestinatario());

				retorno.add(trechoMap);
			}
		}
		return retorno;
	}
	
	public Serializable recalculateTotals(TrechoCtoInt trechoCtoInt){
		TypedFlatMap typedFlatMapRetorno = new TypedFlatMap();
		CtoInternacional ctoInternacional = getCrtInSession();
		List trechosCtoInt = ctoInternacional.getTrechosCtoInternacional();

		TrechoCtoInt trechoInCrt = (TrechoCtoInt)trechosCtoInt.get(trechosCtoInt.indexOf(trechoCtoInt));

		trechoInCrt.setVlFreteRemetente(trechoCtoInt.getVlFreteRemetente());
		trechoInCrt.setVlFreteDestinatario(trechoCtoInt.getVlFreteDestinatario());

		BigDecimal vlFreteExterno = tramoFreteInternacionalService.executeCalculoVlFreteExterno(ctoInternacional);//Executa o calculo do frete externo
		ctoInternacional.setVlFreteExterno(vlFreteExterno);
		TrechoCtoInt totalizadorTrechos = sumVlFilial(trechosCtoInt);

		typedFlatMapRetorno.put("vlTotalGeral", ctoInternacional.getVlTotalDocServico());
		typedFlatMapRetorno.put("vlFreteExterno", vlFreteExterno);

		typedFlatMapRetorno.put("vlTotalRemetente", totalizadorTrechos.getVlFreteRemetente());
		typedFlatMapRetorno.put("vlTotalDestinatario", totalizadorTrechos.getVlFreteDestinatario());

		CtoInternacionalUtils.setCtoInternacionalInSession(ctoInternacional);

		return typedFlatMapRetorno;
	}

	public Serializable findCtoInternacionalInSession(){
		CtoInternacional ctoInternacional = getCrtInSession();
		List trechos = ctoInternacional.getTrechosCtoInternacional(); 

		if(trechos == null || trechos.isEmpty()){
			trechos = tramoFreteInternacionalService.executeCalculoTrechosCtoInternacional(ctoInternacional);
			ctoInternacional.setTrechosCtoInternacional(trechos);
		}

		//Trata o retorno pra View
		BigDecimal vlFreteExterno = tramoFreteInternacionalService.executeCalculoVlFreteExterno(ctoInternacional);//Executa o calculo do frete externo
		ctoInternacional.setVlFreteExterno(vlFreteExterno);
		List trechosToGrid = createListTrechosToGrid(ctoInternacional.getTrechosCtoInternacional());

		TypedFlatMap typedFlatMapRetorno = new TypedFlatMap();

		typedFlatMapRetorno.put("moeda.dsSimbolo", ctoInternacional.getMoeda().getDsSimbolo());
		typedFlatMapRetorno.put("moeda.sgMoeda", ctoInternacional.getMoeda().getSgMoeda());
		typedFlatMapRetorno.put("vlTotalGeral", ctoInternacional.getVlTotalDocServico());
		typedFlatMapRetorno.put("vlFreteExterno", vlFreteExterno);

		TrechoCtoInt totalizadorTrechos = sumVlFilial(ctoInternacional.getTrechosCtoInternacional());
		typedFlatMapRetorno.put("vlTotalRemetente", totalizadorTrechos.getVlFreteRemetente());
		typedFlatMapRetorno.put("vlTotalDestinatario", totalizadorTrechos.getVlFreteDestinatario());

		typedFlatMapRetorno.put("trechoCtoInt", trechosToGrid);
		
		CtoInternacionalUtils.setCtoInternacionalInSession(ctoInternacional);

		return typedFlatMapRetorno;
	}

	private TrechoCtoInt sumVlFilial(List trechos){
		
		BigDecimal vlTotalRemetente = BigDecimalUtils.ZERO;
		BigDecimal vlTotalDestinatario = BigDecimalUtils.ZERO;

		if(trechos != null && !trechos.isEmpty()){
			
			for(int i = 0; i < trechos.size(); i++){
				TrechoCtoInt trechoCtoInt = (TrechoCtoInt) trechos.get(i);
				vlTotalRemetente = vlTotalRemetente.add(trechoCtoInt.getVlFreteRemetente());
				vlTotalDestinatario = vlTotalDestinatario.add(trechoCtoInt.getVlFreteDestinatario());
			}
		}

		TrechoCtoInt trechoCtoInt = new TrechoCtoInt();
		trechoCtoInt.setVlFreteRemetente(vlTotalRemetente);
		trechoCtoInt.setVlFreteDestinatario(vlTotalDestinatario);

		return trechoCtoInt;
	}

	protected CtoInternacional getCrtInSession(){
		CtoInternacional ctoInternacional = super.getCrtInSession();

		List trechos = ctoInternacional.getTrechosCtoInternacional(); 

		if(ctoInternacional.getIdDoctoServico() != null && trechos == null) {
			List trechosCtoInt = trechoCtoIntService.findByIdCtoInternacional(ctoInternacional.getIdDoctoServico());
			ctoInternacional.setTrechosCtoInternacional(trechosCtoInt);
		}

		return ctoInternacional;
	}
	
	//Setters
	public void setMoedaPaisService(MoedaPaisService moedaPaisService) {
		this.moedaPaisService = moedaPaisService;
	}

	public void setTramoFreteInternacionalService(
			TramoFreteInternacionalService tramoFreteInternacionalService) {
		this.tramoFreteInternacionalService = tramoFreteInternacionalService;
	}

	public void setTrechoCtoIntService(TrechoCtoIntService trechoCtoIntService) {
		this.trechoCtoIntService = trechoCtoIntService;
	}
}