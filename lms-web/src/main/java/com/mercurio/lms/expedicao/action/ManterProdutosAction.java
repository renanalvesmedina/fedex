package com.mercurio.lms.expedicao.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.masterdetail.ItemList;
import com.mercurio.adsm.framework.model.masterdetail.ItemListConfig;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailAction;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailFactory;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailKey;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntry;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntryConfig;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.expedicao.model.CategoriaProduto;
import com.mercurio.lms.expedicao.model.NomeProduto;
import com.mercurio.lms.expedicao.model.Produto;
import com.mercurio.lms.expedicao.model.ProdutoCategoriaProduto;
import com.mercurio.lms.expedicao.model.service.CategoriaProdutoService;
import com.mercurio.lms.expedicao.model.service.ClasseRiscoService;
import com.mercurio.lms.expedicao.model.service.NaturezaProdutoService;
import com.mercurio.lms.expedicao.model.service.NomeProdutoService;
import com.mercurio.lms.expedicao.model.service.ProdutoCategoriaProdutoService;
import com.mercurio.lms.expedicao.model.service.ProdutoService;
import com.mercurio.lms.expedicao.model.service.SubClasseRiscoService;
import com.mercurio.lms.expedicao.model.service.TipoProdutoService;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.expedicao.manterProdutosAction"
 */

public class ManterProdutosAction extends MasterDetailAction {
    
    private static final String NOME_PRODUTO_CONFIG_ALIAS = "NOME_PRODUTO_CONFIG_ALIAS"; 
    private NomeProdutoService nomeProdutoService;
    private CategoriaProdutoService categoriaProdutoService;
    private NaturezaProdutoService naturezaProdutoService;
    private ClasseRiscoService classeRiscoService;
    private SubClasseRiscoService subClasseRiscoService;
    private TipoProdutoService tipoProdutoService;
    private ProdutoCategoriaProdutoService produtoCategoriaProdutoService;
	
    public ProdutoService getProdutoService() {
        return (ProdutoService)getMasterService() ;
    }   
    
    public void setProdutoService(ProdutoService produtoService) {
        setMasterService(produtoService);
    }
    
    @SuppressWarnings("rawtypes")
    public Map store(TypedFlatMap map) {
        MasterEntry master = getMasterFromSession(map.getLong("idProduto"), true);
        
        Produto produto = (Produto) master.getMaster();
        produto.setIdProduto(map.getLong("idProduto"));
        produto.setNrOrdem(map.getInteger("nrOrdem"));
        produto.setNrOnu(map.getInteger("nrOnu"));
        produto.setNrNcm(map.getString("nrNcm"));
        if(map.getLong("naturezaProduto.idNaturezaProduto") != null){
            produto.setNaturezaProduto(naturezaProdutoService.findById(map.getLong("naturezaProduto.idNaturezaProduto")));
        }
        if(map.getLong("classeRisco.idClasseRisco") != null){
            produto.setClasseRisco(classeRiscoService.findById(map.getLong("classeRisco.idClasseRisco")));
        }
        if(map.getLong("subClasseRisco.idSubClasseRisco") != null){
            produto.setSubClasseRisco(subClasseRiscoService.findById(map.getLong("subClasseRisco.idSubClasseRisco")));
        }
        if(map.getLong("tipoProduto.idTipoProduto") != null){
            produto.setTipoProduto(tipoProdutoService.findById(map.getLong("tipoProduto.idTipoProduto")));
        }

        produto.setBlProdutoProibido(map.getBoolean("blProdutoProibido"));
        produto.setTpSituacao(map.getDomainValue("tpSituacao"));

        ItemList items = getItemsFromSession(master, NOME_PRODUTO_CONFIG_ALIAS);
        if (items.size() == 0){
            throw new BusinessException("LMS-04573");
        }
        ItemListConfig config = getMasterConfig().getItemListConfig(NOME_PRODUTO_CONFIG_ALIAS);        
               
        getProdutoService().storeAll(produto, map, items, config);
        
        items.resetItemsState(); 
        updateMasterInSession(master);
        
        return mountMap(produto); 
    }
    
    public Serializable storeNomeProduto(TypedFlatMap parameters) {
        return saveItemInstance( parameters, NOME_PRODUTO_CONFIG_ALIAS);
    }
    
    public void clearSessionItens(){
        super.removeMasterFromSession();
    }
    
    public Object findById(Long id) {
        NomeProduto nomeProduto = nomeProdutoService.findById(id);
        TypedFlatMap mapProduto = mountMap(nomeProduto.getProduto());
        
        putMasterInSession(nomeProduto.getProduto()); 
        return mapProduto;
    } 
    
    private TypedFlatMap mountMap(Produto produto) {
        TypedFlatMap mapRetorno = new TypedFlatMap();
        
        mapRetorno.put("idProduto",produto.getIdProduto());
        mapRetorno.put("nrOrdem", produto.getNrOrdem());
        mapRetorno.put("nrOnu", produto.getNrOnu());
        mapRetorno.put("nrNcm", produto.getNrNcm());
        if(produto.getNaturezaProduto()!= null){
            mapRetorno.put("naturezaProduto.idNaturezaProduto", produto.getNaturezaProduto().getIdNaturezaProduto());
        }
        if(produto.getClasseRisco()!= null){
            mapRetorno.put("classeRisco.idClasseRisco", produto.getClasseRisco().getIdClasseRisco());
        }
        if(produto.getSubClasseRisco()!= null){
            mapRetorno.put("subClasseRisco.idSubClasseRisco", produto.getSubClasseRisco().getIdSubClasseRisco());
        }
        if(produto.getTipoProduto()!= null){
            mapRetorno.put("tipoProduto.idTipoProduto", produto.getTipoProduto().getIdTipoProduto());
        }
        mapRetorno.put("blProdutoProibido", produto.getBlProdutoProibido());
        mapRetorno.put("tpSituacao", produto.getTpSituacao().getValue());
        
        
        List listProdutoCategoriaProduto = new ArrayList();
        produto.setProdutoCategoriaProdutos(produtoCategoriaProdutoService.findProdutoCategoriaProdutoByIdProduto(produto.getIdProduto()));  
        for (int i=0; i<produto.getProdutoCategoriaProdutos().size(); i++) {
            ProdutoCategoriaProduto produtoCategoriaProduto = produto.getProdutoCategoriaProdutos().get(i);
            TypedFlatMap mapProdutoCategoriaProduto = new TypedFlatMap();
            
            mapProdutoCategoriaProduto.put("idProdutoCategoriaProduto", produtoCategoriaProduto.getIdProdutoCategoriaProduto());
            mapProdutoCategoriaProduto.put("idCategoriaProduto", produtoCategoriaProduto.getCategoriaProduto().getIdCategoriaProduto());
            mapProdutoCategoriaProduto.put("dsCategoriaProduto", produtoCategoriaProduto.getCategoriaProduto().getDsCategoriaProduto());

            listProdutoCategoriaProduto.add(mapProdutoCategoriaProduto);
        }   
        mapRetorno.put("produtoCategoriaProdutos", listProdutoCategoriaProduto);

        return mapRetorno;
    }
    
    public void removeById(java.lang.Long id) {
        NomeProduto nomeProduto = nomeProdutoService.findById(id);
        getProdutoService().removeById(nomeProduto.getProduto().getIdProduto());
    }
    
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
	    List<Long> listIdProdutos = new ArrayList<Long>();
	    for (int i = 0; i < ids.size(); i++) {
	        NomeProduto nomeProduto = nomeProdutoService.findById((Long)ids.get(i));
	        listIdProdutos.add(nomeProduto.getProduto().getIdProduto());
        }
	    getProdutoService().removeByIds(listIdProdutos);
    }
    
    public TypedFlatMap getDadosSessao() {
        TypedFlatMap map = new TypedFlatMap();
        map.put("idUsuarioSessao", SessionUtils.getUsuarioLogado()
                .getIdUsuario());
        map.put("idFilialSessao", SessionUtils.getFilialSessao().getIdFilial());
        map.put("siglaSimboloMoedaSessao", SessionUtils.getMoedaSessao()
                .getSiglaSimbolo());
        map.put("dataHoraAtual", JTDateTimeUtils.getDataHoraAtual());
        map.put("dataAtual", JTDateTimeUtils.getDataAtual());

        return map;
    }
    
    @SuppressWarnings({ "rawtypes", "unchecked" })
    public ResultSetPage findPaginatedNomeProduto(TypedFlatMap criteria) {
        ResultSetPage rspNomeProduto = findPaginatedItemList(criteria, NOME_PRODUTO_CONFIG_ALIAS);
        
        List listNomeProduto = new ArrayList();
        for(int i=0; i< rspNomeProduto.getList().size(); i++) {
            NomeProduto nomeProduto = (NomeProduto) rspNomeProduto
                    .getList().get(i);
            TypedFlatMap mapNomeProduto = new TypedFlatMap();
            
            mapNomeProduto.put("idNomeProduto",nomeProduto.getIdNomeProduto());
            mapNomeProduto.put("dsNomeProduto",nomeProduto.getDsNomeProduto());
            mapNomeProduto.put("produto.idProduto",nomeProduto.getProduto().getIdProduto());
            mapNomeProduto.put("tpNomeProduto.description", nomeProduto.getTpNomeProduto().getDescription());
            mapNomeProduto.put("tpNomeProduto.value", nomeProduto.getTpNomeProduto().getValue());
            
            listNomeProduto.add(mapNomeProduto);
        }
        
        rspNomeProduto.setList(listNomeProduto);
        
        return rspNomeProduto;  
    }
    
    protected MasterEntryConfig createMasterConfig(MasterDetailFactory masterFactory) {    
        MasterEntryConfig config = masterFactory.createMasterEntryConfig(Produto.class, true);

        Comparator descComparator = new Comparator() {
            public int compare(Object obj1, Object obj2) {
                return 1;       
            }
        };      

        ItemListConfig itemInit = new ItemListConfig() {
 
            @Override
            public void setMasterOnItem(Object master, Object itemBean) {
                ((NomeProduto) itemBean).setProduto((Produto)master);
            }
            @Override
            public List initialize(Long masterId, Map parameters) {             
                return nomeProdutoService.findNomeProdutoByIdProduto(masterId);
            }

            /**
             * Busca rowCount da grid da tela filha
             * Passa por este ponto apenas na primeira vez em que a list filha e chamada.
             * Apos a primeira vez ela e carregada da memoria
             * 
             * @param masterId id do pai
             * @param parameters todos os parametros vindo da tela pai
             */     
            @Override
            public Integer getRowCount(Long masterId, Map parameters) {             
                return Integer.valueOf(nomeProdutoService.findNomeProdutoByIdProduto(masterId).size());                
            }
            
            @Override
            public void modifyItemValues(Object newBean, Object bean) {
                NomeProduto nomeModified = (NomeProduto) newBean;
                NomeProduto baseNome = (NomeProduto) bean;
                baseNome.setIdNomeProduto(nomeModified.getIdNomeProduto());
                baseNome.setDsNomeProduto(nomeModified.getDsNomeProduto());
                baseNome.setTpNomeProduto(nomeModified.getTpNomeProduto());
                baseNome.setProduto(nomeModified.getProduto());
            }
            
            /**
             * Todos os dados a serem carregados na grid pelo form passam antes por este
             * metodo. Para se fazer uma validacao...
             * Recomenda-se que o bean em questao seja gerado nesta classe a partir dos
             * parametros enviados da tela para se evitar um 'ReflectionUtils'
             * 
             * @param parameters 
             * @param bean a ser istanciado
             * @return Object bean instanciado
             */
            @Override
            public Object populateNewItemInstance(Map parameters, Object bean) {
                NomeProduto nomeProduto = (NomeProduto) bean;             
                TypedFlatMap param = (TypedFlatMap) parameters;
                
                nomeProduto.setIdNomeProduto(param.getLong("idNomeProduto"));
                nomeProduto.setDsNomeProduto(param.getString("dsNomeProduto"));
                
                DomainValue tpNomeProduto = getDomainValueService()
                        .findDomainValueByValue("DM_TIPO_NOME_PRODUTO",
                                param.getString("tpNomeProduto"));
                
                nomeProduto.setTpNomeProduto(tpNomeProduto);
                
                return nomeProduto;
            }           

        };      
        
        config.addItemConfig(NOME_PRODUTO_CONFIG_ALIAS, NomeProduto.class, itemInit, descComparator);
        
        return config;
    }
    
    public List findCategoriaProduto(Map criteria) {
        List retorno = new ArrayList();
        List listCategoriaProduto = categoriaProdutoService.find(criteria);
        for (Iterator iter = listCategoriaProduto.iterator(); iter.hasNext();) {
            TypedFlatMap map = new TypedFlatMap();
            CategoriaProduto categoriaProduto = (CategoriaProduto) iter.next();
            map.put("idCategoriaProduto",
                    categoriaProduto.getIdCategoriaProduto());
            map.put("dsCategoriaProduto",
                    categoriaProduto.getDsCategoriaProduto());
            retorno.add(map);
        }
        return retorno;
    }
    
    public Object findByIdProduto(MasterDetailKey key) {
        NomeProduto nomeProduto = (NomeProduto) findItemById(key, NOME_PRODUTO_CONFIG_ALIAS);
        TypedFlatMap mapNomeProduto = new TypedFlatMap();         
        
        mapNomeProduto.put("idNomeProduto", nomeProduto.getIdNomeProduto());
        mapNomeProduto.put("dsNomeProduto", nomeProduto.getDsNomeProduto());
        mapNomeProduto.put("tpNomeProduto", nomeProduto.getTpNomeProduto().getValue());
        
        return mapNomeProduto;
    }
    
    public Integer getRowCountNomeProduto(TypedFlatMap parameters){
        getMasterFromSession(parameters.getLong("idProduto"), true);
        return getRowCountItemList(parameters, NOME_PRODUTO_CONFIG_ALIAS);
    } 
    
    @ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIdsNomeProduto(List ids) {
        super.removeItemByIds(ids, NOME_PRODUTO_CONFIG_ALIAS);        
    } 
    
    public NomeProdutoService getNomeProdutoService() {
        return nomeProdutoService;
    }

    public void setNomeProdutoService(NomeProdutoService nomeProdutoService) {
        this.nomeProdutoService = nomeProdutoService;
    }
    public void setCategoriaProdutoService(
            CategoriaProdutoService categoriaProdutoService) {
        this.categoriaProdutoService = categoriaProdutoService;
    }
    public void setNaturezaProdutoService(
            NaturezaProdutoService naturezaProdutoService) {
        this.naturezaProdutoService = naturezaProdutoService;
    }
    public void setClasseRiscoService(ClasseRiscoService classeRiscoService) {
        this.classeRiscoService = classeRiscoService;
    }
    public void setSubClasseRiscoService(SubClasseRiscoService subClasseRiscoService) {
        this.subClasseRiscoService = subClasseRiscoService;
    }
    public void setTipoProdutoService(TipoProdutoService tipoProdutoService) {
        this.tipoProdutoService = tipoProdutoService;
    }
    public void setProdutoCategoriaProdutoService(
            ProdutoCategoriaProdutoService produtoCategoriaProdutoService) {
        this.produtoCategoriaProdutoService = produtoCategoriaProdutoService;
    }
}
