package com.mercurio.lms.expedicao.action;

import java.util.List;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.expedicao.model.service.ConhecimentoCancelarService;
import com.mercurio.lms.expedicao.model.service.CtoInternacionalService;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.expedicao.cancelarCRTAction"
 */

public class CancelarCRTAction extends CrudAction {
	
	private ConhecimentoCancelarService conhecimentoCancelarService;
	private ConfiguracoesFacade configuracoesFacade;
	private CtoInternacionalService ctoInternacionalService;

	public void setCtoInternacionalService(CtoInternacionalService ctoInternacionalService) {
		this.ctoInternacionalService = ctoInternacionalService;
	}

	public void setConhecimentoCancelarService(ConhecimentoCancelarService conhecimentoCancelarService) {
		this.conhecimentoCancelarService = conhecimentoCancelarService;
	}

	/**
	 * Busca CTRs p/ Lookup
	 * @param criteria
	 * @return
	 */
	public List findLookup(TypedFlatMap criteria) {
		Long nrCrt = criteria.getLong("nrCrt");
		String sgPais = criteria.getString("sgPais");
		Long idFilialOrigem = criteria.getLong("filialByIdFilialOrigem.idFilial");
		return ctoInternacionalService.findLookup(sgPais, nrCrt, idFilialOrigem);
	}
	
	/**
	 * Cancelamento CRT
	 * @author Andre Valadas
	 * 
	 * @param criteria
	 */
	public void cancelarCRT(TypedFlatMap criteria) {

		Long idDoctoServico = criteria.getLong("ctoInternacional.idDoctoServico");
		Long nrCrt = criteria.getLong("ctoInternacional.nrCrt");
		Long idMotivoCancelamento = criteria.getLong("motivoCancelamento.idMotivoCancelamento");
		Long idFilialOrigem = SessionUtils.getFilialSessao().getIdFilial();

		//*** validacoes do Form
		if (idDoctoServico.longValue() < 1 || nrCrt.longValue() < 1)
			throw new BusinessException("requiredField", new Object[]{configuracoesFacade.getMensagem("numeroCRT")});
		if (idMotivoCancelamento.longValue() < 1)
			throw new BusinessException("requiredField", new Object[]{configuracoesFacade.getMensagem("motivoDeCancelamento")});

		conhecimentoCancelarService.cancelCRT(idDoctoServico, idMotivoCancelamento, idFilialOrigem);
	}	
}
