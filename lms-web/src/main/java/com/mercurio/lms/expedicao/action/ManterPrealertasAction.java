package com.mercurio.lms.expedicao.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.service.ControleCargaService;
import com.mercurio.lms.coleta.model.service.PedidoColetaService;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteService;
import com.mercurio.lms.contratacaoveiculos.model.service.MotoristaService;
import com.mercurio.lms.expedicao.model.Awb;
import com.mercurio.lms.expedicao.model.PreAlerta;
import com.mercurio.lms.expedicao.model.service.AwbService;
import com.mercurio.lms.expedicao.model.service.PreAlertaService;
import com.mercurio.lms.expedicao.util.AwbUtils;
import com.mercurio.lms.expedicao.util.ConstantesExpedicao;
import com.mercurio.lms.municipios.model.Empresa;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.EmpresaService;
import com.mercurio.lms.municipios.model.service.RotaColetaEntregaService;
import com.mercurio.lms.portaria.model.service.InformarSaidaService;
import com.mercurio.lms.util.AliasToNestedMapResultTransformer;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.expedicao.manterPrealertasAction"
 */
public class ManterPrealertasAction extends CrudAction {

	private AwbService awbService;
	private EmpresaService empresaService;
	private ControleCargaService controleCargaService;
	private MotoristaService motoristaService;
	private RotaColetaEntregaService rotaColetaEntregaService;
	private MeioTransporteService meioTransporteService;
	private PedidoColetaService pedidoColetaService;
	private InformarSaidaService informarSaidaService;
	
	public MeioTransporteService getMeioTransporteService() {
		return meioTransporteService;
	}
	public void setMeioTransporteService(MeioTransporteService meioTransporteService) {
		this.meioTransporteService = meioTransporteService;
	}
	public EmpresaService getEmpresaService() {
		return empresaService;
	}
	public void setEmpresaService(EmpresaService empresaService) {
		this.empresaService = empresaService;
	}
	public void setService(PreAlertaService preAlertaService) {
		this.defaultService = preAlertaService;
	}
	public void setAwbService(AwbService awbService) {
		this.awbService = awbService;
	}

	public PreAlertaService getPreAlertaService() {
		return (PreAlertaService) this.defaultService;
	}

	public Serializable store(TypedFlatMap criteria) {
		/** Converte DataType */
		Awb awb = new Awb();
		awb.setIdAwb(criteria.getLong("awb.idAwb"));
		
		Boolean blVooConfirmadoNew = criteria.getBoolean("blVooConfirmado");
		Boolean blVooConfirmadoOld = criteria.getBoolean("blVooConfirmadoRef");
		Boolean blIsFilialParceira = findIsResponsavelAwbEmpresaParceira(awb.getIdAwb());
		
		if(!blVooConfirmadoNew.equals(blVooConfirmadoOld)){
			if(blVooConfirmadoNew && blIsFilialParceira){
				if (criteria.getLong("meioTransporteByIdTransportado.idMeioTransporte") == null || 
						criteria.getLong("motorista.idMotorista") == null || 
						criteria.getLong("rotaColetaEntrega.idRotaColetaEntrega") == null) {
					throw new BusinessException("parceira");
				}else{
					executeValidaInformacoesControleCarga(criteria);				
				}
			}else if(!criteria.getBoolean("isConfirmed") && blIsFilialParceira){
				throw new BusinessException("parceira");
			}
		}
		
		PreAlerta preAlerta = new PreAlerta();
		preAlerta.setIdPreAlerta(criteria.getLong("idPreAlerta"));
		preAlerta.setNrPreAlerta(criteria.getInteger("nrPreAlerta"));
		preAlerta.setDsVoo(criteria.getString("dsVoo"));
		preAlerta.setBlVooConfirmado(criteria.getBoolean("blVooConfirmado"));
		preAlerta.setDhSaida(criteria.getDateTime("dhSaida"));
		preAlerta.setDhChegada(criteria.getDateTime("dhChegada"));
		preAlerta.setDhRecebimentoMens(criteria.getDateTime("dhRecebimentoMens"));

		Long idUsuario = criteria.getLong("usuario.idUsuario");
		if (idUsuario != null) {
			Usuario usuario = new Usuario();
			usuario.setIdUsuario(idUsuario);
			preAlerta.setUsuario(usuario);
		}

		preAlerta.setAwb(awb);

		TypedFlatMap toReturn = getPreAlertaService().executeValidateInStore(preAlerta, 
				criteria.getLong("meioTransporteByIdTransportado.idMeioTransporte"), criteria.getLong("motorista.idMotorista"),
				criteria.getLong("rotaColetaEntrega.idRotaColetaEntrega"));
		
		getPreAlertaService().executeSendEmail(preAlerta, toReturn, blIsFilialParceira);
		
		return toReturn;
	}
	
	
	
	private void executeValidaInformacoesControleCarga(TypedFlatMap criteria) {
		controleCargaService.validateVeiculoControleCarga(criteria.getLong("meioTransporteByIdTransportado.idMeioTransporte"), false);
		motoristaService.validateCNHMotorista(criteria.getLong("motorista.idMotorista")); 	
	}
	
	public boolean findIsResponsavelAwbEmpresaParceira(Long idAwb) {
		Empresa empresa = awbService.findResponsavelAwbEmpresaParceira(idAwb);
		if(empresa != null){
			return true;
		}
		return false;	
	
	}

	public Serializable findById(Long id) {
		/** Valida se Usuario pode Alterar PreAlerta */
		Map map = getPreAlertaService().findMapById(id);
		TypedFlatMap typedMap = new TypedFlatMap();
		typedMap.putAll(map);
		typedMap.put("isEditavel", Boolean.valueOf(SessionUtils.getFilialSessao().getIdFilial().equals(typedMap.getLong("awb.filialByIdFilialOrigem.idFilial"))));
		return typedMap;
	}

	public Integer getRowCountPreAlerta(TypedFlatMap criteria) {
		return getPreAlertaService().getRowCountPreAlerta(criteria);
	}

	public ResultSetPage findPaginatedPreAlerta(TypedFlatMap criteria) {
		ResultSetPage rsp = getPreAlertaService().findPaginatedPreAlerta(criteria);
		rsp.setList(AliasToNestedMapResultTransformer.getInstance().transformListResult(rsp.getList()));
		
		return rsp;
	}

	/**
	 * findAwbLookup
	 * 
	 * @param criteria
	 * @return
	 */
	public List findAwbLookup(TypedFlatMap criteria){
		return awbService.findLookup(criteria);
	}
	
	public Awb findAwbById(TypedFlatMap criteria){
		return awbService.findById(criteria.getLong("awb.idAwb"));
	}
	
	public List findLookupSgCiaAerea(Map criteria) {
		TypedFlatMap mapResult = new TypedFlatMap();
		List listResult = new ArrayList();
		
		criteria.put("tpEmpresa", ConstantesExpedicao.TP_EMPRESA_CIA_AEREA);
		criteria.put("sgEmpresa", criteria.get("sgEmpresa").toString().toUpperCase());
		
		List ciaList = empresaService.findLookupEmpresaAwb(criteria);
		if (ciaList != null && !ciaList.isEmpty()) {
			for (int i = 0; i < ciaList.size(); i++) {
				Empresa ciaAerea = (Empresa) ciaList.get(i);
				mapResult.put("idEmpresa", ciaAerea.getIdEmpresa());
				mapResult.put("sgEmpresa", ciaAerea.getSgEmpresa());
				
				listResult.add(mapResult);
			}
		}		
		
		return listResult;
	}
	
	public List findLookupAwb(Map criteria) {
		TypedFlatMap mapResult = new TypedFlatMap();
		List listResult = new ArrayList();
		
		if(ConstantesExpedicao.TP_STATUS_AWB_EMITIDO.equals(criteria.get("tpStatusAwb").toString())){
			Awb awbAux = AwbUtils.splitNrAwb(criteria.get("nrAwb").toString());
			
			if(awbAux.getNrAwb() != null){
				criteria.put("nrAwb", awbAux.getNrAwb());
				criteria.put("dsSerie", awbAux.getDsSerie());
				criteria.put("dvAwb", awbAux.getDvAwb());
			}
		}else{
			criteria.put("idAwb", criteria.get("nrAwb"));
			criteria.remove("nrAwb");
		}
			
		List awbList = awbService.findLookup(criteria);
		if (awbList != null && !awbList.isEmpty()) {
			for (int i = 0; i < awbList.size(); i++) {
				Awb awb = (Awb) awbList.get(i);
				
				if(ConstantesExpedicao.TP_STATUS_AWB_EMITIDO.equals(awb.getTpStatusAwb().getValue())){
					mapResult.put("idAwb", awb.getIdAwb());
					mapResult.put("nrAwb", AwbUtils.getNrAwb(awb));
					mapResult.put("nrAwbFormatado",  AwbUtils.getNrAwbFormated(awb));
				}else{
					mapResult.put("idAwb", awb.getIdAwb());
					mapResult.put("nrAwb", awb.getIdAwb());
					mapResult.put("nrAwbFormatado",  awb.getIdAwb());
				}
				
				listResult.add(mapResult);
			}
		}		
		
		return listResult;
	}
	
	public List findLookupRotaColetaEntrega(Map mapa) {
        ((Map)mapa.get("filial")).remove("sgFilial");
        ((Map)mapa.get("filial")).remove("pessoa");
        return getRotaColetaEntregaService().findLookup(mapa);
    }
	
	public List<Map<String, Object>> findMeioTransporteByProprietarioAndFilial(TypedFlatMap criteria){
		List<Map<String, Object>> meiosTransporteFormatado = new ArrayList<Map<String,Object>>();
		List<Map<String, Object>> meiosTransporte = meioTransporteService.findMeioTransporteByProprietarioAndFilial(criteria.getLong("proprietario.idProprietario"), criteria.getLong("proprietario.idFilial"));
		for (Map<String, Object> meioTransporte : meiosTransporte){
			Map<String, Object> mtFormatado = new HashMap<String, Object>();
			mtFormatado.put("idMeioTransporte", meioTransporte.get("ID_MT").toString());
			mtFormatado.put("dsMeioTransporteFormatado", meioTransporte.get("FROTA").toString() + " / " + meioTransporte.get("PLACA").toString());
			meiosTransporteFormatado.add(mtFormatado);
		}
		return meiosTransporteFormatado;
	}
	
	public Boolean findPedidoColetaJaInseridoByAwb(TypedFlatMap criteria){
		List<Map<String, Object>> idsDetalheColeta = pedidoColetaService.findPedidoColetaJaInseridoByAwb(criteria.getLong("awb.idAwb"));
		if(idsDetalheColeta.isEmpty()){
			return false;
		}
		return true;
	}
	
	public ControleCargaService getControleCargaService() {
		return controleCargaService;
	}
	public void setControleCargaService(ControleCargaService controleCargaService) {
		this.controleCargaService = controleCargaService;
	}
	public MotoristaService getMotoristaService() {
		return motoristaService;
	}
	public void setMotoristaService(MotoristaService motoristaService) {
		this.motoristaService = motoristaService;
	}
	public AwbService getAwbService() {
		return awbService;
	}
	public RotaColetaEntregaService getRotaColetaEntregaService() {
		return rotaColetaEntregaService;
	}
	public void setRotaColetaEntregaService(RotaColetaEntregaService rotaColetaEntregaService) {
		this.rotaColetaEntregaService = rotaColetaEntregaService;
	}
	public PedidoColetaService getPedidoColetaService() {
		return pedidoColetaService;
	}
	public void setPedidoColetaService(PedidoColetaService pedidoColetaService) {
		this.pedidoColetaService = pedidoColetaService;
	}
	public InformarSaidaService getInformarSaidaService() {
		return informarSaidaService;
	}
	public void setInformarSaidaService(InformarSaidaService informarSaidaService) {
		this.informarSaidaService = informarSaidaService;
	}
}