package com.mercurio.lms.expedicao.action;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.FindDefinition;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailAction;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.expedicao.model.AnexoDoctoServico;
import com.mercurio.lms.expedicao.model.CtoInternacional;
import com.mercurio.lms.expedicao.model.DocumentoAnexo;
import com.mercurio.lms.expedicao.model.service.AnexoDoctoServicoService;
import com.mercurio.lms.expedicao.model.service.DocumentoAnexoService;
import com.mercurio.lms.expedicao.util.CtoInternacionalUtils;
import com.mercurio.lms.util.IntegerUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.expedicao.manterCRTDocumentosAnexosAction"
 */
public class ManterCRTDocumentosAnexosAction extends CrudAction {
	private AnexoDoctoServicoService anexoDoctoServicoService;
	private DocumentoAnexoService documentoAnexoService;

	public List findComboAnexoDoctoServico(TypedFlatMap criteria){
		return anexoDoctoServicoService.findAnexosDoctoServico(criteria);
	}
	
	public ResultSetPage findPaginated(Map criteria){
		CtoInternacional ctoInternacional = getCtoInternacionalInSession();

		FindDefinition findDef = FindDefinition.createFindDefinition(criteria);

		Comparator ordenador = new Comparator() {
			public int compare(Object arg0, Object arg1) {
				DocumentoAnexo documentoAnexo1 = (DocumentoAnexo) arg0; 
				DocumentoAnexo documentoAnexo2 = (DocumentoAnexo) arg1;
				return documentoAnexo1.getDsDocumento().compareToIgnoreCase(documentoAnexo2.getDsDocumento());
			}
		};

		CtoInternacionalUtils.setCtoInternacionalInSession(ctoInternacional);

		ResultSetPage resultSetPageReturn = MasterDetailAction.getResultSetPage(ctoInternacional.getDocumentosAnexos(), findDef.getCurrentPage(), findDef.getPageSize(), ordenador);

		return resultSetPageReturn; 
	}
	
	public Integer getRowCount(Map criteria) {
		CtoInternacional ctoInternacional = getCtoInternacionalInSession();
		List documentosAnexos = ctoInternacional.getDocumentosAnexos();
		Integer retorno = IntegerUtils.ZERO;
		
		if(documentosAnexos != null && !documentosAnexos.isEmpty()){
			retorno = Integer.valueOf(documentosAnexos.size());
		}

		return retorno;
	}

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	if(ids != null && !ids.isEmpty()){
    		Iterator itIds = ids.iterator();

    		while(itIds.hasNext()){
    			removeDocumentoAnexo((Long)itIds.next());
    		}
    	}
    }

    private void removeDocumentoAnexo(Long id){
    	CtoInternacional ctoInternacional = getCtoInternacionalInSession();
    	List documentosAnexos = ctoInternacional.getDocumentosAnexos();


		if(documentosAnexos != null && !documentosAnexos.isEmpty()){
			for(int i = 0; i < documentosAnexos.size(); i++){

				DocumentoAnexo documentoAnexo = (DocumentoAnexo)documentosAnexos.get(i);
				if(documentoAnexo.getIdDocumentoAnexo().equals(id)) documentosAnexos.remove(i);
			}
		}

		CtoInternacionalUtils.setCtoInternacionalInSession(ctoInternacional);
    }

	public void storeInSession(TypedFlatMap parameters){
		
		Long idAnexoDoctoServico = parameters.getLong("anexoDoctoServico.idAnexoDoctoServico");
		String dsDocumento = parameters.getString("dsDocumento");
		
		CtoInternacional ctoInternacional = getCtoInternacionalInSession();
		
		DocumentoAnexo documentoAnexo = new DocumentoAnexo();
		AnexoDoctoServico anexoDoctoServico = new AnexoDoctoServico();
		
		anexoDoctoServico.setIdAnexoDoctoServico(idAnexoDoctoServico);
		anexoDoctoServico.setDsAnexoDoctoServico(parameters.getVarcharI18n("anexoDoctoServico.dsAnexoDoctoServico"));
		documentoAnexo.setDsDocumento(dsDocumento);

		documentoAnexo.setAnexoDoctoServico(anexoDoctoServico);
		
		documentoAnexo.setIdDocumentoAnexo(Long.valueOf(-System.currentTimeMillis()));

		if(!isExistsDocumentoAnexo(documentoAnexo)){
			ctoInternacional.addDocumentoAnexo(documentoAnexo);
		} else {
			throw new BusinessException("LMS-00002"); 
		}
		CtoInternacionalUtils.setCtoInternacionalInSession(ctoInternacional);
	}

	private boolean isExistsDocumentoAnexo(DocumentoAnexo documentoAnexoParam){
		CtoInternacional ctoInternacional = getCtoInternacionalInSession();
		List documentosAnexo = ctoInternacional.getDocumentosAnexos();
		
		if(documentosAnexo != null && !documentosAnexo.isEmpty()){
			for(Iterator itDocumentosAnexo = documentosAnexo.iterator(); itDocumentosAnexo.hasNext();){
				DocumentoAnexo documentoAnexo = (DocumentoAnexo) itDocumentosAnexo.next();
				AnexoDoctoServico anexoDoctoServico = documentoAnexo.getAnexoDoctoServico();
				AnexoDoctoServico anexoDoctoServicoAux = documentoAnexoParam.getAnexoDoctoServico();
				
				if(anexoDoctoServico.getIdAnexoDoctoServico().equals(anexoDoctoServicoAux.getIdAnexoDoctoServico())
				   && documentoAnexo.getDsDocumento().equalsIgnoreCase(documentoAnexoParam.getDsDocumento())){
					return true;
				}
			}
		}

		return false;
	}

	private CtoInternacional getCtoInternacionalInSession(){
		CtoInternacional ctoInternacional = CtoInternacionalUtils.getCtoInternacionalInSession();
		
		if(ctoInternacional.getDocumentosAnexos() == null){
			List documentosAnexo = null;

			if(ctoInternacional.getIdDoctoServico() != null){
				documentosAnexo = documentoAnexoService.findByIdDoctoServico(ctoInternacional.getIdDoctoServico());
			}

			if(documentosAnexo == null) documentosAnexo = new ArrayList(1);

			ctoInternacional.setDocumentosAnexos(documentosAnexo);
		}

		return ctoInternacional;
	}

	//Setters
	public void setAnexoDoctoServicoService(
			AnexoDoctoServicoService anexoDoctoServicoService) {
		this.anexoDoctoServicoService = anexoDoctoServicoService;
	}

	public void setDocumentoAnexoService(DocumentoAnexoService documentoAnexoService) {
		this.documentoAnexoService = documentoAnexoService;
	}
	
	
}