package com.mercurio.lms.expedicao.action;

import java.math.BigDecimal;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.report.ReportExecutionManager;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.contasreceber.model.Desconto;
import com.mercurio.lms.contasreceber.model.service.DescontoService;
import com.mercurio.lms.expedicao.model.CtoInternacional;
import com.mercurio.lms.expedicao.model.service.CtoInternacionalService;
import com.mercurio.lms.expedicao.model.service.EmitirCRTService;
import com.mercurio.lms.expedicao.report.GerarCRTBackService;
import com.mercurio.lms.expedicao.report.GerarCRTService;
import com.mercurio.lms.expedicao.util.CtoInternacionalUtils;


/**
 * Generated by: Regis Novais
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.expedicao.manterCRTEmitirAction"
 */
public class ManterCRTEmitirAction {

	private EmitirCRTService emitirCRTService;
	private CtoInternacionalService ctoInternacionalService;
	private GerarCRTService gerarCRTService;
	private GerarCRTBackService gerarCRTBackService;
	private DescontoService descontoService;
	private ReportExecutionManager reportExecutionManager;
	
	public CtoInternacional validateRelatorioOriginal(TypedFlatMap parameters) throws Exception {
		CtoInternacional ctoInternacional = null;
		Long idDoctoServico = CtoInternacionalUtils.getCtoInternacionalInSession().getIdDoctoServico();
		
		//Regra 1.8
		if( !parameters.getBoolean("primeiraVia").booleanValue() && 
			!parameters.getBoolean("segundaVia").booleanValue()  && 
			!parameters.getBoolean("terceiraVia").booleanValue()) {
			throw new BusinessException("LMS-04144");
		}
		
		// Regra 1.7 - Verifica se o CRT foi cancelado.
		emitirCRTService.validateCRTCancelado(idDoctoServico);

		ctoInternacional = ctoInternacionalService.findByIdDocServico(idDoctoServico);
		
		return ctoInternacional;
	}
	
	public void storeEvento(Long idDoctoServico) {
		//Regra 1.9 - CRT não foi emitido
		emitirCRTService.storeEvento(idDoctoServico);
	}

	
	public CtoInternacional executeValidacaoPendenciaWorkflow(Long idDoctoServico){
		return emitirCRTService.executeValidacaoPendenciaWorkflow(idDoctoServico);
	}

	public void storePendenciaWorkflow(Long idDoctoServico) {
		//Regra 1.10 - CRT foi emitido
		emitirCRTService.storePendenciaWorkflow(idDoctoServico);
	}

	public void executeValidacaoDescontoAprovadoWorkflow() throws Exception {
		//Regra 1.13 - Desconto aprovado workflow
		emitirCRTService.executeValidacaoDescontoAprovadoWorkflow();
	}
	
	public String execute(TypedFlatMap parameters) throws Exception {
		Long idDoctoServico = CtoInternacionalUtils.getCtoInternacionalInSession().getIdDoctoServico();
		parameters.put("idDoctoServico",idDoctoServico);
		if(parameters.getString("tpEmissao").equals("V")){
			TypedFlatMap map = ctoInternacionalService.findCrtById(idDoctoServico);
			BigDecimal vlTotalDocServico = map.getBigDecimal("vlTotalDocServico");
			
			Desconto desconto = descontoService.findByDoctoServico(idDoctoServico);
			
			BigDecimal vlDesconto = desconto.getVlDesconto();
			
			BigDecimal vlCorrigido = vlTotalDocServico.subtract(vlDesconto);
			parameters.put("vlCorrigido",vlCorrigido);
		}
		return this.reportExecutionManager.generateReportLocator(gerarCRTService, parameters);
	}
	
	public String executeReportBack(TypedFlatMap parameters) throws Exception {
		return this.reportExecutionManager.generateReportLocator(gerarCRTBackService, parameters);
	}
	
	public void setEmitirCRTService(EmitirCRTService emitirCRTService) {
		this.emitirCRTService = emitirCRTService;
	}

	public void setCtoInternacionalService(
			CtoInternacionalService ctoInternacionalService) {
		this.ctoInternacionalService = ctoInternacionalService;
	}

	public void setGerarCRTBackService(GerarCRTBackService gerarCRTBackService) {
		this.gerarCRTBackService = gerarCRTBackService;
	}

	public void setDescontoService(DescontoService descontoService) {
		this.descontoService = descontoService;
	}

	public void setReportExecutionManager(
			ReportExecutionManager reportExecutionManager) {
		this.reportExecutionManager = reportExecutionManager;
	}

	public void setGerarCRTService(GerarCRTService gerarCRTService) {
		this.gerarCRTService = gerarCRTService;
	}

	
}
