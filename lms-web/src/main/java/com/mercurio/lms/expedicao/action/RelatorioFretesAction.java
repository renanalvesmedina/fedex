package com.mercurio.lms.expedicao.action;

import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.report.ReportActionSupport;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.configuracoes.model.service.UsuarioService;
import com.mercurio.lms.expedicao.report.RelatorioFretesService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.HistoricoFilialService;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.service.ClienteService;

/**
 * Generated by: ADSM ActionGenerator
 *
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.expedicao.relatorioFretesAction"
 */
public class RelatorioFretesAction extends ReportActionSupport {
	private FilialService filialService;
	private UsuarioService usuarioService;
	private ClienteService clienteService;

	@Override
	public java.io.File execute(TypedFlatMap parameters) throws Exception {
		return super.execute(parameters);
	}

	public List findFilial(TypedFlatMap criteria) {
		return filialService.findLookupBySgFilial(criteria.getString("sgFilial"), criteria.getString("tpAcesso"));
	}

	public List findLookupUsuarioFuncionario(TypedFlatMap criteria){
		return usuarioService.findLookupUsuarioFuncionario(null,criteria.getString("nrMatricula"),null,null,null,null,true); 
	}

	public List findLookupCliente(Map criteria) {		
		return clienteService.findLookup(criteria);
	}

	public Map getBasicData(){
		TypedFlatMap dadosUsuario = new TypedFlatMap();
		dadosUsuario.put("dataInicial", JTDateTimeUtils.convertFrameworkDateToFormat(JTDateTimeUtils.getDataAtual().toString(),"dd/MM/yyyy"));
		dadosUsuario.put("dataFinal", JTDateTimeUtils.convertFrameworkDateToFormat(JTDateTimeUtils.getDataAtual().toString(),"dd/MM/yyyy"));

		//*** Se filial do usuario for diferente da filial da matriz
		if(!SessionUtils.isFilialSessaoMatriz()){
			//Filial padrao
			Filial filialSessao = SessionUtils.getFilialSessao();
			TypedFlatMap filial = new TypedFlatMap();
			filial.put("idFilial", filialSessao.getIdFilial());
			filial.put("sgFilial", filialSessao.getSgFilial());

			TypedFlatMap pessoa = new TypedFlatMap();
			pessoa.put("nmFantasia", filialSessao.getPessoa().getNmFantasia());
			filial.put("pessoa", pessoa);
			dadosUsuario.put("filial", filial);
		}

		Usuario usuarioLogado = SessionUtils.getUsuarioLogado();
		TypedFlatMap usuario = new TypedFlatMap();
		usuario.put("idUsuario", usuarioLogado.getIdUsuario());
		usuario.put("nrMatricula", usuarioLogado.getNrMatricula());
		usuario.put("nmUsuario", usuarioLogado.getNmUsuario());
		dadosUsuario.put("usuarioLogado", usuario);

		return dadosUsuario;
	}

	public void setRelatorioFretesService(RelatorioFretesService relatorioFretesService) {
		this.reportServiceSupport = relatorioFretesService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public void setUsuarioService(UsuarioService usuarioService) {
		this.usuarioService = usuarioService;
	}
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;	
	}
}