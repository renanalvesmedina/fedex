package com.mercurio.lms.expedicao.action;

import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.FindDefinition;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailAction;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.expedicao.model.Dimensao;
import com.mercurio.lms.util.IntegerUtils;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 */

public abstract class DigitarNotaDimensoesAction extends CrudAction {

	private static int cont = 0;
	private ConfiguracoesFacade configuracoesFacade;

    public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}

	public void removeById(java.lang.Long id) {
		Dimensao dimensao = findById(id);
		
		List dimensoes = this.getDimensoesInSession();
		if (dimensoes != null && dimensoes.contains(dimensao)) {
			dimensoes.remove(dimensao);
		}
    }

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	if(ids != null && !ids.isEmpty()) {
    		for(int i = 0;i<ids.size(); i++) {
    			this.removeById((Long) ids.get(i));
    		}
    	}
    }

    public Dimensao findById(Long id) {
    	List dimensoes = this.getDimensoesInSession();
		Dimensao result = null;
		if (dimensoes != null && !dimensoes.isEmpty()) {
			Dimensao other = new Dimensao();
			other.setIdDimensao(id);
			result = (Dimensao) dimensoes.get(dimensoes.indexOf(other));
		}
    	return result;
    }

    public Integer getRowCount(Map parameters) {
		List dimensoes = this.getDimensoesInSession();
		Integer result = Integer.valueOf(0);
		if (dimensoes != null && !dimensoes.isEmpty()) {
			result = Integer.valueOf(dimensoes.size());
		}
		return result;
	}

    public ResultSetPage findPaginated(Map criteria) {
		List dimensoes = this.getDimensoesInSession();
		ResultSetPage resultSetPage = ResultSetPage.EMPTY_RESULTSET;

		if (dimensoes != null && !dimensoes.isEmpty()) {
			FindDefinition findDef = FindDefinition.createFindDefinition(criteria);
			resultSetPage = MasterDetailAction.getResultSetPage(dimensoes, findDef
					.getCurrentPage(), findDef.getPageSize(), null);
		}

		return resultSetPage;
	}

    public void storeInSession(Dimensao novo) {

		this.validateDimensao(novo);

		List dimensoes = getDimensoesInSession();

		if (dimensoes.contains(novo)) {
			dimensoes.remove(novo);
		}

		if (novo.getIdDimensao() == null) {
			novo.setIdDimensao(Long.valueOf(--cont));
		}

		dimensoes.add(novo);
	}
    
    protected void validateDimensao(Dimensao novo) {
    	if(!IntegerUtils.hasValue(novo.getNrAltura())) {
    		throw new BusinessException("LMS-04153", new Object[]{configuracoesFacade.getMensagem("altura")});
    	}
    	if(!IntegerUtils.hasValue(novo.getNrComprimento())) {
    		throw new BusinessException("LMS-04153", new Object[]{configuracoesFacade.getMensagem("comprimento")});
    	}
    	if(!IntegerUtils.hasValue(novo.getNrLargura())) {
    		throw new BusinessException("LMS-04153", new Object[]{configuracoesFacade.getMensagem("largura")});
    	}
    	if(!IntegerUtils.hasValue(novo.getNrQuantidade())) {
    		throw new BusinessException("LMS-04153", new Object[]{configuracoesFacade.getMensagem("quantidade")});
    	}
    }

    protected List getDimensoesInSession() {
    	return null;
    }

}
