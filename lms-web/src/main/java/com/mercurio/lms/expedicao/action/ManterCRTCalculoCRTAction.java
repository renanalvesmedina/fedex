package com.mercurio.lms.expedicao.action;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Moeda;
import com.mercurio.lms.expedicao.model.CalculoFrete;
import com.mercurio.lms.expedicao.model.CtoInternacional;
import com.mercurio.lms.expedicao.model.ParcelaDoctoServico;
import com.mercurio.lms.expedicao.model.ParcelaServico;
import com.mercurio.lms.expedicao.model.service.CtoInternacionalService;
import com.mercurio.lms.expedicao.model.service.ParcelaDoctoServicoService;
import com.mercurio.lms.expedicao.model.service.ServAdicionalDocServService;
import com.mercurio.lms.expedicao.util.CtoInternacionalUtils;
import com.mercurio.lms.tabelaprecos.model.ParcelaPreco;
import com.mercurio.lms.tabelaprecos.model.TabelaPreco;
import com.mercurio.lms.tabelaprecos.model.TarifaPreco;
import com.mercurio.lms.util.BigDecimalUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.DivisaoCliente;
import com.mercurio.lms.vendas.model.service.DivisaoClienteService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.expedicao.manterCRTCalculoCRTAction"
 */ 
public class ManterCRTCalculoCRTAction extends AbstractManterCRTCalculoAction {
	private DivisaoClienteService divisaoClienteService;
	private CtoInternacionalService ctoInternacionalService;
	private ParcelaDoctoServicoService parcelaDoctoServicoService;
	private ServAdicionalDocServService servAdicionalDocServService;

	/*
	 * Filtra as Divisoes ou pelo Cliente Remetente ou pelo Destinatario
	 */
	public List findDivisaoCliente(TypedFlatMap criteria) {
		CtoInternacional ctoInternacional = getCrtInSession();
		String tpResponsavel = criteria.getString("responsavelFrete");
		List retorno = null;
		Cliente cliente = null;
		Long idCliente = null;

		if(tpResponsavel.equals("R")){
			cliente =  ctoInternacional.getClienteByIdClienteRemetente();
			idCliente = cliente.getIdCliente();
		} else if(tpResponsavel.equals("D")){
			cliente =  ctoInternacional.getClienteByIdClienteDestinatario();
			idCliente = cliente.getIdCliente();
		}

		ctoInternacional.setCliente(cliente);

		CtoInternacionalUtils.setCtoInternacionalInSession(ctoInternacional);

		retorno = divisaoClienteService.findByIdCliente(idCliente);

		return retorno;
	}
	
	/*
	 * Executa o calculo do frete
	 */
	public Map calcularFrete(TypedFlatMap criteria){
		CtoInternacional ctoInternacional = getCrtInSession();
		DomainValue tpResponsavelFrete = new DomainValue(criteria.getString("responsavelFrete"));
		Long idDivisao = criteria.getLong("divisaoCliente.idDivisaoCliente");

		CalculoFrete calculoFrete = ctoInternacionalService.calcularFrete(tpResponsavelFrete, idDivisao, ctoInternacional);
		
		List parcelasDoctoServico = createParcelasDoctoServico(calculoFrete.getParcelas(), calculoFrete.getServicosAdicionais());

		return montarParcelasCalculo(calculoFrete, parcelasDoctoServico);
	}

	/*
	 * Salva na Sessao
	 */
	public void storeInSession(TypedFlatMap criteria){
		CtoInternacional crt = getCrtInSession();
		DomainValue tpResponsavelFrete = new DomainValue(criteria.getString("responsavelFrete"));
		Long idDivisao = criteria.getLong("divisaoCliente.idDivisaoCliente");
		BigDecimal pcAforo = criteria.getBigDecimal("percentualAforo");

		CalculoFrete calculoFrete = ctoInternacionalService.calcularFrete(tpResponsavelFrete, idDivisao, crt);
		
		List parcelasDoctoServico = createParcelasDoctoServico(calculoFrete.getParcelas(), calculoFrete.getServicosAdicionais());
		crt.setParcelaDoctoServicos(parcelasDoctoServico);

		String tpResponsavel = criteria.getString("responsavelFrete");
		crt.setTpDevedorCrt(new DomainValue(tpResponsavel));
		if(tpResponsavel.equals("R")){
			crt.setCliente(crt.getClienteByIdClienteRemetente());
		} else if(tpResponsavel.equals("D")){
			crt.setCliente(crt.getClienteByIdClienteDestinatario());
		}

		crt.setVlTotalDocServico(calculoFrete.getVlTotal());
		crt.setVlTotalParcelas(calculoFrete.getVlTotalParcelas());
		crt.setVlTotalServicos(calculoFrete.getVlTotalServicosAdicionais());
		crt.setVlDesconto(calculoFrete.getVlDesconto());

		crt.setPsReferenciaCalculo(calculoFrete.getPsReferencia());
		crt.setTabelaPreco(calculoFrete.getTabelaPreco());
		crt.setMoeda(calculoFrete.getTabelaPreco().getMoeda());
		crt.setParametroCliente(calculoFrete.getParametroCliente());
		
		if(crt.getIdDoctoServico() != null) crt.setTrechosCtoInternacional(new ArrayList(1));

		DivisaoCliente divisaoCliente = new DivisaoCliente();
		divisaoCliente.setIdDivisaoCliente(idDivisao);
		crt.setDivisaoCliente(divisaoCliente);

		crt.setPcAforo(pcAforo);
		
		if(calculoFrete.getIdTarifa() != null){
			TarifaPreco tarifaPreco = new TarifaPreco();
			tarifaPreco.setIdTarifaPreco(calculoFrete.getIdTarifa());
			crt.setTarifaPreco(tarifaPreco);
		}

		CtoInternacionalUtils.setCtoInternacionalInSession(crt);
	}
	
	/*
	 * Cria uma list de ParcelaDoctoServico para salvar no CRT
	 */
	private List createParcelasDoctoServico(List parcelas, List servicosAdic){
		List parcelasDoctoServico = new ArrayList();

		if(parcelas != null){
			for(Iterator it = parcelas.iterator(); it.hasNext();){
				ParcelaServico ps = (ParcelaServico)it.next();
				ParcelaPreco parcelaPreco = ps.getParcelaPreco();
	
				ParcelaDoctoServico parcelaDoctoServico = new ParcelaDoctoServico();
				parcelaPreco.setTpParcelaPreco(new DomainValue("P"));
				parcelaDoctoServico.setParcelaPreco(parcelaPreco);
				parcelaDoctoServico.setVlParcela(ps.getVlParcela());
				parcelasDoctoServico.add(parcelaDoctoServico);
			}
		}
		
		if(servicosAdic != null){
			for(Iterator it = servicosAdic.iterator(); it.hasNext();){
				ParcelaServico ps = (ParcelaServico)it.next();
				ParcelaPreco parcelaPreco = ps.getParcelaPreco();
	
				ParcelaDoctoServico parcelaDoctoServico = new ParcelaDoctoServico();
				parcelaPreco.setTpParcelaPreco(new DomainValue("S"));
				parcelaDoctoServico.setParcelaPreco(parcelaPreco);
				parcelaDoctoServico.setVlParcela(ps.getVlParcela());
				parcelasDoctoServico.add(parcelaDoctoServico);
			}
		}

		return parcelasDoctoServico;
	}

	/*
	 * Atualiza a vlCubagem de acordo com o pcAforo
	 */
	public Serializable updateVlCubagem(TypedFlatMap criteria){
		CtoInternacional ctoInternacional = getCrtInSession();

		TypedFlatMap retorno = new TypedFlatMap();
		BigDecimal pcAforo = criteria.getBigDecimal("percentualAforo");
		BigDecimal vlCubagem = ctoInternacional.getVlVolume();
		vlCubagem = BigDecimalUtils.acrescimo(vlCubagem, pcAforo);
		ctoInternacional.setVlVolume(vlCubagem);
		retorno.put("vlCubagem", vlCubagem);

		CtoInternacionalUtils.setCtoInternacionalInSession(ctoInternacional);

		return retorno;
	}
	
	/*
	 * Faz a montagem dos dados a serem enviados para a tela
	 */
	private Map montarParcelasCalculo(CalculoFrete calculo, List parcelasDoctoServico) {
		Map retorno = new HashMap();
		
		retorno.put("parcelasFrete", createList("Parcela", parcelasDoctoServico));
		retorno.put("servicos", createList("Servico", parcelasDoctoServico));
		retorno.put("vlTotalFrete", calculo.getVlTotalParcelas());
		retorno.put("vlTotalServico", calculo.getVlTotalServicosAdicionais());
		retorno.put("vlTotalCrt", calculo.getVlTotal());
		retorno.put("vlDesconto", calculo.getVlDesconto());
		retorno.put("dsDescricaoTabela", calculo.getTabelaPreco().getDsDescricao());
		retorno.put("sgMoeda", calculo.getTabelaPreco().getMoeda().getSgMoeda());
		retorno.put("dsSimbolo", calculo.getTabelaPreco().getMoeda().getDsSimbolo());

		return retorno;
	}
	
	/*
	 * Pega o CtoInternacional na sessao para popular a tela
	 */
	public Serializable findCtoInternacionalInSession(){

		CtoInternacional ctoInternacional = getCrtInSession();
		if(ctoInternacional.getIdDoctoServico() != null){
			TypedFlatMap retorno = new TypedFlatMap();

			List parcelaDoctoServicos = ctoInternacional.getParcelaDoctoServicos();
			retorno.put("parcelasFrete", createList("Parcela", parcelaDoctoServicos));
			retorno.put("servicos", createList("Servico", parcelaDoctoServicos));

			
			DivisaoCliente divisaoCliente = ctoInternacional.getDivisaoCliente();
			TabelaPreco tabelaPreco = ctoInternacional.getTabelaPreco();
			Moeda moeda = ctoInternacional.getMoeda();

			if(divisaoCliente != null){
				TypedFlatMap mapDivisaoCliente = new TypedFlatMap();
				mapDivisaoCliente.put("idDivisaoCliente", divisaoCliente.getIdDivisaoCliente());
				mapDivisaoCliente.put("dsDivisaoCliente", divisaoCliente.getDsDivisaoCliente());
				retorno.put("divisaoCliente", mapDivisaoCliente);
			}

			if(tabelaPreco != null){
				retorno.put("dsDescricaoTabela", tabelaPreco.getDsDescricao());
			}

			if(moeda != null){
				retorno.put("sgMoeda", moeda.getSgMoeda());
			}
			
			retorno.put("vlTotalFrete", ctoInternacional.getVlTotalParcelas());
			retorno.put("vlTotalServico", ctoInternacional.getVlTotalServicos());
			retorno.put("vlTotalCrt",  ctoInternacional.getVlTotalDocServico());
			retorno.put("vlDesconto", ctoInternacional.getVlDesconto());
			retorno.put("percentualAforo", ctoInternacional.getPcAforo());

			return retorno;
		}

		return null;
	}
	
	protected CtoInternacional getCrtInSession(){
		CtoInternacional crt = super.getCrtInSession();
		if(crt.getIdDoctoServico() != null){
			List parcelasDoctoServico = crt.getParcelaDoctoServicos();
			if(parcelasDoctoServico == null){
				parcelasDoctoServico = parcelaDoctoServicoService.findByIdDoctoServico(crt.getIdDoctoServico());
				if(parcelasDoctoServico == null) parcelasDoctoServico = new ArrayList(1);
				crt.setParcelaDoctoServicos(parcelasDoctoServico);
			}

			List servAdicionalDocServs = crt.getServAdicionalDocServs();
			if(servAdicionalDocServs == null){
				servAdicionalDocServs = servAdicionalDocServService.findServAdicionaisDocServByIdDoctoServico(crt.getIdDoctoServico());
				crt.setServAdicionalDocServs(servAdicionalDocServs);
			}
		}

		CtoInternacionalUtils.setCtoInternacionalInSession(crt);

		return crt;
	}
	
	/*
	 * Gera a List de retorno para as grids da tela de acordo com os tipos Parcela e Servico
	 */
	private List createList(String type, List parcelasDoctoServico){
		List parcelasAux = null;
		if(parcelasDoctoServico != null && !parcelasDoctoServico.isEmpty()) {
			String tpParcelaPreco = type.equalsIgnoreCase("parcela") ? "PG" : "S";
			parcelasAux = new ArrayList();

			for (Iterator iter = parcelasDoctoServico.iterator(); iter.hasNext();) {

				ParcelaDoctoServico parcelaDoctoServico = (ParcelaDoctoServico) iter.next();
				ParcelaPreco parcelaPreco = parcelaDoctoServico.getParcelaPreco();

				if(tpParcelaPreco.indexOf(parcelaPreco.getTpParcelaPreco().getValue()) != -1){

					Map parcela = new HashMap();
					parcela.put("vl"+ type, parcelaDoctoServico.getVlParcela());
					parcela.put("nm" + type, parcelaPreco.getNmParcelaPreco());
					parcela.put("id" + type, parcelaPreco.getIdParcelaPreco());
					parcelasAux.add(parcela);
				}
			}
		}
		return parcelasAux;
	}

	//Setters
	public void setDivisaoClienteService(DivisaoClienteService divisaoClienteService) {
		this.divisaoClienteService = divisaoClienteService;
	}

	public void setCtoInternacionalService(
			CtoInternacionalService ctoInternacionalService) {
		this.ctoInternacionalService = ctoInternacionalService;
	}

	public void setParcelaDoctoServicoService(
			ParcelaDoctoServicoService parcelaDoctoServicoService) {
		this.parcelaDoctoServicoService = parcelaDoctoServicoService;
	}

	public void setServAdicionalDocServService(
			ServAdicionalDocServService servAdicionalDocServService) {
		this.servAdicionalDocServService = servAdicionalDocServService;
	}
	
	
}