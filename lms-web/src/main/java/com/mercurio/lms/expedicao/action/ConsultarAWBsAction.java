package com.mercurio.lms.expedicao.action;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigDecimal;
import java.sql.Blob;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import javax.sql.rowset.serial.SerialBlob;
import javax.sql.rowset.serial.SerialException;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.hibernate.VarcharI18n;
import com.mercurio.adsm.framework.report.ReportExecutionManager;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.EnderecoPessoa;
import com.mercurio.lms.configuracoes.model.Moeda;
import com.mercurio.lms.configuracoes.model.service.EnderecoPessoaService;
import com.mercurio.lms.configuracoes.model.service.InscricaoEstadualService;
import com.mercurio.lms.expedicao.model.Awb;
import com.mercurio.lms.expedicao.model.AwbEmbalagem;
import com.mercurio.lms.expedicao.model.Conhecimento;
import com.mercurio.lms.expedicao.model.CtoAwb;
import com.mercurio.lms.expedicao.model.LiberaAWBComplementar;
import com.mercurio.lms.expedicao.model.NaturezaProduto;
import com.mercurio.lms.expedicao.model.service.AnexoAwbService;
import com.mercurio.lms.expedicao.model.service.AwbService;
import com.mercurio.lms.expedicao.model.service.CtoAwbService;
import com.mercurio.lms.expedicao.model.service.LiberaAWBComplementarService;
import com.mercurio.lms.expedicao.model.service.PreAlertaService;
import com.mercurio.lms.expedicao.report.EmitirEspelhoAwbService;
import com.mercurio.lms.expedicao.report.EmitirMinutaEletronicaService;
import com.mercurio.lms.expedicao.util.AwbUtils;
import com.mercurio.lms.expedicao.util.ConstantesAwb;
import com.mercurio.lms.expedicao.util.ConstantesExpedicao;
import com.mercurio.lms.municipios.model.Aeroporto;
import com.mercurio.lms.municipios.model.service.AeroportoService;
import com.mercurio.lms.municipios.model.service.CiaFilialMercurioService;
import com.mercurio.lms.municipios.model.service.EmpresaService;
import com.mercurio.lms.prestcontasciaaerea.model.FaturaCiaAerea;
import com.mercurio.lms.prestcontasciaaerea.model.PrestacaoConta;
import com.mercurio.lms.prestcontasciaaerea.model.service.FaturaCiaAereaService;
import com.mercurio.lms.tabelaprecos.model.ProdutoEspecifico;
import com.mercurio.lms.tabelaprecos.model.TarifaSpot;
import com.mercurio.lms.tabelaprecos.model.service.TarifaSpotService;
import com.mercurio.lms.util.ArquivoUtils;
import com.mercurio.lms.util.BigDecimalUtils;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.service.ClienteService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.expedicao.consultarAWBsAction"
 */

public class ConsultarAWBsAction extends CrudAction {
	
	private static final String PDF_SUFIX = ".pdf";
	private static final String REPORT_AWBCIAAEREA_PREFIX = "report-awbciaaerea-";
	
	private CiaFilialMercurioService ciaFilialMercurioService;	
	private AeroportoService aeroportoService;	
	private ClienteService clienteService;	
	private InscricaoEstadualService inscricaoEstadualService;	
	private TarifaSpotService tarifaSpotService;	
	private EmpresaService empresaService;	
	private PreAlertaService preAlertaService;	
	private EnderecoPessoaService enderecoPessoaService;	
	private FaturaCiaAereaService faturaCiaAereaService;
	private LiberaAWBComplementarService liberaAWBComplementarService;
	private CtoAwbService ctoAwbService;
	private AnexoAwbService anexoAwbService;
	
	private ReportExecutionManager reportExecutionManager;
	private EmitirEspelhoAwbService emitirEspelhoAwbService;
	private EmitirMinutaEletronicaService emitirMinutaEletronicaService;
 	
	public String execute(TypedFlatMap reportParams) throws Exception {

		if(!"P".equals(reportParams.getString("vlTpStatusAwb"))){
		
			Blob blob = anexoAwbService.findPdfAnexo(reportParams.getLong("awb.idAwb"));
			if(blob != null){
				File file = this.getPdfFile(blob);				
				return this.reportExecutionManager.generateReportLocator(file);
			}
			return this.reportExecutionManager.generateReportLocator(this.emitirEspelhoAwbService, reportParams);
		}
		
		return this.reportExecutionManager.generateReportLocator(this.emitirMinutaEletronicaService, reportParams);
	}	
	
	private File getPdfFile(Blob blob) throws IOException, SerialException, SQLException {
		byte[] arquivoComNome = ArquivoUtils.toByteArray(blob);				
		byte[] arquivo = Arrays.copyOfRange(arquivoComNome, 1024, arquivoComNome.length);	
		File file = File.createTempFile(REPORT_AWBCIAAEREA_PREFIX + System.currentTimeMillis(), PDF_SUFIX, new ReportExecutionManager().generateOutputDir());
		FileOutputStream fos = new FileOutputStream(file);
		InputStream is = new SerialBlob(arquivo).getBinaryStream();
		int b = 0;
		while ((b = is.read()) != -1)
		{
		    fos.write(b); 
		}
		return file;
	}

	/**
	 * Utilizado pela combo de cias aereas.
	 * 
	 * @param criteria
	 * @return
	 */
	public List findCiaAerea(TypedFlatMap criteria){
		return getEmpresaService().findCiaAerea(criteria);
	}
	
	/**
	 * Lookups de aeroporto.
	 * 
	 * @param criteria
	 * @return
	 */
	public List findAeroporto(TypedFlatMap criteria) {
		return getAeroportoService().findLookupAeroporto(criteria);
	}
	
	/**
	 * Find paginated padrão.
	 * 
	 * @param criteria
	 * @return
	 */
	public ResultSetPage findPaginated(TypedFlatMap criteria) {
		ResultSetPage rsp = getAwbService().findPaginated(criteria);
		List results = rsp.getList();
		if (results != null && !results.isEmpty()) {
			for (int i = 0; i < results.size(); i++) {
				TypedFlatMap result = (TypedFlatMap) results.get(i);
				String tpStatusAwb = result.getString("tpStatusAwb.value");
				String nrAwbFormatado = null;
				if(ConstantesAwb.TP_STATUS_PRE_AWB.equalsIgnoreCase(tpStatusAwb) || (ConstantesAwb.TP_STATUS_CANCELADO.equals(tpStatusAwb) && result.getLong("nrAwb") < 0)){
					Long nrAwb = result.getLong("idAwb");
					nrAwbFormatado = result.getString("ciaFilialMercurio.empresa.sgEmpresa") + " " + 
							nrAwb;
					result.put("nrAwb", nrAwb);
				} else if(ConstantesAwb.TP_STATUS_AWB.equalsIgnoreCase(tpStatusAwb) || ConstantesAwb.TP_STATUS_CANCELADO.equalsIgnoreCase(tpStatusAwb)){
					String dsSerie = result.getString("dsSerieAwb");
					Long nrAwb = result.getLong("nrAwb");
					Integer dvAwb = result.getInteger("dvAwb");
					
					nrAwbFormatado = result.getString("ciaFilialMercurio.empresa.sgEmpresa") + " " + 
									AwbUtils.getNrAwbFormated(dsSerie, nrAwb, dvAwb);
					
					result.put("nrAwb", AwbUtils.getNrAwb(dsSerie, nrAwb, dvAwb));
				}
				result.put("nrAwbFormatado", nrAwbFormatado);				
				}	
			}
		return rsp;
	}
	
	public Integer getRowCount(TypedFlatMap criteria) {
		return getAwbService().getRowCount(criteria);
	}
	
	public TypedFlatMap getDadosDefault() {
		TypedFlatMap result = new TypedFlatMap();
		result.put("dataInicial", JTDateTimeUtils.getDataAtual().minusDays(10));
		result.put("dataFinal", JTDateTimeUtils.getDataAtual());
		return result;
	}
	
	public void executeCancelarAwbs(TypedFlatMap data) {
		getAwbService().executeCancelarAwbs(data);
	}
	
	public TypedFlatMap findById(Long id) {
		Awb awb = getAwbService().findById(id);
		
		TypedFlatMap result = new TypedFlatMap();
		if (awb.getNrAwb() > 0) {
			result.put("nrAwb", AwbUtils.getNrAwbFormated(awb.getDsSerie(), awb.getNrAwb(), awb.getDvAwb()));
		} else {
			result.put("nrAwb", awb.getIdAwb());
		}
		
		if (awb.getInscricaoEstadualExpedidor() != null) {
			result.put("inscricaoEstadualExpedidor.nrInscricaoEstadual", awb.getInscricaoEstadualExpedidor().getNrInscricaoEstadual());
		}
		
		if (awb.getInscricaoEstadualDestinatario() != null) {
			result.put("inscricaoEstadualDestinatario.nrInscricaoEstadual", awb.getInscricaoEstadualDestinatario().getNrInscricaoEstadual());
		}

		if (awb.getInscricaoEstadualTomador() != null) {
			result.put("inscricaoEstadualTomador.nrInscricaoEstadual", awb.getInscricaoEstadualTomador().getNrInscricaoEstadual());
		}

		result.put("ciaFilialMercurio.empresa.pessoa.nmPessoa", awb.getCiaFilialMercurio().getEmpresa().getPessoa().getNmPessoa());
		result.put("ciaFilialMercurio.empresa.idEmpresa", awb.getCiaFilialMercurio().getEmpresa().getIdEmpresa());
		result.put("nrAwbFormatado", AwbUtils.formatNrAwb(awb.getNrAwb(), awb.getDvAwb()));
		result.put("aeroportoByIdAeroportoOrigem.sgAeroporto", awb.getAeroportoByIdAeroportoOrigem().getSgAeroporto());
		result.put("aeroportoByIdAeroportoOrigem.pessoa.nmPessoa", awb.getAeroportoByIdAeroportoOrigem().getPessoa().getNmPessoa());
		
		result.put("cliente.nrIdentificacao", awb.getAeroportoByIdAeroportoOrigem().getPessoa().getNrIdentificacao());
		result.put("cliente.idCliente", awb.getAeroportoByIdAeroportoOrigem().getPessoa().getIdPessoa());
		
		EnderecoPessoa enderecoPessoaOrigem = enderecoPessoaService.findByIdPessoa(awb.getAeroportoByIdAeroportoOrigem().getPessoa().getIdPessoa());
		result.put("aeroportoByIdAeroportoOrigem.pessoa.enderecoPessoa.municipio.nmMunicipio", enderecoPessoaOrigem.getMunicipio().getNmMunicipio());
		
		result.put("aeroportoByIdAeroportoDestino.sgAeroporto", awb.getAeroportoByIdAeroportoDestino().getSgAeroporto());
		result.put("aeroportoByIdAeroportoDestino.pessoa.nmPessoa", awb.getAeroportoByIdAeroportoDestino().getPessoa().getNmPessoa());
		
		EnderecoPessoa enderecoPessoaDestino = enderecoPessoaService.findByIdPessoa(awb.getAeroportoByIdAeroportoDestino().getPessoa().getIdPessoa());
		result.put("aeroportoByIdAeroportoDestino.pessoa.enderecoPessoa.municipio.idMunicipio", enderecoPessoaDestino.getMunicipio().getIdMunicipio());
		result.put("aeroportoByIdAeroportoDestino.pessoa.enderecoPessoa.municipio.nmMunicipio", enderecoPessoaDestino.getMunicipio().getNmMunicipio());
		
		result.put("filialByIdFilialOrigem.idFilial", awb.getFilialByIdFilialOrigem().getIdFilial());
		result.put("filialByIdFilialOrigem.sgFilial", awb.getFilialByIdFilialOrigem().getSgFilial());
		result.put("filialByIdFilialOrigem.pessoa.nmFantasia", awb.getFilialByIdFilialOrigem().getPessoa().getNmFantasia());
		result.put("filialByIdFilialDestino.sgFilial", awb.getFilialByIdFilialDestino().getSgFilial());
		result.put("filialByIdFilialDestino.idFilial", awb.getFilialByIdFilialDestino().getIdFilial());
		result.put("filialByIdFilialDestino.pessoa.nmFantasia", awb.getFilialByIdFilialDestino().getPessoa().getNmFantasia());

		PrestacaoConta prestacaoConta = awb.getPrestacaoConta();
		if (prestacaoConta != null) {
			result.put("prestacaoConta.nrPrestacaoConta", prestacaoConta.getNrPrestacaoConta());
		}
		
		result.put("dhDigitacao", awb.getDhDigitacao());
		result.put("nmUsuarioInclusao", awb.getUsuarioInclusao() != null ? awb.getUsuarioInclusao().getNmUsuario() : "");
		
		result.put("dhCancelamento", awb.getDhCancelamento());
		result.put("nmUsuarioCancelamento", awb.getUsuarioCancelamento() != null ? awb.getUsuarioCancelamento().getNmUsuario() : "");
		
		result.put("dhEmissao", awb.getDhEmissao());
		
		if (awb.getTpLocalEmissao() != null){
		result.put("tpLocalEmissao", awb.getTpLocalEmissao().getDescription());
		}
		
		//LMS-4913
		if (awb.getTpAwb() != null){
			result.put("tpAwb", awb.getTpAwb().getDescription());
		}
		
		if(awb.getTpAwb() != null){
			if (ConstantesExpedicao.TP_AWB_NORMAL.equals(awb.getTpAwb().getValue())) {
				LiberaAWBComplementar liberaAWBComplementar = getLiberaAWBComplementarService().findByIdAwbComplementado(awb.getIdAwb());
				if (liberaAWBComplementar != null) {
					result.put("cdLiberacaoAWBCompl", liberaAWBComplementar.getDsSenha());
				}
			} else {
				Awb awbComplementado = getAwbService().findAWBComplementadoByIdAwbComplementar(awb.getIdAwb());
				if(awbComplementado != null && awbComplementado.getNrAwb() != null){
					result.put("numeroAWBComplementado", AwbUtils.getNrAwbFormated(awbComplementado));
					result.put("cdLiberacaoAWBCompl", awbComplementado.getLiberaAWBComplementars().get(0).getDsSenha());
				}
			}
		}
		
		result.put("tpStatusAwb", awb.getTpStatusAwb().getDescription());
		result.put("vlTpStatusAwb", awb.getTpStatusAwb().getValue());
		
		Moeda moeda = awb.getMoeda();
		if (moeda != null) {
			result.put("moeda.siglaDescricao", FormatUtils.concatSiglaSimboloMoeda(moeda));
			result.put("moeda.idMoeda", moeda.getIdMoeda());
			result.put("moeda.dsSimbolo", moeda.getDsSimbolo());
		}
		result.put("vlFrete", awb.getVlFrete());
		
		Cliente expedidor = awb.getClienteByIdClienteExpedidor();
		adicionaCliente(result, "clienteByIdClienteExpedidor", expedidor);
		Cliente destinatario = awb.getClienteByIdClienteDestinatario();
		adicionaCliente(result, "clienteByIdClienteDestinatario", destinatario);
		Cliente tomador = awb.getClienteByIdClienteTomador();
		if (tomador != null) {
			adicionaCliente(result, "clienteByIdClienteTomador", tomador);
		}
		
		List awbEmbalagens = awb.getAwbEmbalagems();
		if (awbEmbalagens != null && !awbEmbalagens.isEmpty()) {
			AwbEmbalagem awbEmbalagem = (AwbEmbalagem) awbEmbalagens.get(0);
			result.put("embalagem.dsEmbalagem", awbEmbalagem.getEmbalagem().getDsEmbalagem());
		}
		
		ProdutoEspecifico produtoEspecifico = awb.getProdutoEspecifico();
		if (produtoEspecifico != null) {
			result.put("produtoEspecifico.nrTarifaEspecifica", produtoEspecifico.getNrTarifaEspecifica());
		}
		
		TarifaSpot tarifaSpot = awb.getTarifaSpot();
		if (tarifaSpot != null) {
			result.put("tarifaSpot.dsSenha", tarifaSpot.getDsSenha());
			TypedFlatMap tarifaMap = getTarifaSpotService().findByIdMap(tarifaSpot.getIdTarifaSpot());
			result.put("tarifaSpot.usuarioByIdUsuarioLiberador.nmUsuario", tarifaMap.get("usuarioByIdUsuarioLiberador.nmUsuario"));
			result.put("tarifaSpot.dtLiberacao", tarifaMap.get("dtLiberacao"));
		}
		
		result.put("tpFrete", awb.getTpFrete().getDescription());
		
		NaturezaProduto naturezaProduto = awb.getNaturezaProduto();
		if (naturezaProduto != null) {
			result.put("naturezaProduto.dsNaturezaProduto", naturezaProduto.getDsNaturezaProduto());
			result.put("naturezaProduto.idNaturezaProduto", naturezaProduto.getIdNaturezaProduto());
		} else {
			result.put("naturezaProduto.dsNaturezaProduto", "");
			result.put("naturezaProduto.idNaturezaProduto", "");
		}
		
		result.put("qtVolumes", awb.getQtVolumes());
		result.put("psTotal", awb.getPsTotal());
		result.put("pesoTotal", awb.getPsTotal());
		result.put("psCubado", awb.getPsCubado());
		result.put("dsVooPrevisto", awb.getDsVooPrevisto());
		result.put("dhPrevistaSaida", awb.getDhPrevistaSaida());
		result.put("nrContaCorrente", awb.getNrCcTomadorServico());
		
		Aeroporto aeroportoEscala = awb.getAeroportoByIdAeroportoEscala();
		if (aeroportoEscala != null) {
			result.put("aeroportoByIdAeroportoEscala.sgAeroporto", aeroportoEscala.getSgAeroporto());
		}
		
		result.put("dhPrevistaChegada", awb.getDhPrevistaChegada());
		result.put("obAwb", awb.getObAwb());
		result.put("awb.idAwb", awb.getIdAwb());
		result.put("vlFretePeso", awb.getVlFretePeso());
		result.put("vlTaxaTerrestre", awb.getVlTaxaTerrestre());
		result.put("vlTaxaCombustivel", awb.getVlTaxaCombustivel());
		result.put("pcAliquotaICMS", awb.getPcAliquotaICMS());
		result.put("vlICMS", awb.getVlICMS());
		
		List<FaturaCiaAerea> listaFaturas = faturaCiaAereaService.findFaturaCiaAereaByIdAwb(awb.getIdAwb());
		if (listaFaturas != null && !listaFaturas.isEmpty()) {
			result.put("fatura.numeroFatura", listaFaturas.get(0).getNrFaturaCiaAerea());
		}

		
		boolean btnPreAlertaDisabled = true;
		List preAlertas = preAlertaService.findByNrAwb(awb.getNrAwb());
		if(SessionUtils.getFilialSessao().getIdFilial().equals(awb.getFilialByIdFilialDestino().getIdFilial()) &&
				(preAlertas.size() > 0 && ((TypedFlatMap)preAlertas.get(0)).getBoolean("blVooConfirmado").booleanValue()) && (awb.getTpAwb() == null || ConstantesExpedicao.TP_AWB_NORMAL.equals(awb.getTpAwb().getValue()))) {
			btnPreAlertaDisabled = false;
			result.putAll(preAlertaService.findVlMercadoriaAndIdServicoAereoNacConv(awb.getIdAwb()));
		}
		result.put("btnPreAlertaDisabled", btnPreAlertaDisabled);
		
		//LMS-4913
		boolean btnsAwbDisabled = false;
		if(awb.getTpAwb() != null && ConstantesExpedicao.TP_AWB_COMPLEMENTAR.equals(awb.getTpAwb().getValue())) {
			btnsAwbDisabled = true;
		}
		result.put("btnsAwbDisabled", btnsAwbDisabled);
		result.put("blConferido", awb.getBlConferido());
		
		if (awb.getTpLocalizacao() != null) {
			result.put("awb.tpLocalizacao", awb.getTpLocalizacao().getValue());
			result.put("dsTpLocalizacao", awb.getTpLocalizacao().getDescriptionAsString());
		}

		List<CtoAwb> listCtoAwb = ctoAwbService.findByIdAwb(id);
		if (listCtoAwb != null && !listCtoAwb.isEmpty()) {
			BigDecimal vlTotalDoc = BigDecimal.ZERO;
			for (CtoAwb ctoAwb : listCtoAwb) {
				Conhecimento c = ctoAwb.getConhecimento();				
				vlTotalDoc = BigDecimalUtils.add(vlTotalDoc, c.getVlTotalDocServico());
			}
			result.put("vlTotalDocumentos", vlTotalDoc);
		}
		
		return result;
	}
	
	private void adicionaCliente(TypedFlatMap result, String alias, Cliente cliente) {
		List clientes = getClienteService().findClienteByNrIdentificacao(cliente.getPessoa().getNrIdentificacao());
		if (clientes != null && !clientes.isEmpty()) {
			Map clienteMap = (Map) clientes.get(0);
			adjustEndereco((Map) clienteMap.get("pessoa"));
			result.put(alias, clienteMap);
		}
	}
	
	private void adjustEndereco(Map pessoa) {
		Map endereco = (Map) pessoa.get("endereco");
		
		if (endereco != null) {
			VarcharI18n tipoLogradouro = (VarcharI18n) endereco.remove("dsTipoLogradouro");
			if(tipoLogradouro != null) {
				endereco.put("dsEndereco", tipoLogradouro.getValue() + " " + endereco.get("dsEndereco"));
			}
		}
	}

	/**
	 * @return Returns the ciaFilialMercurioService.
	 */
	public CiaFilialMercurioService getCiaFilialMercurioService() {
		return ciaFilialMercurioService;
	}

	/**
	 * @param ciaFilialMercurioService The ciaFilialMercurioService to set.
	 */
	public void setCiaFilialMercurioService(
			CiaFilialMercurioService ciaFilialMercurioService) {
		this.ciaFilialMercurioService = ciaFilialMercurioService;
	}

	/**
	 * @return Returns the aeroportoService.
	 */
	public AeroportoService getAeroportoService() {
		return aeroportoService;
	}

	/**
	 * @param aeroportoService The aeroportoService to set.
	 */
	public void setAeroportoService(AeroportoService aeroportoService) {
		this.aeroportoService = aeroportoService;
	}
	
	/**
	 * @param serviceService The service to set.
	 */
	public void setService(AwbService serviceService) {
		super.defaultService = serviceService;
	}
	
	public AwbService getAwbService() {
		return (AwbService) super.defaultService;
	}

	/**
	 * @return Returns the clienteService.
	 */
	public ClienteService getClienteService() {
		return clienteService;
	}

	/**
	 * @param clienteService The clienteService to set.
	 */
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}

	/**
	 * @return Returns the inscricaoEstadualService.
	 */
	public InscricaoEstadualService getInscricaoEstadualService() {
		return inscricaoEstadualService;
	}

	/**
	 * @param inscricaoEstadualService The inscricaoEstadualService to set.
	 */
	public void setInscricaoEstadualService(
			InscricaoEstadualService inscricaoEstadualService) {
		this.inscricaoEstadualService = inscricaoEstadualService;
	}

	/**
	 * @return Returns the tarifaSpotService.
	 */
	public TarifaSpotService getTarifaSpotService() {
		return tarifaSpotService;
	}

	/**
	 * @param tarifaSpotService The tarifaSpotService to set.
	 */
	public void setTarifaSpotService(TarifaSpotService tarifaSpotService) {
		this.tarifaSpotService = tarifaSpotService;
	}

	/**
	 * @return Returns the empresaService.
	 */
	public EmpresaService getEmpresaService() {
		return empresaService;
	}

	/**
	 * @param empresaService The empresaService to set.
	 */
	public void setEmpresaService(EmpresaService empresaService) {
		this.empresaService = empresaService;
	}

	public PreAlertaService getPreAlertaService() {
		return preAlertaService;
}

	public void setPreAlertaService(PreAlertaService preAlertaService) {
		this.preAlertaService = preAlertaService;
	}

	public EnderecoPessoaService getEnderecoPessoaService() {
		return enderecoPessoaService;
	}

	public void setEnderecoPessoaService(EnderecoPessoaService enderecoPessoaService) {
		this.enderecoPessoaService = enderecoPessoaService;
	}

	public FaturaCiaAereaService getFaturaCiaAereaService() {
		return faturaCiaAereaService;
}

	public void setFaturaCiaAereaService(FaturaCiaAereaService faturaCiaAereaService) {
		this.faturaCiaAereaService = faturaCiaAereaService;
	}

	public void setLiberaAWBComplementarService(
			LiberaAWBComplementarService liberaAWBComplementarService) {
		this.liberaAWBComplementarService = liberaAWBComplementarService;
	}

	public CtoAwbService getCtoAwbService() {
		return ctoAwbService;
	}

	public void setCtoAwbService(CtoAwbService ctoAwbService) {
		this.ctoAwbService = ctoAwbService;
	}

	public LiberaAWBComplementarService getLiberaAWBComplementarService() {
		return liberaAWBComplementarService;
	}
	
	public void setReportExecutionManager(ReportExecutionManager reportExecutionManager) {
		this.reportExecutionManager = reportExecutionManager;
	}

	public void setEmitirEspelhoAwbService(EmitirEspelhoAwbService emitirEspelhoAwbService) {
		this.emitirEspelhoAwbService = emitirEspelhoAwbService;
	}

	public void setAnexoAwbService(AnexoAwbService anexoAwbService) {
		this.anexoAwbService = anexoAwbService;
	}

	public EmitirMinutaEletronicaService getEmitirMinutaEletronicaService() {
		return emitirMinutaEletronicaService;
	}

	public void setEmitirMinutaEletronicaService(
			EmitirMinutaEletronicaService emitirMinutaEletronicaService) {
		this.emitirMinutaEletronicaService = emitirMinutaEletronicaService;
	}
	
}
