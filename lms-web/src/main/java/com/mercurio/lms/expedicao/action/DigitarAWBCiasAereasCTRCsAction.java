package com.mercurio.lms.expedicao.action;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.FindDefinition;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailAction;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.session.SessionContext;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.expedicao.model.Awb;
import com.mercurio.lms.expedicao.model.Conhecimento;
import com.mercurio.lms.expedicao.model.CtoAwb;
import com.mercurio.lms.expedicao.model.service.AwbCiaAereaService;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.model.service.CtoAwbService;
import com.mercurio.lms.expedicao.util.ConhecimentoUtils;
import com.mercurio.lms.expedicao.util.ConstantesExpedicao;
import com.mercurio.lms.municipios.model.Aeroporto;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.AeroportoService;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.IntegerUtils;

/**
 * Generated by: Giuliano Costa
 * 
 * Não inserir documentação após ou remover a tag do XDoclet a seguir. O valor
 * do <code>id</code> informado abaixo deve ser utilizado para referenciar
 * este serviço.
 * 
 * @spring.bean id="lms.expedicao.digitarAWBCiasAereasCTRCsAction"
 */
public class DigitarAWBCiasAereasCTRCsAction extends CrudAction {
	private FilialService filialService;
	private ConhecimentoService conhecimentoService;
	private DomainValueService domainValueService;
	private AeroportoService aeroportoService;
	private long cont = 0;
	private CtoAwbService ctoAwbService;

	public List findFilialConhecimento(TypedFlatMap criteria) {
		return filialService.findLookupBySgFilial(criteria.getString("sgFilial"), criteria.getString("tpAcesso"));
	}

	private Conhecimento consultar(TypedFlatMap parameters) {
		Long nrConhecimento = parameters.getLong("nrConhecimento");
		Long idFilialOrigem = parameters.getLong("filialByIdFilialOrigem.idFilial");
		String tpDocumentoServico = parameters.getString("tpDocumentoServico");

		if(nrConhecimento != null && idFilialOrigem != null){
			return conhecimentoService.findConhecimentoByNrConhecimentoIdFilial(nrConhecimento, idFilialOrigem, tpDocumentoServico);
		}
		return null;
	}

	public List findDoctoServico(TypedFlatMap criteria) {
		Conhecimento conhecimento = consultar(criteria);
		List retorno = new ArrayList(1);

		if(conhecimento != null) {
			Map mapReturn = new HashMap();
			mapReturn.put("dvConhecimento", conhecimento.getDvConhecimento());
			mapReturn.put("idDoctoServico", conhecimento.getIdDoctoServico());
			Long nrConhecimento = criteria.getLong("nrConhecimento");
			mapReturn.put("nrConhecimento", FormatUtils.formatDecimal("00000000", nrConhecimento));

			Aeroporto aeroporto = conhecimento.getAeroportoByIdAeroportoDestino();

			if(aeroporto != null) {
				mapReturn.put("sgAeroporto", aeroporto.getSgAeroporto());
				Pessoa p = aeroporto.getPessoa();
				if(p != null) mapReturn.put("nmPessoa", p.getNmPessoa());
			}
			retorno.add(mapReturn);
		} else {
			throw new BusinessException("LMS-00061");
		}
		

		return retorno;
	}

	public Integer getRowCount(Map criteria) {
		Integer retorno = IntegerUtils.ZERO;
		Map ctosAwbMap = getCtrcInSession();

		if(ctosAwbMap != null) retorno = ctosAwbMap.size();

		return retorno;
	}

	public ResultSetPage findPaginated(Map criteria){
    	Map ctosAwbMap = getCtrcInSession();
    	if (ctosAwbMap != null){
    		List conhecimentosList = new ArrayList(ctosAwbMap.values());
    		FindDefinition findDef = FindDefinition.createFindDefinition(criteria);

    		Comparator ordenador = new Comparator() {
				public int compare(Object arg0, Object arg1) {
					return 0;
				}
    		};
    		ResultSetPage rsp = MasterDetailAction.getResultSetPage(conhecimentosList, findDef.getCurrentPage(), findDef.getPageSize(), ordenador);

    		Iterator itList = rsp.getList().iterator();
    		List newList = new ArrayList();

    		while(itList.hasNext()) {
    			CtoAwb ctoAwb = (CtoAwb) itList.next();
    			Conhecimento conhecimento = conhecimentoService.findById(ctoAwb.getConhecimento().getIdDoctoServico());
    			Map mapLine = new HashMap();

    			mapLine.put("sgAeroportoDestino", "");

    			if(conhecimento.getAeroportoByIdAeroportoDestino() != null) {
    				Aeroporto aeroportoDestino = aeroportoService.findById(conhecimento.getAeroportoByIdAeroportoDestino().getIdAeroporto());
    				mapLine.put("sgAeroportoDestino", aeroportoDestino.getSgAeroporto());
    			}
    			mapLine.put("psReal", conhecimento.getPsReal());
    			mapLine.put("idCtoAwb", Long.valueOf(ctoAwb.getIdCtoAwb().longValue()));
    			mapLine.put("psAforado", conhecimento.getPsAforado());
    			mapLine.put("qtVolumes", conhecimento.getQtVolumes());
    			mapLine.put("vlMercadoria", conhecimento.getVlMercadoria());
    			
    			Filial filialOrigem = filialService.findById(conhecimento.getFilialByIdFilialOrigem().getIdFilial());
    			if(ConstantesExpedicao.CONHECIMENTO_NACIONAL.equals(conhecimento.getTpDocumentoServico().getValue())){
    				mapLine.put("nrConhecimentoFormatado", ConhecimentoUtils.formatConhecimento(filialOrigem.getSgFilial(), conhecimento.getNrConhecimento(), conhecimento.getDvConhecimento()));
    			} else {
    				mapLine.put("nrConhecimentoFormatado", ConhecimentoUtils.formatConhecimento(filialOrigem.getSgFilial(), conhecimento.getNrConhecimento(), null));    				
    			}
    			newList.add(mapLine);

    		}
    		rsp.setList(newList);

    		return rsp;
    	}
    	return ResultSetPage.EMPTY_RESULTSET;
    }

	public void storeInSession(TypedFlatMap parameters) {
		Conhecimento conhecimento = consultar(parameters);
		if(conhecimento != null) {
			List<Awb> awbs = ctoAwbService.findCtoAwbBydDoctoServico(conhecimento.getIdDoctoServico());
			if(!awbs.isEmpty()){
				TypedFlatMap tfm = ctoAwbService.customizaMensagem(awbs.get(0), new TypedFlatMap());
				throw new BusinessException("LMS-04441", new Object[]{tfm.get("coringa1"), tfm.get("coringa2"), tfm.get("coringa3")});
			}
			Map ctosAwbMap = getCtrcInSession();
			if(!isContainsConhecimento(ctosAwbMap, conhecimento)){
				CtoAwb ctoAwb = new CtoAwb();
				ctoAwb.setConhecimento(conhecimento);
				ctoAwb.setIdCtoAwb(Long.valueOf(--cont));
				ctosAwbMap.put(ctoAwb.getIdCtoAwb(), ctoAwb);
			} else {
				throw new BusinessException("LMS-04166");
			}
			setCtrcInSession(ctosAwbMap);
		}
	}
	
	private boolean isContainsConhecimento(Map m, Conhecimento c){
		Iterator it = m.values().iterator();
		while(it.hasNext()) {
			CtoAwb ctoAwb = (CtoAwb) it.next();
			Conhecimento cAux = ctoAwb.getConhecimento();
			if(c.hashCode() == cAux.hashCode()) return true;
		}
		return false;
	}
	
	private void removeConhecimento(Long id, Map ctosAwbMap) {
		ctosAwbMap.remove(id);
	}

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	Map conhecimentosMap = getCtrcInSession();
    	if (conhecimentosMap != null){
    		for (Iterator iter = ids.iterator(); iter.hasNext();) {
    			Long id = (Long) iter.next();
    			removeConhecimento(id, conhecimentosMap);
    		}
    	}
    	setCtrcInSession(conhecimentosMap);
    }

    private Map getCtrcInSession(){
    	Map ctosAwbMap = (Map) SessionContext.get(ConstantesExpedicao.CTOs_AWB_IN_SESSION);
		if(ctosAwbMap == null) {
			ctosAwbMap = new HashMap(1);
		}
		setCtrcInSession(ctosAwbMap);
		return ctosAwbMap; 
    }

    public List findTipoDocumento(TypedFlatMap criteria) {
		List tpSituacoes = domainValueService.findByDomainNameAndValues("DM_TIPO_COD_SERV_CONHECIMENTO"
				, Arrays.asList(ConstantesExpedicao.CONHECIMENTO_NACIONAL,ConstantesExpedicao.CONHECIMENTO_ELETRONICO));
		return tpSituacoes;
	}

    public void consolidarCarga(TypedFlatMap data) {
		List received = data.getList("conhecimentos");
		if (received == null || received.isEmpty()) {
			throw new BusinessException("LMS-04159");
		}
		Awb awb = new Awb();
		Map ctoAwbs = getCtrcInSession();
		if (ctoAwbs != null) {
			ctoAwbs.clear();
		}

		for (int i = 0; i < received.size(); i++) {
			Long idConhecimento = Long.valueOf((String) received.get(i));
			Conhecimento conhecimento = conhecimentoService.findByIdPreAwb(idConhecimento);
			CtoAwb ctoAwb = new CtoAwb();
			ctoAwb.setConhecimento(conhecimento);
			ctoAwb.setIdCtoAwb(Long.valueOf(--cont));
			ctoAwbs.put(ctoAwb.getIdCtoAwb(), ctoAwb);
		}

		setCtrcInSession(ctoAwbs);		
	}    

    private void setCtrcInSession(Map ctosAwbMap) {
    	SessionContext.set(ConstantesExpedicao.CTOs_AWB_IN_SESSION, ctosAwbMap);
    }

	public void setService(AwbCiaAereaService awbCiaAereaService) {
		this.defaultService = awbCiaAereaService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
	}
	
	public DomainValueService getDomainValueService() {
		return domainValueService;
	}
	
	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}
	
	public AeroportoService getAeroportoService() {
		return aeroportoService;
	}

	public void setAeroportoService(AeroportoService aeroportoService) {
		this.aeroportoService = aeroportoService;
	}

	public CtoAwbService getCtoAwbService() {
		return ctoAwbService;
	}

	public void setCtoAwbService(CtoAwbService ctoAwbService) {
		this.ctoAwbService = ctoAwbService;
	}
	
}