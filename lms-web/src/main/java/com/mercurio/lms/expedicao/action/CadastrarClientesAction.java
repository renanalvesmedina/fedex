package com.mercurio.lms.expedicao.action;

import static com.mercurio.lms.util.BigDecimalUtils.ZERO;
import static java.lang.Boolean.FALSE;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.Contato;
import com.mercurio.lms.configuracoes.model.EnderecoPessoa;
import com.mercurio.lms.configuracoes.model.InscricaoEstadual;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.configuracoes.model.RamoAtividade;
import com.mercurio.lms.configuracoes.model.TelefoneEndereco;
import com.mercurio.lms.configuracoes.model.TipoEnderecoPessoa;
import com.mercurio.lms.configuracoes.model.TipoLogradouro;
import com.mercurio.lms.configuracoes.model.service.CepService;
import com.mercurio.lms.configuracoes.model.service.EnderecoPessoaService;
import com.mercurio.lms.configuracoes.model.service.InscricaoEstadualService;
import com.mercurio.lms.configuracoes.model.service.RamoAtividadeService;
import com.mercurio.lms.configuracoes.model.service.TipoLogradouroService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.Municipio;
import com.mercurio.lms.municipios.model.UnidadeFederativa;
import com.mercurio.lms.municipios.model.service.MunicipioService;
import com.mercurio.lms.municipios.model.service.PaisService;
import com.mercurio.lms.municipios.model.service.UnidadeFederativaService;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.service.ClienteService;
import com.mercurio.lms.vendas.util.ConstantesVendas;

/**
 * Generated by: ADSM ActionGenerator
 *
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.expedicao.cadastrarClientesAction"
 */

public class CadastrarClientesAction extends CrudAction {
	private PaisService paisService;
	private UnidadeFederativaService unidadeFederativaService;
	private MunicipioService municipioService;
	private CepService cepService;
	private TipoLogradouroService tipoLogradouroService;
	private EnderecoPessoaService enderecoPessoaService;
	private ConfiguracoesFacade configuracoesFacade;
	private RamoAtividadeService ramoAtividadeService;
	private InscricaoEstadualService inscricaoEstadualService;


	public List findLookupPais(Map criteria){
		return paisService.findPaisLookup(criteria);
	}

	public List findUnidadeFederativaByPais(Map criteria){
		return unidadeFederativaService.findByPais(criteria);
	}

	public Serializable store(TypedFlatMap parameters) {
		String origem = (String) parameters.remove("origem");
		Pessoa pessoa = getPessoa(parameters);
		String tpPessoa = pessoa.getTpPessoa().getValue();

		setEnderecoPessoa(parameters, pessoa);
		EnderecoPessoa ep = pessoa.getEnderecoPessoa();
		if(ep.getIdEnderecoPessoa() == null) {
			TipoEnderecoPessoa tipoEnderecoPessoa = getTipoEnderecoPessoa(tpPessoa, origem);
			tipoEnderecoPessoa.setEnderecoPessoa(ep);
			List tipoEnderecoPessoas = new ArrayList();
			tipoEnderecoPessoas.add(tipoEnderecoPessoa);
			ep.setTipoEnderecoPessoas(tipoEnderecoPessoas);

			setTelefoneEndereco(parameters, pessoa, tpPessoa, ep);
			setContato(parameters, pessoa);
		}

		InscricaoEstadual ie = storeInscricaoEstadual(parameters, pessoa, ep.getMunicipio().getUnidadeFederativa(), tpPessoa);
		if (ie != null) {
			List ies = new ArrayList();
			ies.add(ie);
			pessoa.setInscricaoEstaduais(ies);
		}
		Cliente c = getCliente(pessoa, origem);

		Long idRamoAtividade = parameters.getLong("ramoAtividade.idRamoAtividade");
		if (idRamoAtividade != null) {
			RamoAtividade ramoAtividade = new RamoAtividade();
			ramoAtividade.setIdRamoAtividade(idRamoAtividade);
			c.setRamoAtividade(ramoAtividade);
		}

		getClienteService().saveClienteBasico(c);

		UnidadeFederativa uf = ep.getMunicipio().getUnidadeFederativa();
		TypedFlatMap retorno = new TypedFlatMap();
		retorno.put("idCliente", c.getIdCliente());
		retorno.put("pessoa.idPessoa", pessoa.getIdPessoa());
		retorno.put("pessoa.nmPessoa", pessoa.getNmPessoa());
		retorno.put("pessoa.nrIdentificacao", pessoa.getNrIdentificacao());
		retorno.put("inscricaoEstadual.idInscricaoEstadual", ie.getIdInscricaoEstadual());
		retorno.put("endereco.nrCep", ep.getNrCep());
		retorno.put("endereco.nmMunicipio", ep.getMunicipio().getNmMunicipio());
		retorno.put("endereco.idMunicipio", ep.getMunicipio().getIdMunicipio());
		retorno.put("endereco.sgUnidadeFederativa", uf.getSgUnidadeFederativa());
		retorno.put("endereco.idUnidadeFederativa", uf.getIdUnidadeFederativa());
		retorno.put("endereco.dsComplemento", ep.getDsComplemento());
		
		if(ep.getNrEndereco() != null){
			retorno.put("endereco.nrEndereco", ep.getNrEndereco().trim());
		}
		
		retorno.put("endereco.dsEndereco", ep.getDsEndereco());
		retorno.put("endereco.dsTipoLogradouro", ep.getTipoLogradouro().getDsTipoLogradouro());
		return retorno;
	}

	public List findCepLookup(Map criteria) {
		return cepService.findLookup(criteria);
	}

	public List findTipoLogradouro(Map criteria){
		return tipoLogradouroService.find(criteria);
	}

	public List findMunicipioLookup(Map criteria){
		return municipioService.findLookup(criteria);
	}

	public Map findPessoa(Map criteria){
	 	String nrIdentificacao = (String)criteria.get("nrIdentificacao");
	 	String tpIdentificacao = (String)criteria.get("tpIdentificacao");
	 	String tpPessoa = (String)criteria.get("tpPessoa");
	 	Pessoa pessoa = configuracoesFacade.getPessoa(nrIdentificacao, tpIdentificacao);
	 	Map p = new HashMap();
	 	if(pessoa != null) {
	 		Long idPessoa = pessoa.getIdPessoa();
	 		Integer total = getClienteService().getRowCountByIdPessoa(idPessoa);
	 		if(total != null && total.intValue() > 0)
	 			throw new BusinessException("LMS-40003");
	 		String origem = (String)criteria.get("origem");
	 		Map endereco = null;
	 		if("exp".equalsIgnoreCase(origem)) {
	 			if("F".equals(tpPessoa)) {
	 				endereco = enderecoPessoaService.findByIdPessoaPrioridade(idPessoa, new String[]{"RES", "COM"});
	 			} else
	 				endereco = enderecoPessoaService.findByIdPessoaPrioridade(idPessoa, new String[]{"COM"});
	 		} else if("col".equalsIgnoreCase(origem)) {
	 			if("F".equals(tpPessoa)) {
	 				endereco = enderecoPessoaService.findByIdPessoaPrioridade(idPessoa, new String[]{"COL", "RES", "COM"});
	 			} else
	 				endereco = enderecoPessoaService.findByIdPessoaPrioridade(idPessoa, new String[]{"COL", "COM"});
	 		}
			p.put("idPessoa", idPessoa);
			p.put("nmPessoa", pessoa.getNmPessoa());
	 		p.put("endereco", endereco);
	 	}
	 	return p;
	}

	public Map findPaisUsuarioLogado() {
	 	return paisService.findPaisUsuarioLogado();
	}

	public List findRamosAtividades(Map criteria) {
		return ramoAtividadeService.findCombo(criteria);
	}

	/*
	 * Metodos privados
	 */
	private void setEnderecoPessoa(TypedFlatMap parameters, Pessoa pessoa) {
		EnderecoPessoa enderecoPessoa = new EnderecoPessoa();

		Long idEnderecoPessoa = parameters.getLong("enderecoPessoa.idEnderecoPessoa");
		enderecoPessoa.setIdEnderecoPessoa(idEnderecoPessoa);
		if(idEnderecoPessoa == null) {
			enderecoPessoa.setDsBairro(parameters.getString("enderecoPessoa.dsBairro"));
			enderecoPessoa.setDsComplemento(parameters.getString("enderecoPessoa.dsComplemento"));
			enderecoPessoa.setDsEndereco(parameters.getString("enderecoPessoa.dsEndereco"));
			enderecoPessoa.setNrCep(parameters.getString("enderecoPessoa.nrCep"));
			
			if(parameters.getString("enderecoPessoa.nrEndereco") != null){
				enderecoPessoa.setNrEndereco(parameters.getString("enderecoPessoa.nrEndereco").trim());
			}
			
			enderecoPessoa.setDtVigenciaInicial(JTDateTimeUtils.getDataAtual());
		}

		Long idMunicipio = parameters.getLong("enderecoPessoa.municipio.idMunicipio");
		if (idMunicipio != null) {
			Municipio municipio = new Municipio();
			municipio.setIdMunicipio(idMunicipio);
			enderecoPessoa.setMunicipio(municipio);
		}

		Long idUnidadeFederativa = parameters.getLong("enderecoPessoa.municipio.unidadeFederativa.idUnidadeFederativa");
		if (idUnidadeFederativa != null) {
			UnidadeFederativa unidadeFederativa = new UnidadeFederativa();
			unidadeFederativa.setIdUnidadeFederativa(idUnidadeFederativa);
			enderecoPessoa.getMunicipio().setUnidadeFederativa(unidadeFederativa);
		}

		Long idTipoLogradouro = parameters.getLong("enderecoPessoa.tipoLogradouro.idTipoLogradouro");
		if (idTipoLogradouro != null) {
			TipoLogradouro tipoLogradouro = new TipoLogradouro();
			tipoLogradouro.setIdTipoLogradouro(idTipoLogradouro);
			enderecoPessoa.setTipoLogradouro(tipoLogradouro);
		}

		pessoa.setEnderecoPessoa(enderecoPessoa);
		enderecoPessoa.setPessoa(pessoa);
	}
	
	private TipoEnderecoPessoa getTipoEnderecoPessoa(String tpPessoa, String origem) {
		DomainValue tpEndereco = null;
		if("col".equalsIgnoreCase(origem)) {
			tpEndereco = new DomainValue("COL");
		} else {
			if("F".equalsIgnoreCase(tpPessoa))
				tpEndereco = new DomainValue("RES");
			else
				tpEndereco = new DomainValue("COM");
		}
		TipoEnderecoPessoa tep = new TipoEnderecoPessoa();
		tep.setTpEndereco(tpEndereco);
		return tep;
	}
	
	private void setTelefoneEndereco(TypedFlatMap parameters, Pessoa p, String tpPessoa, EnderecoPessoa ep) {
		TelefoneEndereco te = null;
		String ddd = parameters.getString("telefoneEndereco.nrDdd");
		String numero = parameters.getString("telefoneEndereco.nrTelefone");
		if(StringUtils.isNotBlank(ddd) && StringUtils.isNotBlank(numero)) {
			te = new TelefoneEndereco();
			DomainValue tpUsuTelefone = new DomainValue("FO");
			DomainValue tpTelefone = null;
			if("F".equalsIgnoreCase(tpPessoa))
				tpTelefone = new DomainValue("R");
			else
				tpTelefone = new DomainValue("C");
			te.setTpTelefone(tpTelefone);
			te.setTpUso(tpUsuTelefone);
			te.setNrDdd(ddd);
			te.setNrTelefone(numero);
			te.setEnderecoPessoa(ep);
			te.setPessoa(p);
			
			List telefoneEnderecos = new ArrayList();
			telefoneEnderecos.add(te);
			ep.setTelefoneEnderecos(telefoneEnderecos);
			p.setTelefoneEnderecos(telefoneEnderecos);
		}
	}
	
	private Pessoa getPessoa(TypedFlatMap parameters) {
		Pessoa pessoa = new Pessoa();
		pessoa.setIdPessoa(parameters.getLong("pessoa.idPessoa"));
		pessoa.setNrIdentificacao(parameters.getString("pessoa.nrIdentificacao"));
		pessoa.setNmPessoa(parameters.getString("pessoa.nmPessoa"));
		pessoa.setTpPessoa(new DomainValue(parameters.getString("pessoa.tpPessoa")));
		pessoa.setTpIdentificacao(new DomainValue(parameters.getString("pessoa.tpIdentificacao")));
		return pessoa;
	}

	private void setContato(TypedFlatMap parameters, Pessoa p) {
		Contato c = null;
		String nmContato = parameters.getString("contato.nmContato");
		if(StringUtils.isNotBlank(nmContato)) {
			DomainValue tpContato = new DomainValue("CN");
			c = new Contato();
			c.setTpContato(tpContato);
			c.setNmContato(nmContato);
			c.setPessoa(p);
			List contatos = new ArrayList();
			contatos.add(c);
			p.setContatosByIdPessoaContatado(contatos);
		}
	}

	private Cliente getCliente(Pessoa pessoa, String origem) {
		Cliente cliente = new Cliente();
		cliente.setPessoa(pessoa);
		cliente.setTpCliente(new DomainValue(ConstantesVendas.CLIENTE_POTENCIAL));
		cliente.setTpSituacao(new DomainValue(ConstantesVendas.SITUACAO_ATIVO));
		cliente.setUsuarioByIdUsuarioInclusao(SessionUtils.getUsuarioLogado());
		cliente.setCliente(cliente);
		
		Filial filialSessao = SessionUtils.getFilialSessao();
		cliente.setFilialByIdFilialCobranca(filialSessao);
		cliente.setFilialByIdFilialAtendeOperacional(filialSessao);
		cliente.setFilialByIdFilialAtendeComercial(filialSessao);

		cliente.setBlGeraReciboFreteEntrega(Boolean.FALSE);
		cliente.setBlPermanente(Boolean.FALSE);
		cliente.setBlResponsavelFrete(Boolean.FALSE);
		cliente.setBlBaseCalculo(Boolean.FALSE);
		cliente.setBlCobraReentrega(Boolean.TRUE);
		cliente.setBlCobraDevolucao(Boolean.TRUE);
		cliente.setBlColetaAutomatica(Boolean.FALSE);
		cliente.setBlFobDirigido(Boolean.FALSE);
		cliente.setBlFobDirigidoAereo(Boolean.FALSE);
		cliente.setBlPesoAforadoPedagio(Boolean.FALSE);
		cliente.setBlIcmsPedagio(Boolean.FALSE);
		cliente.setBlIndicadorProtesto(Boolean.FALSE);
		cliente.setBlMatriz(Boolean.FALSE);
		cliente.setBlCobrancaCentralizada(Boolean.FALSE);
		cliente.setBlFaturaDocsEntregues(Boolean.FALSE);
		cliente.setBlPreFatura(Boolean.FALSE);
		cliente.setBlRessarceFreteFob(Boolean.FALSE);
		cliente.setBlEmiteBoletoCliDestino(Boolean.FALSE);
		cliente.setBlAgrupaFaturamentoMes(Boolean.FALSE);
		cliente.setBlAgrupaNotas(Boolean.FALSE);
		cliente.setBlCadastradoColeta(Boolean.FALSE);
		cliente.setBlOperadorLogistico(Boolean.FALSE);
		cliente.setBlFronteiraRapida(Boolean.FALSE);
		cliente.setBlAgendamentoPessoaFisica(Boolean.FALSE);
		cliente.setBlAgendamentoPessoaJuridica(Boolean.FALSE);
		cliente.setBlFaturaDocsConferidos(FALSE);
		cliente.setDtGeracao(JTDateTimeUtils.getDataAtual());
		cliente.setPcDescontoFreteCif(ZERO);
		cliente.setPcDescontoFreteFob(ZERO);
		cliente.setNrCasasDecimaisPeso(Short.valueOf("2"));
		cliente.setBlObrigaRecebedor(Boolean.FALSE);
		cliente.setTpDificuldadeColeta(new DomainValue("0"));
		cliente.setTpDificuldadeEntrega(new DomainValue("0"));
		cliente.setTpDificuldadeClassificacao(new DomainValue("0"));
		cliente.setTpFrequenciaVisita(new DomainValue("M"));
		cliente.setTpFormaArredondamento(new DomainValue("P"));
		cliente.setTpCobranca(new DomainValue("4"));
		cliente.setPcJuroDiario(ZERO);
		cliente.setBlFaturaDocReferencia(FALSE);
		cliente.setBlDificuldadeEntrega(FALSE);
		cliente.setBlRetencaoComprovanteEntrega(FALSE);
		cliente.setBlDivulgaLocalizacao(FALSE);
		cliente.setBlPermiteCte(FALSE);
		cliente.setBlObrigaSerie(FALSE);
		cliente.setBlSeparaFaturaModal(FALSE);
		cliente.setBlMtzLiberaRIM(FALSE);

		if("col".equalsIgnoreCase(origem)) {
			cliente.setBlCadastradoColeta(Boolean.TRUE);
		} else {
			cliente.setBlCadastradoColeta(Boolean.FALSE);
		}
		return cliente;
	}

	private InscricaoEstadual storeInscricaoEstadual(TypedFlatMap parameters, Pessoa p, UnidadeFederativa uf, String tpPessoa) {
		InscricaoEstadual insc = inscricaoEstadualService.findByPessoaIndicadorPadrao(p.getIdPessoa(), Boolean.TRUE);
		String nrInscricaoEstadual = parameters.getString("inscricaoEstadual.nrInscricaoEstadual");
		if(StringUtils.isNotBlank(nrInscricaoEstadual)) {
			nrInscricaoEstadual = nrInscricaoEstadual.toUpperCase();
		}
		if(insc != null
			&& (insc.getNrInscricaoEstadual().equals(nrInscricaoEstadual)
			|| (StringUtils.isBlank(nrInscricaoEstadual)
			&& "ISENTO".equals(insc.getNrInscricaoEstadual()))))
		{
			return insc;
		}
		InscricaoEstadual ie = new InscricaoEstadual();
		ie.setPessoa(p);
		ie.setUnidadeFederativa(uf);
		// TODO Validar alterações da InscricaoEstadual
		if(insc != null) {
			ie.setBlIndicadorPadrao(Boolean.FALSE);
		} else {
			ie.setBlIndicadorPadrao(Boolean.TRUE);
		}
		// TODO Validar alterações da InscricaoEstadual
		ie.setTpSituacao(new DomainValue("A"));
		if("F".equalsIgnoreCase(tpPessoa) || StringUtils.isBlank(nrInscricaoEstadual)) {
			ie.setNrInscricaoEstadual("ISENTO");
		} else {
			ie.setNrInscricaoEstadual(nrInscricaoEstadual);
			// TODO Validar alterações da InscricaoEstadual
		}
		return ie;
	}

	private ClienteService getClienteService() {
		return (ClienteService)this.defaultService;
	}
	public void setClienteService(ClienteService clienteService) {
		this.defaultService = clienteService;
	}
	public void setInscricaoEstadualService(InscricaoEstadualService inscricaoEstadualService) {
		this.inscricaoEstadualService = inscricaoEstadualService;
	}
	public void setEnderecoPessoaService(EnderecoPessoaService enderecoPessoaService) {
		this.enderecoPessoaService = enderecoPessoaService;
	}
	public void setTipoLogradouroService(TipoLogradouroService tipoLogradouroService) {
		this.tipoLogradouroService = tipoLogradouroService;
	}
	public void setCepService(CepService cepService) {
		this.cepService = cepService;
	}
	public void setMunicipioService(MunicipioService municipioService) {
		this.municipioService = municipioService;
	}
	public void setUnidadeFederativaService(UnidadeFederativaService unidadeFederativaService) {
		this.unidadeFederativaService = unidadeFederativaService;
	}
	public void setPaisService(PaisService paisService) {
		this.paisService = paisService;
	}
	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}
	public void setRamoAtividadeService(RamoAtividadeService ramoAtividadeService) {
		this.ramoAtividadeService = ramoAtividadeService;
	}
}
