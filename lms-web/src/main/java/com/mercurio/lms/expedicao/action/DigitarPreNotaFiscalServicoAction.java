package com.mercurio.lms.expedicao.action;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.InscricaoEstadual;
import com.mercurio.lms.configuracoes.model.Servico;
import com.mercurio.lms.configuracoes.model.ServicoAdicional;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.configuracoes.model.service.InscricaoEstadualService;
import com.mercurio.lms.configuracoes.model.service.ServicoService;
import com.mercurio.lms.contasreceber.model.param.DivisaoClienteParam;
import com.mercurio.lms.expedicao.DocumentoServicoFacade;
import com.mercurio.lms.expedicao.model.CalculoNFServico;
import com.mercurio.lms.expedicao.model.DoctoServico;
import com.mercurio.lms.expedicao.model.ImpostoServico;
import com.mercurio.lms.expedicao.model.NotaFiscalServico;
import com.mercurio.lms.expedicao.model.ObservacaoDoctoServico;
import com.mercurio.lms.expedicao.model.ParcelaServico;
import com.mercurio.lms.expedicao.model.ParcelaServicoAdicional;
import com.mercurio.lms.expedicao.model.ServAdicionalDocServ;
import com.mercurio.lms.expedicao.model.service.ImpostoServicoService;
import com.mercurio.lms.expedicao.model.service.NotaFiscalServicoService;
import com.mercurio.lms.expedicao.model.service.ServAdicionalDocServService;
import com.mercurio.lms.expedicao.report.EmitirNFSService;
import com.mercurio.lms.expedicao.report.GerarNFSService;
import com.mercurio.lms.expedicao.util.CalculoFreteUtils;
import com.mercurio.lms.expedicao.util.ConstantesExpedicao;
import com.mercurio.lms.expedicao.util.ExpedicaoUtils;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.Municipio;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.MunicipioService;
import com.mercurio.lms.tabelaprecos.model.ParcelaPreco;
import com.mercurio.lms.tabelaprecos.model.RestricaoRota;
import com.mercurio.lms.tabelaprecos.model.service.ParcelaPrecoService;
import com.mercurio.lms.tributos.model.service.AliquotaIssMunicipioServService;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.LongUtils;
import com.mercurio.lms.util.NetworkUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.Cotacao;
import com.mercurio.lms.vendas.model.DivisaoCliente;
import com.mercurio.lms.vendas.model.service.ClienteService;
import com.mercurio.lms.vendas.model.service.CotacaoService;
import com.mercurio.lms.vendas.model.service.DivisaoClienteService;
import com.mercurio.lms.vendas.util.ClienteUtils;
import com.mercurio.lms.vendas.util.ConstantesVendas;

/**
 * Generated by: ADSM ActionGenerator
 * 
 * Não inserir documentação após ou remover a tag do XDoclet a seguir. O valor
 * do <code>id</code> informado abaixo deve ser utilizado para referenciar
 * este serviço.
 * 
 * @spring.bean id="lms.expedicao.digitarPreNotaFiscalServicoAction"
 */
public class DigitarPreNotaFiscalServicoAction extends CrudAction {
	private DocumentoServicoFacade documentoServicoFacade;
	private ConfiguracoesFacade configuracoesFacade;
	private DomainValueService domainValueService;
	private ImpostoServicoService impostoServicoService;
	private ServAdicionalDocServService servAdicionalDocServService;
	private ClienteService clienteService;
	private FilialService filialService;
	private MunicipioService municipioService;
	private ServicoService servicoService;
	private ParcelaPrecoService parcelaPrecoService;
	private DivisaoClienteService divisaoClienteService;
	private InscricaoEstadualService inscricaoEstadualService;
	private CotacaoService cotacaoService;
	private GerarNFSService gerarNFSService;
	private EmitirNFSService emitirNFSService;
	private AliquotaIssMunicipioServService aliquotaIssMunicipioServService;

	/**
	 * Busca Nota Fiscal de Servico.
	 * 
	 * @param params
	 * @return
	 */
	public TypedFlatMap findNFServico(TypedFlatMap params) {
		/** Caso Calculo Manual */
		CalculoNFServico calculoNFServico = new CalculoNFServico();
		if (params != null && params.containsKey("valor")) {
			if (params.getBigDecimal("valor").doubleValue() <= 0.0) {
				throw new BusinessException("requiredField", new Object[]{configuracoesFacade.getMensagem("valor")});
			}
			calculoNFServico.addServicoAdicional(getParcelaServicoCalculoManual(params));			
		}
		/** Busca NFS da Sessao */
		NotaFiscalServico notaFiscalServico = ExpedicaoUtils.getNFSInSession();
		/** Carrega Parametros p/ Calculo */
		preparaParametrosCalculoNF(calculoNFServico, notaFiscalServico);
		/** Busca Calculo da NFS */
		documentoServicoFacade.executeCalculoNotaFiscalServico(calculoNFServico);
		/** 2º Fase Atribui Dados ha Nota Fiscal de Servico */
		CalculoFreteUtils.copyResult(notaFiscalServico, calculoNFServico);
		/** Grava Dados na Sessao */
		ExpedicaoUtils.setNFSInSession(notaFiscalServico);
		ExpedicaoUtils.setCalculoNFSInSession(calculoNFServico);

		List tributos = new ArrayList();
		if(calculoNFServico.getTributos() != null) {
			for (Iterator it = calculoNFServico.getTributos().iterator(); it.hasNext();) {
				ImpostoServico impostoServico = (ImpostoServico) it.next();
				Map data = new HashMap();
				data.put("nome", impostoServico.getTpImposto().getDescription().toString());
				data.put("valor", impostoServico.getVlImposto());
				tributos.add(data);
			}
		}
		TypedFlatMap result = new TypedFlatMap();
		result.put("tributos", tributos);
		result.put("totalTributos", calculoNFServico.getVlTotalTributos());
		result.put("valorTotal", calculoNFServico.getVlTotal());

		ParcelaServico parcelaServico = (ParcelaServico) calculoNFServico.getServicosAdicionais().get(0);

		Map valorServico = new HashMap();
		valorServico.put("valor", parcelaServico.getVlParcela());
		result.put("servicosAdicionais", valorServico);
		return result;
	}

	/**
	 * Parametros para Calculo da NFS.
	 * 
	 * @param calculoNFServico
	 * @param notaFiscalServico
	 */
	private void preparaParametrosCalculoNF(CalculoNFServico calculoNFServico, NotaFiscalServico notaFiscalServico) {
		calculoNFServico.setTpModal(notaFiscalServico.getServico().getTpModal().getValue());
		calculoNFServico.setTpAbrangencia(notaFiscalServico.getServico().getTpAbrangencia().getValue());
		calculoNFServico.setTpConhecimento(ConstantesExpedicao.CONHECIMENTO_NORMAL);

		calculoNFServico.setTpCalculo(notaFiscalServico.getTpCalculoPreco().getValue());
		calculoNFServico.setBlCalculaParcelas(Boolean.FALSE);
		calculoNFServico.setBlCalculaServicosAdicionais(Boolean.TRUE);
		calculoNFServico.setClienteBase(notaFiscalServico.getClienteByIdClienteDestinatario());
		if (notaFiscalServico.getDivisaoCliente() != null) {
			calculoNFServico.setIdDivisaoCliente(notaFiscalServico.getDivisaoCliente().getIdDivisaoCliente());
		}

		List cotacoes = notaFiscalServico.getCotacoes();
		if (cotacoes != null && !cotacoes.isEmpty()) {
			Cotacao cotacao = (Cotacao)cotacoes.get(0);
			calculoNFServico.setIdCotacao(cotacao.getIdCotacao());	
		}
		calculoNFServico.setIdServico(notaFiscalServico.getServico().getIdServico());
		calculoNFServico.setPsReferencia(notaFiscalServico.getPsReferenciaCalculo());
		calculoNFServico.setServAdicionalDoctoServico(notaFiscalServico.getServAdicionalDocServs());

		RestricaoRota restricaoRotaOrigem = calculoNFServico.getRestricaoRotaOrigem();
		restricaoRotaOrigem.setIdMunicipio(SessionUtils.getFilialSessao().getPessoa().getEnderecoPessoa().getMunicipio().getIdMunicipio());

		RestricaoRota restricaoRotaDestino = calculoNFServico.getRestricaoRotaDestino();
		restricaoRotaDestino.setIdMunicipio(notaFiscalServico.getMunicipio().getIdMunicipio());
	}

	/**
	 * Parcela Calculo Manual.
	 * 
	 * @param params
	 * @return
	 */
	private ParcelaServicoAdicional getParcelaServicoCalculoManual(TypedFlatMap params) {
		BigDecimal valor = params.getBigDecimal("valor");
		Long idServicoAdicional = params.getLong("idServicoAdicional");
		Long idParcelaPreco = params.getLong("idParcelaPreco");

		ServicoAdicional servicoAdicional = new ServicoAdicional();
		servicoAdicional.setIdServicoAdicional(idServicoAdicional);

		ParcelaPreco parcelaPreco = new ParcelaPreco();
		parcelaPreco.setIdParcelaPreco(idParcelaPreco);
		parcelaPreco.setServicoAdicional(servicoAdicional);

		ParcelaServicoAdicional parcelaServicoAdicional = new ParcelaServicoAdicional(parcelaPreco);
		parcelaServicoAdicional.setVlBrutoParcela(valor);
		return parcelaServicoAdicional;
	}

	public TypedFlatMap storeAndPressNF(TypedFlatMap params) {
		Long nrProximoFormulario = params.getLong("numFormulario"); 
		String ipUsuario = params.getString("userip");
		NotaFiscalServico notaFiscalServico = ExpedicaoUtils.getNFSInSession();
		Long idFilial = SessionUtils.getFilialSessao().getIdFilial();

		Long idServicoTributo = LongUtils.getLong((BigDecimal) configuracoesFacade.getValorParametro(ConstantesExpedicao.ID_SERVICO_TRIBUTO_NFT));
		Long idMunicipioSede = SessionUtils.getFilialSessao().getPessoa().getEnderecoPessoa().getMunicipio().getIdMunicipio();
		Long idMunicipioServico = notaFiscalServico.getMunicipio().getIdMunicipio();
		
		TypedFlatMap emiteNfServico = aliquotaIssMunicipioServService.findEmiteNfServico(null, idServicoTributo, idMunicipioSede, idMunicipioServico);
        
        if (Boolean.TRUE.equals(emiteNfServico.getBoolean("BlEmiteNFeletronica"))) {
			notaFiscalServico.setTpDocumentoServico(new DomainValue(ConstantesExpedicao.NOTA_FISCAL_SERVICO_ELETRONICA));
			notaFiscalServico.setTpNotaFiscalServico(new DomainValue(ConstantesExpedicao.NOTA_FISCAL_SERVICO_ELETRONICA));
        } else {
			notaFiscalServico.setTpDocumentoServico(new DomainValue(ConstantesExpedicao.NOTA_FISCAL_SERVICO));
			notaFiscalServico.setTpNotaFiscalServico(new DomainValue(ConstantesExpedicao.NOTA_FISCAL_SERVICO)); 
        }
		
		//somente busca o proximo numero de formulario se NÃO for uma NSE 
		this.emitirNFSService.storeNFS(notaFiscalServico, idFilial, ConstantesExpedicao.CD_EMISSAO, nrProximoFormulario, 
			NetworkUtils.getMacAddress(ipUsuario));

		String nfs = "";
		if( ConstantesExpedicao.NOTA_FISCAL_SERVICO.equalsIgnoreCase(notaFiscalServico.getTpDocumentoServico().getValue()) ){
			nfs = gerarNFSService.generateNFS(notaFiscalServico.getIdDoctoServico());
		}
	
		notaFiscalServico = getNotaFiscalServicoService().findById(notaFiscalServico.getIdDoctoServico());
		TypedFlatMap result = new TypedFlatMap();
		result.put("nr", notaFiscalServico.getNrNotaFiscalServico());
		result.put("dhEmissao", notaFiscalServico.getDhEmissao());
		result.put("tpSituacao", notaFiscalServico.getTpSituacaoNf().getValue());
		result.put("tpSituacaoLabel", notaFiscalServico.getTpSituacaoNf().getDescription().getValue());
		result.put("nrNotaFiscalServico", notaFiscalServico.getNrNotaFiscalServico());
		result.put("idNotaFiscalServico", notaFiscalServico.getIdDoctoServico());
		result.put("nfs", nfs);
		ExpedicaoUtils.removeNFSFromSession();
		ExpedicaoUtils.removeCalculoFreteFromSession();
		return result;
	}

	public TypedFlatMap obtemDadosPopupModoConsulta(TypedFlatMap params) {
		Long idNotaFiscalServico = params.getLong("idNotaFiscalServico");

		/** Impostos(tributos) */
		List impostosServico = impostoServicoService.findNFServicoAdicionalValores(idNotaFiscalServico);
		ArrayList tributos = new ArrayList();
		for (Iterator it = impostosServico.iterator(); it.hasNext();) {
			Map impostoServicoMap = (Map) it.next();
			Map m = new HashMap();
			m.put("nome", ((DomainValue) impostoServicoMap.get("tpImposto")).getDescription().toString());
			m.put("valor", impostoServicoMap.get("vlImposto"));
			tributos.add(m);
		}

		/** Servicos Adicionais */
		List servicosAdicionais = servAdicionalDocServService.findNFServicoAdicionalValores(idNotaFiscalServico);
		Map servicoAdicionalMap = (Map) servicosAdicionais.get(0);

		TypedFlatMap result = new TypedFlatMap();
		result.put("tributos", tributos);
		result.put("totalTributos", servicoAdicionalMap.get("vlImposto"));
		result.put("valorTotal", servicoAdicionalMap.get("vlTotalDocServico"));
		HashMap map = new HashMap();
		map.put("dsServicoAdicional", servicoAdicionalMap.get("dsServicoAdicional"));
		map.put("valor", servicoAdicionalMap.get("vlTotalServicos"));
		result.put("servicosAdicionais", map);
		return result;
	}

	/**
	 * 1º Fase Calculo Nota Fiscal Servico.
	 * 
	 * @param params
	 */
	public void calculaNFServicoPrimeiraFase(TypedFlatMap params) {
		ExpedicaoUtils.removeNFSFromSession();
		ExpedicaoUtils.removeCalculoFreteFromSession();

		verificaMunicipioEmiteNFServicoAdicional(params);
		NotaFiscalServico notaFiscalServico = createNFInSessionPrimeiraFase(params);

		ExpedicaoUtils.setNFSInSession(notaFiscalServico);
	}

	/**
	 * 1º Fase: createNFInSession.
	 * - Adiciona dados em DoctoServico
	 * - Adiciona dados em NotaFiscalServico
	 * 
	 * @param parameters
	 * @return
	 */
	private NotaFiscalServico createNFInSessionPrimeiraFase(TypedFlatMap parameters) {
		NotaFiscalServico notaFiscalServico = (NotaFiscalServico) createDoctoServicoInSessionPrimeiraFase(parameters);
		Filial filial = new Filial();
		filial.setIdFilial(parameters.getLong("filial.idFilial"));
		notaFiscalServico.setFilial(filial);

		Municipio municipio = new Municipio();
		municipio.setIdMunicipio(parameters.getLong("municipio.idMunicipio"));
		notaFiscalServico.setMunicipio(municipio);

		notaFiscalServico.setDtInicial(parameters.getYearMonthDay("dtInicial"));
		notaFiscalServico.setDtFinal(parameters.getYearMonthDay("dtFinal"));
		notaFiscalServico.setDsSerie(null);
		notaFiscalServico.setTpSituacaoNf(new DomainValue(ConstantesExpedicao.DOCUMENTO_SERVICO_EMITIDO));
		notaFiscalServico.setPaisOrigem(SessionUtils.getPaisSessao());
		return notaFiscalServico;
	}

	/**
	 * 1º Fase: createDoctoServicoInSession.
	 * 
	 * @param parameters
	 * @return
	 */
	private DoctoServico createDoctoServicoInSessionPrimeiraFase(TypedFlatMap parameters) {
		/** ServAdicionalDocServ */
		ServAdicionalDocServ servicoAdicionalDoctoServico = createServAdicionalDocServInSessionPrimeiraFase(parameters);
		/** DoctoServico */
		DoctoServico doctoServico = new NotaFiscalServico();
		servicoAdicionalDoctoServico.setDoctoServico(doctoServico);
		/** ServicoAdicional */
		ServicoAdicional servicoAdicional = new ServicoAdicional();
		servicoAdicional.setIdServicoAdicional(parameters.getLong("servicoAdicional.idServicoAdicional"));
		servicoAdicional.setDsServicoAdicional(parameters.getVarcharI18n("servicoAdicional.dsServicoAdicional"));
		servicoAdicionalDoctoServico.setServicoAdicional(servicoAdicional);

		List<ServAdicionalDocServ> servicosAdicionaisDoctoServico = new ArrayList<ServAdicionalDocServ>(1);
		servicosAdicionaisDoctoServico.add(servicoAdicionalDoctoServico);
		doctoServico.setServAdicionalDocServs(servicosAdicionaisDoctoServico);

		/** Moeda */
		doctoServico.setMoeda(SessionUtils.getMoedaSessao());
		/** Cliente */
		Cliente cliente = clienteService.findByIdInitLazyProperties(parameters.getLong("clienteByIdClienteDestinatario.idCliente"), false);
		doctoServico.setClienteByIdClienteDestinatario(cliente);
		doctoServico.setClienteByIdClienteRemetente(cliente);

		/** InscricaoEstadual */
		Long idInscricaoEstadual = parameters.getLong("clienteByIdClienteDestinatario.idInscricaoEstadual");
		if (idInscricaoEstadual != null) {
			InscricaoEstadual inscricaoEstadual = new InscricaoEstadual();
			inscricaoEstadual.setIdInscricaoEstadual(idInscricaoEstadual);
			doctoServico.setInscricaoEstadualDestinatario(inscricaoEstadual);
			doctoServico.setInscricaoEstadualRemetente(inscricaoEstadual);
		}
		/** Servico */
		Servico servico = new Servico();
		servico.setIdServico(parameters.getLong("servico.idServico"));
		servico.setTpAbrangencia(new DomainValue(parameters.getString("servico.tpAbrangencia")));
		servico.setTpModal(new DomainValue(parameters.getString("servico.tpModal")));
		doctoServico.setServico(servico);

		/** Usuario */
		doctoServico.setUsuarioByIdUsuarioInclusao(SessionUtils.getUsuarioLogado());
		/** Filial */
		doctoServico.setFilialByIdFilialOrigem(SessionUtils.getFilialSessao());
		/** Divisao */
		Long idDivisaoCliente = parameters.getLong("divisaoCliente.idDivisaoCliente");
		if(idDivisaoCliente != null) {
			DivisaoCliente divisaoCliente = new DivisaoCliente();
			divisaoCliente.setIdDivisaoCliente(idDivisaoCliente);
			doctoServico.setDivisaoCliente(divisaoCliente);
		}
		/** Cotacao */
		Long idCotacao = parameters.getLong("cotacao.idCotacao");
		if(idCotacao != null) {
			Cotacao cotacao = new Cotacao();
			cotacao.setDoctoServico(doctoServico);
			cotacao.setIdCotacao(idCotacao);
			List<Cotacao> cotacoes = new ArrayList(1);
			cotacoes.add(cotacao);
			doctoServico.setCotacoes(cotacoes);
		}
		/** Observacoes DoctoServico */
		int z = 4;
		List<ObservacaoDoctoServico> observacoesDoctoServico = new ArrayList(z);
		for (int i = 0; i < z; i++) {
			ObservacaoDoctoServico observacaoDoctoServico = createObservacaoDoctoServicoInSessionPrimeiraFase(parameters, "" + i);
			if(observacaoDoctoServico != null) {
				observacaoDoctoServico.setDoctoServico(doctoServico);
				observacoesDoctoServico.add(observacaoDoctoServico);
			}
		}
		if(!observacoesDoctoServico.isEmpty()) {
			doctoServico.setObservacaoDoctoServicos(observacoesDoctoServico);
		}
		/** Dados Gerais */
		doctoServico.setVlTotalParcelas(null);
		doctoServico.setDhEmissao(JTDateTimeUtils.getDataHoraAtual());
		doctoServico.setDhInclusao(JTDateTimeUtils.getDataHoraAtual());
		doctoServico.setTpDocumentoServico(new DomainValue(ConstantesExpedicao.NOTA_FISCAL_SERVICO));
		doctoServico.setBlBloqueado(Boolean.FALSE);

		doctoServico.setNrCfop(null);
		doctoServico.setPsReal(parameters.getBigDecimal("servicoAdicional.psMercadoria"));
		doctoServico.setPsReferenciaCalculo(doctoServico.getPsReal());
		doctoServico.setDhAlteracao(null);
		doctoServico.setDhEntradaSetorEntrega(null);
		doctoServico.setTpCalculoPreco(new DomainValue(parameters.getString("tpCalculoPreco")));
		doctoServico.setBlPrioridadeCarregamento(Boolean.FALSE);
		doctoServico.setNrAidf(null);
		doctoServico.setPcAliquotaIcms(null);
		return doctoServico;
	}

	/**
	 * 1º Fase: createObservacaoDoctoServicoInSession.
	 * 
	 * @param parameters
	 * @param suffix
	 * @return
	 */
	private ObservacaoDoctoServico createObservacaoDoctoServicoInSessionPrimeiraFase(TypedFlatMap parameters, String suffix) {
		ObservacaoDoctoServico obs = null;
		if (!"".equals(parameters.getString("obs" + suffix))) {
			obs = new ObservacaoDoctoServico();
			obs.setDsObservacaoDoctoServico(parameters.getString("obs" + suffix));
			obs.setBlPrioridade(Boolean.FALSE);
		}
		return obs;
	}

	/**
	 * 1º Fase: createServAdicionalDocServInSession.
	 * 
	 * @param parameters
	 * @return
	 */
	private ServAdicionalDocServ createServAdicionalDocServInSessionPrimeiraFase(TypedFlatMap parameters) {
		ServAdicionalDocServ servAdicionalDocServ = new ServAdicionalDocServ();
		servAdicionalDocServ.setCdParcelaPreco(parameters.getString("servicoAdicional.parcelaPreco.cdParcelaPreco"));
		servAdicionalDocServ.setQtDias(parameters.getInteger("servicoAdicional.qtDias"));
		servAdicionalDocServ.setQtSegurancasAdicionais(parameters.getInteger("servicoAdicional.qtSegurancasAdicionais"));
		servAdicionalDocServ.setQtColetas(parameters.getInteger("servicoAdicional.qtColetas"));
		servAdicionalDocServ.setQtPaletes(parameters.getInteger("servicoAdicional.qtPaletes"));
		servAdicionalDocServ.setNrKmRodado(parameters.getInteger("servicoAdicional.nrKmRodado"));
		servAdicionalDocServ.setVlMercadoria(parameters.getBigDecimal("servicoAdicional.vlMercadoria"));
		servAdicionalDocServ.setQtCheques(parameters.getInteger("servicoAdicional.qtCheques"));
		servAdicionalDocServ.setDtPrimeiroCheque(parameters.getYearMonthDay("servicoAdicional.dtPrimeiroCheque"));
		return servAdicionalDocServ;
	}

	/**
	 * Verifica se Municipio Emite NFS para o Servico Adicional Informado.
	 * 
	 * @param params
	 */
	public void verificaMunicipioEmiteNFServicoAdicional(TypedFlatMap params) {
		Long idServicoAdicional = params.getLong("servicoAdicional.idServicoAdicional");
		Long idMunicipioSede = params.getLong("filial.pessoa.endereco.municipio.idMunicipio");
		Long idMunicipioServico = params.getLong("municipio.idMunicipio");
		getNotaFiscalServicoService().validateMunicipioEmiteNFServicoAdicional(
			idServicoAdicional,
			idMunicipioSede,
			idMunicipioServico);
	}

	/**
	 * Reemissao Nota Fiscal de Servico.
	 * 
	 * @param params
	 * @return
	 */
	public TypedFlatMap reemiteNF(TypedFlatMap params) {
		Long idNotaFiscalServico = params.getLong("idNotaFiscalServico");
		Long idFilial = SessionUtils.getFilialSessao().getIdFilial();
		Long nrProximoFormulario = params.getLong("numFormulario");
		String ipUsuario = params.getString("userip");

		NotaFiscalServico notaFiscalServico = this.emitirNFSService.executeReemitirNFS(
			idNotaFiscalServico
			,idFilial
			,nrProximoFormulario
			,NetworkUtils.getMacAddress(ipUsuario)
		);

		String nfs = gerarNFSService.generateNFS(notaFiscalServico.getIdDoctoServico());
		TypedFlatMap result = new TypedFlatMap();
		result.put("dhEmissao", notaFiscalServico.getDhEmissao());
		result.put("nfs", nfs);
		return result;
	}

	/**
	 * Cancelamento Nota Fiscal de Servico.
	 * 
	 * @param params
	 * @return
	 */
	public TypedFlatMap cancelaNF(TypedFlatMap params) {
		Long idNotaFiscalServico = params.getLong("idNotaFiscalServico");
		NotaFiscalServico notaFiscalServico = getNotaFiscalServicoService().removeCancelaNF(idNotaFiscalServico);

		TypedFlatMap result = new TypedFlatMap();
		result.put("tpSituacaoNf", notaFiscalServico.getTpSituacaoNf().getValue());
		String tpSituacaoLabelNf = domainValueService.findDomainValueDescription("DM_STATUS_NOTA_FISCAL", notaFiscalServico.getTpSituacaoNf().getValue());
		result.put("tpSituacaoNfLabel", tpSituacaoLabelNf);
		return result;
	}

	/**
	 * Verifica se Filial pode Emitir Nota Fiscal de Servico.
	 * 
	 * @param idFilialEmissao
	 */
	public void verificaPossibilidadeEmissaoNotaFiscal(Long idFilialEmissao) {
		getNotaFiscalServicoService().findPossibilidadeEmissaoNotaFiscal(idFilialEmissao);
	}

	/**
	 * Chamada Default para buscar dados afim de evitar Multiplas chamadas.
	 * @author Andre Valadas
	 * 
	 * @return
	 */
	public TypedFlatMap findDefaultParameters() {
		TypedFlatMap result = new TypedFlatMap();
		Usuario usuario = SessionUtils.getUsuarioLogado();
		result.put("idUsuarioLogado", usuario.getIdUsuario());
		result.put("nmPessoaUsuarioLogado", usuario.getNmUsuario());
		result.put("nrIdentificacaoUsuarioLogado", usuario.getNrMatricula());

		Filial filial = SessionUtils.getFilialSessao();
		result.put("idFilialUsuarioLogado", filial.getIdFilial());
		result.put("sgFilialUsuarioLogado", filial.getSgFilial());
		result.put("nmFantasiaFilialUsuarioLogado", filial.getPessoa().getNmFantasia());

		result.put("idMunicipioFilialUsuarioLogado", SessionUtils.getFilialSessao().getPessoa().getEnderecoPessoa().getMunicipio().getIdMunicipio());

		Long idServicoPadrao = LongUtils.getLong(configuracoesFacade.getValorParametro("SERVICO_PADRAO"));
		Servico servico = servicoService.findById(idServicoPadrao);
		result.put("idServico", servico.getIdServico());
		result.put("dsServico", servico.getDsServico());
		result.put("tpAbrangencia", servico.getTpAbrangencia().getValue());
		result.put("tpModal", servico.getTpModal().getValue());
		return result;
	}

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		getNotaFiscalServicoService().removeByIds(ids);
	}

	public Map findById(java.lang.Long id) {
		Map result = getNotaFiscalServicoService().findNotaFiscalServicoById(id);

		Map tpSituacao = (Map) result.get("tpSituacaoNf");
		result.put("tpSituacaoNf", tpSituacao.get("value"));
		result.put("tpSituacaoNfLabel", tpSituacao.get("description"));
		result.put("nmPessoaUsuarioLogado", result.get("nmPessoaUsuario"));

		Filial filial = SessionUtils.getFilialSessao();
		result.put("idFilialUsuarioLogado", filial.getIdFilial());
		return result;
	}

	public List findFilialEmissaoLookup(TypedFlatMap criteria) {
		return filialService.findLookup(criteria);
	}

	public List findMunicipioLookup(TypedFlatMap criteria) {
		return municipioService.findLookup(criteria);
	}

	public List findServicos(TypedFlatMap criteria) {
		return servicoService.find(criteria);
	}

	public List findDivisaoCombo(TypedFlatMap criteria) {
		List retorno = null;
		if(ClienteUtils.isParametroClienteEspecial(criteria.getString("cliente.tpCliente"))) {
			DivisaoClienteParam param = new DivisaoClienteParam();
			param.setIdCliente(criteria.getLong("cliente.idCliente"));
			param.setTpSituacao(ConstantesVendas.SITUACAO_ATIVO);
			retorno = divisaoClienteService.findMapByIdClienteMatriz(param);
		}
		return retorno;
	}

	public List findDestinatario(TypedFlatMap criteria) {
		Long idCliente = criteria.getLong("idCliente");
		String nrIdentificacao = criteria.getString("pessoa.nrIdentificacao");

		List<Map> result = null;
		if(idCliente != null){
			result = clienteService.findLookupClienteEndereco(idCliente);
		} else {
			result = clienteService.findClienteByNrIdentificacao(nrIdentificacao);
		}
		return result;
	}

	public List findInscricaoEstadual(Long idPessoa) {
		return inscricaoEstadualService.findByPessoa(idPessoa);
	}

	public List findCotacao(TypedFlatMap params) {
		Long idClienteDestinatario = params.getLong("clienteByIdClienteSolicitou.idCliente");
		List cotacoes = cotacaoService.findCotacoes(idClienteDestinatario, ExpedicaoUtils.getTpDocumentoInSession());
		for (Iterator iter = cotacoes.iterator(); iter.hasNext();) {
			Map map = (Map) iter.next();
			map.put("nrCotacao", map.remove("sgFilial") + "-" + map.get("nrCotacao"));
		}
		return cotacoes;
	}

	public List findServicosAdicionais() {
		return parcelaPrecoService.findServicosAdicionaisParcela();
	}

	/**
	 * getRowCountNFS.
	 * @author Andre Valadas
	 * 
	 * @param criteria
	 * @return
	 */
	public Integer getRowCountNFS(TypedFlatMap criteria) {
		return getNotaFiscalServicoService().getRowCountNFS(criteria);
	}

	/**
	 * findPaginatedNFS.
	 * @author Andre Valadas
	 * 
	 * @param criteria
	 * @return
	 */
	public ResultSetPage findPaginatedNFS(TypedFlatMap criteria) {
		return getNotaFiscalServicoService().findPaginatedNFS(criteria);
	}


	public void setDocumentoServicoFacade(DocumentoServicoFacade documentoServicoFacade) {
		this.documentoServicoFacade = documentoServicoFacade;
	}
	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}
	public void setNotaFiscalServicoService(NotaFiscalServicoService notaFiscalServicoService) {
		this.defaultService = notaFiscalServicoService;
	}
	private NotaFiscalServicoService getNotaFiscalServicoService() {
		return (NotaFiscalServicoService) this.defaultService;
	}
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}
	public void setCotacaoService(CotacaoService cotacaoService) {
		this.cotacaoService = cotacaoService;
	}
	public void setDivisaoClienteService(DivisaoClienteService divisaoClienteService) {
		this.divisaoClienteService = divisaoClienteService;
	}
	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public void setImpostoServicoService(ImpostoServicoService impostoServicoService) {
		this.impostoServicoService = impostoServicoService;
	}
	public void setInscricaoEstadualService(InscricaoEstadualService inscricaoEstadualService) {
		this.inscricaoEstadualService = inscricaoEstadualService;
	}
	public void setMunicipioService(MunicipioService municipioService) {
		this.municipioService = municipioService;
	}
	public void setParcelaPrecoService(ParcelaPrecoService parcelaPrecoService) {
		this.parcelaPrecoService = parcelaPrecoService;
	}
	public void setServAdicionalDocServService(ServAdicionalDocServService servAdicionalDocServService) {
		this.servAdicionalDocServService = servAdicionalDocServService;
	}
	public void setServicoService(ServicoService servicoService) {
		this.servicoService = servicoService;
	}
	public void setGerarNFSService(GerarNFSService gerarNFSService) {
		this.gerarNFSService = gerarNFSService;
	}
	public void setEmitirNFSService(EmitirNFSService emitirNFSService) {
		this.emitirNFSService = emitirNFSService;
	}

	public void setAliquotaIssMunicipioServService(AliquotaIssMunicipioServService aliquotaIssMunicipioServService) {
		this.aliquotaIssMunicipioServService = aliquotaIssMunicipioServService;
	}

}