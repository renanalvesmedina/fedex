package com.mercurio.lms.expedicao.action;

import java.io.Serializable;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.MapUtils;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.contratacaoveiculos.model.service.ProprietarioService;
import com.mercurio.lms.entrega.model.service.CancelarManifestoService;
import com.mercurio.lms.expedicao.model.service.ManifestoViagemNacionalService;
import com.mercurio.lms.expedicao.util.ConhecimentoUtils;
import com.mercurio.lms.expedicao.util.ExpedicaoUtils;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.JTFormatUtils;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.expedicao.manterManifestosViagemAction"
 */
public class ManterManifestosViagemAction extends CrudAction {
	private FilialService filialService;
	private ProprietarioService proprietarioService;
	private CancelarManifestoService cancelarManifestoService;
	private ConfiguracoesFacade configuracoesFacade;

	public TypedFlatMap findDadosSessao() {
		TypedFlatMap map = new TypedFlatMap();
		Filial filialSessao = SessionUtils.getFilialSessao();
		map.put("filial.idFilial", filialSessao.getIdFilial());
		map.put("filial.sgFilial", filialSessao.getSgFilial());
		map.put("pessoa.nmFantasia", filialSessao.getPessoa().getNmFantasia());
		map.put("dtInicial", JTFormatUtils.format(JTDateTimeUtils.getDataAtual().minusDays(15)));
		map.put("dtFinal", JTFormatUtils.format(JTDateTimeUtils.getDataAtual()));
		return map;
	}

	public List findFilial(TypedFlatMap criteria) {
		return filialService.findLookupBySgFilial(criteria.getString("sgFilial"), criteria.getString("tpAcesso"));
	}

	public ResultSetPage findPaginated(TypedFlatMap criteria) {
		ResultSetPage rs = getManifestoViagemNacionalService().findPaginatedManifestoViagem(criteria);

		List<Map<String, Object>> data = rs.getList();
		for(Map<String, Object> row : data) {
			row.put("nrManifesto", row.get("nrManifestoOrigem"));
			row.put("nmManifestoOrigem", ExpedicaoUtils.formatManifestoViagemNacional(MapUtils.getString(row, "sgFilialOrigem"), MapUtils.getInteger(row, "nrManifestoOrigem"), 8));
			row.put("filialDestino", row.get("sgFilialDestino")+ " - " + row.get("nmFantasia"));
			//TODO: Favor não retirar >> Inclusão 13/09/2006 dessas propriedades pois não estava sendo populado o retorno da filial origem
			Map<String, Object> filial = new HashMap<String, Object>(2);
			filial.put("sgFilial", row.get("sgFilialOrigem"));
			filial.put("idFilial", row.get("idFilialOrigem"));
			row.put("filial", filial);
			Map<String, Object> pessoa = new HashMap<String, Object>(1);
			pessoa.put("nmFantasia", row.get("nmFantasiaFilialOrigem"));
			row.put("pessoa", pessoa);

			filial.put("pessoa", pessoa);

			Map<String, Object> manifesto = new HashMap<String, Object>(1);
			manifesto.put("filialByIdFilialOrigem", filial);
			row.put("manifesto", manifesto);
		}
		return rs;
	}

	public List findPaginatedCadManifestoViagem(TypedFlatMap criteria) {
		return getManifestoViagemNacionalService().findPaginatedCadManifestoViagem(criteria);
	}

	public ResultSetPage findPaginatedConhecimentoManifestoViagem(TypedFlatMap criteria) {
		ResultSetPage rs = getManifestoViagemNacionalService().findPaginatedConhecimentoManifestoViagem(criteria);
		List<TypedFlatMap> lista = rs.getList();
		for(TypedFlatMap row : lista) {
			row.put("nrCtrc", ConhecimentoUtils.formatConhecimento(row.getString("sgFilialOrigem"), row.getLong("nrConhecimento"), row.getInteger("dvConhecimento"), 7));
		}
		return rs;
	}

	public Integer getRowCount(TypedFlatMap criteria) {
		return getManifestoViagemNacionalService().getRowCountManifestoViagem(criteria);
	}

	public Integer getRowCountConhecimentoManifestoViagem(TypedFlatMap criteria) {
		return getManifestoViagemNacionalService().getRowCountConhecimentoManifestoViagem(criteria);
	}

	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		getManifestoViagemNacionalService().removeByIds(ids);
	}

	public Serializable findById(java.lang.Long id) {
		return getManifestoViagemNacionalService().findByIdManifestoViagem(id);
	}

	public List findLookupProprietario(TypedFlatMap criteria) {
		return proprietarioService.findLookup(criteria);
	}

	/**
	 * Cancelamento de manifestos de Viagem.
	 * @autor Andre Valadas.
	 * @param criteria
	 * @return status do Reaproveitamento dos Dados
	 */
	public TypedFlatMap cancelManifestoViagem(TypedFlatMap criteria) {
		Long idManifestoViagemNacional = criteria.getLong("idManifestoViagemNacional");
		Boolean blReaproveitarDados = criteria.getBoolean("reaproveitarDados");
		Boolean blForceCancel = criteria.getBoolean("blForceCancel");

		/** Validacoes do Form */
		if (idManifestoViagemNacional == null || idManifestoViagemNacional.longValue() < 1) {
			throw new BusinessException("requiredField", new Object[]{configuracoesFacade.getMensagem("cancelamentoManifesto")});
		}
		if (blReaproveitarDados == null) {
			throw new BusinessException("requiredField", new Object[]{configuracoesFacade.getMensagem("reaproveitarDados")});
		}
		return cancelarManifestoService.executeCancelarManifestoViagem(idManifestoViagemNacional, blReaproveitarDados, blForceCancel);
	}

	/**
	 * Verifica se existe Recido de Reembolso para o Manifesto passado.
	 * @author Andre Valadas.
	 * @param criteria
	 * @return
	 */
	public TypedFlatMap existeRecibosReembolso(TypedFlatMap criteria) {
		Long idManifestoViagemNacional = criteria.getLong("idManifestoViagemNacional");

		TypedFlatMap data = new TypedFlatMap();
		data.put("blExisteReembolso", getManifestoViagemNacionalService().validateManifestoReembolso(idManifestoViagemNacional, Boolean.TRUE));
		return data;
	}

	private ManifestoViagemNacionalService getManifestoViagemNacionalService() {
		return (ManifestoViagemNacionalService)this.defaultService;
	}
	public void setManifestoViagemNacionalService(ManifestoViagemNacionalService manifestoViagemNacionalService) {
		this.defaultService = manifestoViagemNacionalService;
	}
	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public void setProprietarioService(ProprietarioService proprietarioService) {
		this.proprietarioService = proprietarioService;
	}
	public void setCancelarManifestoService(CancelarManifestoService cancelarManifestoService) {
		this.cancelarManifestoService = cancelarManifestoService;
	}
}