package com.mercurio.lms.expedicao.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.expedicao.model.AduanaCtoInt;
import com.mercurio.lms.expedicao.model.CtoInternacional;
import com.mercurio.lms.expedicao.model.service.AduanaCtoIntService;
import com.mercurio.lms.expedicao.util.CtoInternacionalUtils;
import com.mercurio.lms.municipios.model.PontoParada;
import com.mercurio.lms.municipios.model.service.PontoParadaService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.expedicao.manterCRTAduanasAction"
 */
public class ManterCRTAduanasAction extends CrudAction {
	private PontoParadaService pontoParadaService;
	private AduanaCtoIntService aduanaCtoIntService;

	public List findComboPontoParada(TypedFlatMap criteria){
		return pontoParadaService.findLookup(criteria);
	}

	public void storeInSession(TypedFlatMap ids){
		CtoInternacional ctoInternacional = getCtoInternacionalInSession();

		List aduanasCtoInt = ctoInternacional.getAduanasCtoInternacional();
		
		if(aduanasCtoInt == null) aduanasCtoInt = new ArrayList();
		else aduanasCtoInt.clear();

		List aduanasCtoInternacional = ids.getList("aduanasCtoInternacional");

		if(aduanasCtoInternacional != null){
			for(Iterator it = aduanasCtoInternacional.iterator(); it.hasNext();){
				TypedFlatMap aduanaCtoInt = (TypedFlatMap) it.next();
	
				TypedFlatMap query = new TypedFlatMap();
				query.put("nmPontoParada", aduanaCtoInt.getVarcharI18n("dsPontoParada"));
				List result = findComboPontoParada(query);
				
				PontoParada pontoParada = (PontoParada) result.get(0);

				AduanaCtoInt aduanaCtoIntAux = new AduanaCtoInt();
				aduanaCtoIntAux.setPontoParada(pontoParada);
				
				aduanasCtoInt.add(aduanaCtoIntAux);
			}
		}

		ctoInternacional.setAduanasCtoInternacional(aduanasCtoInt);
		
		CtoInternacionalUtils.setCtoInternacionalInSession(ctoInternacional);
	}

	public Serializable findPontosParadaCombo(){
		CtoInternacional ctoInternacional = getCtoInternacionalInSession();

		List aduanas = ctoInternacional.getAduanasCtoInternacional();
		if(aduanas == null) aduanas = new ArrayList();

		List retorno = new ArrayList();
		for (Iterator iter = aduanas.iterator(); iter.hasNext();) {
			AduanaCtoInt aduanaCtoInt = (AduanaCtoInt) iter.next();
			TypedFlatMap map = new TypedFlatMap();
			map.put("idPontoParada", aduanaCtoInt.getPontoParada().getIdPontoParada());
			map.put("nmPontoParada", aduanaCtoInt.getPontoParada().getNmPontoParada());
			retorno.add(map);
		}
		TypedFlatMap mapRetorno = new TypedFlatMap();
		mapRetorno.put("aduanasCtoInternacional", retorno);
		return mapRetorno;
	}

	private CtoInternacional getCtoInternacionalInSession(){
		CtoInternacional ctoInternacional = CtoInternacionalUtils.getCtoInternacionalInSession();
		
		if (ctoInternacional.getIdDoctoServico() != null && ctoInternacional.getAduanasCtoInternacional() == null){
			List aduanas = aduanaCtoIntService.findByIdCtoInternacional(ctoInternacional.getIdDoctoServico());
			ctoInternacional.setAduanasCtoInternacional(aduanas);
		}

		return ctoInternacional;
	}

	//Setters
	public void setPontoParadaService(PontoParadaService pontoParadaService) {
		this.pontoParadaService = pontoParadaService;
	}

	public void setAduanaCtoIntService(AduanaCtoIntService aduanaCtoIntService) {
		this.aduanaCtoIntService = aduanaCtoIntService;
	}
	
	
}