package com.mercurio.lms.expedicao.action;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.FindDefinition;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailAction;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.expedicao.model.Awb;
import com.mercurio.lms.expedicao.model.Conhecimento;
import com.mercurio.lms.expedicao.model.CtoInternacional;
import com.mercurio.lms.expedicao.model.Dimensao;
import com.mercurio.lms.expedicao.model.service.DimensaoService;
import com.mercurio.lms.expedicao.util.AwbUtils;
import com.mercurio.lms.expedicao.util.ConhecimentoUtils;
import com.mercurio.lms.expedicao.util.ConstantesExpedicao;
import com.mercurio.lms.expedicao.util.CtoInternacionalUtils;
import com.mercurio.lms.expedicao.util.ExpedicaoUtils;
import com.mercurio.lms.util.CompareUtils;
import com.mercurio.lms.util.IntegerUtils;
import com.mercurio.lms.vendas.model.Cotacao;
import com.mercurio.lms.vendas.util.ConstantesVendas;
import com.mercurio.lms.vendas.util.VendasUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.expedicao.digitarDimensoesAction"
 */

public class DigitarDimensoesAction extends CrudAction {
	private static int cont = 0;
	private DimensaoService dimensaoService;
	private ConfiguracoesFacade configuracoesFacade;

	public void setDimensaoService(DimensaoService dimensaoService) {
		this.dimensaoService = dimensaoService;
	}

	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}

	public void removeById(java.lang.Long id) {
		List dimensoes = this.getDimensoesInSession();
		removeDimensao(dimensoes, id);
		setDimensoesInSession(dimensoes);
	}

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		List dimensoes = this.getDimensoesInSession();
		if(ids != null) {
			for(Iterator iter = ids.iterator(); iter.hasNext();) {
				Long id = (Long) iter.next();
				removeDimensao(dimensoes, id);
			}
			setDimensoesInSession(dimensoes);
		}
	}

	private void removeDimensao(List dimensoes, Long id) {
		String tpDocumentoServico = ExpedicaoUtils.getTpDocumentoInSession();
		for(Iterator iter = dimensoes.iterator(); iter.hasNext();) {
			Dimensao dimensao = (Dimensao) iter.next();
			if(CompareUtils.eq(id, dimensao.getIdDimensao())) {
				if(ConstantesExpedicao.AIRWAY_BILL.equals(tpDocumentoServico)) {
					dimensao.setAwb(null);
				} else {
					iter.remove();
				}
			}
		}
	}

	public Dimensao findById(java.lang.Long id) {
		List dimensoes = this.getDimensoesInSession();
		for(Iterator iter = dimensoes.iterator(); iter.hasNext();) {
			Dimensao dimensao = (Dimensao) iter.next();
			if(CompareUtils.eq(dimensao.getIdDimensao(), id)) {
				return dimensao;
			}
		}
		return null;
	}

	public Integer getRowCount(Map criteria) {
		List dimensoes = this.getDimensoesInSession();
		return Integer.valueOf(dimensoes.size());
	}

	public ResultSetPage findPaginated(Map criteria) {
		String tpDocumentoServico = ExpedicaoUtils.getTpDocumentoInSession();
		String idDocumento = (String)criteria.get("idDocumento");
		Comparator comparator = new Comparator() {
			public int compare(Object o1, Object o2) {
				return 0;
			}
		};

		if(ConstantesVendas.COTACAO.equals(tpDocumentoServico)) {
			if(StringUtils.isNotBlank(idDocumento)) {
				return dimensaoService.findPaginatedByCotacaoSession();
			}
		} else if(ConstantesExpedicao.CONHECIMENTO_INTERNACIONAL.equals(tpDocumentoServico)) {
			if(StringUtils.isNotBlank(idDocumento)) {
				return dimensaoService.findPaginatedByIdCtoInternacional(Long.valueOf(idDocumento), criteria);
			}
		} else if(ConstantesExpedicao.AIRWAY_BILL.equals(tpDocumentoServico)) {
			List<Dimensao> dimensoes = this.getDimensoesInSession();
			List<Dimensao> result = new ArrayList<Dimensao>();
			for (Dimensao dimensao : dimensoes) {
				if(dimensao.getAwb() != null) {
					Awb awb = new Awb();
					awb.setIdAwb(dimensao.getAwb().getIdAwb());
					dimensao.setAwb(awb);
					result.add(dimensao);
				}
			}
			FindDefinition findDef = FindDefinition.createFindDefinition(criteria);
			return MasterDetailAction.getResultSetPage(result, findDef.getCurrentPage(), findDef.getPageSize(), comparator);
		}

		List dimensoes = this.getDimensoesInSession();
		if(!dimensoes.isEmpty()) {
			FindDefinition findDef = FindDefinition.createFindDefinition(criteria);
			return MasterDetailAction.getResultSetPage(dimensoes, findDef.getCurrentPage(), findDef.getPageSize(), comparator);
		}
		return ResultSetPage.EMPTY_RESULTSET;
	}

	public void storeInSession(Dimensao dimensao) {
		this.validateDimensao(dimensao);

		List dimensoes = getDimensoesInSession();
		if(dimensao.getIdDimensao() == null) {
			String tpDocumentoServico = ExpedicaoUtils.getTpDocumentoInSession();
			if(ConstantesExpedicao.AIRWAY_BILL.equals(tpDocumentoServico)) {
				Awb awb = AwbUtils.getAwbInSession();
				dimensao.setAwb(awb);
			}
			dimensao.setIdDimensao(Long.valueOf(--cont));
			dimensoes.add(dimensao);
		} else {
			Dimensao dimensaoAux = findById(dimensao.getIdDimensao());
			if(dimensaoAux != null) {
				dimensaoAux.setNrAltura(dimensao.getNrAltura());
				dimensaoAux.setNrComprimento(dimensao.getNrComprimento());
				dimensaoAux.setNrLargura(dimensao.getNrLargura());
				dimensaoAux.setNrQuantidade(dimensao.getNrQuantidade());	
			}
		}
		setDimensoesInSession(dimensoes);
	}

	private void validateDimensao(Dimensao dimensao) {
		if(!IntegerUtils.hasValue(dimensao.getNrAltura())) {
			throw new BusinessException("LMS-04153", new Object[]{configuracoesFacade.getMensagem("altura")});
		}
		if(!IntegerUtils.hasValue(dimensao.getNrComprimento())) {
			throw new BusinessException("LMS-04153", new Object[]{configuracoesFacade.getMensagem("comprimento")});
		}
		if(!IntegerUtils.hasValue(dimensao.getNrLargura())) {
			throw new BusinessException("LMS-04153", new Object[]{configuracoesFacade.getMensagem("largura")});
		}
		if(!IntegerUtils.hasValue(dimensao.getNrQuantidade())) {
			throw new BusinessException("LMS-04153", new Object[]{configuracoesFacade.getMensagem("quantidade")});
		}
	}

	private List getDimensoesInSession() {
		List<Dimensao> dimensoes = null; 
		String tpDocumentoServico = ExpedicaoUtils.getTpDocumentoInSession();
		if(isConhecimentoNacional(tpDocumentoServico)) {
			dimensoes = ConhecimentoUtils.getConhecimentoInSession().getDimensoes();
		} else if(ConstantesExpedicao.CONHECIMENTO_INTERNACIONAL.equals(tpDocumentoServico)) {
			dimensoes = CtoInternacionalUtils.getCtoInternacionalInSession().getDimensoes();
		} else if(ConstantesExpedicao.AIRWAY_BILL.equals(tpDocumentoServico)) {
			dimensoes = AwbUtils.getAwbInSession().getDimensoes();
		} else if(ConstantesVendas.COTACAO.equals(tpDocumentoServico)) {
			dimensoes = VendasUtils.getCotacaoInSession().getDimensoes();
		}

		if(dimensoes == null) {
			dimensoes = new ArrayList<Dimensao>();
		}
		return dimensoes;
	}

	private void setDimensoesInSession(List dimensoes) {
		String tpDocumentoServico = ExpedicaoUtils.getTpDocumentoInSession();

		if(isConhecimentoNacional(tpDocumentoServico)) {
			Conhecimento conhecimento = ConhecimentoUtils.getConhecimentoInSession();
			conhecimento.setDimensoes(dimensoes);
			ConhecimentoUtils.setConhecimentoInSession(conhecimento);
		} else if(ConstantesExpedicao.CONHECIMENTO_INTERNACIONAL.equals(tpDocumentoServico)) {
			CtoInternacional ctoInternacional = CtoInternacionalUtils.getCtoInternacionalInSession();
			ctoInternacional.setDimensoes(dimensoes);
			CtoInternacionalUtils.setCtoInternacionalInSession(ctoInternacional);
		} else if(ConstantesExpedicao.AIRWAY_BILL.equals(tpDocumentoServico)) {
			Awb awb = AwbUtils.getAwbInSession();
			awb.setDimensoes(dimensoes);
			AwbUtils.setAwbInSession(awb);
		} else if(ConstantesVendas.COTACAO.equals(tpDocumentoServico)) {
			Cotacao cotacao = VendasUtils.getCotacaoInSession();
			cotacao.setDimensoes(dimensoes);
			VendasUtils.setCotacaoInSession(cotacao);
		}
	}

	private Boolean isConhecimentoNacional(String tpDocumentoServico) {
		 return ConstantesExpedicao.CONHECIMENTO_NACIONAL.equals(tpDocumentoServico) ||
				ConstantesExpedicao.NOTA_FISCAL_TRANSPORTE.equals(tpDocumentoServico);
	}
}
