package com.mercurio.lms.expedicao.action;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.report.ReportExecutionManager;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.Manifesto;
import com.mercurio.lms.carregamento.model.service.ManifestoService;
import com.mercurio.lms.configuracoes.model.ConteudoParametroFilial;
import com.mercurio.lms.configuracoes.model.service.ConteudoParametroFilialService;
import com.mercurio.lms.entrega.ConstantesEntrega;
import com.mercurio.lms.expedicao.model.service.ManifestoViagemNacionalService;
import com.mercurio.lms.expedicao.report.EmitirMVNParaMDFeService;
import com.mercurio.lms.expedicao.report.EmitirMVNService;
import com.mercurio.lms.expedicao.util.ConstantesExpedicao;
import com.mercurio.lms.fretecarreteiroviagem.action.ManterRecibosAction;
import com.mercurio.lms.fretecarreteiroviagem.model.ReciboFreteCarreteiro;
import com.mercurio.lms.fretecarreteiroviagem.model.service.ReciboFreteCarreteiroService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.session.SessionUtils;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Generated by: ADSM ActionGenerator
 * <p>
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 *
 * @spring.bean id="lms.expedicao.emitirManifestoViagemAction"
 */
public class EmitirManifestoViagemAction extends CrudAction {

	public static final String ID_MANIFESTO_VIAGEM_NACIONAL = "idManifestoViagemNacional";

	private ManterRecibosAction manterRecibosAction;
	private ManifestoService manifestoService;
	private EmitirMVNService emitirMVNService;
	private ManifestoViagemNacionalService manifestoViagemNacionalService;
	private ConteudoParametroFilialService conteudoParametroFilialService;
	private ReportExecutionManager reportExecutionManager;
	private EmitirMVNParaMDFeService emitirMVNParaMDFeService;
	private ReciboFreteCarreteiroService reciboFreteCarreteiroService;

	/**
	 * Dados Default ao Carregar a Pagina.
	 *
	 * @return
	 * @author Andre Valadas.
	 */
	public TypedFlatMap findDefaultParameters() {
		TypedFlatMap data = new TypedFlatMap();
		Filial filial = SessionUtils.getFilialSessao();
		data.put("idFilial", filial.getIdFilial());
		data.put("sgFilial", filial.getSgFilial());
		data.put("nmFilial", filial.getPessoa().getNmFantasia());
		return data;
	}

	/**
	 * ComboBox para emissao do Manifesto.
	 *
	 * @return
	 * @author Andre Valadas.
	 */
	public List findComboPreManifestoInit() {
		TypedFlatMap criteria = new TypedFlatMap();
		criteria.put("idFilial", SessionUtils.getFilialSessao().getIdFilial());
		criteria.put("tpManifesto", ConstantesExpedicao.TP_MANIFESTO_VIAGEM);
		criteria.put("tpStatusManifesto", ConstantesEntrega.STATUS_CARREGAMENTO_CONCLUIDO);
		criteria.put("tpEventoControleCarga", ConstantesExpedicao.TP_EVENTO_CONTROLE_CARGA_FIM_CARREGAMENTO);
		criteria.put("tpAbrangencia", ConstantesExpedicao.ABRANGENCIA_NACIONAL);

		List<TypedFlatMap> result = new ArrayList<TypedFlatMap>();
		List<Manifesto> manifestos = manifestoService.findComboPreManifestoInit(criteria);

		for (Manifesto manifesto : manifestos) {
			TypedFlatMap data = new TypedFlatMap();
			data.put("idManifesto", manifesto.getIdManifesto());
			data.put("nrPreManifesto", FormatUtils.formatDecimal("00000000", manifesto.getNrPreManifesto()) + " " + manifesto.getFilialByIdFilialDestino().getSgFilial());
			data.put("tpModal", manifesto.getTpModal());
			data.put("filialByIdFilialDestino.idFilial", manifesto.getFilialByIdFilialDestino().getIdFilial());
			data.put("filialByIdFilialDestino.sgFilial", manifesto.getFilialByIdFilialDestino().getSgFilial());
			data.put("filialByIdFilialDestino.pessoa.nmFantasia", manifesto.getFilialByIdFilialDestino().getPessoa().getNmFantasia());
			result.add(data);
		}
		return result;
	}

	/**
	 * Rotida de Emissao do Manifesto de Viagem Nacional.
	 *
	 * @param criteria
	 * @return
	 * @author Andre Valadas.
	 */
	public TypedFlatMap emitirManifestoViagemNacional(TypedFlatMap criteria) throws Exception {
		Long idManifesto = criteria.getLong("manifesto.idManifesto");
		String observacao = criteria.getString("observacao");

		TypedFlatMap data = new TypedFlatMap();

		if (emitirManifestoParaMDFe()) {
			emitirMVNService.executeEmitirMVNParaMDFe(idManifesto, observacao);
			Map<String, Object> parameters = new HashMap<String, Object>();
			parameters.put(ID_MANIFESTO_VIAGEM_NACIONAL, idManifesto);
			String reportFileMVNParaMDFe = this.reportExecutionManager.generateReportLocator(emitirMVNParaMDFeService, parameters);
			data.put("reportFileMVNParaMDFe", reportFileMVNParaMDFe);
		}

		/** Carrega IDs dos recibos a emitir */
		List<ReciboFreteCarreteiro> recibosFreteCarreteiro = reciboFreteCarreteiroService.findReciboFreteCarreteiroByIdManifesto(idManifesto);

		List resultRecibos = new ArrayList(recibosFreteCarreteiro.size());
		for (ReciboFreteCarreteiro carreteiro : recibosFreteCarreteiro) {
			TypedFlatMap mapRelatorio = new TypedFlatMap();
			mapRelatorio.put("idReciboFreteCarreteiro", carreteiro.getIdReciboFreteCarreteiro());
			resultRecibos.add(manterRecibosAction.execute(mapRelatorio));
		}
		data.put("dadosRelatorio", resultRecibos);

		data.put("blExisteBoleto", manifestoViagemNacionalService.validateManifestoBoleto(idManifesto));
		data.put("manifesto.idManifesto", idManifesto);
		return data;
	}

	/**
	 * Verifica se filial possui MDF-e implantado ou não.
	 *
	 * @return
	 */
	private boolean emitirManifestoParaMDFe() {
		ConteudoParametroFilial conteudoParametroFilial = conteudoParametroFilialService.findConteudoParametroFilial(SessionUtils.getFilialSessao()
				.getIdFilial(), "INDICADOR_MDFE", "S");
		return conteudoParametroFilial != null;
	}

	/**
	 * Rotina de Reemissao do Manifesto de Viagem Nacional.
	 *
	 * @param criteria
	 * @return
	 * @throws Exception
	 * @author Andre Valadas.
	 */
	public TypedFlatMap reemitirManifestoViagemNacional(TypedFlatMap criteria) throws Exception {
		Long idManifestoViagemNacional = criteria.getLong(ID_MANIFESTO_VIAGEM_NACIONAL);
		TypedFlatMap data = new TypedFlatMap();

		if (emitirManifestoParaMDFe()) {
			emitirMVNService.executeReemitirMVNParaMDFe(idManifestoViagemNacional);
			Map<String, Object> parameters = new HashMap<String, Object>();
			parameters.put(ID_MANIFESTO_VIAGEM_NACIONAL, idManifestoViagemNacional);
			String reportFileMVNParaMDFe = this.reportExecutionManager.generateReportLocator(emitirMVNParaMDFeService, parameters);
			data.put("reportFileMVNParaMDFe", reportFileMVNParaMDFe);
		}

		return data;
	}

	public void setManifestoViagemNacionalService(ManifestoViagemNacionalService manifestoViagemNacionalService) {
		this.manifestoViagemNacionalService = manifestoViagemNacionalService;
	}

	public void setManifestoService(ManifestoService manifestoService) {
		this.manifestoService = manifestoService;
	}

	public void setEmitirMVNService(EmitirMVNService emitirMVNService) {
		this.emitirMVNService = emitirMVNService;
	}

	public void setConteudoParametroFilialService(ConteudoParametroFilialService conteudoParametroFilialService) {
		this.conteudoParametroFilialService = conteudoParametroFilialService;
	}

	public void setReportExecutionManager(ReportExecutionManager reportExecutionManager) {
		this.reportExecutionManager = reportExecutionManager;
	}

	public void setEmitirMVNParaMDFeService(EmitirMVNParaMDFeService emitirMVNParaMDFeService) {
		this.emitirMVNParaMDFeService = emitirMVNParaMDFeService;
	}

	public void setManterRecibosAction(ManterRecibosAction manterRecibosAction) {
		this.manterRecibosAction = manterRecibosAction;
	}

	public void setReciboFreteCarreteiroService(ReciboFreteCarreteiroService reciboFreteCarreteiroService) {
		this.reciboFreteCarreteiroService = reciboFreteCarreteiroService;
	}
}