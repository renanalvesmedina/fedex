package com.mercurio.lms.expedicao.action;

import java.io.Serializable;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.Predicate;
import org.apache.commons.lang.StringUtils;
import org.joda.time.DateTime;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.session.SessionContext;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.InscricaoEstadual;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.configuracoes.model.service.EnderecoPessoaService;
import com.mercurio.lms.configuracoes.model.service.InscricaoEstadualService;
import com.mercurio.lms.configuracoes.model.service.MoedaPaisService;
import com.mercurio.lms.configuracoes.model.service.ParametroGeralService;
import com.mercurio.lms.configuracoes.model.service.PessoaService;
import com.mercurio.lms.configuracoes.model.service.TipoTributacaoIEService;
import com.mercurio.lms.expedicao.model.Awb;
import com.mercurio.lms.expedicao.model.CtoAwb;
import com.mercurio.lms.expedicao.model.ManifestoViagemNacional;
import com.mercurio.lms.expedicao.model.PreAlerta;
import com.mercurio.lms.expedicao.model.service.AwbCiaAereaService;
import com.mercurio.lms.expedicao.model.service.AwbService;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.model.service.DoctoServicoService;
import com.mercurio.lms.expedicao.model.service.ManifestoViagemNacionalService;
import com.mercurio.lms.expedicao.model.service.PreAlertaService;
import com.mercurio.lms.expedicao.util.AwbUtils;
import com.mercurio.lms.expedicao.util.ConhecimentoUtils;
import com.mercurio.lms.expedicao.util.ConstantesExpedicao;
import com.mercurio.lms.municipios.model.Aeroporto;
import com.mercurio.lms.municipios.model.CiaFilialMercurio;
import com.mercurio.lms.municipios.model.Empresa;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.AeroportoService;
import com.mercurio.lms.municipios.model.service.CiaFilialMercurioService;
import com.mercurio.lms.municipios.model.service.EmpresaService;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.MunicipioService;
import com.mercurio.lms.util.DoubleUtils;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.IntegerUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.ValidateUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.service.ClienteService;

/**
 * Generated by: ADSM ActionGenerator
 * 
 * Não inserir documentação após ou remover a tag do XDoclet a seguir. O valor
 * do <code>id</code> informado abaixo deve ser utilizado para referenciar
 * este serviço.
 * 
 * @spring.bean id="lms.expedicao.digitarAWBCiasAereasAction"
 */
public class DigitarAWBCiasAereasAction extends CrudAction {

	private FilialService filialService;
	private ClienteService clienteService;
	private InscricaoEstadualService inscricaoEstadualService;
	private EnderecoPessoaService enderecoPessoaService;
	private AeroportoService aeroportoService;
	private CiaFilialMercurioService ciaFilialMercurioService;
	private MoedaPaisService moedaPaisService;
	private PreAlertaService preAlertaService;
	private TipoTributacaoIEService tipoTributacaoIEService;
	private DomainValueService domainValueService;
	private MunicipioService municipioService;
	private ManifestoViagemNacionalService manifestoViagemNacionalService;
	private ConhecimentoService conhecimentoService;
	private PessoaService pessoaService;
	private AwbService awbService;
	private EmpresaService empresaService;
	private ParametroGeralService parametroGeralService;
	private DoctoServicoService doctoServicoService;
	private ConfiguracoesFacade configuracoesFacade;

	
	private static final int PERCENTUAL = 100;
	private static final int CASAS_DECIMAIS = 2;
	
	private static final int TAMANHO_NR_AWB_COM_CIA_AEREA = 14;
	private static final int TAMANHO_NR_AWB = 11;

	public List findLocalEmissao(Map criteria){
        List dominiosValidos = new ArrayList();
        dominiosValidos.add("C");
        dominiosValidos.add("V");
        List retorno = domainValueService.findByDomainNameAndValues("DM_LOCAL_EMISSAO_AWB", dominiosValidos);
        return retorno;
	}		
	
	public List findFinalidade(Map criteria){
        List retorno = domainValueService.findDomainValues("DM_TIPO_AWB");
        return retorno;
	}	
	
	public TypedFlatMap findDadosFilial(TypedFlatMap criteria){
		TypedFlatMap retorno = new TypedFlatMap();
		Filial filialUsuario = SessionUtils.getFilialSessao();
		Pessoa pessoaFilial = pessoaService.findById(filialUsuario.getPessoa().getIdPessoa());
		List<InscricaoEstadual> inscricaoEstadual = inscricaoEstadualService.findInscricaoEstadualAtivaByPessoa(pessoaFilial.getIdPessoa());
		retorno.put("pessoa.nrIdentificacao", FormatUtils.formatCNPJ(pessoaFilial.getNrIdentificacao()));
		retorno.put("pessoa.nmPessoa", pessoaFilial.getNmPessoa());
		retorno.put("pessoa.tpPessoa", pessoaFilial.getTpPessoa().getValue());
		if (!inscricaoEstadual.isEmpty()){
			retorno.put("inscricaoEstadual.idInscricaoEstadual", inscricaoEstadual.get(0).getIdInscricaoEstadual());
		}
		retorno.put("idCliente", pessoaFilial.getIdPessoa());		
		Aeroporto aeroportoOrigem = aeroportoService.findById(filialUsuario.getAeroporto().getIdAeroporto());
		retorno.put("aeroportoByIdAeroportoOrigem.idAeroporto", aeroportoOrigem.getIdAeroporto());
		retorno.put("aeroportoByIdAeroportoOrigem.sgAeroporto", aeroportoOrigem.getSgAeroporto());
		retorno.put("aeroportoByIdAeroportoOrigem.pessoa.nmPessoa", aeroportoOrigem.getPessoa().getNmPessoa());
		return retorno;
	}
	
	public Serializable store(TypedFlatMap params) {
		Map ctosAwbMap = (Map) SessionContext.get(ConstantesExpedicao.CTOs_AWB_IN_SESSION);
		String dsJustificativaPrejuizoAwb = params.getString("dsJustificativaPrejuizo");
		Usuario usuarioJustificativaPrejuizoAwb = null;
		if(StringUtils.isNotBlank(dsJustificativaPrejuizoAwb)){
			usuarioJustificativaPrejuizoAwb = SessionUtils.getUsuarioLogado();
		}
		
		Usuario usuarioInclusaoAwb = SessionUtils.getUsuarioLogado();
		
		List ctosAwb = new ArrayList();

		Long idCiaFilialMercurio = params.getLong("ciaFilialMercurio.idCiaFilialMercurio");
		Long idFilialOrigem = params.getLong("filial.idFilial");
		Long idFilialDestino = getIdFilialOrigem(params);
		Long idAeroportoOrigem = params.getLong("aeroportoByIdAeroportoOrigem.idAeroporto");
		Long idAeroportoDestino = params.getLong("aeroportoByIdAeroportoDestino.idAeroporto");
		Long idMoeda = params.getLong("awb.idMoeda");
		Long idClienteRemetente = params.getLong("clienteByIdClienteRemetente.idCliente");
		Long idClienteDestinatario = params.getLong("clienteByIdClienteDestinatario.idCliente");
		Long idClienteTomador = params.getLong("clienteByIdClienteTomador.idCliente");
		Long idInscricaoEstadualExpedidor = params.getLong("clienteByIdClienteRemetente.idInscricaoEstadual");
		Long idInscricaoEstadualDestinatario = params.getLong("clienteByIdClienteDestinatario.idInscricaoEstadual");
		Long idInscricaoEstadualTomador = params.getLong("clienteByIdClienteTomador.idInscricaoEstadual");
		Long nrContaCorrenteTomador = params.getLong("clienteByIdClienteTomador.nrContaCorrente");
		
		String numeroAwb = params.getLong("numero").toString();
		String numeroAwbFull = StringUtils.leftPad(numeroAwb, TAMANHO_NR_AWB_COM_CIA_AEREA, '0');
		String numero = numeroAwbFull.substring(numeroAwbFull.length() - TAMANHO_NR_AWB);
		Awb awb = AwbUtils.splitNrAwb(numero);
		String dsSerie = awb.getDsSerie();		
		Long nrAwb = awb.getNrAwb();		
		Integer dvAwb = awb.getDvAwb();
		
		Double vlFrete = params.getDouble("awb.vlFrete");
		validateValorFreteMaiorZero(vlFrete);
		
		DateTime dhEmissao = params.getDateTime("awb.dhEmissao");
		DateTime dhDigitacao = null;
		DateTime dhPrevistaChegada = params.getDateTime("dhPrevistaChegada");
		DateTime dhPrevistaSaida = params.getDateTime("dhPrevistaSaida");
		String nrChave = params.getString("awb.nrChave");
		String obAwb = params.getString("awb.obAwb");
		String dsVooPrevisto = params.getString("awb.dsVooPrevisto");
		BigDecimal psTotal = params.getBigDecimal("psTotal");
		BigDecimal psCubado = params.getBigDecimal("psCubado");
		
		Integer qtVolumes = params.getInteger("qtVolumes");
		
		BigDecimal pcAliquotaIcms = params.getBigDecimal("pcAliquotaIcms");
		BigDecimal vlIcms = params.getBigDecimal("vlIcms");

		DomainValue tpLocalEmissao = params.getDomainValue("tpLocalEmissao");
		String tpAwb = params.getString("tpAwb");
		Long idLiberacaoAwb = params.getLong("dsSenha.idLiberacaoAwb");
				
		validateDhEmissao(dhEmissao);		

		Filial filialDateTime = filialService.findById(idFilialOrigem);
		if(filialDateTime != null){
			dhDigitacao = new DateTime(filialDateTime.getDateTimeZone());
		}
		if(ctosAwbMap != null && !ctosAwbMap.isEmpty()) {//Copia os dados para um novo ctoAwb para passar para a service
			for (Iterator itCtosAwbMap = ctosAwbMap.values().iterator(); itCtosAwbMap.hasNext();) {
				CtoAwb ctoAwb = (CtoAwb) itCtosAwbMap.next();
				CtoAwb ctoAwbNovo = new CtoAwb();
				ctoAwbNovo.setConhecimento(ctoAwb.getConhecimento());
				ctosAwb.add(ctoAwbNovo);
			}
		}else if("NO".equals(tpAwb)){
			throw new BusinessException("LMS-04130");
		}
		
		if(!ctosAwb.isEmpty()){
			validaRentabilidadeAwb(ctosAwb, vlFrete, dsJustificativaPrejuizoAwb);
		}
		
		Long idAwbSubstituido = params.getLong("awb.idAwb");
		Long idAwb = (Long)getService().storePreAwb(
					idCiaFilialMercurio,
					idFilialOrigem,
					idFilialDestino,
					idAeroportoOrigem,
					idAeroportoDestino,
					idMoeda,
					idClienteRemetente,
					idClienteDestinatario,
					vlFrete,
					dvAwb,
					dhEmissao,
					dhDigitacao,
					dhPrevistaChegada,
					dhPrevistaSaida,
					dsSerie,
					nrAwb,
					dsVooPrevisto,
					obAwb,
					ctosAwb,
					psTotal,
					psCubado,
					qtVolumes,
					pcAliquotaIcms,
					vlIcms,
					idInscricaoEstadualExpedidor,
					idInscricaoEstadualDestinatario, 
					tpLocalEmissao,
					nrChave,
					tpAwb,
					idLiberacaoAwb,
					idAwbSubstituido,
					dsJustificativaPrejuizoAwb,
					usuarioJustificativaPrejuizoAwb,
					usuarioInclusaoAwb,
					idClienteTomador,
					idInscricaoEstadualTomador,
					nrContaCorrenteTomador
				);

		Awb awbPreAlerta = new Awb();
		Filial filialOrigem = new Filial();
		filialOrigem.setIdFilial(idFilialOrigem);
		awbPreAlerta.setIdAwb(idAwb);
		awbPreAlerta.setFilialByIdFilialOrigem(filialOrigem);
		PreAlerta preAlerta = new PreAlerta();
		preAlerta.setAwb(awbPreAlerta);
		preAlerta.setDsVoo(dsVooPrevisto);
		preAlerta.setBlVooConfirmado(Boolean.FALSE);
		preAlerta.setDhSaida(dhPrevistaSaida);
		preAlerta.setDhChegada(dhPrevistaChegada);

		TypedFlatMap retorno = preAlertaService.executeValidateInStore(preAlerta, null, null, null);

		preAlertaService.executeSendEmail(preAlerta, retorno);
		
		remove();

		return retorno;
	}

	private void validateDhEmissao(DateTime dhEmissao) {
		if(dhEmissao.isAfter(JTDateTimeUtils.getDataHoraAtual())){
			throw new BusinessException("LMS-04519");
		}
	}

	private Long getIdFilialOrigem(TypedFlatMap params) {
		Long idFilialDestino = params.getLong("aeroportoByIdAeroportoDestino.filial.idFilial");
		if(idFilialDestino == null){
			idFilialDestino = aeroportoService.findById(params.getLong("aeroportoByIdAeroportoDestino.idAeroporto")).getFilial().getIdFilial();
		}
		return idFilialDestino;
	}

	private void validateValorFreteMaiorZero(Double vlFrete) {
		if (vlFrete.compareTo(DoubleUtils.ZERO) <= 0) {
			throw new BusinessException("LMS-04523");
		}
	}
	
	private void validaRentabilidadeAwb(List<CtoAwb> ctosAwb, Double vlFrete, String justificativaPrejuizoAwb) {
		String tipoAwb = configuracoesFacade.getMensagem("AWB");
		getAwbService().validateRentabilidadeAwb(ctosAwb, vlFrete, justificativaPrejuizoAwb, tipoAwb);
	}

	public void validateChave(TypedFlatMap bean){
		String nrChave = bean.getString("nrChave");
		if( nrChave != null && !nrChave.equals("") ){
			if( nrChave.length() != 44 || !ValidateUtils.validateDigitoVerificadorNfe(nrChave)){
				throw new BusinessException("LMS-04400");
			}
			validaChaveJaUsadaEmAWB(nrChave);
		}
	}

	private void validaChaveJaUsadaEmAWB(String nrChave) {
		Map<String, Object> mapa = awbService.findChaveJaUsadaEmAWB(nrChave);
		if(!mapa.isEmpty()){
			String infoAwb = mapa.get("sgEmpresa").toString() + " " + 
							 AwbUtils.getNrAwbFormated(mapa.get("dsSerie").toString(),
									 				Long.valueOf(mapa.get("numero").toString()),
									 				Integer.valueOf(mapa.get("dvAwb").toString()));
			throw new BusinessException("LMS-04510", new Object[]{infoAwb});
		}
	}

	public List validateLiberacaoAwbComplementar(TypedFlatMap bean) {
		String dsSenha = bean.getString("dsSenha");
		Long idEmpresa = bean.getLong("idEmpresa");
		List<Map> list = new ArrayList<Map>(); 
		if ( StringUtils.isNotBlank(dsSenha) ) {
			list.add(getService().validateLiberacaoAwbComplementar(dsSenha, idEmpresa));
		}
		return list;
	}
	

	public void remove() {
		SessionContext.remove(ConstantesExpedicao.CTOs_AWB_IN_SESSION);
	}

	public Serializable getData(TypedFlatMap criteria) {
		Filial filialUsuario = SessionUtils.getFilialSessao();
		TypedFlatMap retorno = new TypedFlatMap();

		retorno.put("filial.idFilial", filialUsuario.getIdFilial());
		retorno.put("filial.sgFilial", filialUsuario.getSgFilial());
		retorno.put("filial.pessoa.nmFantasia", filialUsuario.getPessoa().getNmFantasia());

		return retorno;
	}

	public List findCliente(TypedFlatMap criteria) {
		List returnList = clienteService.findClienteByNrIdentificacao(criteria.getString("pessoa.nrIdentificacao"));
		if (!returnList.isEmpty()) {
			Map cliente = (Map) returnList.get(0);
			Long idCliente = (Long) cliente.get("idCliente");
			cliente.put("ie", tipoTributacaoIEService.findVigentesByIdPessoa(idCliente));
		}
		return returnList;
	}

	public Map findEndereco(TypedFlatMap criteria) {
		String tpPessoa = criteria.getString("tpPessoa");
		if (tpPessoa == null)
			tpPessoa = criteria.getString("tpPessoa.value");
		return findEnderecoByIdPessoaTpPessoa(tpPessoa, criteria.getLong("idPessoa"));
	}
	private Map findEnderecoByIdPessoaTpPessoa(String tpPessoa, Long idPessoa) {
		String tpEndereco = "COM";
		if ("F".equalsIgnoreCase(tpPessoa))
			tpEndereco = "RES";
		return enderecoPessoaService.findByPessoaTipoEndereco(idPessoa, tpEndereco);
	}
	
	public Map findAeroportoOrigem() {
		return findAeroportoByIdFilial(SessionUtils.getFilialSessao().getIdFilial());
	}

	private Map findAeroportoByIdFilial(Long idFilial) {
		return (idFilial == null) ? null : filialService.findAeroportoFilial(idFilial);
	}

	public List findAeroporto(TypedFlatMap criteria) {
		return aeroportoService.findLookupAeroporto(criteria);
	}

	public List findLookupFilial(TypedFlatMap criteria) {
		return filialService.findLookupBySgFilial(criteria.getString("sgFilial"), criteria.getString("tpAcesso"));
	}
	
	
	
	public List findLookupMunicipio(TypedFlatMap criteria) {
		return municipioService.findLookup(criteria);
	}
	
	public List findLookupManifestoViagem(TypedFlatMap criteria){
		List<ManifestoViagemNacional> manifestos = manifestoViagemNacionalService.findByNrManifestoOrigemByFilial(criteria.getInteger("nrManifesto"), criteria.getLong("filialOrigem.idFilial"));
		if (manifestos.isEmpty()){
			return null;
		}
		else{
			TypedFlatMap map = new TypedFlatMap();
			map.put("idManifestoViagemNacional", manifestos.get(0).getIdManifestoViagemNacional());
			map.put("nrManifesto", manifestos.get(0).getNrManifestoOrigem());
			Filial filial = filialService.findById(manifestos.get(0).getFilial().getIdFilial());
			map.put("filial.sgFilial", filial.getSgFilial());
			map.put("filial.idFilial", filial.getIdFilial());
			List retorno = new ArrayList();
			retorno.add(map);
			return retorno;
		}
	}

	public InscricaoEstadual findInscEst(Long idPessoa) {
		return inscricaoEstadualService.findByPessoaIndicadorPadrao(idPessoa, Boolean.TRUE);
	}

	public List findCiaAerea(TypedFlatMap criteria){
		List result = ciaFilialMercurioService.findCiaAerea(criteria);
		List retorno = null;
		if(result != null && !result.isEmpty()){
			retorno = new ArrayList(result.size());
			for(Iterator it = result.iterator(); it.hasNext(); ){
				CiaFilialMercurio ciaFilialMercurio = (CiaFilialMercurio)it.next();
				TypedFlatMap line = new TypedFlatMap();
				line.put("idCiaFilialMercurio", ciaFilialMercurio.getIdCiaFilialMercurio());
				line.put("empresa.pessoa.nmPessoa", ciaFilialMercurio.getEmpresa().getPessoa().getNmPessoa());
				line.put("empresa.idEmpresa", ciaFilialMercurio.getEmpresa().getIdEmpresa());
				line.put("empresa.sgEmpresa", ciaFilialMercurio.getEmpresa().getSgEmpresa());

				retorno.add(line);
			}
		}
		return retorno;
	}

	private void verifyCtrcParameters(TypedFlatMap criteria) {
		Long idAeroporto = criteria.getLong("aeroporto.idAeroporto");
		Long idFilial = criteria.getLong("filial.idFilial");
		Long idMunicipio = criteria.getLong("municipio.idMunicipio");
		Long idManifestoViagem = criteria.getLong("manifestoViagem.idManifestoViagemNacional");
		Long idPreAwb = criteria.getLong("awb.idAwb");

		// indicam se os campos acima estao vazios
		// true = vazio, false = preenchido
		boolean blAeroporto = (idAeroporto == null);
		boolean blFilial = (idFilial == null);
		boolean blMunicipio = (idMunicipio == null);
		boolean blManifestoViagem = (idManifestoViagem == null);

		if(blAeroporto && blFilial && blMunicipio && blManifestoViagem && idPreAwb == null) {
			throw new BusinessException("LMS-00055");
		}

		if(!blAeroporto) {
			if(!blFilial || !blMunicipio || !blManifestoViagem) {
				throw new BusinessException("LMS-04168");
			}
		}

		if(!blFilial) {
			if(!blAeroporto || !blMunicipio || !blManifestoViagem) {
				throw new BusinessException("LMS-04168");
			}
		}

		if(!blMunicipio) {
			if(!blFilial || !blAeroporto || !blManifestoViagem) {
				throw new BusinessException("LMS-04168");
			}
		}
		
		if(!blManifestoViagem) {
			if(!blFilial || !blAeroporto || !blMunicipio) {
				throw new BusinessException("LMS-04168");
			}
		}
	}
	
	public List findCtrc(TypedFlatMap criteria) {
		this.verifyCtrcParameters(criteria);

		Filial filialSessao = SessionUtils.getFilialSessao();
		criteria.put("filialLocalizacao.idFilial", filialSessao.getIdFilial());
		List result = conhecimentoService.findByCriteriaNotInAwb(criteria);

		for(Iterator it = result.iterator();it.hasNext();) {
			TypedFlatMap map = (TypedFlatMap) it.next();

			String tpDocumento = map.getDomainValue("tpDocumentoServico.value").getValue();
			String nrCtrc;

			if(tpDocumento.equals(ConstantesExpedicao.CONHECIMENTO_NACIONAL)){
				nrCtrc = ConhecimentoUtils.formatConhecimento(
				 map.getString("filialOrigem.sgFilial")
				,map.getLong("nrConhecimento")
				,map.getInteger("dvConhecimento"));
			} else {
				nrCtrc = ConhecimentoUtils.formatConhecimento(
					map.getString("filialOrigem.sgFilial")
					,map.getLong("nrConhecimento")
					,null);
			}
			map.put("nrCtrc", nrCtrc);

			Integer nrAltura = map.getInteger("dimensao.nrAltura");
			Integer nrLargura = map.getInteger("dimensao.nrLargura");
			Integer nrComprimento = map.getInteger("dimensao.nrComprimento");

			String dimensaoString = null;
			if (IntegerUtils.hasValue(nrAltura) &&
				IntegerUtils.hasValue(nrLargura) &&
				IntegerUtils.hasValue(nrComprimento)
			) {
				dimensaoString = nrAltura + " x " + nrLargura + " x " + nrComprimento;
			}

			map.put("dimensaoString", dimensaoString);
		}
		return result;
	}
	
	public TypedFlatMap findDadosColetaAwb(TypedFlatMap criteria){
		return awbService.findDadosColetaAwb(criteria.getLong("awb.idAwb"));
	}
	
	public List findLookupAwb(Map criteria) {
		TypedFlatMap mapResult = new TypedFlatMap();
		List listResult = new ArrayList();
		
		if(ConstantesExpedicao.TP_STATUS_AWB_EMITIDO.equals(criteria.get("tpStatusAwb").toString())){
			Awb awbAux = AwbUtils.splitNrAwb(criteria.get("nrAwb").toString());
			
			if(awbAux.getNrAwb() != null){
				criteria.put("nrAwb", awbAux.getNrAwb());
				criteria.put("dsSerie", awbAux.getDsSerie());
				criteria.put("dvAwb", awbAux.getDvAwb());
			}
		}else{
			criteria.put("idAwb", criteria.get("nrAwb"));
			criteria.remove("nrAwb");
		}
			
		List awbList = awbService.findLookup(criteria);
		if (awbList != null && !awbList.isEmpty()) {
			for (int i = 0; i < awbList.size(); i++) {
				Awb awb = (Awb) awbList.get(i);
				
				if(ConstantesExpedicao.TP_STATUS_AWB_EMITIDO.equals(awb.getTpStatusAwb().getValue())){
					mapResult.put("idAwb", awb.getIdAwb());
					mapResult.put("nrAwb", AwbUtils.getNrAwb(awb));
					mapResult.put("nrAwbFormatado",  AwbUtils.getNrAwbFormated(awb));
				}else{
					mapResult.put("idAwb", awb.getIdAwb());
					mapResult.put("nrAwb", awb.getIdAwb());
					mapResult.put("nrAwbFormatado",  awb.getIdAwb());
				}
				
				listResult.add(mapResult);
			}
		}		
		
		return listResult;
	}
	
	public List findLookupSgCiaAerea(Map criteria) {
		TypedFlatMap mapResult = new TypedFlatMap();
		List listResult = new ArrayList();
		
		List result = ciaFilialMercurioService.findCiaAerea(null);
		
		final String sgEmpresa = criteria.get("sgEmpresa").toString().toUpperCase();
		CiaFilialMercurio ciaFilial = (CiaFilialMercurio) CollectionUtils.find(result, new Predicate() {			
			@Override
			public boolean evaluate(Object arg0) {
				CiaFilialMercurio c = (CiaFilialMercurio)arg0;
				return sgEmpresa.equals(c.getEmpresa().getSgEmpresa());
			}
		});

		mapResult.put("idCiaFilialMercurio", ciaFilial.getIdCiaFilialMercurio());
		mapResult.put("sgEmpresa", ciaFilial.getEmpresa().getSgEmpresa());
		mapResult.put("idEmpresa", ciaFilial.getEmpresa().getIdEmpresa());
		
		listResult.add(mapResult);

		return listResult;
	}
	
	public List findLookupSgCiaAereaAwbSustituido(Map criteria) {
		TypedFlatMap mapResult = new TypedFlatMap();
		List listResult = new ArrayList();
		
		criteria.put("tpEmpresa", ConstantesExpedicao.TP_EMPRESA_CIA_AEREA);
		criteria.put("sgEmpresa", criteria.get("sgEmpresa").toString().toUpperCase());
		
		List ciaList = empresaService.findLookupEmpresaAwb(criteria);
		if (ciaList != null && !ciaList.isEmpty()) {
			for (int i = 0; i < ciaList.size(); i++) {
				Empresa ciaAerea = (Empresa) ciaList.get(i);
				mapResult.put("idEmpresa", ciaAerea.getIdEmpresa());
				mapResult.put("sgEmpresa", ciaAerea.getSgEmpresa());
				
				listResult.add(mapResult);
			}
		}		
		
		return listResult;
	}
	
	public List findLookupAwbSustituido(Map criteria) {
		TypedFlatMap mapResult = new TypedFlatMap();
		List listResult = new ArrayList();
		
		if(ConstantesExpedicao.TP_STATUS_AWB_EMITIDO.equals(criteria.get("tpStatusAwb").toString())){
			Awb awbAux = AwbUtils.splitNrAwb(criteria.get("nrAwb").toString());
			
			if(awbAux.getNrAwb() != null){
				criteria.put("nrAwb", awbAux.getNrAwb());
				criteria.put("dsSerie", awbAux.getDsSerie());
				criteria.put("dvAwb", awbAux.getDvAwb());
			}
		}else{
			criteria.put("idAwb", criteria.get("nrAwb").toString());
		}
		
		String statusSelecionado = criteria.get("tpStatusAwb").toString();
		criteria.put("tpStatusAwb", "C");
			
		List awbList = awbService.findLookup(criteria);
		if (awbList != null && !awbList.isEmpty()) {
			for (int i = 0; i < awbList.size(); i++) {
				Awb awb = (Awb) awbList.get(i);
				
				if(ConstantesExpedicao.TP_STATUS_AWB_EMITIDO.equals(statusSelecionado)){
					mapResult.put("idAwb", awb.getIdAwb());
					mapResult.put("nrAwb", AwbUtils.getNrAwb(awb));
					mapResult.put("nrAwbFormatado",  AwbUtils.getNrAwbFormated(awb));
				}else{
					mapResult.put("idAwb", awb.getIdAwb());
					mapResult.put("nrAwb", awb.getIdAwb());
					mapResult.put("nrAwbFormatado",  awb.getIdAwb());
				}
				
				listResult.add(mapResult);
			}
		}		
		
		return listResult;
	}
	
	private String getNrIdentificacaoTomador(Filial filialTomadorFrete) {
		if (filialTomadorFrete != null) {
			Pessoa pessoa = pessoaService.findById(filialTomadorFrete.getIdFilial());
			if (pessoa != null) {
				return pessoa.getNrIdentificacao();
			}
		}
		return "";
	}

	private String getNrContaCorrente(Long nrContaCorrente) {
		if (nrContaCorrente != null) {
			return nrContaCorrente.toString();
		}
		return "";
	}

	public TypedFlatMap findTomadorDocument(Long idCiaFilial) {
    	if (idCiaFilial != null) {
    		CiaFilialMercurio ciaFilialMercurio = ciaFilialMercurioService.findById(idCiaFilial);
    		if ((ciaFilialMercurio != null) && (ciaFilialMercurio.getEmpresa() != null)) {
    			Empresa empresa = empresaService.findById(ciaFilialMercurio.getEmpresa().getIdEmpresa());
    			if (empresa != null) {
    				TypedFlatMap resultMap = new TypedFlatMap();
    				resultMap.put("tomador.nrIdentificacao", getNrIdentificacaoTomador(empresa.getFilialTomadorFrete()));
    				resultMap.put("tomador.nrContaCorrente", getNrContaCorrente(empresa.getNrContaCorrente()));
    				return resultMap;
    			}
    		}
    	}
		return null;
	}

	public List findMoedaCombo() {
		return moedaPaisService.findMoedaByPaisUsuarioLogado();
	}
	
	public TypedFlatMap setValorIcms(TypedFlatMap tfm){
		Double valorFrete = tfm.getDouble("valorFrete");
		Double aliquotaIcms = tfm.getDouble("aliquotaIcms");
		BigDecimal valorIcms = BigDecimal.valueOf(valorFrete * aliquotaIcms / PERCENTUAL);
		tfm.put("vlIcms", valorIcms.setScale(CASAS_DECIMAIS, RoundingMode.CEILING));
		return tfm;
	}

	// Setters and Getters
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}

	public void setEnderecoPessoaService(EnderecoPessoaService enderecoPessoaService) {
		this.enderecoPessoaService = enderecoPessoaService;
	}

	public void setInscricaoEstadualService(InscricaoEstadualService inscricaoEstadualService) {
		this.inscricaoEstadualService = inscricaoEstadualService;
	}

	public void setAeroportoService(AeroportoService aeroportoService) {
		this.aeroportoService = aeroportoService;
	}

	public void setCiaFilialMercurioService(CiaFilialMercurioService ciaFilialMercurioService) {
		this.ciaFilialMercurioService = ciaFilialMercurioService;
	}

	public void setService(AwbCiaAereaService serviceService) {
		this.defaultService = serviceService;
	}

	public AwbCiaAereaService getService() {
		return (AwbCiaAereaService) this.defaultService;
	}

	public void setMoedaPaisService(MoedaPaisService moedaPaisService) {
		this.moedaPaisService = moedaPaisService;
	}

	public void setPreAlertaService(PreAlertaService preAlertaService) {
		this.preAlertaService = preAlertaService;
	}

	/**
	 * @param tipoTributacaoIEService The tipoTributacaoIEService to set.
	 */
	public void setTipoTributacaoIEService(
			TipoTributacaoIEService tipoTributacaoIEService) {
		this.tipoTributacaoIEService = tipoTributacaoIEService;
	}

	public DomainValueService getDomainValueService() {
		return domainValueService;
	}

	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}

	public MunicipioService getMunicipioService() {
		return municipioService;
	}

	public void setMunicipioService(MunicipioService municipioService) {
		this.municipioService = municipioService;
	}

	public ConhecimentoService getConhecimentoService() {
		return conhecimentoService;
	}

	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
	}

	public ManifestoViagemNacionalService getManifestoViagemNacionalService() {
		return manifestoViagemNacionalService;
	}

	public void setManifestoViagemNacionalService(
			ManifestoViagemNacionalService manifestoViagemNacionalService) {
		this.manifestoViagemNacionalService = manifestoViagemNacionalService;
	}

	public PessoaService getPessoaService() {
		return pessoaService;
	}

	public void setPessoaService(PessoaService pessoaService) {
		this.pessoaService = pessoaService;
	}

	public AwbService getAwbService() {
		return awbService;
	}

	public void setAwbService(AwbService awbService) {
		this.awbService = awbService;
	}

	public EmpresaService getEmpresaService() {
		return empresaService;
	}

	public void setEmpresaService(EmpresaService empresaService) {
		this.empresaService = empresaService;
	}
	
	public ParametroGeralService getParametroGeralService() {
		return parametroGeralService;
	}

	public void setParametroGeralService(ParametroGeralService parametroGeralService) {
		this.parametroGeralService = parametroGeralService;
	}

	public DoctoServicoService getDoctoServicoService() {
		return doctoServicoService;
	}

	public void setDoctoServicoService(DoctoServicoService doctoServicoService) {
		this.doctoServicoService = doctoServicoService;
	}

	public ConfiguracoesFacade getConfiguracoesFacade() {
		return configuracoesFacade;
	}

	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}
}