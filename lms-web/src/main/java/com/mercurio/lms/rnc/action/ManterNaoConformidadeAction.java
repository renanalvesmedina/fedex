package com.mercurio.lms.rnc.action;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.joda.time.YearMonthDay;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.expedicao.model.Awb;
import com.mercurio.lms.expedicao.model.DoctoServico;
import com.mercurio.lms.expedicao.model.service.AwbService;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.model.service.CtoInternacionalService;
import com.mercurio.lms.expedicao.model.service.DoctoServicoService;
import com.mercurio.lms.expedicao.util.AwbUtils;
import com.mercurio.lms.expedicao.util.ConstantesExpedicao;
import com.mercurio.lms.municipios.model.Empresa;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.EmpresaService;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.pendencia.model.service.MdaService;
import com.mercurio.lms.rnc.model.NaoConformidade;
import com.mercurio.lms.rnc.model.service.NaoConformidadeService;
import com.mercurio.lms.rnc.model.service.OcorrenciaNaoConformidadeService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.vendas.model.Cliente;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.rnc.manterNaoConformidadeAction"
 */

public class ManterNaoConformidadeAction {

	private NaoConformidadeService naoConformidadeService;
	private OcorrenciaNaoConformidadeService ocorrenciaNaoConformidadeService;
    private FilialService filialService;
    private DoctoServicoService doctoServicoService;
	private ConhecimentoService conhecimentoService;
	private CtoInternacionalService ctoInternacionalService;
	private MdaService mdaService;
    private DomainValueService domainValueService;
    private EmpresaService empresaService;
    private AwbService awbService;

    public EmpresaService getEmpresaService() {
		return empresaService;
	}
	public void setEmpresaService(EmpresaService empresaService) {
		this.empresaService = empresaService;
	}
	public AwbService getAwbService() {
		return awbService;
	}
	public void setAwbService(AwbService awbService) {
		this.awbService = awbService;
	}
	public NaoConformidadeService getNaoConformidadeService() {
		return naoConformidadeService;
	}
	public void setNaoConformidadeService(NaoConformidadeService naoConformidadeService) {
		this.naoConformidadeService = naoConformidadeService;
	}
	public OcorrenciaNaoConformidadeService getOcorrenciaNaoConformidadeService() {
		return ocorrenciaNaoConformidadeService;
	}
	public void setOcorrenciaNaoConformidadeService(
			OcorrenciaNaoConformidadeService ocorrenciaNaoConformidadeService) {
		this.ocorrenciaNaoConformidadeService = ocorrenciaNaoConformidadeService;
	}
	public ConhecimentoService getConhecimentoService() {
		return conhecimentoService;
	}
	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
	}
	public CtoInternacionalService getCtoInternacionalService() {
		return ctoInternacionalService;
	}
	public void setCtoInternacionalService(CtoInternacionalService ctoInternacionalService) {
		this.ctoInternacionalService = ctoInternacionalService;
	}
	public MdaService getMdaService() {
		return mdaService;
	}
	public void setMdaService(MdaService mdaService) {
		this.mdaService = mdaService;
	}
	public FilialService getFilialService() {
		return filialService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public DoctoServicoService getDoctoServicoService() {
		return doctoServicoService;
	}
	public void setDoctoServicoService(DoctoServicoService doctoServicoService) {
		this.doctoServicoService = doctoServicoService;
	}
	public DomainValueService getDomainValueService() {
		return domainValueService;
	}
	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}

	public void removeById(java.lang.Long id) {
		getNaoConformidadeService().removeById(id);
    }

    /**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	getNaoConformidadeService().removeByIds(ids);
    }


    /**
     * 
     * @param id
     * @return
     */
    public TypedFlatMap findById(java.lang.Long id) {
    	NaoConformidade nc = getNaoConformidadeService().findById(id);

    	TypedFlatMap map = new TypedFlatMap();
    	map.put("idNaoConformidade", nc.getIdNaoConformidade());
    	map.put("filial.idFilial", nc.getFilial().getIdFilial());
    	map.put("filial.sgFilial", nc.getFilial().getSgFilial());
    	map.put("nrNaoConformidade", nc.getNrNaoConformidade());
    	map.put("tpStatusNaoConformidade.description", nc.getTpStatusNaoConformidade().getDescription());

    	Cliente clienteByIdClienteDestinatario = nc.getClienteByIdClienteDestinatario();
    	if (clienteByIdClienteDestinatario != null) {
	    	map.put("clienteByIdClienteDestinatario.idCliente", clienteByIdClienteDestinatario.getIdCliente());
	    	map.put("clienteByIdClienteDestinatario.pessoa.nmPessoa", clienteByIdClienteDestinatario.getPessoa().getNmPessoa());
	    	map.put("clienteByIdClienteDestinatario.pessoa.tpIdentificacao", clienteByIdClienteDestinatario.getPessoa().getTpIdentificacao());
	    	map.put("clienteByIdClienteDestinatario.pessoa.nrIdentificacao", 
	    		FormatUtils.formatIdentificacao(clienteByIdClienteDestinatario.getPessoa().getTpIdentificacao().getValue(), 
    			clienteByIdClienteDestinatario.getPessoa().getNrIdentificacao()));
    	}

    	Cliente clienteByIdClienteRemetente = nc.getClienteByIdClienteRemetente();
    	if (clienteByIdClienteRemetente != null) {
	    	map.put("clienteByIdClienteRemetente.idCliente", clienteByIdClienteRemetente.getIdCliente());
	    	map.put("clienteByIdClienteRemetente.pessoa.nmPessoa", clienteByIdClienteRemetente.getPessoa().getNmPessoa());
	    	map.put("clienteByIdClienteRemetente.pessoa.tpIdentificacao", clienteByIdClienteRemetente.getPessoa().getTpIdentificacao());
	    	map.put("clienteByIdClienteRemetente.pessoa.nrIdentificacao", 
	    		FormatUtils.formatIdentificacao(clienteByIdClienteRemetente.getPessoa().getTpIdentificacao().getValue(), 
   				clienteByIdClienteRemetente.getPessoa().getNrIdentificacao()));
    	}
    	

    	Object objDoctoServico = nc.getDoctoServico();
    	if (objDoctoServico != null) {
    		DoctoServico doctoServico = (DoctoServico)objDoctoServico;
    		map.put("doctoServico.idDoctoServico", doctoServico.getIdDoctoServico());
    		map.put("doctoServico.nrDoctoServico", doctoServico.getNrDoctoServico());
    		map.put("doctoServico.tpDocumentoServico.description", doctoServico.getTpDocumentoServico().getDescription());
			map.put("doctoServico.moeda.idMoeda", doctoServico.getMoeda().getIdMoeda());
			map.put("doctoServico.moeda.dsSimbolo", doctoServico.getMoeda().getSiglaSimbolo());
			map.put("doctoServico.moeda.sgMoeda", doctoServico.getMoeda().getSgMoeda());
			map.put("doctoServico.filialByIdFilialOrigem.idFilial", doctoServico.getFilialByIdFilialOrigem().getIdFilial());
			map.put("doctoServico.filialByIdFilialOrigem.sgFilial", doctoServico.getFilialByIdFilialOrigem().getSgFilial());

        	TypedFlatMap mapDataDoctoServico = getDoctoServicoService().findDoctoServicoByTpDocumento(doctoServico.getIdDoctoServico());
        	map.put("qtVolumesDoctoServico", mapDataDoctoServico.getInteger("qtVolumes"));
        	map.put("destinoDoctoServico", mapDataDoctoServico.getString("filialByIdFilialDestino.sgFilial"));
        	map.put("vlTotalDocServico", mapDataDoctoServico.getBigDecimal("vlTotalDocServico"));
        	map.put("doctoServico.dhEmissao", mapDataDoctoServico.getDateTime("dhEmissao"));
        	
    		map.put("clienteByIdClienteTomador.idCliente", mapDataDoctoServico.getLong("clienteByIdClienteTomador.idCliente"));
    		map.put("clienteByIdClienteTomador.pessoa.nmPessoa", mapDataDoctoServico.getString("clienteByIdClienteTomador.pessoa.nmPessoa"));
    		map.put("clienteByIdClienteTomador.pessoa.nrIdentificacao", mapDataDoctoServico.getString("clienteByIdClienteTomador.pessoa.nrIdentificacaoFormatado"));
    		
    	}
    	
    	
    	if(nc.getAwb() != null){
    		map.put("nrAwb", AwbUtils.getSgEmpresaAndNrAwbFormated(nc.getAwb()));
    	}
    	
    	if(nc.getTpModal() != null){
    		map.put("tpModal", nc.getTpModal().getDescriptionAsString());
    	}
    	
    	if(nc.getCausadorRnc() != null){
    		map.put("causadorRnc", nc.getCausadorRnc().getDescriptionAsString());
    	}
    	
		map.put("blExisteOcorrenciaAberta", 
				ocorrenciaNaoConformidadeService.validateExisteOcorrenciaAbertaByIdNaoConformidade(id));

		/*
		 * LMS-3240 
		 */
		map.put("blExisteOcorrenciNaoConformidade", !ocorrenciaNaoConformidadeService.findOcorreciasByIdNaoConformidadeAndMotivoAberturaNc(id, 30, 31, 32, 33, 34, 35).isEmpty());

    	return map;
    }

    public void loadItemNFe(TypedFlatMap map) {
    	String nrNaoConformidade = (String) map.get("nrNaoConformidade");
    }
    
    private TypedFlatMap validaCriteria(TypedFlatMap criteria) {
    	criteria.put("doctoServico.filialByIdFilialOrigem", criteria.get("filialByIdFilialOrigem"));
    	criteria.remove("conhecimento");
    	criteria.remove("ctoInternacional");
    	criteria.remove("mda");
    	criteria.remove("filialByIdFilialOrigem");
    	return criteria;
    }

    
    public ResultSetPage findPaginatedGridNaoConformidade(TypedFlatMap criteria) {
    	criteria = validaCriteria(criteria);
    	ResultSetPage rsp = getNaoConformidadeService().findPaginatedByNaoConformidade(criteria);
    	return rsp;
    }
    
    
    public Integer getRowCountGridNaoConformidade(TypedFlatMap criteria) {
    	criteria = validaCriteria(criteria);
    	return getNaoConformidadeService().getRowCountByNaoConformidade(criteria);
    }
    
    
    public List findLookupFilial(Map criteria) {
    	return getFilialService().findLookup(criteria);
    }
    
    public List findLookupConhecimento(Map criteria) {
    	return getConhecimentoService().findLookup(criteria);
    }
    
    public List findLookupServiceDocumentNumberCTR(Map criteria) {
    	return getConhecimentoService().findLookup(criteria);
    }

    
    /**
     * 
     * @param criteria
     * @return
     */
    public List findLookupServiceDocumentNumberNFT(Map criteria) {
    	return findLookupServiceDocumentNumberCTR(criteria);
    }

    public List findLookupServiceDocumentNumberCRT(Map criteria) {
    	return getCtoInternacionalService().findLookup(criteria);
    }

    public List findLookupServiceDocumentNumberMDA(Map criteria) {
    	return getMdaService().findLookup(criteria);
    }

    public List findLookupServiceDocumentNumberCTE(Map criteria) {
   	 return conhecimentoService.findLookup(criteria);
    }
    
    public List findLookupServiceDocumentNumberNTE(Map criteria) {
   	 return conhecimentoService.findLookup(criteria);
    }

    
    public List findLookupServiceDocumentFilialCTR(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }

    public List findLookupServiceDocumentFilialCRT(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }

    public List findLookupServiceDocumentFilialMDA(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }

    public List findLookupServiceDocumentFilialNFT(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }

    public List findLookupServiceDocumentFilialNTE(Map criteria) {
   	 return findLookupFilialByDocumentoServico(criteria);
    }

    public List findLookupServiceDocumentFilialCTE(Map criteria) {
   	 return findLookupFilialByDocumentoServico(criteria);
    }

    public List findLookupFilialByDocumentoServico(Map criteria) {
    	List list = getFilialService().findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		Filial filial = (Filial)iter.next();
    		TypedFlatMap typedFlatMap = new TypedFlatMap();
    		typedFlatMap.put("idFilial", filial.getIdFilial());
    		typedFlatMap.put("sgFilial", filial.getSgFilial());
    		retorno.add(typedFlatMap);
    	}
    	return retorno;
    }
    
    public List findTipoDocumentoServico(Map criteria) {
    	
    	List dominiosValidos = Arrays.asList("CTR", "CRT", "NFT", "NTE", "CTE");
    	
    	List retorno = getDomainValueService().findByDomainNameAndValues("DM_TIPO_DOCUMENTO_SERVICO", dominiosValidos);
    	return retorno;
    }
    
    
	public TypedFlatMap getDataUsuario() {
    	TypedFlatMap map = new TypedFlatMap();
    	YearMonthDay dataAtual = JTDateTimeUtils.getDataAtual();
    	map.put("dtAtual", dataAtual);
    	map.put("dtInicial", dataAtual.minusDays(15));
		return map;
    }


    public void validatePaginatedRnc(TypedFlatMap map) {
    	YearMonthDay dtInicial = map.getYearMonthDay("ocorrenciaNaoConformidade.dataInclusaoInicial");
    	YearMonthDay dtFinal = map.getYearMonthDay("ocorrenciaNaoConformidade.dataInclusaoFinal");
    	if (dtInicial != null && dtFinal != null) {
    		long difDias = JTDateTimeUtils.getIntervalInDays(dtInicial, dtFinal);
    		if (difDias > 15){
    			throw new BusinessException("LMS-05057");
    		}
    	} 
    	if (!(
    			(dtInicial != null && dtFinal != null)
    			||  
    			(map.getLong("filial.idFilial") != null && map.getLong("nrNaoConformidade") != null)
    			||  
    			(map.getLong("filialLegado.idFilial") != null && map.getLong("nrRncLegado") != null)
    		))
    	{
    		throw new BusinessException("LMS-12019");
    	}
    }
    
    public List findLookupSgCiaAereaAwb(Map criteria) {
		TypedFlatMap mapResult = new TypedFlatMap();
		List listResult = new ArrayList();
		
		criteria.put("tpEmpresa", ConstantesExpedicao.TP_EMPRESA_CIA_AEREA);
		criteria.put("sgEmpresa", criteria.get("sgEmpresa").toString().toUpperCase());
		
		List ciaList = empresaService.findLookupEmpresaAwb(criteria);
		if (ciaList != null && !ciaList.isEmpty()) {
			for (int i = 0; i < ciaList.size(); i++) {
				Empresa ciaAerea = (Empresa) ciaList.get(i);
				mapResult.put("idEmpresa", ciaAerea.getIdEmpresa());
				mapResult.put("sgEmpresa", ciaAerea.getSgEmpresa());
				
				listResult.add(mapResult);
			}
		}		
		
		return listResult;
	}
    
    public List findLookupAwb(Map criteria) {
		TypedFlatMap mapResult = new TypedFlatMap();
		List listResult = new ArrayList();
		
		if(ConstantesExpedicao.TP_STATUS_AWB_EMITIDO.equals(criteria.get("tpStatusAwb").toString())){
			Awb awbAux = AwbUtils.splitNrAwb(criteria.get("nrAwb").toString());
			
			if(awbAux.getNrAwb() != null){
				criteria.put("nrAwb", awbAux.getNrAwb());
				criteria.put("dsSerie", awbAux.getDsSerie());
				criteria.put("dvAwb", awbAux.getDvAwb());
			}
		}else{
			criteria.put("idAwb", criteria.get("nrAwb"));
			criteria.remove("nrAwb");
		}
			
		List awbList = awbService.findLookup(criteria);
		if (awbList != null && !awbList.isEmpty()) {
			for (int i = 0; i < awbList.size(); i++) {
				Awb awb = (Awb) awbList.get(i);
				
				if(ConstantesExpedicao.TP_STATUS_AWB_EMITIDO.equals(awb.getTpStatusAwb().getValue())){
					mapResult.put("idAwb", awb.getIdAwb());
					mapResult.put("nrAwb", AwbUtils.getNrAwb(awb));
					mapResult.put("nrAwbFormatado",  AwbUtils.getNrAwbFormated(awb));
				}else{
					mapResult.put("idAwb", awb.getIdAwb());
					mapResult.put("nrAwb", awb.getIdAwb());
					mapResult.put("nrAwbFormatado",  awb.getIdAwb());
				}
				
				listResult.add(mapResult);
			}
		}		
		
		return listResult;
	}
}