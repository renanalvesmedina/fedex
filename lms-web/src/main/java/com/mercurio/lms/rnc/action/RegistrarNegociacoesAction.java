package com.mercurio.lms.rnc.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.FindDefinition;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.rnc.model.Negociacao;
import com.mercurio.lms.rnc.model.OcorrenciaNaoConformidade;
import com.mercurio.lms.rnc.model.service.NaoConformidadeService;
import com.mercurio.lms.rnc.model.service.NegociacaoService;
import com.mercurio.lms.rnc.model.service.OcorrenciaNaoConformidadeService;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.rnc.registrarNegociacoesAction"
 */

public class RegistrarNegociacoesAction extends CrudAction {
	
	private OcorrenciaNaoConformidadeService ocorrenciaNaoConformidadeService;
	private FilialService filialService;
	private NaoConformidadeService naoConformidadeService;
	
	public void setNegociacao(NegociacaoService negociacaoService) {
		this.defaultService = negociacaoService;
	}
	public OcorrenciaNaoConformidadeService getOcorrenciaNaoConformidadeService() {
		return ocorrenciaNaoConformidadeService;
	}
	public void setOcorrenciaNaoConformidadeService(OcorrenciaNaoConformidadeService ocorrenciaNaoConformidadeService) {
		this.ocorrenciaNaoConformidadeService = ocorrenciaNaoConformidadeService;
	}	
    public FilialService getFilialService() {
		return filialService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public NaoConformidadeService getNaoConformidadeService() {
		return naoConformidadeService;
	}
	public void setNaoConformidadeService(NaoConformidadeService naoConformidadeService) {
		this.naoConformidadeService = naoConformidadeService;
	}
	private NegociacaoService getNegociacaoService() {
		return (NegociacaoService)defaultService;
	}

	
	public void removeById(java.lang.Long id) {
		getNegociacaoService().removeById(id);
    }

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
		getNegociacaoService().removeByIds(ids);
    }

    public Negociacao findById(java.lang.Long id) {
    	return getNegociacaoService().findById(id);
    }


    public Negociacao store(TypedFlatMap tfm) {
    	Long idNegociacao = tfm.getLong("idNegociacao");
    	String dsNegociacao = tfm.getString("dsNegociacao");
    	List idsOcorrenciaNaoConformidade = tfm.getList("idsOcorrenciaNaoConformidade");
    	return getNegociacaoService().storeByRegistrarNegociacoes(idNegociacao, dsNegociacao, idsOcorrenciaNaoConformidade);
	}


    public ResultSetPage findPaginatedCustom(TypedFlatMap criteria) {
    	Long idNaoConformidade = criteria.getLong("ocorrenciaNaoConformidade.naoConformidade.idNaoConformidade"); 
    	Long idOcorrenciaNaoConformidade = criteria.getLong("ocorrenciaNaoConformidade.idOcorrenciaNaoConformidade");
    	ResultSetPage rsp = getNegociacaoService().findPaginatedCustom(idNaoConformidade, idOcorrenciaNaoConformidade, FindDefinition.createFindDefinition(criteria));
    	List novaLista = new ArrayList();
    	for (Iterator iter = rsp.getList().iterator(); iter.hasNext();) {
    		TypedFlatMap map = (TypedFlatMap)iter.next();
    		TypedFlatMap tfm = new TypedFlatMap();
    		tfm.put("idNegociacao", map.get("idNegociacao"));
    		tfm.put("ocorrenciaNaoConformidade.nrOcorrenciaNc", map.get("nrOcorrenciaNc"));
    		tfm.put("ocorrenciaNaoConformidade.motivoAberturaNc.dsMotivoAbertura", map.get("dsMotivoAbertura"));
    		tfm.put("dsNegociacao", map.get("dsNegociacao"));
    		tfm.put("usuario.nmUsuario", map.get("nmUsuario"));
    		tfm.put("ocorrenciaNaoConformidade.filialByIdFilialLegado.sgFilial", map.get("sgFilialLegado"));
    		tfm.put("ocorrenciaNaoConformidade.nrRncLegado", map.get("nrRncLegado"));
    		tfm.put("dhNegociacao", map.get("dhNegociacao"));
    		novaLista.add(tfm);
    	}
    	rsp.setList(novaLista);
    	return rsp;
    }


    public Integer getRowCountCustom(TypedFlatMap criteria) {
    	Long idNaoConformidade = criteria.getLong("ocorrenciaNaoConformidade.naoConformidade.idNaoConformidade"); 
    	Long idOcorrenciaNaoConformidade = criteria.getLong("ocorrenciaNaoConformidade.idOcorrenciaNaoConformidade");
    	
    	return getNegociacaoService().getRowCountCustom(idNaoConformidade, idOcorrenciaNaoConformidade);
    }

    /**
     * Busca 'Ocorrencias de Não Conformidade' que sejam de uma 'Não conformidade'
     * em específico
     * 
     * @param criteria
     * @return
     */
    public List findOcorrenciaAbertasDeNaoConformidade(Map criteria) {
        
    	List campoOrdenacao = new ArrayList();
        campoOrdenacao.add("nrOcorrenciaNc:asc");
        campoOrdenacao.add("motivoAberturaNc_.dsMotivoAbertura:asc");
    	
        //Adiciona o criterio para pegar apenas ocorrencias que estejam abertas.
    	criteria.put("tpStatusOcorrenciaNc", "A");
    	List ocorrenciasNC = this.getOcorrenciaNaoConformidadeService().findListByCriteria(criteria, campoOrdenacao);
    	List newOcorrenciasNC = new ArrayList();
    	
    	if (ocorrenciasNC.size()<1) 
    		throw new BusinessException("LMS-12007");
    	
    	for (Iterator iter = ocorrenciasNC.iterator(); iter.hasNext();) {
    		OcorrenciaNaoConformidade onc = (OcorrenciaNaoConformidade) iter.next();
    		Map mapOcorrenciasNC = new HashMap();
    		mapOcorrenciasNC.put("idOcorrenciaNaoConformidade", onc.getIdOcorrenciaNaoConformidade());
    		mapOcorrenciasNC.put("nrOcorrenciaNc", onc.getNrOcorrenciaNc().toString() + " - " + onc.getMotivoAberturaNc().getDsMotivoAbertura());
    		mapOcorrenciasNC.put("dsOcorrenciaNc", onc.getDsOcorrenciaNc());
    		newOcorrenciasNC.add(mapOcorrenciasNC);
		}
    	return newOcorrenciasNC; 
    }
    
    /**
     * Busca algums dos dados do usuario logado, que está na sessão.
     * 
     * @return map
     */
    public TypedFlatMap getDataUsuario() {
    	Usuario usuario = SessionUtils.getUsuarioLogado();
    	Filial filial = SessionUtils.getFilialSessao();

    	TypedFlatMap map = new TypedFlatMap();
    	map.put("usuario.nmUsuario", usuario.getNmUsuario());
    	map.put("usuario.idUsuario", usuario.getIdUsuario());

    	map.put("filial.idFilial", filial.getIdFilial());
    	map.put("filial.sgFilial", filial.getSgFilial());
    	map.put("filial.pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
		return map;
    }
    
    public List findOcorrenciaNaoConformidade(Map criteria) {
    	List newOcorrenciasNC = new ArrayList();
    	if (((Map)criteria.get("naoConformidade"))!=null && StringUtils.isNotBlank((String)((Map)criteria.get("naoConformidade")).get("idNaoConformidade"))){
	        List campoOrdenacao = new ArrayList();
	        campoOrdenacao.add("nrOcorrenciaNc:asc");
	        campoOrdenacao.add("motivoAberturaNc_.dsMotivoAbertura:asc");
	        
	    	List ocorrenciasNC = this.getOcorrenciaNaoConformidadeService().findListByCriteria(criteria, campoOrdenacao);
	    	for (Iterator iter = ocorrenciasNC.iterator(); iter.hasNext();) {
	    		OcorrenciaNaoConformidade onc = (OcorrenciaNaoConformidade) iter.next();
	    		TypedFlatMap tfm = new TypedFlatMap();
	    		tfm.put("idOcorrenciaNaoConformidade", onc.getIdOcorrenciaNaoConformidade());
	    		tfm.put("nrOcorrenciaNc", onc.getNrOcorrenciaNc().toString() + " - " + onc.getMotivoAberturaNc().getDsMotivoAbertura());
	    		tfm.put("dsOcorrenciaNc", onc.getDsOcorrenciaNc());
	    		newOcorrenciasNC.add(tfm);
			}
    	}
    	return newOcorrenciasNC;
    }


    public List findFilialLookUp(Map criteria) {
    	return getFilialService().findLookup(criteria);
    }
    
    public List findNaoConformidadeLookUp(Map criteria) {
    	return getNaoConformidadeService().findLookup(criteria);
    }
}