package com.mercurio.lms.rnc.action;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.report.ReportActionSupport;
import com.mercurio.adsm.framework.util.FilterList;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.model.service.CtoInternacionalService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.pendencia.model.service.MdaService;
import com.mercurio.lms.rnc.model.NaoConformidade;
import com.mercurio.lms.rnc.model.service.NaoConformidadeService;
import com.mercurio.lms.rnc.report.EmitirRNCService;

/**
 * Generated by: ADSM ActionGenerator
 * 
 * Não inserir documentação após ou remover a tag do XDoclet a seguir. O valor
 * do <code>id</code> informado abaixo deve ser utilizado para referenciar
 * este serviço.
 * 
 * @spring.bean id="lms.rnc.emitirRNCAction"
 */

public class EmitirRNCAction extends ReportActionSupport {

    private NaoConformidadeService naoConformidadeService;
    private DomainValueService domainValueService;
    private FilialService filialService;
    private ConhecimentoService conhecimentoService;
    private CtoInternacionalService ctoInternacionalService;
    private MdaService mdaService;
    
    public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
	}
	public void setCtoInternacionalService(CtoInternacionalService ctoInternacionalService) {
		this.ctoInternacionalService = ctoInternacionalService;
	}
	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public void setMdaService(MdaService mdaService) {
		this.mdaService = mdaService;
	}
	public void setNaoConformidadeService(NaoConformidadeService naoConformidadeService) {
		this.naoConformidadeService = naoConformidadeService;
	}
	public void setEmitirRNCService(EmitirRNCService emitirRNCService) {
    	this.reportServiceSupport = emitirRNCService;
    }
    
    /**
     * Método que popula a combo de tipos de documento apenas com CTR, CRT, MDA, NFT, NTE e CTE.
     * 
     * @param criteria
     * @return List
     */
    public List findTipoDocumentoServico(Map criteria) {
        
    	//LMS-3934 : Retirar a opção MDA
    	List dominiosValidos = Arrays.asList("CTR", "CRT", "NFT", "CTE", "NTE");
    	
        List retorno = domainValueService.findByDomainNameAndValues("DM_TIPO_DOCUMENTO_SERVICO", dominiosValidos);
        return retorno;
    }

    /**
     * Método que busca os dados para a lookup de Não Conformidade.
     * Sobrescrito para retornar os mesmos dados do método findPaginated
     * utilizado na grid de Não Conformidade.
     * @param criteria
     * @return
     */
    public List findLookupNaoConformidade(Map criteria) {
        List list = naoConformidadeService.findLookup(criteria);
        List retorno = new ArrayList();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
            TypedFlatMap map = new TypedFlatMap();
            NaoConformidade nc = (NaoConformidade) iter.next();
            map.put("idNaoConformidade", nc.getIdNaoConformidade());
            map.put("nrNaoConformidade", nc.getNrNaoConformidade());
            map.put("filial.sgFilial", nc.getFilial().getSgFilial());
            map.put("tpStatusNaoConformidade", nc.getTpStatusNaoConformidade());

            if (nc.getDoctoServico() != null) {
            	map.put("idDocumentoServico", nc.getDoctoServico().getIdDoctoServico());
                map.put("tpDocumentoServico", nc.getDoctoServico().getTpDocumentoServico().getValue());
                map.put("nrDocumentoServico", nc.getDoctoServico().getNrDoctoServico());
                map.put("sgFilialByIdFilialOrigem", nc.getDoctoServico().getFilialByIdFilialOrigem().getSgFilial());
                map.put("idFilialByIdFilialOrigem", nc.getDoctoServico().getFilialByIdFilialOrigem().getIdFilial());
                
            }

            retorno.add(map);
        }
        return retorno;
    }


    /**
     * Busca a filial baseado no documento de serviço
     * @param criteria
     * @return
     */
    private List findLookupFilialByDocumentoServico(Map criteria) {
    	FilterList filter = new FilterList(filialService.findLookup(criteria)) {
			public Map filterItem(Object item) {
				Filial filial = (Filial)item;
    			TypedFlatMap typedFlatMap = new TypedFlatMap();
	    		typedFlatMap.put("idFilial", filial.getIdFilial());
		    	typedFlatMap.put("sgFilial", filial.getSgFilial());
				return typedFlatMap;
			}
    	};
    	return (List)filter.doFilter();
    }


    //  findLookup para o segundo campo da tag documento de serviço
    public List findLookupServiceDocumentFilialCTR(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }

     public List findLookupServiceDocumentFilialCRT(Map criteria) {
    	 return findLookupFilialByDocumentoServico(criteria);
     }
    
     public List findLookupServiceDocumentFilialMDA(Map criteria) {
    	 return findLookupFilialByDocumentoServico(criteria);
     }

     public List findLookupServiceDocumentFilialNFT(Map criteria) {
    	 return findLookupFilialByDocumentoServico(criteria);
     }
    
     public List findLookupServiceDocumentFilialNTE(Map criteria) {
    	 return findLookupFilialByDocumentoServico(criteria);
     }

     public List findLookupServiceDocumentFilialCTE(Map criteria) {
    	 return findLookupFilialByDocumentoServico(criteria);
     }

     //  findLookup para o terceiro campo da tag documento de serviço
     public List findLookupServiceDocumentNumberCTR(Map criteria) {
    	 return conhecimentoService.findLookup(criteria);
     }

     public List findLookupServiceDocumentNumberCTE(Map criteria) {
    	 return conhecimentoService.findLookup(criteria);
     }

     public List findLookupServiceDocumentNumberNTE(Map criteria) {
    	 return conhecimentoService.findLookup(criteria);
     }

     public List findLookupServiceDocumentNumberCRT(Map criteria) {
    	 return ctoInternacionalService.findLookup(criteria);
     }

     public List findLookupServiceDocumentNumberMDA(Map criteria) {
    	 return mdaService.findLookup(criteria);
     }

     public List findLookupServiceDocumentNumberNFT(Map criteria) {
    	 return findLookupServiceDocumentNumberCTR(criteria);
     }
     
     
 	public List findLookupFilialByNaoConformidade(Map criteria) {
    	List list = filialService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		Filial filial = (Filial)iter.next();
    		TypedFlatMap typedFlatMap = new TypedFlatMap();
    		typedFlatMap.put("idFilial", filial.getIdFilial());
    		typedFlatMap.put("sgFilial", filial.getSgFilial());
    		typedFlatMap.put("pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
    		retorno.add(typedFlatMap);
    	}
    	return retorno;
    }
 	
    // find não conformidade
    public TypedFlatMap findNaoConformidade(Map criteria) {
        List list = naoConformidadeService.find(criteria);
        TypedFlatMap tfm = new TypedFlatMap();
        if (!list.isEmpty()) {
        	NaoConformidade nc = (NaoConformidade)list.get(0);
        	tfm.put("idNaoConformidade", nc.getIdNaoConformidade());
        	tfm.put("nrNaoConformidade", nc.getNrNaoConformidade());
        	tfm.put("doctoServico.tpDocumentoServico.value", nc.getDoctoServico().getTpDocumentoServico().getValue());
        	tfm.put("tpStatusNaoConformidade.description", nc.getTpStatusNaoConformidade().getDescription().toString());
        	tfm.put("filial.idFilial", nc.getFilial().getIdFilial());
        	tfm.put("filial.sgFilial", nc.getFilial().getSgFilial());
        }
        return tfm;
    }
}
