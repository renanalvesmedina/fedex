package com.mercurio.lms.rnc.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.xml.sax.SAXParseException;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.util.FilterList;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.ControleCarga;
import com.mercurio.lms.carregamento.model.Manifesto;
import com.mercurio.lms.carregamento.model.service.ControleCargaService;
import com.mercurio.lms.carregamento.model.service.ManifestoService;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.Moeda;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.configuracoes.model.service.MoedaService;
import com.mercurio.lms.configuracoes.util.MapUtilsPlus;
import com.mercurio.lms.edi.model.NotaFiscalEdiItem;
import com.mercurio.lms.entrega.model.ManifestoEntrega;
import com.mercurio.lms.entrega.model.service.ManifestoEntregaService;
import com.mercurio.lms.expedicao.model.Awb;
import com.mercurio.lms.expedicao.model.NotaFiscalConhecimento;
import com.mercurio.lms.expedicao.model.service.AwbService;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.model.service.CtoAwbService;
import com.mercurio.lms.expedicao.model.service.CtoInternacionalService;
import com.mercurio.lms.expedicao.model.service.DoctoServicoService;
import com.mercurio.lms.expedicao.model.service.ManifestoInternacionalService;
import com.mercurio.lms.expedicao.model.service.ManifestoViagemNacionalService;
import com.mercurio.lms.expedicao.model.service.NotaFiscalConhecimentoService;
import com.mercurio.lms.expedicao.model.service.NotaFiscalEletronicaService;
import com.mercurio.lms.expedicao.util.AwbUtils;
import com.mercurio.lms.expedicao.util.ConstantesExpedicao;
import com.mercurio.lms.municipios.model.Empresa;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.EmpresaService;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.pendencia.model.service.MdaService;
import com.mercurio.lms.portaria.model.service.InformarChegadaTMSService;
import com.mercurio.lms.rnc.model.CaractProdutoOcorrencia;
import com.mercurio.lms.rnc.model.CaracteristicaProduto;
import com.mercurio.lms.rnc.model.CausaNaoConformidade;
import com.mercurio.lms.rnc.model.DescricaoPadraoNc;
import com.mercurio.lms.rnc.model.FotoOcorrencia;
import com.mercurio.lms.rnc.model.MotivoAberturaNc;
import com.mercurio.lms.rnc.model.NaoConformidade;
import com.mercurio.lms.rnc.model.NotaOcorrenciaNc;
import com.mercurio.lms.rnc.model.OcorrenciaNaoConformidade;
import com.mercurio.lms.rnc.model.service.CaractProdutoOcorrenciaService;
import com.mercurio.lms.rnc.model.service.CaracteristicaProdutoService;
import com.mercurio.lms.rnc.model.service.CausaNaoConformidadeService;
import com.mercurio.lms.rnc.model.service.DescricaoPadraoNcService;
import com.mercurio.lms.rnc.model.service.FotoOcorrenciaService;
import com.mercurio.lms.rnc.model.service.MotivoAberturaNcService;
import com.mercurio.lms.rnc.model.service.NaoConformidadeService;
import com.mercurio.lms.rnc.model.service.OcorrenciaNaoConformidadeService;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.service.ClienteService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.rnc.abrirRNCAction"
 */

public class AbrirRNCAction {
	
	private OcorrenciaNaoConformidadeService ocorrenciaNaoConformidadeService;
	private CaracteristicaProdutoService caracteristicaProdutoService;
	private FilialService filialService;
	private NaoConformidadeService naoConformidadeService;
	private MotivoAberturaNcService motivoAberturaNcService;
	private ControleCargaService controleCargaService;
	private EmpresaService empresaService;
	private DescricaoPadraoNcService descricaoPadraoNcService;
	private ClienteService clienteService;
	private CausaNaoConformidadeService causaNaoConformidadeService;
	private MoedaService moedaService;
	private DoctoServicoService doctoServicoService;
	private NotaFiscalConhecimentoService notaFiscalConhecimentoService;
	private ManifestoService manifestoService;
	private ManifestoEntregaService manifestoEntregaService;
	private ManifestoViagemNacionalService manifestoViagemNacionalService;
	private ManifestoInternacionalService manifestoInternacionalService;
	private ConhecimentoService conhecimentoService;
	private CtoInternacionalService ctoInternacionalService;
	private MdaService mdaService;
	private DomainValueService domainValueService;
	private FotoOcorrenciaService fotoOcorrenciaService;
	private CaractProdutoOcorrenciaService caractProdutoOcorrenciaService;
	private InformarChegadaTMSService informarChegadaTMSService;
	private ConfiguracoesFacade configuracoesFacade;
	private NotaFiscalEletronicaService notaFiscalEletronicaService;
	private CtoAwbService ctoAwbService;
	private AwbService awbService;

    public CaracteristicaProdutoService getCaracteristicaProdutoService() {
		return caracteristicaProdutoService;
	}

	public void setCaracteristicaProdutoService(
			CaracteristicaProdutoService caracteristicaProdutoService) {
		this.caracteristicaProdutoService = caracteristicaProdutoService;
	}

	public CaractProdutoOcorrenciaService getCaractProdutoOcorrenciaService() {
		return caractProdutoOcorrenciaService;
	}

	public void setCaractProdutoOcorrenciaService(
			CaractProdutoOcorrenciaService caractProdutoOcorrenciaService) {
		this.caractProdutoOcorrenciaService = caractProdutoOcorrenciaService;
	}

	public CausaNaoConformidadeService getCausaNaoConformidadeService() {
		return causaNaoConformidadeService;
	}

	public void setCausaNaoConformidadeService(
			CausaNaoConformidadeService causaNaoConformidadeService) {
		this.causaNaoConformidadeService = causaNaoConformidadeService;
	}

	public ConfiguracoesFacade getConfiguracoesFacade() {
		return configuracoesFacade;
	}
	
	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}
	
	public ClienteService getClienteService() {
		return clienteService;
	}

	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}

	public ConhecimentoService getConhecimentoService() {
		return conhecimentoService;
	}

	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
	}

	public ControleCargaService getControleCargaService() {
		return controleCargaService;
	}

	public void setControleCargaService(ControleCargaService controleCargaService) {
		this.controleCargaService = controleCargaService;
	}

	public CtoInternacionalService getCtoInternacionalService() {
		return ctoInternacionalService;
	}

	public void setCtoInternacionalService(
			CtoInternacionalService ctoInternacionalService) {
		this.ctoInternacionalService = ctoInternacionalService;
	}

	public DescricaoPadraoNcService getDescricaoPadraoNcService() {
		return descricaoPadraoNcService;
	}

	public void setDescricaoPadraoNcService(
			DescricaoPadraoNcService descricaoPadraoNcService) {
		this.descricaoPadraoNcService = descricaoPadraoNcService;
	}

	public DoctoServicoService getDoctoServicoService() {
		return doctoServicoService;
	}

	public void setDoctoServicoService(DoctoServicoService doctoServicoService) {
		this.doctoServicoService = doctoServicoService;
	}

	public DomainValueService getDomainValueService() {
		return domainValueService;
	}

	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}

	public EmpresaService getEmpresaService() {
		return empresaService;
	}

	public void setEmpresaService(EmpresaService empresaService) {
		this.empresaService = empresaService;
	}

	public FilialService getFilialService() {
		return filialService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public FotoOcorrenciaService getFotoOcorrenciaService() {
		return fotoOcorrenciaService;
	}

	public void setFotoOcorrenciaService(FotoOcorrenciaService fotoOcorrenciaService) {
		this.fotoOcorrenciaService = fotoOcorrenciaService;
	}

	public ManifestoEntregaService getManifestoEntregaService() {
		return manifestoEntregaService;
	}

	public void setManifestoEntregaService(
			ManifestoEntregaService manifestoEntregaService) {
		this.manifestoEntregaService = manifestoEntregaService;
	}

	public ManifestoInternacionalService getManifestoInternacionalService() {
		return manifestoInternacionalService;
	}

	public void setManifestoInternacionalService(
			ManifestoInternacionalService manifestoInternacionalService) {
		this.manifestoInternacionalService = manifestoInternacionalService;
	}

	public ManifestoService getManifestoService() {
		return manifestoService;
	}

	public void setManifestoService(ManifestoService manifestoService) {
		this.manifestoService = manifestoService;
	}

	public ManifestoViagemNacionalService getManifestoViagemNacionalService() {
		return manifestoViagemNacionalService;
	}

	public void setManifestoViagemNacionalService(
			ManifestoViagemNacionalService manifestoViagemNacionalService) {
		this.manifestoViagemNacionalService = manifestoViagemNacionalService;
	}

	public MdaService getMdaService() {
		return mdaService;
	}

	public void setMdaService(MdaService mdaService) {
		this.mdaService = mdaService;
	}

	public MoedaService getMoedaService() {
		return moedaService;
	}

	public void setMoedaService(MoedaService moedaService) {
		this.moedaService = moedaService;
	}

	public MotivoAberturaNcService getMotivoAberturaNcService() {
		return motivoAberturaNcService;
	}

	public void setMotivoAberturaNcService(
			MotivoAberturaNcService motivoAberturaNcService) {
		this.motivoAberturaNcService = motivoAberturaNcService;
	}

	public NaoConformidadeService getNaoConformidadeService() {
		return naoConformidadeService;
	}

	public void setNaoConformidadeService(
			NaoConformidadeService naoConformidadeService) {
		this.naoConformidadeService = naoConformidadeService;
	}

	public NotaFiscalConhecimentoService getNotaFiscalConhecimentoService() {
		return notaFiscalConhecimentoService;
	}

	public void setNotaFiscalConhecimentoService(
			NotaFiscalConhecimentoService notaFiscalConhecimentoService) {
		this.notaFiscalConhecimentoService = notaFiscalConhecimentoService;
	}

	public OcorrenciaNaoConformidadeService getOcorrenciaNaoConformidadeService() {
		return ocorrenciaNaoConformidadeService;
	}

	public void setOcorrenciaNaoConformidadeService(
			OcorrenciaNaoConformidadeService ocorrenciaNaoConformidadeService) {
		this.ocorrenciaNaoConformidadeService = ocorrenciaNaoConformidadeService;
	}

	public void removeById(java.lang.Long id) {
    	ocorrenciaNaoConformidadeService.removeById(id);
    }

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	ocorrenciaNaoConformidadeService.removeByIds(ids);
    }

    
    public TypedFlatMap getDataUsuario() {
    	Filial filial = SessionUtils.getFilialSessao();
    	Usuario usuario = SessionUtils.getUsuarioLogado();
    	TypedFlatMap tfm = new TypedFlatMap();
    	tfm.put("filial.idFilial", filial.getIdFilial());
    	tfm.put("usuario.idUsuario", usuario.getIdUsuario());
    	tfm.put("usuario.nmUsuario", usuario.getNmUsuario());
		return tfm;
    }

    public Map findManifestoComControleCargas(Long idDoctoServico) {
    	Map map = null;
    	if( !informarChegadaTMSService.validateDctoServicoChegada(idDoctoServico) ){
    		map = ocorrenciaNaoConformidadeService.findManifestoComControleCargas(idDoctoServico);
    	}
    	return map;
    }
    
    public void verificaMotivoAbertura(TypedFlatMap map) {
    }

    /**
     * 
     * @param criteria
     * @return
     */
    public List findMotivoAberturaNc(Map criteria) {
    	criteria.put("tpSituacao", "A");
    	List lista = motivoAberturaNcService.findOrderByDsMotivoAbertura(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = lista.iterator(); iter.hasNext();) {
			MotivoAberturaNc maNC = (MotivoAberturaNc)iter.next();
			TypedFlatMap tfm = new TypedFlatMap();
    		tfm.put("idMotivoAberturaNc", maNC.getIdMotivoAberturaNc());
    		tfm.put("dsMotivoAbertura", maNC.getDsMotivoAbertura().toString());
	    	tfm.put("blExigeDocServico", maNC.getBlExigeDocServico());
	    	tfm.put("blExigeValor", maNC.getBlExigeValor());
	    	tfm.put("blExigeQtdVolumes", maNC.getBlExigeQtdVolumes());
			retorno.add(tfm);
    	}
    	return retorno;
    }

    /**
     * 
     * @param criteria
     * @return
     */
    public List findLookupControleCarga(Map criteria) {
    	FilterList filter = new FilterList(controleCargaService.findLookup(criteria)) {
			public Map filterItem(Object item) {
				ControleCarga cc = (ControleCarga)item;
    			TypedFlatMap typedFlatMap = new TypedFlatMap();
	    		typedFlatMap.put("idControleCarga", cc.getIdControleCarga());
		    	typedFlatMap.put("nrControleCarga", cc.getNrControleCarga());
		    	typedFlatMap.put("filialByIdFilialOrigem.idFilial", cc.getFilialByIdFilialOrigem().getIdFilial());
		    	typedFlatMap.put("filialByIdFilialOrigem.sgFilial", cc.getFilialByIdFilialOrigem().getSgFilial());
		    	if (cc.getMeioTransporteByIdTransportado() != null) {
			    	typedFlatMap.put("meioTransporteByIdTransportado.nrFrota", cc.getMeioTransporteByIdTransportado().getNrFrota());
			    	typedFlatMap.put("meioTransporteByIdTransportado.nrIdentificador", cc.getMeioTransporteByIdTransportado().getNrIdentificador());
		    	}
		    	if (cc.getMeioTransporteByIdSemiRebocado() != null) {
			    	typedFlatMap.put("meioTransporteByIdSemiRebocado.nrFrota", cc.getMeioTransporteByIdSemiRebocado().getNrFrota());
			    	typedFlatMap.put("meioTransporteByIdSemiRebocado.nrIdentificador", cc.getMeioTransporteByIdSemiRebocado().getNrIdentificador());
		    	}
				return typedFlatMap;
			}
    	};
    	return (List)filter.doFilter();
    }

    
    public List findLookupEmpresa(Map criteria) {
    	return empresaService.findLookup(criteria);
    }

    /**
     * 
     * @param criteria
     * @return
     */
    public List findDescricaoPadraoNc(Map criteria) {
        List campoOrdenacao = new ArrayList();
        campoOrdenacao.add("dsPadraoNc:asc");
    	FilterList filter = new FilterList(descricaoPadraoNcService.findListByCriteria(criteria, campoOrdenacao)) {
			public Map filterItem(Object item) {
				DescricaoPadraoNc descricaoPadraoNc = (DescricaoPadraoNc)item;
    			TypedFlatMap typedFlatMap = new TypedFlatMap();
	    		typedFlatMap.put("idDescricaoPadraoNc", descricaoPadraoNc.getIdDescricaoPadraoNc());
		    	typedFlatMap.put("dsPadraoNc", descricaoPadraoNc.getDsPadraoNc());
				return typedFlatMap;
			}
    	};
    	return (List)filter.doFilter();

    }

    public List findLookupCliente(Map criteria) {
    	return clienteService.findLookup(criteria);
    }

    /**
     * 
     * @param criteria
     * @return
     */
    public List findCausaNaoConformidade(Map criteria) {
        List campoOrdenacao = new ArrayList();
        campoOrdenacao.add("dsCausaNaoConformidade:asc");
    	FilterList filter = new FilterList(causaNaoConformidadeService.findListByCriteria(criteria, campoOrdenacao)) {
			public Map filterItem(Object item) {
				CausaNaoConformidade causaNaoConformidade = (CausaNaoConformidade)item;
    			TypedFlatMap typedFlatMap = new TypedFlatMap();
	    		typedFlatMap.put("idCausaNaoConformidade", causaNaoConformidade.getIdCausaNaoConformidade());
		    	typedFlatMap.put("dsCausaNaoConformidade", causaNaoConformidade.getDsCausaNaoConformidade());
				return typedFlatMap;
			}
    	};
    	return (List)filter.doFilter();
    }

    /**
     * 
     * @param criteria
     * @return
     */
    public List findMoeda(Map criteria) {
    	FilterList filter = new FilterList(moedaService.find(criteria)) {
			public Map filterItem(Object item) {
				Moeda moeda = (Moeda)item;
    			TypedFlatMap typedFlatMap = new TypedFlatMap();
	    		typedFlatMap.put("idMoeda", moeda.getIdMoeda());
	    		typedFlatMap.put("siglaSimbolo", moeda.getSiglaSimbolo());
		    	typedFlatMap.put("sgMoeda", moeda.getSgMoeda());
				return typedFlatMap;
			}
    	};
    	return (List)filter.doFilter();
    }

    public TypedFlatMap findDataDoctoServico(Long idDoctoServico) {
    	TypedFlatMap map = doctoServicoService.findDoctoServicoByTpDocumento(idDoctoServico);
    	return map;
    }

    public List findNaoConformidade(Map criteria) {
    	List list = naoConformidadeService.find(criteria);
    	
    	List listaRetorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		NaoConformidade nc = (NaoConformidade)iter.next();
    		TypedFlatMap map = new TypedFlatMap(); 
    		map.put("idNaoConformidade", nc.getIdNaoConformidade());
    		map.put("nrNaoConformidade", nc.getNrNaoConformidade());
    		map.put("filial.idFilial", nc.getFilial().getIdFilial());
    		map.put("filial.sgFilial", nc.getFilial().getSgFilial());
    		if (nc.getDoctoServico() != null && nc.getDoctoServico().getMoeda() != null) {
    			map.put("doctoServico.moeda.idMoeda", nc.getDoctoServico().getMoeda().getIdMoeda());
    		}
    		listaRetorno.add(map);
    	}
    	return listaRetorno;
    }

    /**
     * 
     * @param criteria
     * @return
     */
    public List findNotaFiscalConhecimento(Map criteria) {
        List campoOrdenacao = new ArrayList();
        campoOrdenacao.add("nrNotaFiscal:asc");
    	FilterList filter = new FilterList(notaFiscalConhecimentoService.findListByCriteria(criteria, campoOrdenacao)) {
			public Map filterItem(Object item) {
				NotaFiscalConhecimento notaFiscalConhecimento = (NotaFiscalConhecimento)item;
    			TypedFlatMap typedFlatMap = new TypedFlatMap();
	    		typedFlatMap.put("idNotaFiscalConhecimento", notaFiscalConhecimento.getIdNotaFiscalConhecimento());
		    	typedFlatMap.put("nrNotaFiscal", notaFiscalConhecimento.getNrNotaFiscal());
				return typedFlatMap;
			}
    	};
    	List retorno = (List)filter.doFilter();
    	populateListaNotas(retorno);
    	return retorno;
    }

    /**
     * 
     * @param criteria
     * @return
     */
    public List findNotaFiscalMda(TypedFlatMap criteria) {
        Long idMda = criteria.getLong("mda.idDoctoServico");
    	FilterList filter = new FilterList(notaFiscalConhecimentoService.findListByCriteriaByMda(idMda)) {
			public Map filterItem(Object item) {
				NotaFiscalConhecimento notaFiscalConhecimento = (NotaFiscalConhecimento)item;
    			TypedFlatMap typedFlatMap = new TypedFlatMap();
	    		typedFlatMap.put("idNotaFiscalConhecimento", notaFiscalConhecimento.getIdNotaFiscalConhecimento());
		    	typedFlatMap.put("nrNotaFiscal", notaFiscalConhecimento.getNrNotaFiscal());
				return typedFlatMap;
			}
    	};
    	List retorno = (List)filter.doFilter();
    	populateListaNotas(retorno);
    	return retorno;
    }
    
    private void populateListaNotas(List lista) {
    	for (Iterator iter = lista.iterator(); iter.hasNext();) {
    		TypedFlatMap map = (TypedFlatMap)iter.next();
    		map.put("notaFiscalConhecimento.idNotaFiscalConhecimento", map.getLong("idNotaFiscalConhecimento"));
    		map.remove("idNotaFiscalConhecimento");
    	}
    }

    
    public TypedFlatMap storeRNC(TypedFlatMap map) {
		List notaOcorrenciaNcs = map.getList("notaOcorrenciaNcs");
		if (notaOcorrenciaNcs == null || notaOcorrenciaNcs.isEmpty()) {
			notaOcorrenciaNcs = map.getList("notaOcorrenciaNcs2");
		}
	
		List listaNotaOcorrenciaNcs = new ArrayList();
		if (notaOcorrenciaNcs != null) {
			for (Iterator iter = notaOcorrenciaNcs.iterator(); iter.hasNext();) {
				TypedFlatMap mapNotas = (TypedFlatMap)iter.next();
				Long idNotaFiscalConhecimento = mapNotas.getLong("notaFiscalConhecimento.idNotaFiscalConhecimento");
				if (idNotaFiscalConhecimento != null) {
					NotaFiscalConhecimento nfConhecimento = notaFiscalConhecimentoService.findById(idNotaFiscalConhecimento);
					NotaOcorrenciaNc notaOcorrenciaNc = new NotaOcorrenciaNc();
					notaOcorrenciaNc.setNrNotaFiscal( mapNotas.getInteger("nrNotaFiscal") );
					notaOcorrenciaNc.setNotaFiscalConhecimento(nfConhecimento);
					listaNotaOcorrenciaNcs.add(notaOcorrenciaNc);
				}
				else {
					NotaOcorrenciaNc notaOcorrenciaNc = new NotaOcorrenciaNc();
					notaOcorrenciaNc.setNrNotaFiscal( mapNotas.getInteger("nrNotaFiscal") );
					listaNotaOcorrenciaNcs.add(notaOcorrenciaNc);
				}
			}
		}
		
		Long idAwb = map.getLong("naoConformidade.awb");
		if(idAwb == null){
			idAwb = map.getLong("awb.idAwb");
		}

		Long idOcorrenciaNaoConformidade = (Long)ocorrenciaNaoConformidadeService.storeRNC(
				map.getLong("manifesto.idManifesto"), map.getLong("doctoServico.idDoctoServico"), 
				map.getLong("motivoAberturaNc.idMotivoAberturaNc"), map.getLong("controleCarga.idControleCarga"), 
				map.getLong("empresa.idEmpresa"), map.getLong("descricaoPadraoNc.idDescricaoPadraoNc"), 
				map.getLong("filialByIdFilialResponsavel.idFilial"), map.getLong("causaNaoConformidade.idCausaNaoConformidade"),
				map.getLong("moeda.idMoeda"), map.getString("dsOcorrenciaNc"), map.getBoolean("blCaixaReaproveitada"),
				map.getString("dsCaixaReaproveitada"), map.getString("dsCausaNc"), map.getBigDecimal("vlOcorrenciaNc"),
				map.getInteger("qtVolumes"),
				map.getLong("naoConformidade.clienteByIdClienteDestinatario.idCliente"),
				map.getLong("naoConformidade.clienteByIdClienteRemetente.idCliente"),
				listaNotaOcorrenciaNcs,
				map.getString("naoConformidade.dsMotivoAbertura"),
				map.getList("itensGrid"),
				idAwb,
				map.getString("naoConformidade.tpModal"), null, map.getString("naoConformidade.causadorRnc"), null);

		OcorrenciaNaoConformidade onc = ocorrenciaNaoConformidadeService.findByIdCustom(idOcorrenciaNaoConformidade);
		TypedFlatMap tfm = new TypedFlatMap();
		tfm.put("idOcorrenciaNaoConformidade", idOcorrenciaNaoConformidade);
		tfm.put("naoConformidade.idNaoConformidade", onc.getNaoConformidade().getIdNaoConformidade());
    	tfm.put("naoConformidade.nrNaoConformidade", onc.getNaoConformidade().getNrNaoConformidade());
    	tfm.put("naoConformidade.filial.sgFilial", onc.getNaoConformidade().getFilial().getSgFilial());
    	tfm.put("naoConformidade.filial.idFilial", onc.getNaoConformidade().getFilial().getIdFilial());
    	tfm.put("naoConformidade.dhInclusao", onc.getNaoConformidade().getDhInclusao());
    	tfm.put("dhInclusao", onc.getDhInclusao());
    	
    	if("AGP".equals(onc.getNaoConformidade().getTpStatusNaoConformidade().getValue())){
    		tfm.put("lmsMensagem", this.getConfiguracoesFacade().getMensagem("LMS-12021"));
    	}
    	
		return tfm;
	}

	
    public List findManifestoByRNC(Long idManifesto) {
    	List lista = manifestoService.findManifestoByRNC(idManifesto);
    	return lista; 
    }


    public List findLookupManifesto(TypedFlatMap criteria) {
    	String tipoManifesto = criteria.getString("manifesto.tpManifesto");
		criteria.put("filialOrigem.idFilial", criteria.get("manifesto.filialByIdFilialOrigem.idFilial"));
    	if("EN".equals(tipoManifesto)){
    		return findLookupManifestoDocumentNumberEN(criteria);
    	}else if("VN".equals(tipoManifesto)){
    		return findLookupManifestoDocumentNumberVN(criteria);
    	}
		return null;
    }

    public List findLookupManifestoDocumentFilialEN(Map criteria) {
    	return findLookupFilialByManifesto(criteria);
    }

    public List findLookupManifestoDocumentFilialVN(Map criteria) {
    	return findLookupFilialByManifesto(criteria);
    }

    public List findLookupManifestoDocumentFilialVI(Map criteria) {
    	return findLookupFilialByManifesto(criteria);
    }
    
    public List findLookupFilialByManifesto(Map criteria) {
    	List list = filialService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		Filial filial = (Filial)iter.next();
    		TypedFlatMap typedFlatMap = new TypedFlatMap();
    		typedFlatMap.put("idFilial", filial.getIdFilial());
    		typedFlatMap.put("sgFilial", filial.getSgFilial());
    		typedFlatMap.put("pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
    		retorno.add(typedFlatMap);
    	}
    	return retorno;
    }
    

    public List findLookupManifestoDocumentNumberEN(TypedFlatMap criteria) {
    	criteria.put("manifesto.tpManifesto", "E");
    	criteria.put("nrManifestoEntrega", criteria.getInteger("nrManifestoOrigem"));
    	criteria.put("filial.idFilial",criteria.getLong("manifesto.filialByIdFilialOrigem.idFilial"));
    	List list = manifestoEntregaService.findLookupByTagManifesto(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		ManifestoEntrega manifestoEntrega = (ManifestoEntrega)iter.next();
    		TypedFlatMap typedFlatMap = new TypedFlatMap();
    		typedFlatMap.put("idManifestoEntrega", manifestoEntrega.getIdManifestoEntrega());
    		//CQPRO00029003 - a Tela espera por 'idManifesto'
    		typedFlatMap.put("idManifesto", manifestoEntrega.getIdManifestoEntrega());
    		typedFlatMap.put("nrManifestoEntrega", manifestoEntrega.getNrManifestoEntrega());
    		typedFlatMap.put("idFilialManifesto", manifestoEntrega.getManifesto().getFilialByIdFilialOrigem().getIdFilial());
    		typedFlatMap.put("sgFilialManifesto", manifestoEntrega.getManifesto().getFilialByIdFilialOrigem().getSgFilial());
    		typedFlatMap.put("nmFantasiaFilialManifesto", manifestoEntrega.getManifesto().getFilialByIdFilialOrigem().getPessoa().getNmFantasia());
    		retorno.add(typedFlatMap);
    	}
    	return retorno;
    }

    public List findLookupManifestoDocumentNumberVN(Map criteria) {
    	List list = manifestoViagemNacionalService.findLookupFilterDoctoServico(criteria);
    	List<Manifesto> lista = new ArrayList<Manifesto>();

    	//Adicionado o teste. Assim uma lista vazia será retornada resultando em um aviso na tela.
    	//CQPRO00028744
    	if (list != null && list.size() > 0) {
    	Object[] bag = (Object[])list.get(0);
    	lista.add((Manifesto)bag[1]);
    	}
    	return lista;
    }

    public List findLookupManifestoDocumentNumberVI(Map criteria) {
    	List list = manifestoInternacionalService.findLookup(criteria);
    	return list;
    }
    
    /**
     * 
     * @param criteria
     * @return
     */
    public List findLookupServiceDocumentNumberCTR(Map criteria) {
    	return conhecimentoService.findLookup(criteria);
    }

    /**
     * 
     * @param criteria
     * @return
     */
    public List findLookupServiceDocumentNumberCRT(Map criteria) {
    	return ctoInternacionalService.findLookup(criteria);
    }

    /**
     * 
     * @param criteria
     * @return
     */
    public List findLookupServiceDocumentNumberMDA(Map criteria) {
    	return mdaService.findLookup(criteria);
    }

    /**
     * 
     * @param criteria
     * @return
     */
    public List findLookupServiceDocumentNumberNFT(Map criteria) {
    	return findLookupServiceDocumentNumberCTR(criteria);
    }

    public List findLookupServiceDocumentNumberCTE(Map criteria) {
    	return conhecimentoService.findLookup(criteria);
    }
    
    public List findLookupServiceDocumentFilialCTR(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }

    public List findLookupServiceDocumentFilialCRT(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }

    public List findLookupServiceDocumentFilialMDA(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }

    public List findLookupServiceDocumentFilialNFT(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }
    
    public List findLookupServiceDocumentFilialCTE(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }
    
    public List findLookupFilialByDocumentoServico(Map criteria) {
    	List list = filialService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		Filial filial = (Filial)iter.next();
    		TypedFlatMap typedFlatMap = new TypedFlatMap();
    		typedFlatMap.put("idFilial", filial.getIdFilial());
    		typedFlatMap.put("sgFilial", filial.getSgFilial());
    		typedFlatMap.put("pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
    		retorno.add(typedFlatMap);
    	}
    	return retorno;
    }
    
    public List findTipoDocumentoServico(Map criteria) {
    	List dominiosValidos = new ArrayList();
    	dominiosValidos.add("CTR");
    	dominiosValidos.add("CRT");
    	dominiosValidos.add("NFT");
    	dominiosValidos.add("CTE");
    	dominiosValidos.add("NTE");
    	List retorno = domainValueService.findByDomainNameAndValues("DM_TIPO_DOCUMENTO_SERVICO", dominiosValidos);
    	return retorno;
    }

    public List findTipoManifesto(Map criteria) {
    	List dominiosValidos = new ArrayList();
    	dominiosValidos.add("EN");
    	dominiosValidos.add("VN");
    	List retorno = domainValueService.findByDomainNameAndValues("DM_TAG_MANIFESTO", dominiosValidos);
    	return retorno;
    }

    
    public void validatePreConditions(TypedFlatMap map) {
    	ocorrenciaNaoConformidadeService.validateManifestoPreenhidoRnc(map);
		
    	ocorrenciaNaoConformidadeService.validatePreConditionsByRnc(
					map.getLong("idDoctoServico"), map.getInteger("qtVolumes"),
												map.getBigDecimal("vlOcorrenciaNc"),
												map.getLong("idManifesto"));
    
    }

    public void validateInsercaoBoObrigatorio(TypedFlatMap map) {
		Boolean isBoObrigatorio = map.getBoolean("blObrigaBO");
	}
    
    public TypedFlatMap findChaveNfe(TypedFlatMap map) {
    	String nrChaveNfe = map.getString("nrChaveNfe");
    	String cpfCnpjCliente = map.getString("cpfCnpjCliente");

    	// Busca o cliente conforme o cnpj/cpf da chave da nfe 
    	List cliente = clienteService.findLookupCliente(cpfCnpjCliente);

    	List<NotaFiscalEdiItem> itensNFe = null; 
    	        
    	try {
            // LMSA-4975
            // incluida mensagem negocio para erro de parse XML quando xml cte invalido
    	    itensNFe = notaFiscalEletronicaService.findNfeItensByNrChave(nrChaveNfe);
    	} catch (Exception e) {
    	    if (e instanceof SAXParseException || e.getCause() instanceof SAXParseException) {
    	        throw new BusinessException("LMS-12028");
    	    }
    	    throw new BusinessException("Erro não tratado", e);
    	}

		/*
		 * Pesquisar os itens da Nota Fiscal Eletrônica; caso não encontre
		 * mostrar mensagem LMS-12025 (Esta Nota fiscal não possui itens
		 * cadastrados. Chave de NF-e Inválida).
		 */
    	if (itensNFe == null || itensNFe.isEmpty()) {
    		throw new BusinessException("LMS-12025");
    	}
    	
    	map.put("nfe", montaListItensNFe(itensNFe, nrChaveNfe));
    	map.put("cliente", cliente.isEmpty() ? null : cliente.get(0));
    	
    	return map;
    }
    
    /**
     * Apartir do list de retorno do servico buscando na function os valores, é montado o map
     * 
     * @param itemNFe
     * @return
     */
	private List<TypedFlatMap> montaListItensNFe(List<NotaFiscalEdiItem> itensNFe, String nrChaveNFe) {
    	List<TypedFlatMap> nfe = new ArrayList<TypedFlatMap>();

    	// Extrai a nota fiscal da chave NFe
    	String notaFiscal = nrChaveNFe.substring(25, 34);

		for (NotaFiscalEdiItem notaFiscalEdiItem : itensNFe) {
			TypedFlatMap itemNFe = new TypedFlatMap();
			itemNFe.put("itensNFe.id", nrChaveNFe);
			itemNFe.put("itensNFe.notaFiscal", notaFiscal);
			itemNFe.put("itensNFe.item", notaFiscalEdiItem.getNumeroItem());
			itemNFe.put("itensNFe.descricao", notaFiscalEdiItem.getDescricaoItem());
			itemNFe.put("itensNFe.qtdeAnterior", notaFiscalEdiItem.getQtdeItem());
			itemNFe.put("itensNFe.valor", notaFiscalEdiItem.getVlTotalItem());

			nfe.add(itemNFe);
		}
		
		return nfe;
    }

	public FotoOcorrencia findByIdFotoOcorrencia(Long id) {
		return fotoOcorrenciaService.findById(id);
	}

    public Serializable storeFotoOcorrencia(FotoOcorrencia bean) {
    	return fotoOcorrenciaService.storeFotoOcorrencia(bean);
    }
    
	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIdsFotoOcorrencia(List ids) {
    	fotoOcorrenciaService.removeByIds(ids);
    }

    public ResultSetPage findPaginatedFotoOcorrencia(Map criteria) {
    	return fotoOcorrenciaService.findPaginated(criteria);
    }

    public Integer getRowCountFotoOcorrencia(Map criteria) {
    	return fotoOcorrenciaService.getRowCount(criteria);
    }

    
    
    public CaractProdutoOcorrencia findByIdCaractProdutoOcorrencia(Long id) {
    	return caractProdutoOcorrenciaService.findById(id);
    }

    public Serializable storeCaractProdutoOcorrencia(CaractProdutoOcorrencia bean) {
    	return caractProdutoOcorrenciaService.store(bean);
    }
    
	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIdsCaractProdutoOcorrencia(List ids) {
    	caractProdutoOcorrenciaService.removeByIds(ids);
    }

    public ResultSetPage findPaginatedCaractProdutoOcorrencia(Map criteria) {
    	return caractProdutoOcorrenciaService.findPaginated(criteria);
    }

    public Integer getRowCountCaractProdutoOcorrencia(Map criteria) {
    	return caractProdutoOcorrenciaService.getRowCount(criteria);
    }

    public List findLookupFilialByControleCarga(Map criteria) {
    	List list = filialService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		Filial filial = (Filial)iter.next();
    		TypedFlatMap typedFlatMap = new TypedFlatMap();
    		typedFlatMap.put("idFilial", filial.getIdFilial());
    		typedFlatMap.put("sgFilial", filial.getSgFilial());
    		typedFlatMap.put("pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
    		retorno.add(typedFlatMap);
    	}
    	return retorno;
    }

    /**
     * 
     * @param criteria
     * @return
     */
    public List findCaracteristicaProduto(Map criteria) {
        List campoOrdenacao = new ArrayList();
        campoOrdenacao.add("dsCaracteristicaProduto:asc");
    	FilterList filter = new FilterList(caracteristicaProdutoService.findListByCriteria(criteria, campoOrdenacao)) {
			public Map filterItem(Object item) {
				CaracteristicaProduto caracteristicaProduto = (CaracteristicaProduto)item;
    			TypedFlatMap typedFlatMap = new TypedFlatMap();
	    		typedFlatMap.put("idCaracteristicaProduto", caracteristicaProduto.getIdCaracteristicaProduto());
		    	typedFlatMap.put("dsCaracteristicaProduto", caracteristicaProduto.getDsCaracteristicaProduto());
				return typedFlatMap;
			}
    	};
    	return (List)filter.doFilter();
    }
    
    public Moeda findMoedaUsuario(){
    	return SessionUtils.getMoedaSessao();
    } 
    
    /**
     * Gera o alert do PCE.
     * 
     * @param criteria
     * @return
     */
    public TypedFlatMap validatePCE(TypedFlatMap criteria) {
    	Long idClienteRemetente = criteria.getLong("remetente");
    	Long idClienteDestinatario = criteria.getLong("destinatario");
    	return this.getOcorrenciaNaoConformidadeService().validatePCE(idClienteRemetente, idClienteDestinatario);
    }

	public void setInformarChegadaTMSService(
			InformarChegadaTMSService informarChegadaTMSService) {
		this.informarChegadaTMSService = informarChegadaTMSService;
	}
	
	public void setNotaFiscalEletronicaService(NotaFiscalEletronicaService notaFiscalEletronicaService) {
		this.notaFiscalEletronicaService = notaFiscalEletronicaService;
	}
	
	public Boolean findDoctoServicoMCCT(TypedFlatMap criteria){
		return motivoAberturaNcService.findDoctoServicoMCCT(criteria.getLong("idDoctoServico"));
	}
	
	public TypedFlatMap findNrChave(TypedFlatMap criteria){
		 TypedFlatMap tpm = new TypedFlatMap();
		if( motivoAberturaNcService.findNrChave(criteria.getLong("idDoctoServico")) != null){
			tpm.put("nrChave", motivoAberturaNcService.findNrChave(criteria.getLong("idDoctoServico")));
		}else{
			 tpm.put("nrChave", ""); 	
		}
		
		return tpm;
	}
	
	public List<Map<String, Object>> findAwbsDoctoServico(TypedFlatMap criteria){
		List<Map<String, Object>> awbsFormatados = new ArrayList<Map<String,Object>>();
		List<Map<String, Object>> awbs = ctoAwbService.findAwbForDocto(criteria.getLong("conhecimento.idDoctoServico"));
		for (Map<String, Object> awb : awbs){
			Map<String, Object> awbFormatado = new HashMap<String, Object>();
			awbFormatado.put("idAwb", awb.get("ID_AWB").toString());
			awbFormatado.put("dsAwbFormatado",awb.get("SG_EMPRESA").toString() + " " + 
												AwbUtils.getNrAwbFormated(awb.get("DS_SERIE").toString(),
																			MapUtilsPlus.getLong(awb, "NR_AWB"),
																			MapUtilsPlus.getInteger(awb, "DV_AWB")));
			awbsFormatados.add(awbFormatado);
		}
		return awbsFormatados;
	}
	
	public List findLookupSgCiaAerea(Map criteria) {
		TypedFlatMap mapResult = new TypedFlatMap();
		List listResult = new ArrayList();
		
		criteria.put("tpEmpresa", ConstantesExpedicao.TP_EMPRESA_CIA_AEREA);
		criteria.put("sgEmpresa", criteria.get("sgEmpresa").toString().toUpperCase());
		
		List ciaList = empresaService.findLookupEmpresaAwb(criteria);
		if (ciaList != null && !ciaList.isEmpty()) {
			for (int i = 0; i < ciaList.size(); i++) {
				Empresa ciaAerea = (Empresa) ciaList.get(i);
				mapResult.put("idEmpresa", ciaAerea.getIdEmpresa());
				mapResult.put("sgEmpresa", ciaAerea.getSgEmpresa());
				
				listResult.add(mapResult);
			}
		}		
		
		return listResult;
	}
	
	public List findLookupAwb(Map criteria) {
		TypedFlatMap mapResult = new TypedFlatMap();
		List listResult = new ArrayList();
		
		if(ConstantesExpedicao.TP_STATUS_AWB_EMITIDO.equals(criteria.get("tpStatusAwb").toString())){
			Awb awbAux = AwbUtils.splitNrAwb(criteria.get("nrAwb").toString());
			
			if(awbAux.getNrAwb() != null){
				criteria.put("nrAwb", awbAux.getNrAwb());
				criteria.put("dsSerie", awbAux.getDsSerie());
				criteria.put("dvAwb", awbAux.getDvAwb());
			}
		}else{
			criteria.put("idAwb", criteria.get("nrAwb"));
			criteria.remove("nrAwb");
		}
			
		List awbList = awbService.findLookup(criteria);
		if (awbList != null && !awbList.isEmpty()) {
			for (int i = 0; i < awbList.size(); i++) {
				Awb awb = (Awb) awbList.get(i);
				
				if(ConstantesExpedicao.TP_STATUS_AWB_EMITIDO.equals(awb.getTpStatusAwb().getValue())){
					mapResult.put("idAwb", awb.getIdAwb());
					mapResult.put("nrAwb", AwbUtils.getNrAwb(awb));
					mapResult.put("nrAwbFormatado",  AwbUtils.getNrAwbFormated(awb));
				}else{
					mapResult.put("idAwb", awb.getIdAwb());
					mapResult.put("nrAwb", awb.getIdAwb());
					mapResult.put("nrAwbFormatado",  awb.getIdAwb());
				}
				
				listResult.add(mapResult);
			}
		}		
		
		return listResult;
	}
	
	public TypedFlatMap findDadosColetaAwb(TypedFlatMap criteria){
		Long idAwb = criteria.getLong("idAwb");
		TypedFlatMap tfm = awbService.findDadosColetaAwb(idAwb, null);
		
		return tfm;
	}	

	public CtoAwbService getCtoAwbService() {
		return ctoAwbService;
	}

	public void setCtoAwbService(CtoAwbService ctoAwbService) {
		this.ctoAwbService = ctoAwbService;
	}
	public void setAwbService(AwbService awbService) {
		this.awbService = awbService;
	}
}