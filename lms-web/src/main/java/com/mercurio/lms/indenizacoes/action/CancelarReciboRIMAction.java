package com.mercurio.lms.indenizacoes.action;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.FindDefinition;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.FilterList;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.configuracoes.model.service.PessoaService;
import com.mercurio.lms.indenizacoes.model.MotivoCancelamentoRim;
import com.mercurio.lms.indenizacoes.model.ReciboIndenizacao;
import com.mercurio.lms.indenizacoes.model.service.DoctoServicoIndenizacaoService;
import com.mercurio.lms.indenizacoes.model.service.MotivoCancelamentoRimService;
import com.mercurio.lms.indenizacoes.model.service.ReciboIndenizacaoService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.HistoricoFilialService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.indenizacoes.cancelarReciboRIMAction"
 */

public class CancelarReciboRIMAction extends CrudAction {
	private FilialService filialService;
	private PessoaService pessoaService;
	private ReciboIndenizacaoService reciboIndenizacaoService;
	private DoctoServicoIndenizacaoService doctoServicoIndenizacaoService;
	private MotivoCancelamentoRimService motivoCancelamentoRimService;
	
	private HistoricoFilialService historicoFilialService;
	
	public HistoricoFilialService getHistoricoFilialService() {
		return historicoFilialService;
	}

	public void setHistoricoFilialService(HistoricoFilialService historicoFilialService) {
		this.historicoFilialService = historicoFilialService;
	}
	
	public ResultSetPage findDoctosServicosByRim(TypedFlatMap tfm ) {
		Long idRim = tfm.getLong("reciboIndenizacao.idReciboIndenizacao");
		return doctoServicoIndenizacaoService.findDoctoServicosByIdReciboIndenizacao(idRim, FindDefinition.createFindDefinition(tfm));
	}

	public Integer getRowCountDoctosServicosByRim(TypedFlatMap tfm ) {
		Long idRim = tfm.getLong("reciboIndenizacao.idReciboIndenizacao");
		return doctoServicoIndenizacaoService.getRowCountDoctoServicosByIdReciboIndenizacao(idRim);
	}

    public List findLookupFilial(Map map) {
    	FilterList filter = new FilterList(filialService.findLookup(map)) {
			public Map filterItem(Object item) {
				Filial filial = (Filial)item;
    			TypedFlatMap typedFlatMap = new TypedFlatMap();
	    		typedFlatMap.put("idFilial", filial.getIdFilial());
		    	typedFlatMap.put("sgFilial",  filial.getSgFilial());
		    	typedFlatMap.put("pessoa.nmFantasia",  filial.getPessoa().getNmFantasia());
				return typedFlatMap;
			}
    	};
    	return (List)filter.doFilter();
    }
    
    public List findReciboIndenizacao(TypedFlatMap criteria) {
    	Long idFilial = criteria.getLong("filial.idFilial");
    	Integer nrReciboIndenizacao = criteria.getInteger("nrReciboIndenizacao");
    	Long idReciboIndenizacao = criteria.getLong("idReciboIndenizacao");
    	List result = reciboIndenizacaoService.findReciboIndenizacaoToProcessosRim(idFilial, nrReciboIndenizacao, idReciboIndenizacao);
    	TypedFlatMap typedFlatMap = new TypedFlatMap();
    	List retorno = new ArrayList();    	
    	if (result.size()>0){
    		typedFlatMap = (TypedFlatMap)result.get(0);
    		typedFlatMap.put("filialLogada.idFilial", SessionUtils.getFilialSessao().getIdFilial());
    		Boolean blFilialUsuario = Boolean.valueOf(getHistoricoFilialService().validateFilialUsuarioMatriz(SessionUtils.getFilialSessao().getIdFilial()));
    		
    		typedFlatMap.put("blFilialUsuario", blFilialUsuario);
    		
    		retorno.add(typedFlatMap);
    	}
    	
    	return retorno;
    }
    
	public TypedFlatMap findByIdReciboIndenizacao(Long idReciboIndenizacao) {
		
		ReciboIndenizacao reciboIndenizacao = reciboIndenizacaoService.findById(idReciboIndenizacao);				
		TypedFlatMap result = new TypedFlatMap();
		
		if (reciboIndenizacao.getTpBeneficiarioIndenizacao()!=null && reciboIndenizacao.getPessoaByIdBeneficiario()!=null) {
			String tpBeneficiario = reciboIndenizacao.getTpBeneficiarioIndenizacao().getValue();
			result.put("tpBeneficiarioIndenizacao", reciboIndenizacao.getTpBeneficiarioIndenizacao().getDescription().getValue());
			
			// se remetente, detinatario, consignatario ou devedor
			if (tpBeneficiario.equals("R") || tpBeneficiario.equals("D") || tpBeneficiario.equals("C") || tpBeneficiario.equals("V")) {
				result.put("clienteBeneficiario.pessoa.nrIdentificacao", FormatUtils.formatIdentificacao(reciboIndenizacao.getPessoaByIdBeneficiario()));
				result.put("clienteBeneficiario.pessoa.nmPessoa", reciboIndenizacao.getPessoaByIdBeneficiario().getNmPessoa());				
				
			// se terceiro
			} else if (tpBeneficiario.equals("T")) {
				Pessoa beneficiario = pessoaService.findById(reciboIndenizacao.getPessoaByIdBeneficiario().getIdPessoa());
				result.put("beneficiarioTerceiro.tpIdentificacao", beneficiario.getTpIdentificacao().getValue());
				result.put("beneficiarioTerceiro.nrIdentificacao", FormatUtils.formatIdentificacao(beneficiario));
				result.put("beneficiarioTerceiro.nmPessoa", beneficiario.getNmPessoa());
				
			// se filial
			} else {
				Filial beneficiario = filialService.findById(reciboIndenizacao.getPessoaByIdBeneficiario().getIdPessoa());
				result.put("filialBeneficiada.sgFilial", beneficiario.getSgFilial());
				result.put("filialBeneficiada.pessoa.nmFantasia", beneficiario.getPessoa().getNmFantasia());				
			}
		}
					
		if (reciboIndenizacao.getTpFavorecidoIndenizacao()!=null ) {
			String tpFavorecido = reciboIndenizacao.getTpFavorecidoIndenizacao().getValue();
			result.put("tpFavorecidoIndenizacao", reciboIndenizacao.getTpFavorecidoIndenizacao().getDescription().getValue());
			if (reciboIndenizacao.getPessoaByIdFavorecido()!=null) {
				// se remetente, detinatario, consignatario ou devedor
				if (tpFavorecido.equals("R") || tpFavorecido.equals("D") || tpFavorecido.equals("C") || tpFavorecido.equals("V")) {
					result.put("clienteFavorecido.pessoa.nrIdentificacao", FormatUtils.formatIdentificacao(reciboIndenizacao.getPessoaByIdBeneficiario()));
					result.put("clienteFavorecido.pessoa.nmPessoa", reciboIndenizacao.getPessoaByIdBeneficiario().getNmPessoa());				
					
				// se terceiro
				} else if (tpFavorecido.equals("T")) {
					Pessoa favorecido = pessoaService.findById(reciboIndenizacao.getPessoaByIdFavorecido().getIdPessoa());
					result.put("favorecidoTerceiro.tpIdentificacao", favorecido.getTpIdentificacao().getValue());
					result.put("favorecidoTerceiro.nrIdentificacao", FormatUtils.formatIdentificacao(favorecido));
					result.put("favorecidoTerceiro.nmPessoa", favorecido.getNmPessoa());
					
				// se filial
				} else {
					Filial favorecido = filialService.findById(reciboIndenizacao.getPessoaByIdFavorecido().getIdPessoa());
					result.put("filialFavorecida.sgFilial", favorecido.getSgFilial());
					result.put("filialFavorecida.pessoa.nmFantasia", favorecido.getPessoa().getNmFantasia());				
				}
			}
		}
				
		return result;
	}

    
    public List findComboMotivoCancelamento() {
    	List list = new ArrayList();
    	TypedFlatMap tfm = new TypedFlatMap();
    	tfm.put("tpCancelamento", "R");
    	tfm.put("tpSituacao",     "A");
    	for (Iterator it = motivoCancelamentoRimService.findOrdenadoPorDescricao(tfm).iterator(); it.hasNext(); ) {
    		MotivoCancelamentoRim motivoCancelamentoRim = (MotivoCancelamentoRim)it.next();
    		TypedFlatMap result = new TypedFlatMap();
    		result.put("idMotivoCancelamento", motivoCancelamentoRim.getIdMotivoCancelamentoRim());
    		result.put("dsMotivoCancelamento", motivoCancelamentoRim.getDsMotivoCancelamentoRim().getValue());
    		list.add(result);
    	}
    	return list;
    }
    
    public TypedFlatMap executeCancelarRIM(TypedFlatMap tfm) {    
    	
    	TypedFlatMap result = new TypedFlatMap();
    	Long idReciboIndenizacao = tfm.getLong("reciboIndenizacao.idReciboIndenizacao");
    	Long idMotivoCancelamentoRim = tfm.getLong("motivoCancelamento.idMotivoCancelamento");
    	
    	ReciboIndenizacao reciboIndenizacao = reciboIndenizacaoService.findReciboIndenizacaoById(idReciboIndenizacao);

    	// nao é permitido cancelar um recibo de indenizacao já cancelado ou pago
    	if (reciboIndenizacao.getTpStatusIndenizacao().getValue().equals("C") || reciboIndenizacao.getTpStatusIndenizacao().getValue().equals("P")) {
    		throw new BusinessException("LMS-21045");
    	}
    	
    	reciboIndenizacaoService.executeCancelarReciboIndenizacao(reciboIndenizacao, idMotivoCancelamentoRim);
    	result.put("tpStatusIndenizacao",reciboIndenizacao.getTpStatusIndenizacao().getDescription().getValue());
    	return result;
    }

	public void setDoctoServicoIndenizacaoService(
			DoctoServicoIndenizacaoService doctoServicoIndenizacaoService) {
		this.doctoServicoIndenizacaoService = doctoServicoIndenizacaoService;
	}

	public void setReciboIndenizacaoService(
			ReciboIndenizacaoService reciboIndenizacaoService) {
		this.reciboIndenizacaoService = reciboIndenizacaoService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public void setMotivoCancelamentoRimService(MotivoCancelamentoRimService motivoCancelamentoRimService) {
		this.motivoCancelamentoRimService = motivoCancelamentoRimService;
	}

	public void setPessoaService(PessoaService pessoaService) {
		this.pessoaService = pessoaService;
	}

	}
