package com.mercurio.lms.indenizacoes.action;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.joda.time.YearMonthDay;

import com.mercurio.adsm.framework.report.ReportActionSupport;
import com.mercurio.adsm.framework.util.FilterList;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.indenizacoes.report.EmitirRIMsEmitidosNaoPagosService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.Regional;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.HistoricoFilialService;
import com.mercurio.lms.municipios.model.service.RegionalService;
import com.mercurio.lms.rnc.model.MotivoAberturaNc;
import com.mercurio.lms.rnc.model.service.MotivoAberturaNcService;
import com.mercurio.lms.seguros.model.TipoSeguro;
import com.mercurio.lms.seguros.model.TipoSinistro;
import com.mercurio.lms.seguros.model.service.TipoSeguroService;
import com.mercurio.lms.seguros.model.service.TipoSinistroService;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 * 
 * Não inserir documentação após ou remover a tag do XDoclet a seguir. O valor
 * do <code>id</code> informado abaixo deve ser utilizado para referenciar
 * este serviço.
 * 
 * @spring.bean id="lms.indenizacoes.emitirRIMsEmitidosNaoPagosAction"
 */

public class EmitirRIMsEmitidosNaoPagosAction extends ReportActionSupport {
	
	private HistoricoFilialService historicoFilialService;
	private FilialService filialService;
	private RegionalService regionalService;
	private TipoSinistroService tipoSinistroService;
	private TipoSeguroService tipoSeguroService;
	private MotivoAberturaNcService motivoAberturaNcService;

	
	public HistoricoFilialService getHistoricoFilialService() {
		return historicoFilialService;
	}

	public void setHistoricoFilialService(HistoricoFilialService historicoFilialService) {
		this.historicoFilialService = historicoFilialService;
	}

	private MotivoAberturaNcService getMotivoAberturaNcService() {
		return motivoAberturaNcService;
	}

	public void setMotivoAberturaNcService(
			MotivoAberturaNcService motivoAberturaNcService) {
		this.motivoAberturaNcService = motivoAberturaNcService;
	}

	private TipoSeguroService getTipoSeguroService() {
		return tipoSeguroService;
	}

	public void setTipoSeguroService(TipoSeguroService tipoSeguroService) {
		this.tipoSeguroService = tipoSeguroService;
	}

	private TipoSinistroService getTipoSinistroService() {
		return tipoSinistroService;
	}

	public void setTipoSinistroService(TipoSinistroService tipoSinistroService) {
		this.tipoSinistroService = tipoSinistroService;
	}

	private RegionalService getRegionalService() {
		return regionalService;
	}

	public void setRegionalService(RegionalService regionalService) {
		this.regionalService = regionalService;
	}

	private FilialService getFilialService() {
		return filialService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	
	
	public void setEmitirRIMsEmitidosNaoPagosService(EmitirRIMsEmitidosNaoPagosService emitirRIMsEmitidosNaoPagosService ) {
		this.reportServiceSupport = emitirRIMsEmitidosNaoPagosService;
	}

	/**
	 * Consulta a filial pela sigla informada
	 */	
	public List findLookupFilial(Map criteria) {
		FilterList filter = new FilterList(this.getFilialService().findLookup(criteria)) {
			public Map filterItem(Object item) {
				Filial filial = (Filial) item;
				TypedFlatMap typedFlatMap = new TypedFlatMap();
				typedFlatMap.put("idFilial", filial.getIdFilial());
				typedFlatMap.put("sgFilial", filial.getSgFilial());
				typedFlatMap.put("pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
				return typedFlatMap;
			}
		};
		return (List) filter.doFilter();
	}

	/**
	 * Busca os dados da combo de regional
	 */
	public List findComboRegional(TypedFlatMap tfm) {
		YearMonthDay dataInicial = tfm.getYearMonthDay("dtInicial"); 
		YearMonthDay dataFinal = tfm.getYearMonthDay("dtFinal");
		
		FilterList filter = new FilterList(getRegionalService().findRegionaisVigentesPorPeriodo(dataInicial, dataFinal)) {
			public Map filterItem(Object item) {
				Regional regional = (Regional) item;
				TypedFlatMap typedFlatMap = new TypedFlatMap();
				typedFlatMap.put("idRegional", regional.getIdRegional());
				typedFlatMap.put("sgAndDsRegional", regional.getSgRegional() + " " + regional.getDsRegional());
				return typedFlatMap;
			}
		};
		return (List) filter.doFilter();
	}

	/**
	 * Busca os dados da combo de Tipo de Sinistro
	 */
	public List findComboTipoSinistro(Map criteria) {
		FilterList filter = new FilterList(this.getTipoSinistroService().findOrderByDsTipo(criteria)) {
			public Map filterItem(Object item) {
				TipoSinistro tipoSinistro = (TipoSinistro) item;
				TypedFlatMap typedFlatMap = new TypedFlatMap();
				typedFlatMap.put("idTipoSinistro", tipoSinistro.getIdTipoSinistro());
				typedFlatMap.put("dsTipo", tipoSinistro.getDsTipo());
				typedFlatMap.put("tpSituacao", tipoSinistro.getTpSituacao());
				return typedFlatMap;
			}
		};
		return (List) filter.doFilter();		
	}

	/**
	 * Busca os dados da combo de Tipo de Seguro
	 */
	public List findComboTipoSeguro(Map criteria) {
		FilterList filter = new FilterList(this.getTipoSeguroService().findOrderByDsTipo(criteria)) {
			public Map filterItem(Object item) {
				TipoSeguro tipoSeguro = (TipoSeguro) item;
				TypedFlatMap typedFlatMap = new TypedFlatMap();
				typedFlatMap.put("idTipoSeguro", tipoSeguro.getIdTipoSeguro());
				typedFlatMap.put("sgTipo", tipoSeguro.getSgTipo());
				typedFlatMap.put("tpSituacao", tipoSeguro.getTpSituacao());
				return typedFlatMap;
			}
		};
		return (List) filter.doFilter();		
		
	}
	
    /**
     * Busca os dados da combo de Motivo não conformidade
     */
    public List findComboMotivoAberturaNc(Map criteria) {
    	if (criteria==null) {
    		criteria = new HashMap(1);
    	}
    	
    	criteria.put("blPermiteIndenizacao", Boolean.TRUE);
    	FilterList filter = new FilterList(getMotivoAberturaNcService().findOrderByDsMotivoAbertura(criteria)) {
			public Map filterItem(Object item) {
				MotivoAberturaNc maNC = (MotivoAberturaNc)item;
    			TypedFlatMap typedFlatMap = new TypedFlatMap();
	    		typedFlatMap.put("idMotivoAberturaNc", maNC.getIdMotivoAberturaNc());
	    		typedFlatMap.put("dsMotivoAbertura", maNC.getDsMotivoAbertura());
	    		typedFlatMap.put("tpSituacao", maNC.getTpSituacao());
				return typedFlatMap;
			}
    	};
    	return (List)filter.doFilter();
    }
    
    
    public TypedFlatMap validateUsarioMatriz() {
    	Filial filialUsuario = SessionUtils.getFilialSessao();
    	Boolean blFilialUsuario = Boolean.valueOf(getHistoricoFilialService().validateFilialUsuarioMatriz(filialUsuario.getIdFilial()));
    	TypedFlatMap map = new TypedFlatMap();
    	map.put("blFilialUsuario", blFilialUsuario);
    	if (!blFilialUsuario.booleanValue()) {
	    	map.put("filial.idFilial", filialUsuario.getIdFilial());
	    	map.put("filial.sgFilial", filialUsuario.getSgFilial());
	    	map.put("filial.pessoa.nmFantasia", filialUsuario.getPessoa().getNmFantasia());
    	}
    	return map;
    }
}