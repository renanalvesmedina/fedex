package com.mercurio.lms.indenizacoes.action;

import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.core.InfrastructureException;
import com.mercurio.adsm.core.util.Base64Util;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.masterdetail.ItemListConfig;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailAction;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailFactory;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailKey;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntry;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntryConfig;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.ContaBancaria;
import com.mercurio.lms.configuracoes.model.Moeda;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.configuracoes.model.service.AgenciaBancariaService;
import com.mercurio.lms.configuracoes.model.service.BancoService;
import com.mercurio.lms.configuracoes.model.service.ContaBancariaService;
import com.mercurio.lms.configuracoes.model.service.MoedaService;
import com.mercurio.lms.configuracoes.model.service.PessoaService;
import com.mercurio.lms.configuracoes.model.service.UsuarioLMSService;
import com.mercurio.lms.entrega.model.service.ReciboReembolsoService;
import com.mercurio.lms.expedicao.model.DoctoServico;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.model.service.CtoInternacionalService;
import com.mercurio.lms.indenizacoes.model.AnexoRim;
import com.mercurio.lms.indenizacoes.model.DoctoServicoIndenizacao;
import com.mercurio.lms.indenizacoes.model.EventoRim;
import com.mercurio.lms.indenizacoes.model.FilialDebitada;
import com.mercurio.lms.indenizacoes.model.MdaSalvadoIndenizacao;
import com.mercurio.lms.indenizacoes.model.ParcelaReciboIndenizacao;
import com.mercurio.lms.indenizacoes.model.ReciboIndenizacao;
import com.mercurio.lms.indenizacoes.model.ReciboIndenizacaoNf;
import com.mercurio.lms.indenizacoes.model.service.AnexoRimService;
import com.mercurio.lms.indenizacoes.model.service.DoctoServicoIndenizacaoService;
import com.mercurio.lms.indenizacoes.model.service.EventoRimService;
import com.mercurio.lms.indenizacoes.model.service.FilialDebitadaService;
import com.mercurio.lms.indenizacoes.model.service.MdaSalvadoIndenizacaoService;
import com.mercurio.lms.indenizacoes.model.service.ParcelaReciboIndenizacaoService;
import com.mercurio.lms.indenizacoes.model.service.ReciboIndenizacaoService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.pendencia.model.Mda;
import com.mercurio.lms.pendencia.model.service.MdaService;
import com.mercurio.lms.rnc.model.MotivoAberturaNc;
import com.mercurio.lms.rnc.model.NaoConformidade;
import com.mercurio.lms.rnc.model.OcorrenciaNaoConformidade;
import com.mercurio.lms.rnc.model.service.MotivoAberturaNcService;
import com.mercurio.lms.rnc.model.service.NaoConformidadeService;
import com.mercurio.lms.rnc.model.service.OcorrenciaNaoConformidadeService;
import com.mercurio.lms.seguros.model.ProcessoSinistro;
import com.mercurio.lms.seguros.model.TipoSeguro;
import com.mercurio.lms.seguros.model.service.ProcessoSinistroService;
import com.mercurio.lms.seguros.model.service.TipoSeguroService;
import com.mercurio.lms.util.ArquivoUtils;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.PessoaUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.service.ClienteService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.indenizacoes.consultarReciboIndenizacaoAction"
 */

public class ConsultarReciboIndenizacaoAction extends MasterDetailAction {
	
	private MdaService mdaService;
	private BancoService bancoService;
	private AgenciaBancariaService agenciaBancariaService;	
	private FilialService filialService;
	private MoedaService moedaService;
	private PessoaService pessoaService;
	private FilialDebitadaService filialDebitadaService;
	private TipoSeguroService tipoSeguroService;
	private ConhecimentoService conhecimentoService;
	private ContaBancariaService contaBancariaService;
	private DomainValueService domainValueService;
	private CtoInternacionalService ctoInternacionalService;
	private ReciboReembolsoService reciboReembolsoService;
	private NaoConformidadeService naoConformidadeService;
	private ProcessoSinistroService processoSinistroService;
	private MotivoAberturaNcService motivoAberturaNcService;
	private MdaSalvadoIndenizacaoService mdaSalvadoIndenizacaoService;
	private DoctoServicoIndenizacaoService doctoServicoIndenizacaoService;
	private ParcelaReciboIndenizacaoService parcelaReciboIndenizacaoService;
	private ClienteService clienteService;
	private OcorrenciaNaoConformidadeService ocorrenciaNaoConformidadeService;
	private AnexoRimService anexoRimService;
	private EventoRimService eventoRimService;
	private UsuarioLMSService usuarioLMSService;
	
	protected MasterEntryConfig createMasterConfig(MasterDetailFactory masterFactory) {
		
    	/********************************************************************
    	 * MasterEntryConfig
    	 ********************************************************************/
		MasterEntryConfig masterConfig = masterFactory.createMasterEntryConfig(ReciboIndenizacao.class, true);
    	Comparator comparator = new Comparator() {
			public int compare(Object obj1, Object obj2) {
				return 0;
			}    		
    	};
    	
    	/********************************************************************
    	 * ItemListConfig
    	 ********************************************************************/
    	ItemListConfig itemConfig = new ItemListConfig() {
			
			public List initialize(Long masterId, Map parameters) {
				return doctoServicoIndenizacaoService.findByIdReciboIndenizacaoJoinFirstOcorrenciaNaoConformidade(masterId);
			}
			public Integer getRowCount(Long masterId, Map parameters) {
				return doctoServicoIndenizacaoService.getRowCountByIdReciboIndenizacao(masterId);
			}
			public Map configItemDomainProperties() {
				return null;
			}
			
			public Object populateNewItemInstance(Map parameters, Object bean) {
				return null;
			}	
						
			public void modifyItemValues(Object newBean, Object bean) {
		    }	
    	};
    	
    	
    	/********************************************************************
    	 * Anexo Rim ItemListConfig
    	 ********************************************************************/
    	ItemListConfig anexoRimConfig = new ItemListConfig() {
			
			public List initialize(Long masterId, Map parameters) {
				return anexoRimService.findItensByIdReciboIndenizacao(masterId);
			}
			public Integer getRowCount(Long masterId, Map parameters) {
				return anexoRimService.getRowCountItensByIdReciboIndenizacao(masterId);	
			}
			public Map configItemDomainProperties() {
				return null;
			}
			
			public Object populateNewItemInstance(Map parameters, Object bean) {
				TypedFlatMap tfm = (TypedFlatMap)parameters;
				
				AnexoRim anexoRim = (AnexoRim) bean;

				anexoRim.setIdAnexoRim(tfm.getLong("idAnexoRim"));
				anexoRim.setDescAnexo((String) tfm.get("descAnexo"));
				anexoRim.setDhCriacao(JTDateTimeUtils.getDataHoraAtual());
				anexoRim.setUsuarioLMS(usuarioLMSService.findById(SessionUtils.getUsuarioLogado().getIdUsuario()));
				try {
					anexoRim.setDcArquivo(Base64Util.decode(tfm.getString("dcArquivo")));
				} catch (IOException e) {
					throw new InfrastructureException(e.getMessage());
				}
				
				MasterEntry master = getMasterFromSession(getMasterId(tfm), true);
		    	ReciboIndenizacao reciboIndenizacao = (ReciboIndenizacao) master.getMaster();
		    	anexoRim.setReciboIndenizacao(reciboIndenizacao);
		    	
				return anexoRim;
			}	
						
			public void modifyItemValues(Object newBean, Object bean) {
				AnexoRim newObject = (AnexoRim) newBean;
				AnexoRim oldObject = (AnexoRim)bean;
				
				oldObject.setIdAnexoRim(newObject.getIdAnexoRim());
				oldObject.setDhCriacao(newObject.getDhCriacao());
				oldObject.setReciboIndenizacao(newObject.getReciboIndenizacao());
				oldObject.setDcArquivo(newObject.getDcArquivo());
				oldObject.setDescAnexo(newObject.getDescAnexo());
				oldObject.setUsuarioLMS(newObject.getUsuarioLMS());
		    }		
    	};
    	
    	/********************************************************************
    	 * Evento Rim ItemListConfig
    	 ********************************************************************/
    	ItemListConfig eventoRimConfig = new ItemListConfig() {
			
			public List initialize(Long masterId, Map parameters) {
				return eventoRimService.findItensByIdReciboIndenizacao(masterId);
			}
			public Integer getRowCount(Long masterId, Map parameters) {
				return eventoRimService.getRowCountItensByIdReciboIndenizacao(masterId);	
			}
			public Map configItemDomainProperties() {
				return null;
			}
			
			public Object populateNewItemInstance(Map parameters, Object bean) {
				TypedFlatMap tfm = (TypedFlatMap)parameters;
				
				EventoRim eventoRim = (EventoRim) bean;
				
				eventoRim.setIdEventoRim(tfm.getLong("idEventoRim"));
				eventoRim.setFilial(filialService.findById(SessionUtils.getUsuarioLogado().getFilial().getIdFilial()));
				eventoRim.setDhEventoRim(JTDateTimeUtils.getDataHoraAtual());
				eventoRim.setUsuario(SessionUtils.getUsuarioLogado());
				
				MasterEntry master = getMasterFromSession(getMasterId(tfm), true);
		    	ReciboIndenizacao reciboIndenizacao = (ReciboIndenizacao) master.getMaster();
		    	eventoRim.setReciboIndenizacao(reciboIndenizacao);
		    	
				return eventoRim;
			}	
						
			public void modifyItemValues(Object newBean, Object bean) {
				EventoRim newObject = (EventoRim) newBean;
				EventoRim oldObject = (EventoRim)bean;
				
				oldObject.setIdEventoRim(newObject.getIdEventoRim());
				oldObject.setDhEventoRim(newObject.getDhEventoRim());
				oldObject.setReciboIndenizacao(newObject.getReciboIndenizacao());
				oldObject.setFilial(newObject.getFilial());
				oldObject.setMotivoCancelamentoRim(newObject.getMotivoCancelamentoRim());
				oldObject.setTpEventoIndenizacao(newObject.getTpEventoIndenizacao());
				oldObject.setUsuario(newObject.getUsuario());
		    }		
    	};
    	
    	masterConfig.addItemConfig("doctoServicoIndenizacao", DoctoServicoIndenizacao.class, itemConfig, comparator);    	
    	masterConfig.addItemConfig("anexo", AnexoRim.class, anexoRimConfig, comparator);   
    	masterConfig.addItemConfig("eventos", EventoRim.class, eventoRimConfig, comparator);   
    	return masterConfig;
	}
	
	/************************************************************************************************************************
	 * Métodos relativos às abas de listagem e ao detalhamento
	 ************************************************************************************************************************/
	
	/**
	 * Find paginated
	 * @param tfm
	 * @return
	 */
	public ResultSetPage findPaginatedReciboIndenizacao(TypedFlatMap tfm) {
		ResultSetPage rsp = getMaster().findPaginatedReciboIndenizacao(tfm);
		
		List list = new ArrayList();
		for(Iterator it = rsp.getList().iterator(); it.hasNext(); ) {
			Map map = new HashMap(9);
			ReciboIndenizacao reciboIndenizacao = (ReciboIndenizacao)it.next();
			map.put("idReciboIndenizacao", reciboIndenizacao.getIdReciboIndenizacao());
			map.put("nrReciboIndenizacao", reciboIndenizacao.getNrReciboIndenizacao());
			map.put("sgFilialReciboIndenizacao", reciboIndenizacao.getFilial().getSgFilial());
			map.put("dtGeracao", reciboIndenizacao.getDtGeracao());
			map.put("tpIndenizacao", reciboIndenizacao.getTpIndenizacao().getDescription().getValue());
			map.put("sgSimboloVlIndenizado", reciboIndenizacao.getMoeda().getSiglaSimbolo());
			map.put("vlIndenizado", reciboIndenizacao.getVlIndenizacao());
			map.put("tpStatusIndenizacao",reciboIndenizacao.getTpStatusIndenizacao().getDescription());
			Pessoa beneficiario = reciboIndenizacao.getPessoaByIdBeneficiario();
			if (beneficiario.getNrIdentificacao()!=null) {
				map.put("nrIdentificacaoBeneficiario", FormatUtils.formatIdentificacao(beneficiario));					
			}
			if ("F".equals(reciboIndenizacao.getTpBeneficiarioIndenizacao().getValue())) {
				map.put("nmBeneficiario", beneficiario.getNmFantasia());
			} else {
				map.put("nmBeneficiario", beneficiario.getNmPessoa());
			}
			list.add(map);
		}
		
		rsp.setList(list);
		return rsp;
	}
	
	/**
	 * GetRowCount
	 * @param tfm
	 * @return
	 */
	public Integer getRowCountReciboIndenizacao(TypedFlatMap tfm) {
		return getMaster().getRowCountReciboIndenizacao(tfm);
	}
	
	public TypedFlatMap findByIdReciboIndenizacao(Long idReciboIndenizacao) {
		ReciboIndenizacao reciboIndenizacao = getMaster().findById(idReciboIndenizacao);
    	putMasterInSession(reciboIndenizacao);
				
		TypedFlatMap result = new TypedFlatMap();
		
		if(reciboIndenizacao.getPendencia() != null){
		result.put("idPendencia", reciboIndenizacao.getPendencia().getIdPendencia());
		}
		
		result.put("idReciboIndenizacao", idReciboIndenizacao);
		result.put("sgFilialRecibo", reciboIndenizacao.getFilial().getSgFilial()); 
		result.put("nrReciboIndenizacao", reciboIndenizacao.getNrReciboIndenizacao());
		result.put("tpStatusIndenizacao", reciboIndenizacao.getTpStatusIndenizacao().getDescription().getValue());
		result.put("tpSituacaoWorkflow", reciboIndenizacao.getTpSituacaoWorkflow().getDescription().getValue());
		result.put("tpStatusIndenizacaoValue", reciboIndenizacao.getTpStatusIndenizacao().getValue());		
		result.put("dtEmissao", reciboIndenizacao.getDtEmissao());
		result.put("tpIndenizacao", reciboIndenizacao.getTpIndenizacao().getDescription().getValue());
		result.put("tpIndenizacaoValue", reciboIndenizacao.getTpIndenizacao().getValue());
		
		if (reciboIndenizacao.getProcessoSinistro()!=null) {			
			result.put("nrReciboComposto", reciboIndenizacao.getFilial().getSgFilial()+"-"+ new DecimalFormat("00000000").format(reciboIndenizacao.getNrReciboIndenizacao()));
			result.put("idProcessoSinistro", reciboIndenizacao.getProcessoSinistro().getIdProcessoSinistro());
			result.put("nrProcessoSinistro", reciboIndenizacao.getProcessoSinistro().getNrProcessoSinistro()); 
			
			if (reciboIndenizacao.getProcessoSinistro().getTipoSeguro() != null){
				reciboIndenizacao.getProcessoSinistro().getTipoSeguro().getIdTipoSeguro();
			}
			
				result.put("tipoSeguro", reciboIndenizacao.getProcessoSinistro().getTipoSeguro().getSgTipo());			
		}		
		
		result.put("blSegurado", reciboIndenizacao.getBlSegurado());			
		result.put("sgSimboloMoeda", reciboIndenizacao.getMoeda().getSiglaSimbolo());
		result.put("vlIndenizacao", reciboIndenizacao.getVlIndenizacao());
		result.put("qtVolumesIndenizados", reciboIndenizacao.getQtVolumesIndenizados());
		result.put("nrNotaFiscalDebitoCliente", reciboIndenizacao.getNrNotaFiscalDebitoCliente());
		result.put("blSalvados", reciboIndenizacao.getBlSalvados());
		result.put("blSegurado", reciboIndenizacao.getBlSegurado());
		result.put("obReciboIndenizacao", reciboIndenizacao.getObReciboIndenizacao());

		if (reciboIndenizacao.getTpBeneficiarioIndenizacao()!=null && reciboIndenizacao.getPessoaByIdBeneficiario()!=null) {
			String strBeneficiario = null;
			String tpBeneficiario = reciboIndenizacao.getTpBeneficiarioIndenizacao().getValue();
			result.put("tpBeneficiarioIndenizacao", tpBeneficiario);
			
			// se filial
			if (tpBeneficiario.equals("F")) {
				Filial beneficiario = filialService.findById(reciboIndenizacao.getPessoaByIdBeneficiario().getIdPessoa());
				strBeneficiario = beneficiario.getSgFilial() + " - " + beneficiario.getPessoa().getNmFantasia();
			} else {
				Pessoa beneficiario = pessoaService.findById(reciboIndenizacao.getPessoaByIdBeneficiario().getIdPessoa());
				strBeneficiario = FormatUtils.formatIdentificacao(beneficiario)	+ " - " +  beneficiario.getNmPessoa();
			}
			result.put("beneficiario", strBeneficiario);
		}
			
		
		if (reciboIndenizacao.getTpFavorecidoIndenizacao()!=null ) {
			String strFavorecido = null;
			String tpFavorecido = reciboIndenizacao.getTpFavorecidoIndenizacao().getValue();
			result.put("tpFavorecidoIndenizacao", tpFavorecido);
			if (reciboIndenizacao.getPessoaByIdFavorecido()!=null) {
				// se filial
				if (tpFavorecido.equals("F")) {
					Filial favorecido = filialService.findById(reciboIndenizacao.getPessoaByIdFavorecido().getIdPessoa());
					strFavorecido = favorecido.getSgFilial() + " - " + favorecido.getPessoa().getNmFantasia();
				} else {
					Pessoa favorecido = pessoaService.findById(reciboIndenizacao.getPessoaByIdFavorecido().getIdPessoa());
					strFavorecido = FormatUtils.formatIdentificacao(favorecido) + " - " + favorecido.getNmPessoa();
				}
				result.put("favorecido", strFavorecido);
			}
		}
		
		String tpFormaPagamento = reciboIndenizacao.getTpFormaPagamento().getValue();
		
		result.put("tpFormaPagamento", tpFormaPagamento);
		result.put("dtProgramadaPagamento", reciboIndenizacao.getDtProgramadaPagamento());
		result.put("dtLiberacaoPgto", reciboIndenizacao.getDtLiberacaoPagamento());
		result.put("dtDevolucaoBanco", reciboIndenizacao.getDtDevolucaoBanco());
		result.put("dtPagamentoEfetuado", reciboIndenizacao.getDtPagamentoEfetuado());
		
		if (reciboIndenizacao.getBanco()!=null) {
			result.put("banco.idBanco", reciboIndenizacao.getBanco().getIdBanco());
			result.put("banco.nrBanco", reciboIndenizacao.getBanco().getNrBanco());
			result.put("banco.nmBanco", reciboIndenizacao.getBanco().getNmBanco());
		}
		
		if (reciboIndenizacao.getAgenciaBancaria()!=null) {
			result.put("agenciaBancaria.idAgenciaBancaria", reciboIndenizacao.getAgenciaBancaria().getIdAgenciaBancaria());
			result.put("agenciaBancaria.nrAgenciaBancaria", reciboIndenizacao.getAgenciaBancaria().getNrAgenciaBancaria());
			result.put("agenciaBancaria.nmAgenciaBancaria", reciboIndenizacao.getAgenciaBancaria().getNmAgenciaBancaria());
		}
		
		result.put("nrContaCorrente", reciboIndenizacao.getNrContaCorrente());
		result.put("nrDigitoContaCorrente", reciboIndenizacao.getNrDigitoContaCorrente());
		
		// se forma de pagamento for boleto, então detalha dados do boleto		
		if ("BO".equals(tpFormaPagamento)) {			
			result.put("qtParcelasBoletoBancario", reciboIndenizacao.getQtParcelasBoletoBancario());
		}
				
		result.put("idReciboIndenizacao", idReciboIndenizacao);
		result.put("siglaNumeroAnexoRim", reciboIndenizacao.getFilial().getSgFilial()+"-"+ new DecimalFormat("00000000").format(reciboIndenizacao.getNrReciboIndenizacao()));
		
		return result;
	}
	
	/************************************************************************************************************************
	 * Métodos relativos à aba de Filial Debitada
	 ************************************************************************************************************************/
	public ResultSetPage findPaginatedFilialDebitada(TypedFlatMap tfm) {		
		List list = new ArrayList();
		ResultSetPage rsp = filialDebitadaService.findPaginatedFilialDebitadaReciboIndenizacao(tfm);
		
		for (Iterator it = rsp.getList().iterator(); it.hasNext(); ) {
			FilialDebitada filialDebitada = (FilialDebitada)it.next();
			
			TypedFlatMap result = new TypedFlatMap();
			result.put("idFilialDebitada", filialDebitada.getIdFilialDebitada());
			result.put("sgFilial", filialDebitada.getFilial().getSgFilial());
			if (filialDebitada.getFilialReembolso()!=null)
				result.put("sgFilialReembolsada", filialDebitada.getFilialReembolso().getSgFilial());
			result.put("nmFantasia", filialDebitada.getFilial().getPessoa().getNmFantasia());
			result.put("pcDebitado", filialDebitada.getPcDebitado());
			result.put("vlReembolso", filialDebitada.getVlReembolso());
			result.put("dtReembolso", filialDebitada.getDtReembolso());
			if (filialDebitada.getMoeda()!=null)
				result.put("sgSimboloVlReembolso", filialDebitada.getMoeda().getSiglaSimbolo());
			list.add(result);
		}
		
		rsp.setList(list);
		return rsp;
	}
	
	public Integer getRowCountFilialDebitada(TypedFlatMap tfm) {
		return filialDebitadaService.getRowCountFilialDebitadaReciboIndenizacao(tfm);
	}
			
	public TypedFlatMap findByIdFilialDebitada(Long idFilialDebitada) {
		FilialDebitada filialDebitada = filialDebitadaService.findById(idFilialDebitada);
		TypedFlatMap result = new TypedFlatMap();
		result.put("idFilialDebitada", idFilialDebitada);
		result.put("filial.idFilial", filialDebitada.getFilial().getIdFilial());
		result.put("filial.sgFilial", filialDebitada.getFilial().getSgFilial());
		result.put("filial.pessoa.nmFantasia", filialDebitada.getFilial().getPessoa().getNmFantasia());
		result.put("pcDebitado", filialDebitada.getPcDebitado());

		if (filialDebitada.getFilialReembolso()!=null) {
			result.put("filialReembolsada.idFilial", filialDebitada.getFilialReembolso().getIdFilial());
			result.put("filialReembolsada.sgFilial", filialDebitada.getFilialReembolso().getSgFilial());
			result.put("filialReembolsada.pessoa.nmFantasia", filialDebitada.getFilialReembolso().getPessoa().getNmFantasia());
		}
		
		result.put("moeda.idMoeda", filialDebitada.getMoeda());
		result.put("vlReembolso", filialDebitada.getVlReembolso());
		result.put("dtDadoReembolso", filialDebitada.getDtDadoReembolso());
		result.put("dtReembolso", filialDebitada.getDtReembolso());		
		return result;
	}
	/************************************************************************************************************************
	 * Métodos relativos à aba de Mda 
	 ************************************************************************************************************************/
	public ResultSetPage findPaginatedMda(TypedFlatMap tfm) {
    	ResultSetPage rsp = mdaSalvadoIndenizacaoService.findPaginated(tfm);
    	List list = new ArrayList();
    	for (Iterator it = rsp.getList().iterator(); it.hasNext(); ) {
    		MdaSalvadoIndenizacao mdaSalvadoIndenizacao = (MdaSalvadoIndenizacao)it.next();
    		TypedFlatMap map = new TypedFlatMap();
    		map.put("idMdaSalvadoIndenizacao", mdaSalvadoIndenizacao.getIdMdaSalvadoIndenizacao());
    		map.put("sgFilial", mdaSalvadoIndenizacao.getMda().getFilialByIdFilialOrigem().getSgFilial());
    		map.put("nrMda", mdaSalvadoIndenizacao.getMda().getNrDoctoServico());
    		map.put("dhInclusao", mdaSalvadoIndenizacao.getMda().getDhInclusao());
    		map.put("mda.idDoctoServico", mdaSalvadoIndenizacao.getMda().getIdDoctoServico());
    		list.add(map);
    	}
    	rsp.setList(list);
    	return rsp;
	}
	
	public Integer getRowCountMda(TypedFlatMap tfm) {
		return mdaSalvadoIndenizacaoService.getRowCount(tfm);
	}
		
	public TypedFlatMap findByIdMda(TypedFlatMap tfm) {
    	MdaSalvadoIndenizacao mdaSalvadoIndenizacao = mdaSalvadoIndenizacaoService.findById(tfm.getLong("idMdaSalvadoIndenizacao"));
    	TypedFlatMap result = new TypedFlatMap();
    	result.put("idMdaSalvadoIndenizacao", mdaSalvadoIndenizacao.getIdMdaSalvadoIndenizacao());
    	result.put("filialByIdFilialOrigem.idFilial", mdaSalvadoIndenizacao.getMda().getFilialByIdFilialOrigem().getIdFilial());
    	result.put("filialByIdFilialOrigem.sgFilial", mdaSalvadoIndenizacao.getMda().getFilialByIdFilialOrigem().getSgFilial());
    	result.put("mda.idDoctoServico", mdaSalvadoIndenizacao.getMda().getIdDoctoServico());
    	result.put("mda.nrDoctoServico", mdaSalvadoIndenizacao.getMda().getNrDoctoServico());
    	result.put("dhInclusao", mdaSalvadoIndenizacao.getMda().getDhInclusao());
    	return result;
	}
	
	/************************************************************************************************************************
	 * Métodos relativos à aba de Parcelas 
	 ************************************************************************************************************************/
	public ResultSetPage findPaginatedParcela(TypedFlatMap tfm) {		
    	ResultSetPage rsp = parcelaReciboIndenizacaoService.findPaginated(tfm);
    	List list = new ArrayList();
    	for (Iterator it = rsp.getList().iterator(); it.hasNext(); ) {
    		ParcelaReciboIndenizacao parcelaReciboIndenizacao = (ParcelaReciboIndenizacao)it.next();
    		Map map = new HashMap(4);
    		map.put("idParcelaReciboIndenizacao", parcelaReciboIndenizacao.getIdParcelaReciboIndenizacao());
    		map.put("nrBoleto", parcelaReciboIndenizacao.getNrBoleto());
    		map.put("dtVencimento", parcelaReciboIndenizacao.getDtVencimento());
    		map.put("sgSimboloParcela", parcelaReciboIndenizacao.getMoeda().getSiglaSimbolo());
    		map.put("vlPagamento", parcelaReciboIndenizacao.getVlPagamento()); 
    		list.add(map);
    	}
    	rsp.setList(list);
    	return rsp;
	}
	
	public Integer getRowCountParcela(TypedFlatMap tfm) {
		return parcelaReciboIndenizacaoService.getRowCount(tfm);
	}
			
	public TypedFlatMap findByIdParcela(TypedFlatMap tfm) {
    	ParcelaReciboIndenizacao parcelaReciboIndenizacao = parcelaReciboIndenizacaoService.findById(tfm.getLong("idParcelaReciboIndenizacao"));
    	TypedFlatMap result = new TypedFlatMap();
    	result.put("idParcelaReciboIndenizacao", parcelaReciboIndenizacao.getIdParcelaReciboIndenizacao());
    	result.put("nrBoleto", parcelaReciboIndenizacao.getNrBoleto());
    	result.put("dtVencimento", parcelaReciboIndenizacao.getDtVencimento());
    	result.put("moeda.idMoeda", parcelaReciboIndenizacao.getMoeda().getIdMoeda());
    	result.put("vlPagamento", parcelaReciboIndenizacao.getVlPagamento());
    	return result;
	}
	
	/************************************************************************************************************************
	 * Métodos relativos à itemList 
	 ************************************************************************************************************************/
	
	/**
	 * @param key Realiza o detalhamento da aba de documentos
	 * @return
	 */
    public TypedFlatMap findItemById(MasterDetailKey key) {
    	DoctoServicoIndenizacao doctoServicoIndenizacao = (DoctoServicoIndenizacao) findItemById(key, "doctoServicoIndenizacao");    	
    	DoctoServico doctoServico = doctoServicoIndenizacao.getDoctoServico();    	
    	TypedFlatMap tfm = new TypedFlatMap();
    	tfm.put("idDoctoServicoIndenizacao", doctoServicoIndenizacao.getIdDoctoServicoIndenizacao());
    	tfm.put("doctoServico.idDoctoServico", doctoServico.getIdDoctoServico());
    	tfm.put("doctoServico.tpDocumentoServico", doctoServico.getTpDocumentoServico().getDescription().getValue());
    	tfm.put("doctoServico.filialByIdFilialOrigem.sgFilial", doctoServico.getFilialByIdFilialOrigem().getSgFilial());
    	tfm.put("doctoServico.nrDoctoServico", doctoServico.getNrDoctoServico());
    	if (doctoServicoIndenizacao.getProduto()!=null) 
    		tfm.put("produto.dsProduto", doctoServicoIndenizacao.getProduto().getDsProduto());
    	
    	if (doctoServicoIndenizacao.getMoeda()!=null) 
    		tfm.put("moeda.idMoeda", doctoServicoIndenizacao.getMoeda().getIdMoeda());
    	
    	tfm.put("vlIndenizacao", doctoServicoIndenizacao.getVlIndenizado());

    	NaoConformidade naoConformidade = naoConformidadeService.findNaoConformidadeByIdDoctoServico(doctoServico.getIdDoctoServico());
    	
    	if (naoConformidade != null) { 
	    	naoConformidade = naoConformidadeService.findByIdDoctoServicoJoinOcorrencias(doctoServico.getIdDoctoServico());
	    	tfm.put("naoConformidade.filial.sgFilial", naoConformidade.getFilial().getSgFilial());
	    	tfm.put("naoConformidade.nrRnc", new DecimalFormat("00000000").format(naoConformidade.getNrNaoConformidade()));
    	}
    	
    	putNotasFiscaisIntoTypedFlatMap(doctoServico.getIdDoctoServico(), doctoServico.getTpDocumentoServico().getValue(), tfm, doctoServicoIndenizacao.getReciboIndenizacaoNfs());
    	return tfm;
    }
    

   
    
    /**
     * Põe notas fiscais no TypedFlatMap a retornar para a tela.  
     * @param idDoctoServico
     * @param tpDocumentoServico
     * @param tfm
     * @param reciboIndenizacaoNfs
     */
    private void putNotasFiscaisIntoTypedFlatMap(Long idDoctoServico, String tpDocumentoServico, TypedFlatMap tfm, List reciboIndenizacaoNfs) {
    	// se documento de servico for conhecimento ou nota fiscal de transporte, então apresenta as notas fiscais
		List notasFiscais = new ArrayList();
		for (Iterator it = reciboIndenizacaoNfs.iterator(); it.hasNext(); ) {
			ReciboIndenizacaoNf reciboIndenizacaoNf = (ReciboIndenizacaoNf)it.next();
			Map map = new HashMap();
			map.put("idNotaFiscalConhecimento", reciboIndenizacaoNf.getNotaFiscalConhecimento().getIdNotaFiscalConhecimento());
			map.put("nrNotaFiscal", reciboIndenizacaoNf.getNotaFiscalConhecimento().getNrNotaFiscal());
			notasFiscais.add(map);
		} tfm.put("nfs", notasFiscais);    		
    }
    
	public ResultSetPage findPaginatedDocumentos(TypedFlatMap tfm) {
		 ResultSetPage rsp = findPaginatedItemList(tfm, "doctoServicoIndenizacao");
		 List list = new ArrayList();
		 for(Iterator it = rsp.getList().iterator(); it.hasNext(); ) {
			 DoctoServicoIndenizacao doctoServicoIndenizacao = (DoctoServicoIndenizacao)it.next();
			 ReciboIndenizacao reciboIndenizacao = getMaster().findById(doctoServicoIndenizacao.getReciboIndenizacao().getIdReciboIndenizacao());
			 DoctoServico doctoServico = doctoServicoIndenizacao.getDoctoServico();
			 
			 
			 Map<String, Object> map = new HashMap<String, Object>();
			 map.put("idDoctoServicoIndenizacao", doctoServicoIndenizacao.getIdDoctoServicoIndenizacao());
			 map.put("tpDoctoServico", doctoServicoIndenizacao.getDoctoServico().getTpDocumentoServico());
			 map.put("sgFilialOrigemDocto", doctoServicoIndenizacao.getDoctoServico().getFilialByIdFilialOrigem().getSgFilial());
			 map.put("nrDoctoServico", doctoServicoIndenizacao.getDoctoServico().getNrDoctoServico());
			 map.put("nmClienteRemetente", doctoServicoIndenizacao.getDoctoServico().getClienteByIdClienteRemetente().getPessoa().getNmPessoa());
			 map.put("sgSimboloTotalDocto", doctoServicoIndenizacao.getDoctoServico().getMoeda().getSiglaSimbolo());
			 map.put("vlMercadoria", doctoServicoIndenizacao.getDoctoServico().getVlMercadoria());
			 map.put("vlIndenizado", doctoServicoIndenizacao.getVlIndenizado());
			 map.put("qtVolumes", doctoServicoIndenizacao.getQtVolumes());
			 
			 NaoConformidade naoConformidade = naoConformidadeService.findByIdDoctoServico(doctoServico.getIdDoctoServico());
			 
			 if (naoConformidade!=null) {
				 naoConformidade = naoConformidadeService.findByIdDoctoServicoJoinOcorrencias(doctoServico.getIdDoctoServico());
				 map.put("sgFilialNaoConformidade", naoConformidade.getFilial().getSgFilial());
				 map.put("nrNaoConformidade", naoConformidade.getNrNaoConformidade());
			 }

			 if (doctoServicoIndenizacao.getDoctoServico().getFilialByIdFilialDestino()!=null)
				 map.put("sgFilialDestinoDocto", doctoServicoIndenizacao.getDoctoServico().getFilialByIdFilialDestino().getSgFilial());
			 if (doctoServicoIndenizacao.getDoctoServico().getClienteByIdClienteDestinatario()!=null)
				 map.put("nmClienteDestinatario", doctoServicoIndenizacao.getDoctoServico().getClienteByIdClienteDestinatario().getPessoa().getNmPessoa());
			 if (doctoServicoIndenizacao.getMoeda()!=null)
				 map.put("sgSimboloVlIndenizado", doctoServicoIndenizacao.getMoeda().getSiglaSimbolo());
			 
			 if ("NC".equals(reciboIndenizacao.getTpIndenizacao().getValue())) {
				 if (naoConformidade!=null && !naoConformidade.getOcorrenciaNaoConformidades().isEmpty()) {
  					 OcorrenciaNaoConformidade ocorrenciaNaoConformidade = ocorrenciaNaoConformidadeService.findFirstOcorrenciaByIdNaoConformidade(naoConformidade.getIdNaoConformidade());					 
					 if (ocorrenciaNaoConformidade.getManifesto()!=null) {
						 map.put("sgFilialManifesto", ocorrenciaNaoConformidade.getManifesto().getFilialByIdFilialOrigem().getSgFilial());
						 // se manifesto viagem nacional
						 if (ocorrenciaNaoConformidade.getManifesto().getManifestoViagemNacional()!=null) {
							 map.put("nrManifesto", ocorrenciaNaoConformidade.getManifesto().getManifestoViagemNacional().getNrManifestoOrigem());
						 // se manifesto internacional
						 } else if (ocorrenciaNaoConformidade.getManifesto().getManifestoInternacional()!=null) {
							 map.put("nrManifesto", ocorrenciaNaoConformidade.getManifesto().getManifestoInternacional().getNrManifestoInt());
						 // se manifesto de entrega
						 } else if (ocorrenciaNaoConformidade.getManifesto().getManifestoEntrega()!=null) {
							 map.put("nrManifesto", ocorrenciaNaoConformidade.getManifesto().getManifestoEntrega().getNrManifestoEntrega());
						 }					 
					 }
					 
					 if (ocorrenciaNaoConformidade.getControleCarga()!=null) {
						 map.put("sgFilialControleCarga", ocorrenciaNaoConformidade.getControleCarga().getFilialByIdFilialOrigem().getSgFilial());
						 map.put("nrControleCarga", ocorrenciaNaoConformidade.getControleCarga().getNrControleCarga());
					 }
				 }
			 }

			 if (doctoServicoIndenizacao.getProduto()!=null)
				 map.put("dsProduto", doctoServicoIndenizacao.getProduto().getDsProduto());
			 
			 list.add(map);
		 }
		 rsp.setList(list);
		 return rsp;

	}
	
	public Integer getRowCountDocumentos(TypedFlatMap tfm) {
		return getRowCountItemList(tfm, "doctoServicoIndenizacao");
	}
	
	
	/*********************************************************************************************
	 * General Finders 
	 *********************************************************************************************/
	public TypedFlatMap findMoedaPadrao(TypedFlatMap tfm) {
		Moeda moeda = SessionUtils.getMoedaSessao();
		TypedFlatMap result = new TypedFlatMap();
		result.put("moeda.idMoeda", moeda.getIdMoeda());
		return result;
	}
	
	public List findComboMoeda(Map criteria) {
		List retorno = new ArrayList();
		List listMoedas = this.getMoedaService().find(criteria);
		for (Iterator iter = listMoedas.iterator(); iter.hasNext();) {
			TypedFlatMap map = new TypedFlatMap();
			Moeda moeda = (Moeda) iter.next();
			map.put("idMoeda", moeda.getIdMoeda());
			map.put("siglaSimbolo", moeda.getSiglaSimbolo());
			map.put("tpSituacao.value", moeda.getTpSituacao().getValue());
			retorno.add(map);
		}
		return retorno;
	}

	public List findLookupBanco(TypedFlatMap tfm) {
    	return this.bancoService.findLookup(tfm);
    }
    
    public List findLookupAgencia(TypedFlatMap tfm) {
    	return this.agenciaBancariaService.findLookup(tfm);
    }

	
	public List findLookupFilial(TypedFlatMap tfm) {
    	List list = this.filialService.findLookup(tfm);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		Filial filial = (Filial)iter.next();
    		TypedFlatMap typedFlatMap = new TypedFlatMap();
    		typedFlatMap.put("idFilial", filial.getIdFilial());
    		typedFlatMap.put("sgFilial", filial.getSgFilial());
    		typedFlatMap.put("pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
    		retorno.add(typedFlatMap);
    	}
    	return retorno;

	}
	
    public List findComboMotivoAbertura(TypedFlatMap tfm) {
    	List list = new ArrayList();
    	for(Iterator it = motivoAberturaNcService.findOrderByDsMotivoAbertura(tfm).iterator(); it.hasNext(); ) {
    		MotivoAberturaNc motivoAberturaNc = (MotivoAberturaNc)it.next();
    		TypedFlatMap map = new TypedFlatMap();
    		map.put("idMotivoAberturaNc", motivoAberturaNc.getIdMotivoAberturaNc());
    		map.put("dsMotivoAbertura", motivoAberturaNc.getDsMotivoAbertura());
    		map.put("tpSituacao.value", motivoAberturaNc.getTpSituacao().getValue());
    		list.add(map);
    	}
    	return list;
    }
	
	public List findLookupNaoConformidade(TypedFlatMap tfm) {
		List list = new ArrayList();
		TypedFlatMap r = new TypedFlatMap();
		r.put("filial.idFilial", tfm.getLong("filial.idFilial"));		
		r.put("nrNaoConformidade", tfm.getLong("nrNaoConformidade"));
		for(Iterator it=naoConformidadeService.findLookup(r).iterator(); it.hasNext(); ) {
			NaoConformidade naoConformidade = (NaoConformidade)it.next();
			TypedFlatMap item = new TypedFlatMap();
			item.put("filial.idFilial", naoConformidade.getFilial().getIdFilial());
			item.put("filial.sgFilial", naoConformidade.getFilial().getSgFilial());
			item.put("idNaoConformidade", naoConformidade.getIdNaoConformidade());
			item.put("nrNaoConformidade", naoConformidade.getNrNaoConformidade());
			list.add(item);
		}
		return list;
	}
	
    /**
     * Obtém o processo de sinistro.<br>
     * @param tfm
     * @return
     */
    public List findLookupProcessoSinistro(TypedFlatMap tfm) {
    	TypedFlatMap resultData = new TypedFlatMap();
		List result = new ArrayList();
		for (Iterator it = this.processoSinistroService.findLookup(tfm).iterator(); it.hasNext();) {
			ProcessoSinistro processoSinistro = (ProcessoSinistro)it.next();
			resultData.put("idProcessoSinistro", processoSinistro.getIdProcessoSinistro());
			resultData.put("nrProcessoSinistro", processoSinistro.getNrProcessoSinistro());
			resultData.put("processoSinistro.tipoSeguro.idTipoSeguro", processoSinistro.getTipoSeguro().getIdTipoSeguro());			
			result.add(resultData);
		}
		return result;
    }
    
    public List findLookupCliente(Map criteria){    	
    	List<Map> list = new ArrayList<Map>(); 
    	for (Iterator it = clienteService.findLookup(criteria).iterator(); it.hasNext(); ) {
    		Cliente cliente = (Cliente)it.next();
    		TypedFlatMap map = new TypedFlatMap();
    		map.put("idCliente", cliente.getIdCliente());
    		map.put("pessoa.nrIdentificacao", cliente.getPessoa().getNrIdentificacao());
    		map.put("pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(cliente.getPessoa()));
    		map.put("pessoa.nmPessoa", cliente.getPessoa().getNmPessoa());
    		list.add(map);
    	}
    	return list;
    }

	public List findLookupPessoa(TypedFlatMap tfm) {
		List result = new ArrayList();
		tfm.put("nrIdentificacao", PessoaUtils.validateIdentificacao(tfm.getString("pessoa.nrIdentificacao")));
		for(Iterator iterator = this.pessoaService.findLookup(tfm).iterator(); iterator.hasNext(); ) {
			Pessoa pessoa = (Pessoa)iterator.next();
			Map map = new HashMap();
			map.put("idPessoa", pessoa.getIdPessoa());
			map.put("nrIdentificacao", pessoa.getNrIdentificacao());
			map.put("nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(pessoa));
			map.put("nmPessoa", pessoa.getNmPessoa());
			result.add(map);
		}
		return result;
	}

    /**
     * Obtém dados bancarios da pessoa
     * @param tfm
     * @return
     */
    public TypedFlatMap findDadosBancariosPessoa(TypedFlatMap tfm) {
    	Long idBeneficiario = tfm.getLong("idPessoa");
    	TypedFlatMap result = new TypedFlatMap();
    	if (idBeneficiario!=null) {
    		List list = contaBancariaService.findContasBancariasByPessoa(idBeneficiario);
    		if (list.size()>0) {
    			ContaBancaria contaBancaria = (ContaBancaria)list.get(0);
	    		result.put("favorecido.idPessoa", contaBancaria.getPessoa().getIdPessoa());
	    		result.put("favorecido.nmPessoa", contaBancaria.getPessoa().getNmPessoa());
	    		result.put("favorecido.nrIdentificacao", FormatUtils.formatIdentificacao(contaBancaria.getPessoa()));
	    		result.put("banco.idBanco", contaBancaria.getAgenciaBancaria().getBanco().getIdBanco());
	    		result.put("banco.nrBanco", contaBancaria.getAgenciaBancaria().getBanco().getNrBanco());
	    		result.put("banco.nmBanco", contaBancaria.getAgenciaBancaria().getBanco().getNmBanco());
	    		result.put("agenciaBancaria.idAgenciaBancaria", contaBancaria.getAgenciaBancaria().getIdAgenciaBancaria());
	    		result.put("agenciaBancaria.nrAgenciaBancaria", contaBancaria.getAgenciaBancaria().getNrAgenciaBancaria());
	    		result.put("agenciaBancaria.nmAgenciaBancaria", contaBancaria.getAgenciaBancaria().getNmAgenciaBancaria());
	    		result.put("conta.nrContaCorrente", contaBancaria.getNrContaBancaria());
	    		result.put("conta.nrDigitoContaCorrente", contaBancaria.getDvContaBancaria());
    		}
    	}
    	return result;
    }
    
    public TypedFlatMap getMoedaSessao() {
    	TypedFlatMap tfm = new TypedFlatMap();
    	Moeda moeda = SessionUtils.getMoedaSessao();
    	tfm.put("sgSimboloMoeda", moeda.getSiglaSimbolo());
    	tfm.put("idMoeda", moeda.getIdMoeda());
    	return tfm;
    }

	/*********************************************************************************************
	 * Documento de Servico Methods
	 *********************************************************************************************/

    /**
     * FindLookup para filial do tipo de DoctoServico Escolhido.
     */
    public List findLookupServiceDocumentFilialCTR(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }
    public List findLookupServiceDocumentFilialCRT(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }
    public List findLookupServiceDocumentFilialMDA(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }
    public List findLookupServiceDocumentFilialRRE(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }  
    public List findLookupServiceDocumentFilialNFT(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }  
    public List findLookupServiceDocumentFilialNFS(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }  
    public List findLookupServiceDocumentFilialNTE(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }
    public List findLookupServiceDocumentFilialNSE(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }
    public List findLookupServiceDocumentFilialCTE(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    } 
    /**
     * FindLookup para a tag DoctoServico.
     */  
    public List findLookupServiceDocumentNumberCTR(Map criteria) {
    	return conhecimentoService.findLookup(criteria);
    }
    public List findLookupServiceDocumentNumberCRT(Map criteria) {    	
    	return ctoInternacionalService.findLookup(criteria);
    }    
    public List findLookupServiceDocumentNumberMDA(Map criteria) {
    	return mdaService.findLookup(criteria);
    }
    public List findLookupServiceDocumentNumberRRE(Map criteria) {
    	return reciboReembolsoService.findLookup(criteria);
    }
    public List findLookupServiceDocumentNumberNFT(Map criteria) {
    	return conhecimentoService.findLookup(criteria);
    }
    public List findLookupServiceDocumentNumberCTE(Map criteria) {
    	return conhecimentoService.findLookup(criteria);
    }
    public List findLookupServiceDocumentNumberNSE(Map criteria) {
    	return conhecimentoService.findLookup(criteria);
    }
    public List findLookupServiceDocumentNumberNTE(Map criteria) {
    	return conhecimentoService.findLookup(criteria);
    }
    public List findLookupServiceDocumentNumberNFS(Map criteria) {
    	return conhecimentoService.findLookup(criteria);
    }
    
    public List findLookupFilialByDocumentoServico(Map criteria) {
    	List list = this.filialService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		Filial filial = (Filial)iter.next();
    		TypedFlatMap typedFlatMap = new TypedFlatMap();
    		typedFlatMap.put("idFilial", filial.getIdFilial());
    		typedFlatMap.put("sgFilial", filial.getSgFilial());
    		retorno.add(typedFlatMap);
    	}
    	return retorno;
    }
    
	public List findLookupMDA(TypedFlatMap criteria) {
		Long nrDoctoServico = criteria.getLong("nrDoctoServico");
		Long idFilialOrigem = criteria.getLong("filialByIdFilialOrigem.idFilial");
		List result = mdaService.findMdaByNrDoctoServicoByIdFilialOrigem(nrDoctoServico, idFilialOrigem);
    	List listMda = new ArrayList();
    	for (Iterator iter = result.iterator(); iter.hasNext();) {
			Mda mda = (Mda) iter.next();			
    		TypedFlatMap mapMda = new TypedFlatMap();    		
    		mapMda.put("idDoctoServico", mda.getIdDoctoServico());
    		mapMda.put("nrDoctoServico", mda.getNrDoctoServico());
    		mapMda.put("dhInclusao", mda.getDhInclusao());
    		listMda.add(mapMda);    		
    	}
    	return listMda;		
	}
    
    public List findTipoDocumentoServico(Map criteria) {
    	List dominiosValidos = new ArrayList();
    	dominiosValidos.add("CTR");
    	dominiosValidos.add("CRT");
    	dominiosValidos.add("NFT");
    	dominiosValidos.add("NFS");
    	dominiosValidos.add("NTE");
    	dominiosValidos.add("NSE");
    	dominiosValidos.add("CTE");
    	List retorno = this.domainValueService.findByDomainNameAndValues("DM_TIPO_DOCUMENTO_SERVICO", dominiosValidos);
    	return retorno;
    }
    
	public List findComboTipoSeguro(TypedFlatMap tfm) {
		List retorno = new ArrayList();
		List tiposSeguro = this.tipoSeguroService.findOrderBySgTipo(tfm); 
		for (Iterator iter = tiposSeguro.iterator(); iter.hasNext();) {
			TypedFlatMap map = new TypedFlatMap();
			TipoSeguro tipoSeguro = (TipoSeguro) iter.next();
			map.put("idTipoSeguro", tipoSeguro.getIdTipoSeguro());
			map.put("sgTipo", tipoSeguro.getSgTipo());
			map.put("tpSituacao.value", tipoSeguro.getTpSituacao().getValue());
			retorno.add(map);
		}
		return retorno;
	}
	
	/**
     * Método responsável por localizar o registro da tabela ANEXO_RIM pelo campo ID_ANEXO_RIM
     */
	public TypedFlatMap findByIdAnexoRim(MasterDetailKey key) {
		TypedFlatMap result = new TypedFlatMap();
		AnexoRim anexoRim = (AnexoRim) super.findItemById(key, "anexo");
	
		result.put("idAnexoRim", anexoRim.getIdAnexoRim());
		result.put("nomeArquivo", ArquivoUtils.extrairNomeDoBlob(anexoRim.getDcArquivo()));
    	result.put("nomeUsuario", anexoRim.getUsuarioLMS().getUsuarioADSM().getNmUsuario());
    	result.put("dtHoraCriacao", anexoRim.getDhCriacao());
    	result.put("descAnexo", anexoRim.getDescAnexo());
    	result.put("dcArquivo", Base64Util.encode(anexoRim.getDcArquivo()));
    	result.put("idReciboIndenizacao", anexoRim.getReciboIndenizacao().getIdReciboIndenizacao());
	
    	return result;    	
    }
	
	/**
	 * Método responsável por buscar os registros da tabela ANEXO_RIM para exibir na grid da aba Anexos. 
	 */
	public ResultSetPage findPaginatedAnexoRim(TypedFlatMap tfm) {
		ResultSetPage rsp = super.findPaginatedItemList(tfm, "anexo");		
		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		
    	for (Iterator it = rsp.getList().iterator(); it.hasNext(); ) {
    		AnexoRim anexoRim = (AnexoRim) it.next();
    		TypedFlatMap map = new TypedFlatMap();
    		map.put("nomeArquivo", ArquivoUtils.extrairNomeDoBlob(anexoRim.getDcArquivo()));
    		map.put("descricaoAnexo", anexoRim.getDescAnexo());
    		map.put("dtHoraCriacao", anexoRim.getDhCriacao());
    		map.put("nomeUsuario", anexoRim.getUsuarioLMS().getUsuarioADSM().getNmUsuario());
    		map.put("idAnexoRim", anexoRim.getIdAnexoRim());
    		
    		list.add(map);
    	}
    	
    	rsp.setList(list);
    	
    	return rsp;
	}
	
	
	/**
	 * Método responsável por buscar a quantidade de registros da tabela ANEXO_RIM para exibição na grid.
	 */	
	public Integer getRowCountAnexoRim(TypedFlatMap tfm) {
		return getRowCountItemList(tfm, "anexo");
	}
	
	/**
     * Método responsável por localizar o registro da tabela EVENTO_RIM pelo campo ID_EVENTO_RIM
     */
	public TypedFlatMap findByIdEventoRim(MasterDetailKey key) {
		TypedFlatMap result = new TypedFlatMap();
    	return result;    
    }
	
	/**
	 * Método responsável por buscar os registros da tabela EVENTO_RIM para exibir na grid da aba Eventos. 
	 */
	public ResultSetPage findPaginatedEventoRim(TypedFlatMap tfm) {
		ResultSetPage rsp = super.findPaginatedItemList(tfm, "eventos");		
		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		
    	for (Iterator it = rsp.getList().iterator(); it.hasNext(); ) {
    		EventoRim eventoRim = (EventoRim) it.next();
    		TypedFlatMap map = new TypedFlatMap();
    		
    		map.put("dhEvento", eventoRim.getDhEventoRim());
    		map.put("dsEvento", eventoRim.getTpEventoIndenizacao().getDescription().getValue());
    		map.put("sgFilial", eventoRim.getFilial().getSgFilial());
    		map.put("nmUsuario", eventoRim.getUsuario().getNmUsuario());
    		map.put("dsMotivoCancelamento", eventoRim.getMotivoCancelamentoRim() != null ? eventoRim.getMotivoCancelamentoRim().getDsMotivoCancelamentoRim() : "");
    				
    		list.add(map);
    	}
    	
    	rsp.setList(list);
    	
    	return rsp;
	}
	
	/**
	 * Método responsável por buscar a quantidade de registros da tabela ANEXO_RIM para exibição na grid.
	 */
	public Integer getRowCountEventoRim(TypedFlatMap tfm) {
		Long idReciboIndenizacao = tfm.getLong("idReciboIndenizacao"); 
		return eventoRimService.getRowCountEventoRim(idReciboIndenizacao);
	}
	
	/*********************************************************************************************
	 * Getters and Setters
	 *********************************************************************************************/
    public void setMaster(ReciboIndenizacaoService reciboIndenizacaoService) {
    	super.setMasterService(reciboIndenizacaoService);
    }
    
    private ReciboIndenizacaoService getMaster() {
    	return (ReciboIndenizacaoService)super.getMasterService();
    }

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public void setNaoConformidadeService(
			NaoConformidadeService naoConformidadeService) {
		this.naoConformidadeService = naoConformidadeService;
	}

	public void setProcessoSinistroService(
			ProcessoSinistroService processoSinistroService) {
		this.processoSinistroService = processoSinistroService;
	}

	public void setTipoSeguroService(TipoSeguroService tipoSeguroService) {
		this.tipoSeguroService = tipoSeguroService;
	}

	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
	}

	public void setCtoInternacionalService(
			CtoInternacionalService ctoInternacionalService) {
		this.ctoInternacionalService = ctoInternacionalService;
	}

	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}

	public void setMotivoAberturaNcService(
			MotivoAberturaNcService motivoAberturaNcService) {
		this.motivoAberturaNcService = motivoAberturaNcService;
	}

	public void setMoedaService(MoedaService moedaService) {
		this.moedaService = moedaService;
	}

	public void setAgenciaBancariaService(
			AgenciaBancariaService agenciaBancariaService) {
		this.agenciaBancariaService = agenciaBancariaService;
	}

	public void setBancoService(BancoService bancoService) {
		this.bancoService = bancoService;
	}

	public void setContaBancariaService(ContaBancariaService contaBancariaService) {
		this.contaBancariaService = contaBancariaService;
	}

	public void setPessoaService(PessoaService pessoaService) {
		this.pessoaService = pessoaService;
	}

	public void setDoctoServicoIndenizacaoService(
			DoctoServicoIndenizacaoService doctoServicoIndenizacaoService) {
		this.doctoServicoIndenizacaoService = doctoServicoIndenizacaoService;
	}

	public void setFilialDebitadaService(FilialDebitadaService filialDebitadaService) {
		this.filialDebitadaService = filialDebitadaService;
	}

	public void setMdaService(MdaService mdaService) {
		this.mdaService = mdaService;
	}
	
	public void setReciboReembolsoService(ReciboReembolsoService reciboReembolsoService){
		this.reciboReembolsoService = reciboReembolsoService;
	}

	public void setMdaSalvadoIndenizacaoService(
			MdaSalvadoIndenizacaoService mdaSalvadoIndenizacaoService) {
		this.mdaSalvadoIndenizacaoService = mdaSalvadoIndenizacaoService;
	}

	public void setParcelaReciboIndenizacaoService(
			ParcelaReciboIndenizacaoService parcelaReciboIndenizacaoService) {
		this.parcelaReciboIndenizacaoService = parcelaReciboIndenizacaoService;
	}

	public MoedaService getMoedaService() {
		return moedaService;
	}

	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}

	public void setOcorrenciaNaoConformidadeService(
			OcorrenciaNaoConformidadeService ocorrenciaNaoConformidadeService) {
		this.ocorrenciaNaoConformidadeService = ocorrenciaNaoConformidadeService;
	}

	public void setAnexoRimService(AnexoRimService anexoRimService) {
		this.anexoRimService = anexoRimService;
	}
	
	public void clearSessionItens(){
		super.removeMasterFromSession();
}
	
	public void setEventoRimService(EventoRimService eventoRimService) {
		this.eventoRimService = eventoRimService;
	}

	public void setUsuarioLMSService(UsuarioLMSService usuarioLMSService) {
		this.usuarioLMSService = usuarioLMSService;
	}

	
}