package com.mercurio.lms.indenizacoes.action;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.BooleanUtils;
import org.apache.commons.lang.StringUtils;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.FindDefinition;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.FilterList;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.service.CotacaoIndicadorFinanceiroService;
import com.mercurio.lms.indenizacoes.model.service.DoctoServicoIndenizacaoService;
import com.mercurio.lms.indenizacoes.model.service.MotivoCancelamentoRimService;
import com.mercurio.lms.indenizacoes.model.service.ReciboIndenizacaoService;
import com.mercurio.lms.indenizacoes.util.ConstantesIndenizacoes;
import com.mercurio.lms.municipios.ConstantesMunicipios;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.Pais;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.HistoricoFilialService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.IntegerUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.indenizacoes.cancelarLiberacaoPagamentoRIMAction"
 */

public class CancelarLiberacaoPagamentoRIMAction extends CrudAction {
	private FilialService filialService;
	private ReciboIndenizacaoService reciboIndenizacaoService;
	private DoctoServicoIndenizacaoService doctoServicoIndenizacaoService;
	private MotivoCancelamentoRimService motivoCancelamentoRimService;
	private CotacaoIndicadorFinanceiroService cotacaoIndicadorFinanceiroService;
	private ConfiguracoesFacade configuracoesFacade;
	private HistoricoFilialService historicoFilialService;

	public CotacaoIndicadorFinanceiroService getCotacaoIndicadorFinanceiroService() {
		return cotacaoIndicadorFinanceiroService;
	}

	public void setCotacaoIndicadorFinanceiroService(CotacaoIndicadorFinanceiroService cotacaoIndicadorFinanceiroService) {
		this.cotacaoIndicadorFinanceiroService = cotacaoIndicadorFinanceiroService;
	}

	public ConfiguracoesFacade getConfiguracoesFacade() {
		return configuracoesFacade;
	}

	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}

	public HistoricoFilialService getHistoricoFilialService() {
		return historicoFilialService;
	}

	public void setHistoricoFilialService(
			HistoricoFilialService historicoFilialService) {
		this.historicoFilialService = historicoFilialService;
	}

	private MotivoCancelamentoRimService getMotivoCancelamentoRimService() {
		return motivoCancelamentoRimService;
	}

	public void setMotivoCancelamentoRimService(
			MotivoCancelamentoRimService motivoCancelamentoRimService) {
		this.motivoCancelamentoRimService = motivoCancelamentoRimService;
	}

	private DoctoServicoIndenizacaoService getDoctoServicoIndenizacaoService() {
		return doctoServicoIndenizacaoService;
	}

	public void setDoctoServicoIndenizacaoService(
			DoctoServicoIndenizacaoService doctoServicoIndenizacaoService) {
		this.doctoServicoIndenizacaoService = doctoServicoIndenizacaoService;
	}

	private ReciboIndenizacaoService getReciboIndenizacaoService() {
		return reciboIndenizacaoService;
	}

	public void setReciboIndenizacaoService(
			ReciboIndenizacaoService reciboIndenizacaoService) {
		this.reciboIndenizacaoService = reciboIndenizacaoService;
	}

	private FilialService getFilialService() {
		return filialService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	/**
	 * 
	 * @param tfm
	 * @return
	 */
	public ResultSetPage findDoctosServicosByRim(TypedFlatMap tfm ) {
		Long idRim = tfm.getLong("reciboIndenizacao.idReciboIndenizacao");
		return getDoctoServicoIndenizacaoService().findDoctoServicosByIdReciboIndenizacao(idRim, FindDefinition.createFindDefinition(tfm));
	}

	public Integer getRowCountDoctosServicosByRim(TypedFlatMap tfm ) {
		Long idRim = tfm.getLong("reciboIndenizacao.idReciboIndenizacao");
		return getDoctoServicoIndenizacaoService().getRowCountDoctoServicosByIdReciboIndenizacao(idRim);
	}

    /**
     * Consulta a filial pela sigla informada 
     * @param map
     * @return
     */
    public List findLookupFilial(Map map) {
    	FilterList filter = new FilterList(getFilialService().findLookup(map)) {
			public Map filterItem(Object item) {
				Filial filial = (Filial)item;
    			TypedFlatMap typedFlatMap = new TypedFlatMap();
	    		typedFlatMap.put("idFilial", filial.getIdFilial());
		    	typedFlatMap.put("sgFilial",  filial.getSgFilial());
		    	typedFlatMap.put("pessoa.nmFantasia",  filial.getPessoa().getNmFantasia());
				return typedFlatMap;
			}
    	};
    	return (List)filter.doFilter();
    }
    
    /**
     * Método que busca o recibo indenifação e os campos necessários para a 
     * tela de liberar rim 
     * @param criteria
     * @return
     */
    public List findReciboIndenizacao(TypedFlatMap criteria) {
    	Long idFilial = criteria.getLong("filial.idFilial");
    	Integer nrReciboIndenizacao = criteria.getInteger("nrReciboIndenizacao");
    	Long idReciboIndenizacao = criteria.getLong("idReciboIndenizacao");
    	
    	List result = this.getReciboIndenizacaoService().findReciboIndenizacaoToProcessosRim(idFilial, nrReciboIndenizacao, idReciboIndenizacao);
    	TypedFlatMap typedFlatMap = new TypedFlatMap();
    	List retorno = new ArrayList();
    	if (result.size()>0){
    		typedFlatMap = (TypedFlatMap)result.get(0);
    		
    		String favorecidoNrIdentificacao = typedFlatMap.getString("pessoaByIdFavorecido.nrIdentificacao");
    		String favorecidoTpIdentificacao = typedFlatMap.getString("pessoaByIdFavorecido.tpIdentificacao.value");
    		String favorecidoNrIdentificacaoFormatado = "";
    		
    		if (StringUtils.isNotBlank(favorecidoNrIdentificacao) && StringUtils.isNotBlank(favorecidoTpIdentificacao)) {
    			favorecidoNrIdentificacaoFormatado = FormatUtils.formatIdentificacao(favorecidoTpIdentificacao, favorecidoNrIdentificacao);
    		}
    		
    		typedFlatMap.put("pessoaByIdFavorecido.nrIdentificacaoFormatado", favorecidoNrIdentificacaoFormatado);
    		
    		String beneficiarioNrIdentificacao = typedFlatMap.getString("pessoaByIdBeneficiario.nrIdentificacao");
    		String beneficiarioTpIdentificacao = typedFlatMap.getString("pessoaByIdBeneficiario.tpIdentificacao.value");
    		String beneficiarioNrIdentificacaoFormatado = FormatUtils.formatIdentificacao(beneficiarioTpIdentificacao, beneficiarioNrIdentificacao);
    		typedFlatMap.put("pessoaByIdBeneficiario.nrIdentificacaoFormatado", beneficiarioNrIdentificacaoFormatado);
    		
    		Boolean beneficiarioBlMtzLiberaRIM = typedFlatMap.getBoolean("pessoaByIdBeneficiario.blMtzLiberaRIM");
    		Boolean favorecidoBlMtzLiberaRIM = typedFlatMap.getBoolean("pessoaByIdFavorecido.blMtzLiberaRIM");
    		
    		typedFlatMap.put("pessoaByIdBeneficiario.blMtzLiberaRIM", BooleanUtils.isTrue(beneficiarioBlMtzLiberaRIM));
    		typedFlatMap.put("pessoaByIdFavorecido.blMtzLiberaRIM", BooleanUtils.isTrue(favorecidoBlMtzLiberaRIM));
    		
    		retorno.add(typedFlatMap);
    	}
    	
    	return retorno;
    }
    
    /**
     * Método para preencher a combo de MotivoCancelamento  
     * @param tfm
     * @return
     */
    public List findComboMotivoCancelamento(TypedFlatMap tfm) {
    	String tpStatusIndenizacao = tfm.getString("tpStatusIndenizacaoValue");
    	Map criteria = new HashMap(2);
    	
    	if("L".equalsIgnoreCase(tpStatusIndenizacao)) {
    		criteria.put("tpCancelamento","L");
    	} else if("P".equalsIgnoreCase(tpStatusIndenizacao)) {
    		criteria.put("tpCancelamento","P");
    	}
    	criteria.put("tpSituacao","A");
    	List l = this.getMotivoCancelamentoRimService().findOrdenadoPorDescricao(criteria); 
    	return l;
    }

    /**
     * Cancela o pagamento da RIM
     * @param tfm
     * @return
     */
    public DomainValue executeCancelarPagamento(TypedFlatMap tfm) {
    	Long idReciboIndenizacao = tfm.getLong("idReciboIndenizacao");
    	Long idMotivoCancelamento = tfm.getLong("idMotivoCancelamentoRim");
    	
    	this.getReciboIndenizacaoService().executeCancelarPagamento( idReciboIndenizacao, idMotivoCancelamento );
    	
    	DomainValue dv =  this.getReciboIndenizacaoService().findById(idReciboIndenizacao).getTpStatusIndenizacao();
    	return dv;
    }

    
    /**
     * Cancela a liberação da RIM
     * @param tfm
     * @return
     */
    public DomainValue executeCancelarLiberacao(TypedFlatMap tfm) {
    	Long idReciboIndenizacao = tfm.getLong("idReciboIndenizacao");
    	Long idMotivoCancelamento = tfm.getLong("idMotivoCancelamentoRim");
    	
    	this.getReciboIndenizacaoService().executeCancelarLiberacao( idReciboIndenizacao, idMotivoCancelamento );
    	
    	DomainValue dv =  this.getReciboIndenizacaoService().findById(idReciboIndenizacao).getTpStatusIndenizacao();
    	return dv;
    }

	public TypedFlatMap getDataUsuario() {
    	Filial filialUsuario = SessionUtils.getFilialSessao();
    	Pais paisSessao = SessionUtils.getPaisSessao();
    	BigDecimal salarioMinimo = cotacaoIndicadorFinanceiroService.findVlCotacaoIndFinanceiro(ConstantesIndenizacoes.SG_SALARIO_MINIMO, paisSessao.getIdPais(), JTDateTimeUtils.getDataAtual());
    	TypedFlatMap map = new TypedFlatMap();
    	Integer diaSemanaPagtoRim = IntegerUtils.getInteger(configuracoesFacade.getValorParametro(ConstantesIndenizacoes.PG_DIA_SEMANA_VALIDACAO_DT_PROGR_PAGTO_RIM));
    	Integer nrDiasCorridos = IntegerUtils.getInteger(configuracoesFacade.getValorParametro(ConstantesIndenizacoes.PG_NR_DIAS_CORRIDOS_VALIDACAO_DT_PROGR_PAGTO_RIM));
    	
    	map.put("idFilialLogada", filialUsuario.getIdFilial());
   		map.put("blFilialIsMatriz", historicoFilialService.validateFilialUsuarioMatriz(filialUsuario.getIdFilial()));
   		map.put("blFilialIsFilial", historicoFilialService.validateFilialByTpFilial(filialUsuario.getIdFilial(), ConstantesMunicipios.TP_FILIAL_IS_FILIAL));
   		map.put("salarioMinimoVigente", salarioMinimo.multiply(new BigDecimal("0.5")));
   		map.put("diaProgramadoPagtoRIM", diaSemanaPagtoRim);
   		map.put("nrDiasCorridosValidacaoDtPagtoRIM", nrDiasCorridos);
   		map.put("txtDiaSemana", JTDateTimeUtils.getWeekdayNameFull(JTDateTimeUtils.getDataHoraAtual().withDayOfWeek(diaSemanaPagtoRim)).toLowerCase());
   		
		return map;
    }    
    
}
