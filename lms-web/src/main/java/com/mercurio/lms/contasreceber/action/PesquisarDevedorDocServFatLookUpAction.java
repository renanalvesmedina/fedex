package com.mercurio.lms.contasreceber.action;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.FindDefinition;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.contasreceber.model.param.DevedorDocServFatLookupParam;
import com.mercurio.lms.contasreceber.model.service.DevedorDocServFatLookUpService;
import com.mercurio.lms.contasreceber.model.service.NotaDebitoNacionalService;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.model.service.CtoInternacionalService;
import com.mercurio.lms.expedicao.model.service.NotaFiscalServicoService;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.vendas.model.service.ClienteService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contasreceber.pesquisarDevedorDocServFatLookUpAction"
 */

public class PesquisarDevedorDocServFatLookUpAction extends CrudAction {
	
	private DomainValueService domainValueService;
	
	private FilialService filialService;
	
	private DevedorDocServFatLookUpService devedorDocServFatLookUpService;
	
	private ClienteService clienteService;
	
	private ConhecimentoService conhecimentoService;
	
	private CtoInternacionalService ctoInternacionalService;

	private NotaFiscalServicoService notaFiscalServicoService;
	
	private NotaDebitoNacionalService notaDebitoNacionalService;

	
	public List findTipoDocumentoServico(Map criteria){
        return domainValueService.findDomainValues("DM_TIPO_DOCUMENTO_SERVICO");
	}
	
	public List findLookupFilial(TypedFlatMap tfm){ 
		return this.filialService.findLookupBySgFilial(tfm.getString("sgFilial"), tfm.getString("tpAcesso"));
	} 
	
	public List findDevedorServDocFat(TypedFlatMap map){
		Long idFilial = map.getLong("idFilial");	
		Long nrDocumento = map.getLong("nrDocumentoServico");
		String tpDocumentoServico = map.getString("tpDocumentoServico");		
		Long idCliente = map.getLong("idCliente");		
		
		DevedorDocServFatLookupParam devedorDocServFatLookupParam = new DevedorDocServFatLookupParam();
		
		devedorDocServFatLookupParam.setIdFilial(idFilial);
		devedorDocServFatLookupParam.setNrDocumentoServico(nrDocumento);
		devedorDocServFatLookupParam.setTpDocumentoServico(tpDocumentoServico);
		devedorDocServFatLookupParam.setIdCliente(idCliente);
		
		return this.devedorDocServFatLookUpService.findDevedorDocServFat(
				devedorDocServFatLookupParam); 

	}
	
	public List findLookupCliente(Map map){
		return this.clienteService.findLookup(map);
	}
	
	public ResultSetPage findPaginatedDevedorDocServFat(TypedFlatMap map) {
		DevedorDocServFatLookupParam devedorDocServFatLookupParam = mountDevedorDocServFatLookupParam(map);
		
		FindDefinition findDef = FindDefinition.createFindDefinition(map);
		ResultSetPage rsp = devedorDocServFatLookUpService.findPaginated(devedorDocServFatLookupParam, findDef);
		
    	List<Map> list = rsp.getList();
    	List listRet = new ArrayList();
    	
    	for (Map m: list) {
    		TypedFlatMap mapRet = new TypedFlatMap();    		
    		mapRet.putAll(m);
    		
    		String nrIdentificacaoResponsavelAnterior = null;
    		
    		if( mapRet.getDomainValue("tpIdentificacaoResponsavelAnterior") != null && mapRet.getString("nrIdentificacaoResponsavelAnterior") != null){    		
    			nrIdentificacaoResponsavelAnterior = FormatUtils.formatIdentificacao(mapRet.getDomainValue("tpIdentificacaoResponsavelAnterior").getValue(),mapRet.getString("nrIdentificacaoResponsavelAnterior"));
    		}    		
    		
    		mapRet.put("nrIdentificacaoResponsavelAnterior",nrIdentificacaoResponsavelAnterior); 
    		
    		//concatenando o nrIdentificacaoResponsavelAnterior e o nmResponsavelAnterior 
    		mapRet.put("nrIdentRespAntNmResAnt",nrIdentificacaoResponsavelAnterior + " - "+mapRet.get("nmResponsavelAnterior") );
    		
    		//concatenando a SgFilial de cobranca com o nmFantasia da filial de cobranca
    		mapRet.put("sgFilial",mapRet.get("sgFilial") + " - "+mapRet.get("nmFantasia") );
    		
    		
			mapRet.put("doctoServico.idDoctoServico", mapRet.get("idDoctoServico"));
			
			String strNrDoctoFormatado = FormatUtils.formataNrDocumento(mapRet.getLong("nrDoctoServico").toString(),mapRet.getDomainValue("tpDocumentoServico").getValue());

    		if (StringUtils.isNotBlank(strNrDoctoFormatado)) {
    			mapRet.put("doctoServico.nrDoctoServico", strNrDoctoFormatado);
    		} else {
    			mapRet.put("doctoServico.nrDoctoServico", mapRet.getLong("nrDoctoServico").toString());
    		}
    		listRet.add(mapRet);
    	}
    	
    	rsp.setList(listRet);
    	
    	return rsp;		
	}
	
	
	public Integer getRowCountDevedorDocServFat(TypedFlatMap map){

		DevedorDocServFatLookupParam devedorDocServFatLookupParam = mountDevedorDocServFatLookupParam(map);
		
		return devedorDocServFatLookUpService.getRowCount(
				devedorDocServFatLookupParam);
	}
	
	private DevedorDocServFatLookupParam mountDevedorDocServFatLookupParam(TypedFlatMap map){
		Long idDocumento = map.getLong("doctoServico.idDoctoServico");
		Long nrDocumento = map.getLong("doctoServico.nrDoctoServico");
		String tpDocumentoServico = map.getString("doctoServico.tpDocumentoServico");				

		DevedorDocServFatLookupParam devedorDocServFatLookupParam = new DevedorDocServFatLookupParam();

		devedorDocServFatLookupParam.setIdDocumentoServico(idDocumento);
		devedorDocServFatLookupParam.setTpDocumentoServico(tpDocumentoServico);
		devedorDocServFatLookupParam.setNrDocumentoServico(nrDocumento);
		
		devedorDocServFatLookupParam.setIdFilial(map.getLong("doctoServico.filialByIdFilialOrigem.idFilial"));
		devedorDocServFatLookupParam.setIdCliente(map.getLong("cliente.idCliente"));
		devedorDocServFatLookupParam.setIdMoeda(map.getLong("idMoeda"));
		devedorDocServFatLookupParam.setIdServico(map.getLong("idServico"));
		devedorDocServFatLookupParam.setTpModal(map.getString("tpModal"));
		devedorDocServFatLookupParam.setTpAbrangencia(map.getString("tpAbrangencia"));		
		devedorDocServFatLookupParam.setTpSituacaoCobranca(map.getString("tpSituacaoCobranca"));
		devedorDocServFatLookupParam.setTpFrete(map.getString("tpFrete"));
		devedorDocServFatLookupParam.setIdDivisaoCliente(map.getLong("idDivisaoCliente"));
		
		devedorDocServFatLookupParam.setDtEmissaoInicial(map.getYearMonthDay("dtEmissaoInicial"));
		devedorDocServFatLookupParam.setDtEmissaoFinal(map.getYearMonthDay("dtEmissaoFinal"));
		
		if (devedorDocServFatLookupParam.getIdCliente() != null){
			devedorDocServFatLookupParam.setCliente(clienteService.findByIdComPessoa(devedorDocServFatLookupParam.getIdCliente()));
			
			/*Se o indicador BL_SEPARA_FATURA_MODAL for diferente de S remove os campos abaixo da consulta*/
			if(devedorDocServFatLookupParam.getCliente().getBlSeparaFaturaModal() != null && !devedorDocServFatLookupParam.getCliente().getBlSeparaFaturaModal()){
				devedorDocServFatLookupParam.setTpModal(null);
				devedorDocServFatLookupParam.setIdServico(null);
				devedorDocServFatLookupParam.setTpFrete(null);
				devedorDocServFatLookupParam.setIdDivisaoCliente(null);				
		}
		
		}
		
		devedorDocServFatLookupParam.setTpSituacaoDevedorDocServFatValido(map.getInteger("tpSituacaoDevedorDocServFatValido"));
		
		return devedorDocServFatLookupParam;
	}

	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public void setDevedorDocServFatLookUpService(
			DevedorDocServFatLookUpService devedorDocServFatLookUpService) {
		this.devedorDocServFatLookUpService = devedorDocServFatLookUpService;
	}

	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}
	
	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
	}
	
    public void setCtoInternacionalService(
			CtoInternacionalService ctoInternacionalService) {
		this.ctoInternacionalService = ctoInternacionalService;
	}	
	
	public void setNotaFiscalServicoService(
			NotaFiscalServicoService notaFiscalServicoService) {
		this.notaFiscalServicoService = notaFiscalServicoService;
	}

	//findLookup para o segundo campo da tag documento de serviço
    /**
     * Busca as filiais
     * @param criteria Critérios de pesquisa (sg_filial)
     * @return Lista de filiais 
     */
    public List findLookupServiceDocumentFilialCTR(Map criteria) {
        return this.filialService.findLookupBySgFilial(criteria);
    }

    /**
     * Busca as filiais
     * @param criteria Critérios de pesquisa (sg_filial)
     * @return Lista de filiais 
     */
    public List findLookupServiceDocumentFilialCRT(Map criteria) {
        return this.filialService.findLookupBySgFilial(criteria);
    }
    
    /**
     * Busca as filiais
     * @param criteria Critérios de pesquisa (sg_filial)
     * @return Lista de filiais 
     */
    public List findLookupServiceDocumentFilialNDN(Map criteria) {
        return this.filialService.findLookupBySgFilial(criteria);
    }    
    
    /**
     * Busca as filiais
     * @param criteria Critérios de pesquisa (sg_filial)
     * @return Lista de filiais 
     */
    public List findLookupServiceDocumentFilialNFS(Map criteria) {
        return this.filialService.findLookupBySgFilial(criteria);
    }
    
	public List findLookupServiceDocumentFilialNSE(Map criteria) {
		return this.filialService.findLookupBySgFilial(criteria);
	}

	public List findLookupServiceDocumentFilialNTE(Map criteria) {
		return this.filialService.findLookupBySgFilial(criteria);
	}

	public List findLookupServiceDocumentFilialCTE(Map criteria) {
		return this.filialService.findLookupBySgFilial(criteria);
	}

     //  findLookup para o terceiro campo da tag documento de serviço
     /**
      * Busca os dados do conhecimento
      * @param tfm Critérios de pesquisa
      * @return Lista de Conhecimentos (CTRC)
      */
     public List findLookupServiceDocumentNumberCTR(Map criteria) {
         return this.conhecimentoService.findLookup(criteria);
     }

     /**
      * Busca os dados do conhecimento
      * @param map Critérios de pesquisa
      * @return Lista de Conhecimentos (CRT)
      */
     public List findLookupServiceDocumentNumberCRT(Map map) {
        return this.ctoInternacionalService.findLookup(map);
     }

     /**
      * Busca os dados do conhecimento
      * @param tfm Critérios de pesquisa
      * @return Lista de Conhecimentos (NFS)
      */
     public List findLookupServiceDocumentNumberNFS(Map criteria) {
        return this.notaFiscalServicoService.findLookup(criteria);
     }

     /**
      * Busca os dados do conhecimento
      * @param tfm Critérios de pesquisa
      * @return Lista de Conhecimentos (NFT)
      */
     public List findLookupServiceDocumentNumberNFT(Map criteria) {
        return this.conhecimentoService.findLookup(criteria);
     } 
     
     
     /**
      * Busca os dados do conhecimento
      * @param tfm Critérios de pesquisa
      * @return Lista de Conhecimentos (NDN)
      */
     public List findLookupServiceDocumentNumberNDN(Map criteria) {
        return this.notaDebitoNacionalService.findLookup(criteria);
     }      

	public List findLookupServiceDocumentNumberNSE(Map criteria) {
		return this.conhecimentoService.findLookup(criteria);
	}
     
	public List findLookupServiceDocumentNumberNTE(Map criteria) {
		return this.conhecimentoService.findLookup(criteria);
	}

	public List findLookupServiceDocumentNumberCTE(Map criteria) {
		return this.conhecimentoService.findLookup(criteria);
	}

     
     /**
      * Busca os dados do conhecimento
      * @param tfm Critérios de pesquisa
      * @return Lista de Conhecimentos (NFT)
      */
     public List findLookupServiceDocumentFilialNFT(Map criteria) {
         return this.filialService.findLookupBySgFilial(criteria);
     }

	public void setNotaDebitoNacionalService(
			NotaDebitoNacionalService notaDebitoNacionalService) {
		this.notaDebitoNacionalService = notaDebitoNacionalService;
	}

}
