package com.mercurio.lms.contasreceber.action;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.contasreceber.model.param.DevedorDocServFatLookupParam;
import com.mercurio.lms.contasreceber.model.service.ConsultarDadosCobrancaDocumentoServicoService;
import com.mercurio.lms.contasreceber.model.service.DevedorDocServFatLookUpService;
import com.mercurio.lms.contasreceber.model.service.NotaDebitoNacionalService;
import com.mercurio.lms.entrega.model.service.ReciboReembolsoService;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.model.service.CtoInternacionalService;
import com.mercurio.lms.expedicao.model.service.NotaFiscalServicoService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.pendencia.model.service.MdaService;
import com.mercurio.lms.util.AliasToNestedMapResultTransformer;
import com.mercurio.lms.util.FormatUtils;
/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contasreceber.consultarDadosCobrancaDocumentoServicoAction"
 */

public class ConsultarDadosCobrancaDocumentoServicoAction {
	
	private DevedorDocServFatLookUpService devedorDocServFatLookUpService;
	private ConsultarDadosCobrancaDocumentoServicoService consultarDadosCobrancaDocumentoServicoService;
	
	/** Seta um novo objeto cedenteService na variável cedenteService, através da inversão de controle do Spring */
	public void setConsultarDadosCobrancaDocumentoServicoService(ConsultarDadosCobrancaDocumentoServicoService consultarDadosCobrancaDocumentoServicoService) {
		this.consultarDadosCobrancaDocumentoServicoService = consultarDadosCobrancaDocumentoServicoService;
	}
	
	private DomainValueService domainValueService;
	public void setDomainValueService(DomainValueService domainValueService){
		this.domainValueService = domainValueService;
	}
	
	private FilialService filialService;
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	
	private CtoInternacionalService ctoInternacionalService;
	public void setCtoInternacionalService(CtoInternacionalService ctoInternacionalService) {
		this.ctoInternacionalService = ctoInternacionalService;
	}
	
	private ConhecimentoService conhecimentoService;
	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
	}
	
	private NotaFiscalServicoService notaFiscalServicoService;
	public void setNotaFiscalServicoService(NotaFiscalServicoService notaFiscalServicoService){
		this.notaFiscalServicoService = notaFiscalServicoService;
	}
	
	private NotaDebitoNacionalService notaDebitoNacionalService;
	public void setNotaDebitoNacionalService(NotaDebitoNacionalService notaDebitoNacionalService){
		this.notaDebitoNacionalService = notaDebitoNacionalService;
	}
	
	private ReciboReembolsoService reciboReembolsoService;
	public void setReciboReembolsoService(ReciboReembolsoService reciboReembolsoService){
		this.reciboReembolsoService = reciboReembolsoService;
	}
	
	private MdaService mdaService;
	public void setMdaService(MdaService mdaService){
		this.mdaService = mdaService;
	}
	
	private ConfiguracoesFacade configuracoesFacade;
	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}
	
	/**
	 * Método que carrega a combo de doctoServico
	 * 
	 * @param criteria
	 * @return List contendo os tipos de doctoServico
	 */
	public List findTipoDocumentoServico(Map criteria) {
		String tpDocFat = (String)configuracoesFacade
				.getValorParametro("TP_DOCTO_FAT4");

		String[] dm = tpDocFat.split(";");
        List dominiosValidos = Arrays.asList(dm);
	    	List retorno = domainValueService.findByDomainNameAndValues("DM_TIPO_DOCUMENTO_SERVICO", dominiosValidos);
	    	return retorno;
	}
	
	public List findLookupServiceDocumentFilialCTR(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }

    public List findLookupServiceDocumentFilialCRT(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }

    public List findLookupServiceDocumentFilialNFS(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }
    
    public List findLookupServiceDocumentFilialNFT(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }
    
    public List findLookupServiceDocumentFilialNDN(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }

    public List findLookupServiceDocumentFilialRRE(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }
    
    public List findLookupServiceDocumentFilialMDA(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }
    
	public List findLookupServiceDocumentFilialNTE(Map criteria) {
		return findLookupFilialByDocumentoServico(criteria);
	}

	public List findLookupServiceDocumentFilialNSE(Map criteria) {
		return findLookupFilialByDocumentoServico(criteria);
	}

	public List findLookupServiceDocumentFilialCTE(Map criteria) {
		return findLookupFilialByDocumentoServico(criteria);
	}

    /**
     * Busca os dados do conhecimento
     * @param tfm Critérios de pesquisa
     * @return Lista de Conhecimentos (CTRC)
     */
    public List findLookupServiceDocumentNumberCTR(Map map) {
        return this.conhecimentoService.findLookup(map);
    }

    /**
     * Busca os dados do conhecimento
     * @param map Critérios de pesquisa
     * @return Lista de Conhecimentos (CRT)
     */
    public List findLookupServiceDocumentNumberCRT(Map map) {
       return this.ctoInternacionalService.findLookup(map);
    }

    /**
     * Busca os dados do conhecimento
     * @param tfm Critérios de pesquisa
     * @return Lista de Conhecimentos (NFS)
     */
    public List findLookupServiceDocumentNumberNFS(Map map) {
       return this.notaFiscalServicoService.findLookup(map);
    }
    
    /**
     * Busca os dados do conhecimento
     * @param tfm Critérios de pesquisa
     * @return Lista de Conhecimentos (NFT)
     */
    public List findLookupServiceDocumentNumberNFT(Map map) {
       return this.conhecimentoService.findLookup(map);
    }
    
    /**
     * Busca os dados do conhecimento
     * @param tfm Critérios de pesquisa
     * @return Lista de Conhecimentos (NDN)
     */
    public List findLookupServiceDocumentNumberNDN(Map map) {
       return this.notaDebitoNacionalService.findLookup(map);
    }
    
    /**
     * Busca os dados do conhecimento
     * @param tfm Critérios de pesquisa
     * @return Lista de Conhecimentos (RRE)
     */
    public List findLookupServiceDocumentNumberRRE(Map map) {
       return this.reciboReembolsoService.findLookup(map);
    }
    
    /**
     * Busca os dados do conhecimento
     * @param tfm Critérios de pesquisa
     * @return Lista de Conhecimentos (NDN)
     */
    public List findLookupServiceDocumentNumberMDA(Map map) {
       return this.mdaService.findLookup(map);
    }    
    
    /**
    * Busca os dados do conhecimento
    * @param tfm Critérios de pesquisa
    * @return Lista de Conhecimentos (CTE)
    */
   public List findLookupServiceDocumentNumberCTE(Map map) {
      return this.conhecimentoService.findLookup(map);
   }
    
    /**
    * Busca os dados do conhecimento
    * @param tfm Critérios de pesquisa
    * @return Lista de Conhecimentos (CTE)
    */
   public List findLookupServiceDocumentNumberNTE(Map map) {
      return this.conhecimentoService.findLookup(map);
   }
    
    /**
     * Busca os dados de DevedoresDocServFat e do documento a ele associado
     * @param map Critérios de pesquisa : idFilial, nrDoctoServico e tpDocumentoServico
     * @return Lista de DevedorDocServFat
     */
    public List findDevedorServDocFat(TypedFlatMap map){
    	
    	Long idFilial = map.getLong("doctoServico.filialByIdFilialOrigem.idFilial");	
		Long nrDocumento = map.getLong("doctoServico.nrDoctoServico");
		String tpDocumentoServico = map.getString("doctoServico.tpDocumentoServico");
		
		DevedorDocServFatLookupParam devedorDocServFatLookupParam = new DevedorDocServFatLookupParam();
		
		devedorDocServFatLookupParam.setIdFilial(idFilial);
		devedorDocServFatLookupParam.setNrDocumentoServico(nrDocumento);
		devedorDocServFatLookupParam.setTpDocumentoServico(tpDocumentoServico);
		
		List result = devedorDocServFatLookUpService.findDevedorDocServFat(devedorDocServFatLookupParam);
		
		TypedFlatMap tfm = null;
		List retorno = new ArrayList();
		
		for (Iterator iter = result.iterator(); iter.hasNext();) {
			
			tfm = new TypedFlatMap();
			
			Map element = (Map) iter.next();
			
			tfm.put("doctoServico_idDoctoServico",element.get("idDoctoServico"));
			tfm.put("doctoServico_tpDocumentoServico",element.get("tpDocumentoServico"));						
			tfm.put("doctoServico_nrDoctoServico",FormatUtils.formataNrDocumento(((Long) element.get("doctoServico_nrDoctoServico")).toString(),
					                                                             ((DomainValue)element.get("tpDocumentoServico")).getValue()));
			tfm.put("doctoServico_filialByIdFilialOrigem_idFilial",element.get("idFilialOrigem"));
			tfm.put("doctoServico_filialByIdFilialOrigem_sgFilial",element.get("sgFilialOrigem"));
			tfm.put("filial_idFilial",element.get("idFilial"));
			
			retorno.add(tfm);
			
		}
		
		return AliasToNestedMapResultTransformer.getInstance().transformListResult(retorno);
	}
    
    /**
     * Busca as filiais para a lookup de documento de serviço
     * @param map sgFilial informado na lookup de filial
     * @return Lista de filiais
     */
    public List findLookupFilial(TypedFlatMap map){
		return filialService.findLookup(map);
	}
	 
    public List findLookupFilialByDocumentoServico(Map criteria) {
    	List list = filialService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		Filial filial = (Filial)iter.next();
    		TypedFlatMap typedFlatMap = new TypedFlatMap();
    		typedFlatMap.put("idFilial", filial.getIdFilial());
    		typedFlatMap.put("sgFilial", filial.getSgFilial());
    		typedFlatMap.put("pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
    		retorno.add(typedFlatMap);
    	}
    	return retorno;
    }
    
	/**
	 * 
	 * @param criteria
	 * @return ResultSetPage
	 */
	public ResultSetPage findPaginated(TypedFlatMap criteria) {
		return consultarDadosCobrancaDocumentoServicoService.findPaginated(criteria);
	}
	
	/**
	 * 
	 * @param criteria
	 * @return Integer
	 */ 
	public Integer getRowCount(TypedFlatMap criteria) {
		return consultarDadosCobrancaDocumentoServicoService.getRowCount(criteria);
	}
	
	
	
	 /**
     * Método responsável por buscar os dados do documento de serviço com o tipo frete 
     * @param id
     * @return Cedente
     */
    public Map findById(Long id){
    	
    	Map retorno = consultarDadosCobrancaDocumentoServicoService.findDocumentoWithTipoFrete(id);
    	
    	TypedFlatMap map = new TypedFlatMap();
    	
    	map.putAll(retorno);
    	
    	DomainValue tpDoctoServico = (DomainValue) retorno.get("tpDocumentoServico");
    	
    	map.put("tpDocumentoServico",tpDoctoServico.getDescription());
    	map.put("tpDocumentoServicoValue",tpDoctoServico.getValue());
    		
    	return map;
    	
    }
    	
    /**
     * 
     * @param criteria
     * @return
     */
    public List findDevedorDocServFatByDoctoServico(TypedFlatMap criteria){
    	return consultarDadosCobrancaDocumentoServicoService.findDevedorDocServFatByDoctoServico(criteria);
    }
    
    public Integer getRowCountByDevedorDocServFat(TypedFlatMap criteria){
    	return null;
    }
    
    /**
     * 
     * @param criteria
     * @return Map
     */
    public Map findDevedorDocServFatDetail(TypedFlatMap criteria){
    	return consultarDadosCobrancaDocumentoServicoService.findDevedorDocServFatDetail(criteria);
    }
    
    /**
     * 
     * @param idDevedor
     * @return List 
     */
    public List findByIdDevedorDocServFat(TypedFlatMap criteria){
    	return consultarDadosCobrancaDocumentoServicoService.findByIdDevedorDocServFat(criteria.getLong("idDevedorDocServFat"));
    }
    
    /**
     * 
     * @param idItemTransferencia
     * @return
     */
    public Map findDadosTransferencia(Long idItemTransferencia){
    	return consultarDadosCobrancaDocumentoServicoService.findDadosTransferencia(idItemTransferencia);
    }

	public void setDevedorDocServFatLookUpService(
			DevedorDocServFatLookUpService devedorDocServFatLookUpService) {
		this.devedorDocServFatLookUpService = devedorDocServFatLookUpService;
	}
	
}
