package com.mercurio.lms.contasreceber.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang.StringUtils;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Contato;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.configuracoes.model.service.ContatoService;
import com.mercurio.lms.contasreceber.model.AgendaCobranca;
import com.mercurio.lms.contasreceber.model.CobrancaInadimplencia;
import com.mercurio.lms.contasreceber.model.LigacaoCobranca;
import com.mercurio.lms.contasreceber.model.service.AgendaCobrancaService;
import com.mercurio.lms.contasreceber.model.service.CobrancaInadimplenciaService;
import com.mercurio.lms.contasreceber.model.service.LigacaoCobrancaService;
import com.mercurio.lms.util.session.SessionUtils;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;

/**
 * Generated by: ADSM ActionGenerator
 * @author JoseMR
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contasreceber.manterAgendaCobrancaInadimplenciaAction"
 */

public class ManterAgendaCobrancaInadimplenciaAction extends CrudAction {
    
    private ContatoService contatoService;
    private LigacaoCobrancaService ligacaoCobrancaService;
    private CobrancaInadimplenciaService cobrancaInadimplenciaService;

    /**
     * Seta a Service padrão desta ET
     * @param serviceService AgendaCobrancaService
     */
    public void setAgendaCobrancaService(AgendaCobrancaService serviceService) {
		this.defaultService = serviceService;
	}
    
    /**
     * Método getter da Service Padrão desta ET
     * @return Instância da Service AgendaCobrancaService
     */
    private AgendaCobrancaService getAgendaCobrancaService(){
        return (AgendaCobrancaService) this.defaultService;
    }
    
    /**
     * Remove um registro de Agenda de Cobranca Inadimplência
     * @param id Identificador do registro a ser removido
     */
    public void removeById(java.lang.Long id) {
        getAgendaCobrancaService().removeById(id);
    }

	/**
     * Remove vários registro de Agenda de Cobrança Inadimplência
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	getAgendaCobrancaService().removeByIds(ids);
    }

    /**
     * Busca um registro de Agenda de Cobrança Inadimplência
     * @param id Identificador dp registro da agenda a ser pesquisado
     * @return Instância da Agenda encontrada na pesquisa
     */
    public Serializable findById(Long id) {
        return getAgendaCobrancaService().findByIdMap(id);
    }
    
    /**
     * Salva os dados da Agenda de Cobrança
     * @param tfm Dados da Agenda de Cobrança
     * @return Instância da Agenda de cobrança salva
     */
    public Serializable store(TypedFlatMap tfm) {
        
        AgendaCobranca ac = new AgendaCobranca();
        CobrancaInadimplencia ci = null;
 
        ci = cobrancaInadimplenciaService.findById(tfm.getLong("cobrancaInadimplencia.idCobrancaInadimplencia"));
        
        LigacaoCobranca lc = null;
        
        if( tfm.getLong("ligacaoCobranca.idLigacaoCobranca") != null ){
        	lc = new LigacaoCobranca();
        	lc.setIdLigacaoCobranca(tfm.getLong("ligacaoCobranca.idLigacaoCobranca"));
        }
        
        Usuario usuarioAgenda = new Usuario();
        usuarioAgenda.setIdUsuario(tfm.getLong("usuario.idUsuario"));
        
        Contato contatoAgenda = null;
        
        if( tfm.getLong("contato.idContato") != null ){
        	contatoAgenda = new Contato();
        	contatoAgenda.setIdContato(tfm.getLong("contato.idContato"));
        }
        
        if( tfm.containsKey("idAgendaCobranca") && StringUtils.isNotBlank(tfm.getString("idAgendaCobranca")) ){
            ac.setIdAgendaCobranca(tfm.getLong("idAgendaCobranca"));
        }
        
        ac.setDhAgendaCobranca(tfm.getDateTime("dhAgendaCobranca"));
        ac.setDsAgendaCobranca(tfm.getString("dsAgendaCobranca"));
        
        ac.setCobrancaInadimplencia(ci);
        ac.setUsuario(usuarioAgenda);
        ac.setContato(contatoAgenda);
        ac.setLigacaoCobranca(lc); 
        
        return getAgendaCobrancaService().store(ac);
    }
    
    /**
     * Método responsável pela busca das informações a serem mostradas na grid
     * @param tfm Critérios de pesquisa
     * @return ResultSetPage contendo o resultado do hql e dados de paginação
     */ 
    public ResultSetPage findPaginated(TypedFlatMap tfm) {
        return getAgendaCobrancaService().findPaginated(tfm);
    }
    
    /**
     * Método responsável por contar quantos itens resultara a query de listagem
     * @param criteria Critérios de pesquisa
     * @return Inteiro que representa o número de registro retornado pela query de listagem
     */
    public Integer getRowCount(TypedFlatMap tfm) {
        return getAgendaCobrancaService().getRowCount(tfm);
    }
    
    /**
     * Busca os contatos de acordo com os critérios para a combo de Contatos
     * @param tfm Critérios de pesquisa
     * @return Lista de contatos
     */
    public List findComboContatos(TypedFlatMap tfm){
        return contatoService.find(tfm);
    }
    
    /**
     * Busca os dados da última Ligação Cobrança de acordo com a cobrança inadimplência
     * @param tfm Map contendo o Identificador da Cobrança Inadimplência
     * @return A última ligação cobrança de acordo com a cobrança inadimplência
     */
    public AgendaCobranca findDadosLigacaoCobranca(TypedFlatMap tfm){
        
        AgendaCobranca ac = null;
        
        if( StringUtils.isNotBlank(tfm.getString("cobrancaInadimplencia.idCobrancaInadimplencia")) ){
            ac = new AgendaCobranca();
            ac.setLigacaoCobranca(ligacaoCobrancaService.findDadosLigacaoCobrancaByCobrancaInadimplencia(tfm));
        }
        
        return ac;
        
    }
    
    /**
     * Busca o usuário logado para setar na lookup de usuário da seção Dados da Agenda
     * @param tfm Neste caso, sem nenhum critério de pesquisa
     * @return
     */
    public TypedFlatMap findUsuarioLogado(TypedFlatMap tfm){
    	
    	TypedFlatMap retorno = new TypedFlatMap();
    	
    	Usuario usuarioLogado = SessionUtils.getUsuarioLogado();
    	
    	retorno.put("usuario.idUsuario",  usuarioLogado.getIdUsuario());
    	retorno.put("usuario.nrMatricula",usuarioLogado.getNrMatricula());
    	retorno.put("usuario.nmUsuario",  usuarioLogado.getNmUsuario());
    	
    	return retorno;
    	
    }
    
    /**
     * Busca as faturas para a listBox de faturas Inadimplência
     * @param tfm Map contendo o Identificador da Cobrança Inadimplência
     * @return Lista de faturas Inadimplência
     */
    public List findComboFaturasInadimplencia(TypedFlatMap tfm){
    	
    	List retorno = null;
    	
    	if( tfm.getLong("ligacaoCobranca.idLigacaoCobranca") != null ){
        
	        AgendaCobranca ac = new AgendaCobranca();
	        
	        LigacaoCobranca lc = new LigacaoCobranca();
	        
	        List faturas = ligacaoCobrancaService.findFaturasInadimplenciaByAgendaCobranca(tfm);
	
	        lc.setItemLigacoes(faturas);
	        
	        ac.setLigacaoCobranca(lc);
	        
	        retorno = new ArrayList();
	        
	        retorno.add(ac);
	        
    	}
        
        return retorno;
    }
    
    /**
     * Método setter da service de Contatos
     * @param contatoService Instância de ContatoService
     */
    public void setContatoService(ContatoService contatoService) {
        this.contatoService = contatoService;
    }

    public void setLigacaoCobrancaService(
            LigacaoCobrancaService ligacaoCobrancaService) {
        this.ligacaoCobrancaService = ligacaoCobrancaService;
    }

	public void setCobrancaInadimplenciaService(
			CobrancaInadimplenciaService cobrancaInadimplenciaService) {
		this.cobrancaInadimplenciaService = cobrancaInadimplenciaService;
	}

}
