package com.mercurio.lms.contasreceber.action;

import com.mercurio.adsm.core.util.Base64Util;
import com.mercurio.adsm.core.util.ReflectionUtils;
import com.mercurio.adsm.core.util.VMProperties;
import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.hibernate.VarcharI18n;
import com.mercurio.adsm.framework.model.masterdetail.*;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.report.ReportExecutionManager;
import com.mercurio.adsm.framework.session.SessionContext;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.CotacaoMoeda;
import com.mercurio.lms.configuracoes.model.Moeda;
import com.mercurio.lms.configuracoes.model.UsuarioLMS;
import com.mercurio.lms.configuracoes.model.service.CotacaoMoedaService;
import com.mercurio.lms.configuracoes.model.service.UsuarioService;
import com.mercurio.lms.contasreceber.dto.ProcessaArquivoLinhaDTO;
import com.mercurio.lms.contasreceber.model.*;
import com.mercurio.lms.contasreceber.model.param.DevedorDocServFatLookupParam;
import com.mercurio.lms.contasreceber.model.param.DivisaoClienteParam;
import com.mercurio.lms.contasreceber.model.param.FaturaLookupParam;
import com.mercurio.lms.contasreceber.model.service.*;
import com.mercurio.lms.contasreceber.report.EmitirFaturasExcelService;
import com.mercurio.lms.contasreceber.util.DataVencimentoService;
import com.mercurio.lms.expedicao.model.DoctoServico;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.model.service.DoctoServicoService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.HistoricoFilialService;
import com.mercurio.lms.util.*;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.AgrupamentoCliente;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.TipoAgrupamento;
import com.mercurio.lms.vendas.model.service.AgrupamentoClienteService;
import com.mercurio.lms.vendas.model.service.ClienteService;
import com.mercurio.lms.vendas.model.service.DivisaoClienteService;
import com.mercurio.lms.vendas.model.service.TipoAgrupamentoService;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.MapUtils;
import org.apache.commons.lang.ArrayUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.joda.time.DateTime;
import org.joda.time.YearMonthDay;
import org.joda.time.format.DateTimeFormat;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.Serializable;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.*;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * N�o inserir documenta��o ap�s ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este servi�o.
 * @spring.bean id="lms.contasreceber.manterFaturasAction"
 */

public class ManterFaturasAction extends MasterDetailAction {
	
	private static final int LINE_NUMBER_BASE = 2;
	private static final String ITEM_FATURA = "itemFatura";
	private static final String LINE_SEPARATOR = VMProperties.LINE_SEPARATOR.getValue();

	private UsuarioService usuarioService;
	
	private AgrupamentoClienteService agrupamentoClienteService;
	private BloqueioFaturamentoService bloqueioFaturamentoService;
	private TratativaCobInadimplenciaService tratativaCobInadimplenciaService;
	private BoletoService boletoService;
	private CedenteService cedenteService;
	private ClienteService clienteService;
	private CotacaoMoedaService cotacaoMoedaService;
	private ConfiguracoesFacade configuracoesFacade;
	private ConhecimentoService conhecimentoService;
	private DevedorDocServFatService devedorDocServFatService;
	private DevedorDocServFatLookUpService devedorDocServFatLookUpService;
	private DescontoService descontoService;
	private DivisaoClienteService divisaoClienteService;
	private DoctoServicoService doctoServicoService;
	private DomainValueService domainValueService;
	private FilialService filialService;  
	private ZerarDescontoService zerarDescontoService;
	private HistoricoFilialService historicoFilialService;
	private TipoAgrupamentoService tipoAgrupamentoService;
	private MotivoDescontoService motivoDescontoService;
	private RedecoService redecoService;
	private ReciboService reciboService;
	private GerarFaturaFaturaService gerarFaturaFaturaService;
	private DataVencimentoService dataVencimentoService;
	private FaturaAnexoService faturaAnexoService;
	private RelacaoPagtoParcialService relacaoPagtoParcialService;
	private ItemRelacaoPagtoParcialService itemRelacaoPagtoParcialService;
    private ReportExecutionManager reportExecutionManager;
    private EmitirFaturasExcelService emitirFaturasExcelService;
    private MonitoramentoMensagemService monitoramentoMensagemService;
    
	private static String FATURA_ANEXO_CONFIG_ALIAS = "faturaAnexo";
	private static String BLOQUEIO_FATURAMENTO_KEY = "lstBloqueioFaturamento";
	private Logger log = LogManager.getLogger(ManterFaturasAction.class);
	private static final Locale BR_LOCALE = new Locale("pt", "BR");

	public String execute(TypedFlatMap parameters) throws Exception {
		return reportExecutionManager.generateReportLocator(emitirFaturasExcelService.executeExportacaoCsv(parameters, reportExecutionManager.generateOutputDir()));
	}
		
    public Map<String,String> importFaturasDesconto(TypedFlatMap parameters){
    	Scanner sc = null;
		List<BusinessException> list;
		try {
			String arquivoCSV = MapUtils.getString(parameters, "dcArquivo");
			Long idFatura = MapUtils.getLong(parameters, "idFatura");
			
			if(arquivoCSV == null){
				throw new BusinessException("LMS-00001", new Object[]{"Arquivo CSV"});
			}
			
			byte[] tmpArquivo = Base64Util.decode(arquivoCSV);
			// LMS-4249 - ajuste para tratamento de final de arquivo truncado
			tmpArquivo = ajusteArquivoTruncado(tmpArquivo);
			byte[] arquivo = Arrays.copyOfRange(tmpArquivo, 1024, tmpArquivo.length);
			
			InputStream is = new ByteArrayInputStream(arquivo);
			sc = new Scanner(is).useDelimiter("[;\r\n]+");
			sc.useLocale(SessionUtils.getUsuarioLogado().getLocale());
			list = this.processaArquivoCSV(sc,idFatura);

		} catch (IOException e) {
			throw new BusinessException("LMS-00081", new Object[] { "Arquivo CSV" },e);
		} finally {
			try {
				if (sc != null) {
					sc.close();
				}
			} catch (Exception e) {	
				
			}
		}
		

    	Map<String,String> rowData = new HashMap<String,String>();
    	rowData.put("resultadoValidacao", exceptionsListToString(list));

		return rowData;
    }
    
	private byte[] ajusteArquivoTruncado(byte[] tmpArquivo) {
		byte[] lineSeparator = LINE_SEPARATOR.getBytes();
		if (checkArrayTail(tmpArquivo, lineSeparator)) {
			return tmpArquivo;
		}
		return ArrayUtils.addAll(tmpArquivo, lineSeparator);
	}

	private boolean checkArrayTail(byte[] array, byte[] tail) {
		byte[] part = ArrayUtils.subarray(array, array.length - tail.length, array.length);
		return ArrayUtils.isEquals(part, tail);
	}

	private String exceptionsListToString(List<BusinessException> list) {
		StringBuilder result = new StringBuilder();
		for (BusinessException businessException : list) {
			result.append(businessException.getMessageKey()).append(" - ").append(configuracoesFacade.getMensagem(businessException.getMessageKey(),businessException.getMessageArguments()));
			result.append(LINE_SEPARATOR);
		}
		return result.toString();
	}


	@SuppressWarnings("unchecked")
	private List<BusinessException> processaArquivoCSV(Scanner sc, Long idFatura) {
		List<BusinessException> exceptions = new LinkedList<BusinessException>();
		
		Map<String, BigDecimal> descontos = new HashMap<String, BigDecimal>();
		
		MasterEntry entry = getMasterFromSession(idFatura, false);
		Fatura master = (Fatura) entry.getMaster();
		ItemList sessionItems = getItemsFromSession(entry, ITEM_FATURA);
		
		Map<String, ItemFatura> items = mountKeyItemMap(sessionItems.getItems());
		
		boolean cabecalho = true;
		
		Integer nrQuantidadeLinhas = 0;
		
		while (sc.hasNext()) {

			if(cabecalho) {
				sc.nextLine();
				cabecalho = false;
			}
			
			String sgFilialFatura = null;
			Long nrFatura = null;
			String tpDocumento = null;
			String sgFilialDocto = null;
			Long nrDocto = null;
			BigDecimal vlDevido = null;
			BigDecimal vlDesconto = null;
			
			try{
				sgFilialFatura = sc.next().trim();
				nrFatura = Long.valueOf(sc.next().trim());
				tpDocumento = sc.next().trim();
				sgFilialDocto = sc.next().trim();
				nrDocto = Long.valueOf(sc.next().trim());
				
				vlDevido = parseBigDecimal(sc.next().trim());
				vlDesconto = parseBigDecimal(sc.next().trim());
				sc.next();
				sc.next();
				
				sc.nextLine();
			} catch (Exception e){
				exceptions.add( new BusinessException("LMS-36287"));
				return exceptions;
			}
			
			Boolean hasRequired = hasRequiredFieldsValue(sgFilialFatura, nrFatura, tpDocumento, sgFilialDocto, nrDocto, vlDevido);
			if(!hasRequired){
				exceptions.add( new BusinessException("LMS-36287"));
				return exceptions;
			}

			ProcessaArquivoLinhaDTO parameters = new ProcessaArquivoLinhaDTO();
			parameters.setFaturaMaster(master);
			parameters.setKeyItems(items);
			parameters.setSgFilialFatura(sgFilialFatura);
			parameters.setNrFatura(nrFatura);
			parameters.setTpDocumento(tpDocumento);
			parameters.setSgFilialDocto(sgFilialDocto);
			parameters.setNrDocto(nrDocto);
			parameters.setVlDevido(vlDevido);
			parameters.setVlDesconto(vlDesconto);
			parameters.setNrLinha(nrQuantidadeLinhas);
			List<BusinessException> validacoes = validateLinha(parameters);
			exceptions.addAll(validacoes);
			
			String key = createKey(tpDocumento,sgFilialDocto,nrDocto);
			descontos.put(key, vlDesconto);
			
			nrQuantidadeLinhas++;
		}
		
		if(MapUtils.isNotEmpty(items) && !validateNumeroLinhas(items.values(), nrQuantidadeLinhas)){
			exceptions.add( new BusinessException("LMS-36290",new Object[]{nrQuantidadeLinhas,items.values().size()}));
			return exceptions;
		}
		
		if(CollectionUtils.isEmpty(exceptions) && MapUtils.isNotEmpty(descontos)){
			aplicarDescontosImportados(items, descontos);
		}

		return exceptions;
	}


	private void aplicarDescontosImportados(Map<String, ItemFatura> items, Map<String, BigDecimal> descontos) {
		for (String key : descontos.keySet()) {
			if(items.containsKey(key)){
				ItemFatura item = items.get(key);
				
				DevedorDocServFat devedor = item.getDevedorDocServFat();
				if(devedor != null){
					Desconto desconto = devedor.getDesconto();
					if(desconto == null){       
						desconto = new Desconto();
					}
				    BigDecimal percentualDesconto = descontoService.calculaPorcentagemDesconto(descontos.get(key), devedor.getVlDevido());
						
				    desconto.setDevedorDocServFat(devedor);
				    desconto.setVlDesconto(descontos.get(key));
				    desconto.setTpSituacaoAprovacao(new DomainValue("E"));
				    desconto.setPercentualDesconto(percentualDesconto);
				    desconto.setNrDocumento(devedor.getDoctoServico().getNrDoctoServico().toString());

				    
				    List<Desconto> descontoList = new ArrayList<Desconto>();
				    descontoList.add(desconto);
				    
				    devedor.setDescontos(descontoList);
				}
			}
		}
	}

	private List<BusinessException> validateLinha(ProcessaArquivoLinhaDTO parameters) {
		Fatura faturaMaster = parameters.getFaturaMaster();
		Map<String, ItemFatura> keyItems = parameters.getKeyItems();
		String sgFilialFatura = parameters.getSgFilialFatura();
		Long nrFatura = parameters.getNrFatura();
		String tpDocumento = parameters.getTpDocumento();
		String sgFilialDocto = parameters.getSgFilialDocto();
		Long nrDocto = parameters.getNrDocto();
		BigDecimal vlDevido = parameters.getVlDevido();
		BigDecimal vlDesconto = parameters.getVlDesconto();
		Integer nrLinha = parameters.getNrLinha();

		List<BusinessException> exceptions = new ArrayList<BusinessException>();
		int realLineNumber = nrLinha+LINE_NUMBER_BASE;
		if(faturaMaster != null){
	
			Filial filialMaster = faturaMaster.getFilialByIdFilial();
			
			Long nrFaturaMaster = faturaMaster.getNrFatura();
			if(filialMaster == null || nrFaturaMaster == null ||
				(!filialMaster.getSgFilial().equals(sgFilialFatura) || !nrFaturaMaster.equals(nrFatura))){
				exceptions.add(new BusinessException("LMS-36285", new Object[]{realLineNumber}));
			}
			if(MapUtils.isNotEmpty(keyItems)){
				String keyLinhaArquivo = createKey(tpDocumento, sgFilialDocto, nrDocto);
				
				if(!keyItems.containsKey(keyLinhaArquivo)){
					exceptions.add(new BusinessException("LMS-36286", new Object[]{realLineNumber}));
				}
				
				ItemFatura item = keyItems.get(keyLinhaArquivo);
				if(item != null && item.getDevedorDocServFat() != null){
					if(item.getDevedorDocServFat().getVlDevido().compareTo(vlDevido) != 0){
						exceptions.add(new BusinessException("LMS-36288", new Object[]{realLineNumber}));
					}
					validaValorDesconto(vlDesconto, exceptions, realLineNumber, item);
				}
			} else {
				exceptions.add(new BusinessException("LMS-36286", new Object[]{realLineNumber}));
			}
		}
		return exceptions;
	}

	private void validaValorDesconto(BigDecimal vlDesconto, List<BusinessException> exceptions, int realLineNumber, ItemFatura item) {
		if(BigDecimalUtils.hasValue(vlDesconto)){
			List<ItemRelacaoPagtoParcial> irpp = itemRelacaoPagtoParcialService.findByIdDevedorDocServFat(item.getDevedorDocServFat().getIdDevedorDocServFat());
			
			BigDecimal valorRecebidoParcial = BigDecimal.ZERO;
			
			for (ItemRelacaoPagtoParcial itemRelacaoPagtoParcial : irpp) {
				valorRecebidoParcial = valorRecebidoParcial.add(itemRelacaoPagtoParcial.getVlPagamento());
			}

			BigDecimal diferenca = item.getDevedorDocServFat().getVlDevido().subtract(valorRecebidoParcial);
			
			if(diferenca.compareTo(vlDesconto) < 0){
				exceptions.add(new BusinessException("LMS-36289", new Object[]{realLineNumber}));
			}
		}
	}


	private String createKey(String tpDocumento, String sgFilialDocto, Long nrDocto) {
		StringBuilder keyLinhaArquivo = new StringBuilder();
		keyLinhaArquivo.append(tpDocumento).append(sgFilialDocto).append(nrDocto);
		return keyLinhaArquivo.toString();
	}

	private Map<String, ItemFatura> mountKeyItemMap(List<Object> itemList) {
		Map<String, ItemFatura> keyItems = new HashMap<String, ItemFatura>();
		
		for (Object object : itemList) {
			ItemFatura itemFatura = (ItemFatura)object;
			if(itemFatura != null && itemFatura.getDevedorDocServFat() != null && itemFatura.getDevedorDocServFat().getDoctoServico() != null){
				StringBuilder keyItemFatura = new StringBuilder();
				
				if(itemFatura.getDevedorDocServFat().getDoctoServico().getTpDocumentoServico() != null){
					keyItemFatura.append(itemFatura.getDevedorDocServFat().getDoctoServico().getTpDocumentoServico().getValue());
				}
				
				if(itemFatura.getDevedorDocServFat().getDoctoServico().getFilialByIdFilialOrigem() != null){
					keyItemFatura.append(itemFatura.getDevedorDocServFat().getDoctoServico().getFilialByIdFilialOrigem().getSgFilial());
				}
				
				keyItemFatura.append(itemFatura.getDevedorDocServFat().getDoctoServico().getNrDoctoServico());
				
				keyItems.put(keyItemFatura.toString(), itemFatura);
			}
		}
		
		return keyItems;
	}
	
	private Boolean hasRequiredFieldsValue(String sgFilialFatura, Long nrFatura, String tpDocumento, String sgFilialDocto, Long nrDocto, BigDecimal vlDevido) {
		boolean allRequeried = true;
		if(StringUtils.isBlank(sgFilialFatura)){
			allRequeried = false;
		}
		
		if(!LongUtils.hasValue(nrFatura)){
			allRequeried = false;
		}
		
		if(StringUtils.isBlank(tpDocumento)){
			allRequeried = false;
		}
		
		if(StringUtils.isBlank(sgFilialDocto)){
			allRequeried = false;
		}
		
		if(!LongUtils.hasValue(nrDocto)){
			allRequeried = false;
		}
		
		if(!BigDecimalUtils.hasValue(vlDevido)){
			allRequeried = false;
		}
		
		if(!allRequeried){
			return false;
		}
		
		return allRequeried;
	}


	private boolean validateNumeroLinhas(Collection<ItemFatura> itemList, Integer nrQuantidadeLinhas) {
		if(CollectionUtils.isNotEmpty(itemList)){
			int size = itemList.size();
			if (nrQuantidadeLinhas < size || nrQuantidadeLinhas > size){
				return false;
			}
		}
		return true;
	}

	private BigDecimal parseBigDecimal(String scanned) throws ParseException {
		String trim =scanned;
		if(!trim.matches("^[0-9.,]+$")){
			throw new BusinessException("LMS-36287 ");
		}
		
		Number valor = DecimalFormat.getInstance(BR_LOCALE).parse(trim);
		
		return BigDecimal.valueOf(valor.doubleValue());
	}
	
	public Map updateCamposFatura(Map map){
		Long idFatura = MapUtils.getLong(map,"idFatura");
		
		MasterEntry entry = getMasterFromSession(idFatura, false);
		Fatura master = (Fatura) entry.getMaster();

		List<RelacaoPagtoParcial> recebimentos = relacaoPagtoParcialService.findByIdFatura(idFatura);
		BigDecimal valorRecebidoParcial = calculaValorDevidoParcial(recebimentos);
		
		BigDecimal vlTotalDesconto = calcularDescontoTotal(master);
		BigDecimal vlSaldoDevedor = calcularSaldoDevedor(master, valorRecebidoParcial);
		
		map.put("vlDesconto", vlTotalDesconto);
		map.put("vlSaldoDevedor", vlSaldoDevedor);
		return map;
	}

	public TypedFlatMap validateMonitoramentoEletronicoAutorizado(TypedFlatMap map) {
		Long idDoctoServico  = map.getLong("data.idDoctoServico");
		if (idDoctoServico != null) {
			doctoServicoService.validateDoctoServicoComMonitoramentoEletronicoAutorizado(idDoctoServico);
	}
		return map;
	}
	

	public List findTratativas(TypedFlatMap criteria){
		return tratativaCobInadimplenciaService.findTratativasByFatura(criteria.getLong("idFatura"));
	}
	
	public TypedFlatMap tratativaPB(TypedFlatMap parameters){
		Long idFatulra = parameters.getLong("idFatura");
		Object[] tratativa = tratativaCobInadimplenciaService.findTratativaByIdFatura(idFatulra);
		TypedFlatMap retorno = new TypedFlatMap();
    	
		if ( tratativa != null ){
			retorno.put("dtTratativa", DateTimeFormat.forPattern("yyyy-mm-dd").parseDateTime(tratativa[0].toString()));
			retorno.put("usuarioTratativa", tratativa[1]);
			retorno.put("motivoInadimplencia", tratativa[2]);
			retorno.put("dtPrevistaSolucao", DateTimeFormat.forPattern("yyyy-mm-dd").parseDateTime(tratativa[3].toString()));
			retorno.put("planoAcao", tratativa[4]);
			try { 
				retorno.put("parecerMatriz", tratativa[5]);
			}catch(ArrayIndexOutOfBoundsException e) {}
		}else{
			retorno.put("dtTratativa","");
			retorno.put("usuarioTratativa","");
			retorno.put("motivoInadimplencia","");
			retorno.put("dtPrevistaSolucao","");
			retorno.put("planoAcao","");
			retorno.put("parecerMatriz","");
		}
		return retorno;
	}
	
	public TypedFlatMap checkPgtoPB(TypedFlatMap parameters){
		Long idFatulra = parameters.getLong("idFatura");

		Boolean fatura = getFaturaService().findExistFaturasParaPgto(idFatulra) || getFaturaService().findExistComposicaoPagamento(idFatulra);
    	TypedFlatMap retorno = new TypedFlatMap();
    	retorno.put("filialMTZ", SessionUtils.getFilialSessao().getSgFilial().equals("MTZ"));
		retorno.put("fatura", fatura);
		retorno.put("usuario", SessionUtils.getUsuarioLogado().getNmUsuario());
		RecebimentoPosLiqFatura recebimento = getFaturaService().findRecebimentoPosLiqFatura(idFatulra);
		String idRecebimento = "";
		if ( recebimento != null ){
			idRecebimento = recebimento.getIdRecebimentoPosLiqFatura().toString();
			retorno.put("idRecebimento",recebimento.getIdRecebimentoPosLiqFatura().toString());
			retorno.put("valorRecebimento",recebimento.getVlRecebimento());
			retorno.put("observacoes",recebimento.getObRecebimento());
			
			retorno.put("dtRecebimento",JTDateTimeUtils.formatDateYearMonthDayToString(recebimento.getDtRecebimento()));
			retorno.put("dtAlteracao",JTDateTimeUtils.formatDateTimeToString(recebimento.getDhAlteracao()));
			retorno.put("usuario",  usuarioService.findById(recebimento.getUsuario().getIdUsuario()).getNmUsuario());
		}else{
			retorno.put("idRecebimento","");
			retorno.put("valorRecebimento","");
			retorno.put("observacoes","");
			retorno.put("dtRecebimento","");
			retorno.put("dtAlteracao","");
		}
		retorno.put("dhCadastro",new DateTime());
		return retorno;
	}
	
	public Serializable storePgtoPB(TypedFlatMap parameters){
		return getFaturaService().storeRecebimentoPosLiqFatura(parameters);
	}
	
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public Map findNavigatedItemFatura(TypedFlatMap parameters){
		TypedFlatMap retorno = null;

		Long idDevedorDocServFat = parameters.getLong("idDevedorDocServFat");
		
		Long idFatura = parameters.getLong("idFatura");
		
		Long posAtualTmp = 0L;
		
		Long posFinal = null;
		
		MasterDetailKey mdk = new MasterDetailKey();
		
		MasterEntry entry = getMasterFromSession(idFatura, true);		
		
		mdk.setMasterId(idFatura);
		List lstItemTmp = new ArrayList();
		ItemListConfig config = getMasterConfig().getItemListConfig(ITEM_FATURA);
		ItemList items = getItemsFromSession(entry, ITEM_FATURA);
		for (Iterator iter = items.iterator(idFatura, config); iter.hasNext();) {
			ItemFatura itemFatura = (ItemFatura)iter.next();
			lstItemTmp.add(itemFatura);
		}
		
		Collections.sort(lstItemTmp, getMasterConfig().getItemComparator(ITEM_FATURA));
		
		for (Iterator iter = lstItemTmp.iterator(); iter.hasNext();) {
			posAtualTmp++;
			
			ItemFatura itemFatura = (ItemFatura)iter.next();
			
			if (itemFatura.getDevedorDocServFat().getIdDevedorDocServFat().equals(idDevedorDocServFat)){
				BigDecimal posAtual = new BigDecimal(posAtualTmp);
				
				posFinal = posAtual.divide(parameters.getBigDecimal("_pageSize"), 0, BigDecimal.ROUND_UP).longValue();
				
				mdk.setDetailId(itemFatura.getIdItemFatura());
			}			
		}
		
		//Se achou a posi��o do item de fatura
		if (posFinal != null) {
			retorno = (TypedFlatMap)findByIdItemFatura(mdk);
			retorno.put("currentPage", posFinal);
		//Sen�o, mandar uma exception
		} else {
			throw new BusinessException("LMS-36204");
		}
		
		return retorno;
	}

	public List findTipoDocumentoServico(Map criteria){
		List domainValues;
		String tpDocFat = (String)configuracoesFacade
				.getValorParametro("TP_DOCTO_FAT4");

		String[] dm = tpDocFat.split(";");
        List dominiosValidos = Arrays.asList(dm);
        List retorno = domainValueService.findByDomainNameAndValues("DM_TIPO_DOCUMENTO_SERVICO", dominiosValidos);
        return retorno;
	}
	
    public Serializable storeAnexo(TypedFlatMap parameters) {
		return saveItemInstance( parameters, FATURA_ANEXO_CONFIG_ALIAS);
    }
    
	public YearMonthDay findDataVencimento(TypedFlatMap map){
		return dataVencimentoService.generateDataVencimento(
				map.getLong("filialByIdFilial.idFilial"),
				map.getLong("divisaoCliente.idDivisaoCliente"),
				map.getString("tpFreteValue"),
				map.getYearMonthDay("dtEmissao"),
				map.getString("tpModal"),
				map.getString("tpAbrangencia"),
				map.getLong("servico.idServico"));
		
	}
	
	public Map executeRetransmitirFatura(TypedFlatMap tfm){
		Long idFatura = tfm.getLong("idFatura");
		gerarFaturaFaturaService.executeRetransmitirFatura(idFatura);
		
		return tfm;
	}
		
	/**
	 * Retorno os valores necess�rio para inicializar a tela de fatura
	 * 
     * @author Micka�l Jalbert
     * 03/03/2006
     * 
	 * @return Map map de objetos para preencher os dados inicias da tela
	 * */
	public Map findInitialValue(){
		TypedFlatMap retorno = new TypedFlatMap();
		Fatura fatura = new Fatura();
		gerarFaturaFaturaService.executeInicializeDadosFatura(fatura);
		fatura.setFilialByIdFilial(SessionUtils.getFilialSessao());
		retorno.put("dtEmissao", fatura.getDtEmissao());
		retorno.put("filialByIdFilial.idFilial", fatura.getFilialByIdFilial().getIdFilial());
		retorno.put("filialByIdFilial.sgFilial", fatura.getFilialByIdFilial().getSgFilial());
		retorno.put("filialByIdFilial.pessoa.nmFantasia", fatura.getFilialByIdFilial().getPessoa().getNmFantasia());
		
		if (fatura.getFilialByIdFilialCobradora() != null) {
			retorno.put("filialByIdFilialCobradora.idFilial", fatura.getFilialByIdFilialCobradora().getIdFilial());
			retorno.put("filialByIdFilialCobradora.sgFilial", fatura.getFilialByIdFilialCobradora().getSgFilial());
			retorno.put("filialByIdFilialCobradora.pessoa.nmFantasia", fatura.getFilialByIdFilialCobradora().getPessoa().getNmFantasia());
		}
		retorno.put("tpFatura", fatura.getTpFatura().getValue());
		retorno.put("tpSituacaoFatura", fatura.getTpSituacaoFatura());
		retorno.put("blGerarEdi", fatura.getBlGerarEdi());
		// Caso a filial do usu�rio logado seja uma sucursal, deve desabilitar o campo 'gerar boleto'.
		if (!historicoFilialService.validateFilalIsSucursal(SessionUtils.getFilialSessao().getIdFilial())) {
			retorno.put("blGerarBoleto", fatura.getBlGerarBoleto());
		}
		retorno.put("blFaturaReemitida", fatura.getBlFaturaReemitida());
		retorno.put("blIndicadorImpressao", fatura.getBlIndicadorImpressao());
		retorno.put("vlJuroCalculado", fatura.getVlJuroCalculado());
		retorno.put("vlJuroRecebido", fatura.getVlJuroRecebido());
		retorno.put("vlTotalRecebido", fatura.getVlTotalRecebido());
		retorno.put("vlIva", fatura.getVlIva());
		
		retorno.put("tpSetorCausadorAbatimento", fatura.getTpSetorCausadorAbatimento());
		retorno.put("obAcaoCorretiva", fatura.getObAcaoCorretiva());
		retorno.put("motivoDesconto", fatura.getMotivoDesconto());
		
		retorno.put("idPaisCotacao", SessionUtils.getPaisSessao().getIdPais());
		retorno.put("nmPaisCotacao", SessionUtils.getPaisSessao().getNmPais());
		
		TypedFlatMap item = null;
		DomainValue domainValue = null;
		List lstStatusFatura = this.getDomainValueService().findDomainValues("DM_STATUS_ROMANEIO");
		
		List lstStatusFaturaDesc = new ArrayList();
		
		for (Iterator iter = lstStatusFatura.iterator(); iter.hasNext();) {
			domainValue = (DomainValue) iter.next();
			item = new TypedFlatMap();
			
			item.put("value",domainValue.getValue());
			item.put("description",domainValue.getDescription());
			lstStatusFaturaDesc.add(item);
		}
		
		retorno.put("tpSituacaoFatura", lstStatusFaturaDesc);

		newMaster();
		
		return retorno;
	}
	
	public Map findFilialSessao(){
		TypedFlatMap mapRetorno = new TypedFlatMap();
		
		mapRetorno.put("filialByIdFilial.idFilial", SessionUtils.getFilialSessao().getIdFilial());
		mapRetorno.put("filialByIdFilial.sgFilial", SessionUtils.getFilialSessao().getSgFilial());
		mapRetorno.put("filialByIdFilial.pessoa.nmFantasia", SessionUtils.getFilialSessao().getPessoa().getNmFantasia());
		
		return mapRetorno;
	}
	
	/**
	 * Retorno os valores necess�rio para inicializar a tela de fatura
	 * 
     * @author Micka�l Jalbert
     * 11/03/2006
	 * 
	 * @return Map map de objetos para preencher os dados inicias da tela
	 * */
	public List findInitialValueItem(){

		Map item = null;
		DomainValue domainValue = null;
		List lstTpSituacaoAprovacao = this.getDomainValueService().findDomainValues("DM_STATUS_WORKFLOW");
		
		List lstTpSituacaoAprovacaoRet = new ArrayList();
		
		for (Iterator iter = lstTpSituacaoAprovacao.iterator(); iter.hasNext();) {
			domainValue = (DomainValue) iter.next();
			item = new HashMap();
			
			item.put("value",domainValue.getValue());
			item.put("description",domainValue.getDescription());
			lstTpSituacaoAprovacaoRet.add(item);
		}
			
		return lstTpSituacaoAprovacaoRet;
	}	
	
	public Map findFilialCliente(TypedFlatMap map){
		Map retorno = new HashMap();
		Cliente cliente = clienteService.findById(map.getLong("idCliente"));
		Filial filial = cliente.getFilialByIdFilialCobranca();

		if (map.getLong("idFatura") == null){
	    	//Valida se a filial de cobran�a � centralizada, se � tem que ser igual a filial da sess�o
	    	clienteService.validateCobrancaCentralizada(cliente);
		}
		
		if (filial != null) {
			retorno.put("idFilial",filial.getIdFilial());
			retorno.put("sgFilial",filial.getSgFilial());
			retorno.put("nmFantasia",filial.getPessoa().getNmFantasia());
		}
		
		return retorno;
	}
	
	public Long findCedente(TypedFlatMap map){
		Cedente cedente = cedenteService.findByIdCliente(map.getLong("cliente.idCliente"));
		
		if (cedente == null){
			cedente = cedenteService.findByIdFilial(SessionUtils.getFilialSessao().getIdFilial());
		}
		
		if (cedente != null){
			return cedente.getIdCedente();
		} else {
			return null;
		}
	}
	
	
	/**
	 * M�todo que salva as altera��es feitas no mestre e nos detalhes
	 * 
	 * author Micka�l Jalbert
	 * 31/01/2006
	 * 
	 * @param tipoRegistroComplementoTela
	 * @return id gerado para o mestre
	 */
	public Serializable store(TypedFlatMap map) {
		
		MasterEntry entry = getMasterFromSession(map.getLong("idFatura"), true);				

		Fatura fatura = (Fatura) entry.getMaster();
		mountFatura(fatura, map);	

		ItemListConfig config = null;
		ItemList items = getItemsFromSession(entry, ITEM_FATURA);
		ItemList listFaturaAnexo = getItemsFromSession(entry, FATURA_ANEXO_CONFIG_ALIAS);
		
		Integer versao = fatura.getVersao();
		
		if (items.isInitialized()){
			if (fatura.getIdFatura() == null){
				fatura = getFaturaService().beforeInsertFatura(fatura, items);
			}
		}
			
			config = getMasterConfig().getItemListConfig(ITEM_FATURA);
		// LMS-5727
		BigDecimal vlDesconto = map.containsKey("vlDesconto") ? map.getBigDecimal("vlDesconto") : null;
		if (CompareUtils.gt(vlDesconto, BigDecimal.ZERO)) {
			getFaturaService().validateFilialDebitada(fatura, items, config);
		}
		try {
			fatura = (Fatura)getFaturaService().store(fatura, items, listFaturaAnexo, config);
			
		} catch (RuntimeException e) {
			fatura.setVersao(versao);
			updateMasterInSession(entry);
			throw e;
		}
		items.resetItemsState(); 
    	updateMasterInSession(entry);
    	generateBloqueioFaturamento();
		
		TypedFlatMap mapRetorno = mountMap(fatura);
		
		return mapRetorno;
	}
	

	/**
	 * Gera os registros de bloqueio de faturamento presentes na sess�o
	 */
	public void generateBloqueioFaturamento() {
		List<BloqueioFaturamento> bloqueios = (List<BloqueioFaturamento>)SessionContext.get(BLOQUEIO_FATURAMENTO_KEY);
		if (bloqueios != null) {
			for (BloqueioFaturamento b : bloqueios)
				getBloqueioFaturamentoService().store(b);
			SessionContext.remove(BLOQUEIO_FATURAMENTO_KEY);
		}
	}


	/**
	 * Adiciona os bloqueios de faturamento na sess�o
	 * @param map
	 * @return
	 */
	public Serializable storeBloqueioFaturamento(TypedFlatMap map) {
		DateTime newDate = new DateTime(map.get("dtPrevisao").toString());
		DateTime date = new DateTime(JTDateTimeUtils.getDataAtual().toString());

		if (newDate.isBefore(date) || newDate.isAfter(date.plusDays(30)))
			throw new BusinessException("LMS-36263");

		TypedFlatMap result = new TypedFlatMap();

		List<ItemFatura> lstItemFatura = null;
		if ("cancelar".equals(map.getString("origem"))) {
			lstItemFatura = getFaturaService().findItemFatura(map.getLong("idFatura"));
		} else {
			MasterEntry entry = getMasterFromSession(map.getLong("idFatura"), true);
			ItemList items = getItemsFromSession(entry, ITEM_FATURA);
			lstItemFatura = items.getRemovedItems();
		}

		List<BloqueioFaturamento> bloqueios = new ArrayList<BloqueioFaturamento>();

		for (ItemFatura i : lstItemFatura) {
			BloqueioFaturamento bloqueio = new BloqueioFaturamento();
			MotivoOcorrencia motivo = new MotivoOcorrencia();
			UsuarioLMS usuario = new UsuarioLMS();

			usuario.setIdUsuario(SessionUtils.getUsuarioLogado().getIdUsuario());
			motivo.setIdMotivoOcorrencia(map.getLong("idMotivoOcorrencia"));

			bloqueio.setDevedorDocServFat(i.getDevedorDocServFat());
			bloqueio.setMotivoOcorrencia(motivo);
			bloqueio.setDsBloqueio(map.getString("dsBloqueio"));
			bloqueio.setDtPrevisao(map.getYearMonthDay("dtPrevisao"));
			bloqueio.setDhBloqueio(JTDateTimeUtils.getDataHoraAtual());
			bloqueio.setUsuarioBloqueio(usuario);

			bloqueios.add(bloqueio);
		}

		SessionContext.set(BLOQUEIO_FATURAMENTO_KEY, bloqueios);
		return result;
	}


	public Serializable validateBloqueioFaturamento(TypedFlatMap map) {
		TypedFlatMap result = new TypedFlatMap();

		List<ItemFatura> lstItemFatura = null;
		if ("cancelar".equals(map.getString("origem"))) {
			lstItemFatura = getFaturaService().findItemFatura(map.getLong("idFatura"));
			if (relacaoPagtoParcialService.validateRelacaoPagamentoParcial(map.getLong("idFatura"))) {
				throw new BusinessException("LMS-36268");			
			}
		} else {
			MasterEntry entry = getMasterFromSession(map.getLong("idFatura"), true);
			ItemList items = getItemsFromSession(entry, ITEM_FATURA);
			lstItemFatura = items.getRemovedItems();
		}

		
		result.put("idFatura", map.getLong("idFatura"));
		result.put("showPopup", lstItemFatura != null ? lstItemFatura.size() : 0);

		return result;
	}


	/**
	 * Valida se a filial do usu�rio logado � uma sucursal, caso seja, 
	 * desabilita o campo gerarBoleto, para que n�o seja possivel gerar boleto.
	 * 
	 * @param criteria
	 * @return
	 */
	public Map validateFilialUser(TypedFlatMap criteria){
		Map retorno = new HashMap<String, Object>();
		Long idFilialUsuarioLogado = SessionUtils.getFilialSessao().getIdFilial();
		
		// Caso a filial do usu�rio logado seja uma sucursal, deve desabilitar o campo 'gerar boleto'.
		if (historicoFilialService.validateFilalIsSucursal(idFilialUsuarioLogado)) {
			retorno.put("disableBlGeraBoleto", Boolean.TRUE);
		}
		
		return retorno;
	}
	
	private TypedFlatMap mountMap(Fatura fatura){
		TypedFlatMap map = new TypedFlatMap();
		
		if(fatura == null){
			return map;
		}
		
		Long idFilialUsuarioLogado = SessionUtils.getFilialSessao().getIdFilial();
		// Caso o a filial do usu�rio logado seja MTZ ou a filial de origem da 
		// fatura seja a mesma do usu�rio logado, habilita o bot�o de zerar descontos.
		if (SessionUtils.isFilialSessaoMatriz() 
				|| fatura.getFilialByIdFilial().getIdFilial().equals(idFilialUsuarioLogado)) {
			map.put("enableAdmButtons", Boolean.TRUE);
			
			if(fatura.getTpSituacaoFatura().equals(new DomainValue("EM")) || fatura.getTpSituacaoFatura().equals(new DomainValue("BL"))){
				map.put("enableGerarDesconto", Boolean.TRUE);
				map.put("enableGerarFaturaExcel", Boolean.TRUE);
				map.put("enableImportarDesctoCSV", Boolean.TRUE);
		}
		}
		
		map.put("idFatura", fatura.getIdFatura());
		map.put("tpOrigemDescription", fatura.getTpOrigem().getDescriptionAsString());
		map.put("filialByIdFilial.idFilial", fatura.getFilialByIdFilial().getIdFilial());
		map.put("filialByIdFilial.sgFilial", fatura.getFilialByIdFilial().getSgFilial());
		map.put("filialByIdFilial.pessoa.nmFantasia", fatura.getFilialByIdFilial().getPessoa().getNmFantasia());	
		map.put("nrFatura", fatura.getNrFatura());
		map.put("cliente.pessoa.nrIdentificacao", fatura.getCliente().getPessoa().getNrIdentificacao());
		map.put("cliente.pessoa.nrIdentificacaoFormatado", FormatUtils.formatCpfCnpj(fatura.getCliente().getPessoa().getNrIdentificacao()));
		map.put("cliente.pessoa.nmPessoa", fatura.getCliente().getPessoa().getNmPessoa());		
		map.put("cliente.idCliente", fatura.getCliente().getIdCliente()); 	
		map.put("cliente.filialByIdFilialCobranca.idFilial", fatura.getCliente().getFilialByIdFilialCobranca().getIdFilial());
		map.put("cliente.filialByIdFilialCobranca.sgFilial", fatura.getCliente().getFilialByIdFilialCobranca().getSgFilial());
		map.put("cliente.filialByIdFilialCobranca.pessoa.nmFantasia", fatura.getCliente().getFilialByIdFilialCobranca().getPessoa().getNmFantasia());	
		map.put("filialByIdFilialCobradora.idFilial", fatura.getFilialByIdFilialCobradora().getIdFilial());
		map.put("filialByIdFilialCobradora.sgFilial", fatura.getFilialByIdFilialCobradora().getSgFilial());
		map.put("filialByIdFilialCobradora.pessoa.nmFantasia", fatura.getFilialByIdFilialCobradora().getPessoa().getNmFantasia());			
		if (fatura.getFilialByIdFilialDebitada() != null) {
			map.put("filialByIdFilialDebitada.idFilial", fatura.getFilialByIdFilialDebitada().getIdFilial());
			map.put("filialByIdFilialDebitada.sgFilial", fatura.getFilialByIdFilialDebitada().getSgFilial());
			map.put("filialByIdFilialDebitada.pessoa.nmFantasia", fatura.getFilialByIdFilialDebitada().getPessoa().getNmFantasia());
		}
		map.put("nrPreFatura", fatura.getNrPreFatura());
		map.put("blConhecimentoResumo", fatura.getBlConhecimentoResumo());
		map.put("dhNegativacaoSerasa", fatura.getDhNegativacaoSerasa());
		map.put("dhExclusaoSerasa", fatura.getDhExclusaoSerasa());
		
		map.put("dhEnvioCobTerceira", fatura.getDhEnvioCobTerceira());
		map.put("dhPagtoCobTerceira", fatura.getDhPagtoCobTerceira());
		map.put("dhDevolCobTerceira", fatura.getDhDevolCobTerceira());
		
		
		map.put("dhPreFatura", fatura.getDtPreFatura());
		map.put("dhImportacao", fatura.getDtImpotacao());
		map.put("dhEnvioAceite", fatura.getDtEnvioAceite());
		map.put("dhRetornoAceite", fatura.getDtRetornoAceite());
		
		map.put("nrFaturaFormatada", fatura.getFilialByIdFilial().getSgFilial() + " " + FormatUtils.formataNrDocumento(fatura.getNrFatura().toString(),"FAT"));
		
		if (fatura.getDivisaoCliente() != null){
			if (!fatura.getDivisaoCliente().getTpSituacao().getValue().equals("A")){
				map.put("divisaoCliente.idDivisaoClienteInativo", fatura.getDivisaoCliente().getIdDivisaoCliente());
			}
			
			map.put("divisaoCliente.idDivisaoClienteTmp", fatura.getDivisaoCliente().getIdDivisaoCliente());
		}
		
		if (fatura.getCedente() != null) {
			map.put("cedente.idCedente", fatura.getCedente().getIdCedente());
		}
		
		map.put("tpModal", fatura.getTpModal().getValue());
		
		if (fatura.getTpFrete() != null){
			map.put("tpFreteDescription", fatura.getTpFrete().getDescription());
		}
		
		if (fatura.getServico() != null){
			map.put("servico.dsServico", fatura.getServico().getDsServico());
			map.put("servico.idServico", fatura.getServico().getIdServico());
		}		
		
		map.put("tpAbrangencia", fatura.getTpAbrangencia().getValue());
		
		if (fatura.getAgrupamentoCliente() != null ){
			map.put("agrupamentoCliente.idAgrupamentoClienteTmp", fatura.getAgrupamentoCliente().getIdAgrupamentoCliente());
		}
		
		if (fatura.getTipoAgrupamento() != null){
			map.put("tipoAgrupamento.idTipoAgrupamentoTmp", fatura.getTipoAgrupamento().getIdTipoAgrupamento());
		}
		
		map.put("tpSituacaoFatura", fatura.getTpSituacaoFatura().getValue());
		
		if (fatura.getTpSituacaoAprovacao() != null){
			map.put("tpSituacaoAprovacao", fatura.getTpSituacaoAprovacao().getDescription());
		} else {
			map.put("tpSituacaoAprovacao", "");
		}
		
		if (fatura.getCotacaoMoeda() != null) {
			map.put("simboloMoedaPais", fatura.getCotacaoMoeda().getMoedaPais().getMoeda().getSiglaSimbolo()); 		
			map.put("dtCotacaoMoeda", fatura.getCotacaoMoeda().getDtCotacaoMoeda()); 
			map.put("cotacaoMoeda.idCotacaoMoeda", fatura.getCotacaoMoeda().getIdCotacaoMoeda());
			map.put("cotacaoMoeda.vlCotacaoMoeda", fatura.getCotacaoMoeda().getVlCotacaoMoeda());
		}
		
		map.put("vlCotacaoMoeda", fatura.getVlCotacaoMoeda());
		map.put("dtEmissao", fatura.getDtEmissao());
		map.put("dtVencimento", fatura.getDtVencimento());
		map.put("blGerarEdi", fatura.getBlGerarEdi());
		// Caso a filial do usu�rio logado seja uma sucursal, deve desabilitar o campo 'gerar boleto'.
		if (!historicoFilialService.validateFilalIsSucursal(SessionUtils.getFilialSessao().getIdFilial())) {
			map.put("blGerarBoleto", fatura.getBlGerarBoleto());
		}
		map.put("dtTransmissaoEdi", fatura.getDtTransmissaoEdi());
		
		Boleto boleto = boletoService.findByFatura(fatura.getIdFatura());
		
		if (boleto != null){
			map.put("boleto.idBoleto", boleto.getIdBoleto());
			map.put("boleto.nrBoleto", boleto.getNrBoleto());
		}

		if (fatura.getRedeco() != null) {
			map.put("redeco.idRedeco", fatura.getRedeco().getIdRedeco());
			map.put("redeco.filial.idFilial", fatura.getRedeco().getFilial().getIdFilial());
			map.put("redeco.filial.sgFilial", fatura.getRedeco().getFilial().getSgFilial());
			map.put("redeco.filial.nmFantasia", fatura.getRedeco().getFilial().getPessoa().getNmFantasia());
			map.put("redeco.nrRedeco", fatura.getRedeco().getNrRedeco());
			map.put("redeco.tpFinalidade", fatura.getRedeco().getTpFinalidade().getDescription());
		}
		
		Recibo recibo = reciboService.findByFatura(fatura.getIdFatura());
		
		if (recibo != null) {
			map.put("recibo.idRecibo", recibo.getIdRecibo());
			map.put("recibo.filial.sgFilial", recibo.getFilialByIdFilialEmissora().getSgFilial());
			map.put("recibo.nrRecibo", recibo.getNrRecibo());
		}		
		
		if (fatura.getPendencia() != null) {
			map.put("pendencia.idPendencia", fatura.getPendencia().getIdPendencia());
		}
		
		if (fatura.getIdPendenciaDesconto() != null) {
			map.put("pendenciaDesconto.idPendencia", fatura.getIdPendenciaDesconto());
			map.put("isQuestionamentoFatura", getFaturaService().findIsQuestionamentoFatura(fatura));
		}		
		
		map.put("dtLiquidacao", fatura.getDtLiquidacao());
		
		if (fatura.getRelacaoCobranca() != null) {
			map.put("relacaoCobranca.idRelacaoCobranca", fatura.getRelacaoCobranca().getIdRelacaoCobranca());
			map.put("relacaoCobranca.nrRelacaoCobrancaFilial", fatura.getRelacaoCobranca().getNrRelacaoCobrancaFilial());
			map.put("relacaoCobranca.filial.sgFilial", fatura.getRelacaoCobranca().getFilial().getSgFilial());
		}
		
		map.put("dhReemissao", fatura.getDhReemissao());
		
		if (fatura.getUsuario() != null){
			map.put("usuario.nmUsuario", fatura.getUsuario().getNmUsuario());
		}
		map.put("qtDocumentos", fatura.getQtDocumentos());
		map.put("vlBaseCalcPisCofinsCsll", fatura.getVlBaseCalcPisCofinsCsll());
		map.put("vlBaseCalcIr", fatura.getVlBaseCalcIr());
		map.put("vlPis", fatura.getVlPis());
		map.put("vlCofins", fatura.getVlCofins());
		map.put("vlCsll", fatura.getVlCsll());
		map.put("vlIva", fatura.getVlIva());
		map.put("vlIr", fatura.getVlIr());
		map.put("vlTotal", fatura.getVlTotal());

		map.put("vlJuroCalculado", fatura.getVlJuroCalculado());
		map.put("vlCobrar", fatura.getVlTotal().add(fatura.getVlJuroCalculado()).add(fatura.getVlIva()).subtract(fatura.getVlDesconto()));
		
		if (fatura.getTpSituacaoFatura().getValue().equals("LI")){
			map.put("vlJuroRecebido", fatura.getVlJuroRecebido());
			map.put("vlTotalRecebido", fatura.getVlTotal().add(fatura.getVlJuroRecebido()).add(fatura.getVlIva()).subtract(fatura.getVlDesconto()));
		} else {
			map.put("vlJuroRecebido", new BigDecimal("0"));
			map.put("vlTotalRecebido", new BigDecimal("0"));
		}
		map.put("blFaturaReemitida", fatura.getBlFaturaReemitida());
		map.put("blIndicadorImpressao", fatura.getBlIndicadorImpressao());
		map.put("tpFatura", fatura.getTpFatura().getValue()); 
		map.put("tpOrigem", fatura.getTpOrigem().getValue());			
		map.put("obFatura", fatura.getObFatura());
		
		if (fatura.getMoeda() != null) {
			map.put("moeda.idMoeda", fatura.getMoeda().getIdMoeda());
		}
		
		if(fatura.getMotivoDesconto() != null && fatura.getMotivoDesconto().getIdMotivoDesconto() != null){
			map.put("devedorDocServFat.desconto.motivoDesconto.idMotivoDesconto", fatura.getMotivoDesconto().getIdMotivoDesconto());
		}
		
		if(fatura.getObAcaoCorretiva() != null){
			map.put("obAcaoCorretiva", fatura.getObAcaoCorretiva());
		}		
		
		if(fatura.getTpSetorCausadorAbatimento() != null && fatura.getTpSetorCausadorAbatimento().getValue() != null){
			map.put("tpSetorCausadorAbatimento", fatura.getTpSetorCausadorAbatimento().getValue());
		}
		
		map.put("idPaisCotacao", SessionUtils.getPaisSessao().getIdPais());
		map.put("nmPaisCotacao", SessionUtils.getPaisSessao().getNmPais());
		

		List<RelacaoPagtoParcial> recebimentos = relacaoPagtoParcialService.findByIdFatura(fatura.getIdFatura());
		
		BigDecimal valorRecebidoParcial = calculaValorDevidoParcial(recebimentos);
		BigDecimal saldoDevedor = calcularSaldoDevedor(fatura,valorRecebidoParcial);
		BigDecimal vlDescontoTotal = calcularDescontoTotal(fatura);
		
		map.put("vlRecebidoParcial", valorRecebidoParcial);
		map.put("vlSaldoDevedor", saldoDevedor);
		map.put("vlDesconto", vlDescontoTotal);
		map.put("reemitir.enableReemitir", getFaturaService().isCnpjIsIn(fatura.getCliente().getPessoa().getNrIdentificacao()));
		return map;
	}
	
	@SuppressWarnings("rawtypes")
	private BigDecimal calcularDescontoTotal(Fatura fatura) {
		Long idFatura = fatura.getIdFatura();
		
		MasterEntry entry = getMasterFromSession(idFatura, true);		

		ItemList items = getItemsFromSession(entry, ITEM_FATURA);
		ItemListConfig config = getMasterConfig().getItemListConfig(ITEM_FATURA);

		
		BigDecimal result = new BigDecimal(0);
		for (Iterator iter = items.iterator(idFatura, config); iter.hasNext();) {
			ItemFatura item = (ItemFatura)iter.next();
			
			if(item.getDevedorDocServFat() != null && item.getDevedorDocServFat().getDesconto() != null){
				result = result.add(item.getDevedorDocServFat().getDesconto().getVlDesconto());
			}
		}

		return result == BigDecimal.ZERO?fatura.getVlDesconto():result;
	}

	private BigDecimal calcularSaldoDevedor(Fatura fatura, BigDecimal valorRecebidoParcial){
		BigDecimal saldoDevedor = BigDecimal.ZERO;
		
		if (fatura.getDtLiquidacao() == null) {
			saldoDevedor = fatura.getVlTotal().subtract(valorRecebidoParcial).subtract(fatura.getVlDesconto());			
		}
		
		return saldoDevedor;
	}
	
	
	private BigDecimal calculaValorDevidoParcial(List<RelacaoPagtoParcial> relacaoPagtoParcialList) {
		BigDecimal sum = BigDecimal.ZERO;
		for (RelacaoPagtoParcial relacaoPagtoParcial : relacaoPagtoParcialList) {
			sum = sum.add(relacaoPagtoParcial.getVlPagamento());
		}
		return sum;
	}

	/**
	 * M�todo que monta uma fatura a partir do map que vem da tela.
	 * 
	 * author Micka�l Jalbert
	 * 31/01/2006
	 * 
	 * @param Fatura fatura 
	 * @param TypedFlatMap map
	 * @return Fatura
	 */	
	private Fatura mountFatura(Fatura fatura, TypedFlatMap map) {
		fatura.setFilialByIdFilial(filialService.findById(map.getLong("filialByIdFilial.idFilial")));

		fatura.setCliente(clienteService.findById(map.getLong("cliente.idCliente")));	

		if (map.getLong("filialByIdFilialCobradora.idFilial") != null){
			fatura.setFilialByIdFilialCobradora(filialService.findById(map.getLong("filialByIdFilialCobradora.idFilial")));
		}
		
		if (map.getLong("filialByIdFilialDebitada.idFilial") != null){
			fatura.setFilialByIdFilialDebitada(filialService.findById(map.getLong("filialByIdFilialDebitada.idFilial")));
		} else {
			fatura.setFilialByIdFilialDebitada(null);
		}
		
		if (map.getLong("divisaoCliente.idDivisaoCliente") != null){
			fatura.setDivisaoCliente(divisaoClienteService.findById(map.getLong("divisaoCliente.idDivisaoCliente")));
		}
		
		Cedente cedente = new Cedente();
		cedente.setIdCedente(map.getLong("cedente.idCedente"));
		fatura.setCedente(cedente);
		
		if (map.getLong("agrupamentoCliente.idAgrupamentoCliente") != null){
			AgrupamentoCliente agrupamentoCliente = new AgrupamentoCliente();
			agrupamentoCliente.setIdAgrupamentoCliente(map.getLong("agrupamentoCliente.idAgrupamentoCliente"));
			fatura.setAgrupamentoCliente(agrupamentoCliente);
		}
		
		if (map.getLong("tipoAgrupamento.idTipoAgrupamento") != null){
			TipoAgrupamento tipoAgrupamento = new TipoAgrupamento();
			tipoAgrupamento.setIdTipoAgrupamento(map.getLong("tipoAgrupamento.idTipoAgrupamento"));
			fatura.setTipoAgrupamento(tipoAgrupamento);
		}
		
		if (map.getLong("moeda.idMoeda") != null) {
			Moeda moeda = new Moeda();
			moeda.setIdMoeda(map.getLong("moeda.idMoeda"));
			fatura.setMoeda(moeda);
		// Quando a fatura for inutilizada, n�o ter� itemFatura e 
		// consequentemente n�o ter� moeda, logo � setada a moeda
		// da sess�o do usu�rio logado.
		} else {
			fatura.setMoeda(SessionUtils.getMoedaSessao());
		}
		
		if (map.getLong("cotacaoMoeda.idCotacaoMoeda") != null){
			CotacaoMoeda cotacaoMoeda = new CotacaoMoeda();
			cotacaoMoeda.setIdCotacaoMoeda(map.getLong("cotacaoMoeda.idCotacaoMoeda"));
			fatura.setCotacaoMoeda(cotacaoMoeda);		
			
		} else {
			fatura.setCotacaoMoeda(null);
		}

		fatura.setTpSetorCausadorAbatimento(map.getDomainValue("tpSetorCausadorAbatimento"));
		
		fatura.setObAcaoCorretiva(map.getString("obAcaoCorretiva"));
	
		if(map.getLong("devedorDocServFat.desconto.motivoDesconto.idMotivoDesconto") != null) {
			MotivoDesconto motivoDesconto = new MotivoDesconto();
			motivoDesconto.setIdMotivoDesconto(map.getLong("devedorDocServFat.desconto.motivoDesconto.idMotivoDesconto"));
			fatura.setMotivoDesconto(motivoDesconto);
		}
		
		fatura.setIdFatura(map.getLong("idFatura"));
		fatura.setNrFatura(map.getLong("nrFatura"));
		fatura.setNrPreFatura(map.getString("nrPreFatura"));
		fatura.setTpModal(map.getDomainValue("tpModal"));
		fatura.setTpAbrangencia(map.getDomainValue("tpAbrangencia"));		
		fatura.setTpSituacaoFatura(map.getDomainValue("tpSituacaoFatura"));
		fatura.setVlCotacaoMoeda(map.getBigDecimal("vlCotacaoMoeda"));
		fatura.setDtEmissao(map.getYearMonthDay("dtEmissao"));
		fatura.setDtVencimento(map.getYearMonthDay("dtVencimento"));
		fatura.setBlGerarBoleto(map.getBoolean("blGerarBoleto"));
		fatura.setBlGerarEdi(map.getBoolean("blGerarEdi"));
		fatura.setBlFaturaReemitida(map.getBoolean("blFaturaReemitida"));
		fatura.setBlIndicadorImpressao(map.getBoolean("blIndicadorImpressao"));		
		fatura.setDhTransmissao(map.getDateTime("dhTransmissao"));
		fatura.setDhReemissao(map.getDateTime("dhReemissao"));
		fatura.setTpFatura(map.getDomainValue("tpFatura"));
		fatura.setTpOrigem(map.getDomainValue("tpOrigem"));
		fatura.setTpFrete(new DomainValue(map.getString("tpFreteValue")));
		fatura.setObFatura(map.getString("obFatura"));		

		return fatura;
	}
	
	
	/**
	 * M�todo que monta uma item fatura a partir do map que vem da tela.
	 * 
	 * author Micka�l Jalbert
	 * 11/03/2006
	 * 
	 * @param TypedFlatMap map
	 * @return ItemFatura
	 */	
	private ItemFatura mountItemFatura(TypedFlatMap map, ItemFatura itemFatura){
		DevedorDocServFat devedorDocServFat = devedorDocServFatService.findById(map.getLong("devedorDocServFat.idDevedorDocServFat"));
		
		//Se tem desconto
		if (StringUtils.isNotBlank(map.getString("devedorDocServFat.desconto.vlDesconto"))){
			Desconto desconto = descontoService.findByDevedorDocServFat(devedorDocServFat.getIdDevedorDocServFat());
			
			if (desconto == null){
				desconto = new Desconto();
				desconto.setDevedorDocServFat(devedorDocServFat);
			} else if (desconto.getVlDesconto().compareTo(map.getBigDecimal("devedorDocServFat.desconto.vlDesconto")) != 0){
				desconto.setIdPendencia(null);
			}
			
			desconto.setVlDesconto(map.getBigDecimal("devedorDocServFat.desconto.vlDesconto"));
			
			if(map.getLong("devedorDocServFat.desconto.motivoDesconto.idMotivoDescontoItem") != null){
			MotivoDesconto motivoDesconto = new MotivoDesconto();			
				motivoDesconto.setIdMotivoDesconto(map.getLong("devedorDocServFat.desconto.motivoDesconto.idMotivoDescontoItem"));			
			desconto.setMotivoDesconto(motivoDesconto);
			}
			
			desconto.setTpSituacaoAprovacao(map.getDomainValue("devedorDocServFat.desconto.tpSituacaoAprovacao"));
			
			desconto.setObDesconto(map.getString("devedorDocServFat.desconto.obDesconto"));
			
			List lstDesconto = new ArrayList(1);
			
			lstDesconto.add(desconto);
			
			devedorDocServFat.setDescontos(lstDesconto);
		}

		itemFatura.setDevedorDocServFat(devedorDocServFat);
		itemFatura.setIdItemFatura(map.getLong("idItemFatura"));		
		return itemFatura;
	}	
	
	/**
	 * Busca um mestre pelo seu id e armazena-o na sess�o do usu�rio
	 * 
	 * author Micka�l Jalbert
	 * 31/01/2006
	 * 
	 * @param id
	 * @return Fatura, objeto mestre
	 */
	public Map findById(java.lang.Long id) {
		Object masterObj = this.getFaturaService().findByIdTela(id);
		putMasterInSession(masterObj);
		
		Fatura fatura = (Fatura)masterObj;
		
		TypedFlatMap mapRetorno = mountMap(fatura);
		
		return mapRetorno;
	}
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public ResultSetPage findPaginatedFaturaAnexo(TypedFlatMap criteria) {
		ResultSetPage rspItemAnexo = findPaginatedItemList(criteria, FATURA_ANEXO_CONFIG_ALIAS);
		List lista = new ArrayList();
		for (Object faturaAnexoObject: rspItemAnexo.getList()) {
			FaturaAnexo faturaAnexo = (FaturaAnexo) faturaAnexoObject;

			Map map = new HashMap();
			map.put("idFaturaAnexo" , faturaAnexo.getIdFaturaAnexo());
			map.put("descricao" , faturaAnexo.getDsAnexo());
			map.put("dhinclusao" , faturaAnexo.getDhCriacao());
			map.put("nmusuario" , faturaAnexo.getUsuario().getNmUsuario() );

			lista.add(map);
		} 
		
		rspItemAnexo.setList(lista);
    	return rspItemAnexo;
	}	
	
	public String findNomeArquivo(byte[] locator){
		return ArquivoUtils.getNomeArquivo(locator);
				}
	
	/**
	 * Monta o objeto FaturaLookupParam de acordo com os par�metros vindos da tela
	 *
	 * @author Hector Julian Esnaola Junior
	 * @since 28/11/2006
	 *
	 * @param criteria
	 * @return
	 *
	 */
	private FaturaLookupParam mountFaturaLookupParam(TypedFlatMap criteria){
		
		FaturaLookupParam faturaLookupParam = new FaturaLookupParam();
		
		/** Seta os atributos da FaturaLookupParam */
		
		faturaLookupParam.setDtEmissaoInicialFatura(criteria.getYearMonthDay("dtEmissaoInicial"));
		faturaLookupParam.setDtEmissaoFinalFatura(criteria.getYearMonthDay("dtEmissaoFinal"));
		faturaLookupParam.setDtVencimentoInicialFatura(criteria.getYearMonthDay("dtVencimentoInicial"));
		faturaLookupParam.setDtVencimentoFinalFatura(criteria.getYearMonthDay("dtVencimentoFinal"));
		faturaLookupParam.setDtLiquidacaoInicialFatura(criteria.getYearMonthDay("dtLiquidacaoInicial"));
		faturaLookupParam.setDtLiquidacaoFinalFatura(criteria.getYearMonthDay("dtLiquidacaoFinal"));
		faturaLookupParam.setIdBancoFatura(criteria.getLong("cedente.idCedente"));
		faturaLookupParam.setIdClienteFatura(criteria.getLong("cliente.idCliente"));
		faturaLookupParam.setIdFilialCobrancaFatura(criteria.getLong("filialByIdFilialCobradora.idFilial"));
		faturaLookupParam.setSgFilialCobrancaFatura(criteria.getString("filialByIdFilialCobradora.sgFilial"));
		faturaLookupParam.setIdFilialFaturamentoFatura(criteria.getLong("filialByIdFilial.idFilial"));
		faturaLookupParam.setSgFilialFaturamentoFatura(criteria.getString("filialByIdFilial.sgFilial"));
		faturaLookupParam.setNrFatura(criteria.getLong("nrFatura"));
		faturaLookupParam.setNrPreFatura(criteria.getString("nrPreFatura"));
		faturaLookupParam.setTpAbrangemciaFatura(criteria.getDomainValue("tpAbrangencia").getValue());
		faturaLookupParam.setTpModalFatura(criteria.getDomainValue("tpModal").getValue());
		faturaLookupParam.setTpSituacaoFatura(criteria.getDomainValue("tpSituacaoFatura").getValue());
		faturaLookupParam.setTpSituacaoFaturaValido(criteria.getInteger("tpSituacaoFaturaValido"));
		
		return faturaLookupParam;
	}
	
	/**
	 * 
	 *
	 * @author Hector Julian Esnaola Junior
	 * @since 28/11/2006
	 *
	 * @param criteria
	 * @return
	 *
	 */
	public ResultSetPage findPaginatedFatura(TypedFlatMap criteria) {
		ResultSetPage rsp = getFaturaService().findPaginated(mountFaturaLookupParam(criteria), criteria);
		
		List list = rsp.getList();
		
		for (Iterator iter = list.iterator(); iter.hasNext();){
			HashMap mapRet = (HashMap) iter.next();
			
			((Map)((Map)mapRet.get("cliente")).get("pessoa")).put("nrIdentificacao",FormatUtils.formatIdentificacao((String)((Map)((Map)((Map)mapRet.get("cliente")).get("pessoa")).get("tpIdentificacao")).get("value"), (String)((Map)((Map)mapRet.get("cliente")).get("pessoa")).get("nrIdentificacao")));

		}
		return rsp;
		
	}
	
	public TypedFlatMap findAllIdFaturas(TypedFlatMap criteria) {
		ResultSetPage rsp = getFaturaService().findPaginated(mountFaturaLookupParam(criteria), criteria);
		List list = rsp.getList();
		List ids = new ArrayList();
		
		for (Iterator iter = list.iterator(); iter.hasNext();){
			HashMap mapRet = (HashMap) iter.next();
			ids.add(mapRet.get("idFatura"));
		}
		
		TypedFlatMap retorno = new TypedFlatMap();
		retorno.put("ids", ids);
		return retorno;
	}
	
	
	/**
	 * Busca a total de faturas de acordo com os filtros
	 *
	 * @author Hector Julian Esnaola Junior
	 * @since 29/11/2006
	 *
	 * @param criteria
	 * @return
	 *
	 */
	public Integer getRowCountFatura(TypedFlatMap criteria) {
		return getFaturaService().getRowCount(mountFaturaLookupParam(criteria));
	}

	public Integer getRowCountFaturasAnexo(TypedFlatMap criteria) {
		return getRowCountItemList(criteria, FATURA_ANEXO_CONFIG_ALIAS);
	}
	
	public Map cancelFatura(TypedFlatMap map){
		getFaturaService().cancelFatura(map.getLong("idFatura"));
		generateBloqueioFaturamento();

		return findById(map.getLong("idFatura"));
	}
		
    /**
     * Busca a lista de motivos de desconto para a combo de motivos desconto
     * @param map Crit�rios da pesquisa
     * @return Lista de Motivos do Desconto
     */
    public List findComboMotivoDesconto(TypedFlatMap criteria){
        List<MotivoDesconto> motivos = this.motivoDescontoService
        		.findMotivoDescontoByTpSituacaoAndIdDesconto(
        				criteria.getString("tpSituacao"), 
        				criteria.getLong("desconto.idDesconto"));  
    	
        for (MotivoDesconto m : motivos) {
        	m.setDsMotivoDesconto(new VarcharI18n(m.getCdMotivoDesconto() + " - " + m.getDsMotivoDesconto().getValue()));
        }
        
    	return motivos;
    } 
	public Map<String,Object> registrarEventoMsg(TypedFlatMap parameters) throws Exception{
		if ( parameters.getString("idFatura") == null ){
			return new HashMap<String, Object>();
		}
		return getFaturaService().storeRegistrarEventoMsg(parameters);
	}
	
	
	/**
	 * Remove uma listra de registros mestres
	 * author Micka�l Jalbert
	 * 31/01/2006
	 * @param ids
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		this.getFaturaService().removeByIds(ids);
	}
	
	/**
	 * Remove um registro mestre
	 * author Micka�l Jalbert
	 * 31/01/2006
	 * @param id
	 */
	public void removeById(Long id) {	
		this.getFaturaService().removeById(id);
		newMaster();			
	}
	
	/***
	 * Remove uma lista de item fatura.
	 * 
	 * author Micka�l Jalbert
	 * 31/01/2006
	 * @param List ids
	 * 
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIdsItemFatura(List ids) {
		MasterEntry entry = (MasterEntry) SessionContext.get(getClass().getName());
		
		//Validar se o usu�rio tem direito de modificar a fatura
		if ((Long)entry.getMasterId() != null) {
			this.getFaturaService().validateFatura((Long)entry.getMasterId());
		}
		
		super.removeItemByIds(ids, ITEM_FATURA);
	}	
	
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIdsAnexoFatura(List ids) {
    	super.removeItemByIds(ids, FATURA_ANEXO_CONFIG_ALIAS);
    }
	
	/**
	 * Salva um registro detalhe/filho na sess�o.
	 * author Micka�l Jalbert
	 * 31/01/2006
	 * @param parameters Parametros utilizado para montar o detalhe
	 * @return id do detalhe (tempor�rio no caso de inser��o)
	 */
	public Serializable storeItemFatura(TypedFlatMap map) {
		Serializable idItemFatura = saveItemInstance(map, ITEM_FATURA);
		Long idFatura = (Long) getMasterId(map);
		
		MasterDetailKey key = new MasterDetailKey();
		
		key.setDetailId((Long)idItemFatura);
		key.setMasterId(idFatura);
		
		ItemFatura itemFatura = (ItemFatura)findItemById(key, ITEM_FATURA);
		
		TypedFlatMap mapRetorno = new TypedFlatMap();
		
		DomainValue tpFrete = conhecimentoService.findTpFreteByIdConhecimento(itemFatura.getDevedorDocServFat().getDoctoServico().getIdDoctoServico());
		
		if (tpFrete != null) {
			mapRetorno.put("tpFreteValue", tpFrete.getValue());
			mapRetorno.put("tpFreteDescription", tpFrete.getDescription());
		}
		
		mapRetorno.put("devedorDocServFat.doctoServico.moeda.idMoeda", itemFatura.getDevedorDocServFat().getDoctoServico().getMoeda().getIdMoeda());
		
		if (itemFatura.getDevedorDocServFat().getDoctoServico().getServico() != null){
			mapRetorno.put("devedorDocServFat.doctoServico.servico.idServico", itemFatura.getDevedorDocServFat().getDoctoServico().getServico().getIdServico());
		}
		
		if (itemFatura.getDevedorDocServFat().getDivisaoCliente() != null){
			mapRetorno.put("devedorDocServFat.divisaoCliente.idDivisaoCliente", itemFatura.getDevedorDocServFat().getDivisaoCliente().getIdDivisaoCliente());
		}
		
		mapRetorno.put("devedorDocServFat.doctoServico.servico.dsServico", itemFatura.getDevedorDocServFat().getDoctoServico().getServico().getDsServico());
		mapRetorno.put("devedorDocServFat.doctoServico.servico.tpModal", itemFatura.getDevedorDocServFat().getDoctoServico().getServico().getTpModal().getValue());
		mapRetorno.put("devedorDocServFat.doctoServico.servico.tpAbrangencia", itemFatura.getDevedorDocServFat().getDoctoServico().getServico().getTpAbrangencia().getValue());
		if(itemFatura.getDevedorDocServFat().getDesconto() != null){
			mapRetorno.put("devedorDocServFat.desconto.tpSituacaoAprovacao", itemFatura.getDevedorDocServFat().getDesconto().getTpSituacaoAprovacao().getValue());
		}
		mapRetorno.put("idItemFatura", itemFatura.getIdItemFatura());
		
		return mapRetorno;
	}
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public Map findSomatorios(Long idFatura){
		Map map = new HashMap();

		MasterEntry entry = getMasterFromSession(idFatura, true);			
		ItemList items = getItemsFromSession(entry, ITEM_FATURA);
		ItemListConfig config = getMasterConfig().getItemListConfig(ITEM_FATURA);
		
		BigDecimal vlDocumentoTotal = new BigDecimal("0.00");
		BigDecimal vlDescontoTotal = new BigDecimal("0.00");
		vlDocumentoTotal = vlDocumentoTotal.setScale(2, RoundingMode.HALF_UP);
		vlDescontoTotal = vlDescontoTotal.setScale(2, RoundingMode.HALF_UP);
		
		for (Iterator iter = items.iterator(idFatura, config); iter.hasNext();) {
			ItemFatura itemFatura = (ItemFatura)iter.next();
			vlDocumentoTotal = vlDocumentoTotal.add(itemFatura.getDevedorDocServFat().getVlDevido());
			
			if (itemFatura.getDevedorDocServFat().getDescontos() != null && itemFatura.getDevedorDocServFat().getDescontos().size() > 0){
				vlDescontoTotal = vlDescontoTotal.add(((Desconto)itemFatura.getDevedorDocServFat().getDescontos().get(0)).getVlDesconto());
			}	
		}
		
		map.put("qtdeTotalDocumentos", Integer.valueOf(items.size()));
		map.put("valorTotalDocumentos",vlDocumentoTotal);
		map.put("valorTotalDesconto",vlDescontoTotal);	

		return map;
	}
	
	@Override
	protected MasterEntryConfig createMasterConfig(MasterDetailFactory masterFactory) {
		MasterEntryConfig config = masterFactory.createMasterEntryConfig(Fatura.class);
		configItemFatura(config);
		configFaturaAnexo(config);		
		return config;
	}
		
	private void configItemFatura(MasterEntryConfig config) {
		// Comparador para realizar a ordena��o dos items filhos de acordo com a regra de neg�cio.
		Comparator descComparator = new Comparator() {
			
			@Override
			public int compare(Object o1, Object o2) {				
				ItemFatura d1 = (ItemFatura) o1;
				ItemFatura d2 = (ItemFatura) o2;
				
				int retorno = 0;
				
				retorno = d1.getDevedorDocServFat().getDoctoServico().getFilialByIdFilialOrigem().getSgFilial().compareTo(d2.getDevedorDocServFat().getDoctoServico().getFilialByIdFilialOrigem().getSgFilial());
				
				if (retorno == 0){
					retorno = d1.getDevedorDocServFat().getDoctoServico().getNrDoctoServico().compareTo(d2.getDevedorDocServFat().getDoctoServico().getNrDoctoServico());
				}
				return retorno;
			}
			
		};
		
		
		// Esta instancia ser� responsavel por carregar os items filhos na sess�o a partir do banco de dados.
		ItemListConfig itemInit = new ItemListConfig() {
			
			//Chamado para carregar os filhos na sess�o
			@Override
			public List initialize(Long masterId) {
				if (masterId == null) {
					return Collections.EMPTY_LIST;
				}
				return getFaturaService().findItemFatura(masterId);
			}

			@Override
			public Integer getRowCount(Long masterId) {
				return getFaturaService().getRowCountItemFatura(masterId);
			}

			@Override
			public void modifyItemValues(Object newBean, Object bean) {
				Set ignore = new HashSet(2);
				ignore.add("idItemFatura");
				ignore.add("versao");
				ReflectionUtils.syncObjectProperties(bean, newBean, ignore);
			}

			@Override
			public Map configItemDomainProperties() {
				Map props = new HashMap(1);
				props.put("tpDocumentoServico", "DM_TIPO_DOCUMENTO_SERVICO");
				return props;
			}

			@Override
			public Object populateNewItemInstance(Map parameters, Object bean) {
				ItemFatura itemFaturaNew = mountItemFatura((TypedFlatMap)parameters, (ItemFatura)bean);
				
				resolveDomainValueProperties(itemFaturaNew);
				ItemList items = getItemsFromSession(getMasterFromSession(getMasterId(parameters), true), ITEM_FATURA);
				ItemListConfig config = getMasterConfig().getItemListConfig(ITEM_FATURA);
				
				MasterEntry entry = getMasterFromSession(getMasterId(parameters), true);
				
				//Regras de neg�cio
				getFaturaService().storeBeforeItemFatura((Fatura)entry.getMaster(), items, config, itemFaturaNew);				

				return itemFaturaNew;
			}
			
		};
		
		config.addItemConfig(ITEM_FATURA,ItemFatura.class, itemInit, descComparator);
	}	
	
	private void configFaturaAnexo(MasterEntryConfig config) {
		// Comparador para realizar a ordena��o dos items filhos de acordo com a regra de neg�cio.
    	Comparator descComparator = new Comparator() {
			@Override
			public int compare(Object obj1, Object obj2) {
        		return 0; 		
			}
    	};		
    	/**
    	 * Esta instancia � responsavel por carregar os 
    	 * items filhos na sess�o a partir do banco de dados.
    	 */
    	ItemListConfig itemInit = new ItemListConfig() {
    		
    		/**
    		 * Find paginated do filho
    		 * Passa por este ponto apenas na primeira vez em que a list filha e chamada.
    		 * Apos a primeira vez ela e carregada da memoria
    		 * 
    		 * @param masterId id do pai
    		 * @param parameters todos os parametros vindo da tela pai
    		 */    		
			@Override
			public List initialize(Long masterId, Map parameters) {	
				return getFaturaAnexoService().findFaturaAnexosByIdFatura(masterId);
			}

			/**
			 * Busca rowCount da grid da tela filha
			 * Passa por este ponto apenas na primeira vez em que a list filha e chamada.
    		 * Apos a primeira vez ela e carregada da memoria
			 * 
			 * @param masterId id do pai
			 * @param parameters todos os parametros vindo da tela pai
			 */			
			@Override
			public Integer getRowCount(Long masterId, Map parameters) {
				return Integer.valueOf(getFaturaAnexoService().findFaturaAnexosByIdFatura(masterId).size());
			}
			
			/**
			 * Chama esta funcao depois de editar um item da grid filho
			 * E retira atributos desnecessarios para o filho
			 * 
			 * @param newBean 
			 * @param oldBean 
			 */
			@Override
			public void modifyItemValues(Object newBean, Object bean) {
		        FaturaAnexo anexoModified = (FaturaAnexo) newBean;
		        FaturaAnexo baseAnexo = (FaturaAnexo) bean;
		        
		        baseAnexo.setDsAnexo(anexoModified.getDsAnexo());
		        baseAnexo.setDcArquivo(anexoModified.getDcArquivo());
		        baseAnexo.setBlEnvAnexoQuestFat(anexoModified.getBlEnvAnexoQuestFat());
		        
		        baseAnexo.setDhModificacao( new DateTime() );
			}
			
			/**
			 * Todos os dados a serem carregados na grid pelo form passam antes por este
			 * metodo. Para se fazer uma validacao...
			 * Recomenda-se que o bean em questao seja gerado nesta classe a partir dos
			 * parametros enviados da tela para se evitar um 'ReflectionUtils'
			 * 
			 * @param mapParameter 
			 * @param bean a ser istanciado
			 * @return Object bean instanciado
			 */
			@Override
			public Object populateNewItemInstance(Map mapParameter, Object bean) {
				FaturaAnexo faturaAnexo = (FaturaAnexo) bean;				
				TypedFlatMap parameters = (TypedFlatMap) mapParameter;
				
		    	
		    	faturaAnexo.setIdFaturaAnexo( parameters.getLong("idFaturaAnexo") );
		    	faturaAnexo.setDsAnexo( parameters.getString("dsAnexo") );
		    	try {
					faturaAnexo.setDcArquivo(Base64Util.decode(parameters.getString("dcArquivo")));
				} catch (IOException e) {
					log.error(e);
				}
		    	faturaAnexo.setBlEnvAnexoQuestFat(parameters.getBoolean("blEnvAnexoQuestFat"));
				faturaAnexoService.prepareValuesToStore(faturaAnexo);
				return faturaAnexo;
			}			

    	};    	    		
		config.addItemConfig(FATURA_ANEXO_CONFIG_ALIAS,FaturaAnexo.class, itemInit, descComparator);
	}	
		
	public ResultSetPage findPaginatedItemFatura(Map parameters) {

		ResultSetPage rsp = findPaginatedItemList(parameters, ITEM_FATURA);			
		List list = rsp.getList();			
		List listRet = new ArrayList();			
		
		for (Iterator iter = list.iterator(); iter.hasNext();){
			ItemFatura itemFatura = (ItemFatura)iter.next();		
			List listDescontos = itemFatura.getDevedorDocServFat().getDescontos();
			Map map = new TypedFlatMap();
			
			map.put("idItemFatura",itemFatura.getIdItemFatura());
			map.put("tpDocumentoServico",itemFatura.getDevedorDocServFat().getDoctoServico().getTpDocumentoServico());
			map.put("sgFilial",itemFatura.getDevedorDocServFat().getDoctoServico().getFilialByIdFilialOrigem().getSgFilial());
			map.put("nmFantasia",itemFatura.getDevedorDocServFat().getDoctoServico().getFilialByIdFilialOrigem().getPessoa().getNmFantasia());				
			map.put("nrDoctoServico",FormatUtils.formataNrDocumento(itemFatura.getDevedorDocServFat().getDoctoServico().getNrDoctoServico().toString(),itemFatura.getDevedorDocServFat().getDoctoServico().getTpDocumentoServico().getValue()));
			map.put("siglaSimbolo",itemFatura.getDevedorDocServFat().getDoctoServico().getMoeda().getSiglaSimbolo());
			map.put("siglaSimboloDesconto",itemFatura.getDevedorDocServFat().getDoctoServico().getMoeda().getSiglaSimbolo());
			map.put("vlTotalDocServico",itemFatura.getDevedorDocServFat().getVlDevido());
			map.put("idMoeda",itemFatura.getDevedorDocServFat().getDoctoServico().getMoeda().getIdMoeda());
			
			if (itemFatura.getDevedorDocServFat().getDivisaoCliente() != null){
				map.put("idDivisaoCliente",itemFatura.getDevedorDocServFat().getDivisaoCliente().getIdDivisaoCliente());
			}
			
			if (itemFatura.getDevedorDocServFat().getDoctoServico().getServico() != null){
				map.put("idServico",itemFatura.getDevedorDocServFat().getDoctoServico().getServico().getIdServico());
				map.put("tpModal",itemFatura.getDevedorDocServFat().getDoctoServico().getServico().getTpModal().getValue());		
				map.put("tpAbrangencia",itemFatura.getDevedorDocServFat().getDoctoServico().getServico().getTpAbrangencia().getValue());
			}
			
			map.put("idCliente",itemFatura.getDevedorDocServFat().getCliente().getIdCliente());			
			
			if (listDescontos != null && !listDescontos.isEmpty() && !"C".equals(((Desconto)listDescontos.get(0)).getTpSituacaoAprovacao().getValue())) {
				map.put("vlDesconto",((Desconto)listDescontos.get(0)).getVlDesconto());
				map.put("tpSituacaoAprovacao", ((Desconto)listDescontos.get(0)).getTpSituacaoAprovacao());
			} else {
				map.put("vlDesconto", BigDecimal.ZERO);
				map.put("tpSituacaoAprovacao", "A");
			}
			
			listRet.add(map);
		}
			
			rsp.setList(listRet);
		
		return rsp;
	}	
	
	public Integer getRowCountItemFatura(Map parameters){
		return getRowCountItemList(parameters, ITEM_FATURA);
	}
	
	public Map findByIdItemFatura(MasterDetailKey key) {
		ItemFatura itemFatura = (ItemFatura)findItemById(key, ITEM_FATURA);
		TypedFlatMap map = new TypedFlatMap();
		
		BigDecimal desconto = BigDecimal.ZERO;
		
		map.put("idItemFatura", itemFatura.getIdItemFatura());
		map.put("idCliente",itemFatura.getDevedorDocServFat().getCliente().getIdCliente());
		map.put("devedorDocServFat.idDevedorDocServFat",itemFatura.getDevedorDocServFat().getIdDevedorDocServFat());
		
		map.put("devedorDocServFat.doctoServico.nrDoctoServico",itemFatura.getDevedorDocServFat().getDoctoServico().getNrDoctoServico());
		map.put("devedorDocServFat.doctoServico.idDoctoServico",itemFatura.getDevedorDocServFat().getDoctoServico().getIdDoctoServico());
		map.put("devedorDocServFat.doctoServico.nrDoctoServicoTmp",itemFatura.getDevedorDocServFat().getDoctoServico().getNrDoctoServico());
		map.put("devedorDocServFat.doctoServico.vlTotalDocServico",itemFatura.getDevedorDocServFat().getVlDevido());
		map.put("devedorDocServFat.doctoServico.tpDocumentoServico.description",itemFatura.getDevedorDocServFat().getDoctoServico().getTpDocumentoServico().getDescription());
		map.put("devedorDocServFat.doctoServico.tpDocumentoServico.value",itemFatura.getDevedorDocServFat().getDoctoServico().getTpDocumentoServico().getValue());
		map.put("devedorDocServFat.doctoServico.moeda.idMoeda",itemFatura.getDevedorDocServFat().getDoctoServico().getMoeda().getIdMoeda());		
		map.put("devedorDocServFat.doctoServico.filialByIdFilialOrigem.idFilial",itemFatura.getDevedorDocServFat().getDoctoServico().getFilialByIdFilialOrigem().getIdFilial());
		map.put("devedorDocServFat.doctoServico.filialByIdFilialOrigem.sgFilial",itemFatura.getDevedorDocServFat().getDoctoServico().getFilialByIdFilialOrigem().getSgFilial());
		map.put("devedorDocServFat.doctoServico.filialByIdFilialOrigem.pessoa.nmFantasia",itemFatura.getDevedorDocServFat().getDoctoServico().getFilialByIdFilialOrigem().getPessoa().getNmFantasia());		
		if (itemFatura.getDevedorDocServFat().getDesconto() != null) {
			map.put("devedorDocServFat.desconto.idDesconto",((Desconto)itemFatura.getDevedorDocServFat().getDescontos().get(0)).getIdDesconto());				
			map.put("devedorDocServFat.desconto.tpSituacaoAprovacao",((Desconto)itemFatura.getDevedorDocServFat().getDescontos().get(0)).getTpSituacaoAprovacao().getValue());
			map.put("devedorDocServFat.desconto.vlDesconto",((Desconto)itemFatura.getDevedorDocServFat().getDescontos().get(0)).getVlDesconto());
			desconto = ((Desconto) itemFatura.getDevedorDocServFat().getDescontos().get(0)).getVlDesconto();
			if(itemFatura.getDevedorDocServFat().getDesconto().getMotivoDesconto() != null){
				map.put("devedorDocServFat.desconto.motivoDesconto.idMotivoDescontoItem",itemFatura.getDevedorDocServFat().getDesconto().getMotivoDesconto().getIdMotivoDesconto());
			}
			map.put("devedorDocServFat.desconto.obDesconto",((Desconto)itemFatura.getDevedorDocServFat().getDescontos().get(0)).getObDesconto());
		}

		List<ItemRelacaoPagtoParcial> irpp = itemRelacaoPagtoParcialService.findByIdDevedorDocServFat(itemFatura.getDevedorDocServFat().getIdDevedorDocServFat());
		
		BigDecimal sumValorRecebidoParcial = BigDecimal.ZERO;
		BigDecimal saldoDevedor = BigDecimal.ZERO;
		
		for (ItemRelacaoPagtoParcial itemRelacaoPagtoParcial : irpp) {
			sumValorRecebidoParcial = sumValorRecebidoParcial.add(itemRelacaoPagtoParcial.getVlPagamento());
		}
			
		saldoDevedor = itemFatura.getDevedorDocServFat().getVlDevido().subtract(desconto).subtract(sumValorRecebidoParcial);

		map.put("sumValorRecebidoParcial", sumValorRecebidoParcial);
		map.put("saldoDevedor", saldoDevedor);
		
		BigDecimal saldoTotalDocumento = itemFatura.getDevedorDocServFat().getVlDevido().subtract(sumValorRecebidoParcial);
		
		map.put("saldoTotalDocumento", saldoTotalDocumento);

		return map;
	}	
	
	
	/**
	 * Find da tag Devedor
	 * */
	public List findDevedorServDocFat(TypedFlatMap map){
		DevedorDocServFatLookupParam devedorDocServFatLookupParam = new DevedorDocServFatLookupParam();
		
		devedorDocServFatLookupParam.setIdFilial(map.getLong("doctoServico.filialByIdFilialOrigem.idFilial"));
		devedorDocServFatLookupParam.setNrDocumentoServico(map.getLong("doctoServico.nrDoctoServico"));
		devedorDocServFatLookupParam.setTpDocumentoServico(map.getString("doctoServico.tpDocumentoServico"));
		devedorDocServFatLookupParam.setIdCliente(map.getLong("cliente.idCliente"));
		devedorDocServFatLookupParam.setIdMoeda(map.getLong("idMoeda"));
		devedorDocServFatLookupParam.setIdServico(map.getLong("idServico"));
		devedorDocServFatLookupParam.setTpModal(map.getString("tpModal"));
		devedorDocServFatLookupParam.setTpAbrangencia(map.getString("tpAbrangencia"));
		devedorDocServFatLookupParam.setTpSituacaoDevedorDocServFatValido(map.getInteger("tpSituacaoDevedorDocServFatValido"));
		devedorDocServFatLookupParam.setTpFrete(map.getString("tpFrete"));
		devedorDocServFatLookupParam.setIdDivisaoCliente(map.getLong("idDivisaoCliente"));
		
		if (devedorDocServFatLookupParam.getIdCliente() != null){
			Cliente cliente = clienteService.findByIdComPessoa(devedorDocServFatLookupParam.getIdCliente());			
			devedorDocServFatLookupParam.setCliente(cliente);
			
			/*Se o indicador BL_SEPARA_FATURA_MODAL for diferente de S remove os campos abaixo da consulta*/
			if(cliente.getBlSeparaFaturaModal() != null && !cliente.getBlSeparaFaturaModal()){
				devedorDocServFatLookupParam.setTpModal(null);
				devedorDocServFatLookupParam.setIdServico(null);
				devedorDocServFatLookupParam.setTpFrete(null);
				devedorDocServFatLookupParam.setIdDivisaoCliente(null);				
		}
		
		}
		
		/*
		 *	LMS-3069
		 *	
		 *	@author WagnerFC 
		 */
		DoctoServico doctoServico = doctoServicoService.findDoctoServicoByTpDocumentoByIdFilialOrigemByNrDoctoServico(
				devedorDocServFatLookupParam.getTpDocumentoServico(),
				devedorDocServFatLookupParam.getIdFilial(),
				devedorDocServFatLookupParam.getNrDocumentoServico());

		Boolean hasDataEntregaCtrc = false;
		
		if(doctoServico != null) {
			hasDataEntregaCtrc = this.devedorDocServFatLookUpService.validateDataEntregaCtrc(doctoServico.getIdDoctoServico());
		}
		
		List list = this.devedorDocServFatLookUpService.findDevedorDocServFat(devedorDocServFatLookupParam, "LMS-36006");
			
		List listRet = new ArrayList();			
		
		for (Iterator iter = list.iterator(); iter.hasNext();){
			Map mapRet = (Map)iter.next();		
			
			mapRet.put("devedorDocServFat.desconto.idDesconto",mapRet.get("idDesconto"));
			mapRet.put("devedorDocServFat.doctoServico.filialByIdFilialOrigem.pessoa.nmFantasia",mapRet.get("nmFantasia"));
			mapRet.put("tpModal",((DomainValue)mapRet.get("tpModal")).getValue());
			mapRet.put("tpAbrangencia",((DomainValue)mapRet.get("tpAbrangencia")).getValue());
			mapRet.put("hasDataEntregaCtrc", hasDataEntregaCtrc);

			listRet.add(mapRet);
		}
		
		return AliasToNestedMapResultTransformer.getInstance().transformListResult(listRet);
	}		
	
	public List findLookupFilial(TypedFlatMap map){
		return this.getFilialService().findLookup(map);
	}
	
	public List findLookupFilialCobradora(TypedFlatMap map){
		return this.getFilialService().findLookup(map);
	}
	
	public List findLookupFilialDebitada(TypedFlatMap map){
		return this.getFilialService().findLookup(map);
	}
	
	public List findLookupCliente(Map criteria){
		List lstCliente = this.getClienteService().findLookup(criteria);
		TypedFlatMap mapRetorno = null;
		if (lstCliente != null && lstCliente.size() == 1){
			Cliente cliente = (Cliente)lstCliente.get(0);
			
			mapRetorno = new TypedFlatMap();
			
			mapRetorno.put("pessoa.nrIdentificacaoFormatado", cliente.getPessoa().getNrIdentificacaoFormatado());
			mapRetorno.put("idCliente", cliente.getIdCliente());
			mapRetorno.put("pessoa.nmPessoa", cliente.getPessoa().getNmPessoa());
			
			lstCliente = new ArrayList();
			
			lstCliente.add(mapRetorno);
		}

		return lstCliente;
	}

	public List findComboCedentes(TypedFlatMap criteria){
		return this.getCedenteService().findComboValues(criteria);
	}	
	
	public List findComboCedentesActive(TypedFlatMap criteria){
		Long idFatura = criteria.getLong("faturas.idFatura");
		
    	List rs = getCedenteService().findCedenteAtivoByIdFatura(idFatura);
    	List retorno = new ArrayList();
    	
		for(Iterator iter = rs.iterator(); iter.hasNext();) {
			Cedente cedente = (Cedente)iter.next();
			Map mapRetorno = new HashMap();
			mapRetorno.put("idCedente", cedente.getIdCedente());
			mapRetorno.put("comboText", cedente.getDsCedente());
			retorno.add(mapRetorno);
		}
    	return retorno;
	}	
	
	public List findComboDivisaoCliente(TypedFlatMap criteria){
		if (criteria != null && criteria.getLong("idCliente") != null){
			return this.getDivisaoClienteService().findByIdClienteMatriz(populateDivisaoClienteParam(criteria));
		} else {
			return new ArrayList();
		}
	}	
	
	/**
	 * Popula a DivisaoClienteparam para ser usado como filtro na busca por divisao
	 *
	 * @author Hector Julian Esnaola Junior
	 * @since 24/01/2007
	 *
	 * @param tfm
	 * @return
	 *
	 */
	public DivisaoClienteParam populateDivisaoClienteParam(TypedFlatMap tfm){
		
		DivisaoClienteParam dcp = new DivisaoClienteParam();
		
		dcp.setIdCliente(tfm.getLong("idCliente"));
		dcp.setIdDivisaoCliente(tfm.getLong("idDivisao"));
		dcp.setTpModal(tfm.getString("tpModal"));
		dcp.setTpAbrangencia(tfm.getString("tpAbrangencia"));
		
		return dcp;		
	}
	
	public List findComboTipoAgrupamento(TypedFlatMap criteria){
		if (criteria.getLong("agrupamentoCliente.idAgrupamentoCliente") != null){
			return this.getTipoAgrupamentoService().find(criteria);
		} else {
			return null;
		}
	}	
	
	public void mountFaturaInSesion(TypedFlatMap criteria){
		MasterEntry entry = getMasterFromSession(criteria.getLong("idFatura"), true);
		mountFatura((Fatura)entry.getMaster(), criteria);
	}
	
	public List findAgrupamentoCliente(Map criteria){
		return this.getAgrupamentoClienteService().find(criteria);
	}
	
	public List findLookupCotacaoMoeda(TypedFlatMap criteria){
		return this.getCotacaoMoedaService().findLookup(criteria);
	}
	
	public FilialService getFilialService() {
		return filialService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public ClienteService getClienteService() {
		return clienteService;
	}

	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}

	public CedenteService getCedenteService() {
		return cedenteService;
	}

	public void setCedenteService(CedenteService cedenteService) {
		this.cedenteService = cedenteService;
	}

	public DivisaoClienteService getDivisaoClienteService() {
		return divisaoClienteService;
	}

	public void setDivisaoClienteService(DivisaoClienteService divisaoClienteService) {
		this.divisaoClienteService = divisaoClienteService;
	}

	public TipoAgrupamentoService getTipoAgrupamentoService() {
		return tipoAgrupamentoService;
	}

	public void setTipoAgrupamentoService(
			TipoAgrupamentoService tipoAgrupamentoService) {
		this.tipoAgrupamentoService = tipoAgrupamentoService;
	}

	public AgrupamentoClienteService getAgrupamentoClienteService() {
		return agrupamentoClienteService;
	}

	public void setAgrupamentoClienteService(
			AgrupamentoClienteService agrupamentoClienteService) {
		this.agrupamentoClienteService = agrupamentoClienteService;
	}

	public CotacaoMoedaService getCotacaoMoedaService() {
		return cotacaoMoedaService;
	}

	public void setCotacaoMoedaService(CotacaoMoedaService cotacaoMoedaService) {
		this.cotacaoMoedaService = cotacaoMoedaService;
	}

	public void setFaturaService(FaturaService faturaService) {
		super.setMasterService(faturaService);
	}
	
	public FaturaService getFaturaService() {
		return (FaturaService)super.getMasterService();
	}
	
	@Override
	public DomainValueService getDomainValueService() {
		return domainValueService;
	}

	@Override
	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}		

	public List findLookupServiceDocumentFilialCTR(TypedFlatMap map) {
		return filialService.findLookupBySgFilial(map);
	}

	public List findLookupServiceDocumentFilialCRT(TypedFlatMap criteria) {
		return filialService.findLookupBySgFilial(criteria);
	}

	public List findLookupServiceDocumentFilialNFS(TypedFlatMap criteria) {
		return filialService.findLookupBySgFilial(criteria);
	}

	public List findLookupServiceDocumentFilialNSE(TypedFlatMap criteria) {
		return filialService.findLookupBySgFilial(criteria);
	}

	public List findLookupServiceDocumentFilialNTE(TypedFlatMap criteria) {
		return filialService.findLookupBySgFilial(criteria);
	}

	public List findLookupServiceDocumentFilialCTE(TypedFlatMap criteria) {
		return filialService.findLookupBySgFilial(criteria);
	}

	public List findLookupServiceDocumentFilialNFT(TypedFlatMap criteria) {
		return null;
	}

	public List findLookupServiceDocumentFilialMDA(TypedFlatMap criteria) {
		return null;
	}

	public List findLookupServiceDocumentFilialRRE(TypedFlatMap criteria) {
		return null;
	}

	public List findLookupServiceDocumentFilialNDN(TypedFlatMap criteria) {
		return filialService.findLookupBySgFilial(criteria);
	}

	/**
	 * Zera o desconto da fatura.
	 *
	 * @author Hector Julian Esnaola Junior
	 * @since 19/07/2007
	 *
	 * @param tfm
	 *
	 */
	public Map zerarDescontoFatura(TypedFlatMap tfm){
		Long idFatura = tfm.getLong("idFatura");
		zerarDescontoService.executeProcess(idFatura); 
		return findById(idFatura);
	}
	
	/**
	 * Gera descontos para todos os documentos da fatura a partir do total do saldo devedor
	 *
	 * @author �caro Franco Damiani
	 * @since 28/07/2014
	 *
	 * @param tfm
	 *
	 */
	public Map gerarDescontoTotalDevedorAutomatico(TypedFlatMap tfm){
		Long idFatura = tfm.getLong("idFatura");

		MasterEntry entry = getMasterFromSession(idFatura, true);		
		
		Fatura fatura = (Fatura) entry.getMaster();
		
		ItemList items = getItemsFromSession(entry, ITEM_FATURA);
		ItemListConfig config = getMasterConfig().getItemListConfig(ITEM_FATURA);

		for (Iterator iter = items.iterator(idFatura, config); iter.hasNext();) {
			ItemFatura itemFatura = (ItemFatura)iter.next();
			DevedorDocServFat devedor = itemFatura.getDevedorDocServFat();
			
			BigDecimal valorDocumento = itemFatura.getDevedorDocServFat().getVlDevido();
			
			BigDecimal valorDesconto = valorDocumento;
			
			valorDesconto.setScale(2, RoundingMode.HALF_UP);

			List<ItemRelacaoPagtoParcial> recebimentos = itemRelacaoPagtoParcialService.findByIdDevedorDocServFat(devedor.getIdDevedorDocServFat());
			
			if(!recebimentos.isEmpty()){
				BigDecimal totalRecebimentos =  new BigDecimal(0);
				
				for (ItemRelacaoPagtoParcial pgto : recebimentos) {
					totalRecebimentos = totalRecebimentos.add(pgto.getVlPagamento());
				}
				
				valorDesconto = valorDesconto.subtract(totalRecebimentos);
			}
			
			Desconto desconto = devedor.getDesconto();
			List descontos = new ArrayList();
			if(desconto == null){       
				desconto = new Desconto();
			}
		    BigDecimal percentualDesconto = descontoService.calculaPorcentagemDesconto(valorDesconto, valorDocumento);
				
		    desconto.setDevedorDocServFat(devedor);
		    desconto.setVlDesconto(valorDesconto);
		    desconto.setTpSituacaoAprovacao(new DomainValue("E"));
		    desconto.setPercentualDesconto(percentualDesconto);
		    desconto.setNrDocumento(devedor.getDoctoServico().getNrDoctoServico().toString());

			descontos.add(desconto);

			devedor.setDescontos(descontos);
	
			itemFatura.setDevedorDocServFat(devedor);
		}
		return mountMap(fatura);
	}

	public List findEventosMensagem(TypedFlatMap criteria){
		return monitoramentoMensagemService.findEventosMensagem(criteria.getLong("idMonitoramentoMensagem"));
	}
	
	public List findConteudoMensagem(TypedFlatMap criteria){
		return monitoramentoMensagemService.findConteudoMensagem(criteria.getLong("idMonitoramentoMensagem"));
	}
	public List findHistoricoMensagens(TypedFlatMap criteria){
		if ( criteria.getString("idFatura") == null ){
			return new ArrayList();
		}
		return monitoramentoMensagemService.findHistoricoMensagensByFaturaId(criteria.getLong("idFatura"));
	}
	
	@SuppressWarnings("rawtypes")
	public List findRecebimentosParciais(TypedFlatMap criteria) {
		return relacaoPagtoParcialService.findRecebimentosParciais(criteria);
	}
	
	public List findLookupServiceDocumentNumberCRT(TypedFlatMap criteria) {
		return devedorDocServFatService.findNrDocumentoCRT(criteria);
	}

	public List findLookupServiceDocumentNumberNFS(TypedFlatMap criteria) {
		return devedorDocServFatService.findNrDocumentoNFS(criteria);
	}

	public List findLookupServiceDocumentNumberNFT(TypedFlatMap criteria) {
		return null;
	}

	public List findLookupServiceDocumentNumberMDA(TypedFlatMap criteria) {
		return null;
	}

	public List findLookupServiceDocumentNumberRRE(TypedFlatMap criteria) {
		return null;
	}

	public List findLookupServiceDocumentNumberNDN(TypedFlatMap criteria) {
		return devedorDocServFatService.findNrDocumentoNDN(criteria);
	}

    public Object findAnexos(MasterDetailKey key) {
    	FaturaAnexo faturaAnexo = (FaturaAnexo) findItemById(key, FATURA_ANEXO_CONFIG_ALIAS);    	
    	TypedFlatMap mapItemMda = new TypedFlatMap();   		
    	
    	mapItemMda.put("idFaturaAnexo",faturaAnexo.getIdFaturaAnexo()); 
		mapItemMda.put("dsAnexo", faturaAnexo.getDsAnexo());
		mapItemMda.put("dcArquivo", Base64Util.encode(faturaAnexo.getDcArquivo()) );
		mapItemMda.put("blEnvAnexoQuestFat", faturaAnexo.getBlEnvAnexoQuestFat());
		
		return mapItemMda;   	
    }    	

	public DevedorDocServFatService getDevedorDocServFatService() {
		return devedorDocServFatService;
	}

	public void setDevedorDocServFatService(
			DevedorDocServFatService devedorDocServFatService) {
		this.devedorDocServFatService = devedorDocServFatService;
	}

	public DescontoService getDescontoService() {
		return descontoService;
	}

	public void setDescontoService(DescontoService descontoService) {
		this.descontoService = descontoService;
	}

	public DevedorDocServFatLookUpService getDevedorDocServFatLookUpService() {
		return devedorDocServFatLookUpService;
	}

	public void setDevedorDocServFatLookUpService(
			DevedorDocServFatLookUpService devedorDocServFatLookUpService) {
		this.devedorDocServFatLookUpService = devedorDocServFatLookUpService;
	}
	public void setBoletoService(BoletoService boletoService) {
		this.boletoService = boletoService;
	}

	public void setRedecoService(RedecoService redecoService) {
		this.redecoService = redecoService;
	}

	public void setReciboService(ReciboService reciboService) {
		this.reciboService = reciboService;
	}

	public void setGerarFaturaFaturaService(
			GerarFaturaFaturaService gerarFaturaFaturaService) {
		this.gerarFaturaFaturaService = gerarFaturaFaturaService;
	}

	public void setDataVencimentoService(DataVencimentoService dataVencimentoService) {
		this.dataVencimentoService = dataVencimentoService;
	}

	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
	}

	public void setHistoricoFilialService(
			HistoricoFilialService historicoFilialService) {
		this.historicoFilialService = historicoFilialService;
	}

	public void setZerarDescontoService(ZerarDescontoService zerarDescontoService) {
		this.zerarDescontoService = zerarDescontoService;
	}

	public void setFaturaAnexoService(FaturaAnexoService faturaAnexoService) {
		this.faturaAnexoService = faturaAnexoService;
	}
	
	public FaturaAnexoService getFaturaAnexoService() {
		return faturaAnexoService;
	}
	
	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}

	public ConfiguracoesFacade getConfiguracoesFacade() {
		return configuracoesFacade;
	}

	public BloqueioFaturamentoService getBloqueioFaturamentoService() {
		return bloqueioFaturamentoService;
	}

	public void setBloqueioFaturamentoService(BloqueioFaturamentoService bloqueioFaturamentoService) {
		this.bloqueioFaturamentoService = bloqueioFaturamentoService;
	}
	
	public void setRelacaoPagtoParcialService(RelacaoPagtoParcialService relacaoPagtoParcialService) {
		this.relacaoPagtoParcialService = relacaoPagtoParcialService;
	}
	
	public void setItemRelacaoPagtoParcialService(ItemRelacaoPagtoParcialService itemRelacaoPagtoParcialService) {
		this.itemRelacaoPagtoParcialService = itemRelacaoPagtoParcialService;
	}
	
	public void setDoctoServicoService(DoctoServicoService doctoServicoService) {
		this.doctoServicoService = doctoServicoService;
	}
	
	public void clearSessionItens(){
		super.removeMasterFromSession();
	}

	public void setMotivoDescontoService(MotivoDescontoService motivoDescontoService) {
		this.motivoDescontoService = motivoDescontoService;
}


	public ReportExecutionManager getReportExecutionManager() {
		return reportExecutionManager;
	}


	public void setReportExecutionManager(ReportExecutionManager reportExecutionManager) {
		this.reportExecutionManager = reportExecutionManager;
	}

	public EmitirFaturasExcelService getEmitirFaturasExcelService() {
		return emitirFaturasExcelService;
	}

	public void setEmitirFaturasExcelService(
			EmitirFaturasExcelService emitirFaturasExcelService) {
		this.emitirFaturasExcelService = emitirFaturasExcelService;
	}
	
	public void setMonitoramentoMensagemService(
			MonitoramentoMensagemService monitoramentoMensagemService) {
		this.monitoramentoMensagemService = monitoramentoMensagemService;
	}
	
	public void setUsuarioService(UsuarioService usuarioService) {
		this.usuarioService = usuarioService;
	}

	public void setTratativaCobInadimplenciaService(
			TratativaCobInadimplenciaService tratativaCobInadimplenciaService) {
		this.tratativaCobInadimplenciaService = tratativaCobInadimplenciaService;
	}

	public List<TypedFlatMap> findRecebimentos(TypedFlatMap criteria) {
		return redecoService.findRecebimentoRedeco(criteria.getLong("idFatura"));
	}

}
