package com.mercurio.lms.contasreceber.action;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.joda.time.YearMonthDay;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.model.util.AliasToTypedFlatMapResultTransformer;
import com.mercurio.adsm.framework.session.SessionContext;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.AgenciaBancaria;
import com.mercurio.lms.configuracoes.model.Banco;
import com.mercurio.lms.configuracoes.model.service.AgenciaBancariaService;
import com.mercurio.lms.configuracoes.model.service.BancoService;
import com.mercurio.lms.configuracoes.model.service.EmpresaCobrancaService;
import com.mercurio.lms.contasreceber.model.Cheque;
import com.mercurio.lms.contasreceber.model.HistoricoCheque;
import com.mercurio.lms.contasreceber.model.param.MovimentoChequeParam;
import com.mercurio.lms.contasreceber.model.service.ChequeService;
import com.mercurio.lms.contasreceber.model.service.HistoricoChequeService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.HistoricoFilialService;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionKey;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contasreceber.manterMovimentoChequesPreDatadosAction"
 */

public class ManterMovimentoChequesPreDatadosAction extends CrudAction {
	
	private BancoService bancoService;
	
	private AgenciaBancariaService agenciaBancariaService;
	
	private EmpresaCobrancaService empresaCobrancaService;
	
	private DomainValueService domainValueService;
	
	private HistoricoFilialService historicoFilialService;
	
	private FilialService filialService;
	
	private ChequeService chequeService;
	
	public void setService(HistoricoChequeService serviceService) {
		this.defaultService = serviceService;
	}
	
	public void store(TypedFlatMap map) {
		List lstHistoricoStr = map.getList("ids");
		List lstHistoricoLng = new ArrayList();
			
		//Os ids passão de String para Long
		for (Iterator iter = lstHistoricoStr.iterator(); iter.hasNext();){
			lstHistoricoLng.add(Long.valueOf((String)iter.next()));
		}
		
		DomainValue tpHistoricoCheque = map.getDomainValue("tpHistoricoChequeNovo");
		String obHistorico = map.getString("observacao");
		Long idEmpresaCobranca = map.getLong("empresaCobranca");
		Long idAlinea = map.getLong("alinea");
		YearMonthDay dtReapresentacao = map.getYearMonthDay("dtReapresentacao");
		((HistoricoChequeService)this.defaultService).storeHistoricoCheque(lstHistoricoLng, tpHistoricoCheque, obHistorico, idEmpresaCobranca, dtReapresentacao, idAlinea);
	}
	
	public void alterarVencimento(TypedFlatMap map) {

		Long idCheque = map.getLong("idCheque");
		Long idUltimoHistorico = map.getLong("idUltimoHistorico");
		YearMonthDay dtVencimentoNova = map.getYearMonthDay("dtVencimentoNova");
		
		chequeService.storeAlteraDataVencimento(idCheque, idUltimoHistorico, dtVencimentoNova);
			
	}

	public List findPaginated(TypedFlatMap map) {
		
		MovimentoChequeParam param = new MovimentoChequeParam();
		
		param.setNrLoteChequeInicial(map.getLong("nrLoteChequeInicial"));
		param.setNrLoteChequeFinal(map.getLong("nrLoteChequeFinal"));
		param.setNrBanco(map.getShort("nrBanco"));
		param.setNrAgencia(map.getShort("nrAgencia"));
		param.setNrCheque(map.getLong("nrCheque"));
		param.setNrContaBancaria(map.getString("nrContaBancaria"));
		param.setTpSituacaoCheque(map.getString("tpSituacaoCheque"));
		param.setTpHistoricoCheque(map.getString("tpHistoricoCheque"));
		param.setDtEmissaoInicial(map.getYearMonthDay("dtEmissaoInicial")); 
		param.setDtEmissaoFinal(map.getYearMonthDay("dtEmissaoFinal"));
		param.setDtReapresentacaoInicial(map.getYearMonthDay("dtReapresentacaoInicial"));
		param.setDtReapresentacaoFinal(map.getYearMonthDay("dtReapresentacaoFinal"));
		param.setDtVencimentoInicial(map.getYearMonthDay("dtVencimentoInicial"));
		param.setDtVencimentoFinal(map.getYearMonthDay("dtVencimentoFinal"));
		param.setIdFilial(map.getLong("filial.idFilial"));
		
		return ((HistoricoChequeService)this.defaultService).find(param);
	}
	
	public Integer getRowCount(TypedFlatMap map) {

		MovimentoChequeParam param = new MovimentoChequeParam();
		
		param.setNrLoteChequeInicial(map.getLong("nrLoteChequeInicial"));
		param.setNrLoteChequeFinal(map.getLong("nrLoteChequeFinal"));
		param.setNrBanco(map.getShort("nrBanco"));
		param.setNrAgencia(map.getShort("nrAgencia"));
		param.setNrCheque(map.getLong("nrCheque"));
		param.setNrContaBancaria(map.getString("nrContaBancaria"));
		param.setTpSituacaoCheque(map.getString("tpSituacaoCheque"));
		param.setTpHistoricoCheque(map.getString("tpHistoricoCheque"));
		param.setDtEmissaoInicial(map.getYearMonthDay("dtEmissaoInicial"));
		param.setDtEmissaoFinal(map.getYearMonthDay("dtEmissaoFinal"));
		param.setDtReapresentacaoInicial(map.getYearMonthDay("dtReapresentacaoInicial"));
		param.setDtReapresentacaoFinal(map.getYearMonthDay("dtReapresentacaoFinal"));
		param.setDtVencimentoInicial(map.getYearMonthDay("dtVencimentoInicial"));
		param.setDtVencimentoFinal(map.getYearMonthDay("dtVencimentoFinal"));
		param.setIdFilial(map.getLong("filial.idFilial"));

		return ((HistoricoChequeService)this.defaultService).getRowCount(param);
	}
	
	
    public void removeById(java.lang.Long id) {
        ((HistoricoChequeService)defaultService).removeById(id);
    }  
    
	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	((HistoricoChequeService)defaultService).removeByIds(ids);
    }

    public HistoricoCheque findById(java.lang.Long id) {
    	return ((HistoricoChequeService)defaultService).findById(id);
    }
    
    
    public List findLookupBanco(Map map){
    	return this.bancoService.findLookup(map);
    }

    public List findLookupAgencia(Map map){
    	return this.agenciaBancariaService.findLookup(map);
    }      

	public List findEmpresaCobranca(Map map){
		return this.empresaCobrancaService.findLookup(map);
	}
	
	public YearMonthDay findDataAtual(){
		return JTDateTimeUtils.getDataAtual();
	}
	
	public List findTpHistoricoCheque(){
		boolean filialMatriz = this.historicoFilialService.validateFilialByTpFilial(SessionUtils.getFilialSessao().getIdFilial(), "MA");
		boolean filialSucursal = this.historicoFilialService.validateFilialByTpFilial(SessionUtils.getFilialSessao().getIdFilial(), "SU");
		List dominiosValidos = new ArrayList();
		
		//Se a filial do usuário for a 'Matriz'
		if (filialMatriz) {        
	        dominiosValidos.add("TC");
	        dominiosValidos.add("TF");
	        dominiosValidos.add("TJ");
	        dominiosValidos.add("LP");
	        dominiosValidos.add("LI");
	        dominiosValidos.add("RE");
	        dominiosValidos.add("RM");
	        dominiosValidos.add("DB");
		//Se a filial do usuário for a 'Sucursal'
		} else if (filialSucursal) {        
	        dominiosValidos.add("RM");
	        dominiosValidos.add("LI");
	        dominiosValidos.add("DB");
	        dominiosValidos.add("RE");
	        dominiosValidos.add("LP");
	        dominiosValidos.add("TJ");
		} else {
	        dominiosValidos.add("TM");
	        dominiosValidos.add("RF");
	        dominiosValidos.add("DC");
		}
		
        List retorno = domainValueService.findByDomainNameAndValues("DM_HISTORICO_CHEQUE", dominiosValidos);

        return retorno;
	}
	
	public List findLookupFilial(TypedFlatMap criteria) {
		return filialService.findLookup(criteria);
	}

	public boolean validateFilialUsuarioMatriz(TypedFlatMap tfm){    	
		return SessionUtils.isFilialSessaoMatriz();
    }
    
    public Filial findFilialUsuarioLogado() {
    	Filial filial = (Filial)SessionContext.get(SessionKey.FILIAL_KEY);
    	filial.setFilialByIdFilialResponsavalAwb(null);
    	filial.setEmpresa(null);
    	return filial;
    }
    
    /**
     * Carrega os dados do cheque  de acordo com o idCheque que vem da tela manter Ações, para preencher os filtros
     *
     * @author Hector Julian Esnaola Junior
     * @since 02/05/2007
     *
     * @param tfm
     * @return
     *
     */
    public Map findCheque(TypedFlatMap tfm) {
		
    	Map retorno = new TypedFlatMap();
		
    	Cheque cheque = chequeService.findChequeById(tfm.getLong("idProcesso"));
    	
    	Banco banco = bancoService.findByNrBanco(cheque.getNrBanco().toString());
    	
    	AgenciaBancaria agencia = agenciaBancariaService
    			.findAgenciaBancaria(banco.getIdBanco(), null, cheque.getNrAgencia());
    	
    	retorno.put("agenciaBancaria.banco.idBanco", banco.getIdBanco());
    	retorno.put("agenciaBancaria.banco.nrBanco", banco.getNrBanco());
    	retorno.put("agenciaBancaria.banco.nmBanco", banco.getNmBanco());
    	
    	retorno.put("agenciaBancaria.idAgenciaBancaria", agencia.getIdAgenciaBancaria());
    	retorno.put("agenciaBancaria.nrAgenciaBancaria", agencia.getNrAgenciaBancaria());
    	retorno.put("agenciaBancaria.nmAgenciaBancaria", agencia.getNmAgenciaBancaria());
    	
    	retorno.put("nrCheque", cheque.getNrCheque());
    	retorno.put("nrContaBancaria", cheque.getNrContaCorrente());
    	
    	return AliasToTypedFlatMapResultTransformer.getInstance().transformeTupleMap(retorno);
	}
    
	public void setAgenciaBancariaService(AgenciaBancariaService agenciaBancariaService) {
		this.agenciaBancariaService = agenciaBancariaService;
	}

	public void setBancoService(BancoService bancoService) {
		this.bancoService = bancoService;
	}

	public void setEmpresaCobrancaService(
			EmpresaCobrancaService empresaCobrancaService) {
		this.empresaCobrancaService = empresaCobrancaService;
	}

	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}

	public void setHistoricoFilialService(HistoricoFilialService historicoFilialService) {
		this.historicoFilialService = historicoFilialService;
	}

		public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public void setChequeService(ChequeService chequeService) {
		this.chequeService = chequeService;
	}
}
