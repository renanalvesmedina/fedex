package com.mercurio.lms.contasreceber.action;

import java.io.Serializable;
import java.util.List;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.contasreceber.model.CedenteModalAbrangencia;
import com.mercurio.lms.contasreceber.model.service.CedenteModalAbrangenciaService;
import com.mercurio.lms.contasreceber.model.service.CedenteService;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;


/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contasreceber.vincularCedenteModalAbrangenciaAction"
 */

public class VincularCedenteModalAbrangenciaAction extends CrudAction {
	
	/** Utiliza Inversão de controle do Spring para setar CedenteModalAbrangenciaService */
	private CedenteModalAbrangenciaService cedenteModalAbrangenciaService;
	public void setCedenteModalAbrangenciaService(CedenteModalAbrangenciaService cedenteModalAbrangenciaService){
		this.cedenteModalAbrangenciaService = cedenteModalAbrangenciaService;
	}
	
	/** Utiliza Inversão de controle do Spring para setar CedenteService */
	private CedenteService cedenteService;
	public void setCedenteService(CedenteService cedenteService){
		this.cedenteService = cedenteService;
	}
	
	/**
	 * Popula a combo Cedente com os Cedentes 
	 * @param criteria
	 * @return List 
	 */
	public List findCedentes(TypedFlatMap criteria){
		return cedenteService.findCombo(criteria);
	}
	
	/**
	 * Popula a combo Cedente com os Cedentes Ativos 
	 * @param criteria
	 * @return List 
	 */
	public List findActiveCedentes(TypedFlatMap criteria){
		return cedenteService.findComboByActiveValues(criteria);
	}
	
	/**
     * Método que busca as Cedente de acordo com os filtros passados
     * @param criteria
     * @return ResultSetPage
     */
	public ResultSetPage findPaginatedByCedenteModalAbrangencia(TypedFlatMap criteria){
		return cedenteModalAbrangenciaService.findPaginatedByCedenteModalAbrangencia(criteria);
	}
	
	 /**
     * Método que retorna o número de registros de acordo com os filtros passados
     * @param criteria
     * @return
     */
	public Integer getRowCountByCedenteModalAbrangencia(TypedFlatMap criteria){
		return cedenteModalAbrangenciaService.getRowCountByCedenteModalAbrangencia(criteria);
	}
	
	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	cedenteModalAbrangenciaService.removeByIds(ids);
    }

    /**
     * Método responsável por carregar um pojo CedenteModalAbrangrangência de acordo com o id passado por parâmetro
     * @param id
     * @return CedenteModalAbrangrangência
     */
    public CedenteModalAbrangencia findById(Long id) {
		return cedenteModalAbrangenciaService.findById(id);
	}

    /**
     * Método responsavel por excluir um CedenteModalAbrangrangência de acordo com id passado por parâmetro
     * @param id
     */
	public void removeById(Long id) {
		cedenteModalAbrangenciaService.removeById(id);
	}
    
    /**
     * Método responsável por inserir ou editar um pojo CedenteModalAbrangrangência
     * @param bean
     * @return Serializable
     */
    public Serializable store(CedenteModalAbrangencia bean) {
    	return cedenteModalAbrangenciaService.store(bean);
    }
	

}
