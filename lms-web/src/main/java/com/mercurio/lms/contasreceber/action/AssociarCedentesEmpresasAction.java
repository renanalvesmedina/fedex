package com.mercurio.lms.contasreceber.action;

import java.io.Serializable;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.contasreceber.model.ComplementoEmpresaCedente;
import com.mercurio.lms.contasreceber.model.service.CedenteService;
import com.mercurio.lms.contasreceber.model.service.ComplementoEmpresaCedenteService;
import com.mercurio.lms.municipios.model.service.EmpresaService;
import com.mercurio.lms.util.FormatUtils;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contasreceber.associarCedentesEmpresasAction"
 */

public class AssociarCedentesEmpresasAction extends CrudAction {
    
    private EmpresaService empresaService;
    private CedenteService cedenteService;
    private ComplementoEmpresaCedenteService complementoEmpresaCedenteService;
    
	public ComplementoEmpresaCedenteService getComplementoEmpresaCedenteService() {
		return complementoEmpresaCedenteService;
	}

	public void setComplementoEmpresaCedenteService(
			ComplementoEmpresaCedenteService complementoEmpresaCedenteService) {
		this.complementoEmpresaCedenteService = complementoEmpresaCedenteService;
	}

	public Serializable store(ComplementoEmpresaCedente complementoEmpresaCedente) {
		return getComplementoEmpresaCedenteService().store(complementoEmpresaCedente);	
	}
	
	/**
	 * Popula a combo Cedente com os Cedentes 
	 * @param criteria
	 * @return List 
	 */
	public List findCedentes(TypedFlatMap criteria){
		return cedenteService.findCombo(criteria);
	}
	
	/**
	 * Popula a combo Cedente com os Cedentes Ativos 
	 * @param criteria
	 * @return List 
	 */
	public List findActiveCedentes(TypedFlatMap criteria){
		return cedenteService.findComboByActiveValues(criteria);
	}
	
	public void setService(ComplementoEmpresaCedenteService serviceService) {
		this.defaultService = serviceService;
	}
	
    public void removeById(java.lang.Long id) {
        ((ComplementoEmpresaCedenteService)defaultService).removeById(id);
    }

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	((ComplementoEmpresaCedenteService)defaultService).removeByIds(ids);
    }

    public ComplementoEmpresaCedente findById(java.lang.Long id) {
    	return ((ComplementoEmpresaCedenteService)defaultService).findById(id);
    }
    
	public List findLookupEmpresa(Map criteria){                                                                      
        return this.getEmpresaService().findLookup(criteria);
    }

    public ResultSetPage findPaginated(TypedFlatMap criteria){
    	ResultSetPage rsp = ((ComplementoEmpresaCedenteService)defaultService).findPaginated(criteria);
    	List lst = rsp.getList();
    	
    	for (Iterator iter = lst.iterator(); iter.hasNext();) {
			Map element = (Map) iter.next();
			
			element.put("dsEmpresa", FormatUtils.formatIdentificacao(
											((DomainValue) element.remove("tpIdentificacao")).getValue()
										  , (String) element.remove("nrIdentificacao"))
								   + " - " 
								   + (String) element.remove("nmPessoa"));
		}
    	
        return rsp;
    }
    
    public EmpresaService getEmpresaService() {
		return empresaService;
	}

	public void setEmpresaService(EmpresaService empresaService) {
		this.empresaService = empresaService;
	}

	public CedenteService getCedenteService() {
		return cedenteService;
	}

	public void setCedenteService(CedenteService cedenteService) {
		this.cedenteService = cedenteService;
	}

}