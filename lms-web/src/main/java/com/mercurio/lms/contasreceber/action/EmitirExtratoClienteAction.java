package com.mercurio.lms.contasreceber.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.joda.time.YearMonthDay;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.report.ReportActionSupport;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.Moeda;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.configuracoes.model.service.PessoaService;
import com.mercurio.lms.configuracoes.model.service.ServicoService;
import com.mercurio.lms.contasreceber.model.param.DivisaoClienteParam;
import com.mercurio.lms.contasreceber.report.EmitirExtratoClienteService;
import com.mercurio.lms.municipios.model.Pais;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.service.ClienteService;
import com.mercurio.lms.vendas.model.service.DivisaoClienteService;
import com.mercurio.lms.vendas.model.service.GrupoEconomicoService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contasreceber.emitirExtratoClienteAction"
 */

public class EmitirExtratoClienteAction extends ReportActionSupport {
	
	/**
	 * Set ClienteService (Inversion of control - Spring)
	 */
	private ClienteService clienteService;
	public void setClienteService(ClienteService clienteService){
		this.clienteService = clienteService;
	}
	
	/**
	 * Set GrupoEconomicoService (Inversion of control - Spring)
	 */
	private GrupoEconomicoService grupoEconomicoService;
	public void setGrupoEconomicoService(GrupoEconomicoService grupoEconomicoService){
		this.grupoEconomicoService = grupoEconomicoService;
	}
	
	/**
	 * Set ConfiguracoesFacade (Inversion of control - Spring)
	 */
	private ConfiguracoesFacade configuracoesFacade;
	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade){
		this.configuracoesFacade = configuracoesFacade;
	}
	
	/**
	 * Set ServicoService (Inversion of control - Spring)
	 */
	private ServicoService servicoService;
	public void setServicoService(ServicoService servicoService){
		this.servicoService = servicoService;
	}
	
	/**
	 * Set DivisaoClienteService (Inversion of control - Spring)
	 */
	private DivisaoClienteService divisaoClienteService;
	public void setDivisaoClienteService(DivisaoClienteService divisaoClienteService){
		this.divisaoClienteService = divisaoClienteService;
	}
	
	/**
	 * Set FilialService (Inversion of control - Spring)
	 */
	private FilialService filialService;
	public void setFilialService(FilialService filialService){
		this.filialService = filialService;
	}
	
	/**
	 * Set PessoaService (Inversion of control - Spring)
	 */
	private PessoaService pessoaService;
	public void setPessoaService(PessoaService pessoaService){
		this.pessoaService = pessoaService;
	}
	
	/**
	 * Set DomainValueService (Inversion of control - Spring)
	 */
	private DomainValueService domainValueservice;
	public void setDomainValueService(DomainValueService domainValueservice){
		this.domainValueservice = domainValueservice;
	}
	
	/**
	 * Set EmitirExtratoClienteService (Inversion of control - Spring)
	 */
	public void setEmitirExtratoClienteService(EmitirExtratoClienteService emitirExtratoClienteService) {
		this.reportServiceSupport = emitirExtratoClienteService;
	}  
	
	/**
	 * Método responsavel por buscar os dados complementares da lookup de cliente
	 *
	 * @author Hector Julian Esnaola Junior
	 * @since 17/07/2006
	 *
	 * @param criteria
	 * @return
	 *
	 */
	public Map findDadosClienteByExtrato(TypedFlatMap criteria){
		
		Cliente cliente = clienteService.findById(criteria.getLong("idCliente"));
		
		Map map = new HashMap();
		
		map.put("filialByIdFilialCliente", cliente.getFilialByIdFilialCobranca().getSgFilial() +  " - " + cliente.getFilialByIdFilialCobranca().getPessoa().getNmFantasia());
		map.put("tpClienteEscolhaMultipla", domainValueservice.findDomainValueDescription("DM_TIPO_CLIENTE", cliente.getTpCliente().getValue()));
		
		return map;
		
	}
	
	/**
	 * Método responsável por buscar nrCNPJParcial igual as primeiras 8 posições do nrIdentificacao da Pessoa, e alguns dados complementares do cliente caso seja encontrada a Pessoa 
	 * 
	 * @author HectorJ
	 * @since 18/05/2006
	 * 
	 * @param nrCNPJParcial
	 */
	public Map findNrCNPJParcialEqualNrIdentificacaoPessoa(TypedFlatMap criteria){
		
		Map map = new HashMap();
		List pessoas = pessoaService.findNrCNPJParcialEqualNrIdentificacaoPessoa(criteria.getString("nrCNPJParcial"));
		
		if(pessoas != null && !pessoas.isEmpty()){
			
			Pessoa pessoa = (Pessoa) pessoas.get(0);
			Cliente cliente = clienteService.findById(pessoa.getIdPessoa());
			
			map.put("tpClienteComplementar", domainValueservice.findDomainValueDescription("DM_TIPO_CLIENTE", cliente.getTpCliente().getValue()));
			map.put("nmCliente", cliente.getPessoa().getNmPessoa());
			map.put("apelido", cliente.getPessoa().getNmFantasia());
			
		}
		
		return map;
		
	}
	
	/**
	 * 
	 *
	 * @author Hector Julian Esnaola Junior
	 * @since 24/07/2006
	 *
	 * @param map
	 * @return
	 *
	 */
	public List findLookupFilial(TypedFlatMap map){
		return this.filialService.findLookup(map);
	}
	
	/**
	 * 
	 *
	 * @author Hector Julian Esnaola Junior
	 * @since 24/07/2006
	 *
	 * @param map
	 * @return
	 *
	 */
	public List findComboServico(TypedFlatMap map){
		return this.servicoService.find(map);
	}
	
	/**
	 * 
	 *
	 * @author Hector Julian Esnaola Junior
	 * @since 24/07/2006
	 *
	 * @param criteria
	 * @return
	 *
	 */
	public List findComboDivisaoCliente(TypedFlatMap criteria){
		return this.divisaoClienteService.findByIdClienteMatriz(populateDivisaoClienteParam(criteria));
	}	
	
	/**
	 * Popula a DivisaoClienteparam para ser usado como filtro na busca por divisao
	 *
	 * @author Hector Julian Esnaola Junior
	 * @since 24/01/2007
	 *
	 * @param tfm
	 * @return
	 *
	 */
	public DivisaoClienteParam populateDivisaoClienteParam(TypedFlatMap tfm){
		
		DivisaoClienteParam dcp = new DivisaoClienteParam();
		
		dcp.setIdCliente(tfm.getLong("idCliente"));
		dcp.setTpSituacao("A");
		
		return dcp;		
	}
	
	/**
	 * Busca as moedas para a combo de moeda
	 *
	 * @author Hector Julian Esnaola Junior
	 * @since 24/07/2006
	 *
	 * @param map
	 * @return List
	 *
	 */
    public List findMoedasByCombo(Map map){
    	Pais pais = SessionUtils.getPaisSessao();    	
    	return configuracoesFacade.getMoeda(pais.getIdPais(),Boolean.TRUE);
    }
    
    /**
     * Busca a moeda da sessão do usuário
     *
     * @author Hector Julian Esnaola Junior
     * @since 21/09/2006
     *
     * @return
     *
     */
    public Map findMoedaSessao(TypedFlatMap tfm){
    	
    	Moeda moedaSession = SessionUtils.getMoedaSessao();
    	Map retorno = new HashMap();
    	retorno.put("idMoeda", moedaSession.getIdMoeda());
    	
    	return retorno;
    }
    
    
    /**
     * Busca os cliente de acordo com o número de identificação informado
     *
     * @author Hector Julian Esnaola Junior
	 * @since 24/07/2006
	 *
	 * @param criteria
	 *
	 */
    public List findLookupCliente(TypedFlatMap tfm){
    		
    	List clientes = clienteService.findLookupSimplificado(tfm.getString("pessoa.nrIdentificacao"),null);
    	
    	List retorno = new ArrayList();
    		
    	for (Iterator iter = clientes.iterator(); iter.hasNext();) {
    			
    		Cliente element = (Cliente) iter.next();
    			
    		TypedFlatMap map = new TypedFlatMap();
    		map.put("pessoa.nrIdentificacao",element.getPessoa().getNrIdentificacao());
    		map.put("idCliente",element.getIdCliente());
    		map.put("pessoa.nmPessoa", element.getPessoa().getNmPessoa());
    		map.put("pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(
    														element.getPessoa().getTpIdentificacao(),
    														element.getPessoa().getNrIdentificacao()));
    		retorno.add(map);
    			
    	}
    		
    	return retorno;
    		
    }
 
    /**
	 * 
	 *
	 * @author Hector Julian Esnaola Junior
	 * @since 24/07/2006
	 *
	 * @param criteria
	 * @return
	 *
	 */
	public List findComboGrupoEconomico(TypedFlatMap criteria){
		return this.grupoEconomicoService.find(criteria);
	}	
	
	/**
	 * Método responsável por buscar o primeiro dia do mês atual e a data atual 
	 *
	 * @author Hector Julian Esnaola Junior
	 * @since 22/09/2006
	 *
	 * @return
	 *
	 */
	public Map findPeriodoByMonth(TypedFlatMap criteria){
		
		Map retorno = new HashMap();
		
		retorno.put("dtInicial", JTDateTimeUtils.getFirstDayOfYearMonthDay(JTDateTimeUtils.getDataAtual()));
		retorno.put("dtFinal", JTDateTimeUtils.getDataAtual());
		
		return retorno;
	}
	
	public void validatePeriodo(TypedFlatMap criteria) {
		
		String estadoCobrancaSelecionado = criteria.getString("estadoCobrancaSelecionado");
				
		if ("".equals(estadoCobrancaSelecionado) || "PA".equalsIgnoreCase(estadoCobrancaSelecionado)){
			YearMonthDay dhInicial = criteria.getYearMonthDay("dtInicial");
			YearMonthDay dhFinal = criteria.getYearMonthDay("dtFinal");
			
			if(dhFinal.isAfter(dhInicial.plusDays(31))){
				throw new BusinessException("LMS-36383");
			}
		}
		
	}
	
}
