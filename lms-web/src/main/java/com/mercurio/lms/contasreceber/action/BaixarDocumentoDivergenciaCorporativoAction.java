package com.mercurio.lms.contasreceber.action;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.contasreceber.model.service.BaixarDocumentoDivergenciaCorporativoLMSService;
import com.mercurio.lms.contasreceber.model.service.RelacaoCobrancaService;
import com.mercurio.lms.municipios.model.service.FilialService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contasreceber.baixarDocumentoDivergenciaCorporativoAction"
 */

public class BaixarDocumentoDivergenciaCorporativoAction extends CrudAction {

	/**
	 * Set FilialService (Spring - Inversion of control)
	 */
	private FilialService filialService;
	public void setFilialService(FilialService filialService){
		this.filialService = filialService;
	}
	
	/**
	 * Set RelacaoCobrancaService (Spring - Inversion of control)
	 */
	private RelacaoCobrancaService relacaoCobrancaService;
	public void setRelacaoCobrancaService(RelacaoCobrancaService relacaoCobrancaService){
		this.relacaoCobrancaService = relacaoCobrancaService;
	}
	
	/**
	 * Set DomainValueService (Spring - Inversion of control)
	 */
	private DomainValueService domainValueService;
	public void setDomainValueService(DomainValueService domainValueService){
		this.domainValueService = domainValueService;
	}
	
	/**
	 * Set BaixarDocumentoDivergenciaCorporativoLMSService (Spring - Inversion of control)
	 */
	private BaixarDocumentoDivergenciaCorporativoLMSService baixarDocumentoDivergenciaCorporativoLMSService;
	public void setBaixarDocumentoDivergenciaCorporativoLMSService(BaixarDocumentoDivergenciaCorporativoLMSService baixarDocumentoDivergenciaCorporativoLMSService){
		this.baixarDocumentoDivergenciaCorporativoLMSService = baixarDocumentoDivergenciaCorporativoLMSService;
	}
	
	private ConfiguracoesFacade configuracoesFacade;
	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}

	/**
	 * 
	 *
	 * @author Hector Julian Esnaola Junior
	 * @since 25/07/2006
	 *
	 * @param criteria
	 * @return
	 *
	 */
	public List findFilial(TypedFlatMap criteria) {
		return filialService.findLookup(criteria);
	}

	/**
	 * 
	 *
	 * @author Hector Julian Esnaola Junior
	 * @since 25/07/2006
	 *
	 * @param map
	 * @return
	 *
	 */
	public List findFatura(TypedFlatMap map){
		return baixarDocumentoDivergenciaCorporativoLMSService.findFatura(map);
	}
	
	/**
	 * 
	 *
	 * @author Hector Julian Esnaola Junior
	 * @since 25/07/2006
	 *
	 * @param map
	 * @return
	 *
	 */
	public List findDevedorServDocFat(TypedFlatMap map){
		return baixarDocumentoDivergenciaCorporativoLMSService.findDevedorServDocFat(map);
	}
	
	/**
	 * 
	 *
	 * @author Hector Julian Esnaola Junior
	 * @since 25/07/2006
	 *
	 * @param criteria
	 * @return
	 *
	 */
	public List findTipoDocumentoServico(Map criteria){
		String tpDocFat = (String)configuracoesFacade
			.getValorParametro("TP_DOCTO_FAT5");
		
		String[] dm = tpDocFat.split(";");
		List dominiosValidos = Arrays.asList(dm);
        List retorno = domainValueService.findByDomainNameAndValues("DM_TIPO_DOCUMENTO_REDECO", dominiosValidos);
        return retorno;
	}
	
	/**
	 * Método responsável por executar a rotina Baixa de Documentos
	 *
	 * @author Hector Julian Esnaola Junior
	 * @since 27/07/2006
	 *
	 */
	public Boolean executeBaixaDocumento(TypedFlatMap criteria){
		
		baixarDocumentoDivergenciaCorporativoLMSService
				.executeBaixaDocumento(criteria.getString("documento.tpDocumento")
									 , criteria.getLong("documento.idDocumento")
									 , criteria.getLong("documento.filial.idFilial")
									 , criteria.getLong("nrRelacaoCobranca")
									 , criteria.getString("sgFilialRelacaoCobranca")
									 , criteria.getYearMonthDay("dtLiquidacao"));
		
		return Boolean.TRUE;
	}
	
	/**
	 * Método responsável por fazer as validações do conhecimento
	 *
	 * @author Hector Julian Esnaola Junior
	 * @since 26/07/2006
	 *
	 * @param TypedFlatMap tfm
	 *
	 */
	public void validateDoctoServico(TypedFlatMap tfm){
		baixarDocumentoDivergenciaCorporativoLMSService.validateDoctoServico(tfm.getLong("idDocumento"));
	}
	
	/**
	 * Método responsável por fazer as validações da fatura
	 *
	 * @author Hector Julian Esnaola Junior
	 * @since 26/07/2006
	 *
	 * @param TypedFlatMap tfm
	 *
	 */
	public void validateFatura(TypedFlatMap tfm){
		baixarDocumentoDivergenciaCorporativoLMSService.validateFatura(tfm.getLong("idDocumento"));
	}
	
	/**
	 * Metodo responsável por buscar RelacaoCobranca de acordo com o nrRelacaoCobrancaFilial
	 * 
	 * @author Hector Julian Esnaola Junior
	 * @since 27/07/2006
	 * 
	 * @param Long nrRelacaoCobranca
	 * 
	 * @return List
	 */
	public List findRelacaoCobrancaByNrRelacaoCobranca(TypedFlatMap criteria){
		return relacaoCobrancaService.findRelacaoCobrancaByNrRelacaoCobranca(criteria.getLong("nrRelacaoCobrancaFilial"), criteria.getString("filial.sgFilial"));
	}
	
	/**
	 * Busca as datas da tabela v_conhecimentos_corporativo. 
	 *
	 * @author Hector Julian Esnaola Junior
	 * @since 01/08/2006
	 *
	 * @param TypedFlatMap
	 * @return Map
	 *
	 */
	public Map findDadosRelacaoCobranca(TypedFlatMap criteria){
		
		Long idDocumento = criteria.getLong("idDocumento");
		String sgFilial = criteria.getString("sgFilial");
		String tpDocumento = criteria.getString("tpDoc");
		
		return baixarDocumentoDivergenciaCorporativoLMSService.findDadosRelacaoCobranca(idDocumento, sgFilial, tpDocumento);
	}
	
}