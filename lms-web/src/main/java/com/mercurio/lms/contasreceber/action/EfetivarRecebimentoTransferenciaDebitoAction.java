package com.mercurio.lms.contasreceber.action;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.contasreceber.model.service.EfetivarRecebimentoTransferenciaDebitoService;
import com.mercurio.lms.contasreceber.model.service.TransferenciaService;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contasreceber.efetivarRecebimentoTransferenciaDebitoAction"
 */

public class EfetivarRecebimentoTransferenciaDebitoAction extends CrudAction{

	private FilialService filialService;
	private EfetivarRecebimentoTransferenciaDebitoService efetivarRecebimentoTransferenciaDebitoService;
	
	/**
	 * Validações para botão Receber.<BR>
	 * @param map
	 * @return
	 */
	public boolean validateBotaoReceber(TypedFlatMap map){
		Long idTransferencia = map.getLong("transferencia.idTransferencia");
		if (idTransferencia == null) return false;
		return (
			efetivarRecebimentoTransferenciaDebitoService.validateSituacaoTransferencia(
					idTransferencia, new String[]{"PR"} )
				
			&& efetivarRecebimentoTransferenciaDebitoService.validateFilialUsuario(map.getLong("filialDestino.idFilial"))
			);
	}
	
	/**
	 * Validação para o botão de cancelamento.<BR>
	 * @param map
	 * @return
	 */
	public boolean validateBotaoCancelar(TypedFlatMap map){
		Long idTransferencia = map.getLong("transferencia.idTransferencia");
		if (idTransferencia == null) return false;
		return (
				efetivarRecebimentoTransferenciaDebitoService.validateFilialUsuario(map.getLong("filialOrigem.idFilial"))
				&&
				efetivarRecebimentoTransferenciaDebitoService.validateSituacaoTransferencia(idTransferencia,new String[]{"PR"})
				&&
				getTransferenciaService().validateDhTransmissaoIsNull(idTransferencia)
			);
	}
	
	/**
	 * Validação para o botão "Retransmitir".<BR>
	 * Habilita o botão retransmitir somente quando a filial do usuário logado for igual à filial origem da transferência
	 * @param map Critérios para a pesquisa
	 * @return <code>true</code> Se a filial do usuário logado é igual a filial da transferencia
	 *         <code>false</code> caso contrário
	 */
	public boolean validateBotaoRetransmitir(TypedFlatMap map){
		
		Long idTransferencia = map.getLong("transferencia.idTransferencia");
		if (idTransferencia == null) return false;
		return efetivarRecebimentoTransferenciaDebitoService.validateFilialUsuario(map.getLong("filialOrigem.idFilial"));
		
	}
	
	/**
	 * Verifica se botão exluir da Aba Documento de Serviço pode ser habilitado.<BR>
	 * @param map
	 * @return
	 */
	public boolean validateBotaoExluirItem(TypedFlatMap map){
		Long idTransferencia = map.getLong("transferencia.idTransferencia");
		if (idTransferencia == null) return false;
		return(
				efetivarRecebimentoTransferenciaDebitoService.validateFilialUsuario(map.getLong("filialOrigem.idFilial"))
				&&
				efetivarRecebimentoTransferenciaDebitoService.validateSituacaoTransferencia(idTransferencia,new String[]{"PR"})
				&&
				getTransferenciaService().validateDhTransmissaoIsNull(idTransferencia)
			);
	}
	
	/**
	 * Executa a função do botão Retransmitir
	 * Atualiza a tabela Transferencia com dh_transmissao com um valor nulo
	 * @param tfm Identificador da transferencia a ser atualizada
	 * @return transferencia atualizada
	 */
	public Serializable storeRetransmitirTransferenciaDebito(TypedFlatMap tfm){
		return getTransferenciaService().storeRetransmitirTransferenciaDebito(tfm.getLong("idTransferencia"));
	}
	
	/**
	 * Botão excluir da aba de Documento de Serviço.<BR>
	 * @param map
	 */
	public void removeItensTransferencia(TypedFlatMap map) {
		efetivarRecebimentoTransferenciaDebitoService.removeItensTransferencia(map);
	}

	/**
	 * Serviço para buscar o Item da Transferencia.<BR>
	 * Utilizado no onClick da linha da Grid.<BR>
	 * @param id
	 * @return
	 */
	public Serializable findItemTransferenciaById(Long id){
		return efetivarRecebimentoTransferenciaDebitoService.findItemTransferenciaById(id);
	}

	/**
	 * Botão 'Cancelar', no detalhamento da Transferencia.<BR>
	 * @param map
	 * @return
	 */
	public Serializable storeCancelarTransferenciaDebito(TypedFlatMap map){
		return efetivarRecebimentoTransferenciaDebitoService.storeCancelarTransferenciaDebito(map.getLong("idTransferencia"));
	}
	
	public Map findFilialSessao(){
		TypedFlatMap mapRetorno = new TypedFlatMap();
		
		mapRetorno.put("filialByIdFilialDestino.idFilial", SessionUtils.getFilialSessao().getIdFilial());
		mapRetorno.put("filialByIdFilialDestino.sgFilial", SessionUtils.getFilialSessao().getSgFilial());
		mapRetorno.put("filialByIdFilialDestino.pessoa.nmFantasia", SessionUtils.getFilialSessao().getPessoa().getNmFantasia());
		
		return mapRetorno;
	}	
	
	/**
	 * Botão 'Receber', no detalhamento da Transferencia.<BR>
	 * @param map
	 * @return
	 */
	public Serializable storeTransferenciaDebito(TypedFlatMap map){
		return efetivarRecebimentoTransferenciaDebitoService.storeTransferenciaDebito(map.getLong("idTransferencia"));
	}
	
	public List findLookupFilial(Map map){
		return filialService.findLookupBySgFilial(map);
	}

	public Map findById(Long id) {
		return getTransferenciaService().findByIdWithFiliais(id);
	}
	
	public ResultSetPage findPaginatedTransferenciaDebito(TypedFlatMap map){
		return getTransferenciaService().findPaginatedTransferenciaDebito(map);
	}
	
	public Integer getRowCountTransferenciaDebito(TypedFlatMap map){
		return getTransferenciaService().getRowCountTransferenciaDebito(map);
	}
	
	public ResultSetPage findItensTransferencia(TypedFlatMap map){
		return efetivarRecebimentoTransferenciaDebitoService.findItensByTransferencia(map);
	}
	
	public Integer getRowCountItensTransferencia(TypedFlatMap map){
		return efetivarRecebimentoTransferenciaDebitoService.getRowCountFromItensByTransferencia(map);
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public void setEfetivarRecebimentoTransferenciaDebitoService(
			EfetivarRecebimentoTransferenciaDebitoService efetivarRecebimentoTransferenciaDebitoService) {
		this.efetivarRecebimentoTransferenciaDebitoService = efetivarRecebimentoTransferenciaDebitoService;
	}

	public void setTransferenciaService(TransferenciaService transferenciaService) {
		this.defaultService = transferenciaService;
	}
	
	public TransferenciaService getTransferenciaService() {
		return (TransferenciaService) this.defaultService;
	}
	
	
}
