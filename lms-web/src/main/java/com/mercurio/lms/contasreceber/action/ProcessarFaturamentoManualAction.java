package com.mercurio.lms.contasreceber.action;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.joda.time.YearMonthDay;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.service.CotacaoMoedaService;
import com.mercurio.lms.contasreceber.model.param.DivisaoClienteParam;
import com.mercurio.lms.contasreceber.model.param.SqlFaturamentoParam;
import com.mercurio.lms.contasreceber.model.service.CedenteService;
import com.mercurio.lms.contasreceber.model.service.FaturaService;
import com.mercurio.lms.contasreceber.model.service.FaturamentoEspecialService;
import com.mercurio.lms.contasreceber.model.service.FaturamentoNormalService;
import com.mercurio.lms.contasreceber.util.DataVencimentoService;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.service.AgrupamentoClienteService;
import com.mercurio.lms.vendas.model.service.ClienteService;
import com.mercurio.lms.vendas.model.service.DivisaoClienteService;
import com.mercurio.lms.vendas.model.service.TipoAgrupamentoService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contasreceber.processarFaturamentoManualAction"
 */

public class ProcessarFaturamentoManualAction extends CrudAction {
	
	private DivisaoClienteService divisaoClienteService;
	
	private ClienteService clienteService;
	
	private AgrupamentoClienteService agrupamentoClienteService;
	
	private TipoAgrupamentoService tipoAgrupamentoService;
	
	private CedenteService cedenteService;
	
	private CotacaoMoedaService cotacaoMoedaService;
	
	private FaturaService faturaService;
	
	private FaturamentoEspecialService faturamentoEspecialService;
	
	private FaturamentoNormalService faturamentoNormalService;
	
	private DataVencimentoService dataVencimentoService;
	
	/**
	 * Executa o faturmanto manual
	 * 
	 */
	public void executeFaturamento(TypedFlatMap map){
		// Armazena a quantidade de documentos faturados.
		Integer qtDocumentos = 0;
		// Objeto que armazena parâmetros para execução do faturamento.
		SqlFaturamentoParam param = setParam(map);
		
		if(!faturaService.validaDtEmissao(param.getDtEmissao())){
			throw new BusinessException("LMS-36099");
		}
		
		if(JTDateTimeUtils.comparaData(param.getDtFinalEmissao()!= null ? param.getDtFinalEmissao() : JTDateTimeUtils.getDataAtual(), param.getDtEmissao())>0){
			throw new BusinessException("LMS-36122");
		}
		
		clienteService.validateCobrancaCentralizada(map.getLong("cliente.idCliente"));
		// Chama o faturamento dos clientes com agrupamentos
		qtDocumentos = faturamentoEspecialService.generateFaturamento(param);
		// Chama o faturamento dos clientes sem agrupamentos
		qtDocumentos += faturamentoNormalService.generateFaturamento(param);
			
		// Caso não tenha processado nenhum documento, 
		// exibe alerta para o usuário.
		if (qtDocumentos == 0) {
			throw new BusinessException("LMS-36242");
		}

	}


	/**
	 * Seta os parâmetros da tela para serem utilizados na geração do faturamento
	 * @param map
	 * @param param
	 */
	private SqlFaturamentoParam setParam(TypedFlatMap map) {
		
		SqlFaturamentoParam param = new SqlFaturamentoParam();

		param.setIdCedente(map.getLong("cedente.idCedente"));
		param.setIdCliente(map.getLong("cliente.idCliente"));
		param.setDtInicioEmissao(map.getYearMonthDay("dtEmissaoInicial"));
		param.setDtFinalEmissao(map.getYearMonthDay("dtEmissaoFinal"));
		param.setDtVencimento(map.getYearMonthDay("dtVencimento"));
		param.setIdAgrupamentoCliente(map.getLong("agrupamentoCliente.idAgrupamentoCliente"));
		param.setIdTipoAgrupamento(map.getLong("tipoAgrupamento.idTipoAgrupamento"));
		param.setIdCotacaoMoeda(map.getLong("cotacaoMoeda.idCotacaoMoeda"));
		param.setTpAbrangencia(map.getString("tpAbrangencia"));
		param.setTpModal(map.getString("tpModal"));
		param.setTpFrete(map.getString("tpFrete"));
		param.setIdFilialCobranca(map.getLong("filial.idFilial"));
		param.setBlGerarBoleto(map.getBoolean("blGerarBoleto"));
		param.setIdDivisaoCliente(map.getLong("divisaoCliente.idDivisaoCliente"));
		param.setVlCotacaoMoeda(map.getBigDecimal("vlCotacaoMoeda"));
		param.setDtEmissao(map.getYearMonthDay("dtEmissao"));
		param.setBlFaturamentoManual(true);
		
		return param;
		
	}
	
	public void executeFaturamentoEspecialAutomatico(){
		faturamentoEspecialService.generateFaturamento(new SqlFaturamentoParam());
	}

	public void executeFaturamentoNormalAutomatico(){
		faturamentoNormalService.generateFaturamento(new SqlFaturamentoParam());
	}
	
	/**
	 * Retorno os valores necessário para inicializar a tela
	 * */
	public Map findInitialValue(){
		TypedFlatMap retorno = new TypedFlatMap();

		retorno.put("idPaisCotacao", SessionUtils.getPaisSessao().getIdPais());
		retorno.put("nmPaisCotacao", SessionUtils.getPaisSessao().getNmPais());

		if (SessionUtils.isFilialSessaoMatriz()){
			retorno.put("blMatriz", Boolean.TRUE);
		} else {
			retorno.put("blMatriz", Boolean.FALSE);
			retorno.put("filial.idFilial", SessionUtils.getFilialSessao().getIdFilial());
			retorno.put("filial.sgFilial", SessionUtils.getFilialSessao().getSgFilial());
			retorno.put("filial.pessoa.nmFantasia", SessionUtils.getFilialSessao().getPessoa().getNmFantasia());			
		}
		
		retorno.put("dtEmissao", JTDateTimeUtils.getDataAtual());
		
		return retorno;
	}
	
	public List findLookupCliente(Map criteria){
		List lstCliente = clienteService.findLookup(criteria);
		TypedFlatMap mapRetorno = null;
		if (lstCliente != null && lstCliente.size() == 1){
			Cliente cliente = (Cliente)lstCliente.get(0);
			
			mapRetorno = new TypedFlatMap();
			
			mapRetorno.put("pessoa.nrIdentificacaoFormatado", cliente.getPessoa().getNrIdentificacaoFormatado());
			mapRetorno.put("idCliente", cliente.getIdCliente());
			mapRetorno.put("pessoa.nmPessoa", cliente.getPessoa().getNmPessoa());
			
			lstCliente = new ArrayList();
			
			lstCliente.add(mapRetorno);
		}

		return lstCliente;
	}	
	
	public YearMonthDay findDataVencimento(TypedFlatMap map){
		return dataVencimentoService.generateDataVencimento(
				map.getLong("filial.idFilial"),
				map.getLong("divisaoCliente.idDivisaoCliente"),
				map.getString("tpFrete"),
				map.getYearMonthDay("dtEmissao"),
				map.getString("tpModal"),
				map.getString("tpAbrangencia"),
				null);
		
	}	

	public YearMonthDay findDtEmissaoFinal(){
		return new YearMonthDay().minusDays(1);
	}
	
	public List findComboDivisaoCliente(TypedFlatMap criteria){
		return divisaoClienteService.findByIdClienteMatriz(populateDivisaoClienteParam(criteria));
	}
	
	/**
	 * Popula a DivisaoClienteparam para ser usado como filtro na busca por divisao
	 *
	 * @author Hector Julian Esnaola Junior
	 * @since 24/01/2007
	 *
	 * @param tfm
	 * @return
	 *
	 */
	public DivisaoClienteParam populateDivisaoClienteParam(TypedFlatMap tfm){
		
		DivisaoClienteParam dcp = new DivisaoClienteParam();
		
		dcp.setIdCliente(tfm.getLong("idCliente"));
		dcp.setTpSituacao("A");
		
		return dcp;		
	}
	
	public List findAgrupamentoCliente(Map criteria){
		return agrupamentoClienteService.find(criteria);
	}
	
	public List findComboTipoAgrupamento(TypedFlatMap criteria){
		return tipoAgrupamentoService.find(criteria);
	}
	
	public List findComboCedentesActive(TypedFlatMap criteria){
		return cedenteService.findComboByActiveValues(criteria);
	}
	
	public List findLookupCotacaoMoeda(Map criteria){
		return cotacaoMoedaService.findLookup(criteria);
	}
	
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}

	public void setDivisaoClienteService(DivisaoClienteService divisaoClienteService) {
		this.divisaoClienteService = divisaoClienteService;
	}

	public void setAgrupamentoClienteService(
			AgrupamentoClienteService agrupamentoClienteService) {
		this.agrupamentoClienteService = agrupamentoClienteService;
	}

	public void setTipoAgrupamentoService(
			TipoAgrupamentoService tipoAgrupamentoService) {
		this.tipoAgrupamentoService = tipoAgrupamentoService;
	}

	public void setCedenteService(CedenteService cedenteService) {
		this.cedenteService = cedenteService;
	}

	public void setCotacaoMoedaService(CotacaoMoedaService cotacaoMoedaService) {
		this.cotacaoMoedaService = cotacaoMoedaService;
	}

	public void setFaturamentoEspecialService(
			FaturamentoEspecialService faturamentoEspecialService) {
		this.faturamentoEspecialService = faturamentoEspecialService;
	}

	public void setFaturamentoNormalService(
			FaturamentoNormalService faturamentoNormalService) {
		this.faturamentoNormalService = faturamentoNormalService;
	}

	public void setDataVencimentoService(DataVencimentoService dataVencimentoService) {
		this.dataVencimentoService = dataVencimentoService;
	}

	public void setFaturaService(FaturaService faturaService) {
		this.faturaService = faturaService;
	}
	
}
