package com.mercurio.lms.contasreceber.action;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.report.ReportActionSupport;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.contasreceber.model.param.FaturaLookupParam;
import com.mercurio.lms.contasreceber.model.service.FaturaService;
import com.mercurio.lms.contasreceber.report.EmitirFaturasNacionaisService;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.AliasToNestedMapResultTransformer;
import com.mercurio.lms.vendas.model.service.ClienteService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contasreceber.reemitirFaturasNacionaisAction"
 */

public class ReemitirFaturasNacionaisAction extends ReportActionSupport {

	/**
     * @param faturaService The faturaService to set.
     */
	private FaturaService faturaService;
	public void setFaturaService(FaturaService faturaService) {
		this.faturaService = faturaService;
	}

	/**
     * @param clienteService The clienteService to set.
     */
	private ClienteService clienteService;
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}
	
	/**
     * @param filialService The filialService to set.
     */
	private FilialService filialService;
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public void setEmitirFaturasNacionaisService(EmitirFaturasNacionaisService emitirFaturasNacionaisService) {
		this.reportServiceSupport = emitirFaturasNacionaisService;
	}

	@Override
	public java.io.File execute(TypedFlatMap parameters) throws Exception {
		
		/* Manipula parameters p/ funcionamento do mesmo relatório de faturas nacionais */
		
		parameters.put("reemitir", Boolean.TRUE);
		
		return super.execute(parameters);
	}

	public List findFaturaByFilialCliente(TypedFlatMap map){
		Map criteria = new HashMap();
		criteria.put("nrFatura", map.getLong("nrFatura"));
		criteria.put("cliente.idCliente", map.getLong("cliente.idCliente"));
		criteria.put("filialByIdFilial.idFilial", map.getLong("filialByIdFilial.idFilial"));
		return faturaService.findLookup(criteria);
	}
	
	/**
     * Busca os Clientes para a lookup de clientes de acordo com os critérios
     * @param map Critérios de pesquisa
     * @return Lista de clientes
     */
    public List findLookupClientes(Map map){
        return this.clienteService.findLookup(map);
    }
    
    /**
     * Busca a filial de acordo a sigla passada digitada na lookup
     * @param criteria
     * @return List
     */
    public List findLookupFilial(TypedFlatMap criteria){
        return filialService.findLookupBySgFilial(criteria.getString("sgFilial"), criteria.getString("tpAcesso"));
    } 
    
    /**
     * Busca a fatura de acordo com os parametros da lookup
     * 
     * @param criteria
     * @return List
     */
    public List findLookupFatura(TypedFlatMap criteria){
    	return AliasToNestedMapResultTransformer.getInstance().transformListResult(faturaService.findLookupFatura(this.mountFaturaLookupParam(criteria), "LMS-36217"));
    }
    
    /**
	 * Monta o objeto FaturaLookupParam
	 *
	 * @author Hector Julian Esnaola Junior
	 * @since 28/11/2006
	 *
	 * @param criteria
	 * @return
	 *
	 */
	private FaturaLookupParam mountFaturaLookupParam(TypedFlatMap criteria){
		
		FaturaLookupParam faturaLookupParam = new FaturaLookupParam();
		
		/** Seta os atributos da FaturaLookupParam */
		
		faturaLookupParam.setIdFilialFaturamentoFatura(criteria.getLong("filialByIdFilial.idFilial"));
		faturaLookupParam.setNrFatura(criteria.getLong("nrFatura"));
		faturaLookupParam.setTpSituacaoFaturaValido(criteria.getInteger("tpSituacaoFaturaValido"));
		
		return faturaLookupParam;
	}
	
}