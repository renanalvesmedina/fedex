package com.mercurio.lms.contasreceber.action;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.report.ReportActionSupport;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.contasreceber.model.LoteCheque;
import com.mercurio.lms.contasreceber.model.service.LoteChequeService;
import com.mercurio.lms.contasreceber.model.service.RedecoService;
import com.mercurio.lms.contasreceber.report.EmitirChequesPreDatadosTransferenciaMatrizService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contasreceber.emitirChequesPreDatadosTransferenciaMatrizAction"
 */

public class EmitirChequesPreDatadosTransferenciaMatrizAction extends ReportActionSupport {

	
	private FilialService filialService;
	
	private RedecoService redecoService;
	
	private LoteChequeService loteChequeService;
	
	
	public void setEmitirChequesPreDatadosTransferenciaMatrizService(EmitirChequesPreDatadosTransferenciaMatrizService emitirChequesPreDatadosTransferenciaMatrizService) {
		this.reportServiceSupport = emitirChequesPreDatadosTransferenciaMatrizService;
	}	
	
	
	/**Retorna apenas os dados necessários para  a lookup 
	 * 
	 * @author Diego Umpierre
	 * @since 21/08/2006
	 * 
	 * @param criteria
	 * @return List com os loteCheque
	 */
    public List findLookupLoteCheque(TypedFlatMap criteria) {
    	List lotes =  loteChequeService.findLookup(criteria);    	
	
    	List retorno = new ArrayList();
		
		for (Iterator iter = lotes.iterator(); iter.hasNext();) {
				
			LoteCheque element = (LoteCheque) iter.next();
				
			TypedFlatMap map = new TypedFlatMap();
			map.put("idLoteCheque",element.getIdLoteCheque());
			map.put("nrLoteCheque",element.getNrLoteCheque());
			retorno.add(map);
			
		}
		return retorno;
	}
	
	
	
	/**Busca os dados da Filial
	 * 
	 * @author Diego Umpierre
	 * @since 22/08/2006
	 * 
	 * @param map
	 * @return List com as filiais
	 */
	public List findFilial(Map map){
    	List filiais =  filialService.findLookup(map);  	
	
    	List retorno = new ArrayList();
		
		for (Iterator iter = filiais.iterator(); iter.hasNext();) {
				
			Filial element = (Filial) iter.next();
				
			TypedFlatMap tfm = new TypedFlatMap();
			tfm.put("filial.idFilial",element.getIdFilial());
			tfm.put("filial.sgFilial",element.getSgFilial());
			if ( element.getPessoa() != null ){
				tfm.put("pessoa.nmFantasia",element.getPessoa().getNmFantasia());
			}
			
			retorno.add(tfm);
			
		}
		return retorno;
		
		
		
		
		
	}
	
	/**Busca os dados do redeco 
	 * 
	 * @author Diego Umpierre
	 * @since 22/08/2006
	 * 
	 * @param criteria
	 * @return List com os redecos
	 */
    public List findRedeco(TypedFlatMap criteria) {
    	return redecoService.findRedeco(criteria);
    }	

	
	
	
	
	
	
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}


	public void setLoteChequeService(LoteChequeService loteChequeService) {
		this.loteChequeService = loteChequeService;
	}


	public void setRedecoService(RedecoService redecoService) {
		this.redecoService = redecoService;
	}
	
	
	
	
	
	
	
	
}
