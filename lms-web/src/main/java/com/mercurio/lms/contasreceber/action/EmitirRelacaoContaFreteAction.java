package com.mercurio.lms.contasreceber.action;

import java.util.ArrayList;

import java.util.Iterator;
import java.util.List;
import java.util.Map;


import com.mercurio.adsm.framework.report.ReportActionSupport;
import com.mercurio.adsm.framework.session.SessionContext;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.Moeda;

import com.mercurio.lms.contasreceber.model.Fatura;
import com.mercurio.lms.contasreceber.model.service.FaturaService;
import com.mercurio.lms.contasreceber.report.EmitirRelacaoContaFreteService;
import com.mercurio.lms.municipios.model.Pais;
import com.mercurio.lms.municipios.model.service.FilialService;

import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.session.SessionKey;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contasreceber.emitirRelacaoContaFreteAction"
 */

public class EmitirRelacaoContaFreteAction extends ReportActionSupport {
	
	private FaturaService faturaService;
	
	private FilialService filialService;
	
	private ConfiguracoesFacade configuracoesFacade; 
	
	public void setEmitirRelacaoContaFreteService(EmitirRelacaoContaFreteService emitirRelacaoContaFreteService) {
		this.reportServiceSupport = emitirRelacaoContaFreteService;
	}
	
	public TypedFlatMap findMoedaUsuarioLogado(TypedFlatMap tfm){
		TypedFlatMap ret = new TypedFlatMap();
		
		Moeda moedaUsuarioLogado = SessionUtils.getMoedaSessao();
		
		ret.put("moeda.idMoeda",moedaUsuarioLogado.getIdMoeda());
		ret.put("moeda.siglaSimbolo",moedaUsuarioLogado.getSiglaSimbolo());
		
		return ret;
	}
	
	public List findFaturaByFilial(TypedFlatMap map){
		Long nrFatura = map.getLong("nrFatura");
		Long idFilial = map.getLong("filialByIdFilial.idFilial");		
		
		List result = this.getFaturaService().findByNrFaturaByFilial(nrFatura, idFilial);
		TypedFlatMap nova = null;
		List novaLista = new ArrayList();
		
		for (Iterator iter = result.iterator(); iter.hasNext();) {
			
			Fatura element = (Fatura) iter.next();
			nova = new TypedFlatMap();

			nova.put("idFatura",element.getIdFatura());
			nova.put("nrFatura",FormatUtils.completaDados(element.getNrFatura(), "0", 10, 0, true));
			
			nova.put("filialByIdFilial.idFilial",element.getFilialByIdFilial().getIdFilial());
			nova.put("filialByIdFilial.sgFilial",element.getFilialByIdFilial().getSgFilial());
			nova.put("filialByIdFilial.pessoa.nmFantasia",element.getFilialByIdFilial().getPessoa().getNmFantasia() );
			
			novaLista.add(nova);
		}
		
		return novaLista;
	}

	public List findMoedaPaisCombo() {
		Pais p = (Pais)SessionContext.get(SessionKey.PAIS_KEY);
		return this.getConfiguracoesFacade().getMoeda(p.getIdPais(),Boolean.TRUE);
	}
	
	public List findFilial(Map map){
		return this.getFilialService().findLookup(map);
	}

	public FaturaService getFaturaService() {
		return faturaService;
	}

	public void setFaturaService(FaturaService faturaService) {
		this.faturaService = faturaService;
	}

	public FilialService getFilialService() {
		return filialService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public ConfiguracoesFacade getConfiguracoesFacade() {
		return configuracoesFacade;
	}

	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}	

}
