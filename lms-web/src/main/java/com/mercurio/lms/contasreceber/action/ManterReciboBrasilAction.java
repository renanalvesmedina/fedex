package com.mercurio.lms.contasreceber.action;

import java.io.Serializable;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.Collator;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.springframework.context.i18n.LocaleContextHolder;

import com.mercurio.adsm.core.util.ReflectionUtils;
import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.FindDefinition;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.masterdetail.ItemList;
import com.mercurio.adsm.framework.model.masterdetail.ItemListConfig;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailAction;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailFactory;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailKey;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntry;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntryConfig;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.contasreceber.model.Desconto;
import com.mercurio.lms.contasreceber.model.DevedorDocServFat;
import com.mercurio.lms.contasreceber.model.Fatura;
import com.mercurio.lms.contasreceber.model.FaturaRecibo;
import com.mercurio.lms.contasreceber.model.ItemFatura;
import com.mercurio.lms.contasreceber.model.Recibo;
import com.mercurio.lms.contasreceber.model.param.DevedorDocServFatLookupParam;
import com.mercurio.lms.contasreceber.model.param.ReciboParam;
import com.mercurio.lms.contasreceber.model.service.DescontoService;
import com.mercurio.lms.contasreceber.model.service.DevedorDocServFatLookUpService;
import com.mercurio.lms.contasreceber.model.service.DevedorDocServFatService;
import com.mercurio.lms.contasreceber.model.service.FaturaService;
import com.mercurio.lms.contasreceber.model.service.ReciboService;
import com.mercurio.lms.expedicao.model.service.DoctoServicoService;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.CompareUtils;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contasreceber.manterReciboBrasilAction"
 */

public class ManterReciboBrasilAction extends MasterDetailAction {
	
	private DevedorDocServFatLookUpService devedorDocServFatLookUpService;
	
	private FaturaService faturaService;
	
	private DoctoServicoService doctoServicoService;
	private DomainValueService domainValueService;
	
	private DevedorDocServFatService devedorDocServFatService;
	
	private DescontoService descontoService;
	
	private FilialService filialService;
	
	public TypedFlatMap validateMonitoramentoEletronicoAutorizado(TypedFlatMap map) {
		Long idDoctoServico  = map.getLong("data.idDoctoServico");
		if (idDoctoServico != null) {
			doctoServicoService.validateDoctoServicoComMonitoramentoEletronicoAutorizado(idDoctoServico);
		}
		return map;
	}
	
	@SuppressWarnings("rawtypes")
	public Map findFilialCliente(){
		TypedFlatMap retorno = new TypedFlatMap();
		
		retorno.put("filialByIdFilialEmissora.idFilial", SessionUtils.getFilialSessao().getIdFilial());
		retorno.put("filialByIdFilialEmissora.sgFilial", SessionUtils.getFilialSessao().getSgFilial());
		retorno.put("filialByIdFilialEmissora.pessoa.nmFantasia", SessionUtils.getFilialSessao().getPessoa().getNmFantasia());
		
		return retorno;
	}
	
	public Map findDataAtual(){
		TypedFlatMap retorno = new TypedFlatMap();
		
		retorno.put("dtEmissao", JTDateTimeUtils.getDataAtual());
		
		return retorno;
	}	
	
	public Map findDadosFaturaRecibo(TypedFlatMap map){
		TypedFlatMap mapRetorno = new TypedFlatMap();
		BigDecimal vlDevido = new BigDecimal("0");
		BigDecimal vlDesconto = new BigDecimal("0");
		BigDecimal vlJuros = new BigDecimal("0");
		
		if (map.getString("tpDocumento").equals("FAT")){
			Fatura fatura = faturaService.findById(map.getLong("idDocumento"));
			
			vlDevido = fatura.getVlTotal();
			vlDesconto = fatura.getVlDesconto();
			vlJuros = fatura.getVlJuroCalculado();
			
			mapRetorno.put("vlDocumento",vlDevido);
			mapRetorno.put("vlDesconto",vlDesconto);
			mapRetorno.put("vlJuros",vlJuros);
			mapRetorno.put("vlJuroRecebido",vlJuros);
			mapRetorno.put("vlCobrado",vlDevido.subtract(vlDesconto).add(vlJuros));			
		} else {
			DevedorDocServFat devedorDocServFat = devedorDocServFatService.findById(map.getLong("idDocumento"));
			vlDevido = devedorDocServFat.getVlDevido();

			if (devedorDocServFat.getDescontos() != null && !devedorDocServFat.getDescontos().isEmpty()) {
				vlDesconto = ((Desconto)devedorDocServFat.getDescontos().get(0)).getVlDesconto();
			}
			
			mapRetorno.put("vlDocumento",vlDevido);
			mapRetorno.put("vlDesconto",vlDesconto);
			mapRetorno.put("vlJuros",vlJuros);	
			mapRetorno.put("vlJuroRecebido",vlJuros);
			mapRetorno.put("vlCobrado",vlDevido.subtract(vlDesconto));			
		}
		
		return mapRetorno;
	}
	
	public Map findSomatorios(Long idRecibo){
		Map map = new HashMap();

		MasterEntry entry = getMasterFromSession(idRecibo, true);			
		ItemList items = getItemsFromSession(entry, "faturaRecibo");
		ItemListConfig config = getMasterConfig().getItemListConfig("faturaRecibo");
		
		BigDecimal vlTotalCobrado = new BigDecimal("0.00");

		vlTotalCobrado = vlTotalCobrado.setScale(2, RoundingMode.HALF_UP);

		for (Iterator iter = items.iterator(idRecibo, config); iter.hasNext();) {
			FaturaRecibo faturaRecibo = (FaturaRecibo)iter.next();
			if (faturaRecibo.getFatura().getIdFatura() != null){
				vlTotalCobrado = vlTotalCobrado.add(faturaRecibo.getFatura().getVlTotal().subtract(faturaRecibo.getFatura().getVlDesconto()));	
			} else {				
				vlTotalCobrado = vlTotalCobrado.add(((ItemFatura)faturaRecibo.getFatura().getItemFaturas().get(0)).getDevedorDocServFat().getVlDevido());
				
				if (((ItemFatura)faturaRecibo.getFatura().getItemFaturas().get(0)).getDevedorDocServFat().getDescontos().get(0) != null){
					vlTotalCobrado = vlTotalCobrado.subtract(((Desconto)((ItemFatura)faturaRecibo.getFatura().getItemFaturas().get(0)).getDevedorDocServFat().getDescontos().get(0)).getVlDesconto());
				}
			}
			vlTotalCobrado = vlTotalCobrado.add(faturaRecibo.getVlJuroRecebido());
		}
		
		map.put("qtDocumentos", Integer.valueOf(items.size()));
		map.put("vlTotalCobrado",vlTotalCobrado);

		return map;
	}	
	
	public ResultSetPage findPaginatedTela(TypedFlatMap map){		
		ReciboParam reciboParam = mountReciboParam(map);
		
		List lstRetorno = new ArrayList();
		
		FindDefinition findDef = FindDefinition.createFindDefinition(map);
		
		ResultSetPage rsp = getReciboService().findPaginated(reciboParam, findDef);
		
		List lstRecibo = rsp.getList();
		
		for (Iterator iter = lstRecibo.iterator(); iter.hasNext();) {
			Recibo recibo = (Recibo)iter.next();
			TypedFlatMap mapRetorno = new TypedFlatMap();
			
			mapRetorno.put("idRecibo", recibo.getIdRecibo());
			mapRetorno.put("filialByIdFilialEmissora.sgFilial", recibo.getFilialByIdFilialEmissora().getSgFilial());
			mapRetorno.put("nrRecibo", recibo.getNrRecibo());
			mapRetorno.put("dtEmissao", recibo.getDtEmissao());
			mapRetorno.put("tpSituacaoRecibo", recibo.getTpSituacaoRecibo());
			mapRetorno.put("tpSituacaoAprovacao", recibo.getTpSituacaoAprovacao());
			mapRetorno.put("vlTotalRecibo", recibo.getVlTotalRecibo());
			
			lstRetorno.add(mapRetorno);
		}
		
		rsp.setList(lstRetorno);
		
		return rsp;
	}
	
	public Integer getRowCountTela(TypedFlatMap map) {
		ReciboParam reciboParam = mountReciboParam(map);
		
		return getReciboService().getRowCount(reciboParam);
	}
	
	private ReciboParam mountReciboParam(Map map){
		TypedFlatMap tmap = new TypedFlatMap();
		
		tmap.putAll(map);
		
		ReciboParam reciboParam = new ReciboParam();
		
		reciboParam.setNrRecibo(tmap.getLong("nrRecibo"));
		reciboParam.setDtEmissaoInicial(tmap.getYearMonthDay("dtEmissaoInicial"));
		reciboParam.setDtEmissaoFinal(tmap.getYearMonthDay("dtEmissaoFinal"));
		reciboParam.setIdFilial(tmap.getLong("filialByIdFilialEmissora.idFilial"));
		reciboParam.setTpSituacaoRecibo(tmap.getString("tpSituacaoRecibo"));
		reciboParam.setTpSituacaoAprovacao(tmap.getString("tpSituacaoAprovacao"));
		return reciboParam;
	}
	
	public Serializable findById(Long id) {
		TypedFlatMap map = new TypedFlatMap();
		
		Object masterObj = getReciboService().findById(id);
		putMasterInSession(masterObj);
		
		Recibo recibo = (Recibo)masterObj;		
		
		map.put("idRecibo", recibo.getIdRecibo());
		map.put("filialByIdFilialEmissora.idFilial", recibo.getFilialByIdFilialEmissora().getIdFilial());
		map.put("filialByIdFilialEmissora.sgFilial", recibo.getFilialByIdFilialEmissora().getSgFilial());
		map.put("filialByIdFilialEmissora.pessoa.nmFantasia", recibo.getFilialByIdFilialEmissora().getPessoa().getNmFantasia());
		map.put("nrRecibo", recibo.getNrRecibo());
		map.put("dtEmissao", recibo.getDtEmissao());
		map.put("tpSituacaoRecibo", recibo.getTpSituacaoRecibo().getValue());
		
		if (recibo.getTpSituacaoAprovacao() != null) {
			map.put("tpSituacaoAprovacao", recibo.getTpSituacaoAprovacao().getValue());
		}
		
		map.put("vlTotalRecibo", recibo.getVlTotalRecibo());
		map.put("vlTotalJuros", recibo.getVlTotalJuros());
		map.put("vlTotalJuroRecebido", (BigDecimal)getReciboService().findSomatorio(recibo.getIdRecibo()).get("vlJuroRecebido"));
		map.put("vlTotalDocumentos", recibo.getVlTotalDocumentos());
		map.put("vlTotalDesconto", recibo.getVlTotalDesconto());
		map.put("obRecibo", recibo.getObRecibo());
		
		if (recibo.getPendencia() != null){
			map.put("pendencia.idPendencia", recibo.getPendencia().getIdPendencia());	
		}

		return map;
	}
	
	/**
	 * Método que salva as alterações feitas no mestre e nos detalhes
	 * 
	 * author Mickaël Jalbert
	 * 31/01/2006
	 * 
	 * @param tipoRegistroComplementoTela
	 * @return id gerado para o mestre
	 */
	public Serializable store(TypedFlatMap map) {
		
		MasterEntry entry = getMasterFromSession(map.getLong("idRecibo"), true);		
		ItemList items = getItemsFromSession(entry, "faturaRecibo");		

		Recibo recibo = mountRecibo((Recibo) entry.getMaster(), map);	
		
		recibo = (Recibo)getReciboService().store(recibo, items);
		
		items.resetItemsState(); 
    	updateMasterInSession(entry);
		return recibo;
	}	
	
	private Recibo mountRecibo(Recibo recibo, TypedFlatMap map){
		recibo.setFilialByIdFilialEmissora(filialService.findById(map.getLong("filialByIdFilialEmissora.idFilial")));
		recibo.setNrRecibo(map.getLong("nrRecibo"));
		recibo.setDtEmissao(map.getYearMonthDay("dtEmissao"));
		recibo.setTpSituacaoRecibo(map.getDomainValue("tpSituacaoRecibo"));
		recibo.setTpSituacaoAprovacao(map.getDomainValue("tpSituacaoAprovacao"));
		recibo.setObRecibo(map.getString("obRecibo"));
		return recibo;
	}
	
	/**
	 * Cancela o recibo
	 * author Mickaël Jalbert
	 * 10/05/2006
	 * @param id
	 */
	public Serializable cancelRecibo(TypedFlatMap map) {
		MasterEntry entry = getMasterFromSession(map.getLong("idRecibo"), true);				

		Recibo recibo = mountRecibo((Recibo) entry.getMaster(), map);	
		
		recibo = getReciboService().cancelRecibo(recibo);
		
		return recibo;
	}	
	
    public void removeById(Long idRecibo) {
        getReciboService().removeById(idRecibo);
    }	
	
	/**
	 * Apaga várias entidades através do Id.
	 *
	 * @param ids lista com as entidades que deverão ser removida.
	 *
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
        getReciboService().removeByIds(ids);
    }
	
	
	/*
	 * 
	 * 
	 * 
	 * CÓDIGO DF2
	 * 
	 * 
	 * 
	 * */
	
	/***
	 * Remove uma lista de item fatura.
	 * 
	 * author Mickaël Jalbert
	 * 02/05/2006
	 * @param List ids
	 * 
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIdsFaturaRecibo(List ids) {
		
		super.removeItemByIds(ids, "faturaRecibo");
	}	
	
	
	/**
	 * Salva um registro detalhe/filho na sessão.
	 * author Mickaël Jalbert
	 * 04/05/2006
	 * @param parameters Parametros utilizado para montar o detalhe
	 * @return id do detalhe (temporário no caso de inserção)
	 */
	public Serializable storeFaturaRecibo(TypedFlatMap map) {
		return saveItemInstance(map, "faturaRecibo");
	}

	protected MasterEntryConfig createMasterConfig(MasterDetailFactory masterFactory) {
		
		MasterEntryConfig config = masterFactory.createMasterEntryConfig(Recibo.class);
		
		// Comparador para realizar a ordenação dos items filhos de acordo com a regra de negócio.
		Comparator descComparator = new Comparator() {
			
			public int compare(Object o1, Object o2) {
				Collator collator = Collator.getInstance(LocaleContextHolder.getLocale());
				
				if ((o1 instanceof Comparable) && (o2 instanceof Comparable)) {
					return ((Comparable)o1).compareTo(o2);
				} else {
					FaturaRecibo d1 = (FaturaRecibo) o1;
					FaturaRecibo d2 = (FaturaRecibo) o2;
					
					String str1 = "";
					String str2 = "";					
					
					if (d1.getFatura().getNrFatura() != null){
						str1 = d1.getFatura().getNrFatura().toString();
					} else {
						str1 = ((ItemFatura)d1.getFatura().getItemFaturas().get(0)).getDevedorDocServFat().getDoctoServico().getNrDoctoServico().toString();
					}
					
					if (d2.getFatura().getNrFatura() != null){
						str2 = d2.getFatura().getNrFatura().toString();
					} else {
						str2 = ((ItemFatura)d2.getFatura().getItemFaturas().get(0)).getDevedorDocServFat().getDoctoServico().getNrDoctoServico().toString();
					}					
					
					return collator.compare(str1, str2);
				}
			}
			
		};
		
		
		// Esta instancia será responsavel por carregar os items filhos na sessão a partir do banco de dados.
		ItemListConfig itemInit = new ItemListConfig() {
			
			//Chamado para carregar os filhos na sessão
			public List initialize(Long masterId) {
				if (masterId == null) {
					return Collections.EMPTY_LIST;
				}
				return getReciboService().findFaturaRecibo(masterId);
			}

			public Integer getRowCount(Long masterId) {
				return getReciboService().getRowCountFaturaRecibo(masterId);
			}

			public void modifyItemValues(Object newBean, Object bean) {
				Set ignore = new HashSet(2);
				ignore.add("idFaturaRecibo");
				ignore.add("versao");
				ReflectionUtils.syncObjectProperties(bean, newBean, ignore);
			}

			public Map configItemDomainProperties() {
				Map props = new HashMap(1);
				return props;
			}

			public Object populateNewItemInstance(Map parameters, Object bean) {
				
				TypedFlatMap map = new TypedFlatMap();
				map.putAll(parameters);
				FaturaRecibo faturaRecibo = (FaturaRecibo)bean;
				faturaRecibo = mountFaturaRecibo(map, faturaRecibo);

	    		Long masterId = getMasterId(parameters);
	    		
	    		Long idCliente = null;
	    		
				ItemList items = getItemsFromSession(getMasterFromSession(masterId, true), "faturaRecibo");				
		    	
				ItemListConfig config = getMasterConfig().getItemListConfig("faturaRecibo");
				
				boolean blValidarFilho = false;
				
				for (Iterator iter = items.iterator(masterId, config); iter.hasNext();) {
					FaturaRecibo faturaReciboOld = (FaturaRecibo) iter.next();					
					
					if (faturaReciboOld.getFatura().getIdFatura() != null){
						idCliente = faturaReciboOld.getFatura().getCliente().getIdCliente();
					} else {
						idCliente = ((ItemFatura)faturaReciboOld.getFatura().getItemFaturas().get(0)).getDevedorDocServFat().getCliente().getIdCliente();
					}

					//Verifica a unique key
					if (!CompareUtils.eqNull(faturaReciboOld.getIdFaturaRecibo(), faturaRecibo.getIdFaturaRecibo())) {
						if (faturaRecibo.getFatura().getIdFatura() != null && faturaReciboOld.getFatura().getIdFatura() != null){
							if (CompareUtils.eqNull(faturaRecibo.getFatura().getIdFatura(),faturaReciboOld.getFatura().getIdFatura())) {
								throw new BusinessException("uniqueConstraintViolated", new Object[] {"IdFatura"});
							}
						} else if (faturaRecibo.getFatura().getIdFatura() == null && faturaReciboOld.getFatura().getIdFatura() == null){
							if (CompareUtils.eqNull(((ItemFatura)faturaRecibo.getFatura().getItemFaturas().get(0)).getDevedorDocServFat().getIdDevedorDocServFat(), (((ItemFatura)faturaReciboOld.getFatura().getItemFaturas().get(0)).getDevedorDocServFat().getIdDevedorDocServFat()))) {
								throw new BusinessException("uniqueConstraintViolated", new Object[] {"IdDevedorDocServFat"});
							}
						}
					//Verificar se a fatura foi trocada ou o documento foi trocado
					} else {
						if (faturaRecibo.getFatura().getIdFatura() != null){
							if (!CompareUtils.eqNull(faturaRecibo.getFatura().getIdFatura(), faturaReciboOld.getFatura().getIdFatura())) {
								blValidarFilho = true;
							}
						} else if (faturaRecibo.getFatura().getIdFatura() == null){
							Long idDevedorDocServFat = ((ItemFatura)faturaRecibo.getFatura().getItemFaturas().get(0)).getDevedorDocServFat().getIdDevedorDocServFat();
							if (faturaReciboOld.getFatura() == null) {
								Long idDevedorDocServFatOld = ((ItemFatura)faturaReciboOld.getFatura().getItemFaturas().get(0)).getDevedorDocServFat().getIdDevedorDocServFat();
								
								if (!CompareUtils.eqNull(idDevedorDocServFat, idDevedorDocServFatOld)){
									blValidarFilho = true;
								}
							} else {
								blValidarFilho = true;
							}
						}
					}
				}
						
				// Valida a situação do desconto do documento informado.
				getReciboService().validateDescontoDocumento(  
						map.getString("documento.tpDocumento"), 
						map.getLong("documento.idDocumento"));
				
				if (faturaRecibo.getIdFaturaRecibo() == null || blValidarFilho == true){
					
					if (faturaRecibo.getFatura().getIdFatura() != null){
						getReciboService().validateFatura(faturaRecibo.getFatura(), idCliente);
					} else {
						getReciboService().validateDevedorDocServFat(((ItemFatura)faturaRecibo.getFatura().getItemFaturas().get(0)).getDevedorDocServFat(), idCliente);
					}
				}
				
				return faturaRecibo;
			}
			
		};		
		
		config.addItemConfig("faturaRecibo",FaturaRecibo.class, itemInit, descComparator);
		return config;
	}
	
	
	
	private FaturaRecibo mountFaturaRecibo(TypedFlatMap map, FaturaRecibo faturaRecibo){
		Fatura fatura = null;

		BigDecimal vlCobrado = null;
		
		//Se o documento é uma fatura buscar ela
		if (map.getString("documento.tpDocumento").equals("FAT")){ 			
			fatura = faturaService.findById(map.getLong("documento.idDocumento"));
			
			Long masterId = getMasterId(map);
			
			MasterEntry entry = getMasterFromSession(masterId, true);		

			Recibo recibo = (Recibo) entry.getMaster();
			
			//Não pode selecionar uma fatura que já está em recibo
			if (fatura.getRecibo() != null && ((recibo.getIdRecibo() != null && recibo.getIdRecibo().compareTo(fatura.getRecibo().getIdRecibo()) != 0) || recibo.getIdRecibo() == null)){
				throw new BusinessException("LMS-36237");
			}
			vlCobrado = fatura.getVlTotal().subtract(fatura.getVlDesconto());
		} else {
			//Se o devedor já tem uma fatura válida
			fatura = faturaService.findByDevedorDocServFat(map.getLong("documento.idDocumento"));

			if (fatura != null){
				vlCobrado = fatura.getVlTotal().subtract(fatura.getVlDesconto());
			} else { //Senão não tem gerar uma temporaria
				fatura = new Fatura();
				ItemFatura itemFatura = new ItemFatura();
				
				DevedorDocServFat devedorDocServFat = devedorDocServFatService.findById(map.getLong("documento.idDocumento"));

				Desconto desconto = descontoService.findByDevedorDocServFat(devedorDocServFat.getIdDevedorDocServFat());				
				
				List lstItens = new ArrayList();
				
				lstItens.add(desconto);
				
				devedorDocServFat.setDescontos(lstItens);
				
				itemFatura.setDevedorDocServFat(devedorDocServFat);
				
				lstItens = new ArrayList();
				
				lstItens.add(itemFatura);
				
				fatura.setItemFaturas(lstItens);
				
				//Se tem desconto, substrair o valor ao valor devido
				if (desconto != null) {
					vlCobrado = devedorDocServFat.getVlDevido().subtract(desconto.getVlDesconto());
				} else { //Senão o valor cobrado é o valor devido
					vlCobrado = devedorDocServFat.getVlDevido();
				}
			}
		}
		
		faturaRecibo.setIdFaturaRecibo(map.getLong("idFaturaRecibo"));
		
		faturaRecibo.setVlJuroRecebido(map.getBigDecimal("vlJuroRecebido"));
		
		faturaRecibo.setFatura(fatura);
		
		faturaRecibo.setVlCobrado(vlCobrado.add(faturaRecibo.getVlJuroRecebido()));

		return faturaRecibo;
	}
	
	public ResultSetPage findPaginatedFaturaRecibo(Map parameters) {

		ResultSetPage rsp = findPaginatedItemList(parameters, "faturaRecibo");			
		List list = rsp.getList();			
		List listRet = new ArrayList();			
		Map map = null;
		
		for (Iterator iter = list.iterator(); iter.hasNext();){
			FaturaRecibo faturaRecibo = (FaturaRecibo)iter.next();		

			map = new TypedFlatMap();
			if (faturaRecibo.getFatura().getIdFatura() != null){
				map.put("tpDocumento","FAT");
				map.put("nrDocumento",FormatUtils.fillNumberWithZero(faturaRecibo.getFatura().getNrFatura().toString(), 10));
				map.put("vlDocumento",faturaRecibo.getFatura().getVlTotal());
				
				map.put("sgFilial", faturaRecibo.getFatura().getFilialByIdFilial().getSgFilial());
				
				map.put("vlDesconto",faturaRecibo.getFatura().getVlDesconto());
				map.put("vlJuros",faturaRecibo.getFatura().getVlJuroCalculado());
				
				map.put("vlCobrado",faturaRecibo.getVlCobrado());
				map.put("vlJuroRecebido",faturaRecibo.getVlJuroRecebido());
				map.put("idFaturaRecibo",faturaRecibo.getIdFaturaRecibo());				
			} else {
				map.put("tpDocumento",((ItemFatura)faturaRecibo.getFatura().getItemFaturas().get(0)).getDevedorDocServFat().getDoctoServico().getTpDocumentoServico().getDescription());
				map.put("nrDocumento",FormatUtils.formataNrDocumento(((ItemFatura)faturaRecibo.getFatura().getItemFaturas().get(0)).getDevedorDocServFat().getDoctoServico().getNrDoctoServico().toString(), ((ItemFatura)faturaRecibo.getFatura().getItemFaturas().get(0)).getDevedorDocServFat().getDoctoServico().getTpDocumentoServico().getValue()));
				map.put("vlDocumento",((ItemFatura)faturaRecibo.getFatura().getItemFaturas().get(0)).getDevedorDocServFat().getDoctoServico().getVlTotalDocServico());
				
				map.put("sgFilial", ((ItemFatura)faturaRecibo.getFatura().getItemFaturas().get(0)).getDevedorDocServFat().getDoctoServico().getFilialByIdFilialOrigem().getSgFilial());
				
				if (((ItemFatura)faturaRecibo.getFatura().getItemFaturas().get(0)).getDevedorDocServFat().getDescontos().get(0) != null) {
					map.put("vlDesconto",((Desconto)((ItemFatura)faturaRecibo.getFatura().getItemFaturas().get(0)).getDevedorDocServFat().getDescontos().get(0)).getVlDesconto());
				} else {
					map.put("vlDesconto",new BigDecimal("0"));					
				}
				map.put("vlJuros",new BigDecimal("0"));
				
				map.put("vlCobrado",faturaRecibo.getVlCobrado());
				map.put("vlJuroRecebido",faturaRecibo.getVlJuroRecebido());
				map.put("idFaturaRecibo",faturaRecibo.getIdFaturaRecibo());		
			}
		
			listRet.add(map);
			
			
			
			rsp.setList(listRet);
		}
		
		return rsp;
	}	
	
	public Integer getRowCountFaturaRecibo(Map parameters){
		return getRowCountItemList(parameters, "faturaRecibo");
	}
	
	public Map findByIdFaturaRecibo(MasterDetailKey key) {
		FaturaRecibo faturaRecibo = (FaturaRecibo)findItemById(key, "faturaRecibo");
		TypedFlatMap map = new TypedFlatMap();
		
		if (faturaRecibo.getFatura().getIdFatura() != null){
			map.put("idFaturaRecibo", faturaRecibo.getIdFaturaRecibo());
			map.put("documento.tpDocumento", "FAT");
			map.put("documento.filial.idFilial", faturaRecibo.getFatura().getFilialByIdFilial().getIdFilial());
			map.put("documento.filial.sgFilial", faturaRecibo.getFatura().getFilialByIdFilial().getSgFilial());
			map.put("documento.filial.pessoa.nmFantasia", faturaRecibo.getFatura().getFilialByIdFilial().getPessoa().getNmFantasia());
			map.put("documento.idDocumento", faturaRecibo.getFatura().getIdFatura());
			map.put("documento.nrDocumento", faturaRecibo.getFatura().getNrFatura());
			map.put("vlDocumento", faturaRecibo.getFatura().getVlTotal());
			map.put("vlDesconto", faturaRecibo.getFatura().getVlDesconto());
			map.put("vlJuros", faturaRecibo.getFatura().getVlJuroCalculado());
			map.put("vlCobrado", faturaRecibo.getVlCobrado());
			map.put("vlJuroRecebido",faturaRecibo.getVlJuroRecebido());
		} else {
			map.put("idFaturaRecibo", faturaRecibo.getIdFaturaRecibo());
			DevedorDocServFat devedorDocServFat = ((ItemFatura)faturaRecibo.getFatura().getItemFaturas().get(0)).getDevedorDocServFat();
			map.put("documento.tpDocumento", devedorDocServFat.getDoctoServico().getTpDocumentoServico().getValue());
			map.put("documento.filial.idFilial", devedorDocServFat.getFilial().getIdFilial());
			map.put("documento.filial.sgFilial", devedorDocServFat.getFilial().getSgFilial());
			map.put("documento.filial.pessoa.nmFantasia", devedorDocServFat.getFilial().getPessoa().getNmFantasia());
			map.put("documento.idDocumento", devedorDocServFat.getIdDevedorDocServFat());
			map.put("documento.nrDocumento", FormatUtils.formataNrDocumento(devedorDocServFat.getDoctoServico().getNrDoctoServico().toString(), devedorDocServFat.getDoctoServico().getTpDocumentoServico().getValue()));
			map.put("vlDocumento", devedorDocServFat.getDoctoServico().getVlTotalDocServico());			
			
			if (devedorDocServFat.getDoctoServico().getVlDesconto() == null) {
				map.put("vlDesconto", new BigDecimal("0"));	
			} else {
				map.put("vlDesconto", devedorDocServFat.getDoctoServico().getVlDesconto());
			}
			
			map.put("vlJuros", new BigDecimal("0"));
			map.put("vlCobrado", faturaRecibo.getVlCobrado());
			map.put("vlJuroRecebido",faturaRecibo.getVlJuroRecebido());
		}
		
		return map;
	}	
	
	
	
	
	/*
	 * 
	 * 
	 * 
	 * Find de combo e lookup + setters e getters
	 * 
	 * 
	 * 
	 * 
	 * */

	public List findFatura(TypedFlatMap map){
		Long idFilial = map.getLong("filialByIdFilial.idFilial");	
		Long nrDocumento = map.getLong("nrFatura");		

		List lstFatura = faturaService.findByNrFaturaByFilial(nrDocumento, idFilial);
		
		if (lstFatura.size() == 1){
			TypedFlatMap mapRetorno = new TypedFlatMap();
			Fatura fat = (Fatura)lstFatura.get(0);
			
			mapRetorno.put("idFatura", fat.getIdFatura());
			mapRetorno.put("idDocumento", fat.getIdFatura());
			mapRetorno.put("nrFatura", fat.getNrFatura());
			mapRetorno.put("filialByIdFilial.idFilial", fat.getFilialByIdFilial().getIdFilial());
			mapRetorno.put("filialByIdFilial.sgFilial", fat.getFilialByIdFilial().getSgFilial());
			mapRetorno.put("filialByIdFilial.pessoa.nmFantasia", fat.getFilialByIdFilial().getPessoa().getNmFantasia());
			
			List lstRetorno = new ArrayList();
			
			lstRetorno.add(mapRetorno);
			
			return lstRetorno;
			
		} else {
			return lstFatura;
		}
	}	
	
	public List findDevedorServDocFat(TypedFlatMap map){
		Long idFilial = map.getLong("doctoServico.filialByIdFilialOrigem.idFilial");	
		Long nrDocumento = map.getLong("doctoServico.nrDoctoServico");
		String tpDocumentoServico = map.getString("doctoServico.tpDocumentoServico");				

		DevedorDocServFatLookupParam devedorDocServFatLookupParam = new DevedorDocServFatLookupParam();
		
		devedorDocServFatLookupParam.setIdFilial(idFilial);
		devedorDocServFatLookupParam.setNrDocumentoServico(nrDocumento);
		devedorDocServFatLookupParam.setTpDocumentoServico(tpDocumentoServico);		
		
		List lstDevedor = this.devedorDocServFatLookUpService.findDevedorDocServFat(
				devedorDocServFatLookupParam);
		
		if (lstDevedor.size() == 1){
			TypedFlatMap mapRetorno = new TypedFlatMap();
			Map mapDevedor = (Map)lstDevedor.get(0);

			mapRetorno.put("idDocumento", mapDevedor.get("idDevedorDocServFat"));
			mapRetorno.put("idDevedorDocServFat", mapDevedor.get("idDevedorDocServFat"));
			mapRetorno.put("nrDoctoServico", mapDevedor.get("doctoServico_nrDoctoServico"));
			mapRetorno.put("idFilialOrigem", mapDevedor.get("idFilialOrigem"));
			mapRetorno.put("sgFilialOrigem", mapDevedor.get("sgFilialOrigem"));
			mapRetorno.put("idDoctoServico", mapDevedor.get("idDoctoServico"));
			
			List lstRetorno = new ArrayList();
			
			lstRetorno.add(mapRetorno);
			
			return lstRetorno;
			
		} else {
			return lstDevedor;
		}		
	}	
	
	public Map findDominioDocumento(){
		TypedFlatMap mapRetorno = new TypedFlatMap();
		
		List lstDominio = domainValueService.findDomainValues("DM_TIPO_DOCUMENTO_RECIBO");
		
		for (Iterator iter = lstDominio.iterator(); iter.hasNext();){
			DomainValue domainValue = (DomainValue)iter.next();
			mapRetorno.put(domainValue.getValue(), domainValue.getDescription());
		}
		
		return mapRetorno;
	}	

	
	public void setReciboService(ReciboService faturaService) {
		super.setMasterService(faturaService);
	}
	
	public ReciboService getReciboService() {
		return (ReciboService)super.getMasterService();
	}	

	public void setFaturaService(FaturaService faturaService) {
		this.faturaService = faturaService;
	}

	public void setDevedorDocServFatLookUpService(
			DevedorDocServFatLookUpService devedorDocServFatLookUpService) {
		this.devedorDocServFatLookUpService = devedorDocServFatLookUpService;
	}

	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}

	public void setDevedorDocServFatService(
			DevedorDocServFatService devedorDocServFatService) {
		this.devedorDocServFatService = devedorDocServFatService;
	}

	public void setDescontoService(DescontoService descontoService) {
		this.descontoService = descontoService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public void setDoctoServicoService(DoctoServicoService doctoServicoService) {
		this.doctoServicoService = doctoServicoService;
}
}

