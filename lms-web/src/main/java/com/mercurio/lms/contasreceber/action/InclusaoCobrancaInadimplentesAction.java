package com.mercurio.lms.contasreceber.action;

import java.io.Serializable;
import java.text.Collator;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.joda.time.YearMonthDay;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;

import com.mercurio.adsm.core.util.ReflectionUtils;
import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.masterdetail.ItemList;
import com.mercurio.adsm.framework.model.masterdetail.ItemListConfig;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailAction;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailFactory;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailKey;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntry;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntryConfig;
import com.mercurio.adsm.framework.session.SessionContext;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.configuracoes.model.UsuarioLMS;
import com.mercurio.lms.configuracoes.model.service.EnderecoPessoaService;
import com.mercurio.lms.configuracoes.model.service.UsuarioLMSService;
import com.mercurio.lms.configuracoes.model.service.UsuarioService;
import com.mercurio.lms.contasreceber.model.CobrancaInadimplencia;
import com.mercurio.lms.contasreceber.model.Fatura;
import com.mercurio.lms.contasreceber.model.ItemCobranca;
import com.mercurio.lms.contasreceber.model.MotivoInadimplencia;
import com.mercurio.lms.contasreceber.model.TratativaCobInadimplencia;
import com.mercurio.lms.contasreceber.model.param.FaturaLookupParam;
import com.mercurio.lms.contasreceber.model.service.CobrancaInadimplenciaService;
import com.mercurio.lms.contasreceber.model.service.FaturaService;
import com.mercurio.lms.contasreceber.model.service.ItemCobrancaService;
import com.mercurio.lms.contasreceber.model.service.MotivoInadimplenciaService;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.AliasToNestedMapResultTransformer;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.service.ClienteService;


/**
 * Generated by: ADSM ActionGenerator
 *  
 * N�o inserir documenta��o ap�s ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este servi�o.
 * @spring.bean id="lms.contasreceber.inclusaoCobrancaInadimplentesAction"
 */

public class InclusaoCobrancaInadimplentesAction extends MasterDetailAction {
	
	 /**
     * @param enderecoPessoaService The enderecoPessoaService to set.
     */
	private EnderecoPessoaService enderecoPessoaService;
	private MotivoInadimplenciaService motivoInadimplenciaService;
	private UsuarioLMSService usuarioLMSService;
	
	public void setUsuarioLMSService(UsuarioLMSService usuarioLMSService) {
		this.usuarioLMSService = usuarioLMSService;
	}

	public void setMotivoInadimplenciaService(
			MotivoInadimplenciaService motivoInadimplenciaService) {
		this.motivoInadimplenciaService = motivoInadimplenciaService;
	}

	public void setEnderecoPessoaService(EnderecoPessoaService enderecoPessoaService) {
		this.enderecoPessoaService = enderecoPessoaService;
	}
	
	/**
     * @param configuracoesFacade The configuracoesFacade to set.
     */
	private ConfiguracoesFacade configuracoesFacade;
	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}
	
	/**
     * @param enderecoPessoaService The enderecoPessoaService to set.
     */
	private ItemCobrancaService itemCobrancaService;
	public void setItemCobrancaServiceService(ItemCobrancaService itemCobrancaService) {
		this.itemCobrancaService = itemCobrancaService;
	}
	
	 /**
     * @param clienteService The clienteService to set.
     */
	private ClienteService clienteService;
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}

	/**
     * @param cobrancaInadimplenciaService The cobrancaInadimplenciaService to set.
     */
	public void setCobrancaInadimplenciaService(CobrancaInadimplenciaService cobrancaInadimplenciaService) {
		super.setMasterService(cobrancaInadimplenciaService);
	}
	
	public CobrancaInadimplenciaService getCobrancaInadimplenciaService() {
		return (CobrancaInadimplenciaService)super.getMasterService();
	}
	
	/**
     * @param filialService The filialService to set.
     */
	private FilialService filialService;
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	
	/**
     * @param faturaService The faturaService to set.
     */
	private FaturaService faturaService;
	public void setFaturaService(FaturaService faturaService){
		this.faturaService = faturaService;
	}
	
	private UsuarioService usuarioService;
	public void setUsuarioService(UsuarioService usuarioService){
		this.usuarioService = usuarioService;
	}
	
	public List findLookupUsuario(TypedFlatMap criteria){
		return usuarioService.findLookupByNrMatricula(criteria.getString("nrMatricula"));
	}
	
	/**
     * M�todo respons�vel por carregar dados p�ginados de acordo com os filtros passados
     * @param criteria
     * @return ResultSetPage contendo o resultado do hql.
     */
	public ResultSetPage findPaginatedByCobrancaInadimplencia(TypedFlatMap tfm) throws Exception{
		return getCobrancaInadimplenciaService().findPaginatedByCobrancaInadimplencia(tfm);
	}
	
	/**
     * M�todo respons�vel por fazer a contagem dos registros que retornam do hql para pagina��o.
     * @param criteria
     * @return Integer contendo o n�mero de registros retornados.
     */
    public Integer getRowCountByCobrancaInadimplencia(TypedFlatMap tfm) throws Exception{
    	return getCobrancaInadimplenciaService().getRowCountByCobrancaInadimplencia(tfm);
    }
	
    /**
	 * Insere, caso o id seja <code>null</code> ou atualiza uma entidade, caso contr�rio.
	 * @param bean entidade a ser armazenada.
	 * @return entidade que foi armazenada.
	 */
    public Serializable store(CobrancaInadimplencia bean) {
    	
    	/** Caso a filial das faturas da cobranca de inadimplencia n�o sejam iguais a filial da sess�o do usu�rio, lan�a uma exception */
    	getCobrancaInadimplenciaService().validateCobrancaInadimplencia(bean.getIdCobrancaInadimplencia());
    	
    	MasterEntry entry = getMasterFromSession(bean.getIdCobrancaInadimplencia(), true);
    	
    	ItemListConfig itemCobrancaConfig = getMasterConfig().getItemListConfig("itemCobranca");
    	ItemList itemsCobranca = getItemsFromSession(entry, "itemCobranca");
    	
//    	ItemListConfig tratativaCobInadimplenciaConfig = getMasterConfig().getItemListConfig("tratativaCobInadimplencia");
    	ItemList itemsTratativaCobInadimplencia = getItemsFromSession(entry, "tratativaCobInadimplencia");
    	
    	CobrancaInadimplencia cobrancaInadimplencia = (CobrancaInadimplencia) entry.getMaster();
    	
    	/** No insert � setado a flag para false */
    	if(cobrancaInadimplencia.getBlCobrancaEncerrada() == null){
    		cobrancaInadimplencia.setBlCobrancaEncerrada(Boolean.FALSE);
    	/** No update a flag � vlidada, caso seja true, � lan�ada a BusinessException  (REGRA 3.3) */
    	}else if(cobrancaInadimplencia.getBlCobrancaEncerrada().equals(Boolean.TRUE)){
			throw new BusinessException("LMS-36138");
		} 
    	
    	/**
    	 * Itera os item da sess�o para validar o cliente da fatura com o da cobrancaInadimplencia
    	 */
    	for (Iterator iter = itemsCobranca.iterator(cobrancaInadimplencia.getIdCobrancaInadimplencia(), itemCobrancaConfig); iter.hasNext();) {
			Fatura fatura = faturaService.findById(((ItemCobranca) iter.next()).getFatura().getIdFatura());
			
			
			/** Verifica se o cliente da fatura � pessoa f�sica ou jur�dica */
			if(fatura.getCliente().getPessoa().getTpIdentificacao().getValue().equals("CNPJ")){
				Cliente cliente = (Cliente)clienteService.findById(bean.getCliente().getIdCliente());
				/**
				 * Valida se o cliente da fatura � o mesmo da cobranca de inadimplencia.
				 * Caso n�o seja, lan�a uma BusinessException
				 */ 
				if(!fatura.getCliente().getPessoa().getNrIdentificacao().substring(0, 8)
						.equals(cliente.getPessoa().getNrIdentificacao().substring(0, 8))){
					throw new BusinessException("LMS-36140");
				}
			}else{
				/**
				 * Valida se o cliente da fatura � o mesmo da cobranca de inadimplencia.
				 * Caso n�o seja, lan�a uma BusinessException
				 */ 
				if(!fatura.getCliente().getIdCliente().equals(bean.getCliente().getIdCliente())){
					throw new BusinessException("LMS-36140");
				}
			}
		}
    	
		Set ignore = new HashSet(1);
		ignore.add("versao");
		ReflectionUtils.syncObjectProperties(cobrancaInadimplencia, bean, ignore);
		
		CobrancaInadimplencia cobrancaInadimplenciaStored = getCobrancaInadimplenciaService().store(cobrancaInadimplencia, itemsCobranca);
		 
		if ( itemsTratativaCobInadimplencia.hasItems() ){
			cobrancaInadimplenciaStored = getCobrancaInadimplenciaService().store(cobrancaInadimplencia, itemsTratativaCobInadimplencia);
		}
		itemsCobranca.resetItemsState(); 
		itemsTratativaCobInadimplencia.resetItemsState();
    	updateMasterInSession(entry);		
			
		return cobrancaInadimplenciaStored;
    }
    
    
    
    /**
     * Remove uma CobrancaInadimplencia pelo id passado mpor parametro
     * @param id
     */
    public void removeById(Long id) {
    	
    	/** Caso a filial das faturas da cobranca de inadimplencia n�o sejam iguais a filial da sess�o do usu�rio, lan�a uma exception */
    	getCobrancaInadimplenciaService().validateCobrancaInadimplencia(id);
    	
    	/** Faz o findById para verificar se a cobrancaInadimplencia pode ser exclu�da. */
    	CobrancaInadimplencia ci = getCobrancaInadimplenciaService().findByIdBasic(id);
    	
		/** Testa se a cobrancaInadimplencia pode ser exclu�da. (REGRA 3.3)*/
		if(ci.getBlCobrancaEncerrada().equals(Boolean.TRUE)){
			throw new BusinessException("LMS-36138");
		}
		
    	getCobrancaInadimplenciaService().removeById(id); 
    	newMaster();
	}
	
	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		
		/** Caso a filial das faturas da cobranca de inadimplencia n�o sejam iguais a filial da sess�o do usu�rio, lan�a uma exception */
    	getCobrancaInadimplenciaService().validateCobrancaInadimplencia(ids);
    	
		/** Itera todos ids, para fazer um findById e para verificar se estes, podem ser exclu�dos. */
		for (Iterator iter = ids.iterator(); iter.hasNext();) {
			Long id = (Long) iter.next();
			CobrancaInadimplencia ci = getCobrancaInadimplenciaService().findByIdBasic(id);
			/** Testa se a cobrancaInadimplencia pode ser exclu�da. (REGRA 2.2)*/
			if(ci.getBlCobrancaEncerrada().equals(Boolean.TRUE)){
				throw new BusinessException("LMS-36138");
			}
		}
		
		getCobrancaInadimplenciaService().removeByIds(ids);
	}
    
	/**
	 * Busca uma CobrancaInadimplencia de acordo com o id passado por parametro
	 * @param id
	 * @return Object
	 */
	public Object findById(java.lang.Long id) {
		Object masterObj = getCobrancaInadimplenciaService().findById(id);
		putMasterInSession(masterObj); 
		return masterObj;
	}	
	
    /**
     * Busca Cliente atrav�s da lookup de Cliente
     * @param criteria
     * @return List
     */
    public List findLookupCliente(TypedFlatMap  criteria){
		List l = clienteService.findClienteByNrIdentificacao(criteria.getString("pessoa.nrIdentificacao"));
		if(!l.isEmpty()) {
			Map cliente = (Map)l.get(0);
			Map pessoa = (Map)cliente.get("pessoa");
			String tpPessoa = (String)((Map)pessoa.remove("tpPessoa")).get("value");
			Long idCliente = (Long)cliente.get("idCliente");
			cliente.put("municipio", findMunicipioByIdPessoaTpPessoa(tpPessoa, idCliente));
		}
		return l;
	}
    
    /**
     * Busca municipios filtrando pelo id(idPessoa) e pelo tipo de pessoa(tpPessoa)
     * @param tpPessoa
     * @param idPessoa
     * @return Map
     */
    private Map findMunicipioByIdPessoaTpPessoa(String tpPessoa, Long idPessoa) {
		String tpEndereco = "COM";
		if("F".equalsIgnoreCase(tpPessoa))
			tpEndereco = "RES";
		return enderecoPessoaService.findMunicipioByIdPessoaTpEndereco(idPessoa, tpEndereco);
	}
    
    /**
     * Busca a filial de acordo a sigla passada digitada na lookup
     * @param criteria
     * @return List 
     */
    public List findLookupFilial(TypedFlatMap criteria){
        return filialService.findLookupBySgFilial(criteria.getString("sgFilial"), criteria.getString("tpAcesso"));
    }
     
    
    /**
	 * Monta o objeto FaturaLookupParam
	 *
	 * @author Hector Julian Esnaola Junior
	 * @since 28/11/2006
	 *
	 * @param criteria
	 * @return
	 *
	 */
	private FaturaLookupParam mountFaturaLookupParam(TypedFlatMap criteria){
		
		FaturaLookupParam faturaLookupParam = new FaturaLookupParam();
		
		/** Seta os atributos da FaturaLookupParam */
		
		faturaLookupParam.setIdFilialFaturamentoFatura(criteria.getLong("filialByIdFilial.idFilial"));
		faturaLookupParam.setNrFatura(criteria.getLong("nrFatura"));
		faturaLookupParam.setTpSituacaoFaturaValido(criteria.getInteger("tpSituacaoFaturaValido"));
		faturaLookupParam.setIdClienteFatura(criteria.getLong("cliente.idCliente"));
		
		return faturaLookupParam;
	}
	
   /**
    * Busca a(s) fatura(s) de acordo com os filtros
    *
    * @author Hector Julian Esnaola Junior
    * @since 28/11/2006
    *
    * @param criteria
    * @return
    *
    */
    public List findLookupFatura(TypedFlatMap criteria){
    	return AliasToNestedMapResultTransformer.getInstance().transformListResult(faturaService.findLookupFatura(this.mountFaturaLookupParam(criteria), "LMS-36111"));
    }
    
    /**
     * M�todo respons�vel por carregar dados p�ginados de acordo com os filtros passados
     * @param criteria
     * @return ResultSetPage contendo o resultado do hql.
     */
    public List findPaginatedByFatura(TypedFlatMap criteria){
    	return faturaService.findPaginatedByFatura(criteria);
    }
    
   /**
	 * 
	 *
	 */
    @ParametrizedAttribute(type = java.lang.Long.class)
	public void removeFaturasByIds(List ids){
		
		List<Long> idsCobrancaInadimplpencia = new ArrayList<Long>();
		for(Object id : ids){
			/** S� adiciona na List os itemCobranca que est�o no banco */
			if((Long)id > 0)
				idsCobrancaInadimplpencia.add(itemCobrancaService.findById((Long)id).getCobrancaInadimplencia().getIdCobrancaInadimplencia());
		}
		
		/** Caso a filial das faturas da cobranca de inadimplencia n�o sejam iguais a filial da sess�o do usu�rio, lan�a uma exception */
    	if(idsCobrancaInadimplpencia != null && !idsCobrancaInadimplpencia.isEmpty())
			getCobrancaInadimplenciaService().validateCobrancaInadimplencia(idsCobrancaInadimplpencia);
		
		/**
		 * Valida se o idItemCobranca � positivo para buscar a cobrancaInadimplencia e verificar se a mesma est� encerrada
		 */
		if(!ids.isEmpty() && ((Long)ids.get(0)).longValue() > 0){
			/** Busca a cobrancaInadimplencia de acordo com idItemCobranca */
			CobrancaInadimplencia ci = getCobrancaInadimplenciaService().findCobrancaInadimplenciaByIdItemCobranca((Long)ids.get(0));
			
			/** Testa se a cobrancaInadimplencia pode ser exclu�da. (REGRA 4.2)*/
			if(ci.getBlCobrancaEncerrada().equals(Boolean.TRUE)){
				throw new BusinessException("LMS-36138");
			}
		}

		super.removeItemByIds(ids, "itemCobranca");
	}
	
	/**
	 * M�todo respons�vel por buscar dados complementares referentes as faturas de uma cobranc�a inadimpl�ncia
	 * @param criteria
	 * @return List
	 */
	public Map findDadosFaturasByCobrancaInadimplencia(TypedFlatMap criteria){
		MasterEntry entry = getMasterFromSession(criteria.getLong("idCobrancaInadimplencia"), true);		
		ItemList items = getItemsFromSession(entry, "itemCobranca");
		ItemListConfig config = getMasterConfig().getItemListConfig("itemCobranca");
		return faturaService.findDadosFaturasByCobrancaInadimplencia(criteria, items, config);
	}
    
	/**
	 * Salva ItemCobranca na sess�o
	 *
	 * @author Hector Julian Esnaola Junior
	 * @since 05/12/2006
	 *
	 * @param parameters
	 * @return
	 *
	 */
	public Serializable saveFatura(TypedFlatMap parameters){
		MasterEntry entry = null;
		// se eh edicao
		if (parameters.getLong("idCobrancaInadimplencia") != null) {
			entry = getMasterFromSession(parameters.getLong("idCobrancaInadimplencia"), true);
		} else {
			// se eh adicao
			entry = getMasterFromSession(parameters.getLong("masterId"), true);
		}
		
		getCobrancaInadimplenciaService().validateFaturaByCobrancaInadimplencia(parameters);

    	ItemList items = getItemsFromSession(entry, "itemCobranca");
    	ItemListConfig config = getMasterConfig().getItemListConfig("itemCobranca");
    	
    	/** Valida as moedas das faturas */
    	getCobrancaInadimplenciaService().validateMoedaFatura(items, config, parameters.getLong("masterId"), parameters.getLong("fatura.idFatura"));
    	
    	return super.saveItemInstance(parameters, "itemCobranca");
	}
	
	public Serializable salvarTratativa(TypedFlatMap parameters){
		MasterEntry entry = getMasterFromSession(parameters.getLong("masterId"), true);	
    	ItemList items = entry.getItems("tratativaCobInadimplencia");

    	List<TratativaCobInadimplencia> tratativas = items.getItems();
    	
    	for(TratativaCobInadimplencia tratativa : tratativas) {
    		Long idTratativa = parameters.getLong("idTratativaCobInadimplencia");
    		
    		if (tratativa.getIdTratativaCobInadimplencia().equals(idTratativa)) {
    			Long idMotivoInadimplencia = parameters.getLong("blMotivoInadimplencia.idMotivoInadimplencia");
    			MotivoInadimplencia motivoInadimplencia = motivoInadimplenciaService.findMotivoInadimplenciaById(idMotivoInadimplencia);
    			
    			tratativa.setDsPlanoAcao(parameters.getString("dsPlanoAcao"));
    			tratativa.setMotivoInadimplencia(motivoInadimplencia);
    			tratativa.setDtPrevSolucao(parameters.getYearMonthDay("dtPrevistaSolucao"));
    			tratativa.setDsParecerMatriz(parameters.getString("dsParecerMatriz"));
    			tratativa.setDhTratativa(parameters.getDateTime("dtTratativa"));
    			
				items.addItem(tratativa, getMasterConfig().getItemListConfig("tratativaCobInadimplencia"));
    			
    			updateMasterInSession(entry);
    			return (Serializable) tratativa;
    		}
    	}

    	return super.saveItemInstance(parameters, "tratativaCobInadimplencia");
	}
	
	public Serializable saveFaturaBatch(TypedFlatMap parameters) {
    	List<String> idFaturas = (List<String>)parameters.getList("idFaturas");
    	Object itemBean = null;
    	
    	for (String id : idFaturas) {
    		TypedFlatMap faturaParameters = new TypedFlatMap();
    		faturaParameters = parameters;
    		parameters.put("fatura.idFatura", id);
    		
    		itemBean = saveFatura(faturaParameters);
    	}
		
		return (Serializable) itemBean;
	}
    
	public ResultSetPage findTratativaByIdTratativaCobInadimplencia(Map parameters) {
    	ResultSetPage rspTmp = findPaginatedItemList(parameters, "tratativaCobInadimplencia");
        return getCobrancaInadimplenciaService().findTrataticaByIdItemCobranca(parameters, rspTmp);
	}
	
    public ResultSetPage findFaturaByIdItemCobranca(Map parameters) {
    	ResultSetPage rspTmp = findPaginatedItemList(parameters, "itemCobranca");
        return getCobrancaInadimplenciaService().findFaturaByIdItemCobranca(parameters, rspTmp);
	}
	
	public Integer getRowCountFaturaByIdItemCobranca(Map parameters){
		return getRowCountItemList(parameters, "itemCobranca");
	}
	
	public Integer getRowCountFaturaByIdTratativaCobInadimplencia(Map parameters){
		return getRowCountItemList(parameters, "tratativaCobInadimplencia");
	}

	public Map findTratativaDetailByIdItemTratativaCobInadimplencia(MasterDetailKey key) {
		TratativaCobInadimplencia tratativa = (TratativaCobInadimplencia) findItemById(key, "tratativaCobInadimplencia");
		TypedFlatMap retorno = new TypedFlatMap();
		retorno.put("idTratativaCobInadimplencia", tratativa.getIdTratativaCobInadimplencia());
		retorno.put("dtTratativa", tratativa.getDhTratativa());
		Map usuarioMap = new HashMap();
		UsuarioLMS usuario = usuarioLMSService.findById(tratativa.getUsuario().getIdUsuario());
		usuarioMap.put("nrMatricula", usuario.getUsuarioADSM().getNrMatricula());
		usuarioMap.put("nmUsuario", usuario.getUsuarioADSM().getNmUsuario());
		usuarioMap.put("idUsuario", usuario.getIdUsuario());
		retorno.put("usuario", usuarioMap);
		MotivoInadimplencia motivo = motivoInadimplenciaService.findMotivoInadimplenciaById(tratativa.getMotivoInadimplencia().getIdMotivoInadimplencia());
		retorno.put("blMotivoInadimplencia.idMotivoInadimplencia", motivo.getIdMotivoInadimplencia());
		retorno.put("dsPlanoAcao", tratativa.getDsPlanoAcao());
		retorno.put("dtPrevistaSolucao", tratativa.getDtPrevSolucao());
		retorno.put("dsParecerMatriz", tratativa.getDsParecerMatriz());	

		return retorno;
	}

	public Map findByIdItemCobranca(MasterDetailKey key) {
		ItemCobranca ic = (ItemCobranca) findItemById(key, "itemCobranca");
	
		TypedFlatMap retorno = new TypedFlatMap();
		
		retorno.put("nrIdentificacaoCliente", FormatUtils.formatIdentificacao(ic.getFatura().getCliente().getPessoa().getTpIdentificacao(), ic.getFatura().getCliente().getPessoa().getNrIdentificacao()));
		retorno.put("idCliente", ic.getFatura().getCliente().getIdCliente());
		retorno.put("filialByIdFilial.pessoa.nmFantasia", ic.getFatura().getFilialByIdFilial().getPessoa().getNmFantasia());
		retorno.put("filialByIdFilial.idFilial", ic.getFatura().getFilialByIdFilial().getIdFilial());
		retorno.put("filialByIdFilial.sgFilial", ic.getFatura().getFilialByIdFilial().getSgFilial());
		retorno.put("fatura.nrFatura", ic.getFatura().getNrFatura());
		retorno.put("fatura.idFatura", ic.getFatura().getIdFatura());
		
		return retorno;
	}

	protected MasterEntryConfig createMasterConfig(MasterDetailFactory masterFactory) {
		
		MasterEntryConfig config = masterFactory.createMasterEntryConfig(CobrancaInadimplencia.class, true);
		
		
		//ItemCobranca
		Comparator descComparator = new Comparator() {

			public int compare(Object o1, Object o2) {
				Collator collator = Collator.getInstance(LocaleContextHolder.getLocale());
				
				if ((o1 instanceof Comparable) && (o2 instanceof Comparable)) {
					return ((Comparable)o1).compareTo(o2);
				} else {
					ItemCobranca ic1 = (ItemCobranca) o1;
					ItemCobranca ic2 = (ItemCobranca) o2;
					
					String f1 = ic1.getFatura().getNrFatura().toString();
					String f2 = ic2.getFatura().getNrFatura().toString();
					return collator.compare(f1, f2)	;
				}
			}
		
		};
		
		ItemListConfig itemInit = new ItemListConfig() {

            public List initialize(Long idPai) {
				return getCobrancaInadimplenciaService().findPaginatedByFatura(idPai);
			}

			public Integer getRowCount(Long idPai){
				return getCobrancaInadimplenciaService().getRowCountByFatura(idPai);
			}

			public void modifyItemValues(Object newBean, Object bean) {
				Set ignore = new HashSet(3, 1f);
				ignore.add("idItemCobranca");
				ignore.add("versao");
				ReflectionUtils.syncObjectProperties(bean, newBean, ignore);
			}

			public Object populateNewItemInstance(Map parameters, Object bean) {
				
				Long masterId = getMasterId(parameters);
				
				/** Caso a filial das faturas da cobranca de inadimplencia n�o sejam iguais a filial da sess�o do usu�rio, lan�a uma exception */
		    	getCobrancaInadimplenciaService().validateCobrancaInadimplencia(masterId);
		    	
				TypedFlatMap tfm = (TypedFlatMap)parameters;
				
				ItemCobranca itemCobranca = (ItemCobranca) bean;
				itemCobranca.setIdItemCobranca(tfm.getLong("idItemCobranca"));
				itemCobranca.setFatura(faturaService.findById(tfm.getLong("fatura.idFatura")));
				
				ItemList items = getItemsFromSession(getMasterFromSession(masterId, true), "itemCobranca");
				ItemListConfig config = getMasterConfig().getItemListConfig("itemCobranca");
				
				for (Iterator iter = items.iterator(masterId, config); iter.hasNext();) {
					ItemCobranca itemCobrancaSession = (ItemCobranca) iter.next();
					
					/** Caso alguma das faturas sejam iguais */
					if(itemCobrancaSession.getFatura().getIdFatura().equals(itemCobranca.getFatura().getIdFatura()))
						throw new BusinessException("uniqueConstraintViolated", new Object[] {"idFatura"});
					
				}
				
				return itemCobranca;
			}
            
		};
		config.addItemConfig("itemCobranca", ItemCobranca.class, itemInit, descComparator);
		//ItemCobranca
		
		//TratativaCobInadimplencia
		Comparator descComparatorTratativa = new Comparator() {

			public int compare(Object o1, Object o2) {
				Collator collator = Collator.getInstance(LocaleContextHolder.getLocale());
				
				if ((o1 instanceof Comparable) && (o2 instanceof Comparable)) {
					return ((Comparable)o1).compareTo(o2);
				} else {
					TratativaCobInadimplencia ic1 = (TratativaCobInadimplencia) o1;
					TratativaCobInadimplencia ic2 = (TratativaCobInadimplencia) o2;
					
					String f1 = ic1.getIdTratativaCobInadimplencia().toString();
					String f2 = ic2.getIdTratativaCobInadimplencia().toString();
					return collator.compare(f1, f2)	;
				}
			}
		
		};
		
		ItemListConfig itemInitTratativa = new ItemListConfig() {

            public List initialize(Long idPai) {
				return getCobrancaInadimplenciaService().findPaginatedByTratativa(idPai);
			}

			public Integer getRowCount(Long idPai){
				return getCobrancaInadimplenciaService().getRowCountByTratativa(idPai);
			}

			public void modifyItemValues(Object newBean, Object bean) {
				Set ignore = new HashSet(3, 1f);
				ignore.add("idTratativaCobInadimplencia");
				ReflectionUtils.syncObjectProperties(bean, newBean, ignore);
			}

			public Object populateNewItemInstance(Map parameters, Object bean) {
				Long masterId = getMasterId(parameters);
				
				/** Caso a filial das faturas da cobranca de inadimplencia n�o sejam iguais a filial da sess�o do usu�rio, lan�a uma exception */
		    	getCobrancaInadimplenciaService().validateCobrancaInadimplencia(masterId);
		    	
				TypedFlatMap tfm = (TypedFlatMap)parameters;
				TratativaCobInadimplencia tratativa = (TratativaCobInadimplencia) bean;
				
				Long motivoInadimplenciaId = tfm.getLong("blMotivoInadimplencia.idMotivoInadimplencia");
				tratativa.setMotivoInadimplencia(motivoInadimplenciaService.findMotivoInadimplenciaById(motivoInadimplenciaId));
				tratativa.setDhTratativa(DateTimeFormat.forPattern("YYYY-MM-dd HH:mm:ss").parseDateTime(tfm.getString("dtTratativa")));
				tratativa.setUsuario(usuarioLMSService.findById(SessionUtils.getUsuarioLogado().getIdUsuario()));
		    	tratativa.setDsPlanoAcao(tfm.getString("dsPlanoAcao"));
		    	tratativa.setDtPrevSolucao(new YearMonthDay(tfm.getString("dtPrevistaSolucao")));
		    	tratativa.setDsParecerMatriz(tfm.getString("dsParecerMatriz"));
				
				return tratativa;
			}
            
		};
		config.addItemConfig("tratativaCobInadimplencia", TratativaCobInadimplencia.class, itemInitTratativa, descComparatorTratativa);
		
		return config;
	}
    
    /**
     * Busca os dados necessarios(matricula e nome) para o usuarioByIdUsuarioSubstituido
     * @param idUsuario
     * @return List 
     */
    public Map getUsuarioSession(){
    	Usuario u = SessionContext.getUser();
    	
    	Map map = new HashMap();
    	
    	map.put("idUsuario", u.getIdUsuario());
    	map.put("nrMatricula", u.getNrMatricula());
    	map.put("nmUsuario", u.getNmUsuario());
    	
    	return map;
    }
    
    public List findComboMotivoInadimplencia(TypedFlatMap tfm) {
		List<TypedFlatMap> retorno = new ArrayList<TypedFlatMap>();
		List<MotivoInadimplencia> motivos = this.motivoInadimplenciaService.findMotivoInadimplenciaByTratativaId(0L); 
		
		for(MotivoInadimplencia m : motivos) {
			TypedFlatMap map = new TypedFlatMap();
			map.put("idMotivoInadimplencia", m.getIdMotivoInadimplencia());
			map.put("sgMotivo", m.getDescricao());
			retorno.add(map);
		}
		return retorno;
	}
    
    /**
	 * M�todo respons�vel por buscar itemCobranca associadas a fatura em quest�o
	 * 
	 * @param idFatura
	 * @return Map 
	 */
    public Map findFaturaInCobrancaInadimplencia(TypedFlatMap criteria){
    	
    	Map map = new HashMap();
    	List lst = getCobrancaInadimplenciaService().findByIdFatura(criteria.getLong("idFatura"), criteria.getLong("idCobranca"));
    	
    	if(lst.isEmpty()){
    		map.put("resp", "true");
    	}else{
    		map.put("resp", "false");
    		map.put("message", configuracoesFacade.getMensagem("LMS-36139", new Object[]{((CobrancaInadimplencia)lst.get(0)).getUsuario().getNmUsuario()}));
    	}
    	
    	return map;
    }

	
    
}
