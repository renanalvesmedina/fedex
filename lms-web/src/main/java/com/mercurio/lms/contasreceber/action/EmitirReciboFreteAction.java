package com.mercurio.lms.contasreceber.action;

import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.report.ReportExecutionManager;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.contasreceber.model.service.ReciboService;
import com.mercurio.lms.contasreceber.report.EmitirReciboFreteService;
import com.mercurio.lms.entrega.model.service.ManifestoEntregaService;
import com.mercurio.lms.municipios.model.service.FilialService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contasreceber.emitirReciboFreteAction"
 */

public class EmitirReciboFreteAction {

	private ReportExecutionManager reportExecutionManager;
	private EmitirReciboFreteService emitirReciboFreteService;
	
	public void setReportExecutionManager(
			ReportExecutionManager reportExecutionManager) {
		this.reportExecutionManager = reportExecutionManager;
	}

	public void setEmitirReciboFreteService(EmitirReciboFreteService emitirReciboFreteService) {
		this.emitirReciboFreteService = emitirReciboFreteService;
	}
	
	private ReciboService reciboService;
	public void setReciboService(ReciboService reciboService){
		this.reciboService = reciboService;
	}
	
	private FilialService filialService;
	public void setFilialService(FilialService filialService){
		this.filialService = filialService;
	}
	
	private ManifestoEntregaService manifestoEntregaService;
	public void setManifestoEntregaService(ManifestoEntregaService manifestoEntregaService){
		this.manifestoEntregaService = manifestoEntregaService;
	}
	
	public String execute(TypedFlatMap params) throws Exception {
		return this.reportExecutionManager.generateReportLocator(this.emitirReciboFreteService, params);
	}
	
	/**
	 * Método responsável por buscar Recibos de acordo com os filtros
	 * 
	 * @param criteria
	 * @return List 
	 */
	public List findRecibosByFilial(TypedFlatMap criteria){
		Long idFilial = criteria.getLong("filialByIdFilialEmissora.idFilial");
		Long nrRecibo = criteria.getLong("nrRecibo");
		return reciboService.findReciboByFilial(nrRecibo, idFilial);
	}
	
	/**
	 * Método responsável por buscar Manifestos de acordo com os filtros
	 * 
	 * @param criteria
	 * @return List 
	 */
	public List findManifestosEntregaByFilial(TypedFlatMap criteria){
		Long idFilial = criteria.getLong("filial.idFilial");
		Integer nrManifesto = criteria.getInteger("nrManifestoEntrega");
		return manifestoEntregaService.findByNrManifestoByFilial(nrManifesto, idFilial);
	}
	
	/**
	 * Método responsável por buscar filiais de acordo com os filtros
	 * 
	 * @param criteria
	 * @return List 
	 */
	public List findLookupFilial(Map criteria) {
		return filialService.findLookupFilial(criteria);
	}
	
}
