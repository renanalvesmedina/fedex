package com.mercurio.lms.contasreceber.action;



import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.FindDefinition;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.contasreceber.model.service.RedecoService;
import com.mercurio.lms.contasreceber.model.service.RelacaoCobrancaService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contasreceber.pesquisarRelacoesCobrancaAction"
 */

public class PesquisarRelacoesCobrancaAction extends CrudAction {

	
	private FilialService filialService;
	private RedecoService redecoService;
	
	
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public void setRedecoService(RedecoService redecoService) {
		this.redecoService = redecoService;
	}
	
	
	/** Setando a  defaultService para RelacaoCobrancaService
	 * @param relacaoCobrancaService */
	public void setService(RelacaoCobrancaService relacaoCobrancaService){
		this.defaultService = relacaoCobrancaService;
	}

	/** Retornando a RelacaoCobrancaService que esta na defaultService
	 * @return relacaoCobrancaService */
	public RelacaoCobrancaService getService(){
		return ( ( RelacaoCobrancaService ) defaultService );
	}

	
	/**
	 * Retorna a lista de filiais para a lookup de filial/Redeco
	 * @param map Critérios de pesquisa
	 * @return Lista de filiais
	 */
	public List findLookupByFilial(Map map){
		return filialService.findLookupBySgFilial(map);
	}
	
	/**
	 * Busca os redecos de acordo com os critérios de pesquisa para a lookup de Redecos
	 * @param map Critérios de pesquisa
	 * @return Lista de redecos
	 */
	public List findRedecos(Map map){
		return redecoService.findLookup(map);
	}

	
	/**Executa a consulta da grid para a tela de List
	 * @param TypedFlatMap */
	public ResultSetPage findPaginated(TypedFlatMap criteria) {
		
		FindDefinition fd = FindDefinition.createFindDefinition(criteria);
		ResultSetPage rsp = getService().findPaginatedBySql(criteria.getLong("filial.idFilial"),criteria.getLong("nrRelacaoCobrancaFilial"),criteria.getLong("redeco.idRedeco"),fd);
		
		List retorno = null;
		
		if( rsp.getList() != null && !rsp.getList().isEmpty() ){
			List parcial = rsp.getList();
			retorno = new ArrayList();
			TypedFlatMap tfm = null;
			for (Iterator iter = parcial.iterator(); iter.hasNext();) {
				Object[] dado = (Object[]) iter.next();
				tfm = new TypedFlatMap();
				tfm.put("idFilial",dado[0]);
				tfm.put("sgFilial",dado[1]);				
				tfm.put("nmFantasiaFilial",dado[2]);
				tfm.put("idRelacaoCobranca",dado[3]);
				tfm.put("nrRelacaoCobranca",dado[4]);
				tfm.put("qtDocumentos",dado[5]);				
				tfm.put("valorTotalPago",dado[6]);
				tfm.put("siglaMoeda",dado[7]);
				tfm.put("dsSituacaoCobranca",(String) dado[8]);
				tfm.put("tpSituacaoRelacaoCobranca",(String) dado[9]);
				retorno.add(tfm);
			}
		}
		
		rsp.setList(retorno);
		
		return rsp; 
	}

	/**Executa a contagem do numero de linhas da consulta feita para grid da tela de List
	 * @param TypedFlatMap */
	public Integer getRowCount(TypedFlatMap criteria) {
		
		return getService().getRowCountBySql(criteria.getLong("filial.idFilial"),criteria.getLong("nrRelacaoCobrancaFilial"),criteria.getLong("redeco.idRedeco"));
	}

	/**
	 * Usado na tela de Consultar Relacoes Cobrancas
	 * Usa um map pois tem um uso especifico.
	 *  
	 * @author Diego Umpierre - LMS
	 * @param id da relacao de cobranca
	 * @return Map
	 * @see com.mercurio.lms.contasreceber.model.service.RelacaoCobrancaService.findMapById
	 */
	public Map findById(Long id) {
		Map mapRetorno = getService().findMapById(id);
		mapRetorno.put("tpSituacaoRelacaoCobranca", ((DomainValue)mapRetorno.get("tpSituacaoRelacaoCobranca")).getDescription());
		return mapRetorno;
	}
	
	/** 
	 * Usado na tela de Consultar Relacoes Cobrancas, usado para carregar o grid da terceira aba.
	 * Usa um map pois tem um uso especifico.
	 *  
	 * @author Diego Umpierre - LMS
	 * @param map
	 * @return Map
	 * @see com.mercurio.lms.contasreceber.model.service.RelacaoCobrancaService.findMapById
	 */
	public ResultSetPage findPaginatedMapGridById(TypedFlatMap map) {
		
		Long idRelacaoCobranca = map.getLong("idRelacaoCobranca"); 
		if ( idRelacaoCobranca == null ){
			return null;
		} 
		
		FindDefinition findDef = FindDefinition.createFindDefinition(map);
		
		ResultSetPage retorno = getService().findPaginatedMapGridById(idRelacaoCobranca, findDef);
		
		List result = retorno.getList();
		Map nova = null;
		List novaLista = new ArrayList();
		
		
		for (Iterator iter = result.iterator(); iter.hasNext();) {
			
			Map element = (Map) iter.next();
			
			nova = new HashMap();
		
			nova.put("clienteResponsavel",FormatUtils.formatIdentificacao((DomainValue)element.get("tpIdentificacao"),
					                                                      (String) element.get("nrIdentificacao")) + " - " + (String) element.get("nmPessoa"));
			nova.put("tpDocumentoServico",((DomainValue)element.get("tpDocumentoServico")).getDescription());
			nova.put("idDoctoServico",element.get("idDoctoServico"));
			nova.put("sgFilial",element.get("sgFilialOrigem"));
			nova.put("nmFantasiaFilial",element.get("nmFantasiaFilial"));
			nova.put("nrRelacaoCobrancaFilial",element.get("nrRelacaoCobrancaFilial"));
			nova.put("nrDoctoServico",FormatUtils.formataNrDocumento(element.get("nrDoctoServico").toString(), ((DomainValue)element.get("tpDocumentoServico")).getValue()));
			nova.put("nrIdentificacao",element.get("nrIdentificacao"));
			nova.put("vlDevido",element.get("vlDevido"));
			nova.put("vlDesconto",element.get("vlDesconto"));
			nova.put("dsMotivoDesconto",element.get("dsMotivoDesconto"));
			nova.put("nmPessoa",element.get("nmPessoa"));
			
			novaLista.add(nova);
		}
		
		retorno.setList(novaLista);
		
		return retorno;

	}

	
	/**Usado na tela de Consultar Relacoes Cobrancas, numero de linhas retornado na consulta da grid para a terceira aba.
	 * 
	 * @author Diego Umpierre - LMS
	 * @param map
	 * @return
	 */
	public Integer getRowCountMapGrid(TypedFlatMap map) {
		Long idRelacaoCobranca = map.getLong("idRelacaoCobranca"); 
		if ( idRelacaoCobranca == null ){
			return null;
		} 		
		return getService().getRowCountMapGrid(idRelacaoCobranca);
	}
	
	
	/**Usado na tela de Consultar Relacoes Cobrancas, carrega os dados nos campos da terceira aba.
	 * 
	 * @author Diego Umpierre - LMS
	 * @param map
	 * @return
	 */		   
	public Map findMapGridById( TypedFlatMap map ){
		Long id = map.getLong("idDoctoServico"); 
		if ( id == null ){
			return null;
		} 		
		
		Map mapRetorno = getService().findMapGridById(id);
		String tpDoctoServico = null;
		String nrDoctoServico = null;
		
		tpDoctoServico = ((DomainValue)mapRetorno.get("tpDocumentoServico")).getValue();
		nrDoctoServico = mapRetorno.get("nrDoctoServico").toString();
			
		mapRetorno.put("nrDoctoServico",FormatUtils.formataNrDocumento(nrDoctoServico, tpDoctoServico));
		mapRetorno.put("tpDocumentoServico", ((DomainValue)mapRetorno.get("tpDocumentoServico")).getDescription());
		mapRetorno.put("nrIdentificacao",FormatUtils.formatIdentificacao((DomainValue)mapRetorno.get("tpIdentificacao"),(String) mapRetorno.get("nrIdentificacao")));

		return mapRetorno;
		
	}

	/**
	 * Retorna a filial do usuário logado 
	 *
	 * @author José Rodrigo Moraes
	 * @since 29/01/2007
	 *
	 * @return idFilialUsuarioLogado Identificador da filial do usuário logado
	 */
	public TypedFlatMap findFilialUsuarioLogado(){
		TypedFlatMap tfm = new TypedFlatMap();
		Filial filial = SessionUtils.getFilialSessao();		
		tfm.put("filial.idFilial",filial.getIdFilial());
		tfm.put("filial.sgFilial",filial.getSgFilial());
		tfm.put("filial.pessoa.nmFantasia",filial.getPessoa().getNmFantasia());
		return tfm;
	}
	
}
