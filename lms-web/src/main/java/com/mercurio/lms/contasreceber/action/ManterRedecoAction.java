package com.mercurio.lms.contasreceber.action;

import java.io.File;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.lang.StringUtils;
import org.hibernate.Hibernate;
import org.joda.time.YearMonthDay;

import com.mercurio.adsm.core.util.ReflectionUtils;
import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.masterdetail.ItemList;
import com.mercurio.adsm.framework.model.masterdetail.ItemListConfig;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailAction;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailFactory;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailKey;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntry;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntryConfig;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.report.ReportExecutionManager;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.EmpresaCobranca;
import com.mercurio.lms.configuracoes.model.Moeda;
import com.mercurio.lms.configuracoes.model.service.EmpresaCobrancaService;
import com.mercurio.lms.contasreceber.model.ComposicaoPagamentoRedeco;
import com.mercurio.lms.contasreceber.model.Desconto;
import com.mercurio.lms.contasreceber.model.DevedorDocServFat;
import com.mercurio.lms.contasreceber.model.Fatura;
import com.mercurio.lms.contasreceber.model.ItemFatura;
import com.mercurio.lms.contasreceber.model.ItemRedeco;
import com.mercurio.lms.contasreceber.model.Recibo;
import com.mercurio.lms.contasreceber.model.Redeco;
import com.mercurio.lms.contasreceber.model.param.DevedorDocServFatLookupParam;
import com.mercurio.lms.contasreceber.model.param.FaturaLookupParam;
import com.mercurio.lms.contasreceber.model.param.RedecoSomatorioParam;
import com.mercurio.lms.contasreceber.model.service.ComposicaoPagamentoRedecoService;
import com.mercurio.lms.contasreceber.model.service.DevedorDocServFatLookUpService;
import com.mercurio.lms.contasreceber.model.service.DevedorDocServFatService;
import com.mercurio.lms.contasreceber.model.service.FaturaService;
import com.mercurio.lms.contasreceber.model.service.GerarBaixaRedecoService;
import com.mercurio.lms.contasreceber.model.service.ItemRedecoService;
import com.mercurio.lms.contasreceber.model.service.NotaDebitoInternacionalService;
import com.mercurio.lms.contasreceber.model.service.ReciboDescontoService;
import com.mercurio.lms.contasreceber.model.service.ReciboService;
import com.mercurio.lms.contasreceber.model.service.RedecoService;
import com.mercurio.lms.contasreceber.model.service.RelacaoCobrancaService;
import com.mercurio.lms.contasreceber.model.service.RelacaoPagtoParcialService;
import com.mercurio.lms.contasreceber.report.EmitirRedecoService;
import com.mercurio.lms.expedicao.model.service.DoctoServicoService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.AliasToNestedMapResultTransformer;
import com.mercurio.lms.util.BigDecimalUtils;
import com.mercurio.lms.util.CompareUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.workflow.model.Pendencia;

/**
 * Generated by: ADSM ActionGenerator
 * 
 * @author Mickaï¿½l Jalbert
 * @since 05/07/2006
 *  
 *  
 * Nï¿½o inserir documentaï¿½ï¿½o apï¿½s ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviï¿½o.
 * @spring.bean id="lms.contasreceber.manterRedecoAction"
 */

public class ManterRedecoAction extends MasterDetailAction {

	private static final String ITEM_REDECO = "itemRedeco";
	
	private static final BigDecimal ZERO = new BigDecimal(0);
	
	private ConfiguracoesFacade configuracoesFacade;
	
	private DoctoServicoService doctoServicoService;
	
	private EmpresaCobrancaService empresaCobrancaService;
	
	private FilialService filialService;
	
	private DomainValueService domainValueService;
	
	private RelacaoCobrancaService relacaoCobrancaService;
	
	private FaturaService faturaService;
	
	private DevedorDocServFatLookUpService devedorDocServFatLookUpService;
	
	private NotaDebitoInternacionalService notaDebitoInternacionalService;
	
	private ReciboService reciboService;
	
	private DevedorDocServFatService devedorDocServFatService;
	
	private ReportExecutionManager reportExecutionManager;
	
	private EmitirRecibosDescontosFretesAction emitirRecibosDescontosFretesAction;
	
	private GerarBaixaRedecoService gerarBaixaRedecoService;
	
	private ReciboDescontoService reciboDescontoService;

	private EmitirRedecoService emitirRedecoService;

	private ComposicaoPagamentoRedecoService composicaoPagamentoRedecoService;
	
	private RelacaoPagtoParcialService relacaoPagtoParcialService;
	
	private ItemRedecoService itemRedecoService;
	
	public TypedFlatMap validateMonitoramentoEletronicoAutorizado(TypedFlatMap map) {
		Long idDoctoServico  = map.getLong("data.idDoctoServico");
		if (idDoctoServico != null) {
			doctoServicoService.validateDoctoServicoComMonitoramentoEletronicoAutorizado(idDoctoServico);
		}
		return map;
	}

	/**
	 * Obtem o Redeco atravï¿½s do ID e mantem adiciona a sessï¿½o :(
	 *  
	 * @param  idRedeco
	 * @return Mapa contendo os atributos para a tela
	 */
	public Map findById(Long idRedeco){
		
		Redeco redeco = (Redeco)getRedecoService().findByIdTela(idRedeco);		
		putMasterInSession(redeco);
		
		return mountMap(redeco);
	}		
	
	/**
	 * Persiste o Redeco
	 * 
	 * @param map
	 * @return mapa com atributos 
	 */
	public Map store(TypedFlatMap map){
		
		TypedFlatMap mapRetorno = new TypedFlatMap();
		
		/*Obtem o Redeco da sessao atravï¿½s do ID*/
		MasterEntry entry = getMasterFromSession(map.getLong("idRedeco"), true);		
		
		/*Obtem os itens do Redeco*/
		ItemList items = getItemsFromSession(entry, ITEM_REDECO);		
		
		/*Obtem a interface ItemListConfig*/
		ItemListConfig config = getMasterConfig().getItemListConfig(ITEM_REDECO);
		
		/*Obtem o objeto Redeco*/
		Redeco redeco = mountRedeco((Redeco) entry.getMaster(), map);
		
		//LMSA-2362
		BigDecimal vlTotalRecebido = map.getBigDecimal("vlTotalPago");
		
		
		
		/*Verifica se a digitaï¿½ï¿½o foi concluida*/
		DomainValue digitacaoConcluida = map.getDomainValue("blDigitacaoConcluida");
		if(digitacaoConcluida != null && StringUtils.isNotBlank(digitacaoConcluida.getValue())){
			redeco.setBlDigitacaoConcluida(digitacaoConcluida);
		}else{
			redeco.setBlDigitacaoConcluida(new DomainValue("N"));
		}
		redeco.setTpRecebimento(new DomainValue("CC"));
		
		/*Salva as informaï¿½ï¿½es atravï¿½s do sistema DF2*/
		redeco = getRedecoService().store(redeco, items, config);
		
		/*Reseta a lista de itens*/
		items.resetItemsState(); 
		
		/*ï¿½ setado novamente na sessao o Redeco , isso ï¿½ complidado de gerenciar :(*/
    	updateMasterInSession(entry);
		
    	/*Retorna o mapa com atributos*/ 
		mapRetorno = mountMap(redeco);
		
		return mapRetorno;
		
	}
	
	/**
	 * Obtem os dados do Redeco
	 * 
	 * @param  redeco
	 * @param  map
	 * @return Retorna o redeco populado
	 */
	private Redeco mountRedeco(Redeco redeco, TypedFlatMap map){
		
		/*Obtem a filial*/
		Filial filial = filialService.findById(map.getLong("filial.idFilial"));
		
		EmpresaCobranca empresaCobranca = null;
		if (map.getLong("empresaCobranca.idEmpresaCobranca") != null){
			empresaCobranca = new EmpresaCobranca();
			empresaCobranca.setIdEmpresaCobranca(map.getLong("empresaCobranca.idEmpresaCobranca"));
		}
		redeco.setFilial(filial);
		redeco.setEmpresaCobranca(empresaCobranca);
		
		/*Popula com os dados da tela*/ 
		redeco.setDtEmissao(map.getYearMonthDay("dtEmissao"));
		redeco.setDtRecebimento(map.getYearMonthDay("dtRecebimento"));
		redeco.setDtLiquidacao(map.getYearMonthDay("dtLiquidacao"));
		redeco.setNmResponsavelCobranca(map.getString("nmResponsavelCobranca"));
		redeco.setTpRecebimento(map.getDomainValue("tpRecebimento"));
		redeco.setTpFinalidade(domainValueService.findDomainValueByValue("DM_FINALIDADE_REDECO",  map.getString("tpFinalidade")));
		redeco.setTpAbrangencia(map.getDomainValue("tpAbrangencia"));
		redeco.setObRedeco(map.getString("obRedeco"));
		
		Pendencia pendenciaDesconto = null;
		Pendencia pendenciaLucrosPerdas = null;
		Pendencia pendenciaRecebimento = null;
		
		if( map.getLong("pendenciaDesconto.idPendencia") != null ){
			pendenciaDesconto = new Pendencia();
			pendenciaDesconto.setIdPendencia(map.getLong("pendenciaDesconto.idPendencia"));
			redeco.setPendenciaDesconto(pendenciaDesconto);
		}
		
		if( map.getLong("pendenciaLucrosPerdas.idPendencia") != null ){
			pendenciaLucrosPerdas = new Pendencia();
			pendenciaLucrosPerdas.setIdPendencia(map.getLong("pendenciaLucrosPerdas.idPendencia"));
			redeco.setPendenciaLucrosPerdas(pendenciaLucrosPerdas);
		}
		
		if( map.getLong("pendenciaRecebimento.idPendencia") != null ){
			pendenciaRecebimento = new Pendencia();
			pendenciaRecebimento.setIdPendencia(map.getLong("pendenciaRecebimento.idPendencia"));
			redeco.setPendenciaRecebimento(pendenciaRecebimento);
		}
		
		return redeco;
	}
	
	/**
	 * Obtem os dados do Redeco e preenche o Mapa para ser
	 * enviado para a tela   
	 * 
	 * @param redeco
	 * @return Map
	 */
	private TypedFlatMap mountMap(Redeco redeco){
		TypedFlatMap mapRetorno = new TypedFlatMap();
		
		mapRetorno.put("idRedeco", redeco.getIdRedeco());
		mapRetorno.put("filial.idFilial", redeco.getFilial().getIdFilial());
		mapRetorno.put("filial.sgFilial", redeco.getFilial().getSgFilial());
		mapRetorno.put("filial.pessoa.nmFantasia", redeco.getFilial().getPessoa().getNmFantasia());
		mapRetorno.put("nrRedeco", redeco.getNrRedeco());
		mapRetorno.put("tpSituacaoRedeco", redeco.getTpSituacaoRedeco().getDescription());
		mapRetorno.put("tpSituacaoRedecoValue", redeco.getTpSituacaoRedeco().getValue());
		mapRetorno.put("dtEmissao", redeco.getDtEmissao());
		mapRetorno.put("nmResponsavelCobranca", redeco.getNmResponsavelCobranca());
		mapRetorno.put("tpRecebimento", redeco.getTpRecebimento().getValue());
		mapRetorno.put("tpFinalidade", redeco.getTpFinalidade().getValue());
		mapRetorno.put("tpAbrangencia", redeco.getTpAbrangencia().getValue());
		mapRetorno.put("dtRecebimento", redeco.getDtRecebimento());
		mapRetorno.put("dtLiquidacao", redeco.getDtLiquidacao());
		mapRetorno.put("vlDiferencaCambialCotacao", redeco.getVlDiferencaCambialCotacao());
		mapRetorno.put("obRedeco", redeco.getObRedeco());
		mapRetorno.put("moeda.siglaSimbolo", redeco.getMoeda().getSiglaSimbolo());
		if(redeco.getPendenciaDesconto() != null){
			mapRetorno.put("pendenciaDesconto.idPendencia", redeco.getPendenciaDesconto().getIdPendencia());
		}
		if(redeco.getPendenciaLucrosPerdas() != null){
			mapRetorno.put("pendenciaLucrosPerdas.idPendencia", redeco.getPendenciaLucrosPerdas().getIdPendencia());
		}
		if(redeco.getPendenciaRecebimento() != null){
			mapRetorno.put("pendenciaRecebimento.idPendencia", redeco.getPendenciaRecebimento().getIdPendencia());
		}		
		
		RedecoSomatorioParam somatorio = getRedecoService().findSomatorio(redeco.getIdRedeco());
		
		Map<String, Object> findSomatorio = getRedecoService().findSomatoriosRedeco(redeco.getIdRedeco());
		BigDecimal vlTotalFatura = (BigDecimal) findSomatorio.get("vl_total_fat");
		BigDecimal vlTotalDesc = (BigDecimal) findSomatorio.get("vl_total_desc");
		BigDecimal vlTotalRecebParical = (BigDecimal) findSomatorio.get("vl_total_receb_parcial");
		
		BigDecimal vlSaldo = vlTotalFatura.subtract(vlTotalDesc).subtract(vlTotalRecebParical);
		
		BigDecimal vlJuros = (BigDecimal) findSomatorio.get("vl_total_juros");
		BigDecimal vlTotalTarifa = (BigDecimal) findSomatorio.get("vl_total_tarifa");
				
		mapRetorno.put("vlTotalPago", vlSaldo.add(vlJuros).subtract(vlTotalTarifa));
		mapRetorno.put("qtTotalDocumentos", somatorio.getQtTotalDocumentos());
		mapRetorno.put("vlTotalJuros", somatorio.getVlTotalJuros());
		mapRetorno.put("vlTotalDesconto", somatorio.getVlTotalDesconto());
		mapRetorno.put("vlTotalTarifas", somatorio.getVlTotalTarifas());
		
		if (redeco.getTpSituacaoWorkflow() != null){
			mapRetorno.put("tpSituacaoWorkflow", redeco.getTpSituacaoWorkflow().getDescription());
		}
		
		if (redeco.getEmpresaCobranca() != null){
			mapRetorno.put("empresaCobranca.idEmpresaCobranca", redeco.getEmpresaCobranca().getIdEmpresaCobranca());
		}		
		
		if (reciboDescontoService.getRowCountByIdRedeco(redeco.getIdRedeco()) > 0){
			mapRetorno.put("blShowBotaoEmitirRecibo", Boolean.TRUE);
		} else {
			mapRetorno.put("blShowBotaoEmitirRecibo", Boolean.FALSE);
		}
		
		if("N".equals(redeco.getBlDigitacaoConcluida().getValue())){
			mapRetorno.put("blDigitacaoConcluida", Boolean.FALSE);
		}else{
			mapRetorno.put("blDigitacaoConcluida", Boolean.TRUE);
		}
		
		String tpRecebimento = redeco.getTpRecebimento().getValue();
		/*Caso a finalidade do redeco for CC e o valor total recebido for maior que zero
		e o tipo de recebimento for CV, DC, DI ou CC seta a digitacao */
		if("CC".equalsIgnoreCase(redeco.getTpFinalidade().getValue()) 
				&& BigDecimalUtils.gtZero(BigDecimalUtils.defaultBigDecimal(redeco.getVlRecebido())) 
					&& (tpRecebimento.equals("CV") || tpRecebimento.equals("DC") || tpRecebimento.equals("DI") || tpRecebimento.equals("CC")) ){
			mapRetorno.put("blComposicao", "true");
		}
		
		return mapRetorno;
	}
	

	/**
	 * Retransmite o redeco setando a data de tranmissao para nulo
	 *  
	 * @param idRedeco
	 * @return Map
	 */
	public Map executeRetransmitirRedeco(Long idRedeco){
		
		MasterEntry entry = getMasterFromSession(idRedeco, true);		
		ItemList items = getItemsFromSession(entry, ITEM_REDECO);	
    	
		Redeco redeco = (Redeco)entry.getMaster();
		
		getRedecoService().executeRetransmitirRedeco(redeco);

		items.resetItemsState(); 
    	
    	updateMasterInSession(entry);
		
    	return null;
    }
    
	/**
	 * Cancela o redeco
	 * 
	 * @param idRedeco
	 * @return Map
	 */
    public Map cancelRedeco(Long idRedeco){
		MasterEntry entry = getMasterFromSession(idRedeco, true);		
		ItemList items = getItemsFromSession(entry, ITEM_REDECO);	
    	
		Redeco redeco = (Redeco)entry.getMaster();
		redeco = getRedecoService().findById(redeco.getIdRedeco());
		getRedecoService().cancelRedeco(redeco);

		items.resetItemsState(); 
    	updateMasterInSession(entry);
    	
    	TypedFlatMap mapRetorno = new TypedFlatMap();
    	
    	mapRetorno.put("tpSituacaoRedeco", redeco.getTpSituacaoRedeco().getDescription());
    	mapRetorno.put("tpSituacaoRedecoValue", redeco.getTpSituacaoRedeco().getValue());
    	
    	if (redeco.getTpSituacaoWorkflow() != null) {
    		mapRetorno.put("tpSituacaoWorkflow", redeco.getTpSituacaoWorkflow().getDescription());
    	}
    	
    	return mapRetorno;
    }

    /**
     * Conclui a digitaï¿½ï¿½o do Redeco
     * 
     * @param idRedeco
     * @return Map
     */
    public Map concluirDigitacao(Long idRedeco){
	
    	Redeco redeco = getRedecoService().findById(idRedeco);	
    	
    	redeco.setTpSituacaoRedeco(domainValueService.findDomainValueByValue("DM_STATUS_REDECO", "EM"));
    	
    	redeco.setBlDigitacaoConcluida(new DomainValue("S"));
    	
    	getRedecoService().store(redeco);
 
    	return mountMap(redeco);    	
    }
    
	
	/**
     * Remove uma lista de redecos
	 *
     * @param ids
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		this.getRedecoService().removeByIds(ids);
	}
	
	/**
	 * Remove o Redeco atravï¿½s do ID
	 * 
	 * @param id
	 */
	public void removeById(Long id) {	
		this.getRedecoService().removeById(id);
		newMaster();			
	}
	
	/**
	 * Remove a lista de itens redeco
	 *
	 * @param ids
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)	
	public void removeByIdsItemRedeco(List ids) {
		super.removeItemByIds(ids, ITEM_REDECO);
	}	
	
	/**
	 * Ordenaï¿½ï¿½o dos documentos
	 * 
	 */
	@Override
	protected MasterEntryConfig createMasterConfig(MasterDetailFactory masterFactory) {
		
		MasterEntryConfig config = masterFactory.createMasterEntryConfig(Redeco.class);
		
		/*Comparador para realizar a ordenaï¿½ï¿½o dos items filhos de acordo com a regra de negï¿½cio.*/
		Comparator descComparator = new Comparator() {
			
			@Override
			public int compare(Object o1, Object o2) {				
				ItemRedeco d1 = (ItemRedeco) o1;
				ItemRedeco d2 = (ItemRedeco) o2;
				
				int retorno = 0;
				
				/*Ordenaï¿½ï¿½o por tipo de documento*/
				String tpDocumento1 = "";
				String tpDocumento2 = "";
				if (d1.getFatura() != null){
					if (d1.getFatura().getIdFatura() != null){
						if (d1.getFatura().getTpFatura().getValue().equals("R")){
							tpDocumento1 = "FAT";
						} else {
							tpDocumento1 = "NDI";
						}
					} else {
						tpDocumento1 = ((ItemFatura)d1.getFatura().getItemFaturas().get(0)).getDevedorDocServFat().getDoctoServico().getTpDocumentoServico().getDescription().getValue();
					}
				} else {
					tpDocumento1 = "ROF";
				}
				
				if (d2.getFatura() != null){
					if (d2.getFatura().getIdFatura() != null){
						if (d2.getFatura().getTpFatura().getValue().equals("R")){
							tpDocumento2 = "FAT";
						} else {
							tpDocumento2 = "NDI";
						}
					} else {
						tpDocumento2 = ((ItemFatura)d2.getFatura().getItemFaturas().get(0)).getDevedorDocServFat().getDoctoServico().getTpDocumentoServico().getDescription().getValue();
					}
				} else {
					tpDocumento2 = "ROF";
				}
				retorno = tpDocumento1.compareTo(tpDocumento2);
				
				if (retorno != 0){
					return retorno;
				}				
				
				/*Ordenaï¿½ï¿½o por filial*/
				String sgFilial1 = "";
				String sgFilial2 = "";
				if (d1.getFatura() != null){
					if (d1.getFatura().getIdFatura() != null){
						sgFilial1 = d1.getFatura().getFilialByIdFilial().getSgFilial();
					} else {
						sgFilial1 = ((ItemFatura)d1.getFatura().getItemFaturas().get(0)).getDevedorDocServFat().getDoctoServico().getFilialByIdFilialOrigem().getSgFilial();
					}
				} else {
					sgFilial1 = d1.getRecibo().getFilialByIdFilialEmissora().getSgFilial();
				}
				
				if (d2.getFatura() != null){
					if (d2.getFatura().getIdFatura() != null){
						sgFilial2 = d2.getFatura().getFilialByIdFilial().getSgFilial();
					} else {
						sgFilial2 = ((ItemFatura)d2.getFatura().getItemFaturas().get(0)).getDevedorDocServFat().getDoctoServico().getFilialByIdFilialOrigem().getSgFilial();
					}
				} else {
					sgFilial2 = d2.getRecibo().getFilialByIdFilialEmissora().getSgFilial();
				}
				retorno = sgFilial1.compareTo(sgFilial2);
				
				if (retorno != 0){
					return retorno;
				}
				
				/*Ordenaï¿½ï¿½o por nï¿½mero de documento*/
				Long nrDocumento1 = null;
				Long nrDocumento2 = null;
				if (d1.getFatura() != null){
					if (d1.getFatura().getIdFatura() != null){
						nrDocumento1 = d1.getFatura().getNrFatura();
					} else {
						nrDocumento1 = ((ItemFatura)d1.getFatura().getItemFaturas().get(0)).getDevedorDocServFat().getDoctoServico().getNrDoctoServico();
					}
				} else {
					nrDocumento1 = d1.getRecibo().getNrRecibo();
				}
				
				if (d2.getFatura() != null){
					if (d2.getFatura().getIdFatura() != null){
						nrDocumento2 = d2.getFatura().getNrFatura();
					} else {
						nrDocumento2 = ((ItemFatura)d2.getFatura().getItemFaturas().get(0)).getDevedorDocServFat().getDoctoServico().getNrDoctoServico();
					}
				} else {
					nrDocumento2 = d2.getRecibo().getNrRecibo();
				}
				retorno = nrDocumento1.compareTo(nrDocumento2);			
				
				
				return retorno;
			}
			
		};
		
		
		/*Esta instancia serï¿½ responsavel por carregar os items filhos na sessï¿½o a partir do banco de dados.*/
		ItemListConfig itemInit = new ItemListConfig() {
			
			/*Chamado para carregar os filhos na sessï¿½o*/
			@Override
			public List initialize(Long masterId) {
				if (masterId == null) {
					return Collections.EMPTY_LIST;
				}
				return getRedecoService().findItemRedeco(masterId);
			}

			@Override
			public Integer getRowCount(Long masterId) {
				return getRedecoService().getRowCountItemRedeco(masterId);
			}

			@Override
			public void modifyItemValues(Object newBean, Object bean) {
				Set ignore = new HashSet(2);
				ignore.add("idItemRedeco");
				ignore.add("versao");
				ReflectionUtils.syncObjectProperties(bean, newBean, ignore);
			}

			@Override
			public Map configItemDomainProperties() {
				Map props = new HashMap(1);				
				return props;
			}

			@Override
			public Object populateNewItemInstance(Map parameters, Object bean) {
				TypedFlatMap map = new TypedFlatMap();
				map.putAll(parameters);
				
				ItemRedeco itemRedecoNew = mountItemRedeco((TypedFlatMap)parameters, (ItemRedeco)bean);
				
				resolveDomainValueProperties(itemRedecoNew);
				ItemList items = getItemsFromSession(getMasterFromSession(getMasterId(parameters), true), ITEM_REDECO);
				ItemListConfig config = getMasterConfig().getItemListConfig(ITEM_REDECO);
				
				MasterEntry entry = getMasterFromSession(getMasterId(parameters), true);
				Redeco redeco = (Redeco)entry.getMaster();
				
				boolean isFinalidadeEspecifica = verificaFinalidade(map.getString("tipoFinalidade"));
				
				/*Regras de negï¿½cio*/
				getRedecoService().validateItemRedeco(itemRedecoNew, map.getBigDecimal("vlRecebido"), map.getYearMonthDay("dtEmissao"), map.getString("tpAbrangencia"), isFinalidadeEspecifica, map.getString("tipoFinalidade"));				
				
	    		for (Iterator iter = items.iterator(redeco.getIdRedeco(), config); iter.hasNext();) {
	    			
	    			/*Verificar unique key*/
	    			ItemRedeco itemRedeco = (ItemRedeco)iter.next();
	    			validateUniqueKey(itemRedecoNew, itemRedeco);
	    			
	    			validateMoeda(itemRedecoNew, itemRedeco);
	    		}
				
				return itemRedecoNew;
			}

			/**
			 * @param itemRedecoNew
			 * @param itemRedeco
			 */
			private void validateMoeda(ItemRedeco itemRedecoNew, ItemRedeco itemRedeco) {
				Long idMoeda = getRedecoService().getMoeda(itemRedeco);
				Long idMoedaNew = getRedecoService().getMoeda(itemRedecoNew);
				
				if (!idMoeda.equals(idMoedaNew)){
					throw new BusinessException("LMS-36171");
				}
			}

			/**
			 * @param itemRedecoNew
			 * @param itemRedeco
			 */
			private void validateUniqueKey(ItemRedeco itemRedecoNew, ItemRedeco itemRedeco) {
				if (!itemRedeco.getIdItemRedeco().equals(itemRedecoNew.getIdItemRedeco()) || itemRedecoNew.getIdItemRedeco() == null)
					if (itemRedecoNew.getFatura() != null && itemRedeco.getFatura() != null){
						if (itemRedecoNew.getFatura().getIdFatura() != null && itemRedeco.getFatura().getIdFatura() != null){
							if (itemRedecoNew.getFatura().getIdFatura().equals(itemRedeco.getFatura().getIdFatura())){
								throw new BusinessException("uniqueConstraintViolated", new Object[] {"IdFatura"});
							}
						} else if ((itemRedecoNew.getFatura().getIdFatura() == null && ((ItemFatura)itemRedecoNew.getFatura().getItemFaturas().get(0)).getDevedorDocServFat() != null) && 
									(itemRedeco.getFatura().getIdFatura() == null && ((ItemFatura)itemRedeco.getFatura().getItemFaturas().get(0)).getDevedorDocServFat() != null)) {
							if (((ItemFatura)itemRedecoNew.getFatura().getItemFaturas().get(0)).getDevedorDocServFat().getIdDevedorDocServFat().equals( 
								((ItemFatura)itemRedeco.getFatura().getItemFaturas().get(0)).getDevedorDocServFat().getIdDevedorDocServFat())) {
								throw new BusinessException("uniqueConstraintViolated", new Object[] {"IdDevedorDocServFat"});
							}
						}
					} else if (itemRedecoNew.getRecibo() != null && itemRedeco.getRecibo() != null){
						if (itemRedecoNew.getRecibo().getIdRecibo().equals(itemRedeco.getRecibo().getIdRecibo())){
							throw new BusinessException("uniqueConstraintViolated", new Object[] {"IdRecibo"});
						}
					}
				}
			};
		
		config.addItemConfig(ITEM_REDECO,ItemRedeco.class, itemInit, descComparator);
		return config;
	}
	
	/**
	 * Salva o Item do Redeco
	 * 
	 * @param map
	 * @return Mapa
	 */
	public Map storeItemRedeco(TypedFlatMap map){
		if ("FAT".equals(map.getString("documento.tpDocumento"))){
			Long idFatura = map.getLong("documento.idDocumento");
			faturaService.validateOcorrenciaFaturaCorporativo(idFatura);
		}
		
		Serializable idItemRedeco = saveItemInstance(map, ITEM_REDECO);
		Long idRedeco = (Long) getMasterId(map);

		MasterDetailKey key = new MasterDetailKey();
		
		key.setDetailId((Long)idItemRedeco);
		key.setMasterId(idRedeco);
		
		ItemRedeco itemRedeco = (ItemRedeco)findItemById(key, ITEM_REDECO);
		
		TypedFlatMap mapRetorno = new TypedFlatMap();
		
		mapRetorno.put("idItemRedeco", itemRedeco.getIdItemRedeco());
		Moeda moeda = ((RedecoService)getMasterService()).getMoedaByItem(itemRedeco);
		mapRetorno.put("moeda.siglaSimbolo",moeda.getSiglaSimbolo());
		
		return mapRetorno;	
	}
	
	/**
	 * Busca os valores do documento (aba filho) na hora de selecionar um documento
	 * com a lookup
	 * 
	 * @author Mickaï¿½l Jalbert
	 * @since 10/07/2006
	 * 
	 * @param TypedFlatMap map
	 * 
	 * @return Map
	 */
	public Map findDocumentValue(TypedFlatMap map){
		Long idDocumento = map.getLong("idDocumento");
		String tpDocumento = map.getString("tpDocumento");		
		TypedFlatMap mapRetorno = new TypedFlatMap();
		
		boolean isFinalidadeEspecifica = verificaFinalidade(map.getString("tipoFinalidade"));
		
		if (tpDocumento.equals("FAT") || tpDocumento.equals("NDI")){
			Fatura fatura = faturaService.findById(idDocumento);
			mapRetorno.put("vlJuros", fatura.getVlJuroCalculado());
			mapRetorno.put("vlDesconto", fatura.getVlDesconto());
			mapRetorno.put("vlDocumento", fatura.getVlTotal());
			mapRetorno.put("vlJurosCalculados", fatura.getVlJuroCalculado());
			
			BigDecimal totalVlPagamento = getRedecoService().findVlPagtoFatura(fatura.getIdFatura(), null);
			BigDecimal vlSaldo = fatura.getVlTotal().subtract(fatura.getVlDesconto()).subtract(totalVlPagamento);
			mapRetorno.put("vlSaldo", vlSaldo);
			
			mapRetorno.put("vlDiferencaJuros", ZERO);
			mapRetorno.put("moeda.siglaSimbolo",fatura.getMoeda().getSiglaSimbolo());
			mapRetorno.put("vlDiferencaCambialCotacao", null);
			if( isFinalidadeEspecifica ){
				mapRetorno.put("vlRecebido",fatura.getVlTotal());
			}
		} else if (tpDocumento.equals("ROF")){
			Recibo recibo = reciboService.findById(idDocumento);
			mapRetorno.put("vlJuros", recibo.getVlTotalJuros());
			mapRetorno.put("vlDesconto", recibo.getVlTotalDesconto());
			mapRetorno.put("vlDocumento", recibo.getVlTotalRecibo());
			mapRetorno.put("vlJurosCalculados", recibo.getVlTotalJuros());
			mapRetorno.put("vlDiferencaJuros", ZERO);
			mapRetorno.put("moeda.siglaSimbolo",recibo.getCotacaoMoeda().getMoedaPais().getMoeda().getSiglaSimbolo());
			mapRetorno.put("vlDiferencaCambialCotacao", null);
			if( isFinalidadeEspecifica ){
				mapRetorno.put("vlRecebido",recibo.getVlTotalRecibo());
			}
		} else {
			DevedorDocServFat devedorDocServFat = devedorDocServFatService.findByIdWithDocumentoAndDesconto(idDocumento);
			mapRetorno.put("vlJuros", ZERO);
			
			//Se tem desconto e estï¿½ aprovado
			if (devedorDocServFat.getDescontos() != null && !devedorDocServFat.getDescontos().isEmpty() && ((Desconto)devedorDocServFat.getDescontos().get(0)).getTpSituacaoAprovacao().getValue().equals("A")){
				mapRetorno.put("vlDesconto", ((Desconto)devedorDocServFat.getDescontos().get(0)).getVlDesconto());
			} else {
				mapRetorno.put("vlDesconto", ZERO);
			}
			
			mapRetorno.put("vlDocumento", devedorDocServFat.getVlDevido());
			mapRetorno.put("vlJurosCalculados", ZERO);
			mapRetorno.put("vlDiferencaJuros", ZERO);
			mapRetorno.put("moeda.siglaSimbolo",devedorDocServFat.getDoctoServico().getMoeda().getSiglaSimbolo());
			mapRetorno.put("vlDiferencaCambialCotacao", null);
			if( isFinalidadeEspecifica ){
				mapRetorno.put("vlRecebido",devedorDocServFat.getDoctoServico().getVlTotalDocServico());
			}
		}
		
		mapRetorno.put("vlTarifa", ZERO);
		
		return mapRetorno;
	}
	
	/**
	 * Obtem o mapa com o item do Redeco
	 * 
	 * @param key
	 * @return Map
	 */
	public Map findByIdItemRedeco(MasterDetailKey key){
		ItemRedeco itemRedeco = (ItemRedeco)findItemById(key, ITEM_REDECO);
		TypedFlatMap mapRetorno = new TypedFlatMap();
		
		mapRetorno.put("idItemRedeco", itemRedeco.getIdItemRedeco());
		mapRetorno.put("vlTarifa", itemRedeco.getVlTarifa());
		mapRetorno.put("vlJuros", itemRedeco.getVlJuros());
		mapRetorno.put("obItemRedeco", itemRedeco.getObItemRedeco());
		mapRetorno.put("vlDiferencaCambialCotacao", itemRedeco.getVlDiferencaCambialCotacao());
		
		if (itemRedeco.getFatura() != null){
			Fatura fatura = itemRedeco.getFatura();
			
			if (fatura.getIdFatura() != null){
				
				BigDecimal totalVlPagamento = getRedecoService().findVlPagtoFatura(fatura.getIdFatura(), null);
				BigDecimal vlSaldo = fatura.getVlTotal().subtract(fatura.getVlDesconto()).subtract(totalVlPagamento);
				mapRetorno.put("vlSaldo", vlSaldo);
				
				if (fatura.getTpFatura().getValue().equals("D")){
					mapRetorno.put("documento.tpDocumento", "NDI");
				} else {
					mapRetorno.put("documento.tpDocumento", "FAT");	
				}
				
				mapRetorno.put("documento.filial.idFilial", fatura.getFilialByIdFilial().getIdFilial());
				mapRetorno.put("documento.filial.sgFilial", fatura.getFilialByIdFilial().getSgFilial());
				mapRetorno.put("documento.filial.pessoa.nmFantasia", fatura.getFilialByIdFilial().getPessoa().getNmFantasia());
				mapRetorno.put("documento.idDocumento", fatura.getIdFatura());
				mapRetorno.put("documento.nrDocumento", fatura.getNrFatura());
				
				BigDecimal totalRecebido = vlSaldo.add(itemRedeco.getVlJuros()).subtract(itemRedeco.getVlTarifa());
				mapRetorno.put("vlRecebido", totalRecebido);
				//mapRetorno.put("vlRecebido", fatura.getVlTotal().add(itemRedeco.getVlJuros()).subtract(itemRedeco.getVlTarifa()).subtract(fatura.getVlDesconto()));
				
				mapRetorno.put("vlDesconto", fatura.getVlDesconto());
				mapRetorno.put("vlDocumento", fatura.getVlTotal());
				mapRetorno.put("vlJurosCalculados", fatura.getVlJuroCalculado());
				mapRetorno.put("vlDiferencaJuros", itemRedeco.getVlJuros().subtract(fatura.getVlJuroCalculado()));
				mapRetorno.put("moeda.siglaSimbolo",fatura.getMoeda().getSiglaSimbolo());
			} else {
				DevedorDocServFat devedorDocServFat = ((ItemFatura)fatura.getItemFaturas().get(0)).getDevedorDocServFat();
				Filial filialOrigem = devedorDocServFat.getDoctoServico().getFilialByIdFilialOrigem(); 
				mapRetorno.put("documento.tpDocumento", devedorDocServFat.getDoctoServico().getTpDocumentoServico().getValue());
				mapRetorno.put("documento.filial.idFilial", filialOrigem.getIdFilial());
				mapRetorno.put("documento.filial.sgFilial", filialOrigem.getSgFilial());
				mapRetorno.put("documento.filial.pessoa.nmFantasia", filialOrigem.getPessoa().getNmFantasia());
				mapRetorno.put("documento.idDocumento", devedorDocServFat.getIdDevedorDocServFat());
				mapRetorno.put("documento.nrDocumento", devedorDocServFat.getDoctoServico().getNrDoctoServico());
				mapRetorno.put("moeda.siglaSimbolo",devedorDocServFat.getDoctoServico().getMoeda().getSiglaSimbolo());
				BigDecimal vlRecebido = devedorDocServFat.getVlDevido();
				
				if (devedorDocServFat.getDescontos() != null && !devedorDocServFat.getDescontos().isEmpty()){
					vlRecebido = vlRecebido.subtract(((Desconto)devedorDocServFat.getDescontos().get(0)).getVlDesconto());
				}
				
				mapRetorno.put("vlRecebido", vlRecebido);
				
				if (devedorDocServFat.getDescontos() != null && devedorDocServFat.getDescontos().size() > 0){
					mapRetorno.put("vlDesconto", ((Desconto)devedorDocServFat.getDescontos().get(0)).getVlDesconto());
				} else {
					mapRetorno.put("vlDesconto", ZERO);
				}
				mapRetorno.put("vlDocumento", devedorDocServFat.getVlDevido());
				mapRetorno.put("vlJurosCalculados", ZERO);
				mapRetorno.put("vlDiferencaJuros", ZERO);
			}
		} else {
			Recibo recibo = itemRedeco.getRecibo();
			mapRetorno.put("documento.tpDocumento", "ROF");
			mapRetorno.put("documento.filial.idFilial", recibo.getFilialByIdFilialEmissora().getIdFilial());
			mapRetorno.put("documento.filial.sgFilial", recibo.getFilialByIdFilialEmissora().getSgFilial());
			mapRetorno.put("documento.filial.pessoa.nmFantasia", recibo.getFilialByIdFilialEmissora().getPessoa().getNmFantasia());
			mapRetorno.put("documento.idDocumento", recibo.getIdRecibo());
			mapRetorno.put("documento.nrDocumento", recibo.getNrRecibo());
			mapRetorno.put("vlRecebido", recibo.getVlTotalRecibo().add(itemRedeco.getVlJuros()).subtract(recibo.getVlTotalDesconto()));
			mapRetorno.put("vlDesconto", recibo.getVlTotalDesconto());
			mapRetorno.put("vlDocumento", recibo.getVlTotalDocumentos());
			mapRetorno.put("vlJurosCalculados", recibo.getVlTotalJuros());
			mapRetorno.put("vlDiferencaJuros", recibo.getVlTotalJuros().subtract(itemRedeco.getVlJuros()));
			mapRetorno.put("moeda.siglaSimbolo",recibo.getCotacaoMoeda().getMoedaPais().getMoeda().getSiglaSimbolo());
		}

		return mapRetorno;
	}
	
	/**
	 * Obtem o ResultSetPage para a tela de documentos
	 * 
	 * @param parameters
	 * @return ResultSetPage
	 */
	public ResultSetPage findPaginatedItemRedeco(TypedFlatMap parameters) {
		ResultSetPage rsp = findPaginatedItemList(parameters, ITEM_REDECO);
		List lstOriginal = rsp.getList();
		List lstRetorno = new ArrayList();		
		
		for (Iterator iter = lstOriginal.iterator(); iter.hasNext();) {
			ItemRedeco itemRedeco = (ItemRedeco) iter.next();
			
			TypedFlatMap mapRetorno = new TypedFlatMap();
			
			mapRetorno.put("idItemRedeco", itemRedeco.getIdItemRedeco());
			mapRetorno.put("vlJuros", itemRedeco.getVlJuros());
			
			if (itemRedeco.getFatura() != null){
				Fatura fatura = itemRedeco.getFatura();
				if (fatura.getIdFatura() != null){
					
					BigDecimal totalVlPagamento = getRedecoService().findVlPagtoFatura(fatura.getIdFatura(), null);
					BigDecimal vlSaldo = fatura.getVlTotal().subtract(fatura.getVlDesconto()).subtract(totalVlPagamento);
					mapRetorno.put("vlSaldo", vlSaldo);

					
					if (fatura.getTpFatura().getValue().equals("D")){
						mapRetorno.put("documento.tpDocumento", "NDI");
					} else {
						mapRetorno.put("documento.tpDocumento", "FAT");	
					}				
					mapRetorno.put("documento.filial.sgFilial", fatura.getFilialByIdFilial().getSgFilial());
					mapRetorno.put("documento.filial.idFilial", fatura.getFilialByIdFilial().getIdFilial());					
					mapRetorno.put("documento.nrDocumento", fatura.getNrFatura());
					mapRetorno.put("vlRecebido", vlSaldo.add(itemRedeco.getVlJuros()).subtract(itemRedeco.getVlTarifa()));
					mapRetorno.put("vlDesconto", fatura.getVlDesconto());
					mapRetorno.put("vlJurosCalculados", fatura.getVlJuroCalculado());
					mapRetorno.put("vlDocumento", fatura.getVlTotal());
					
					if( Hibernate.isInitialized(fatura.getMoeda()) ){
						mapRetorno.put("moeda.siglaSimbolo",fatura.getMoeda().getSiglaSimbolo());
					}
				} else {
					DevedorDocServFat devedorDocServFat = ((ItemFatura)fatura.getItemFaturas().get(0)).getDevedorDocServFat();
					Filial filialOrigem = devedorDocServFat.getDoctoServico().getFilialByIdFilialOrigem(); 
					mapRetorno.put("documento.tpDocumento", devedorDocServFat.getDoctoServico().getTpDocumentoServico().getDescription());
					mapRetorno.put("documento.filial.sgFilial", filialOrigem.getSgFilial());
					mapRetorno.put("documento.filial.idFilial", filialOrigem.getIdFilial());
					mapRetorno.put("documento.nrDocumento", devedorDocServFat.getDoctoServico().getNrDoctoServico());
					
					BigDecimal vlRecebido = devedorDocServFat.getVlDevido();
					
					if (devedorDocServFat.getDesconto() != null){
						vlRecebido = vlRecebido.subtract((devedorDocServFat.getDesconto()).getVlDesconto());
						mapRetorno.put("vlDesconto", devedorDocServFat.getDesconto().getVlDesconto());
					} else {
						mapRetorno.put("vlDesconto", ZERO);
					}
					
					mapRetorno.put("vlRecebido", vlRecebido);
					mapRetorno.put("vlJurosCalculados", new BigDecimal(0));	
					mapRetorno.put("moeda.siglaSimbolo",devedorDocServFat.getDoctoServico().getMoeda().getSiglaSimbolo());
					mapRetorno.put("vlDocumento", devedorDocServFat.getVlDevido());
				}
			} else {
				Recibo recibo = itemRedeco.getRecibo();
				mapRetorno.put("documento.tpDocumento", "ROF");
				mapRetorno.put("documento.filial.sgFilial", recibo.getFilialByIdFilialEmissora().getSgFilial());
				mapRetorno.put("documento.filial.idFilial", recibo.getFilialByIdFilialEmissora().getIdFilial());
				mapRetorno.put("documento.nrDocumento", recibo.getNrRecibo());
				mapRetorno.put("vlRecebido", recibo.getVlTotalRecibo().add(itemRedeco.getVlJuros()).subtract(recibo.getVlTotalDesconto()));
				mapRetorno.put("vlDesconto", recibo.getVlTotalDesconto());
				mapRetorno.put("vlJurosCalculados", recibo.getVlTotalJuros());
				mapRetorno.put("vlDocumento", recibo.getVlTotalDocumentos());
				if( Hibernate.isInitialized(recibo.getCotacaoMoeda()) ){
					mapRetorno.put("moeda.siglaSimbolo",recibo.getCotacaoMoeda().getMoedaPais().getMoeda().getSiglaSimbolo());
				}
			}	
			lstRetorno.add(mapRetorno);
		}
		
		rsp.setList(lstRetorno);
		
		return rsp;
	}
	
	/**
	 * Conta o numero de registros da lista de item
	 * 
	 * @param parameters
	 * @return Integer
	 */
	public Integer getRowCountItemRedeco(Map parameters){	
		return getRowCountItemList(parameters, ITEM_REDECO);
	}

	/**
	 * Faz o somatorioo dos documentos 
	 * 
	 * @param idRedeco
	 * @return Map
	 */
	public Map findSomatorios(Long idRedeco){
		Map map = new HashMap();

		MasterEntry entry = getMasterFromSession(idRedeco, true);			
		ItemList items = getItemsFromSession(entry, ITEM_REDECO);
		ItemListConfig config = getMasterConfig().getItemListConfig(ITEM_REDECO);
		
		BigDecimal vlTotalRecebido = new BigDecimal(0.00);
		BigDecimal vlJuros = new BigDecimal(0.00);
		BigDecimal vlTarifas = new BigDecimal(0.00);
		BigDecimal vlDesconto = new BigDecimal(0.00);

		if (idRedeco != null) {
			Map<String, Object> findSomatoriosRedeco = getRedecoService().findSomatoriosRedeco(idRedeco);
			vlTotalRecebido = (BigDecimal) findSomatoriosRedeco.get("vl_total_recebido");
		}
		
		for (Iterator iter = items.iterator(idRedeco, config); iter.hasNext();) {
			ItemRedeco itemRedeco = (ItemRedeco)iter.next();
			if (itemRedeco.getFatura() != null){
				if (itemRedeco.getFatura().getIdFatura() != null){
					
					//vlTotalRecebido = vlTotalRecebido.add(itemRedeco.getFatura().getVlTotal());
					vlDesconto =  vlDesconto.add(itemRedeco.getFatura().getVlDesconto());
				} else {
					DevedorDocServFat dev = ((ItemFatura)itemRedeco.getFatura().getItemFaturas().get(0)).getDevedorDocServFat();
					//vlTotalRecebido = vlTotalRecebido.add(dev.getVlDevido());
					
					if ((dev.getDescontos() != null && !dev.getDescontos().isEmpty())){
						vlDesconto = vlDesconto.add(((Desconto)dev.getDescontos().get(0)).getVlDesconto());
					}
				}				
			} else {
				//vlTotalRecebido = vlTotalRecebido.add(itemRedeco.getRecibo().getVlTotalRecibo());
				vlDesconto = vlDesconto.add(itemRedeco.getRecibo().getVlTotalDesconto());
			}
			
			vlJuros = vlJuros.add(itemRedeco.getVlJuros());
			vlTarifas = vlTarifas.add(itemRedeco.getVlTarifa());
		}
		
		map.put("qtTotalDocumentos", Integer.valueOf(items.size()));
		map.put("vlTotalRecebido", vlTotalRecebido);

		return map;
	}
	
	/**
	 * Obtem o objeto ItemRedeco atrav�s dos dados populados nos parametros
	 * passados
	 * 
	 * @param map
	 * @param itemRedeco
	 * @return ItemRedeco
	 */
	private ItemRedeco mountItemRedeco(TypedFlatMap map, ItemRedeco itemRedeco){
		Long idDocumento = map.getLong("documento.idDocumento");
		String tpDocumento = map.getString("documento.tpDocumento");
		
		if (tpDocumento.equals("FAT") || tpDocumento.equals("NDI")){
			Fatura fatura = faturaService.findById(idDocumento);
			itemRedeco.setFatura(fatura);		
		} else if (tpDocumento.equals("ROF")){
			Recibo recibo = reciboService.findById(idDocumento);
			itemRedeco.setRecibo(recibo);		
		} else {
			DevedorDocServFat devedorDocServFat = devedorDocServFatService.findByIdWithDocumentoAndDesconto(idDocumento);
			Fatura fatura = new Fatura();
			List lstItemFatura = new ArrayList(1);
			ItemFatura itemFatura = new ItemFatura();			
			fatura.setItemFaturas(lstItemFatura);
			lstItemFatura.add(itemFatura);
			itemFatura.setDevedorDocServFat(devedorDocServFat);
			
			itemRedeco.setFatura(fatura);	
		}
		
		itemRedeco.setIdItemRedeco(map.getLong("idItemRedeco"));
		BigDecimal vlJurosRecebidos = new BigDecimal(0);
		
		if (map.getBigDecimal("vlJuros") != null) {
			vlJurosRecebidos = map.getBigDecimal("vlJuros");
		}
		
		itemRedeco.setVlJuros(vlJurosRecebidos);
		
		if (map.getBigDecimal("vlTarifa") != null){		
			itemRedeco.setVlTarifa(map.getBigDecimal("vlTarifa"));
		} else {
			itemRedeco.setVlTarifa(new BigDecimal(0));
		}
		
		if (map.getBigDecimal("vlDiferencaCambialCotacao") != null) {
			itemRedeco.setVlDiferencaCambialCotacao(map.getBigDecimal("vlDiferencaCambialCotacao"));
		} else {
			itemRedeco.setVlDiferencaCambialCotacao(ZERO);
		}
		
		itemRedeco.setObItemRedeco(map.getString("obItemRedeco"));

		return itemRedeco;
	}
	
	/**
	 * Obtem a rela��o de cobran�a atrav�s do idRedeco
	 * 
	 * @param idRedeco
	 * @return List
	 */
	public List findRelacaoCobranca(Long idRedeco){
		return relacaoCobrancaService.findByIdRedeco(idRedeco);
	}	
	
	/**
	 * Obtem o tipo de finalidade da Matriz
	 * @param criteria
	 * @return List
	 */
	public List findTpFinalidadeMatriz(Map criteria){
		return filterForFilialNaoMatriz(domainValueService.findDomainValues("DM_FINALIDADE_REDECO"), null);						
	}
	
	/**
	 * Obtem o tipo de finalidade da empresa de cobran�a
	 * 
	 * @param criteria
	 * @return List
	 */
	public List findTpFinalidadeEmpresaCobranca(Map criteria){
		List dominiosValidos = new ArrayList();
		// s� exisbir a op��o ""Lucros e Perdas" se a filial do usu�rio logado for a matriz
		Filial filialSessao = SessionUtils.getFilialSessao();
		if((filialSessao.getSgFilial()).equals("MTZ")){
        dominiosValidos.add("LP");
		}		
        dominiosValidos.add("EC");
        
        return domainValueService.findByDomainNameAndValues("DM_FINALIDADE_REDECO", dominiosValidos);						
	}	
	
	/**
	 * Obtem o tipo de finalidade atravpes do dominio DM_FINALIDADE_REDECO
	 * 
	 * @param criteria
	 * @return List
	 */
	public List findTpFinalidade(Map criteria){
		List<DomainValue> retorno = this.domainValueService.findDomainValues("DM_FINALIDADE_REDECO");
		Filial filialSessao = SessionUtils.getFilialSessao();
		
		if (filialSessao.getSgFilial().equals("MTZ")) {
			return filterForFilialMatriz(retorno, null);
		} else {
			return filterForFilialNaoMatriz(retorno, null);
		}
	}	

	
	public List findTpFinalidadeForEdition(Map criteria){
		Long idRedeco = Long.parseLong((String) criteria.get("idRedeco"));
		Redeco redeco = getRedecoService().findById(idRedeco);
		String currentFinalidade = redeco.getTpFinalidade().getValue();
		
		String sgFilial = (String) criteria.get("sgFilial");
		
		List<DomainValue> retorno = this.domainValueService.findDomainValues("DM_FINALIDADE_REDECO");
		
		if (sgFilial.equals("MTZ")) {
			return filterForFilialMatriz(retorno, currentFinalidade);
		} else {
			return filterForFilialNaoMatriz(retorno, currentFinalidade);
		}
	}
	
private List filterForFilialNaoMatriz(List<DomainValue> retorno, String currentFinalidade) {
		List<DomainValue> domainValues = new ArrayList<DomainValue>();
		
		Set<String> desiredValuesForMatriz = new HashSet<String>();
		desiredValuesForMatriz.add("CC");
		desiredValuesForMatriz.add("CF");
		if(currentFinalidade != null) {
			desiredValuesForMatriz.add(currentFinalidade);
		}

		for(DomainValue dv : retorno) {
			if (desiredValuesForMatriz.contains(dv.getValue())) {
				domainValues.add(dv);
			}
		}
		
		return domainValues;
	}

	private List filterForFilialMatriz(List<DomainValue> retorno, String currentFinalidade) {
		List<DomainValue> domainValues = new ArrayList<DomainValue>();
		
		Set<String> desiredValuesForMatriz = new HashSet<String>();
		desiredValuesForMatriz.add("CC");
		desiredValuesForMatriz.add("PR");
		desiredValuesForMatriz.add("DR");
		desiredValuesForMatriz.add("JU");
		desiredValuesForMatriz.add("OR");
		
		if(currentFinalidade != null) {
			desiredValuesForMatriz.add(currentFinalidade);
		}
		
		for(DomainValue dv : retorno) {
			if (desiredValuesForMatriz.contains(dv.getValue())) {
				domainValues.add(dv);
			}
		}
		
		return domainValues;
	}

	/**
	 * Obtem empresa de cobran�a
	 * 
	 * @param map
	 * @return List
	 */
	public List findEmpresaCobranca(Map map){
		return empresaCobrancaService.find(map);
	}
	
	/**
	 * Busca a filial do usu�rio logado como padr�o
	 * no campo filial de Cobran�a na aba listagem
	 *
	 * @author Jos� Rodrigo Moraes
	 * @since 19/09/2006
	 *
	 * @return Dados de filial (filial.idFilial, filial.sgFilial, filial.pessoa.nmFantasia)
	 */
	public TypedFlatMap findFilialSessao(){
		Filial filialSessao = SessionUtils.getFilialSessao();
		TypedFlatMap ret = new TypedFlatMap();
		
		ret.put("filial.idFilial",filialSessao.getIdFilial());
		ret.put("filial.sgFilial",filialSessao.getSgFilial());
		ret.put("filial.pessoa.nmFantasia",filialSessao.getPessoa().getNmFantasia());
		
		return ret;
	}
	
	/**
	 * Lookup de filial
	 * @param criteria
	 * @return
	 */
	public List findFilial(TypedFlatMap criteria) {
		return filialService.findLookup(criteria);
	}
	
	/**
	 * Obtem a fatura
	 * 
	 * @param map
	 * @return List
	 */
	public List findFatura(TypedFlatMap map){
		
		Long idFilial = map.getLong("filialByIdFilial.idFilial");	
		Long nrDocumento = map.getLong("nrFatura");		

		List lstFatura = faturaService.findByNrFaturaByFilial(nrDocumento, idFilial);
		
		if (lstFatura.size() == 1){
			TypedFlatMap mapRetorno = new TypedFlatMap();
			Fatura fat = (Fatura)lstFatura.get(0);
			
			mapRetorno.put("idFatura", fat.getIdFatura());
			mapRetorno.put("idDocumento", fat.getIdFatura());
			mapRetorno.put("nrFatura", fat.getNrFatura());
			mapRetorno.put("filialByIdFilial.idFilial", fat.getFilialByIdFilial().getIdFilial());
			mapRetorno.put("filialByIdFilial.sgFilial", fat.getFilialByIdFilial().getSgFilial());
			mapRetorno.put("filialByIdFilial.pessoa.nmFantasia", fat.getFilialByIdFilial().getPessoa().getNmFantasia());
			
			List lstRetorno = new ArrayList();
			
			lstRetorno.add(mapRetorno);
			
			return lstRetorno;
			
		} else {
			return lstFatura;
		}
	}
	
	/**
	 * Obtem o DevedorServDocFat 
	 * 
	 * @param map
	 * @return List
	 */
	public List findDevedorServDocFat(TypedFlatMap map){
		
		Long idFilial = map.getLong("doctoServico.filialByIdFilialOrigem.idFilial");	
		Long nrDocumento = map.getLong("doctoServico.nrDoctoServico");
		String tpDocumentoServico = map.getString("doctoServico.tpDocumentoServico");				

		DevedorDocServFatLookupParam devedorDocServFatLookupParam = new DevedorDocServFatLookupParam();
		
		devedorDocServFatLookupParam.setIdFilial(idFilial);
		devedorDocServFatLookupParam.setNrDocumentoServico(nrDocumento);
		devedorDocServFatLookupParam.setTpDocumentoServico(tpDocumentoServico);	
		
		List lstDevedor = this.devedorDocServFatLookUpService.findDevedorDocServFat(devedorDocServFatLookupParam);
		
		if (lstDevedor.size() == 1){
			TypedFlatMap mapRetorno = new TypedFlatMap();
			Map mapDevedor = (Map)lstDevedor.get(0);

			mapRetorno.put("idDocumento", mapDevedor.get("idDevedorDocServFat"));
			mapRetorno.put("idDevedorDocServFat", mapDevedor.get("idDevedorDocServFat"));
			mapRetorno.put("nrDoctoServico", mapDevedor.get("doctoServico_nrDoctoServico"));
			mapRetorno.put("idFilialOrigem", mapDevedor.get("idFilialOrigem"));
			mapRetorno.put("sgFilialOrigem", mapDevedor.get("sgFilialOrigem"));
			mapRetorno.put("idDoctoServico", mapDevedor.get("idDoctoServico"));
			
			List lstRetorno = new ArrayList();
			
			lstRetorno.add(mapRetorno);
			
			return lstRetorno;
			
		} else {
			return lstDevedor;
		}		
	}
	
	/**
	 * Obtem a nota de debito internacional
	 * 
	 * @param map
	 * @return List
	 */
	public List findNotaDebitoInternacional(TypedFlatMap map){
		
		Long idFilial = map.getLong("filialByIdFilial.idFilial");	
		Long nrNotaDebito = map.getLong("nrFatura");		

		List lstNotaDebito = notaDebitoInternacionalService.findByNrNotaDebitoByFilial(nrNotaDebito, idFilial);
		
		if (lstNotaDebito.size() == 1){
			TypedFlatMap mapRetorno = new TypedFlatMap();
			Fatura fat = (Fatura)lstNotaDebito.get(0);
			
			mapRetorno.put("idFatura", fat.getIdFatura());
			mapRetorno.put("idDocumento", fat.getIdFatura());
			mapRetorno.put("nrFatura", fat.getNrFatura());
			mapRetorno.put("filialByIdFilial.idFilial", fat.getFilialByIdFilial().getIdFilial());
			mapRetorno.put("filialByIdFilial.sgFilial", fat.getFilialByIdFilial().getSgFilial());
			mapRetorno.put("filialByIdFilial.pessoa.nmFantasia", fat.getFilialByIdFilial().getPessoa().getNmFantasia());
			
			List lstRetorno = new ArrayList();
			
			lstRetorno.add(mapRetorno);
			
			return lstRetorno;
			
		} else {
			return lstNotaDebito;
		}	
	}
	
	/**
	 * Obtem a lista de Recibos
	 * 
	 * @param map
	 * @return List
	 */
	public List findRecibo(TypedFlatMap map){
		
		Long idFilial = map.getLong("filialByIdFilial.idFilial");	
		Long nrRecibo = map.getLong("nrRecibo");		

		List lstRecibo = reciboService.findByNrReciboByFilial(nrRecibo, idFilial);
		
		if (lstRecibo.size() == 1){
			TypedFlatMap mapRetorno = new TypedFlatMap();
			Recibo rec = (Recibo)lstRecibo.get(0);
			
			mapRetorno.put("idRecibo", rec.getIdRecibo());
			mapRetorno.put("idDocumento", rec.getIdRecibo());
			mapRetorno.put("nrRecibo", rec.getNrRecibo());
			mapRetorno.put("filialByIdFilial.idFilial", rec.getFilialByIdFilialEmissora().getIdFilial());
			mapRetorno.put("filialByIdFilial.sgFilial", rec.getFilialByIdFilialEmissora().getSgFilial());
			mapRetorno.put("filialByIdFilial.pessoa.nmFantasia", rec.getFilialByIdFilialEmissora().getPessoa().getNmFantasia());
			
			List lstRetorno = new ArrayList();
			
			lstRetorno.add(mapRetorno);
			
			return lstRetorno;
			
		} else {
			return lstRecibo;
		}	
	}	

	/**
	 * Obtem a lista de Redeco atrav�s do mapa
	 * 
	 * @param criteria
	 * @return List
	 */
    public List findRedeco(TypedFlatMap criteria) {
    	return getRedecoService().findRedeco(criteria);
    }	
	
    /**
     * Faz a pagina��o do sistema atrav�s dos dados passados pelo Mapa
     * 
     */
	public ResultSetPage findPaginatedRedeco(TypedFlatMap criteria) {
		ResultSetPage rsp = getRedecoService().findPaginatedRedeco(criteria, criteria.getInteger("_currentPage"), criteria.getInteger("_pageSize"));
		
		List lstOriginal = rsp.getList();
		List lstRetorno = new ArrayList();
		
		for (Iterator iter = lstOriginal.iterator(); iter.hasNext();) {
			TypedFlatMap mapRetorno = new TypedFlatMap();
			Redeco redeco = (Redeco) iter.next();			
			
			mapRetorno.put("idRedeco", redeco.getIdRedeco());
			mapRetorno.put("nrRedeco", redeco.getNrRedeco());
			mapRetorno.put("sgFilial", redeco.getFilial().getSgFilial());
			if (Hibernate.isInitialized(redeco.getFilial().getPessoa()) ){
				mapRetorno.put("pessoa.nmFantasia", redeco.getFilial().getPessoa().getNmFantasia());
			}
			mapRetorno.put("idFilial", redeco.getFilial().getIdFilial());
			mapRetorno.put("dtEmissao", redeco.getDtEmissao());
			mapRetorno.put("dtLiquidacao", redeco.getDtLiquidacao());
			mapRetorno.put("tpSituacaoRedeco", redeco.getTpSituacaoRedeco());
			mapRetorno.put("tpSituacaoWorkflow", redeco.getTpSituacaoWorkflow());
			mapRetorno.put("tpRecebimento", redeco.getTpRecebimento());
			mapRetorno.put("tpFinalidade", redeco.getTpFinalidade());
			mapRetorno.put("moeda.siglaSimbolo", redeco.getMoeda().getSiglaSimbolo());
			
			lstRetorno.add(mapRetorno);
		}
		
		rsp.setList(lstRetorno);
		
		return rsp;
	}

	/**
	 * Retorna o total de paginas 
	 * 
	 */
	public Integer getRowCount(TypedFlatMap criteria) {
		return getRedecoService().getRowCount(criteria);
	}
	
	
	/**
	 * Verifica se a finalidade � Lucros e Perdas ou Cobran�a Jur�dica ou Empresa de cobran�a.
	 * Se for uma destas o valor recebido deve ser igual ao valor do documento e as valida��es
	 * de diferen�a n�o devem ser aplicadas.
	 *
	 * @author Jos� Rodrigo Moraes
	 * @since 25/09/2006
	 *
	 * @param tipoFinalidade Tipo da finalidade
	 * @return
	 */
	private boolean verificaFinalidade(String tipoFinalidade) {
		if( tipoFinalidade.equalsIgnoreCase("LP") || 
			tipoFinalidade.equalsIgnoreCase("CJ") || 
			tipoFinalidade.equalsIgnoreCase("EC") ){
			return true;
		}	
		return false;
	}

	/**
	 * Retorna os dados de inicializa��o da tela
	 * 
	 * @author Micka�l Jalbert
	 * @since 10/07/2006
	 * 
	 * @return Map
	 */
	public Map findDadosInicial(){
		TypedFlatMap mapRetorno = new TypedFlatMap();
		
		mapRetorno.put("blMatriz", Boolean.valueOf(SessionUtils.isFilialSessaoMatriz()));
		
		mapRetorno.put("idFilial", SessionUtils.getFilialSessao().getIdFilial());
		mapRetorno.put("sgFilial", SessionUtils.getFilialSessao().getSgFilial());
		mapRetorno.put("nmFantasia", SessionUtils.getFilialSessao().getPessoa().getNmFantasia());
		
		DomainValue domainValue = domainValueService.findDomainValueByValue("DM_STATUS_REDECO", "DI");
		
		mapRetorno.put("tpSituacaoRedeco", domainValue.getDescription());
		
		mapRetorno.put("dtEmissao", JTDateTimeUtils.getDataAtual());
		mapRetorno.put("dtRecebimento", JTDateTimeUtils.getDataAtual());
		
		return mapRetorno;
	}
	
	/**
	 * Emite o Redeco
	 * 
	 * @param  map
	 * @return Map
	 * @throws Exception
	 */
	public Map emitirRedeco(TypedFlatMap map) throws Exception {
		if (map.getString("tpAbrangencia").equals("N")){
			Long idRedeco = map.getLong("redeco.idRedeco");
			
			String relPath  = this.reportExecutionManager.generateReportLocator(this.emitirRedecoService, map);
			
			Redeco redeco = getRedecoService().findByIdTela(idRedeco);
			
			putMasterInSession(redeco);
			
			TypedFlatMap retorno = mountMap(redeco);
			
			retorno.put("relatorio", relPath);			
			
			return retorno;
		} else {
			throw new BusinessException("LMS-36150");
		}
	}
	
	/**
	 * Emite o desconto
	 * 
	 * @param map
	 * @return
	 * @throws Exception
	 */
	public File emitirReciboDesconto(TypedFlatMap map) throws Exception{
		return emitirRecibosDescontosFretesAction.execute(map);
	}	

	/**
	 * Baixa o Redeco atualizando os dados necess�rios
	 * 
	 * @param  criteria
	 * @return Map
	 * @throws Exception
	 */
	public Map baixarRedeco(TypedFlatMap criteria) throws Exception{
		//LMSA-2362
		Long idRedeco = criteria.getLong("idRedeco");
		YearMonthDay dataLiquidacao = criteria.getYearMonthDay("dtLiquidacao");
		YearMonthDay maiorDtPagamento = composicaoPagamentoRedecoService.findMaiorDataCredito(idRedeco);
		if (null != maiorDtPagamento && JTDateTimeUtils.comparaData(maiorDtPagamento, dataLiquidacao) > 0) {
			throw new BusinessException("LMS-36380");
		}
		
		MasterEntry entry = getMasterFromSession(idRedeco, true);
		ItemList items = getItemsFromSession(entry, ITEM_REDECO);
		Redeco redeco = (Redeco)entry.getMaster();		

		redeco.setDtLiquidacao(dataLiquidacao);
		
		gerarBaixaRedecoService.executeBaixaRedeco(redeco,items);
		
		String strRelatorio = null;
		
		TypedFlatMap retorno = mountMap(redeco);
		retorno.put("relatorio", strRelatorio);
		updateMasterInSession(entry);
		return retorno;
		
	}	
	
	/**
	 * Carrega a combo de tipo de documentos.
	 * 
	 * Hector Julian Esnaola Junior
	 * 06/03/2008
	 *
	 * @param criteria
	 * @return
	 *
	 * List
	 *
	 */
	public List findComboTpDocumento(TypedFlatMap criteria) {
		List domainValues;
		String blLmsIntegradoCorporativo = (String)configuracoesFacade
				.getValorParametro("BL_LMS_INTEGRADO_CORPORATIVO");

		if ("S".equals(blLmsIntegradoCorporativo)) {
			String tpDocFat2 = (String)configuracoesFacade
			.getValorParametro("TP_DOCTO_FAT2");

			String[] dm = tpDocFat2.split(";");
			List dominiosValidos = Arrays.asList(dm);
			domainValues = domainValueService.findByDomainNameAndValues("DM_TIPO_DOCUMENTO_REDECO", dominiosValidos);
		} else {
			domainValues = domainValueService.findDomainValues("DM_TIPO_DOCUMENTO_REDECO");
		}
		
		return domainValues;
	}

    public TypedFlatMap validateBeforeConcluirDigitacao(Long idRedeco) {
		Map<String, Object> findSomatorio = getRedecoService().findSomatoriosRedeco(idRedeco);

		BigDecimal vlTotalCompPagto = (BigDecimal) findSomatorio.get("vl_total_comp_pagto");
		BigDecimal vlTotalRecebido = (BigDecimal) findSomatorio.get("vl_total_recebido");
		BigDecimal vlTotalRecebidoSemJuros = (BigDecimal) findSomatorio.get("vl_total_recebido_sem_juros");
		BigDecimal vlTotalJuros = (BigDecimal) findSomatorio.get("vl_total_juros");
		BigDecimal vlTotalTarifa = (BigDecimal) findSomatorio.get("vl_total_tarifa");
		
    	TypedFlatMap mapRetorno = new TypedFlatMap();
		mapRetorno.put("vlLiquidoLtVlTotalReceb", CompareUtils.lt(vlTotalCompPagto, vlTotalRecebido));
		mapRetorno.put("vlLiquidoEqualsVlTotalReceb", CompareUtils.eq(vlTotalCompPagto, vlTotalRecebido));
		mapRetorno.put("errorMessage", configuracoesFacade.getMensagem("LMS-36248", new Object[]{vlTotalRecebido,vlTotalCompPagto,(vlTotalRecebido.subtract(vlTotalCompPagto))}));
		mapRetorno.put("redecoSemCompPagto", (CompareUtils.gt(vlTotalRecebido, BigDecimal.ZERO) && CompareUtils.eq(vlTotalCompPagto, BigDecimal.ZERO)));
		mapRetorno.put("errorMessage2", configuracoesFacade.getMensagem("LMS-36373"));
		mapRetorno.put("travaJuros", "false");

		//LMSA-2772
		List<ComposicaoPagamentoRedeco> composicaoPagamentoRedecos = composicaoPagamentoRedecoService.findByIdRedecoTpComposicao(idRedeco, "T");
		if (null != composicaoPagamentoRedecos && composicaoPagamentoRedecos.size() > 0) {
				if (!getRedecoService().findValidaFiliaisFatura(idRedeco)) {
					mapRetorno.put("encContasFilDif", "true");
					mapRetorno.put("encContasFilDifMessage", configuracoesFacade.getMensagem("LMS-36381"));
					
				}
		}

		List itensRedeco = ((RedecoService)getMasterService()).findItemRedeco(idRedeco);
		mapRetorno.put("nrItensRedecoMaiorQueUm", "false");
		if (itensRedeco.size() > 1) {
			mapRetorno.put("nrItensRedecoMaiorQueUm", "true");
			mapRetorno.put("nrItensRedecoMaiorQueUmMessage", configuracoesFacade.getMensagem("LMS-36369"));
 		}

    	return mapRetorno;
    }

	public String execute(TypedFlatMap criteria) throws Exception {
		return reportExecutionManager.generateReportLocator(
				getRedecoService().executeExportacaoCsv(criteria, reportExecutionManager.generateOutputDir()));
	}
    	
	public List findLookupFatura(TypedFlatMap criteria) {
		return AliasToNestedMapResultTransformer.getInstance()
				.transformListResult(
						faturaService.findLookupFatura(
								this.mountFaturaLookupParam(criteria),
								"LMS-36111"));
    }
    	
	private FaturaLookupParam mountFaturaLookupParam(TypedFlatMap criteria) {

		FaturaLookupParam faturaLookupParam = new FaturaLookupParam();

		/** Seta os atributos da FaturaLookupParam */
		faturaLookupParam.setIdFilialFaturamentoFatura(criteria.getLong("filialByIdFilial.idFilial"));
		faturaLookupParam.setNrFatura(criteria.getLong("nrFatura"));
		faturaLookupParam.setTpSituacaoFaturaValido(criteria.getInteger("tpSituacaoFaturaValido"));

		return faturaLookupParam;
	}
    
    
	/**
	 * Valida se a situ��o do boleto e da fatura.
	 * 
	 * Hector Julian Esnaola Junior
	 * 07/01/2008
	 *
	 * @param criteria
	 *
	 * void
	 *
	 */
	public void validateTpSituacaoFatura(TypedFlatMap criteria){
		faturaService.validateTpSituacaoBoletoFromFatura(criteria.getLong("idFatura"), criteria.getString("tipoFinalidade"));
		faturaService.validateTpSituacaoFatura(criteria.getLong("idFatura"), criteria.getString("tipoFinalidade"));
	}

	public void setEmpresaCobrancaService(
			EmpresaCobrancaService empresaCobrancaService) {
		this.empresaCobrancaService = empresaCobrancaService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public void setRedecoService(RedecoService redecoService) {
		super.setMasterService(redecoService);
	}

	public RedecoService getRedecoService() {
		return (RedecoService)super.getMasterService();
	}

	@Override
	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}

	public void setRelacaoCobrancaService(
			RelacaoCobrancaService relacaoCobrancaService) {
		this.relacaoCobrancaService = relacaoCobrancaService;
	}

	public void setFaturaService(FaturaService faturaService) {
		this.faturaService = faturaService;
	}

	public void setDevedorDocServFatLookUpService(
			DevedorDocServFatLookUpService devedorDocServFatLookUpService) {
		this.devedorDocServFatLookUpService = devedorDocServFatLookUpService;
	}

	public void setNotaDebitoInternacionalService(
			NotaDebitoInternacionalService notaDebitoInternacionalService) {
		this.notaDebitoInternacionalService = notaDebitoInternacionalService;
	}

	public void setReciboService(ReciboService reciboService) {
		this.reciboService = reciboService;
	}

	public void setDevedorDocServFatService(
			DevedorDocServFatService devedorDocServFatService) {
		this.devedorDocServFatService = devedorDocServFatService;
	}

	public void setEmitirRedecoService(EmitirRedecoService emitirRedecoService) {
		this.emitirRedecoService = emitirRedecoService;
	}

	public void setEmitirRecibosDescontosFretesAction(
			EmitirRecibosDescontosFretesAction emitirRecibosDescontosFretesAction) {
		this.emitirRecibosDescontosFretesAction = emitirRecibosDescontosFretesAction;
	}

	public void setGerarBaixaRedecoService(
			GerarBaixaRedecoService gerarBaixaRedecoService) {
		this.gerarBaixaRedecoService = gerarBaixaRedecoService;
	}

	public void setReciboDescontoService(ReciboDescontoService reciboDescontoService) {
		this.reciboDescontoService = reciboDescontoService;
	}

	public void setReportExecutionManager(
			ReportExecutionManager reportExecutionManager) {
		this.reportExecutionManager = reportExecutionManager;
	}

	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}

	public void setComposicaoPagamentoRedecoService(
			ComposicaoPagamentoRedecoService composicaoPagamentoRedecoService) {
		this.composicaoPagamentoRedecoService = composicaoPagamentoRedecoService;
	}

	public void setItemRedecoService(ItemRedecoService itemRedecoService) {
		this.itemRedecoService = itemRedecoService;
	}

	public ItemRedecoService getItemRedecoService() {
		return itemRedecoService;
	}

	public RelacaoPagtoParcialService getRelacaoPagtoParcialService() {
		return relacaoPagtoParcialService;
	}

	public void setRelacaoPagtoParcialService(
			RelacaoPagtoParcialService relacaoPagtoParcialService) {
		this.relacaoPagtoParcialService = relacaoPagtoParcialService;
	}

	public void setDoctoServicoService(DoctoServicoService doctoServicoService) {
		this.doctoServicoService = doctoServicoService;
	}
	
}