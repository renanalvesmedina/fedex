package com.mercurio.lms.contasreceber.action;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.hibernate.VarcharI18n;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.EnderecoPessoa;
import com.mercurio.lms.configuracoes.model.Moeda;
import com.mercurio.lms.configuracoes.model.service.EnderecoPessoaService;
import com.mercurio.lms.configuracoes.model.service.MoedaService;
import com.mercurio.lms.contasreceber.model.DemonstrativoDesconto;
import com.mercurio.lms.contasreceber.model.Desconto;
import com.mercurio.lms.contasreceber.model.ReciboDesconto;
import com.mercurio.lms.contasreceber.model.service.DemonstrativoDescontoService;
import com.mercurio.lms.contasreceber.model.service.DescontoService;
import com.mercurio.lms.contasreceber.model.service.ReciboDescontoService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.Pais;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTFormatUtils;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contasreceber.consultarReciboDemonstrativoDescontoAction"
 */
public class ConsultarReciboDemonstrativoDescontoAction extends CrudAction {
	
	private FilialService filialService;
	private DescontoService descontoService;
	private ReciboDescontoService reciboDescontoService;
	private DemonstrativoDescontoService demonstrativoDescontoService;
	private DomainValueService domainValueService;
	private EnderecoPessoaService enderecoPessoaService;
	private MoedaService moedaService;
	
    /**
	 * Busca a filial do usuário e verifica se a filial do usuário é a Matriz
	 * @param tfm Critérios de pesquisa
	 * @return TypedFlatMap com dados de filial e a informação se a filial é ou não a Matriz
	 * 
	 * @Diego Umpierre
	 * 02/06/2006
	 */
	public TypedFlatMap findFilialUsuario(TypedFlatMap tfm){
		
		Filial filialUsuario = SessionUtils.getFilialSessao();
		
		tfm = new TypedFlatMap();
		
		tfm.put("filial.idFilial",filialUsuario.getIdFilial());
		tfm.put("filial.sgFilial",filialUsuario.getSgFilial());
		tfm.put("filial.pessoa.nmFantasia",filialUsuario.getPessoa().getNmFantasia());

		return tfm;
	}

	/**
	 * Busca as filiais de acordo com a sigla
	 * @param map sgFilial : Sigla da filial informada na lookup
	 * @return Lista de filiais
	 */
	public List findLookupFilial(Map map){
		return filialService.findLookupBySgFilial(map);
	}
	
	/**
	 * Busca o número de registros que será exibido na grid
	 * @param tfm Critérios de pesquisa : tpDesconto e idReciboDemonstrativo
	 * @return Inteiro representando o número de resultados da pesquisa para a grid
	 */
	public Integer getRowCountByReciboDemonstrativo(TypedFlatMap tfm) {		
		return descontoService.getRowCountByReciboDemonstrativo(tfm);
	}
	
	/**
	 * Faz a pesquisa que será exibida na grid
	 * @param tfm Critérios de pesquisa : tpDesconto e idReciboDemonstrativo
	 * @return ResultSetPage Dados da pesquisa e dados de paginação
	 */
	public ResultSetPage findPaginatedByReciboDemonstrativo(TypedFlatMap tfm) {
		
		ResultSetPage rsp = descontoService.findPaginatedByReciboDemonstrativo(tfm);
		
		List resultado = rsp.getList();
		List alterada = new ArrayList();
		Map map = null;
		int contador = 0;
		
		for (Iterator iter = resultado.iterator(); iter.hasNext();) {
			
			Object[] element = (Object[]) iter.next();
			
			map = new HashMap();
			
			map.put("idGeral",Integer.valueOf(contador));
			map.put("idReciboDemonstrativo",(Long)element[0]);
			map.put("tpDesconto",(String)element[1]);
			map.put("sgFilialOrigem",(String)element[2]);
			map.put("nrDesconto",(Long)element[3]);
			map.put("tpSituacao",(String)element[4]);
			map.put("tpSituacaoAprovacao",(String)element[5]);
			map.put("dtEmissao",JTFormatUtils.format((Date)element[6]));
			map.put("vlDesconto", (BigDecimal)element[7]);
			map.put("sgMoeda", (String) element[8]);
			map.put("dsSimbolo", (String) element[9]);
			map.put("tipoDesconto", (String) element[10]);
			
			contador++;
			
			alterada.add(map);
			
		}
		rsp.setList(alterada);
		
		return rsp;
		
	}
	
	/**
	 * Busca um Recibo Desconto ou um Demonstrativo Desconto
	 * @param tfm idReciboDemonstrativo : Identificador do objeto de busca
	 *            tpDescontoSelecionado : tipo de desconto selecionado (Recibo ou Demonstrativo)
	 * @return Map de dados
	 */
	public List findByIdFromReciboDemonstrativo(TypedFlatMap tfm) {
		
		String tpDesconto = tfm.getString("tpDescontoSelecionado");
		
		Long id = tfm.getLong("idReciboDemonstrativo");
		
		String desabilitaBotao =tfm.getString("desabilitaBotao");
		if ( desabilitaBotao == null ) desabilitaBotao = "false";
		
		List lista = new ArrayList();		
		ReciboDesconto rd = null;
		DemonstrativoDesconto dd = null;
		
		TypedFlatMap map = new TypedFlatMap();
		
		if( tpDesconto.equals("R") ){
			
			rd = reciboDescontoService.findById(id);
			
	    	Moeda moeda = buscaMoedaPadraoFilial(rd.getFilial().getIdFilial());
			
			map.put("idReciboDemonstrativo",rd.getIdReciboDesconto());
			map.put("tpDesconto",(domainValueService.findDomainValueByValue("DM_RECIBO_DEMONSTRATIVO","R")).getDescription());
			map.put("sgFilial",rd.getFilial().getSgFilial());
			map.put("nrDesconto",rd.getNrReciboDesconto());
			map.put("tpSituacao",rd.getTpSituacaoReciboDesconto());
			map.put("tpSituacaoAprovacao",rd.getTpSituacaoAprovacao());
			map.put("dtEmissaoInicial",JTFormatUtils.format(rd.getDtEmissao()));
			map.put("siglaSimbolo",moeda.getSiglaSimbolo());
			map.put("vlDesconto", rd.getVlReciboDesconto());
			map.put("observacao",rd.getObReciboDesconto());
			map.put("idFilial",rd.getFilial().getIdFilial());
			map.put("nmFilial",rd.getFilial().getPessoa().getNmFantasia());
			map.put("tpTipoDesconto","R");
			
			if (rd.getPendencia() != null){
				map.put("pendencia.idPendencia", rd.getPendencia().getIdPendencia());
			}
			
//			 controle para desabilitar os botoes
			map.put("desabilitaBotao",desabilitaBotao);
			
			lista.add(map);
			
		} else if( tpDesconto.equals("D") ){
			
			dd = demonstrativoDescontoService.findById(id);
			
			Moeda moeda = buscaMoedaPadraoFilial(dd.getFilial().getIdFilial());
			
			map.put("idReciboDemonstrativo",dd.getIdDemonstrativoDesconto());
			map.put("tpDesconto",(domainValueService.findDomainValueByValue("DM_RECIBO_DEMONSTRATIVO","D")).getDescription());
			map.put("sgFilial",dd.getFilial().getSgFilial());
			map.put("nrDesconto",dd.getNrDemonstrativoDesconto());
			map.put("tpSituacao",dd.getTpSituacaoDemonstrativoDesc());
			map.put("dtEmissaoInicial",JTFormatUtils.format(dd.getDtEmissao()));
			map.put("siglaSimbolo",moeda.getSiglaSimbolo());
			map.put("vlDesconto",dd.getVlDemonstrativoDesconto());
			map.put("observacao",dd.getObDemonstrativoDesconto());
			map.put("idFilial",dd.getFilial().getIdFilial());
			map.put("nmFilial",dd.getFilial().getPessoa().getNmFantasia());
			map.put("tpTipoDesconto","D");

			// controle para desabilitar os botoes
			map.put("desabilitaBotao",desabilitaBotao);

			lista.add(map);
		}
		return lista;		
	}

	/**
	 * Busca a Moeda padrão da filial passada por parâmetro
	 * @param idFilial Identificador da filial
	 * @return Moeda padrão da filial
	 */
	private Moeda buscaMoedaPadraoFilial(Long idFilial) {
		//obtem o enderecopessoa padrao da pessoa
    	EnderecoPessoa enderecoPessoa = enderecoPessoaService.findEnderecoPessoaPadrao(idFilial);

    	// obtem o pais via enderecopessoa
    	Pais pais = enderecoPessoa.getMunicipio().getUnidadeFederativa().getPais();

    	// retorna a moeda padrao do pais
    	return moedaService.findMoedaPadraoByPais(pais.getIdPais());
	}

	/**
	 * Método chamado ao clicar no botão Reenviar Recibo na aba Detalhamento
	 * Marca o recibo desconto com a data de transmissão como nula
	 * @param tfm idReciboDemonstrativo Identificador do Recibo a ser reenviado
	 */
	public void executeReenviarRecibo(TypedFlatMap tfm){
		Long idRecibo = tfm.getLong("idReciboDemonstrativo");
		reciboDescontoService.executeReenviarRecibo(idRecibo);
	}
	
	/**
	 * Método de Cancelamento de Tipos de Desconto (Recibo ou Demonstrativo)
	 * @param tfm idReciboDemonstrativo : Identificador do ReciboDesconto ou Demonstrativo Desconto
	 *            tpDescontoSelecionado : Identifica Recibo ou Demonstrativo
	 */
	public Map executeCancelar(TypedFlatMap tfm){
		
		Long idReciboDemonstrativo = tfm.getLong("idReciboDemonstrativo");
		String tpDesconto = tfm.getString("tpDescontoSelecionado");
		
		TypedFlatMap tp = new TypedFlatMap();
		
		if( tpDesconto.equals("R") ){//Recibo Desconto
			
			ReciboDesconto rd = reciboDescontoService.executeCancelar(idReciboDemonstrativo,tpDesconto);
			
			tp.put("tpSituacaoAprovacao", domainValueService.findDomainValueByValue("DM_STATUS_WORKFLOW",rd.getTpSituacaoAprovacao().getValue()).getDescription()); 
			tp.put("idPendencia", rd.getPendencia().getIdPendencia());
			
		} else if( tpDesconto.equals("D") ){//Demonstrativo Desconto
			
			demonstrativoDescontoService.executeCancelar(idReciboDemonstrativo,tpDesconto);
		}
		return tp;
	}
	
	/**
	 * Busca quantos dados serão exibidos na listagem da aba Documento de Serviço
	 * @param tfm Critérios de pesquisa
	 * @return Inteiro representando a quantidade de dados resultante da pesquisa
	 */
	public Integer getRowCountDadosListagemAbaDocumentosServico(TypedFlatMap tfm){		
		return descontoService.getRowCountDadosListagemAbaDocumentosServico(tfm);
	}
	
	/**
	 * Busca dados para a listagem da aba Documento de Serviço
	 * @param tfm Critérios de pesquisa
	 * @return Lista de dados
	 */
	public ResultSetPage findDadosListagemAbaDocumentosServico(TypedFlatMap tfm){
		
		ResultSetPage retorno = descontoService.findDadosListagemAbaDocumentosServico(tfm);
		
		List result = retorno.getList();
		Map nova = null;
		List novaLista = new ArrayList();
		int contador = 0;
		
		for (Iterator iter = result.iterator(); iter.hasNext();) {
			
			Map element = (Map) iter.next();
			
			nova = new HashMap();
			
			Moeda moeda = buscaMoedaPadraoFilial((Long) element.get("idFilialOrigem"));			
			
			nova.put("idGeral",Integer.valueOf(contador));
			nova.put("idReciboDemonstrativo",(Long)element.get("idReciboDemonstrativo"));
			nova.put("tpDocumentoServico",((DomainValue)element.get("tpDocumentoServico")).getDescription());
			nova.put("sgFilialOrigem",(String)element.get("sgFilialOrigem"));
			nova.put("nrDocumentoServico",FormatUtils.formataNrDocumento(((Long)element.get("nrDocumento")).toString(),((DomainValue)element.get("tpDocumentoServico")).getValue()));
			
			nova.put("nrIdentificacao",FormatUtils.formatIdentificacao((DomainValue)element.get("tpIdentificacao"), (String) element.get("nrIdentificacao")));
			nova.put("nmCliente",(String) element.get("nmCliente"));
			nova.put("clienteResponsavel",FormatUtils.formatIdentificacao((DomainValue)element.get("tpIdentificacao"),
					                                                      (String) element.get("nrIdentificacao")) + " - " + (String) element.get("nmCliente"));
			
			String tpTipoDesconto = (String) element.get("tpTipoDesconto");
			
			if( tpTipoDesconto.equals("R") ){
				Long idDesconto = (Long)element.get("idDesconto");
				Desconto desc = (Desconto) descontoService.findByIdSimple(idDesconto);
				nova.put("tpSituacaoAprovacao",desc.getTpSituacaoAprovacao());
				nova.put("dsSituacaoAprovacao",desc.getTpSituacaoAprovacao().getDescription().getValue());
			} 
			
			nova.put("sgMoeda",moeda.getSgMoeda());
			nova.put("sgMoedaFrete",moeda.getSgMoeda());
			
			nova.put("dsSimbolo",moeda.getDsSimbolo());
			nova.put("dsSimboloFrete",moeda.getDsSimbolo());
			
			nova.put("siglaSimboloDesconto",moeda.getSiglaSimbolo());
			nova.put("vlDesconto",(BigDecimal)element.get("vlDesconto"));
			nova.put("siglaSimboloDocumento",moeda.getSiglaSimbolo());
			nova.put("vlFrete",(BigDecimal)element.get("vlDevido"));
			nova.put("dsMotivoDesconto",((VarcharI18n)element.get("motivoDesconto")).getValue());
			nova.put("observacao",(String)element.get("observacao"));
			
			contador++;
			
			novaLista.add(nova);
		}
		
		retorno.setList(novaLista);
		
		return retorno;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public void setDescontoService(DescontoService descontoService) {
		this.descontoService = descontoService;
	}

	public void setReciboDescontoService(ReciboDescontoService reciboDescontoService) {
		this.reciboDescontoService = reciboDescontoService;
	}

	public void setDemonstrativoDescontoService(
			DemonstrativoDescontoService demonstrativoDescontoService) {
		this.demonstrativoDescontoService = demonstrativoDescontoService;
	}

	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}

	public void setEnderecoPessoaService(EnderecoPessoaService enderecoPessoaService) {
		this.enderecoPessoaService = enderecoPessoaService;
	}

	public void setMoedaService(MoedaService moedaService) {
		this.moedaService = moedaService;
	}
}