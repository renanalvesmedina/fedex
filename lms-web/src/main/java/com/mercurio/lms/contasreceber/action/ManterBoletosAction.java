package com.mercurio.lms.contasreceber.action;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.joda.time.DateTime;
import org.joda.time.YearMonthDay;

import com.mercurio.adsm.core.util.Base64Util;
import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.FindDefinition;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.masterdetail.ItemList;
import com.mercurio.adsm.framework.model.masterdetail.ItemListConfig;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailAction;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailFactory;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailKey;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntry;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntryConfig;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.model.util.AliasToTypedFlatMapResultTransformer;
import com.mercurio.adsm.framework.report.ReportExecutionManager;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.CotacaoMoeda;
import com.mercurio.lms.configuracoes.model.EnderecoPessoa;
import com.mercurio.lms.configuracoes.model.service.BancoService;
import com.mercurio.lms.configuracoes.model.service.EnderecoPessoaService;
import com.mercurio.lms.contasreceber.BoletoFacade;
import com.mercurio.lms.contasreceber.model.Boleto;
import com.mercurio.lms.contasreceber.model.BoletoAnexo;
import com.mercurio.lms.contasreceber.model.Cedente;
import com.mercurio.lms.contasreceber.model.Desconto;
import com.mercurio.lms.contasreceber.model.DevedorDocServFat;
import com.mercurio.lms.contasreceber.model.Fatura;
import com.mercurio.lms.contasreceber.model.HistoricoBoleto;
import com.mercurio.lms.contasreceber.model.MotivoOcorrencia;
import com.mercurio.lms.contasreceber.model.RelacaoPagtoParcial;
import com.mercurio.lms.contasreceber.model.param.BoletoParam;
import com.mercurio.lms.contasreceber.model.param.DevedorDocServFatLookupParam;
import com.mercurio.lms.contasreceber.model.param.DivisaoClienteParam;
import com.mercurio.lms.contasreceber.model.service.BoletoAnexoService;
import com.mercurio.lms.contasreceber.model.service.BoletoService;
import com.mercurio.lms.contasreceber.model.service.CedenteService;
import com.mercurio.lms.contasreceber.model.service.DescontoService;
import com.mercurio.lms.contasreceber.model.service.DevedorDocServFatLookUpService;
import com.mercurio.lms.contasreceber.model.service.DevedorDocServFatService;
import com.mercurio.lms.contasreceber.model.service.FaturaService;
import com.mercurio.lms.contasreceber.model.service.HistoricoBoletoService;
import com.mercurio.lms.contasreceber.model.service.MotivoOcorrenciaService;
import com.mercurio.lms.contasreceber.model.service.RelacaoPagtoParcialService;
import com.mercurio.lms.contasreceber.report.EmitirBoletoService;
import com.mercurio.lms.contasreceber.util.DataVencimentoService;
import com.mercurio.lms.expedicao.model.DoctoServico;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.model.service.DoctoServicoService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.BigDecimalUtils;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.service.ClienteService;


/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contasreceber.manterBoletosAction"
 */

public class ManterBoletosAction extends MasterDetailAction {
	
	private static final String TP_MANUTENCAO_FATURA = "tpManutencaoFatura";

	private Logger log = LogManager.getLogger(this.getClass());
	private String BOLETO_ANEXO_CONFIG_ALIAS = "BOLETO_ANEXO_CONFIG_ALIAS"; 
	private EmitirBoletoService emitirBoletoService;
	private ReportExecutionManager reportExecutionManager;
	private FilialService filialService;
	private CedenteService cedenteService;
	private ClienteService clienteService;
	private BancoService bancoService;
	private DevedorDocServFatLookUpService devedorDocServFatLookUpService;
	private DevedorDocServFatService devedorDocServFatService;
	private DoctoServicoService doctoServicoService;
	private FaturaService faturaService;
	private EnderecoPessoaService enderecoPessoaService;
	private DescontoService descontoService;
	private MotivoOcorrenciaService motivoOcorrenciaService;
	private BoletoFacade boletoFacade;
	private HistoricoBoletoService historicoBoletoService;
	private DataVencimentoService dataVencimentoService;
	private ConhecimentoService conhecimentoService;
	private ConfiguracoesFacade configuracoesFacade;
	private DomainValueService domainValueService;
	private BoletoAnexoService boletoAnexoService;
	private RelacaoPagtoParcialService relacaoPagtoParcialService;
	
	public BoletoService getBoletoService() {
		return (BoletoService)getMasterService() ;
	}	
	
	public void setBoletoService(BoletoService boletoService) {
		setMasterService(boletoService);
	}
	
	public YearMonthDay findDataAtual(){
		return JTDateTimeUtils.getDataAtual();
	}
	
	public TypedFlatMap findPaisSessao(){
		TypedFlatMap retorno = new TypedFlatMap();
		
		retorno.put("idPaisCotacao", SessionUtils.getPaisSessao().getIdPais());
		retorno.put("nmPaisCotacao", SessionUtils.getPaisSessao().getNmPais());
		
		return retorno;
	}
	
	public TypedFlatMap findFilialUsuario(){
		TypedFlatMap retorno = new TypedFlatMap();
		
		retorno.put("idFilial", SessionUtils.getFilialSessao().getIdFilial());
		retorno.put("sgFilial", SessionUtils.getFilialSessao().getSgFilial());
		retorno.put("nmFantasia", SessionUtils.getFilialSessao().getPessoa().getNmFantasia());
		
		return retorno;
	}

	@SuppressWarnings("rawtypes")
	public Map store(TypedFlatMap map) {
		MasterEntry master = getMasterFromSession(map.getLong("idBoleto"), true);
        ItemList listDescontos = getItemsFromSession(master, BOLETO_ANEXO_CONFIG_ALIAS);
		
		Boleto boleto = mountBoleto(map, (Boleto) master.getMaster());
		
		//Se é um novo boleto e que o documento não é uma fatura e que o documento não está numa fatura
	    if (map.getLong("idBoleto") == null && !map.getString("documento.tpDocumento").equals("FAT") && boleto.getFatura().getIdFatura() == null){
	    	DevedorDocServFat devedorDocServFat = devedorDocServFatService.findById(map.getLong("documento.idDocumento"));

	    	boleto = boletoFacade.store(boleto, devedorDocServFat, listDescontos);
	    // Caso esteja editando um boleto ou seja uma fatura
	    } else {
	    	boleto = boletoFacade.store(boleto, listDescontos);		    	
	    }
	    
	    return findById(boleto.getIdBoleto());
	}
	
	private Boleto mountBoleto(TypedFlatMap map, Boleto boletoBase){
		Boleto boleto = boletoBase;
		
		Cedente cedente = new Cedente();
		cedente.setIdCedente(map.getLong("cedente.idCedente"));
		boleto.setCedente(cedente);
		
			Fatura fatura = null;
		if (map.getLong("idBoleto") == null){
			
			//Se vem por navegação (o número de boleto foi informado), não deixar incluir um boleto
			if (StringUtils.isNotBlank(map.getString("nrBoleto"))){
				throw new BusinessException("uniqueConstraintViolated", new Object[] {"nrBoleto"});
			}
			
			//Se é uma fatura
		    if (map.getString("documento.tpDocumento").equals("FAT")){
		    	fatura = faturaService.findById(map.getLong("documento.idDocumento"));
		    } else {

		    	//Verificar se o documento já está em uma fatura 
		    	fatura = faturaService.findByDevedorDocServFat(map.getLong("documento.idDocumento"));
		    	
		    	//Senão, criar uma nova fatura
		    	if (fatura == null){
		    		fatura = new Fatura();
					
		    		if (map.getLong("cotacaoMoeda.idCotacaoMoeda") != null){
						CotacaoMoeda cotacaoMoeda = new CotacaoMoeda();
						cotacaoMoeda.setIdCotacaoMoeda(map.getLong("cotacaoMoeda.idCotacaoMoeda"));
						fatura.setCotacaoMoeda(cotacaoMoeda);
					} else {
						fatura.setCotacaoMoeda(null);
					}
					fatura.setVlCotacaoMoeda(map.getBigDecimal("vlCotacaoMoeda"));

		    	}

		    }
		    
		} else {
			fatura = faturaService.findById(boleto.getFatura().getIdFatura());
		}
		    boleto.setFatura(fatura);

		
		boleto.setVlDesconto(map.getBigDecimal("vlDesconto"));
		
		if (map.getBigDecimal("vlDesconto") == null) {
			boleto.setVlDesconto(new BigDecimal(0));
		}
		
		boleto.setDtEmissao(map.getYearMonthDay("dtEmissao"));
		
		boleto.setDtVencimento(map.getYearMonthDay("dtVencimento"));
		
		boleto.setDtVencimentoNovo(map.getYearMonthDay("dtVencimentoNovo"));

		boleto.setTpSituacaoBoleto(map.getDomainValue("tpSituacaoBoleto"));		
		
		return boleto;
	}
	
    public void removeById(java.lang.Long id) {
    	boletoFacade.removeById(id);
    	newMaster();
    }
    
    @SuppressWarnings("rawtypes")
    public Map findById(Long id) {    	
    	Boleto boleto = getBoletoService().findByIdTela(id);
    	TypedFlatMap retorno = mountMap(boleto);
    	
    	putMasterInSession(boleto);

    	return retorno;
    }
    
    /**
     * Carrega o Boleto a partir do idHistoricoBoleto
     *
     * @author Hector Julian Esnaola Junior
     * @since 01/02/2007
     *
     * @param idHistoricoBoleto
     * @return
     *
     */
    @SuppressWarnings("rawtypes")
    public Map findBoletoByIdHistoricoBoleto(Long idHistoricoBoleto){
    	Long idBoleto = (Long) findBoletoByHistorico(idHistoricoBoleto).get("idBoleto");
    	return findById(idBoleto);
    }

	@SuppressWarnings("rawtypes")
	public List findTipoDocumentoServico(Map criteria){
		String tpDocFat = (String)configuracoesFacade
			.getValorParametro("TP_DOCTO_FAT2");
		
		String[] dm = tpDocFat.split(";");
		List dominiosValidos = Arrays.asList(dm);
        List retorno = domainValueService.findByDomainNameAndValues("DM_TIPO_DOCUMENTO_BOLETO", dominiosValidos);
        return retorno;
	}
    
	/**
	 * @param boleto
	 * @return
	 */
	private TypedFlatMap mountMap(Boleto boleto) {
		
		TypedFlatMap mapRetorno = new TypedFlatMap();
    	
    	mapRetorno.put("idBoleto",boleto.getIdBoleto());
    	mapRetorno.put("nrBoleto",boleto.getNrBoleto());
    	mapRetorno.put("nrSequenciaFilial",boleto.getNrSequenciaFilial());
    	mapRetorno.put("cedente.idCedente",boleto.getCedente().getIdCedente());
    	mapRetorno.put("fatura.filialByIdFilialCobranca.idFilial",boleto.getFatura().getFilialByIdFilialCobradora().getIdFilial());
    	mapRetorno.put("fatura.filialByIdFilialCobranca.sgFilial",boleto.getFatura().getFilialByIdFilialCobradora().getSgFilial());
    	mapRetorno.put("fatura.filialByIdFilialCobranca.pessoa.nmFantasia",boleto.getFatura().getFilialByIdFilialCobradora().getPessoa().getNmFantasia());


    	EnderecoPessoa enderecoPessoa = enderecoPessoaService.findEnderecoPessoaCobranca(boleto.getFatura().getCliente().getIdCliente(), boleto.getDtEmissao());    	
    	
    	if (boleto.getFatura().getDivisaoCliente() != null){
    		mapRetorno.put("cliente.divisaoCliente.idDivisaoCliente",boleto.getFatura().getDivisaoCliente().getIdDivisaoCliente());
    		mapRetorno.put("cliente.divisaoCliente.dsDivisaoCliente",boleto.getFatura().getDivisaoCliente().getDsDivisaoCliente());
    	}
    	
    	mapRetorno.putAll(mountMapClienteEndereco(boleto.getFatura().getCliente(), enderecoPessoa, boleto.getCedente().getIdCedente(), true));
    	
    	mapRetorno.put("tpSituacaoBoleto",boleto.getTpSituacaoBoleto().getValue());
    	mapRetorno.put("dtEmissao",boleto.getDtEmissao());
    	mapRetorno.put("dtVencimento",boleto.getDtVencimento());
    	mapRetorno.put("dtVencimentoNovo",boleto.getDtVencimentoNovo());
    	
    	
    	if (boleto.getFatura().getCotacaoMoeda() != null){    		mapRetorno.put("simboloMoedaPais",boleto.getFatura().getCotacaoMoeda().getMoedaPais().getMoeda().getSiglaSimbolo());
    		mapRetorno.put("dtCotacaoMoeda",boleto.getFatura().getCotacaoMoeda().getDtCotacaoMoeda());
    		mapRetorno.put("cotacaoMoeda.idCotacaoMoeda",boleto.getFatura().getCotacaoMoeda().getIdCotacaoMoeda());
    		mapRetorno.put("cotacaoMoeda.vlCotacaoMoeda",boleto.getFatura().getCotacaoMoeda().getVlCotacaoMoeda());
    	}
    	
    	mapRetorno.put("tpAbrangencia",boleto.getFatura().getTpAbrangencia());
    	mapRetorno.put("vlCotacaoMoeda",boleto.getFatura().getVlCotacaoMoeda());
    	
    	mapRetorno.put("vlTotal",boleto.getVlTotal());
    	mapRetorno.put("vlJurosDia",boleto.getVlJurosDia());
    	mapRetorno.put("vlDesconto",boleto.getVlDesconto());
    	mapRetorno.put("dhTransmissao",boleto.getFatura().getDhTransmissao());
    	mapRetorno.put("dhReemissao",boleto.getDhReemissao());
    	
    	if (boleto.getUsuario() != null) {
    		mapRetorno.put("usuario.nmUsuario",boleto.getUsuario().getNmUsuario());    	
    	}
    	
    	mapRetorno.put("fatura.dtLiquidacao",boleto.getFatura().getDtLiquidacao());
    	mapRetorno.put("fatura.vlJuroCalculado",boleto.getFatura().getVlJuroCalculado());
    	mapRetorno.put("fatura.blGerarEdi",boleto.getFatura().getBlGerarEdi());
    	
    	if (boleto.getFatura().getRelacaoCobranca() != null){
	    	mapRetorno.put("relacaoCobranca.idRelacaoCobranca",boleto.getFatura().getRelacaoCobranca().getIdRelacaoCobranca());
	    	mapRetorno.put("relacaoCobranca.nrRelacaoCobrancaFilial",boleto.getFatura().getRelacaoCobranca().getNrRelacaoCobrancaFilial());
	    	mapRetorno.put("relacaoCobranca.filial.sgFilial",boleto.getFatura().getRelacaoCobranca().getFilial().getSgFilial());
    	}
    	
    	mapRetorno.put("documento.tpDocumento","FAT");
    	mapRetorno.put("documento.filial.idFilial",boleto.getFatura().getFilialByIdFilial().getIdFilial());
    	mapRetorno.put("documento.filial.sgFilial",boleto.getFatura().getFilialByIdFilial().getSgFilial());
    	mapRetorno.put("documento.idDocumento",boleto.getFatura().getIdFatura());
    	mapRetorno.put("documento.nrDocumento",boleto.getFatura().getNrFatura());
    	mapRetorno.put("documento.filial.pessoa.nmFantasia",boleto.getFatura().getFilialByIdFilial().getPessoa().getNmFantasia());

    	validateBotaoRetransmitir(boleto, mapRetorno);
    	validateBotoesProtesto(mapRetorno);
    	validateBotoes(boleto, mapRetorno);
    	
    	
    	
		return mapRetorno;
	}


	private void validateBotaoRetransmitir(Boleto boleto,
			TypedFlatMap mapRetorno) {
		if ("DB".equals(boleto.getTpSituacaoBoleto().getValue())
    			|| "BN".equals(boleto.getTpSituacaoBoleto().getValue())
    			|| "EM".equals(boleto.getTpSituacaoBoleto().getValue())
    			|| "BP".equals(boleto.getTpSituacaoBoleto().getValue())) {
    		mapRetorno.put("blHabilitaRetransmitir", Boolean.TRUE);    		
    	} else {
    		mapRetorno.put("blHabilitaRetransmitir", Boolean.FALSE);
    	}
	}


	private void validateBotoesProtesto(TypedFlatMap mapRetorno) {
		// Caso a filial do usuário logado seja MTZ, 
    	// habilita o botão de protesto de boleto.
		if (SessionUtils.isFilialSessaoMatriz()) {
    		mapRetorno.put("blHabilitaBotoesProtesto", Boolean.TRUE);
    	}
	}


	private void validateBotoes(Boleto boleto, TypedFlatMap mapRetorno) {
		if (SessionUtils.isFilialSessaoMatriz() || SessionUtils.getFilialSessao().equals(boleto.getFatura().getFilialByIdFilial())){
    		mapRetorno.put("blHabilitaBotoes", "S");    		
    	} else {
    		mapRetorno.put("blHabilitaBotoes", "N");
    	}
	}
    
    @SuppressWarnings({ "rawtypes", "unchecked" })
    public ResultSetPage findPaginatedBoleto(TypedFlatMap criteria) {
    	
    	BoletoParam boletoParam = mountBoletoParam(criteria);
    	FindDefinition findDef = FindDefinition.createFindDefinition(criteria);
    	ResultSetPage rsp = getBoletoService().findPaginated(boletoParam, findDef);
    	List boletos = rsp.getList();
    	
    	if (boletos != null) {
    		List<TypedFlatMap> result = AliasToTypedFlatMapResultTransformer.getInstance().transformListResult(boletos);
    		for (TypedFlatMap boleto : result) {
    			boleto.put("fatura.cliente.pessoa.nrIdentificacao", FormatUtils.formatIdentificacao(boleto.getString("fatura.cliente.pessoa.tpIdentificacao.value"), boleto.getString("fatura.cliente.pessoa.nrIdentificacao")));
    		}
    		rsp.setList(result);
    	}

    	return rsp;
    }
    
    public Integer getRowCountBoleto(TypedFlatMap criteria) {
    	BoletoParam boletoParam = mountBoletoParam(criteria);

    	return getBoletoService().getRowCount(boletoParam);
    }
    
    private BoletoParam mountBoletoParam(TypedFlatMap criteria){
    	BoletoParam boletoParam = new BoletoParam();
    	
    	boletoParam.setNrBoleto(criteria.getString("nrBoleto"));
    	boletoParam.setNrSequenciaFilial(criteria.getLong("nrSequenciaFilial"));    	        	
    	boletoParam.setIdCedente(criteria.getLong("cedente.idCedente"));
    	boletoParam.setIdCliente(criteria.getLong("fatura.cliente.idCliente"));    	
    	boletoParam.setIdFilialCobranca(criteria.getLong("fatura.filialByIdFilialCobranca.idFilial"));

    	boletoParam.setDtEmissaoInicial(criteria.getYearMonthDay("dtEmissaoInicial"));
    	boletoParam.setDtEmissaoFinal(criteria.getYearMonthDay("dtEmissaoFinal"));
    	boletoParam.setDtVencimentoInicial(criteria.getYearMonthDay("dtVencimentoInicial"));
    	boletoParam.setDtVencimentoFinal(criteria.getYearMonthDay("dtVencimentoFinal"));    	
    	boletoParam.setDtLiquidacaoInicial(criteria.getYearMonthDay("fatura.dtLiquidacaoInicial"));
    	boletoParam.setDtLiquidacaoFinal(criteria.getYearMonthDay("fatura.dtLiquidacaoFinal"));
    	
    	if (StringUtils.isNotBlank(criteria.getString("documento.tpDocumento")) && !criteria.getString("documento.tpDocumento").equals("FAT")){    		
    		boletoParam.setTpDocumentoServico(criteria.getString("documento.tpDocumento"));
    		boletoParam.setIdDevedorDocServFat(criteria.getLong("documento.idDocumento"));
    		boletoParam.setIdFilialOrigem(criteria.getLong("documento.filial.idFilial"));
    	} else {
    		boletoParam.setIdFatura(criteria.getLong("documento.idDocumento"));
    	}
    	
    	boletoParam.setTpSituacaoBoleto(criteria.getString("tpSituacaoBoleto"));        	
    	
    	return boletoParam;
    }
    
    /**
     * Retorna um map com todos os dados relacionado à fatura
     * */
    public Map findFaturaRelated(Long idFatura){    	
    	Fatura fatura = faturaService.findByIdTela(idFatura);
    	EnderecoPessoa enderecoPessoa = enderecoPessoaService.findEnderecoPessoaCobranca(fatura.getCliente().getIdCliente(), JTDateTimeUtils.getDataAtual());
    	
    	TypedFlatMap map = new TypedFlatMap();
    	
    	if (fatura.getCedente() != null) { 
    		map.put("cedente.idCedente", fatura.getCedente().getIdCedente());
    		map.put("cedendeVigente", JTDateTimeUtils.comparaData(JTDateTimeUtils.maxYmd(fatura.getCedente().getDtVigenciaFinal()), JTDateTimeUtils.getDataAtual()) >= 0 );
    		map.put("blDisableCedente", "S");
    	} else if (fatura.getCliente().getCedente() != null){
    		map.put("cedente.idCedente", fatura.getCliente().getCedente().getIdCedente());
    		map.put("cedendeVigente", JTDateTimeUtils.comparaData(JTDateTimeUtils.maxYmd(fatura.getCliente().getCedente().getDtVigenciaFinal()), JTDateTimeUtils.getDataAtual()) >= 0 );
    	} else {
    		Filial filialSessao = filialService.findById(SessionUtils.getFilialSessao().getIdFilial());
    		if (filialSessao.getCedenteByIdCedenteBloqueto() != null){
    			map.put("cedente.idCedente", filialSessao.getCedenteByIdCedenteBloqueto().getIdCedente());
    			map.put("cedendeVigente", JTDateTimeUtils.comparaData(JTDateTimeUtils.maxYmd(filialSessao.getCedenteByIdCedenteBloqueto().getDtVigenciaFinal()), JTDateTimeUtils.getDataAtual()) >= 0 );
    		}    		
    	}
    	
    	if (fatura.getDivisaoCliente() != null){
    		map.put("cliente.divisaoCliente.idDivisaoCliente", fatura.getDivisaoCliente().getIdDivisaoCliente());
        	map.put("cliente.divisaoCliente.dsDivisaoCliente", fatura.getDivisaoCliente().getDsDivisaoCliente());

    	}
    	
    	map.putAll(mountMapClienteEndereco(fatura.getCliente(), enderecoPessoa, map.getLong("cedente.idCedente"), true));
    	
    	map.put("idFatura", fatura.getIdFatura());
    	map.put("fatura.filialByIdFilialCobranca.idFilial", fatura.getFilialByIdFilialCobradora().getIdFilial());
    	map.put("fatura.filialByIdFilialCobranca.sgFilial", fatura.getFilialByIdFilialCobradora().getSgFilial());
    	map.put("fatura.filialByIdFilialCobranca.pessoa.nmFantasia", fatura.getFilialByIdFilialCobradora().getPessoa().getNmFantasia());
    	map.put("tpAbrangencia", fatura.getTpAbrangencia().getValue());
    	
    	map.put("vlTotal", fatura.getVlTotal());
    	map.put("vlDesconto", fatura.getVlDesconto());
    	map.put("fatura.blGerarEdi", fatura.getBlGerarEdi());
    	map.put("dhTransmissao", fatura.getDhTransmissao());
    	map.put("dtVencimento", fatura.getDtVencimento());
    	
    	if (fatura.getCotacaoMoeda() != null) {
	    	map.put("vlCotacaoMoeda", fatura.getCotacaoMoeda().getVlCotacaoMoeda());
	    	map.put("cotacaoMoeda.idCotacaoMoeda", fatura.getCotacaoMoeda().getIdCotacaoMoeda());
    	}
    	
    	map.put("cotacaoMoeda.vlCotacaoMoeda", fatura.getVlCotacaoMoeda());
    	
    	return map;
    }

    /**
     * Retorna um map com todos os dados relacionado ao devedor
     * */
    public Map findDevedorDocServFatRelated(TypedFlatMap criteria){
    	DevedorDocServFat devedorDocServFat = devedorDocServFatService.findById(criteria.getLong("idDevedor"));    	
    	EnderecoPessoa enderecoPessoa = enderecoPessoaService.findEnderecoPessoaCobranca(devedorDocServFat.getCliente().getIdCliente(), JTDateTimeUtils.getDataAtual());
    	
    	TypedFlatMap map = new TypedFlatMap();
    	
    	if (devedorDocServFat.getCliente().getCedente() != null){
    		map.put("cedente.idCedente", devedorDocServFat.getCliente().getCedente().getIdCedente());
    	} else {
    		Filial filialSessao = filialService.findById(SessionUtils.getFilialSessao().getIdFilial());
    		if (filialSessao.getCedenteByIdCedenteBloqueto() != null){
    			map.put("cedente.idCedente", filialSessao.getCedenteByIdCedenteBloqueto().getIdCedente());	
    		}
    	}
    	
    	if (devedorDocServFat.getDivisaoCliente() != null){
    		map.put("cliente.divisaoCliente.idDivisaoCliente", devedorDocServFat.getDivisaoCliente().getIdDivisaoCliente());
    		map.put("cliente.divisaoCliente.dsDivisaoCliente", devedorDocServFat.getDivisaoCliente().getDsDivisaoCliente());
    	}
    	
    	map.putAll(mountMapClienteEndereco(devedorDocServFat.getCliente(), enderecoPessoa, map.getLong("cedente.idCedente"), false));
    	
    	map.put("idDevedorDocServFat", devedorDocServFat.getIdDevedorDocServFat());
    	map.put("fatura.filialByIdFilialCobranca.idFilial", devedorDocServFat.getFilial().getIdFilial());
    	map.put("fatura.filialByIdFilialCobranca.sgFilial", devedorDocServFat.getFilial().getSgFilial());
    	map.put("fatura.filialByIdFilialCobranca.pessoa.nmFantasia", devedorDocServFat.getFilial().getPessoa().getNmFantasia());
    	map.put("tpAbrangencia", devedorDocServFat.getDoctoServico().getServico().getTpAbrangencia().getValue());
    	
    	map.put("vlTotal", devedorDocServFat.getDoctoServico().getVlTotalDocServico());
    	Desconto desconto = descontoService.findByDevedorDocServFat(devedorDocServFat.getIdDevedorDocServFat());
    	
    	if (desconto != null) {
    		map.put("vlDesconto", desconto.getVlDesconto());
		} else {
			map.put("vlDesconto", BigDecimalUtils.ZERO);
    	}
    	
    	map.put("fatura.blGerarEdi", Boolean.TRUE);
    	map.put("dtVencimento", getDataVencimento(devedorDocServFat, criteria.getYearMonthDay("dtEmissao")));
    	
    	return map;
    }
    
    public Map findDataVencimento(TypedFlatMap criteria){
    	DevedorDocServFat devedorDocServFat = devedorDocServFatService.findById(criteria.getLong("idDevedor"));
    	
    	TypedFlatMap mapRetorno = new TypedFlatMap();
    	
    	mapRetorno.put("dtVencimento", getDataVencimento(devedorDocServFat, criteria.getYearMonthDay("dtEmissao")));
    	
    	return mapRetorno;
    }
    
    private YearMonthDay getDataVencimento(DevedorDocServFat devedorDocServFat, YearMonthDay dtEmissao){
    	DomainValue tpFrete = conhecimentoService.findTpFreteByIdConhecimento(devedorDocServFat.getDoctoServico().getIdDoctoServico());
    	String tpModal = devedorDocServFat.getDoctoServico().getServico()!=null?devedorDocServFat.getDoctoServico().getServico().getTpModal().getValue():null;
    	String tpAbrangencia = devedorDocServFat.getDoctoServico().getServico()!=null?devedorDocServFat.getDoctoServico().getServico().getTpAbrangencia().getValue():null;
    	Long idServico = devedorDocServFat.getDoctoServico().getServico()!=null?devedorDocServFat.getDoctoServico().getServico().getIdServico():null;
    	Long idDivisao = devedorDocServFat.getDivisaoCliente()!=null?devedorDocServFat.getDivisaoCliente().getIdDivisaoCliente():null;    	
    	
    	return dataVencimentoService.generateDataVencimento(devedorDocServFat.getFilial().getIdFilial(),
    			idDivisao,
    			((tpFrete!=null)?tpFrete.getValue():null), 
    			dtEmissao,
    			tpModal,
    			tpAbrangencia,
    			idServico);
    }
    
    /**
     * Monta um map com os dados do cliente e endereço
     * */
    private TypedFlatMap mountMapClienteEndereco (Cliente cliente, EnderecoPessoa enderecoPessoa, Long idCedente, boolean blIsFatura){
    	TypedFlatMap map = new TypedFlatMap();
    	
    	List lstCedente = null;
    	
    	if (blIsFatura){
    		lstCedente = cedenteService.findMapCedenteAtivoByIdCedente(idCedente);
    	} else {
    		lstCedente = cedenteService.findMapCedenteAtivoByIdCedente(null);
    	}
    	
    	map.put("cliente.idCliente", cliente.getIdCliente());
    	map.put("cliente.pessoa.nrIdentificacao", cliente.getPessoa().getNrIdentificacaoFormatado());
    	map.put("cliente.pessoa.nmPessoa", cliente.getPessoa().getNmPessoa());
    	map.put("cedentes", lstCedente);
    	
    	if (enderecoPessoa != null) {
	    	map.put("enderecoCobranca", this.enderecoPessoaService.getEnderecoCompleto(enderecoPessoa.getIdEnderecoPessoa()));
	    	map.put("municipio", enderecoPessoa.getMunicipio().getNmMunicipioAndSgUnidadeFederativa());
	    	map.put("bairro", enderecoPessoa.getDsBairro());
	    	map.put("cep", enderecoPessoa.getNrCep());
    	}
    	
    	return map;
    }
    
    /**
	 * Popula a DivisaoClienteparam para ser usado como filtro na busca por divisao
	 *
	 * @author Hector Julian Esnaola Junior
	 * @since 24/01/2007
	 */
	public DivisaoClienteParam populateDivisaoClienteParam(Long idCliente, String tpSituacao, Long idDivisao){
		
		DivisaoClienteParam dcp = new DivisaoClienteParam();
		
		dcp.setIdCliente(idCliente);
		dcp.setIdDivisaoCliente(idDivisao);
		dcp.setTpSituacao(tpSituacao);
		
		return dcp;		
	}
	
	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	getBoletoService().removeByIds(ids);
    }

	public List findLookupFilial(TypedFlatMap map){
		return filialService.findLookup(map);
	}
	
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public List findFatura(TypedFlatMap map){
		Long idFilial = map.getLong("filialByIdFilial.idFilial");	
		Long nrDocumento = map.getLong("nrFatura");		

		List lstFatura = faturaService.findByNrFaturaByFilial(nrDocumento, idFilial);
		
		if (lstFatura.size() == 1){
			TypedFlatMap mapRetorno = new TypedFlatMap();
			Fatura fat = (Fatura)lstFatura.get(0);
			
			mapRetorno.put("idFatura", fat.getIdFatura());
			mapRetorno.put("idDocumento", fat.getIdFatura());
			mapRetorno.put("nrFatura", fat.getNrFatura());
			mapRetorno.put("filialByIdFilial.idFilial", fat.getFilialByIdFilial().getIdFilial());
			mapRetorno.put("filialByIdFilial.sgFilial", fat.getFilialByIdFilial().getSgFilial());
			mapRetorno.put("filialByIdFilial.pessoa.nmFantasia", fat.getFilialByIdFilial().getPessoa().getNmFantasia());
			
			List lstRetorno = new ArrayList();
			
			lstRetorno.add(mapRetorno);
			
			return lstRetorno;
			
		} else {
			return lstFatura;
		}
	}	
	
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public List findDevedorServDocFat(TypedFlatMap map){
		Long idFilial = map.getLong("doctoServico.filialByIdFilialOrigem.idFilial");	
		Long nrDocumento = map.getLong("doctoServico.nrDoctoServico");
		String tpDocumentoServico = map.getString("doctoServico.tpDocumentoServico");				

		DevedorDocServFatLookupParam devedorDocServFatLookupParam = new DevedorDocServFatLookupParam();
		
		devedorDocServFatLookupParam.setIdFilial(idFilial);
		devedorDocServFatLookupParam.setNrDocumentoServico(nrDocumento);
		devedorDocServFatLookupParam.setTpDocumentoServico(tpDocumentoServico);	
		
		List lstDevedor = this.devedorDocServFatLookUpService.findDevedorDocServFat(
				devedorDocServFatLookupParam);
		
		if (lstDevedor.size() == 1){
			TypedFlatMap mapRetorno = new TypedFlatMap();
			Map mapDevedor = (Map)lstDevedor.get(0);

			mapRetorno.put("idDocumento", mapDevedor.get("idDevedorDocServFat"));
			mapRetorno.put("idDevedorDocServFat", mapDevedor.get("idDevedorDocServFat"));
			mapRetorno.put("nrDoctoServico", mapDevedor.get("doctoServico_nrDoctoServico"));
			mapRetorno.put("idFilialOrigem", mapDevedor.get("idFilialOrigem"));
			mapRetorno.put("sgFilialOrigem", mapDevedor.get("sgFilialOrigem"));
			mapRetorno.put("idDoctoServico", mapDevedor.get("idDoctoServico"));
			
			
			List lstRetorno = new ArrayList();
			
			lstRetorno.add(mapRetorno);
			
			return lstRetorno;
			
		} else {
			return lstDevedor;
		}		
	}
	
	public TypedFlatMap validateMonitoramentoEletronicoAutorizado(TypedFlatMap map) {
		Long idDoctoServico  = map.getLong("data.idDoctoServico");
		if (idDoctoServico != null) {
			doctoServicoService.validateDoctoServicoComMonitoramentoEletronicoAutorizado(idDoctoServico);
		}
		return map;
	}
	
	@SuppressWarnings("rawtypes")
	public Map cancelarBoleto(TypedFlatMap map){
		MasterEntry master = getMasterFromSession(map.getLong("idBoleto"), true);
		ItemList listDescontos = getItemsFromSession(master, BOLETO_ANEXO_CONFIG_ALIAS);
		
		Boleto boleto = (Boleto) master.getMaster(); 
		
		MotivoOcorrencia motivoOcorrencia = null;
		
		if (map.getLong("idMotivoOcorrencia") != null) {
			motivoOcorrencia = motivoOcorrenciaService.findById(map.getLong("idMotivoOcorrencia"));
		}
		String dsHistoricoBoleto = map.getString("dsHistoricoBoleto");
		boleto = boletoFacade.cancelarBoleto(boleto, motivoOcorrencia, dsHistoricoBoleto, listDescontos);
		
		// LMS-6106
		if (map.containsKey(TP_MANUTENCAO_FATURA)) {
			Long idBoleto = map.getLong("idBoleto");
			String tpManutencaoFatura = map.getString(TP_MANUTENCAO_FATURA);
			@SuppressWarnings("unchecked")
			List<Map<String, Object>> doctoServicoList = map.getList("doctoServicoList");
			executeCancelarFatura(idBoleto, tpManutencaoFatura, doctoServicoList);
		}

		return findById(boleto.getIdBoleto());
	}
	
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public Map prorrogarVencimentoBoleto(TypedFlatMap map){ 
		MasterEntry master = getMasterFromSession(map.getLong("idBoleto"), true);
        ItemList listDescontos = getItemsFromSession(master, BOLETO_ANEXO_CONFIG_ALIAS);
		
		Boleto boleto = (Boleto) master.getMaster();
		boleto.setDtVencimentoNovo( map.getYearMonthDay("dtVencimentoNovo"));
		  
		MotivoOcorrencia motivoOcorrencia = null;
		
		if (map.getLong("idMotivoOcorrencia") != null) {
			motivoOcorrencia = motivoOcorrenciaService.findById(map.getLong("idMotivoOcorrencia"));
		}
				
		String dsHistoricoBoleto = map.getString("dsHistoricoBoleto"); 
		boletoFacade.prorrogarVencimentoBoleto(boleto, motivoOcorrencia, dsHistoricoBoleto, listDescontos);
		
		Map retorno = new HashMap();
		
		retorno.put("dtVencimento", boleto.getDtVencimento());
		retorno.put("dtVencimentoNovo", boleto.getDtVencimentoNovo());
		
		return retorno;
	}
	
	public Map baixarBancoBoleto(TypedFlatMap map){
		Boleto boleto = boletoFacade.findById(map.getLong("idBoleto"));

		boletoFacade.baixarBancoBoleto(boleto);
		
		TypedFlatMap retorno = new TypedFlatMap();
		
		retorno.put("tpSituacaoBoleto", "EM");
		
		return retorno;
	}
	
	public Map alterarCEPBoleto(TypedFlatMap map){
		Boleto boleto = boletoFacade.findById(map.getLong("idBoleto"));

		boletoFacade.alterarCEPBoleto(boleto);
		
		return new TypedFlatMap();
	}

	public Map emitirBoleto(TypedFlatMap map) throws Exception {
		//Só pode emitir um boleto se a situação é diferente de:
		//Baixado, Liquidado, Cancelado
		if (map.getString("tpSituacaoBoleto").equals("BA") || map.getString("tpSituacaoBoleto").equals("LI") || map.getString("tpSituacaoBoleto").equals("CA")){
			throw new BusinessException("LMS-36082");
		}
		
		TypedFlatMap retorno = new TypedFlatMap();
		
		// Caso a situação do boleto seja DI, seta a situação para EM.
		if (map.getString("tpSituacaoBoleto").equals("DI")) {
			retorno.put("tpSituacaoBoleto", "EM");
		} else {
			retorno.put("tpSituacaoBoleto", map.getString("tpSituacaoBoleto"));
		}
		
		
		retorno.put("_value",this.reportExecutionManager.generateReportLocator(this.emitirBoletoService, map));		
		
		return retorno;
	}

	
	public void setEmitirBoletoService(EmitirBoletoService emitirBoletoService) {
		this.emitirBoletoService = emitirBoletoService;
	}	
	
	public Map retransmitirBoleto(TypedFlatMap map){
		Boleto boleto = boletoFacade.findById(map.getLong("idBoleto"));

		boletoFacade.retransmitirBoleto(boleto);
		
		return new TypedFlatMap();
	}
	
	public Map protestarBoleto(TypedFlatMap map){
		Boleto boleto = boletoFacade.findById(map.getLong("idBoleto"));

		boletoFacade.protestarBoleto(boleto);
		
		return new TypedFlatMap();
	}
	
	public Map findBoletoByHistorico(Long idHistoricoBoleto){
		HistoricoBoleto historicoBoleto = historicoBoletoService.findById(idHistoricoBoleto);
		
		TypedFlatMap mapRetorno = new TypedFlatMap();
		
		mapRetorno.put("idBoleto", historicoBoleto.getBoleto().getIdBoleto());
		return mapRetorno;
	}
	
	public Long findCedente(TypedFlatMap map){
		Cedente cedente = cedenteService.findByIdCliente(map.getLong("cliente.idCliente"));
		
		if (cedente == null){
			cedente = cedenteService.findByIdFilial(SessionUtils.getFilialSessao().getIdFilial());
		}
		
		if (cedente != null){
			return cedente.getIdCedente();
		} else {
			return null;
		}
	}	
	
	/**
	 * Carrega a combo de tipo de documentos.
	 * 
	 * Hector Julian Esnaola Junior
	 * 06/03/2008
	 *
	 * @param criteria
	 * @return
	 *
	 * List
	 *
	 */
	public List findComboTpDocumento(TypedFlatMap criteria) {  
		List domainValues;
		String tpDocFat2 = (String)configuracoesFacade
				.getValorParametro("TP_DOCTO_FAT2");

		String[] dm = tpDocFat2.split(";");
        List dominiosValidos = Arrays.asList(dm);
		domainValues = domainValueService.findByDomainNameAndValues("DM_TIPO_DOCUMENTO_BOLETO", dominiosValidos);
		
		return domainValues;
	}

	
	@Override
	protected MasterEntryConfig createMasterConfig(MasterDetailFactory masterFactory) {

		/**
		 * Declaracao da classe pai
		 */		
		MasterEntryConfig config = masterFactory.createMasterEntryConfig(Boleto.class, true);		
				
		/**
		 * Esta classe e reponsavel por ordenar a List dos filhos que estao
		 * em memoria de acordo com as regras de negocio
		 */
    	Comparator descComparator = new Comparator() {
			public int compare(Object obj1, Object obj2) {
        		return ((BoletoAnexo) obj1).getDhCriacao().compareTo( ((BoletoAnexo) obj2).getDhCriacao() ) ; 		
			}
    	};		
		
    	
    	/**
    	 * Esta instancia é responsavel por carregar os 
    	 * items filhos na sessão a partir do banco de dados.
    	 */
    	ItemListConfig itemInit = new ItemListConfig() {
    		
    		@Override
    		public void setMasterOnItem(Object master, Object itemBean) {
    			((BoletoAnexo) itemBean).setBoleto((Boleto)master);
    		}
 
    		/**
    		 * Find paginated do filho
    		 * Passa por este ponto apenas na primeira vez em que a list filha e chamada.
    		 * Apos a primeira vez ela e carregada da memoria
    		 * 
    		 * @param masterId id do pai
    		 * @param parameters todos os parametros vindo da tela pai
    		 */    		
			public List initialize(Long masterId, Map parameters) {	
				return getBoletoAnexoService().findBoletoAnexosByIdBoleto(masterId);
			}

			/**
			 * Busca rowCount da grid da tela filha
			 * Passa por este ponto apenas na primeira vez em que a list filha e chamada.
    		 * Apos a primeira vez ela e carregada da memoria
			 * 
			 * @param masterId id do pai
			 * @param parameters todos os parametros vindo da tela pai
			 */			
			public Integer getRowCount(Long masterId, Map parameters) {
				return Integer.valueOf(getBoletoAnexoService().findBoletoAnexosByIdBoleto(masterId).size());
			}
			
			/**
			 * Chama esta funcao depois de editar um item da grid filho
			 * E retira atributos desnecessarios para o filho
			 *
			 * @param newBean
			 * @param oldBean
			 */
			public void modifyItemValues(Object newBean, Object bean) {
		        BoletoAnexo anexoModified = (BoletoAnexo) newBean;
		        BoletoAnexo baseAnexo = (BoletoAnexo) bean;
		        
		        baseAnexo.setDsAnexo(anexoModified.getDsAnexo());
		        baseAnexo.setDcArquivo(anexoModified.getDcArquivo());
		        baseAnexo.setBlEnvAnexoQuestFat(anexoModified.getBlEnvAnexoQuestFat());
		        
		        baseAnexo.setDhModificacao( new DateTime() );
			}
			
			/**
			 * Todos os dados a serem carregados na grid pelo form passam antes por este
			 * metodo. Para se fazer uma validacao...
			 * Recomenda-se que o bean em questao seja gerado nesta classe a partir dos
			 * parametros enviados da tela para se evitar um 'ReflectionUtils'
			 * 
			 * @param mapParameter 
			 * @param bean a ser istanciado
			 * @return Object bean instanciado
			 */
			public Object populateNewItemInstance(Map mapParameter, Object bean) {
				BoletoAnexo descontoAnexo = (BoletoAnexo) bean;				
				TypedFlatMap parameters = (TypedFlatMap) mapParameter;
				
		    	
		    	descontoAnexo.setIdBoletoAnexo( parameters.getLong("idBoletoAnexo") );
		    	descontoAnexo.setDsAnexo( parameters.getString("dsAnexo") );
		    	try {
					descontoAnexo.setDcArquivo(Base64Util.decode(parameters.getString("dcArquivo")));
				} catch (IOException e) {
					log.error(e);
				}
		    	descontoAnexo.setBlEnvAnexoQuestFat( parameters.getBoolean("blEnvAnexoQuestFat"));
		    	getBoletoAnexoService().prepareValuesToStore(descontoAnexo);
				return descontoAnexo;
			}			

    	};    	
    	
    	config.addItemConfig(BOLETO_ANEXO_CONFIG_ALIAS, BoletoAnexo.class, itemInit, descComparator);
    	
		return config;
	}

	
	public List findComboCedentes(TypedFlatMap criteria){
		return cedenteService.findComboValues(criteria);
	}
	
	public List findComboCedentesAtivos(TypedFlatMap criteria){
		return cedenteService.findMapCedenteAtivoByIdCedente(null);
	}	
	
	public List findLookupCliente(Map criteria){
		return clienteService.findLookup(criteria);
	}
	
	public List findComboMotivoOcorrenciaCancelamento(){
		return motivoOcorrenciaService.findMotivoOcorrenciaDeCancelamento();
	}
	
	public List findComboMotivoOcorrenciaVencimento(){
		return motivoOcorrenciaService.findMotivoOcorrenciaDeVencimento();
	}	
	
	
    public Object findAnexos(MasterDetailKey key) {
    	BoletoAnexo boletoAnexo = (BoletoAnexo) findItemById(key, BOLETO_ANEXO_CONFIG_ALIAS);
    	TypedFlatMap mapItemMda = new TypedFlatMap();
    	
    	mapItemMda.put("idBoletoAnexo",boletoAnexo.getIdBoletoAnexo()); 
		mapItemMda.put("dsAnexo", boletoAnexo.getDsAnexo());
		mapItemMda.put("dcArquivo", Base64Util.encode(boletoAnexo.getDcArquivo()) );
		mapItemMda.put("blEnvAnexoQuestFat", boletoAnexo.getBlEnvAnexoQuestFat());
		
		return mapItemMda;
    }
    
    public Serializable storeAnexo(TypedFlatMap parameters) {
		String descAnexo = parameters.getString("dsAnexo");
		if(descAnexo.length() > 60) {
			throw new BusinessException("LMS-27130", new Object[]{configuracoesFacade.getMensagem("descricao"), "60"});
		}
		
		return saveItemInstance( parameters, BOLETO_ANEXO_CONFIG_ALIAS);
    }
    
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public ResultSetPage findPaginatedBoletoAnexo(TypedFlatMap criteria) {
		ResultSetPage rspItemAnexo = findPaginatedItemList(criteria, BOLETO_ANEXO_CONFIG_ALIAS );
		List lista = new ArrayList();
		for (Object boletoAnexoObject: rspItemAnexo.getList()) {
			BoletoAnexo descontoAnexo = (BoletoAnexo) boletoAnexoObject;

			Map<String,Object> map = new HashMap<String,Object>();
			map.put("idBoletoAnexo" , descontoAnexo.getIdBoletoAnexo() );
			map.put("descricao" , descontoAnexo.getDsAnexo());
			map.put("dhinclusao" , descontoAnexo.getDhCriacao());
			map.put("nmusuario" , descontoAnexo.getUsuario().getNmUsuario() );

			try {
				// pega o nome do arquivo
				ByteArrayInputStream ba = new ByteArrayInputStream(  descontoAnexo.getDcArquivo() );
				BufferedReader buff = new BufferedReader(new InputStreamReader(ba));
				
				String ln = buff.readLine();
				
				map.put("nmarquivo", ln.substring(0,1024) );
				
			} catch (Exception e) {
				// nao encontrou nome ???
				map.put("nmarquivo", "");
			}
			
			lista.add(map);
		} 
		
		rspItemAnexo.setList(lista);
    	return rspItemAnexo;
	}
	
	public Integer getRowCountBoletoAnexo(TypedFlatMap criteria) {
		getMasterFromSession(criteria.getLong("idBoleto"), true);
		return getRowCountItemList(criteria, BOLETO_ANEXO_CONFIG_ALIAS);
	}
	
	public void clearSessionItens(){
		super.removeMasterFromSession();
	}

	@SuppressWarnings("rawtypes")
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIdsAnexoBoleto(List ids) {
    	super.removeItemByIds(ids, BOLETO_ANEXO_CONFIG_ALIAS);
    }
	
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public void setDoctoServicoService(DoctoServicoService doctoServicoService) {
		this.doctoServicoService = doctoServicoService;
	}
	
	public void setDevedorDocServFatLookUpService(
			DevedorDocServFatLookUpService devedorDocServFatLookUpService) {
		this.devedorDocServFatLookUpService = devedorDocServFatLookUpService;
	}

	public void setCedenteService(CedenteService cedenteService) {
		this.cedenteService = cedenteService;
	}

	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}

	public void setFaturaService(FaturaService faturaService) {
		this.faturaService = faturaService;
	}

	public void setEnderecoPessoaService(EnderecoPessoaService enderecoPessoaService) {
		this.enderecoPessoaService = enderecoPessoaService;
	}

	public void setDevedorDocServFatService(
			DevedorDocServFatService devedorDocServFatService) {
		this.devedorDocServFatService = devedorDocServFatService;
	}

	public void setDescontoService(DescontoService descontoService) {
		this.descontoService = descontoService;
	}

	public void setMotivoOcorrenciaService(
			MotivoOcorrenciaService motivoOcorrenciaService) {
		this.motivoOcorrenciaService = motivoOcorrenciaService;
	}

	public void setBoletoFacade(BoletoFacade boletoFacade) {
		this.boletoFacade = boletoFacade;
	}

	public void setHistoricoBoletoService(
			HistoricoBoletoService historicoBoletoService) {
		this.historicoBoletoService = historicoBoletoService;
	}

	public void setDataVencimentoService(DataVencimentoService dataVencimentoService) {
		this.dataVencimentoService = dataVencimentoService;
	}

	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
	}

	public void setReportExecutionManager(
			ReportExecutionManager reportExecutionManager) {
		this.reportExecutionManager = reportExecutionManager;
	}


	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}

	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}
	
	public void setBoletoAnexoService(BoletoAnexoService boletoAnexoService) {
		this.boletoAnexoService = boletoAnexoService;
}


	public BoletoAnexoService getBoletoAnexoService() {
		return boletoAnexoService;
	}

	public RelacaoPagtoParcialService getRelacaoPagtoParcialService() {
		return relacaoPagtoParcialService;
	}

	public void setRelacaoPagtoParcialService(RelacaoPagtoParcialService relacaoPagtoParcialService) {
		this.relacaoPagtoParcialService = relacaoPagtoParcialService;
	}

	/**
	 * LMS-6106 - Busca <tt>RelacaoPagtoParcial</tt> para a fatura relacionada a
	 * um <tt>Boleto</tt> específico. Lança exceção LMS-36268 (Fatura com
	 * recebimentos parciais não pode ser alterada) caso exista algum registro
	 * de pagamento parcial.
	 * 
	 * @param map
	 */
	public void findRelacaoPagtoParcial(TypedFlatMap map) {
		Long idBoleto = map.getLong("idBoleto");
		List<RelacaoPagtoParcial> listRelacaoPagtoParcial = relacaoPagtoParcialService.findByIdboleto(idBoleto);
		if (!listRelacaoPagtoParcial.isEmpty()) {
			throw new BusinessException("LMS-36268");
		}
	}
	
	/**
	 * LMS-6106 - Prepara mapa para popular campos do formulário de cancelamento
	 * de boleto. A partir da entrada "idBoleto" no mapa procede a busca de
	 * <tt>HistoricoBoleto<tt>, <tt>Fatura<tt> e <tt>DoctoServico<tt>.
	 * 
	 * @param map
	 *            mapa incluindo a entrada "idBoleto"
	 * @return mapa para popular formulário de cancelamento de boleto
	 */
	public TypedFlatMap findManterBoletosObservacao(TypedFlatMap map) {
		Long idBoleto = map.getLong("idBoleto");
		HistoricoBoleto historicoBoleto = historicoBoletoService.findManterBoletosObservacao(idBoleto);
		if (historicoBoleto != null) {
			map.put("idMotivoOcorrencia", historicoBoleto.getMotivoOcorrencia().getIdMotivoOcorrencia());
			map.put("dsHistoricoBoleto", historicoBoleto.getDsHistoricoBoleto());
		}
		Fatura fatura = faturaService.findFaturaByBoleto(idBoleto);
		Boolean blCancelaFaturaInteira = fatura.getBlCancelaFaturaInteira();
		if (blCancelaFaturaInteira) {
			map.put(TP_MANUTENCAO_FATURA, "I");
		} else {
			List<Map<String, Object>> doctoServicoList = doctoServicoService.findDoctoServicoListByBoleto(idBoleto);
			if (!doctoServicoList.isEmpty()) {
				map.put(TP_MANUTENCAO_FATURA, "E");
			map.put("doctoServicoList", doctoServicoList);
		}
		}
		return map;
	}

	/**
	 * LMS-6106 - Busca <tt>DoctoServico</tt> para popup de cancelamento de
	 * faturas, utilizando os elementos
	 * <tt>doctoServico.filialByIdFilialOrigem.sgFilial</tt>,
	 * <tt>doctoServico.tpDocumentoServico</tt> e <tt>nrDocumento</tt> do mapa
	 * de parâmetros.
	 * 
	 * Após obter <tt>DoctoServico</tt> verifica se está relacionado ao
	 * <tt>Boleto</tt> determinado pelo elemento <tt>idBoleto</tt> também
	 * incluído no mapa de parâmetros. Caso não estiver, lança a exceção
	 * LMS-36293 (O documento de serviço informado deve estar vinculado à fatura
	 * em questão).
	 * 
	 * @param criteria
	 *            mapa de parâmetros para busca
	 * @return <tt>DoctoServico</tt> para conforme parâmetros
	 */
	public DoctoServico findDoctoServico(TypedFlatMap criteria) {
		Long idBoleto = criteria.getLong("idBoleto");
		String tpDocumentoServico = criteria.getString("doctoServico.tpDocumentoServico");
		Long idFilialOrigem = criteria.getLong("doctoServico.filialByIdFilialOrigem.idFilial");
		Long nrDoctoServico = criteria.getLong("nrDoctoServico");
		DoctoServico doctoServico = doctoServicoService.findDoctoServico(tpDocumentoServico, idFilialOrigem, nrDoctoServico);
		if (doctoServico != null && !doctoServicoService.findBoletoDoctoServico(idBoleto, doctoServico.getIdDoctoServico())) {
			throw new BusinessException("LMS-36293");
		}
		return doctoServico;
	}

	/**
	 * LMS-6106 - Executa o cancelamento de uma fatura e respectivos documentos
	 * de serviço. De acordo com o parâmetro <tt>tpManutencaoFatura</tt> cancela
	 * todos (I: Cancelar a fatura inteira) ou somente os documentos de serviço
	 * selecionados (E: Excluir alguns documentos de serviço).
	 * 
	 * @param idBoleto
	 *            id do <tt>Boleto</tt>
	 * @param tpManutencaoFatura
	 *            tipo de manutenção da fatura (I/E)
	 * @param doctoServicoList
	 *            lista me dados dos documentos de serviço
	 */
	private void executeCancelarFatura(Long idBoleto, String tpManutencaoFatura, List<Map<String, Object>> doctoServicoList) {
		Fatura fatura = faturaService.findFaturaByBoleto(idBoleto);
		List<Long> idDoctoServicoList = new ArrayList<Long>();
		if (doctoServicoList != null) {
			for (Map<String, Object> map : doctoServicoList) {
				Long idDoctoServico = Long.valueOf((String) map.get("doctoServico.idDoctoServico"));
				idDoctoServicoList.add(idDoctoServico);
			}
		}
		faturaService.executeCancelarFatura(fatura, tpManutencaoFatura, idDoctoServicoList);
	}

	public List findLookupBanco(TypedFlatMap tfm){
		return bancoService.findLookup(tfm);
	}

	public void setBancoService(BancoService bancoService) {
		this.bancoService = bancoService;
	}
	public BancoService getBancoService() {
		return bancoService;
	}
}
