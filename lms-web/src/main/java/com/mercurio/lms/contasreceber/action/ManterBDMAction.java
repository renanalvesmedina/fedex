package com.mercurio.lms.contasreceber.action;

import java.io.Serializable;
import java.math.BigDecimal;
import java.text.Collator;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.joda.time.YearMonthDay;
import org.springframework.context.i18n.LocaleContextHolder;

import com.mercurio.adsm.core.util.ReflectionUtils;
import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.masterdetail.ItemList;
import com.mercurio.adsm.framework.model.masterdetail.ItemListConfig;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailAction;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailFactory;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailKey;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntry;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntryConfig;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.session.SessionContext;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.contasreceber.model.BaixaDevMerc;
import com.mercurio.lms.contasreceber.model.Desconto;
import com.mercurio.lms.contasreceber.model.DevedorDocServFat;
import com.mercurio.lms.contasreceber.model.ItemBaixaDevMerc;
import com.mercurio.lms.contasreceber.model.param.DevedorDocServFatLookupParam;
import com.mercurio.lms.contasreceber.model.service.AgendaTransferenciaService;
import com.mercurio.lms.contasreceber.model.service.BaixaDevMercService;
import com.mercurio.lms.contasreceber.model.service.BloqueioFaturamentoService;
import com.mercurio.lms.contasreceber.model.service.DescontoService;
import com.mercurio.lms.contasreceber.model.service.DevedorDocServFatLookUpService;
import com.mercurio.lms.contasreceber.model.service.DevedorDocServFatService;
import com.mercurio.lms.contasreceber.model.service.TransferenciaService;
import com.mercurio.lms.expedicao.model.Conhecimento;
import com.mercurio.lms.expedicao.model.DoctoServico;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.model.service.DoctoServicoService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.util.AliasToNestedMapResultTransformer;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.JTFormatUtils;
import com.mercurio.lms.util.session.SessionKey;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contasreceber.manterBDMAction"
 */

public class ManterBDMAction extends MasterDetailAction {

	private static final String ITEM_BAIXA_DEV_MERC = "itemBaixaDevMerc";
	
	private DomainValueService domainValueService;
	
	private DoctoServicoService doctoServicoService;
	
	private DescontoService descontoService;
	
	private DevedorDocServFatService devedorDocServFatService;
	
	private ConhecimentoService conhecimentoService;
	
	private DevedorDocServFatLookUpService devedorDocServFatLookUpService;
	
	private ConfiguracoesFacade configuracoesFacade;

	private AgendaTransferenciaService agendaTransferenciaService;
	
	private TransferenciaService transferenciaService;
	
	private BloqueioFaturamentoService bloqueioFaturamentoService;


	public void setDevedorDocServFatService(DevedorDocServFatService devedorDocServFatService) {
		this.devedorDocServFatService = devedorDocServFatService;
	}

	public void setAgendaTransferenciaService(
			AgendaTransferenciaService agendaTransferenciaService) {
		this.agendaTransferenciaService = agendaTransferenciaService;
	}

	public void setDescontoService(DescontoService descontoService) {
		this.descontoService = descontoService;
	}

	public void setTransferenciaService(TransferenciaService transferenciaService) {
		this.transferenciaService = transferenciaService;
	}    

	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}

	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
	}

	public void setDevedorDocServFatLookUpService(DevedorDocServFatLookUpService devedorDocServFatLookUpService) {
		this.devedorDocServFatLookUpService = devedorDocServFatLookUpService;
	}

	public void setDoctoServicoService(DoctoServicoService doctoServicoService) {
		this.doctoServicoService = doctoServicoService;
	}

	public void setBDMService(BaixaDevMercService BDMService) {
		super.setMasterService(BDMService);
	}

	public void setBloqueioFaturamentoService(
			BloqueioFaturamentoService bloqueioFaturamentoService) {
		this.bloqueioFaturamentoService = bloqueioFaturamentoService;
	}

	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}

	public BaixaDevMercService getBDMService() {
		return (BaixaDevMercService) super.getMasterService();
	}

	public Serializable store(BaixaDevMerc baixaDevMercTela) {
		
		// Não permite alteração na BDM 
		if (baixaDevMercTela.getIdBaixaDevMerc()!=null) {
			throw new BusinessException("LMS-36161");
		}
		
		MasterEntry entry = getMasterFromSession(baixaDevMercTela.getIdBaixaDevMerc(), true);		
		ItemList items = getItemsFromSession(entry, ITEM_BAIXA_DEV_MERC);
		
		ItemListConfig config = getMasterConfig().getItemListConfig(ITEM_BAIXA_DEV_MERC);
		
		try {
			BaixaDevMerc baixaDevMerc = (BaixaDevMerc) entry.getMaster();
			Set ignore = new HashSet(1);
			ignore.add("versao");
			ReflectionUtils.syncObjectProperties(baixaDevMerc, baixaDevMercTela, ignore);
			
			for (Iterator iter = items.iterator(baixaDevMerc.getIdBaixaDevMerc(), config); iter.hasNext();) {
				ItemBaixaDevMerc itemBaixaDevMerc = (ItemBaixaDevMerc) iter.next();
			
				DevedorDocServFat devedor = devedorDocServFatService.findById(itemBaixaDevMerc.getDevedorDocServFat().getIdDevedorDocServFat());
				Long idDoctoServico = devedor.getDoctoServico().getIdDoctoServico();
				
				TypedFlatMap tfm = new TypedFlatMap();
				tfm.put("idDoctoServico", idDoctoServico);
				
				Map doctoServicoOriginal = (Map) doctoServicoService.findDoctoServicoOriginal(tfm).get(0);
				
				DevedorDocServFat devedorDocServFatOriginal = null;
				
				Object dsFats = doctoServicoOriginal.get("df");
				if (dsFats instanceof List ) {
					List list = (List) dsFats;
					if (list != null && list.size() > 0) {
						DevedorDocServFat dsFat = (DevedorDocServFat) list.get(0);
						devedorDocServFatOriginal = devedorDocServFatService.findById(dsFat.getIdDevedorDocServFat());
					}
				} else {
					DevedorDocServFat dsFat = (DevedorDocServFat) dsFats;
					if (dsFats != null) {
						devedorDocServFatOriginal = devedorDocServFatService.findById(dsFat.getIdDevedorDocServFat());
					}
				}
				
				DoctoServico doctoServicoNovo = doctoServicoService.findByIdJoinFilial(devedorDocServFatOriginal.getDoctoServico().getIdDoctoServico());
				
				// Valida se a filial de destino da BDM é igual a filial de destino do novo documento de serviço 
				if (baixaDevMerc.getFilialDestino().getIdFilial().longValue() != doctoServicoNovo.getFilialByIdFilialDestino().getIdFilial().longValue()) {
					throw new BusinessException("LMS-36053");
				}
				
				// Valida se a filial de origem da BDM é igual a filial de origem do novo documento de serviço
				if (baixaDevMerc.getFilialEmissora().getIdFilial().longValue() != doctoServicoNovo.getFilialByIdFilialOrigem().getIdFilial().longValue()) {
					throw new BusinessException("LMS-36054");
				}
				
				// Valida se o cliente da BDM é igual ao cliente devedor dos documentos de serviço
				if (baixaDevMerc.getCliente().getIdCliente().longValue() != devedor.getCliente().getIdCliente().longValue()) {
					throw new BusinessException("LMS-36055");
				}
			}
			
			BaixaDevMerc baixaDevMercStored = getBDMService().store(baixaDevMerc, items, config);
			items.resetItemsState(); 
			updateMasterInSession(entry);
			
			return baixaDevMercStored;
		} catch (RuntimeException e) {
			throw e;
		}			
	}

	public TypedFlatMap findTotais(Long masterId) {
		TypedFlatMap tfm = new TypedFlatMap();

		BigDecimal vlTotal = new BigDecimal(0);
		long qtdTotal = 0;

		MasterEntry entry = getMasterFromSession(masterId, true);		
		ItemList items = getItemsFromSession(entry, ITEM_BAIXA_DEV_MERC);
		ItemListConfig config = getMasterConfig().getItemListConfig(ITEM_BAIXA_DEV_MERC);
	
		for (Iterator iter = items.iterator(masterId, config); iter.hasNext();) {
			ItemBaixaDevMerc item = (ItemBaixaDevMerc) iter.next();
			Map devedorOriginal = devedorDocServFatService.findByIdMaped(item.getDevedorDocServFat().getIdDevedorDocServFat());
			
			vlTotal = vlTotal.add((BigDecimal)devedorOriginal.get("valor"));
			qtdTotal++;
		}

		tfm.put("qtd", Long.valueOf(qtdTotal));
		tfm.put("valor", vlTotal);
		
		return tfm;
	}
	
	public Map findById(Long id) {
		BaixaDevMerc baixaDevMerc = (BaixaDevMerc)getBDMService().findById(id);
		TypedFlatMap typedFlatMap = new TypedFlatMap();

		typedFlatMap.put("filialDestino.idFilial", baixaDevMerc.getFilialDestino().getIdFilial());
		typedFlatMap.put("filialDestino.sgFilial", baixaDevMerc.getFilialDestino().getSgFilial());
		typedFlatMap.put("filialDestino.pessoa.nmFantasia", baixaDevMerc.getFilialDestino().getPessoa().getNmFantasia());
		typedFlatMap.put("filialEmissora.idFilial", baixaDevMerc.getFilialEmissora().getIdFilial());
		typedFlatMap.put("filialEmissora.sgFilial", baixaDevMerc.getFilialEmissora().getSgFilial());
		typedFlatMap.put("filialEmissora.pessoa.nmFantasia", baixaDevMerc.getFilialEmissora().getPessoa().getNmFantasia());
		typedFlatMap.put("nrBdm", baixaDevMerc.getNrBdm());
		typedFlatMap.put("dtEmissao", baixaDevMerc.getDtEmissao());
		typedFlatMap.put("tpSituacao", baixaDevMerc.getTpSituacao().getValue());
		typedFlatMap.put("cliente.idCliente", baixaDevMerc.getCliente().getIdCliente());
		typedFlatMap.put("cliente.pessoa.nrIdentificacao", baixaDevMerc.getCliente().getPessoa().getNrIdentificacao());
		typedFlatMap.put("cliente.pessoa.nrIdentificacaoFormatado",FormatUtils.formatIdentificacao(baixaDevMerc.getCliente().getPessoa()));
		typedFlatMap.put("cliente.pessoa.nmPessoa", baixaDevMerc.getCliente().getPessoa().getNmPessoa());
		typedFlatMap.put("idBaixaDevMerc", baixaDevMerc.getIdBaixaDevMerc());
		
		putMasterInSession(baixaDevMerc);
		
		return typedFlatMap;
	}

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		for (Iterator iter = ids.iterator(); iter.hasNext();) {
			Long id = (Long) iter.next();
			removeById(id);	
		}
	}

	public void removeById(Long id) {
		ItemBaixaDevMerc item = getBDMService().findItemById(id);
		DevedorDocServFat devedorDocServFat = item.getDevedorDocServFat();
		
		devedorDocServFat.setTpSituacaoCobranca(new DomainValue("C"));
		devedorDocServFat.setDtLiquidacao(null);
		
		getBDMService().storeObj(devedorDocServFat);
		
		getBDMService().removeById(id);
		newMaster();			
	}

	public Serializable saveItemBaixaDevMerc(Map parameters) {		
		return saveItemInstance(parameters, ITEM_BAIXA_DEV_MERC);
	}

	
	private TypedFlatMap getTypedFlatMap(Map parameters) {
		TypedFlatMap tfm = new TypedFlatMap();
		tfm.putAll(parameters);
		
		Map filialEmissora = (Map) parameters.get("filialEmissora"); 
		Map filialDestino = (Map) parameters.get("filialDestino"); 
		Map cliente = (Map) parameters.get("cliente"); 

		if (filialEmissora.get("idFilial") != null && !filialEmissora.get("idFilial").toString().equals(""))
			tfm.put("filialEmissora.idFilial", Long.valueOf(filialEmissora.get("idFilial").toString()));
		
		if (filialDestino.get("idFilial") != null && !filialDestino.get("idFilial").toString().equals(""))
			tfm.put("filialDestino.idFilial", Long.valueOf(filialDestino.get("idFilial").toString()));
		
		if (cliente.get("idCliente") != null && !cliente.get("idCliente").toString().equals(""))
			tfm.put("cliente.idCliente", Long.valueOf(cliente.get("idCliente").toString()));
		
		return tfm;
	}
	
	public ResultSetPage findPaginated(Map criteria) {
		ResultSetPage rs = getBDMService().findPaginated(getTypedFlatMap(criteria));
		List l = rs.getList();
		String nrIdentificacao;
		String tpIdentificacao;
		
		for (Iterator iter = l.iterator(); iter.hasNext();) {
			Map element = (Map) iter.next();
			nrIdentificacao = (String)element.remove("nrIdentificacao");
			tpIdentificacao = ((DomainValue)element.remove("tpIdentificacao")).getValue();
			element.put("cliente", FormatUtils.formatIdentificacao(tpIdentificacao, nrIdentificacao) + " - " + element.remove("nmPessoa"));
		}
		rs.setList(l);
		return rs;
	}
	
	public Integer getRowCount(Map criteria) {
		return getBDMService().getRowCount(getTypedFlatMap(criteria));
	}
	
	public ResultSetPage findPaginatedItemBaixaDevMerc(Map parameters) {
		ResultSetPage rspTmp = findPaginatedItemList(parameters, ITEM_BAIXA_DEV_MERC);
		
	 	List itemsNew = new ArrayList();
    	
	 	List items = rspTmp.getList();
    	
    	for (Iterator iter = items.iterator(); iter.hasNext();) {
			ItemBaixaDevMerc ib = (ItemBaixaDevMerc) iter.next();
			
			// Busca os campos de devedor, documento e filial de origem do devedor do item da BDM
			Map mapDev = devedorDocServFatService.findByIdMaped(ib.getDevedorDocServFat().getIdDevedorDocServFat());
			Long idDoctoServico = (Long)mapDev.get("idDoctoServico");
			
			// Monta Map para retornar para a tela
			Map element = new HashMap();
			element.put("idItemBaixaDevMerc", ib.getIdItemBaixaDevMerc());
			element.put("tpDocumentoAntigo", ((DomainValue)mapDev.get("tpDocumentoServico")).getValue());
			element.put("sgFilalAntigo", (String)mapDev.get("sgFilialOrigem"));
			element.put("nrDoctoServicoAntigo", FormatUtils.formataNrDocumento(mapDev.get("nrDoctoServico").toString()
					, ((DomainValue)mapDev.get("tpDocumentoServico")).getValue()));
			element.put("vlDevidoAntigo", (BigDecimal)mapDev.get("valor"));
			
			TypedFlatMap tfm = new TypedFlatMap();
			tfm.put("idDoctoServico", idDoctoServico);
			
			Map doctoServicoOriginal = (Map) doctoServicoService.findDoctoServicoOriginal(tfm).get(0);
			
			Map devedorOriginal = null;
				
			Object dsFats = doctoServicoOriginal.get("df");
			if (dsFats instanceof List ) {
				List list = (List) dsFats;
				if (list != null && list.size() > 0) {
					DevedorDocServFat dsFat = (DevedorDocServFat) list.get(0);
					devedorOriginal = devedorDocServFatService.findByIdMaped(dsFat.getIdDevedorDocServFat());
				}
			} else {
				DevedorDocServFat dsFat = (DevedorDocServFat) dsFats;
				if (dsFats != null) {
					devedorOriginal = devedorDocServFatService.findByIdMaped(dsFat.getIdDevedorDocServFat());
				}
			}
			
			element.put("tpDocumento", doctoServicoOriginal.get("tpDocumentoServico"));
			element.put("nrDoctoServico", FormatUtils.formataNrDocumento(doctoServicoOriginal.get("nrDoctoServico").toString(), ((DomainValue)(doctoServicoOriginal.get("tpDocumentoServico"))).getValue()));
			element.put("sgFilal", doctoServicoOriginal.get("sgFilial"));
			element.put("vlDevido", (BigDecimal)devedorOriginal.get("valor"));
		
			itemsNew.add(element);
			
		}
    	
    	rspTmp.setList(itemsNew);

    	
    	return rspTmp;
	}

	public Integer getRowCountItemBaixaDevMerc(Map parameters){
		return getRowCountItemList(parameters, ITEM_BAIXA_DEV_MERC);
	}

	public Object findByIdItemBaixaDevMerc(MasterDetailKey key) {
		
		ItemBaixaDevMerc itemBaixaDevMerc = (ItemBaixaDevMerc) findItemById(key, ITEM_BAIXA_DEV_MERC);
		
		TypedFlatMap tfm = new TypedFlatMap();
		
		tfm.put("idItemBaixaDevMerc", itemBaixaDevMerc.getIdItemBaixaDevMerc());
		
		// Busca os campos de devedor, documento e filial de origem do devedor do item da BDM
		Map mapDev = devedorDocServFatService.findByIdMaped(itemBaixaDevMerc.getDevedorDocServFat().getIdDevedorDocServFat());
		DomainValue tpDocumentoAntigo = (DomainValue)mapDev.get("tpDocumentoServico");
		Long idFilialOrigem = (Long)mapDev.get("idFilialOrigem");
		String sgFilialOrigem = (String)mapDev.get("sgFilialOrigem");
		String nrDoctoServico = mapDev.get("nrDoctoServico").toString();
		BigDecimal vlDevidoAntigo = (BigDecimal)mapDev.get("valor");
		Long idDoctoServico = (Long)mapDev.get("idDoctoServico");
		
		tfm.put("devedorDocServFatAntigo.doctoServico.tpDocumentoServico", tpDocumentoAntigo.getValue());
		tfm.put("vlDevido", vlDevidoAntigo);
		tfm.put("devedorDocServFatAntigo.doctoServico.filialByIdFilialOrigem.idFilial", idFilialOrigem);
		tfm.put("devedorDocServFatAntigo.doctoServico.filialByIdFilialOrigem.sgFilial", sgFilialOrigem);
		tfm.put("devedorDocServFatAntigo.doctoServico.nrDoctoServico", nrDoctoServico);
		tfm.put("devedorDocServFatAntigo.doctoServico.idDoctoServico", idDoctoServico);
		tfm.put("devedorDocServFatAntigo.idDevedorDocServFat", itemBaixaDevMerc.getDevedorDocServFat().getIdDevedorDocServFat());
		
		TypedFlatMap t = new TypedFlatMap();
		t.put("idDoctoServico", idDoctoServico);
		
		Map mapDoctoServicoOriginal = (Map) doctoServicoService.findDoctoServicoOriginal( t ).get(0);
		
		Map devedorOriginal = null;
		
		Object dsFats = mapDoctoServicoOriginal.get("df");
		if (dsFats instanceof List ) {
			List list = (List) dsFats;
			if (list != null && list.size() > 0) {
				DevedorDocServFat dsFat = (DevedorDocServFat) list.get(0);
				devedorOriginal = devedorDocServFatService.findByIdMaped(dsFat.getIdDevedorDocServFat());
			}
		} else {
			DevedorDocServFat dsFat = (DevedorDocServFat) dsFats;
			if (dsFats != null) {
				devedorOriginal = devedorDocServFatService.findByIdMaped(dsFat.getIdDevedorDocServFat());
			}
		}
		
		tfm.put("devedorDocServFat.doctoServico.tpDocumentoServico", ((DomainValue)mapDoctoServicoOriginal.get("tpDocumentoServico")).getDescription());
		tfm.put("sgFilialNovo", mapDoctoServicoOriginal.get("sgFilial"));
		tfm.put("idDevedorDocServFat", mapDoctoServicoOriginal.get("idDoctoServico"));
		tfm.put("nrDevedorDocServFat", FormatUtils.formataNrDocumento(((Long)mapDoctoServicoOriginal.get("nrDoctoServico")).toString(), ((DomainValue)mapDoctoServicoOriginal.get("tpDocumentoServico")).getValue()));
		tfm.put("vlDevidoNovo", (BigDecimal)devedorOriginal.get("valor"));

		return tfm;
	}

	/**
	 * @param ids
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIdsItemBaixaDevMerc(List ids) {
		MasterEntry entry = (MasterEntry) SessionContext.get(getClass().getName());
		ItemList items = getItemsFromSession(entry, ITEM_BAIXA_DEV_MERC);
		
		BaixaDevMerc baixaDevMerc = (BaixaDevMerc) entry.getMaster();
		YearMonthDay dtEmissao = baixaDevMerc.getDtEmissao();
		YearMonthDay dtAtual = JTDateTimeUtils.getDataAtual();
		
		// Não permite alteração na BDM 
		if (baixaDevMerc.getIdBaixaDevMerc()!=null) {
			throw new BusinessException("LMS-36161");
		}
		
		// Faz tratamento de itens filhos somente na alteração da BDM
		if (baixaDevMerc.getIdBaixaDevMerc()!=null){
			boolean erro = false;
			if (dtEmissao.getMonthOfYear() != dtAtual.getMonthOfYear() || dtEmissao.getYear() != dtAtual.getYear()) {
				erro = true;
			} else if (baixaDevMerc.getTpSituacao().getValue().equals("C")) {
				erro = true;
			} else if (items.size() < 2) {
				erro = true;
			} else if (baixaDevMerc.getFilialEmissora().getIdFilial().longValue() != SessionUtils.getFilialSessao().getIdFilial().longValue()) {
				erro = true;
			}
			
			if (erro) {
				throw new BusinessException("LMS-36071");
			}
		}
		
		super.removeItemByIds(ids, ITEM_BAIXA_DEV_MERC);

	}	

	protected MasterEntryConfig createMasterConfig(MasterDetailFactory masterFactory) {
		
		MasterEntryConfig config = masterFactory.createMasterEntryConfig(BaixaDevMerc.class);
		
		Comparator comparator = new Comparator() {
			
			public int compare(Object o1, Object o2) {
				Collator collator = Collator.getInstance(LocaleContextHolder.getLocale());
				
				if ((o1 instanceof Comparable) && (o2 instanceof Comparable)) {
					return ((Comparable)o1).compareTo(o2);
				} else {
					ItemBaixaDevMerc item1 = (ItemBaixaDevMerc) o1;
					ItemBaixaDevMerc item2 = (ItemBaixaDevMerc) o2;
					
					return collator.compare(item1.getIdItemBaixaDevMerc().toString(), item2.getIdItemBaixaDevMerc().toString());
				}
			}
			
		};
		
		ItemListConfig itemInit = new ItemListConfig() {
			
			public List initialize(Long masterId) {
				if (masterId == null) {
					return Collections.EMPTY_LIST;
				}
				return getBDMService().findPaginatedByIdBaixaDevMerc(masterId);
			}

			public Integer getRowCount(Long masterId) {
				return getBDMService().getRowCountByIdBaixaDevMerc(masterId);
			}

			public void modifyItemValues(Object newBean, Object bean) {
				Set ignore = new HashSet(2, 1f);
				ignore.add("idItemBaixaDevMerc");
				ignore.add("versao");
				ReflectionUtils.syncObjectProperties(bean, newBean, ignore);
			}

			public Map configItemDomainProperties() {
				Map props = new HashMap(2, 1f);
				props.put("tpSituacao", "DM_STATUS_BDM");
				return props;
			}

			public Object populateNewItemInstance(Map parameters, Object bean) {

				Map dev = (Map) parameters.get("devedorDocServFatAntigo");
				Long idDevedorDocServFat = Long.valueOf(dev.get("idDevedorDocServFat").toString()); 
				
				if (!parameters.get("masterId").toString().equals("")){
					throw new BusinessException("LMS-36161");
				}

				ItemBaixaDevMerc itemBaixaDevMerc = (ItemBaixaDevMerc) bean;
				
				DevedorDocServFat ddsf = devedorDocServFatService.findById( idDevedorDocServFat );
				
				// VALIDACOES
				
				doctoServicoService.validatePermissaoDocumentoUsuario(ddsf.getDoctoServico().getIdDoctoServico(), ddsf.getFilial().getIdFilial());
				bloqueioFaturamentoService.validateByIdDevedorDocServFat(idDevedorDocServFat);
				
				String tpSituacaoCobranca = ddsf.getTpSituacaoCobranca().getValue(); 
				if (!tpSituacaoCobranca.equals("P") && !tpSituacaoCobranca.equals("C")) {
					throw new BusinessException("LMS-36006");
				}
				
				Conhecimento conhecimento = conhecimentoService.findByIdInitLazyProperties(ddsf.getDoctoServico().getIdDoctoServico(), false);
				String tpSituacaoConhecimento = conhecimento.getTpSituacaoConhecimento().getValue(); 
				if (!tpSituacaoConhecimento.equals("E") && !tpSituacaoConhecimento.equals("B")) {
					throw new BusinessException("LMS-36007");
				}
				
				if (!conhecimento.getTpFrete().getValue().equals("F")) {
					throw new BusinessException("LMS-36052");
				}

				//Verifica se existe agenda de transferencia pendente
				agendaTransferenciaService.validateDevedorDocServFat(ddsf.getIdDevedorDocServFat(), null);
				
				//Verifica se existe transferencia pendente
				transferenciaService.validateDevedorDocServFat(ddsf.getIdDevedorDocServFat());   
				
				Desconto desconto = descontoService.findByDevedorDocServFat(ddsf.getIdDevedorDocServFat()); 
				
				if (desconto != null) {
					String tpSituacaoAprovacao = desconto.getTpSituacaoAprovacao().getValue();

					if (tpSituacaoAprovacao.equals("A") || tpSituacaoAprovacao.equals("E")) {
						throw new BusinessException("LMS-36056");
					}
				}
			
				// seta dados
				itemBaixaDevMerc.setDevedorDocServFat(ddsf);
				
				if (parameters.get("idItemBaixaDevMerc") != null && !parameters.get("idItemBaixaDevMerc").toString().equals(""))
					itemBaixaDevMerc.setIdItemBaixaDevMerc( Long.valueOf(parameters.get("idItemBaixaDevMerc").toString()) );
				
				resolveDomainValueProperties(itemBaixaDevMerc);

				return itemBaixaDevMerc;
			}
			
		};
		
		config.addItemConfig(ITEM_BAIXA_DEV_MERC, ItemBaixaDevMerc.class, itemInit, comparator);
		return config;
	}

	public List findTipoDocumentoServico(Map criteria){
		String tpDocFat1 = (String)configuracoesFacade
			.getValorParametro("TP_DOCTO_FAT1");

		String[] dm = tpDocFat1.split(";");
        List dominiosValidos = Arrays.asList(dm);
        List retorno = domainValueService.findByDomainNameAndValues("DM_TIPO_DOCUMENTO_SERVICO", dominiosValidos);
        return retorno;
	}	

	public List findDevedorServDocFat(TypedFlatMap map){
		Long idFilial = map.getLong("doctoServico.filialByIdFilialOrigem.idFilial");	
		Long nrDocumento = map.getLong("doctoServico.nrDoctoServico");
		String tpDocumentoServico = map.getString("doctoServico.tpDocumentoServico");				

		DevedorDocServFatLookupParam devedorDocServFatLookupParam = new DevedorDocServFatLookupParam();
		
		devedorDocServFatLookupParam.setIdFilial(idFilial);
		devedorDocServFatLookupParam.setNrDocumentoServico(nrDocumento);
		devedorDocServFatLookupParam.setTpDocumentoServico(tpDocumentoServico);		
		
		return AliasToNestedMapResultTransformer.getInstance().transformListResult(this.devedorDocServFatLookUpService.findDevedorDocServFat(
				devedorDocServFatLookupParam));
	}	
	
    /**
     * Busca a data atual formatada
     * @param tfm Critérios de pesquisa
     * @return YearMonthDay Data atual
     */
    public String findDataAtual(TypedFlatMap tfm){
    	return JTFormatUtils.format(JTDateTimeUtils.getDataAtual(), JTFormatUtils.YEARMONTHDAY);
    } 
    
    public Filial findFilialUsuarioLogado() {
    	Filial filial = (Filial)SessionContext.get(SessionKey.FILIAL_KEY);
    	filial.setFilialByIdFilialResponsavalAwb(null);
    	filial.setEmpresa(null);
    	return filial;
    }
	
    public List findDoctoServicoOriginal(TypedFlatMap tfm) {
    	List list = doctoServicoService.findDoctoServicoOriginal(tfm);

    	if (list == null || list.isEmpty()) {

    		throw new BusinessException("LMS-36050");

    	} else if (list.size() == 1) {
    		Map map = (Map) list.get(0);
    		map.put("nrDoctoServico" ,FormatUtils.formataNrDocumento(((Long)map.get("nrDoctoServico")).toString(), ((DomainValue)map.get("tpDocumentoServico")).getValue()));
			Conhecimento conhecimento = conhecimentoService.findByIdInitLazyProperties(Long.valueOf(map.get("idDoctoServico").toString()), false);
    		
    		if (!conhecimento.getTpConhecimento().getValue().equals("DE")) {
    			throw new BusinessException("LMS-36051");
    		}
    		
    		list = new ArrayList();
    		
    		list.add(map);
    	}
    	    	
    	return list;
    }
    
    /**
     * Seta null DH_TRANSMISSAO
     * @param idBaixaDevMerc
     */
    public void storeRetransmitir(Long idBaixaDevMerc) {
		// Caso esse método for passado para a Service, é necessário 
    	// fazer um evict do objeto para que o Hibernate dispare um 
    	// update mesmo que o campo DhTransmissao nao tenha alteração
    	// de valores. Isso é necessário para que seja disparada uma 
    	// trigger no banco de dados.
    	BaixaDevMerc baixaDevMerc = getBDMService().findById(idBaixaDevMerc);
    	baixaDevMerc.setDhTransmissao(null);
    	getBDMService().storeObj(baixaDevMerc);
    }
    
    public void storeCancelar(Long idBaixaDevMerc) {
    	getBDMService().cancelar(idBaixaDevMerc);    	
    }

}