package com.mercurio.lms.contasreceber.action;

import org.apache.commons.lang.StringUtils;
import org.joda.time.YearMonthDay;

import com.mercurio.adsm.framework.report.ReportActionSupport;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.service.ConteudoParametroFilialService;
import com.mercurio.lms.configuracoes.model.service.ParametroFilialService;
import com.mercurio.lms.contasreceber.report.EmitirPADREMService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 * 
 * @author Rafael Andrade de Oliveira
 * @since 17/04/2006
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contasreceber.emitirPADREMAction"
 */

public class EmitirPADREMAction extends ReportActionSupport {
	
	private ConteudoParametroFilialService conteudoParametroFilialService;
	
    public void setEmitirPADREMService(EmitirPADREMService emitirPADREMService) {
		this.reportServiceSupport = emitirPADREMService;
	}

	/**
     * Busca a filial do usuario logado
     * @return Filial
     */
    public Filial findFilialUsuario(){
    	return SessionUtils.getFilialSessao();
    } 

    public TypedFlatMap findDefaults() {
    	TypedFlatMap retorno = new TypedFlatMap();
    	retorno.put("idFilial", SessionUtils.getFilialSessao().getIdFilial());
    	retorno.put("sgFilial", SessionUtils.getFilialSessao().getSgFilial());
    	retorno.put("pessoa.nmFantasia", SessionUtils.getFilialSessao().getPessoa().getNmFantasia());
    	
    	retorno.put("blMatriz","MTZ".equals(SessionUtils.getFilialSessao().getSgFilial()));
    	YearMonthDay ultimaPadrem =  (YearMonthDay) conteudoParametroFilialService.findConteudoByNomeParametro(SessionUtils.getFilialSessao().getIdFilial(), "ULTIMA_PADREM_GERADA", false);
    	
    	if (ultimaPadrem != null){
    		retorno.put("ultimaPadrem",ultimaPadrem.toString());	
    	}
    	
    	YearMonthDay hoje = new YearMonthDay();
    	if(hoje.getDayOfMonth() <= 5) {
    		hoje = hoje.minusMonths(1);
}
    	
    	String dtCompetencia = "";
    	if(String.valueOf(hoje.getMonthOfYear()).length() == 1) {
    		dtCompetencia = "0";    		
    	} 
    	dtCompetencia += hoje.getMonthOfYear() + "/" + hoje.getYear();
    	retorno.put("dtCompetencia", dtCompetencia);    	
    	return retorno;
    }
    
    public TypedFlatMap findUltimaPadrem(TypedFlatMap criteria){
    	TypedFlatMap retorno = new TypedFlatMap();
    	Long idFilial = criteria.getLong("idFilial");
    	
    	YearMonthDay ultimaPadrem =  (YearMonthDay) conteudoParametroFilialService.findConteudoByNomeParametro(idFilial, "ULTIMA_PADREM_GERADA", false);
    	
    	if (ultimaPadrem != null){
    		retorno.put("ultimaPadrem",ultimaPadrem.toString());	
    	}
    	
    	
    	return retorno;
    }

	public void setConteudoParametroFilialService(
            ConteudoParametroFilialService conteudoParametroFilialService) {
    	this.conteudoParametroFilialService = conteudoParametroFilialService;
}

}
