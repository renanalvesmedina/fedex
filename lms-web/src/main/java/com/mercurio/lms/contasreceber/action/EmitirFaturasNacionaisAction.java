package com.mercurio.lms.contasreceber.action;

import com.mercurio.adsm.core.ADSMException;
import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.report.ReportExecutionManager;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.service.ConteudoParametroFilialService;
import com.mercurio.lms.contasreceber.report.EmitirFaturasNacionaisService;
import com.mercurio.lms.expedicao.model.service.GerarConhecimentoEletronicoXMLService;
import com.mercurio.lms.expedicao.model.service.MonitoramentoDocEletronicoService;
import com.mercurio.lms.expedicao.util.ConstantesExpedicao;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.session.SessionUtils;

import java.io.File;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * Generated by: ADSM ActionGenerator
 * <p>
 * N�o inserir documenta��o ap�s ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este servi�o.
 *
 * @spring.bean id="lms.contasreceber.emitirFaturasNacionaisAction"
 */

public class EmitirFaturasNacionaisAction extends EmitirDactesFaturaBoletoAction {
	private static final String KEY_ID_FATURA = "idFatura";
	private FilialService filialService;
	private MonitoramentoDocEletronicoService monitoramentoDocEletronicoService;
	private ConteudoParametroFilialService conteudoParametroFilialService;
	private ReportExecutionManager reportExecutionManager;
	private GerarConhecimentoEletronicoXMLService gerarConhecimentoEletronicoXMLService;

	@Override
	public File execute(TypedFlatMap parameters) throws Exception {
		File f = super.execute(parameters);
		if(parameters.getString("faturaInicial") == null && parameters.getString("faturaFinal") == null ) {
			enviaFaturaClienteIntegracao(parameters);
		}
		return f;
	}

	public String executeEmitirCTEbyIdFatura(TypedFlatMap parameters) {
		List<Long> listFaturas = new ArrayList<Long>();
		Long idFatura = parameters.getLong(KEY_ID_FATURA);
		listFaturas.add(idFatura);

		try {
			File file = emiteCTEbyListFaturas(listFaturas);
			if (file != null) {
				return reportExecutionManager.generateReportLocator(file);
			}
		} catch (BusinessException e) {
			throw e;
		} catch (Exception e) {
			throw new ADSMException(e);
		}
		return "";
	}

	public File executeEmitirCTE(TypedFlatMap parameters) {
		EmitirFaturasNacionaisService emitirFaturasNacionaisService = (EmitirFaturasNacionaisService) getReportServiceSupport();
		List<Long> faturas = emitirFaturasNacionaisService.findFaturasByCriteria(parameters);
		return emiteCTEbyListFaturas(faturas);
	}
	public boolean isCnpjIsIn(TypedFlatMap parameters) {
		EmitirFaturasNacionaisService emitirFaturasNacionaisService = (EmitirFaturasNacionaisService) getReportServiceSupport();
		return emitirFaturasNacionaisService.isCnpjIsIn(parameters);
	}
	public void enviaFaturaClienteIntegracao(TypedFlatMap parameters){
		if(isCnpjIsIn(parameters)) {
			enviaFaturaDellParaTopico(parameters);
		}
	}
	private void enviaFaturaDellParaTopico(TypedFlatMap parameters) {
		EmitirFaturasNacionaisService emitirFaturasNacionaisService = (EmitirFaturasNacionaisService) getReportServiceSupport();
		emitirFaturasNacionaisService.enviaFaturaDell(parameters);
	}

	private File emiteCTEbyListFaturas(List<Long> faturas) {
		List<Map<String, Object>> listCtes = monitoramentoDocEletronicoService.findByListFatura(faturas, ConstantesExpedicao.CONHECIMENTO_ELETRONICO);

		((EmitirFaturasNacionaisService) getReportServiceSupport()).validateLimiteImpressao(listCtes.size());

		gerarConhecimentoEletronicoXMLService.addListXmlCteComComplementos(listCtes);

		Integer nrVias = null;
		Object param = conteudoParametroFilialService.findConteudoByNomeParametro(SessionUtils.getFilialSessao().getIdFilial(), "NRO_VIAS_CTE", false);
		if (param != null) {
			nrVias = ((BigDecimal) param).intValue();
		} else {
			nrVias = 1;
		}

		return emiteCTEs(nrVias, listCtes);
	}

	public String executeEmitirCTEWithLocator(TypedFlatMap parameters) {

		try {
			File file = executeEmitirCTE(parameters);
			if (file != null) {
				return reportExecutionManager.generateReportLocator(file);
			}
		} catch (BusinessException e) {
			throw e;
		} catch (Exception e) {
			throw new ADSMException(e);
		}
		return "";
	}

	public String executeEmitirNTEbyIdFatura(TypedFlatMap parameters) {
		List<Long> listFaturas = new ArrayList<Long>();
		Long idFatura = parameters.getLong(KEY_ID_FATURA);
		listFaturas.add(idFatura);
		List<Map<String, Object>> listCte = monitoramentoDocEletronicoService.findByListFatura(listFaturas, ConstantesExpedicao.NOTA_FISCAL_TRANSPORTE_ELETRONICA);
		try {
			File file = emiteNTE(listCte);
			if (file != null) {
				return reportExecutionManager.generateReportLocator(file);
			}
		} catch (Exception e) {
			throw new ADSMException(e);
		}
		return "";
	}

	public File executeEmitirNTE(TypedFlatMap parameters) {
		EmitirFaturasNacionaisService emitirFaturasNacionaisService = (EmitirFaturasNacionaisService) getReportServiceSupport();
		List<Long> faturas = emitirFaturasNacionaisService.findFaturasByCriteria(parameters);

		List<Map<String, Object>> listCte = monitoramentoDocEletronicoService.findByListFatura(faturas, ConstantesExpedicao.NOTA_FISCAL_TRANSPORTE_ELETRONICA);
		return emiteNTE(listCte);
	}

	public String executeEmitirNTEWithLocator(TypedFlatMap parameters) {
		try {
			File file = executeEmitirNTE(parameters);
			if (file != null) {
				return reportExecutionManager.generateReportLocator(file);
			}
		} catch (Exception e) {
			throw new ADSMException(e);
		}
		return "";
	}

	public String executeEmitirNSEbyIdFatura(TypedFlatMap parameters) {
		List<Long> listFaturas = new ArrayList<Long>();
		Long idFatura = parameters.getLong(KEY_ID_FATURA);
		listFaturas.add(idFatura);
		List<Map<String, Object>> listCte = monitoramentoDocEletronicoService.findByListFatura(listFaturas, ConstantesExpedicao.NOTA_FISCAL_SERVICO_ELETRONICA);
		try {
			File file = emiteNSE(listCte);
			if (file != null) {
				return reportExecutionManager.generateReportLocator(file);
			}
		} catch (Exception e) {
			throw new ADSMException(e);
		}
		return "";
	}

	public File executeEmitirNSE(TypedFlatMap parameters) {
		EmitirFaturasNacionaisService emitirFaturasNacionaisService = (EmitirFaturasNacionaisService) getReportServiceSupport();
		List<Long> faturas = emitirFaturasNacionaisService.findFaturasByCriteria(parameters);

		List<Map<String, Object>> listCte = monitoramentoDocEletronicoService.findByListFatura(faturas, ConstantesExpedicao.NOTA_FISCAL_SERVICO_ELETRONICA);
		return emiteNSE(listCte);
	}

	public String executeEmitirNSEWithLocator(TypedFlatMap parameters) {
		try {

			File file = executeEmitirNSE(parameters);
			if (file != null) {
				return reportExecutionManager.generateReportLocator(file);
			}
		} catch (Exception e) {
			throw new ADSMException(e);
		}
		return "";
	}

	public void setEmitirFaturasNacionaisService(EmitirFaturasNacionaisService emitirFaturasNacionaisService) {
		this.reportServiceSupport = emitirFaturasNacionaisService;
	}

	public List findLookupFilial(TypedFlatMap criteria) {
		return filialService.findLookup(criteria);
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	/**
	 * Busca a filial do usuario logado
	 *
	 * @return Filial
	 */
	public Filial findFilialUsuario() {
		return SessionUtils.getFilialSessao();
	}

	public void setMonitoramentoDocEletronicoService(
			MonitoramentoDocEletronicoService monitoramentoDocEletronicoService) {
		this.monitoramentoDocEletronicoService = monitoramentoDocEletronicoService;
	}

	public void setConteudoParametroFilialService(
			ConteudoParametroFilialService conteudoParametroFilialService) {
		this.conteudoParametroFilialService = conteudoParametroFilialService;
	}

	public void setReportExecutionManager(
			ReportExecutionManager reportExecutionManager) {
		this.reportExecutionManager = reportExecutionManager;
	}

	public void setGerarConhecimentoEletronicoXMLService(
			GerarConhecimentoEletronicoXMLService gerarConhecimentoEletronicoXMLService) {
		this.gerarConhecimentoEletronicoXMLService = gerarConhecimentoEletronicoXMLService;
	}
}