package com.mercurio.lms.contasreceber.action;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.joda.time.YearMonthDay;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.service.BancoService;
import com.mercurio.lms.configuracoes.model.service.ParametroGeralService;
import com.mercurio.lms.contasreceber.model.ComposicaoPagamentoRedeco;
import com.mercurio.lms.contasreceber.model.CreditoBancarioEntity;
import com.mercurio.lms.contasreceber.model.Redeco;
import com.mercurio.lms.contasreceber.model.service.ComposicaoPagamentoRedecoService;
import com.mercurio.lms.contasreceber.model.service.CreditoBancarioService;
import com.mercurio.lms.contasreceber.model.service.RedecoService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.HistoricoFilialService;
import com.mercurio.lms.util.BigDecimalUtils;
import com.mercurio.lms.util.CompareUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;


/**
 * Generated by: ADSM ActionGenerator
 *  
 *  
 * N�o inserir documenta��o ap�s ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este servi�o.
 * @spring.bean id="lms.contasreceber.manterComposicaoPagamentoRedecoAction"
 */

public class ManterComposicaoPagamentoRedecoAction extends CrudAction {
	
	private BancoService bancoService;
	private RedecoService redecoService;
	private ComposicaoPagamentoRedecoService composicaoPagamentoRedecoService;
	private ParametroGeralService parametroGeralService;
	private CreditoBancarioService creditoBancarioService;
	private HistoricoFilialService historicoFilialService;
	

	private ConfiguracoesFacade configuracoesFacade;
	private DomainValueService domainValueService;
	
	/**
	 * Obtem ComposicaoPagamentoRedeco atrav�s do Id
	 * 
	 * @param id
	 * @return ComposicaoPagamentoRedeco
	 */
	public ComposicaoPagamentoRedeco findById(Long id){
		

		/**
		 * Campo "Filial" ficar� desativado e ser� preenchido com a filial do usu�rio logado no momento da inclus�o de um novo registro. Se filial do usu�rio logado for MTZ, campo dever� ser habilitado
		 * 
		 * Campo "N�mero de parcelas" ser� habilitado somente se campo "Tipo" estiver preenchido com "Desconto franqueado"
		 */
		
		
		return composicaoPagamentoRedecoService.findById(id);
	} 
	
	/**
	 * Salva ComposicaoPagamentoRedeco
	 * @param bean
	 */
	public ComposicaoPagamentoRedeco store(ComposicaoPagamentoRedeco bean){
		String tipoComposicao="";
		if(bean.getTpComposicaoPagamentoRedeco() != null){
			tipoComposicao = (String)bean.getTpComposicaoPagamentoRedeco().getValue();
		}
		validateTipoAndCreditoBancario(bean, tipoComposicao);
		validaNumeroParcelas(bean, tipoComposicao);
		validateTpFilial(bean, tipoComposicao);

		if(bean.getCreditoBancario() != null){
			bean = populateCreditoBancario(bean);
		}
		validaValorCreditoMenorQueValorPagamento(bean, tipoComposicao);
		
		/*Valor de pagamento deve ser maior que Zero*/
		if(bean.getVlPagamento().compareTo(BigDecimal.ZERO) <= 0){
			throw new BusinessException("LMS-30005");
		}
		
		/*Verifica se o Banco pertence ao parametro geral
		NR_BANCOS_DEPOSITO*/
		if(bean.getBanco() != null){
			bean.setBanco(bancoService.findById(bean.getBanco().getIdBanco()));
			String nrBanco = StringUtils.leftPad(String.valueOf(bean.getBanco().getNrBanco()), 3, '0'); 
			String dsConteudo = (String)parametroGeralService.findConteudoByNomeParametro("NR_BANCOS_DEPOSITO",false);
			List<String> nrBancos = Arrays.asList(dsConteudo.split(";"));
			if(!nrBancos.contains(nrBanco)){
				throw new BusinessException("LMS-36249");
			}
		}
		
		/*Se a data de pagamento for menor que a data atual
		informa LMS-36245*/
		if(JTDateTimeUtils.comparaData(bean.getDtPagamento(), JTDateTimeUtils.getDataAtual()) > 0){
			throw new BusinessException("LMS-36245");	
		}

		/*Somente aplica a regra ao incluir um novo registro*/
		if(bean.getIdComposicaoPagamentoRedeco() == null){
		
			/*Obtem a soma dos valores de todas as composi��es n�o sendo frete classificar atrav�s do idRedeco*/  
			BigDecimal vlTotalPagto = BigDecimalUtils.defaultBigDecimal(composicaoPagamentoRedecoService
					.findSumCompPagamentoRedeco(bean.getRedeco().getIdRedeco(),false));
			
			/*Obtem a soma dos valores de todas as composi��es sendo frete classificar atrav�s do idRedeco*/  
			BigDecimal vlTotalClass = BigDecimalUtils.defaultBigDecimal(composicaoPagamentoRedecoService
					.findSumCompPagamentoRedeco(bean.getRedeco().getIdRedeco(),true));
			
			/*Acumular os valores da tela*/
			if("F".equals(bean.getTpComposicaoPagamentoRedeco())){
				vlTotalClass = vlTotalClass.add(bean.getVlPagamento());
			}else{
				vlTotalPagto = vlTotalPagto.add(bean.getVlPagamento());
			}
			}
		
		/*Salva a composi��o*/
		Redeco redeco = redecoService.findById(bean.getRedeco().getIdRedeco());
		
		bean.setRedeco(redeco);
		
		composicaoPagamentoRedecoService.store(bean);
		
		return bean;
	}

	private void validateTpFilial(ComposicaoPagamentoRedeco bean, String tipoComposicao) {
		Long idFilial = bean.getFilial().getIdFilial();
		YearMonthDay dataPgto = bean.getDtPagamento();
		String tpFilial = "FR";

		if ("R".equals(tipoComposicao)) {
			Boolean historicoFilial = historicoFilialService.findTpFilialVigenteData(idFilial, dataPgto, tpFilial);
			if (!historicoFilial) {
				throw new BusinessException("LMS-36379");

			}
		}

	}
	
	private void validateTipoAndCreditoBancario(ComposicaoPagamentoRedeco bean,
			String tipoComposicao) {

		String creditoBancario = "B";
		if(!creditoBancario.equals(tipoComposicao) && bean.getCreditoBancario() != null){
			bean.setCreditoBancario(null);
		}
		if(creditoBancario.equals(tipoComposicao) && bean.getCreditoBancario() == null){
			throw new BusinessException("LMS-36342");
		}
			
	}

	private ComposicaoPagamentoRedeco populateCreditoBancario(
			ComposicaoPagamentoRedeco bean) {
		CreditoBancarioEntity creditoBancario = creditoBancarioService.findById(bean.getCreditoBancario().getIdCreditoBancario());
		
		bean.setCreditoBancario(creditoBancario);
		return bean;
	}

	private void validaValorCreditoMenorQueValorPagamento(
			ComposicaoPagamentoRedeco bean, String tipoComposicao) {
		String creditoBancario = "B";
		if(creditoBancario.equals(tipoComposicao)){
			BigDecimal vlCreditoBancario = bean.getCreditoBancario().getSaldo();

			if (CompareUtils.gt(bean.getVlPagamento(), vlCreditoBancario)) {
				throw new BusinessException("LMS-36342");
			}
		}
	}

	private void validaNumeroParcelas(ComposicaoPagamentoRedeco bean,
			String tipoComposicao) {
		String descontoFranqueado = "R";
		if(!descontoFranqueado.equals(tipoComposicao)){
			bean.setNumeroDeParcelas(null);
		}else if(bean.getNumeroDeParcelas()==null || (bean.getNumeroDeParcelas() <= 0)){
			throw new BusinessException("LMS-24035", new Object[]{"N�mero de Parcelas"});
		}
	}
	
	/**
	 * Obtem informa��es do Rdeeco atrav�s do ID
	 * @param  param
	 * @return TypedFlatMap
	 */
	public TypedFlatMap obterRedeco(TypedFlatMap param){
		
		Long idRedeco = param.getLong("idRedeco");
		Redeco redeco = redecoService.findById(idRedeco);
		param.put("redeco.idRedeco", redeco.getIdRedeco());
		param.put("redeco.nrRedeco", redeco.getNrRedeco());
		param.put("redeco.tpSituacaoRedeco", redeco.getTpSituacaoRedeco().getValue());
		param.put("redeco.blDigitacaoConcluida", redeco.getBlDigitacaoConcluida().getValue());
		param.put("redeco.filial.sgFilial", redeco.getFilial().getSgFilial());
		
		return param;
	}
	
	public TypedFlatMap findFilialLogada(TypedFlatMap param){
		
		/*Obtem a filial do us�ario logado */
		Filial filialSessao = SessionUtils.getFilialSessao();
		param.put("filialLogada", filialSessao.getSgFilial());
		
		return param;
	}
		
	public Integer getRowCount(TypedFlatMap criteria) {		
		return composicaoPagamentoRedecoService.getRowCount(criteria);
	}
	
	public ResultSetPage findPaginated(TypedFlatMap criteria) {	
		
		/**
		 * Campo "Filial" ficar� desativado e ser� preenchido com a filial do usu�rio logado no momento da inclus�o de um novo registro. Se filial do usu�rio logado for MTZ, campo dever� ser habilitado
		 */
		if(criteria.getYearMonthDay("dtPagamentoFinal") != null 
				&& criteria.getYearMonthDay("dtPagamentoInicial") == null){
			throw new BusinessException("");
		}
		
		return composicaoPagamentoRedecoService.findPaginatedComposicao(criteria);		
	}

	@Override
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
		composicaoPagamentoRedecoService.removeByIds(ids);
    }	
	
    public void removeById(java.lang.Long id) {
    	composicaoPagamentoRedecoService.removeById(id);
    }	

	public List findTpComposicaoPagamentoRedeco(TypedFlatMap criteria){
		
		String tpDocFat;
		if("MTZ".equals(SessionUtils.getFilialSessao().getSgFilial())){
			tpDocFat = (String)configuracoesFacade
					.getValorParametro("TP_PAGTO_COMP_RED_MTZ");
		}else{
			tpDocFat = (String)configuracoesFacade
					.getValorParametro("TP_PAGTO_COMP_RED_NAO_MTZ");
		}
		

		String[] dm = tpDocFat.split(";");
		
		String idComposicaoPagamentoRedeco = (String)criteria.get("idComposicaoPagamentoRedeco");
		if(StringUtils.isNotBlank(idComposicaoPagamentoRedeco)){
			String tpRegistro = composicaoPagamentoRedecoService.findById(Long.valueOf(idComposicaoPagamentoRedeco)).getTpComposicaoPagamentoRedeco().getValue();

			Boolean encontrou = existsDominio(dm, tpRegistro);
			if(!encontrou){
				tpDocFat += ";" + tpRegistro;
				dm = tpDocFat.split(";");
			}
		}

        List dominiosValidos = Arrays.asList(dm);
        List retorno = domainValueService.findByDomainNameAndValues("DM_TIPO_PAGAMENTO_REDECO", dominiosValidos);
        return retorno;
	}

	private Boolean existsDominio(String[] dm, String tpRegistro) {
		for(String dominio : dm){
			if(tpRegistro.equals(dominio)){
				return true;
			}
		}
		return false;
	}
	public ComposicaoPagamentoRedecoService getComposicaoPagamentoRedecoService() {
		return composicaoPagamentoRedecoService;
	}

	public void setComposicaoPagamentoRedecoService(
			ComposicaoPagamentoRedecoService composicaoPagamentoRedecoService) {
		this.composicaoPagamentoRedecoService = composicaoPagamentoRedecoService;
	}

	public void setParametroGeralService(ParametroGeralService parametroGeralService) {
		this.parametroGeralService = parametroGeralService;
	}

	public void setRedecoService(RedecoService redecoService) {
		this.redecoService = redecoService;
	}

	public void setBancoService(BancoService bancoService) {
		this.bancoService = bancoService;
	}

	public void setCreditoBancarioService(
			CreditoBancarioService creditoBancarioService) {
		this.creditoBancarioService = creditoBancarioService;
	}	
	
	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}

	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}

	public void setHistoricoFilialService(HistoricoFilialService historicoFilialService) {
		this.historicoFilialService = historicoFilialService;
	}

}
