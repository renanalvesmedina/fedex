package com.mercurio.lms.contasreceber.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.report.ReportActionSupport;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.contasreceber.model.service.FaturaService;
import com.mercurio.lms.contasreceber.report.EmitirBoletoService;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.service.ClienteService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contasreceber.reemitirBoletosAction"
 */

public class ReemitirBoletosAction extends ReportActionSupport {


	/** Set faturaService - Inversion of control */
	private FaturaService faturaService;
	public void setFaturaService(FaturaService faturaService){
		this.faturaService = faturaService;
	}
	
	/** Set filialService - Inversion of control */
	private FilialService filialService;
	public void setFilialService(FilialService filialService){
		this.filialService = filialService;
	}
	
	/** Set faturaService - Inversion of control */
	private ClienteService clienteService;
	public void setClienteService(ClienteService clienteService){
		this.clienteService = clienteService;
	}
	
	public void setEmitirBoletoService(EmitirBoletoService emitirBoletoService) {
		this.reportServiceSupport = emitirBoletoService;
	}  
	
	/**
     * Busca a fatura de acordo com a filial, o cliente e o número da fatura digitados nas lookup's
     * @param criteria
     * @return List
     */
	public List findFaturaByFilialCliente(TypedFlatMap map){ 
		Map criteria = new HashMap();
		criteria.put("nrFatura", map.getLong("nrFatura"));
		criteria.put("tpSituacaoFatura", map.getString("tpSituacaoFatura"));
		criteria.put("cliente.idCliente", map.getLong("cliente.idCliente"));
		criteria.put("filialByIdFilial.idFilial", map.getLong("filialByIdFilial.idFilial"));
		return faturaService.findLookup(criteria);

	}
    
    /**
     * Busca a filial de acordo a sigla passada digitada na lookup
     * @param criteria
     * @return List
     */
    public List findLookupFilial(TypedFlatMap criteria){
        return filialService.findLookupBySgFilial(criteria.getString("sgFilial"), criteria.getString("tpAcesso"));
    } 
    
    /**
     * Busca os cliente de acordo com o número de identificação informado
     * @param tfm cliente.pessoa.nrIdentificacao Número de identificação do cliente
     * @return Lista de clientes
     */
    public List findLookupCliente(TypedFlatMap tfm){
    		
    	List clientes = clienteService.findLookupSimplificado(tfm.getString("pessoa.nrIdentificacao"),null);
    	
    	List retorno = new ArrayList();
    		
    	for (Iterator iter = clientes.iterator(); iter.hasNext();) {
    			
    		Cliente element = (Cliente) iter.next();
    			
    		TypedFlatMap map = new TypedFlatMap();
    		map.put("pessoa.nrIdentificacao",element.getPessoa().getNrIdentificacao());
    		map.put("idCliente",element.getIdCliente());
    		map.put("pessoa.nmPessoa",element.getPessoa().getNmPessoa());
    		map.put("pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(element.getPessoa().getTpIdentificacao(),
    																				   element.getPessoa().getNrIdentificacao()));
    		retorno.add(map);
    			
    	}
    		
    	return retorno;
    		
    }

}
