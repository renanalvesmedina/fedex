package com.mercurio.lms.contasreceber.action;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.session.SessionContext;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.configuracoes.model.service.ContatoService;
import com.mercurio.lms.contasreceber.model.service.LigacaoCobrancaService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contasreceber.manterLigacoesCobrancaInadimplenciaAction"
 */

public class ManterLigacoesCobrancaInadimplenciaAction extends CrudAction {

	private ContatoService contatoService;
	
	/**
	 * Método p/ montagem do combo de contatos
	 * @param idCobrancaInadimplencia
	 * @return List
	 */
	public List findComboContatos(TypedFlatMap criterions){
		return getContatoService().findComboContato(criterions.getLong("idPessoa"));
	}

	/**
	 * Método p/ montagem do combo de faturas
	 * @param idCobrancaInadimplencia
	 * @return List
	 */
	public List findComboFaturasInadimplencia(TypedFlatMap idCobrancaInadimplencia) {
		List faturas = getLigacaoCobrancaService().findComboFaturasInadimplencia(idCobrancaInadimplencia);
		
		/** Formata o número da fatura */
		for (Iterator iter = faturas.iterator(); iter.hasNext();) {
			Map element = (Map) iter.next();
			Long nrFatura = (Long)element.remove("nrFatura");
			String sgFilial = (String)element.remove("sgFilial");
			
			element.put("descricao", sgFilial + " " + FormatUtils.completaDados(nrFatura, "0", 10, 0, true));
		}
		
		return faturas;
	}

	/**
	 * Busca source p/ tag "pairedListbox"
	 * @param idCobrancaInadimplencia
	 * @return List
	 */
	public List findFaturasByCobrancaInadimplencia(Long idCobrancaInadimplencia) {
		
		List faturas = getLigacaoCobrancaService().findFaturasByCobrancaInadimplencia(idCobrancaInadimplencia);
		
		/** Formata o número da fatura */
		for (Iterator iter = faturas.iterator(); iter.hasNext();) {
			Map element = (Map) iter.next();
			Long nrFatura = (Long)element.remove("nrFatura");
			String sgFilial = (String)element.remove("sgFilial");
			
			element.put("nrFatura", sgFilial + " " + FormatUtils.completaDados(nrFatura, "0", 10, 0, true));
		}
		
		return faturas;
	}

	public Serializable findPaginatedByLigacaoCobranca(TypedFlatMap tfm) {
		return getLigacaoCobrancaService().findPaginatedByLigacaoCobranca(tfm);
	}

    public Serializable findByIdMap(Long id) {
		return getLigacaoCobrancaService().findByIdMap(id);
	}

	public Serializable findById(Long id) {
		return getLigacaoCobrancaService().findById(id);
	}

	public Integer getRowCountByLigacaoCobranca(TypedFlatMap tfm) {
		return getLigacaoCobrancaService().getRowCountByLigacaoCobranca(tfm);
	}

	public void removeById(Long id) {
		getLigacaoCobrancaService().removeById(id);
	}

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		getLigacaoCobrancaService().removeByIds(ids);
	}

	/**
	 * Gravação da LigacaoCobranca e ItemLigacao (List em LigacaoCobranca)
	 * @param tfm
	 * @return Serializable
	 */
	public Serializable store(TypedFlatMap tfm) {
		return getLigacaoCobrancaService().store(tfm);
	}	
	
	/**
	 * Busca a data e a hora atual
	 * @param tfm
	 * @return Map com a data e a hora
	 */
	public Map getDataHora(TypedFlatMap tfm){
		Map map = new HashMap();
		map.put("dataHora", JTDateTimeUtils.getDataHoraAtual());
		return map;
	}

	/**
     * Busca os dados do usuário logado na sessão pra montagem na tela
     * @return Map 
     */
    public Map getUsuarioSessao() {
    	Usuario u = SessionContext.getUser();
		TypedFlatMap tfm = new TypedFlatMap();
		tfm.put("idUsuario", u.getIdUsuario());
		tfm.put("nmUsuario", u.getNmUsuario());
		tfm.put("nrMatricula", u.getNrMatricula());
    	return tfm;
    }
	
	public ContatoService getContatoService() {
		return contatoService;
	}

	public void setContatoService(ContatoService contatoService) {
		this.contatoService = contatoService;
	}

	public void setLigacaoCobrancaService(LigacaoCobrancaService ligacaoCobrancaService) {
		this.defaultService = ligacaoCobrancaService;
	}

	public LigacaoCobrancaService getLigacaoCobrancaService() {
		return (LigacaoCobrancaService)defaultService;
	}
	
	
}