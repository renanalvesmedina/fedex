package com.mercurio.lms.contasreceber.action;

import java.io.Serializable;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.joda.time.YearMonthDay;

import com.mercurio.adsm.core.util.ReflectionUtils;
import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.FindDefinition;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.masterdetail.ItemList;
import com.mercurio.adsm.framework.model.masterdetail.ItemListConfig;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailAction;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailFactory;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailKey;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntry;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntryConfig;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Moeda;
import com.mercurio.lms.configuracoes.model.service.MoedaService;
import com.mercurio.lms.contasreceber.model.Cedente;
import com.mercurio.lms.contasreceber.model.DepositoCcorrente;
import com.mercurio.lms.contasreceber.model.DevedorDocServFat;
import com.mercurio.lms.contasreceber.model.Fatura;
import com.mercurio.lms.contasreceber.model.ItemDepositoCcorrente;
import com.mercurio.lms.contasreceber.model.param.DepositoCcorrenteParam;
import com.mercurio.lms.contasreceber.model.param.RelacaoDocumentoServicoDepositoParam;
import com.mercurio.lms.contasreceber.model.param.RelacaoFaturaDepositoParam;
import com.mercurio.lms.contasreceber.model.service.CedenteService;
import com.mercurio.lms.contasreceber.model.service.DepositoCcorrenteService;
import com.mercurio.lms.contasreceber.model.service.DevedorDocServFatService;
import com.mercurio.lms.contasreceber.model.service.FaturaService;
import com.mercurio.lms.expedicao.model.DoctoServico;
import com.mercurio.lms.expedicao.model.service.DoctoServicoService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.service.ClienteService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contasreceber.manterRelacaoDocumentosDepositosAction"
 */

public class ManterRelacaoDocumentosDepositosAction extends MasterDetailAction {
	
	private CedenteService cedenteService;
	
	private ClienteService clienteService;
	
	private DoctoServicoService doctoServicoService;
	
	private DevedorDocServFatService devedorDocServFatService;
	
	private FaturaService faturaService;
	
	private DomainValueService domainValueService;
	
	private MoedaService moedaService;
	
	private DepositoCcorrenteService depositoCcorrente; 
	
	/**
	 * Declaração serviço principal da Action.
	 * 
	 * @param tipoClassificacaoClienteService
	 */
	
	public void setDepositoCcorrenteService(DepositoCcorrenteService depositoCcorrenteService) {
		super.setMasterService(depositoCcorrenteService);
	}
	
	public DepositoCcorrenteService getDepositoCcorrenteService() {
		return (DepositoCcorrenteService)super.getMasterService();
	}
	
	public YearMonthDay findDataAtual(){
		return JTDateTimeUtils.getDataAtual();
	}
	
	/**Busca a moeda padrão e 
	 * 	Se o usuário da sessão for um cliente (Usuario.tp_categoria_usuario = C) proteger o campo situação. (Na aba Detalhamento)
	 * 	Solicitado pela Rita
	 * 
	 * @return Map
	 */
	public Map findInitValues(){
		TypedFlatMap retorno = new TypedFlatMap();
		
		
		retorno.put("siglaSimbolo",((Moeda)moedaService.findMoedaPadraoBySiglaPais("BRA")).getSiglaSimbolo());
		
		
		if ( SessionUtils.getUsuarioLogado() != null ){
			retorno.put("asCliente",SessionUtils.getUsuarioLogado().getTpCategoriaUsuario().getValue().equalsIgnoreCase("C"));  
		}else{
			retorno.put("asCliente","false");
		}
		return retorno;
	}	
	
	/**
	 * Método que salva as alterações feitas no mestre e nos detalhes
	 * 
	 * author Mickaël Jalbert
	 * @since 27/03/2006
	 * 
	 * @param TypedFlatMap
	 * @return id gerado para o mestre
	 */
	public TypedFlatMap store(TypedFlatMap map) {
		TypedFlatMap retorno = new TypedFlatMap();
		MasterEntry entry = getMasterFromSession(map.getLong("idDepositoCcorrente"), true);		
		ItemList items = getItemsFromSession(entry, "itemDepositoCcorrente");
		ItemListConfig config = getMasterConfig().getItemListConfig("itemDepositoCcorrente");		
		
		try {
			DepositoCcorrente depositoCcorrente = mountDepositoCcorrente(map, (DepositoCcorrente) entry.getMaster());
			
			depositoCcorrente = getDepositoCcorrenteService().store(depositoCcorrente, items, config);
			items.resetItemsState(); 
			updateMasterInSession(entry);		
			
			retorno.put("idDepositoCcorrente",depositoCcorrente.getIdDepositoCcorrente());			
			return retorno;
        } catch (RuntimeException e) {
            throw e;
        }			
	}
	
	private DepositoCcorrente mountDepositoCcorrente(TypedFlatMap map, DepositoCcorrente depositoCcorrente) {
		Cedente cedente = new Cedente();
		cedente.setIdCedente(map.getLong("cedente.idCedente"));
		depositoCcorrente.setCedente(cedente);
		
		Cliente cliente = new Cliente();
		cliente.setIdCliente(map.getLong("cliente.idCliente"));
		depositoCcorrente.setCliente(cliente);
		
		depositoCcorrente.setIdDepositoCcorrente(map.getLong("idDepositoCcorrente"));
		depositoCcorrente.setVlDeposito(map.getBigDecimal("vlDeposito"));
		depositoCcorrente.setObDepositoCcorrente(map.getString("obDepositoCcorrente"));
		depositoCcorrente.setBlRelacaoFechada(map.getBoolean("blRelacaoFechada"));
		depositoCcorrente.setTpSituacaoRelacao(map.getDomainValue("tpSituacaoRelacao"));
		depositoCcorrente.setDtDeposito(map.getYearMonthDay("dtDeposito"));
		
		return depositoCcorrente;
	} 
	
	/**
	 * Busca um mestre pelo seu id e armazena-o na sessão do usuário
	 * 
	 * author Mickaël Jalbert
	 * @since 27/03/2006
	 * 
	 * @param id
	 * @return um DepositoCcorrente, objeto mestre
	 */
	public Map findById(java.lang.Long id) {
		DepositoCcorrente masterObj = getDepositoCcorrenteService().findById(id);
		putMasterInSession(masterObj);
		MasterEntry entry = getMasterFromSession(id, true);
		
		//Para não dar erro, é initializado os filhos do registro master
		ItemList items = getItemsFromSession(entry, "itemDepositoCcorrente");
		ItemListConfig config = getMasterConfig().getItemListConfig("itemDepositoCcorrente");
		for (Iterator iter = items.iterator(id, config); iter.hasNext();) {
			((ItemDepositoCcorrente)iter.next()).getIdItemDepositoCcorrente();		
		}
		TypedFlatMap map = new TypedFlatMap();

		map.put("idDepositoCcorrente", masterObj.getIdDepositoCcorrente());
		map.put("idDepositoCcorrenteTmp", masterObj.getIdDepositoCcorrente());
		map.put("cliente.idCliente", masterObj.getCliente().getIdCliente());
		map.put("cliente.pessoa.nrIdentificacao", masterObj.getCliente().getPessoa().getNrIdentificacao());
		map.put("cliente.pessoa.nrIdentificacaoFormatado", masterObj.getCliente().getPessoa().getNrIdentificacaoFormatado());
		map.put("cliente.pessoa.nmPessoa", masterObj.getCliente().getPessoa().getNmPessoa());
		map.put("cedente.idCedente", masterObj.getCedente().getIdCedente());
		map.put("dtDeposito", masterObj.getDtDeposito());
		map.put("vlDeposito", masterObj.getVlDeposito());
		map.put("blRelacaoFechada", masterObj.getBlRelacaoFechada());
		map.put("blRelacaoIdentificada", "I".equals(masterObj.getTpSituacaoRelacao().getValue()));
		map.put("tpSituacaoRelacao", masterObj.getTpSituacaoRelacao().getValue());
		map.put("obDepositoCcorrente", masterObj.getObDepositoCcorrente());
		
		return map;
	}
	
	/**
	 * Remove uma listra de registros mestres
	 * 
	 * author Mickaël Jalbert
	 * @since 27/03/2006
	 * 
	 * @param ids
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		getDepositoCcorrenteService().removeByIds(ids);
	}
	
	/**
	 * Remove um registro mestre
	 * 
	 * author Mickaël Jalbert
	 * @since 27/03/2006
	 * 
	 * @param id
	 */
	public void removeById(Long id) {	
		getDepositoCcorrenteService().removeById(id);
		newMaster();			
	}
	
	public ResultSetPage findPaginatedTela(TypedFlatMap map) {
		DepositoCcorrenteParam depositoCcorrenteParam = mountParameters(map);
		Moeda moeda = null;
		ResultSetPage rsp = getDepositoCcorrenteService().findPaginated(depositoCcorrenteParam, FindDefinition.createFindDefinition(map));
		
		List lstDepocitoCcorrente = rsp.getList();
		
		List lstRetorno = new ArrayList();
		
		for (int i = 0; i < lstDepocitoCcorrente.size(); i++) {
			DepositoCcorrente depositoCcorrente = (DepositoCcorrente)lstDepocitoCcorrente.get(i);
			
			Map mapRetorno = new HashMap();
			
			if (i == 0){
				moeda = moedaService.findMoedoByDepositoCcorrente(depositoCcorrente.getIdDepositoCcorrente());
			}			
			
			mapRetorno.put("idDepositoCcorrente", depositoCcorrente.getIdDepositoCcorrente());
			mapRetorno.put("idDepositoCcorrenteTmp", depositoCcorrente.getIdDepositoCcorrente());
			mapRetorno.put("nmBanco", depositoCcorrente.getCedente().getAgenciaBancaria().getBanco().getNmBanco());
			mapRetorno.put("nmAgencia", depositoCcorrente.getCedente().getAgenciaBancaria().getNmAgenciaBancaria());
			mapRetorno.put("nmCliente", depositoCcorrente.getCliente().getPessoa().getNmPessoa());
			mapRetorno.put("dtDeposito", depositoCcorrente.getDtDeposito());
			mapRetorno.put("vlDeposito", depositoCcorrente.getVlDeposito());
			mapRetorno.put("siglaSimbolo", moeda.getSiglaSimbolo());
			mapRetorno.put("tpSituacaoRelacao", depositoCcorrente.getTpSituacaoRelacao());
			


			lstRetorno.add(mapRetorno);
		}
		
		rsp.setList(lstRetorno);
		
		return rsp;
	}
	
	public Integer getRowCountTela(TypedFlatMap map) {
		DepositoCcorrenteParam depositoCcorrenteParam = mountParameters(map);
		return getDepositoCcorrenteService().getRowCount(depositoCcorrenteParam);
	}
	
	private DepositoCcorrenteParam mountParameters(TypedFlatMap map){
		DepositoCcorrenteParam depositoCcorrenteParam = new DepositoCcorrenteParam();
		
		depositoCcorrenteParam.setIdCliente(map.getLong("cliente.idCliente"));
		depositoCcorrenteParam.setIdDepositoCcorrente(map.getLong("idDepositoCcorrenteTmp"));
		depositoCcorrenteParam.setIdCedente(map.getLong("cedente.idCedente"));
		depositoCcorrenteParam.setDtDepositoInicial(map.getYearMonthDay("dtDepositoInicial"));  
		depositoCcorrenteParam.setDtDepositoFinal(map.getYearMonthDay("dtDepositoFinal")); 
		depositoCcorrenteParam.setTpSituacaoDeposito(map.getString("tpSituacaoRelacao"));
		
		return depositoCcorrenteParam;
	}
	
	/**
	 * Salva um registro detalhe/filho na sessão.
	 * 
	 * author Mickaël Jalbert
	 * @since 27/03/2006
	 * 
	 * @param parameters Parametros utilizado para montar o detalhe
	 * @return id do detalhe (temporário no caso de inserção)
	 */
	public Serializable saveItemDepositoCcorrente(TypedFlatMap map) {
		List lstIdDocumento = map.getList("ids");
		List lstIdDocumentoInserido = new ArrayList();
		List lstItemApagar = new ArrayList();
		
		for (Iterator iter = lstIdDocumento.iterator(); iter.hasNext();) {
			Map mapItem = new HashMap(2);
			
			Long idDocumento = Long.valueOf((String)iter.next());
			String tipoDocumento = map.getString("tpDocumento");
			
			mapItem.put("idDocumento", idDocumento);
			mapItem.put("tpDocumento", tipoDocumento);
			mapItem.put("tpDocumentoAnterior", map.getString("tpDocumentoAnterior"));			
			mapItem.put("masterId", map.getString("masterId"));
			mapItem.put("idCliente",map.getLong("idCliente"));
			
			try {				
				saveItemInstance(mapItem, "itemDepositoCcorrente");				
			} catch (BusinessException be) {
				
				Long masterId = getMasterId(map);
	    		
				ItemList items = getItemsFromSession(getMasterFromSession(masterId, true), "itemDepositoCcorrente");				

				ItemListConfig itemListConfig = getMasterConfig().getItemListConfig("itemDepositoCcorrente");
				
				//Para cada item da sessão
				for (Iterator iterator = items.iterator(masterId, itemListConfig); iterator.hasNext();) {

					ItemDepositoCcorrente itemDepositoCcorrente = (ItemDepositoCcorrente)iterator.next();
					
					//Para cada item que eu inseri na sessão agora
					for (Iterator iterator2 = lstIdDocumentoInserido.iterator(); iterator2.hasNext();) {
						
						Object[] obj = (Object[]) iterator2.next();
						
						Long   id   = (Long) obj[0];
						String tipo = (String) obj[1];

//						Se o id do devedor da sessão é igual ao id do devedor dum dos itens que eu 
						//acabei de inserir, adicionar ele a lista de itens a apagar da sessão
						if (tipo.equals("FAT")){			
							if (itemDepositoCcorrente.getFatura().getIdFatura().equals(id)){
								lstItemApagar.add(itemDepositoCcorrente.getIdItemDepositoCcorrente());
							}
						} else {
							if (itemDepositoCcorrente.getDevedorDocServFat().getIdDevedorDocServFat().equals(id)){
								lstItemApagar.add(itemDepositoCcorrente.getIdItemDepositoCcorrente());
							}
						}
						
					}
				}
				//Remover da sessão todos 
				removeItemByIds(lstItemApagar, "itemDepositoCcorrente");
				
				throw be;
			}
			
			lstIdDocumentoInserido.add(new Object[]{idDocumento,tipoDocumento});
			
		}
		return "";
	}
	
	public ResultSetPage findPaginatedItemDepositoCcorrente(Map parameters) {
		ResultSetPage rsp = findPaginatedItemList(parameters, "itemDepositoCcorrente");
		
		List lstItemDepositoCcorrente = rsp.getList();
		List lstRetorno = new ArrayList();
		
		for (Iterator iter = lstItemDepositoCcorrente.iterator(); iter.hasNext();){
			ItemDepositoCcorrente itemDepositoCcorrente = (ItemDepositoCcorrente)iter.next();
			Map mapRetorno = new HashMap();

			mapRetorno.put("idItemDepositoCcorrente", itemDepositoCcorrente.getIdItemDepositoCcorrente());
			
			if (itemDepositoCcorrente.getFatura() != null){
				
				mapRetorno.put("tpDocumento", domainValueService.findDomainValueByValue("DM_TIPO_DOCUMENTO_DEPOSITO", "FAT"));
				mapRetorno.put("nrDocumento", itemDepositoCcorrente.getFatura().getFilialByIdFilial().getSgFilial() + " " + FormatUtils.formataNrDocumento(itemDepositoCcorrente.getFatura().getNrFatura().toString(),"FAT"));
				mapRetorno.put("dtEmissao", itemDepositoCcorrente.getFatura().getDtEmissao());
				mapRetorno.put("vlDocumento", itemDepositoCcorrente.getFatura().getVlTotal());
				mapRetorno.put("vlDesconto", itemDepositoCcorrente.getFatura().getVlDesconto());
				mapRetorno.put("vlLiquido", itemDepositoCcorrente.getFatura().getVlTotal().subtract(itemDepositoCcorrente.getFatura().getVlDesconto()));
				mapRetorno.put("idMoeda", itemDepositoCcorrente.getFatura().getMoeda().getIdMoeda());
				mapRetorno.put("siglaSimbolo", itemDepositoCcorrente.getFatura().getMoeda().getSiglaSimbolo());				
			} else {
				mapRetorno.put("tpDocumento", itemDepositoCcorrente.getDevedorDocServFat().getDoctoServico().getTpDocumentoServico());
				String nrDoctoServico = null;
				String tpDoctoServico = null;
				nrDoctoServico = itemDepositoCcorrente.getDevedorDocServFat().getDoctoServico().getNrDoctoServico().toString();
				tpDoctoServico = ((DomainValue)itemDepositoCcorrente.getDevedorDocServFat().getDoctoServico().getTpDocumentoServico()).getValue();
				mapRetorno.put("nrDocumento", itemDepositoCcorrente.getDevedorDocServFat().getDoctoServico().getFilialByIdFilialOrigem().getSgFilial() + " " + FormatUtils.formataNrDocumento(nrDoctoServico, tpDoctoServico));
				
				if ( itemDepositoCcorrente.getDevedorDocServFat().getDoctoServico().getDhEmissao() != null ){
					mapRetorno.put("dtEmissao", itemDepositoCcorrente.getDevedorDocServFat().getDoctoServico().getDhEmissao().toYearMonthDay());
				}else{
					mapRetorno.put("dtEmissao","");
				}

				//Aparece o valor do documento com desconto se o desconto é 'Aprovado'
				if (itemDepositoCcorrente.getDevedorDocServFat().getDesconto() != null && itemDepositoCcorrente.getDevedorDocServFat().getDesconto().getTpSituacaoAprovacao().getValue().equals("A")){
					mapRetorno.put("vlDesconto", itemDepositoCcorrente.getDevedorDocServFat().getDesconto().getVlDesconto());
					mapRetorno.put("vlLiquido", itemDepositoCcorrente.getDevedorDocServFat().getVlDevido().subtract(itemDepositoCcorrente.getDevedorDocServFat().getDesconto().getVlDesconto()));
				} else {
					mapRetorno.put("vlDesconto", BigDecimal.ZERO);
					mapRetorno.put("vlLiquido", itemDepositoCcorrente.getDevedorDocServFat().getVlDevido());
				}
				
				mapRetorno.put("vlDocumento", itemDepositoCcorrente.getDevedorDocServFat().getVlDevido());
				
				mapRetorno.put("idMoeda", itemDepositoCcorrente.getDevedorDocServFat().getDoctoServico().getMoeda().getIdMoeda());
				mapRetorno.put("siglaSimbolo", itemDepositoCcorrente.getDevedorDocServFat().getDoctoServico().getMoeda().getSiglaSimbolo());
			}
			
			lstRetorno.add(mapRetorno);
		}
		
		rsp.setList(lstRetorno);
		
		return rsp;
	}
	
	public Integer getRowCountItemDepositoCcorrente(Map parameters){
		return getRowCountItemList(parameters, "itemDepositoCcorrente");
	}
	
	public Object findByIdItemDepositoCcorrente(MasterDetailKey key) {
		return findItemById(key, "itemDepositoCcorrente");
	}

	/***
	 * Remove uma lista de desciçoes items.
	 *  
	 * @param ids ids dos desciçoes item a serem removidos.
	 * 
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIdsItemDepositoCcorrente(List ids) {
		super.removeItemByIds(ids, "itemDepositoCcorrente");
	}	

	protected MasterEntryConfig createMasterConfig(MasterDetailFactory masterFactory) {
		
		MasterEntryConfig config = masterFactory.createMasterEntryConfig(DepositoCcorrente.class);
		
		// Comparador para realizar a ordenação dos items filhos de acordo com a regra de negócio.
		Comparator descComparator = new Comparator() {
			
			public int compare(Object o1, Object o2) {
				
				if ((o1 instanceof Comparable) && (o2 instanceof Comparable)) {
					return ((Comparable)o1).compareTo(o2);
				} else {
					ItemDepositoCcorrente d1 = (ItemDepositoCcorrente) o1;
					ItemDepositoCcorrente d2 = (ItemDepositoCcorrente) o2;
					
					String tpDocumento1;
					String tpDocumento2;
					Long nrDocumento1;
					Long nrDocumento2;
					
					if (d1.getFatura() != null) {
						tpDocumento1 = "FAT";
						nrDocumento1 = d1.getFatura().getNrFatura();
					} else {
						tpDocumento1 = d1.getDevedorDocServFat().getDoctoServico().getTpDocumentoServico().getDescription().getValue(); 
						nrDocumento1 = d1.getDevedorDocServFat().getDoctoServico().getNrDoctoServico();
					}
					
					if (d2.getFatura() != null) {
						tpDocumento2 = "FAT";
						nrDocumento2 = d2.getFatura().getNrFatura();
					} else {
						tpDocumento2 = d2.getDevedorDocServFat().getDoctoServico().getTpDocumentoServico().getDescription().getValue(); 
						nrDocumento2 = d2.getDevedorDocServFat().getDoctoServico().getNrDoctoServico();
					}

					int retorno = 0;
					
					retorno = tpDocumento1.compareTo(tpDocumento2);
							                   
					if( retorno == 0 ){
						retorno = nrDocumento1.compareTo(nrDocumento2);
					}
					
					return retorno;
				}
			}
			
		};
		
		
		// Esta instancia será responsavel por carregar os items filhos na sessão a partir do banco de dados.
		ItemListConfig itemInit = new ItemListConfig() {
			
			
			public List initialize(Long masterId) {
				if (masterId != null) {
					return getDepositoCcorrenteService().findItemDepositoCcorrente(masterId);
				} else {
					return Collections.EMPTY_LIST;
				}
			}

			public Integer getRowCount(Long masterId) {
				return getDepositoCcorrenteService().getRowCountItemDepositoCcorrente(masterId);
			}

			public void modifyItemValues(Object newBean, Object bean) {
				Set ignore = new HashSet(3, 1f);
				ignore.add("idItemDepositoCcorrente");
				ignore.add("versao");
				ReflectionUtils.syncObjectProperties(bean, newBean, ignore);
			}

			public Map configItemDomainProperties() {
				Map props = new HashMap(2, 1f);
				return props;
			}

			public Object populateNewItemInstance(Map parameters, Object bean) {
				TypedFlatMap map = new TypedFlatMap();
				map.putAll(parameters);
				ItemDepositoCcorrente itemDepositoCcorrente = (ItemDepositoCcorrente)bean;
				itemDepositoCcorrente = mountItemDepositoCcorrente(map, itemDepositoCcorrente);
	    		resolveDomainValueProperties(itemDepositoCcorrente);
	    		
	    		Long masterId = getMasterId(parameters);
	    		
	    		MasterEntry entry = getMasterFromSession(masterId, true);
	    		ItemListConfig config = getMasterConfig().getItemListConfig("itemDepositoCcorrente");
	    		
				ItemList items = getItemsFromSession(entry, "itemDepositoCcorrente");
				
				DepositoCcorrenteParam depositoCcorrenteParam = new DepositoCcorrenteParam();
				depositoCcorrenteParam.setIdCliente((Long) parameters.get("idCliente"));
				depositoCcorrenteParam.setIdDepositoCcorrente(masterId);
				
				//Validação de regras de negócio
				getDepositoCcorrenteService().storeBeforeItemDepositoCcorrente(
						                                            depositoCcorrenteParam, 
						                                            items, 
						                                            config, 
						                                            itemDepositoCcorrente);

				return itemDepositoCcorrente;
			}
			
		};
		
		config.addItemConfig("itemDepositoCcorrente",ItemDepositoCcorrente.class, itemInit, descComparator);
		return config;
	}
	
	/**
	 * Fecha o deposito(trovar o campo blFehcado para true)
	 * */
	public Map executeFecharDepositoCcorrente(TypedFlatMap map){
		DepositoCcorrente depositoCcorrente = getDepositoCcorrenteService().findById(map.getLong("idDepositoCcorrente"));
		getDepositoCcorrenteService().executeFecharDepositoCcorrente(depositoCcorrente);
		
		this.findById(depositoCcorrente.getIdDepositoCcorrente());
		
		TypedFlatMap mapRetorno = new TypedFlatMap();
		
		mapRetorno.put("blRelacaoFechada", Boolean.TRUE);
		
		return mapRetorno; 
	}
	
	private ItemDepositoCcorrente mountItemDepositoCcorrente(TypedFlatMap map, ItemDepositoCcorrente itemDepositoCcorrente){		
		//O documento é uma fatura
		if ((map.getString("tpDocumento")).equals("FAT")){			
			itemDepositoCcorrente.setFatura(faturaService.findById(map.getLong("idDocumento")));
		} else {
			itemDepositoCcorrente.setDevedorDocServFat(devedorDocServFatService.findById(map.getLong("idDocumento")));
		}
		
		return itemDepositoCcorrente;
	}
	
	public Map findSomatorios(TypedFlatMap map){
		TypedFlatMap mapRetorno = new TypedFlatMap();
		
		Long masterId = getMasterId(map);

		MasterEntry entry = getMasterFromSession(getMasterId(map), true);			
		ItemList items = getItemsFromSession(entry, "itemDepositoCcorrente");	
		ItemListConfig config = getMasterConfig().getItemListConfig("itemDepositoCcorrente");

		BigDecimal vlDeposito = new BigDecimal("0.00");
		BigDecimal vlDocumento = new BigDecimal("0.00");
		BigDecimal vlDiferenca = new BigDecimal("0.00");
		
		if (map.getBigDecimal("vlDeposito") != null){
			vlDeposito = map.getBigDecimal("vlDeposito");
		}
		
		vlDeposito = vlDeposito.setScale(2, RoundingMode.HALF_UP);
		vlDocumento = vlDocumento.setScale(2, RoundingMode.HALF_UP);
		vlDiferenca = vlDiferenca.setScale(2, RoundingMode.HALF_UP);
		
		for (Iterator iter = items.iterator(masterId, config); iter.hasNext();) {
			ItemDepositoCcorrente itemDepositoCcorrente = (ItemDepositoCcorrente)iter.next();
			
			if (itemDepositoCcorrente.getFatura() != null) {
				vlDocumento = vlDocumento.add(itemDepositoCcorrente.getFatura().getVlTotal().subtract(itemDepositoCcorrente.getFatura().getVlDesconto()));
			} else {
				//Aparece o valor do documento com desconto se o desconto é 'Aprovado'
				if (itemDepositoCcorrente.getDevedorDocServFat().getDesconto() != null && itemDepositoCcorrente.getDevedorDocServFat().getDesconto().getTpSituacaoAprovacao().getValue().equals("A")){
					vlDocumento = vlDocumento.add(itemDepositoCcorrente.getDevedorDocServFat().getVlDevido().subtract(itemDepositoCcorrente.getDevedorDocServFat().getDesconto().getVlDesconto()));
				} else {
					vlDocumento = vlDocumento.add(itemDepositoCcorrente.getDevedorDocServFat().getVlDevido());
				}				
			}

		}
		
		vlDiferenca = vlDeposito.subtract(vlDocumento);
		
		mapRetorno.put("vlDeposito", vlDeposito);
		mapRetorno.put("vlDocumento", vlDocumento);				
		mapRetorno.put("vlDiferenca", vlDiferenca);	
	
		return mapRetorno;
	}
	
	/**
	 * Retorna a lista devedore OU faturas dependendo do filtro 'tpDocumento'
	 * 
	 * @author Mickaël Jalbert
	 * @since 29/03/2006
	 * 
	 * @param TypedFlatMap map
	 * @param FindDefinition findDef
	 * @return ResultSetPage
	 * */	
	public ResultSetPage findPaginatedDocumento(TypedFlatMap map){
		String tpDocumento = map.getString("tpDocumento");

		FindDefinition findDef = FindDefinition.createFindDefinition(map);
		
		if (tpDocumento.equals("FAT")){
			
			return findPaginatedFatura(mountParamFindFatura(map), findDef);
		} else {
			return findPaginatedDoctoServico(mountParamFindDocumentoServico(map), findDef);
		}
	}
	
	private RelacaoFaturaDepositoParam mountParamFindFatura(TypedFlatMap map){
		RelacaoFaturaDepositoParam param = new RelacaoFaturaDepositoParam();
		param.setDtEmissaoInicial(map.getYearMonthDay("dtEmissaoInicial"));
		param.setDtEmissaoFinal(map.getYearMonthDay("dtEmissaoFinal"));
		param.setNrFaturaInicial(map.getLong("nrDocumentoInicial"));
		param.setNrFaturaFinal(map.getLong("nrDocumentoFinal"));
		
		param.setIdCliente(map.getLong("idCliente"));
		
		//Montar a lista de tpSituacaoFatura, filtros para os documentos de servico
		List lstTpSituacaoFatura = new ArrayList();
		
		lstTpSituacaoFatura.add("EM");
		lstTpSituacaoFatura.add("BL");
		lstTpSituacaoFatura.add("RE");
		lstTpSituacaoFatura.add("RC");
		
		param.setLstTpSituacaoFatura(lstTpSituacaoFatura);	
		
		//Montar a lista de idFaturas para não incluir eles na pesquisa
		List lstFaturas = new ArrayList();

		ItemList items = getItemsFromSession(getMasterFromSession(getMasterId(map), true), "itemDepositoCcorrente");
		ItemListConfig config = getMasterConfig().getItemListConfig("itemDepositoCcorrente");
		
		for (Iterator iter = items.iterator(getMasterId(map), config); iter.hasNext();){
			ItemDepositoCcorrente itemDepositoCcorrente = (ItemDepositoCcorrente)iter.next();
			if (itemDepositoCcorrente.getFatura() != null){
				lstFaturas.add(itemDepositoCcorrente.getFatura().getIdFatura());
			}
		}
		
		param.setLstFaturas(lstFaturas);		
		
		return param;
	}
	
	private RelacaoDocumentoServicoDepositoParam mountParamFindDocumentoServico(TypedFlatMap map){
		RelacaoDocumentoServicoDepositoParam param = new RelacaoDocumentoServicoDepositoParam();
		param.setDtEmissaoInicial(map.getYearMonthDay("dtEmissaoInicial"));
		param.setDtEmissaoFinal(map.getYearMonthDay("dtEmissaoFinal"));
		param.setNrDoctoServicoInicial(map.getLong("nrDocumentoInicial"));
		param.setNrDoctoServicoFinal(map.getLong("nrDocumentoFinal"));
		param.setIdCliente(map.getLong("idCliente"));
		param.setTpDoctoServico(map.getString("tpDocumento"));
		
		//Montar a lista de tpSituacaoCobranca, filtros para os documentos de servico
		List lstTpSituacaoDocumento = new ArrayList();
		
		lstTpSituacaoDocumento.add("P");
		lstTpSituacaoDocumento.add("C");
		
		param.setLstTpSituacaoDocumento(lstTpSituacaoDocumento);

		//Montar a lista de idDevedores para não incluir eles na pesquisa
		List lstDevedores = new ArrayList();
		ItemList items = getItemsFromSession(getMasterFromSession(getMasterId(map), true), "itemDepositoCcorrente");
		ItemListConfig config = getMasterConfig().getItemListConfig("itemDepositoCcorrente");
		
		for (Iterator iter = items.iterator(getMasterId(map), config); iter.hasNext();){
			ItemDepositoCcorrente itemDepositoCcorrente = (ItemDepositoCcorrente)iter.next();
			if (itemDepositoCcorrente.getDevedorDocServFat() != null){
				lstDevedores.add(itemDepositoCcorrente.getDevedorDocServFat().getIdDevedorDocServFat());
			}			
		}		
		
		param.setLstDevedores(lstDevedores);
		
		return param;
	}	
	
	/**
	 * Retorna a lista de devedores a partir dos filtros informados
	 * 
	 * @author Mickaël Jalbert
	 * @since 29/03/2006
	 * 
	 * @param String tpDocumento
	 * @param YearMonthDay dtEmissao
	 * @param FindDefinition findDef
	 * @return ResultSetPage
	 * */
	public ResultSetPage findPaginatedDoctoServico(RelacaoDocumentoServicoDepositoParam param, FindDefinition findDef) {
		
		ResultSetPage rsp = doctoServicoService.findPaginatedRelacaoDeposito(param, findDef);
		
		List lstDoctoServico = rsp.getList();
		List lstRetorno = new ArrayList();
		
		for (Iterator<DevedorDocServFat> iter = lstDoctoServico.iterator(); iter.hasNext();){
			DevedorDocServFat ddsf = iter.next();
			DoctoServico doctoServico = ddsf.getDoctoServico();
			Map mapRetorno = new HashMap();
			
			mapRetorno.put("idDocumento", ddsf.getIdDevedorDocServFat());
			mapRetorno.put("tpDocumento", doctoServico.getTpDocumentoServico().getDescription());
			String nrDoctoServico = null;
			String tpDoctoServico = null;
			nrDoctoServico = doctoServico.getNrDoctoServico().toString();
			tpDoctoServico = ((DomainValue)doctoServico.getTpDocumentoServico()).getValue();
			mapRetorno.put("nrDocumento", doctoServico.getFilialByIdFilialOrigem().getSgFilial() + " " + FormatUtils.formataNrDocumento(nrDoctoServico, tpDoctoServico));
			if (doctoServico.getDhEmissao() != null){
				mapRetorno.put("dtEmissao", doctoServico.getDhEmissao().toYearMonthDay());
			}
			
			//Aparece o valor do documento com desconto se o desconto é 'Aprovado'
			if (ddsf.getDesconto() != null){
				mapRetorno.put("tpSituacaoAprovacao", ddsf.getDesconto().getTpSituacaoAprovacao() != null ? ddsf.getDesconto().getTpSituacaoAprovacao().getValue(): "");
			} else {
				mapRetorno.put("tpSituacaoAprovacao", "");
			}
			mapRetorno.put("vlDocumento", ddsf.getVlDevido());
			mapRetorno.put("idMoeda", doctoServico.getMoeda().getIdMoeda());
			mapRetorno.put("siglaSimbolo", doctoServico.getMoeda().getSiglaSimbolo());
			lstRetorno.add(mapRetorno);
		}
		
		rsp.setList(lstRetorno);
		
		return rsp;
	}
	
	/**
	 * Retorna a lista de faturas a partir dos filtros informados
	 * 
	 * @author Mickaël Jalbert
	 * @since 29/03/2006
	 * 
	 * @param String tpDocumento
	 * @param YearMonthDay dtEmissao
	 * @param FindDefinition findDef
	 * @return ResultSetPage
	 * */	
	public ResultSetPage findPaginatedFatura(RelacaoFaturaDepositoParam param, FindDefinition findDef) {
		ResultSetPage rsp = faturaService.findPaginatedRelacaoDeposito(param, findDef);
		
		List lstFaturas = rsp.getList();
		List lstRetorno = new ArrayList();
		
		for (Iterator iter = lstFaturas.iterator(); iter.hasNext();){
			Fatura fatura = (Fatura)iter.next();
			Map mapRetorno = new HashMap();
			
			mapRetorno.put("idDocumento", fatura.getIdFatura());
			mapRetorno.put("tpDocumento", "FAT");
			mapRetorno.put("tpSituacaoAprovacao", fatura.getTpSituacaoAprovacao()!= null ? fatura.getTpSituacaoAprovacao().getValue() : "");
			mapRetorno.put("nrDocumento", fatura.getFilialByIdFilial().getSgFilial() + " " + FormatUtils.formataNrDocumento(fatura.getNrFatura().toString(), "FAT"));
			mapRetorno.put("dtEmissao", fatura.getDtEmissao());
			mapRetorno.put("vlDocumento", fatura.getVlTotal());
			mapRetorno.put("idMoeda", fatura.getMoeda().getIdMoeda());
			mapRetorno.put("siglaSimbolo", fatura.getMoeda().getSiglaSimbolo());
			lstRetorno.add(mapRetorno);
		}
		
		rsp.setList(lstRetorno);
		
		return rsp;
	}
	
	/**
	 * Retorna a lista de faturas a partir dos filtros informados
	 * 
	 * @author Mickaël Jalbert
	 * @since 29/03/2006
	 * 
	 * @param String tpDocumento
	 * @param YearMonthDay dtEmissao
	 * @param FindDefinition findDef
	 * @return ResultSetPage
	 * */	
	public Integer getRowCountFatura(RelacaoFaturaDepositoParam param) {
		return faturaService.getRowCountRelacaoDeposito(param);
	}	
	
	/**
	 * Retorna a lista de faturas a partir dos filtros informados
	 * 
	 * @author Mickaël Jalbert
	 * @since 29/03/2006
	 * 
	 * @param String tpDocumento
	 * @param YearMonthDay dtEmissao
	 * @param FindDefinition findDef
	 * @return ResultSetPage
	 * */	
	public Integer getRowCountDocumentoServico(RelacaoDocumentoServicoDepositoParam param) {
		return doctoServicoService.getRowCountRelacaoDeposito(param);
	}	
	
	public Integer getRowCountDocumento(TypedFlatMap map) {
		String tpDocumento = map.getString("tpDocumento");
		
		if (tpDocumento.equals("FAT")){
			return getRowCountFatura(mountParamFindFatura(map));
		} else {
			return getRowCountDocumentoServico(mountParamFindDocumentoServico(map));
		}
	}
	
	public Map findDominioDocumento(){
		TypedFlatMap mapRetorno = new TypedFlatMap();
		
		List lstDominio = domainValueService.findDomainValues("DM_TIPO_DOCUMENTO_DEPOSITO");
		
		for (Iterator iter = lstDominio.iterator(); iter.hasNext();){
			DomainValue domainValue = (DomainValue)iter.next();
			mapRetorno.put(domainValue.getValue(), domainValue.getDescription());
		}
		
		return mapRetorno;
	}
	
	public List findComboCedentes(TypedFlatMap criteria){
		return cedenteService.findComboValues(criteria);
	}

	public List findComboByActiveValues(TypedFlatMap criteria){
		return cedenteService.findComboByActiveValues(criteria);
	}	
	
	
    /**
     * Busca a lista de clientes para a lookup de Clientes Responsáveis
     * @param map Critérios de pesquisa
     * @return Lista de clientes
     */
    public List findLookupClienteResponsavel(Map map){
        return this.clienteService.findLookup(map);
    }
    
    /**
     * Busca a lista de clientes para a lookup de Clientes Responsáveis
     * @param map Critérios de pesquisa
     * @return Lista de clientes
     */
    public List findLookupClienteResponsavelAtivo(Map map){
        return this.clienteService.findLookupClientesAtivos(map);
    }    
    
    /**
     * Altera a situação do depósito para identificado
     *
     * @author Hector Julian Esnaola Junior
     * @since 16/02/2007
     *
     * 
     */
    public Map executeIdentificarDepositoCcorrente(TypedFlatMap criteria){
    	MasterEntry entry = getMasterFromSession(
    			criteria.getLong("idDepositoCcorrente"), true);		
		ItemList items = getItemsFromSession(entry, "itemDepositoCcorrente");
		ItemListConfig config = getMasterConfig().getItemListConfig("itemDepositoCcorrente");
		
    	depositoCcorrente.executeIdentificarDeposito( 
    			criteria.getLong("idDepositoCcorrente")
    			, criteria.getYearMonthDay("dtDeposito")
    			, items
    			, config);
    	
    	Map retorno = new HashMap();
    	retorno.put("tpSituacaoRelacao", "I");
    	
    	return retorno;
    	
    }
    
    public Map findFilialUsuarioLogado(TypedFlatMap map){
    	Map retorno = new HashMap();
    	retorno.put("sgFilial", SessionUtils.getFilialSessao().getSgFilial());
    	return retorno;
    }

	public void setCedenteService(CedenteService cedenteService) {
		this.cedenteService = cedenteService;
	}

	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}

	public void setDoctoServicoService(DoctoServicoService doctoServicoService) {
		this.doctoServicoService = doctoServicoService;
	}

	public void setFaturaService(FaturaService faturaService) {
		this.faturaService = faturaService;
	}

	public void setDevedorDocServFatService(
			DevedorDocServFatService devedorDocServFatService) {
		this.devedorDocServFatService = devedorDocServFatService;
	}

	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}

	public void setMoedaService(MoedaService moedaService) {
		this.moedaService = moedaService;
	}

	public void setDepositoCcorrente(DepositoCcorrenteService depositoCcorrente) {
		this.depositoCcorrente = depositoCcorrente;
	}	
}
