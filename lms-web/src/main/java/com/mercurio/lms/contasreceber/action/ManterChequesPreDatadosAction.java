package com.mercurio.lms.contasreceber.action;


import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.util.FilterList;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.service.MoedaPaisService;
import com.mercurio.lms.contasreceber.model.service.AlineaService;
import com.mercurio.lms.contasreceber.model.service.LoteChequeService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contasreceber.manterChequesPreDatadosAction"
 */

public class ManterChequesPreDatadosAction extends CrudAction {
	
	private FilialService filialService;
	
	private MoedaPaisService moedaPaisService;
	
	private AlineaService alineaService;
	
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public void setMoedaPaisService(MoedaPaisService moedaPaisService) {
		this.moedaPaisService = moedaPaisService;
	}

	public void setLoteChequeService(LoteChequeService loteChequeService) {
		super.setDefaultService(loteChequeService);
	}
	
	public LoteChequeService getLoteChequeService() {
		return (LoteChequeService) super.getDefaultService();
	}

    public List findLookupLoteCheque(TypedFlatMap criteria) {
    	return getLoteChequeService().findLookupLoteCheque(criteria);
    }

	/**
	 * Monta combo de moeda da tela
	 * @return List combo de moedas conforme pais do usuario logado
	 */
	public List findComboMoeda(){
		return getLoteChequeService().findComboMoeda();
	}
    
	public Long getMoedaUsuarioLogado(){
		return moedaPaisService.findMoedaPaisByUsuarioLogado();		
	}
	
	/**
	 * Busca a Alínea de acordo com os parâmetros
	 * @param tfm Critérios de pesquisa
	 * @return Lista de alíneas
	 */
	public List findLookupAlinea(TypedFlatMap tfm){
		return alineaService.findLookup(tfm);
	}
	
	/**
     * Consulta a filial pela sigla informada 
     * @param map Critérios de pesquisa
     * @return Lista de filiais
     */
    public List findLookupFilial(Map map) {
    	FilterList filter = new FilterList(filialService.findLookup(map)) {
			public Map filterItem(Object item) {
				Filial filial = (Filial)item;
    			TypedFlatMap typedFlatMap = new TypedFlatMap();
	    		typedFlatMap.put("idFilial", filial.getIdFilial());
		    	typedFlatMap.put("sgFilial",  filial.getSgFilial());
		    	typedFlatMap.put("pessoa.nmFantasia",  filial.getPessoa().getNmFantasia());
				return typedFlatMap;
			}
    	};
    	return (List)filter.doFilter();
    }
    
	public void setAlineaService(AlineaService alineaService) {
		this.alineaService = alineaService;
	}
}