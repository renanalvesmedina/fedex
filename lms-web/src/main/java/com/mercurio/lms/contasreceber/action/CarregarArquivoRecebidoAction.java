package com.mercurio.lms.contasreceber.action;

import java.util.List;
import java.util.Map;

import org.joda.time.YearMonthDay;

import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.contasreceber.model.param.DivisaoClienteParam;
import com.mercurio.lms.contasreceber.model.service.CarregarArquivoRecebidoService;
import com.mercurio.lms.contasreceber.util.DataVencimentoService;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.JTFormatUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.service.AgrupamentoClienteService;
import com.mercurio.lms.vendas.model.service.ClienteService;
import com.mercurio.lms.vendas.model.service.DivisaoClienteService;

/**
 * Generated by: ADSM ActionGenerator
 *
 * @author Rafael Andrade de Oliveira
 * @since 28/04/2006
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contasreceber.carregarArquivoRecebidoAction"
 */

public class CarregarArquivoRecebidoAction {

	private DataVencimentoService dataVencimentoService;
	
	private ClienteService clienteService;
	
	private DivisaoClienteService divisaoClienteService;
	
	private AgrupamentoClienteService agrupamentoClienteService;
	
	private CarregarArquivoRecebidoService carregarArquivoRecebidoService;
	
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}

	public CarregarArquivoRecebidoService getCarregarArquivoRecebidoService() {
		return carregarArquivoRecebidoService;
	}

	public void setCarregarArquivoRecebidoService(CarregarArquivoRecebidoService carregarArquivoRecebidoService) {
		this.carregarArquivoRecebidoService = carregarArquivoRecebidoService;
	}

	public DataVencimentoService getDataVencimentoService() {
		return dataVencimentoService;
	}

	public void setDataVencimentoService(DataVencimentoService dataVencimentoService) {
		this.dataVencimentoService = dataVencimentoService;
	}
	
	public List findComboCedentes(TypedFlatMap criteria){
		TypedFlatMap tfm = new TypedFlatMap();
		return getCarregarArquivoRecebidoService().findComboCedentes(tfm);
	}
	
	/**
	 * @author José Rodrigo Moraes
	 * @since  17/08/2006
	 * 
	 * Se o cliente possui um cedente, retorna este para a combo "Cedente", 
	 * caso contrário, traz o cedente da filial de cobrança do cliente, ou seja utilizar 
	 * FILIAL.ID_CEDENTE_BLOQUETO onde FILIAL.ID_FILIAL = CLIENTE.ID_FILIAL_COBRANCA.
	 * 
	 * @param tfm IdCliente
	 * @return Cedente
	 */
	public TypedFlatMap findCedenteByCliente(TypedFlatMap tfm){
		return getCarregarArquivoRecebidoService().findCedenteByCliente(tfm.getLong("cliente.idCliente"));
	}
	
	public List findComboDivisaoCliente(TypedFlatMap criteria){
		return divisaoClienteService.findByIdClienteMatriz(populateDivisaoClienteParam(criteria));
	}
	
	/**
	 * Popula a DivisaoClienteparam para ser usado como filtro na busca por divisao
	 *
	 * @author Hector Julian Esnaola Junior
	 * @since 24/01/2007
	 *
	 * @param tfm
	 * @return
	 *
	 */
	public DivisaoClienteParam populateDivisaoClienteParam(TypedFlatMap tfm){
		
		DivisaoClienteParam dcp = new DivisaoClienteParam();
		
		dcp.setIdCliente(tfm.getLong("cliente.idCliente"));
		dcp.setTpSituacao("A");
		
		return dcp;		
	}
	
	public List findLookupCliente(Map map){
		return clienteService.findLookup(map);
	}
	
	/**
	 * Execução da rotina de importação de arquivo de pré-fatura -> PROCEDA
	 * Método que chama a importação do arquivo
	 * @param tfm Parametros da tela
	 * @return String com o nome do arquivo do relatorio gerado no servidor
	 */
	public TypedFlatMap executeImportacao(TypedFlatMap tfm) {
		return getCarregarArquivoRecebidoService().executeImportacao(tfm);
	}
	
	/**
	 * Busca uma data de vencimento calculada
	 * @param tfm Parametros da tela
	 * @return data de acordo com o cálculo de vencimento
	 */
	public String findDataVencimento(TypedFlatMap tfm) {
		YearMonthDay vencimento = dataVencimentoService.generateDataVencimento(
					SessionUtils.getFilialSessao().getIdFilial(), 
					tfm.getLong("idDivisaoCliente"),
					tfm.getString("C"),
					tfm.getYearMonthDay("dtEmissao"),
					null, // tpModal
					null, // tpAbrangencia
					null  // idServico
				);
		
		return JTFormatUtils.format(vencimento);
	}

	/**
	 * Busca a data atual
	 * @return String com a data atual formatada
	 */
	public String findDataAtual() {
		return JTFormatUtils.format(JTDateTimeUtils.getDataAtual(), JTFormatUtils.YEARMONTHDAY);
	}

	public Boolean verifDivisaoClientePossuiAgrup(TypedFlatMap tfm) {
		Long idDivisao = (tfm.getLong("idDivisaoCliente"));

		if (idDivisao != null) {
			Integer ret = agrupamentoClienteService.findByDivisaoClienteId(idDivisao);
			if (ret != null)
				return ret > 0;
		}
		return false;
	}
	
	public void setDivisaoClienteService(DivisaoClienteService divisaoClienteService) {
		this.divisaoClienteService = divisaoClienteService;
	}

	public void setAgrupamentoClienteService(AgrupamentoClienteService agrupamentoClienteService) {
		this.agrupamentoClienteService = agrupamentoClienteService;
	}	
}