package com.mercurio.lms.contasreceber.action;

import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import br.com.tntbrasil.integracao.domains.jms.Queues;
import br.com.tntbrasil.integracao.domains.mail.Mail;

import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.report.ReportActionSupport;
import com.mercurio.adsm.framework.report.ReportExecutionManager;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.Moeda;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.configuracoes.model.service.MoedaService;
import com.mercurio.lms.contasreceber.report.EmitirDocumentosServicoPendentesClienteService;
import com.mercurio.lms.integracao.model.service.IntegracaoJmsService;
import com.mercurio.lms.integracao.model.service.IntegracaoJmsService.JmsMessageSender;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.Pais;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.MoedaUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.service.ClienteService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contasreceber.emitirDocumentosServicoPendentesClienteAction"
 */

public class EmitirDocumentosServicoPendentesClienteAction extends ReportActionSupport {
	private static final String TEXT_HTML= "text/html; charset='utf-8'";
	private IntegracaoJmsService integracaoJmsService;
	private FilialService filialService;
	private ClienteService clienteService;
	private MoedaService moedaService;
	private ConfiguracoesFacade configuracoesFacade;
	private DomainValueService domainValueService; 
	private ReportExecutionManager reportExecutionManager;
	
	public void setReportExecutionManager(
			ReportExecutionManager reportExecutionManager) {
		this.reportExecutionManager = reportExecutionManager;
	}
	
	public String executeAssynchronousReport(TypedFlatMap parameters) throws Exception {
		
		URL url = reportExecutionManager.executeAssynchronousReport("lms.contasreceber.emitirDocumentosServicoPendentesClienteService", parameters);
		String from = (String) configuracoesFacade.getValorParametro("REMETENTE_EMAIL_LMS");
		
		Mail mail = this.createMail(
			SessionUtils.getUsuarioLogado().getDsEmail(), 
			from, 
			"Relatório Documentos Servico Pendentes por Clientes", 
			url.toString()
		);

		JmsMessageSender msg = integracaoJmsService.createMessage(Queues.MAIL_SENDER_SERVICE_FEDEX, mail);
		integracaoJmsService.storeMessage(msg);
		
		return url.toString();
	}
	
	private Mail createMail(String strTo, String strFrom, String strSubject, String body) {
		Mail mail = new Mail();
		mail.setContentType(TEXT_HTML);
		mail.setFrom(strFrom);
		mail.setTo(strTo);
		mail.setSubject(strSubject);
		mail.setBody(body);
		return mail;
	}
	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}

	/**
     * Método que popula a combo de Situacao Cobranca somente com situações Pendentes, Em Fatura e Em Carteira
     * 
     * @param criteria
     * @return List
     */
    @SuppressWarnings({ "rawtypes", "unchecked" })
    public List findSituacaoCobranca(Map criteria) {
        List dominiosValidos = new ArrayList();
        dominiosValidos.add("P");//Pendente        
        dominiosValidos.add("F");//Em Fatura
        dominiosValidos.add("C");//Em Carteira
        List retorno = this.domainValueService.findByDomainNameAndValues("DM_STATUS_COBRANCA_DOCTO_SERVICO", dominiosValidos);
        return retorno;
    }
	
	/**
     * Método de pesquisa de Filiais pela sigla da filial
     * By Lookup
     * @param map Critérios de pesquisa
     * @return Lista contendo as Filiais retornadas pela pesquisa
     */
    @SuppressWarnings({ "rawtypes", "deprecation" })
    public List findLookupFilial(Map map){
        return filialService.findLookupBySgFilial(map);
    }
    
    /**
     * Busca os clientes para a lookup de cliente
     * @param map Critérios de pesquisa
     * @return Lista de Clientes
     */
    @SuppressWarnings("rawtypes")
    public List findLookupCliente(Map map){
    	return clienteService.findLookup(map);
    }
    
    /**
     * Busca as moedas para a combo de moeda
     * @param map Critérios de pesquisa
     * @return Lista de moedas
     */
    @SuppressWarnings("rawtypes")
    public List findMoedasByCombo(Map map){
    	
    	Pais pais = SessionUtils.getPaisSessao();    	
    	return MoedaUtils.moedaToMap(configuracoesFacade.getMoeda(pais.getIdPais(),Boolean.TRUE));
    	
    }
    
    /**
	 * Busca a filial do usuário e verifica se a filial do usuário é a Matriz
	 * @param tfm Critérios de pesquisa
	 * @return TypedFlatMap com dados de filial e a informação se a filial é ou não a Matriz
	 */
	public TypedFlatMap findFilialUsuario(TypedFlatMap tfm){
		
		Filial filialUsuario = SessionUtils.getFilialSessao();
		
		tfm = new TypedFlatMap();
		
		tfm.put("filial.idFilial",filialUsuario.getIdFilial());
		tfm.put("filial.sgFilial",filialUsuario.getSgFilial());
		tfm.put("siglaNomeFilial",filialUsuario.getSiglaNomeFilial());
		tfm.put("filial.pessoa.nmFantasia",filialUsuario.getPessoa().getNmFantasia());
		
		// Seta no Map se a filial do usuário logado é Matriz
		tfm.put("filialUserIsMatriz", SessionUtils.isFilialSessaoMatriz());
		
		return tfm;
	}
	
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public List findTipoFilial(Map criteria){
        List dominiosValidos = new ArrayList();
        dominiosValidos.add("LO");
        dominiosValidos.add("FR");
        dominiosValidos.add("SU");
        dominiosValidos.add("LG");
        dominiosValidos.add("FI");
        List retorno = domainValueService.findByDomainNameAndValues("DM_TIPO_FILIAL", dominiosValidos);
        return retorno;
	}	
	
	public boolean keepAlive(){
		return true;
	}
	
	
	/**
	 * Busca a moeda padrão do país do usuário
	 * @param tfm Critérios de pesquisa
	 * @return Moeda
	 */
	public Moeda findMoedaPadrao(TypedFlatMap tfm){
		
		Usuario usuario = SessionUtils.getUsuarioLogado();		
		return moedaService.findMoedaByUsuarioEmpresa(usuario,usuario.getEmpresaPadrao());
		
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}

	public void setMoedaService(MoedaService moedaService) {
		this.moedaService = moedaService;
	}
	
	public void setEmitirDocumentosServicoPendentesClienteService(EmitirDocumentosServicoPendentesClienteService service) {
		this.reportServiceSupport = service;
	}

	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}
	
	public void setIntegracaoJmsService(IntegracaoJmsService integracaoJmsService) {
		this.integracaoJmsService = integracaoJmsService;
	}
}
