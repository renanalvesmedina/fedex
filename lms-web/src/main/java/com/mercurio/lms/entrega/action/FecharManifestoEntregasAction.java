package com.mercurio.lms.entrega.action;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.transaction.UnexpectedRollbackException;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.FindDefinition;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.session.SessionContext;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.ControleCarga;
import com.mercurio.lms.carregamento.model.Manifesto;
import com.mercurio.lms.carregamento.model.service.ControleCargaService;
import com.mercurio.lms.carregamento.model.service.ManifestoService;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteService;
import com.mercurio.lms.entrega.model.ReciboReembolso;
import com.mercurio.lms.entrega.model.RegistroDocumentoEntrega;
import com.mercurio.lms.entrega.model.service.FecharManifestoEntregasService;
import com.mercurio.lms.entrega.model.service.ManifestoEntregaDocumentoService;
import com.mercurio.lms.entrega.model.service.ManifestoEntregaService;
import com.mercurio.lms.entrega.model.service.OcorrenciaEntregaService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.RotaColetaEntregaService;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.entrega.fecharManifestoEntregasAction"
 */

public class FecharManifestoEntregasAction extends CrudAction {

	private Logger log = LogManager.getLogger(this.getClass());

	private MeioTransporteService meioTransporteService;
	
	private RotaColetaEntregaService rotaColetaEntregaService;
	
	private ManifestoEntregaService manifestoEntregaService;
	
	private ControleCargaService controleCargaService;
	
	private FilialService filialService;
		
	private ManifestoService manifestoService;
	
	private OcorrenciaEntregaService ocorrenciaEntregaService;

	private FecharManifestoEntregasService fecharManifestoEntregasService;
	
	private ManifestoEntregaDocumentoService manifestoEntregaDocumentoService;
	
	public void setFecharManifestoEntregasService(FecharManifestoEntregasService service) {
		this.fecharManifestoEntregasService = service;
	}
	
	private FecharManifestoEntregasService getFecharManifestoEntregasService() {
		return this.fecharManifestoEntregasService;
	}
	
	public ResultSetPage findPaginated(TypedFlatMap criterias) {
		return getFecharManifestoEntregasService().findPaginated(criterias,FindDefinition.createFindDefinition(criterias));
	}
	
	public Integer getRowCount(TypedFlatMap criterias) {
		return getFecharManifestoEntregasService().getRowCount(criterias);
	}
	
	public List findLookupMeioTransporte(Map criteria) {
		return meioTransporteService.findLookup(criteria);
	}
	public List findLookupRotaColetaEntrega(Map criteria) {
		return rotaColetaEntregaService.findLookup(criteria);
	}
	public List findLookupManifestoEntrega(Map criteria) {
		return manifestoEntregaService.findLookup(criteria);
	}
	public List findLookupControleCarga(Map criteria) {
		return controleCargaService.findLookup(criteria);
	}
	public List findLookupFilial(Map criteria) {
		return filialService.findLookup(criteria);
	}
	
	public TypedFlatMap findDataPageLoad() {
		Filial filial = SessionUtils.getFilialSessao();  	
    	
		TypedFlatMap result = new TypedFlatMap();
		result.put("filial.idFilial",filial.getIdFilial());
		result.put("filial.sgFilial",filial.getSgFilial());
		result.put("filial.pessoa.nmFantasia",filial.getPessoa().getNmFantasia());
		
		return result;
	}
	
	public TypedFlatMap findControleCargaByManifesto(Long idManifesto) {
		Manifesto manifesto = manifestoService.findById(idManifesto);
		TypedFlatMap result = new TypedFlatMap();
		if (manifesto.getControleCarga() != null) {
			ControleCarga controleCarga = manifesto.getControleCarga();
			result.put("controleCarga.nrControleCarga",controleCarga.getNrControleCarga());
			result.put("controleCarga.idControleCarga",controleCarga.getIdControleCarga());
		}
		return result;
	}
	
	public TypedFlatMap store(TypedFlatMap parameters) {
		
		try {
			TypedFlatMap map;
			map = getFecharManifestoEntregasService().store(parameters);
			
			if(SessionContext.containsKey("LMS-09143")){
				
				if(map == null){
					map = new TypedFlatMap();
				}
				
				map.put("LMS09143", SessionContext.get("LMS-09143"));
				SessionContext.remove("LMS-09143");
				
			}
			
			return map;
			 
		} catch (BusinessException business) {
			if (business.getMessageKey().equals("LMS-ENGANAR")) {
				Object[] objects = business.getMessageArguments();
				parameters.put(objects[0],Boolean.TRUE);  
				return parameters;
			}else
				throw business;
		} catch (UnexpectedRollbackException e) {
			//LMS-4332 nesses casos deve silenciar a exceção e não exibir a mensagem na tela.
			log.error(e);
			return null;
		}
	}
	
	public TypedFlatMap findData(Long idDoctoServico) {
		RegistroDocumentoEntrega rde = getFecharManifestoEntregasService().findUniqueRegistroDocumentoEntregaByIdDoctoServico(idDoctoServico);
		ReciboReembolso rr = getFecharManifestoEntregasService().findByIdReciboReembolsado(idDoctoServico);
		TypedFlatMap result = new TypedFlatMap();
		if (rr != null) {
			result.put("obCheques",rr.getObRecolhimento());
		}
		if (rde != null) {
			result.put("nrRecolhido",rde.getNrComprovante());
			result.put("obRecolhido",rde.getObComprovante());
		}
		return result;
	}
	
	public TypedFlatMap findDataUltimaOcorrenciaManifesto(Long idDoctoServico) {
		Date date = getManifestoEntregaDocumentoService().findDataUltimaOcorrenciaManifesto(idDoctoServico);
		String dhOcorrencia = "";
		TypedFlatMap result = new TypedFlatMap();
		if (date != null) {
			dhOcorrencia = new SimpleDateFormat("dd/MM/yyyy HH:mm").format(date);
		}
		result.put("dhOcorrencia", dhOcorrencia);
		return result;
	}
	
	/**
	 * Apaga várias entidades através do Id.
	 *
	 * @param ids lista com as entidades que deverão ser removida.
	 *
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void executeFechamentosManifestos(List ids) {
		for (Iterator i = ids.iterator(); i.hasNext();)
			executeFecharManifesto((Long)i.next());
	}
	
	public void executeFecharManifesto(Long idManifesto) {
		getFecharManifestoEntregasService().executeFechamentoManifesto(idManifesto);
	}
	
	public List findLookupOcorrenciaEntrega(Map criterias) {
		return ocorrenciaEntregaService.findLookup(criterias);
	}

	public void setControleCargaService(ControleCargaService controleCargaService) {
		this.controleCargaService = controleCargaService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public void setManifestoEntregaService(
			ManifestoEntregaService manifestoEntregaService) {
		this.manifestoEntregaService = manifestoEntregaService;
	}

	public void setMeioTransporteService(MeioTransporteService meioTransporteService) {
		this.meioTransporteService = meioTransporteService;
	}

	public void setRotaColetaEntregaService(
			RotaColetaEntregaService rotaColetaEntregaService) {
		this.rotaColetaEntregaService = rotaColetaEntregaService;
	}

	public void setManifestoService(ManifestoService manifestoService) {
		this.manifestoService = manifestoService;
	}
	
	public ResultSetPage findPaginatedPendencias(TypedFlatMap criterias) {
		return getFecharManifestoEntregasService().findPaginatedPendencias(criterias.getLong("idManifesto"),FindDefinition.createFindDefinition(criterias));
	}
	public Integer getRowCountPendencias(TypedFlatMap criterias) {
		return getFecharManifestoEntregasService().getRowCountPendencias(criterias.getLong("idManifesto"));
	}

	public void setOcorrenciaEntregaService(
			OcorrenciaEntregaService ocorrenciaEntregaService) {
		this.ocorrenciaEntregaService = ocorrenciaEntregaService;
	}

	public ManifestoEntregaDocumentoService getManifestoEntregaDocumentoService() {
		return manifestoEntregaDocumentoService;
	}

	public void setManifestoEntregaDocumentoService(ManifestoEntregaDocumentoService manifestoEntregaDocumentoService) {
		this.manifestoEntregaDocumentoService = manifestoEntregaDocumentoService;
	}
	
}
