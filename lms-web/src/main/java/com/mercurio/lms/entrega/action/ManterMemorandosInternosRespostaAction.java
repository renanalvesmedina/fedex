package com.mercurio.lms.entrega.action;

import java.io.Serializable;
import java.math.BigDecimal;
import java.text.Collator;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.lang.StringUtils;
import org.joda.time.DateTime;
import org.springframework.context.i18n.LocaleContextHolder;

import com.mercurio.adsm.core.util.ReflectionUtils;
import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.masterdetail.ItemList;
import com.mercurio.adsm.framework.model.masterdetail.ItemListConfig;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailAction;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailFactory;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailKey;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntry;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntryConfig;
import com.mercurio.adsm.framework.util.FilterList;
import com.mercurio.adsm.framework.util.FilterResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Moeda;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.configuracoes.model.service.UsuarioService;
import com.mercurio.lms.entrega.model.DocumentoMir;
import com.mercurio.lms.entrega.model.Mir;
import com.mercurio.lms.entrega.model.ReciboReembolso;
import com.mercurio.lms.entrega.model.RegistroDocumentoEntrega;
import com.mercurio.lms.entrega.model.TipoDocumentoEntrega;
import com.mercurio.lms.entrega.model.service.MirService;
import com.mercurio.lms.expedicao.DoctoServicoLookupFacade;
import com.mercurio.lms.expedicao.DoctoServicoLookupFacade.TipoDocumentoServico;
import com.mercurio.lms.expedicao.model.DoctoServico;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.HistoricoFilial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.service.ClienteService;


/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.entrega.manterMemorandosInternosRespostaAction"
 */

public class ManterMemorandosInternosRespostaAction extends MasterDetailAction {

	public void setMirService(MirService mirService) {
		super.setMasterService(mirService);
	}
	public MirService getMirService() {
		return (MirService)super.getMasterService();
	}
	
	
	private FilialService filialService;
    private UsuarioService usuarioService;
    private ClienteService clienteService;
    private DoctoServicoLookupFacade doctoServicoLookupFacade;
    
    public Object findByIdComp(MasterDetailKey key) {
		return findItemById(key, "comp");
	}
    
    public TypedFlatMap findByIdReemb(MasterDetailKey key) {
		DocumentoMir documentoMir = (DocumentoMir)findItemById(key, "reemb");
		ReciboReembolso reciboReembolso = documentoMir.getReciboReembolso();
		DoctoServico doctoServicoReembolsado = reciboReembolso.getDoctoServicoByIdDoctoServReembolsado();
		Filial filial = reciboReembolso.getFilial();
		Filial filialOrigemReembolsado = doctoServicoReembolsado.getFilialByIdFilialOrigem();
		Pessoa pessoaRemetente = reciboReembolso.getClienteByIdClienteRemetente().getPessoa();
				
		TypedFlatMap retorno = new TypedFlatMap();
		retorno.put("idDocumentoMir",documentoMir.getIdDocumentoMir());
		retorno.put("versao",documentoMir.getVersao());
		retorno.put("reciboReembolso.doctoServicoByIdDoctoServReembolsado.tpDocumentoServico.value",
				doctoServicoReembolsado.getTpDocumentoServico().getValue());
		retorno.put("reciboReembolso.filial.idFilial",filial.getIdFilial());
		retorno.put("reciboReembolso.filial.sgFilial",filial.getSgFilial());
		retorno.put("reciboReembolso.filial.pessoa.nmFantasia",filial.getPessoa().getNmFantasia());
		
		retorno.put("reciboReembolso.idDoctoServico",reciboReembolso.getIdDoctoServico());
		retorno.put("reciboReembolso.nrReciboReembolso",reciboReembolso.getNrReciboReembolso());
		retorno.put("reciboReembolso.doctoServicoByIdDoctoServReembolsado.tpDocumentoServico.description",
				doctoServicoReembolsado.getTpDocumentoServico().getDescription().getValue());
		retorno.put("reciboReembolso.doctoServicoByIdDoctoServReembolsado.filialByIdFilialOrigem.sgFilial",
				filialOrigemReembolsado.getSgFilial());
		retorno.put("reciboReembolso.doctoServicoByIdDoctoServReembolsado.nrDoctoServico",
				doctoServicoReembolsado.getNrDoctoServico());
		
		DomainValue tpValorAtribuidoRecibo = reciboReembolso.getTpValorAtribuidoRecibo();
		BigDecimal vlReembolsoCalculado = getMirService().getVlReembolsoCalculado(
						tpValorAtribuidoRecibo,
						reciboReembolso.getVlReembolso(),
						reciboReembolso.getVlAplicado());
		
		String dsSimbolo = reciboReembolso.getMoeda().getDsSimbolo();
		retorno.put("reciboReembolso.dsSimbolo",dsSimbolo);
		retorno.put("reciboReembolso.vlReembolsoCalculado",vlReembolsoCalculado);
		retorno.put("reciboReembolso.vlReembolsoCalculadoView",dsSimbolo + " " +
				FormatUtils.formatDecimal("#,##0.00",vlReembolsoCalculado));
		retorno.put("reciboReembolso.vlReembolso",reciboReembolso.getVlReembolso());
		retorno.put("reciboReembolso.vlAplicado",reciboReembolso.getVlAplicado());
		if (tpValorAtribuidoRecibo != null)
    		retorno.put("reciboReembolso.tpValorAtribuidoRecibo",tpValorAtribuidoRecibo.getValue());
		
		DomainValue tpIdentificacaoRemetente = pessoaRemetente.getTpIdentificacao();
		retorno.put("reciboReembolso.clienteByIdClienteRemetente.pessoa.nrIdentificacaoFormatado",
				FormatUtils.formatIdentificacao(tpIdentificacaoRemetente,pessoaRemetente.getNrIdentificacao()));
		retorno.put("reciboReembolso.clienteByIdClienteRemetente.pessoa.nmPessoa",
				pessoaRemetente.getNmPessoa());
		if (tpIdentificacaoRemetente != null) {
			retorno.put("reciboReembolso.clienteByIdClienteRemetente.pessoa.tpIdentificacao",
					tpIdentificacaoRemetente.getValue());
		}
		retorno.put("reciboReembolso.clienteByIdClienteRemetente.pessoa.nrIdentificacao",
				pessoaRemetente.getNrIdentificacao());
		
		Cliente clienteByIdClienteDestinatario = reciboReembolso.getClienteByIdClienteDestinatario();
		if (clienteByIdClienteDestinatario != null) {
			Pessoa pessoaDestinatario = clienteByIdClienteDestinatario.getPessoa();
			DomainValue tpIdentificacaoDestinatario = pessoaDestinatario.getTpIdentificacao();
			retorno.put("reciboReembolso.clienteByIdClienteDestinatario.pessoa.nrIdentificacaoFormatado",
					FormatUtils.formatIdentificacao(tpIdentificacaoDestinatario,pessoaDestinatario.getNrIdentificacao()));
			retorno.put("reciboReembolso.clienteByIdClienteDestinatario.pessoa.nmPessoa",
					pessoaDestinatario.getNmPessoa());
			if (tpIdentificacaoDestinatario != null) {
				retorno.put("reciboReembolso.clienteByIdClienteDestinatario.pessoa.tpIdentificacao",
						tpIdentificacaoDestinatario.getValue());
			}
			retorno.put("reciboReembolso.clienteByIdClienteDestinatario.pessoa.nrIdentificacao",
					pessoaDestinatario.getNrIdentificacao());	
		}
				
		return retorno;
	}
    
    public ResultSetPage findPaginatedComp(Map parameters) {
    	ResultSetPage rsp = findPaginatedItemList(parameters, "comp");
    	    	
    	FilterResultSetPage frsp = new FilterResultSetPage(rsp) {

			public Map filterItem(Object item) {
				DocumentoMir documentoMir = (DocumentoMir)item;
				RegistroDocumentoEntrega registroDocumentoEntrega = documentoMir.getRegistroDocumentoEntrega();
				TypedFlatMap row = new TypedFlatMap();
				
				row.put("idDocumentoMir",documentoMir.getIdDocumentoMir());
				
				DoctoServico doctoServico = registroDocumentoEntrega.getDoctoServico();
				row.put("registroDocumentoEntrega.doctoServico.tpDocumentoServico",
						doctoServico.getTpDocumentoServico().getDescription().getValue());
				row.put("registroDocumentoEntrega.doctoServico.filialByIdFilialOrigem.sgFilial",
						doctoServico.getFilialByIdFilialOrigem().getSgFilial());
				row.put("registroDocumentoEntrega.doctoServico.nrDoctoServico",doctoServico.getNrDoctoServico());
				
				Pessoa pessoaRemetente = doctoServico.getClienteByIdClienteRemetente().getPessoa();
				DomainValue tpIdentificacaoRemetente = pessoaRemetente.getTpIdentificacao();
				if (tpIdentificacaoRemetente != null) {
					row.put("registroDocumentoEntrega.doctoServico.clienteByIdClienteRemetente.pessoa.tpIdentificacao",
							tpIdentificacaoRemetente.getDescription().getValue());
				}
				row.put("registroDocumentoEntrega.doctoServico.clienteByIdClienteRemetente.pessoa.nrIdentificacaoFormatado",
						FormatUtils.formatIdentificacao(tpIdentificacaoRemetente,pessoaRemetente.getNrIdentificacao()));
				row.put("registroDocumentoEntrega.doctoServico.clienteByIdClienteRemetente.pessoa.nmPessoa",
						pessoaRemetente.getNmPessoa());
				
				Cliente clienteByIdClienteDestinatario = doctoServico.getClienteByIdClienteDestinatario();
				if (clienteByIdClienteDestinatario != null) {
					Pessoa pessoaDestinatario = clienteByIdClienteDestinatario.getPessoa();
					DomainValue tpIdentificacaoDestinatario = pessoaDestinatario.getTpIdentificacao();
					if (tpIdentificacaoDestinatario != null) {
						row.put("registroDocumentoEntrega.doctoServico.clienteByIdClienteDestinatario.pessoa.tpIdentificacao",
								tpIdentificacaoDestinatario.getDescription().getValue());
					}
					
					row.put("registroDocumentoEntrega.doctoServico.clienteByIdClienteDestinatario.pessoa.nrIdentificacaoFormatado",
							FormatUtils.formatIdentificacao(tpIdentificacaoDestinatario,pessoaDestinatario.getNrIdentificacao()));
					row.put("registroDocumentoEntrega.doctoServico.clienteByIdClienteDestinatario.pessoa.nmPessoa",
							pessoaDestinatario.getNmPessoa());
				}				
				
				row.put("registroDocumentoEntrega.tipoDocumentoEntrega.dsTipoDocumentoEntrega",
						registroDocumentoEntrega.getTipoDocumentoEntrega().getDsTipoDocumentoEntrega().getValue());
				
				return row;
			}
    		
    	};

    	return (ResultSetPage)frsp.doFilter();
    }
    
    public ResultSetPage findPaginatedReemb(Map parameters) {
    	ResultSetPage rsp = findPaginatedItemList(parameters, "reemb");
    	
    	FilterResultSetPage frsp = new FilterResultSetPage(rsp) {

			public Map filterItem(Object item) {
				DocumentoMir documentoMir = (DocumentoMir)item;
				ReciboReembolso reciboReembolso = documentoMir.getReciboReembolso();
				TypedFlatMap row = new TypedFlatMap();
				
				row.put("idDocumentoMir",documentoMir.getIdDocumentoMir());

				row.put("reciboReembolso.tpDocumentoServico",
						reciboReembolso.getTpDocumentoServico().getDescription().getValue());
				row.put("reciboReembolso.filial.sgFilial",
						reciboReembolso.getFilial().getSgFilial());
				row.put("reciboReembolso.nrDoctoServico",reciboReembolso.getNrReciboReembolso());
				
				DoctoServico doctoReembolsado = reciboReembolso.getDoctoServicoByIdDoctoServReembolsado(); 
				row.put("reciboReembolso.doctoServicoByIdDoctoServReembolsado.tpDocumentoServico",
						doctoReembolsado.getTpDocumentoServico().getDescription().getValue());
				row.put("reciboReembolso.doctoServicoByIdDoctoServReembolsado.filialByIdFilialOrigem.sgFilial",
						doctoReembolsado.getFilialByIdFilialOrigem().getSgFilial());
				row.put("reciboReembolso.doctoServicoByIdDoctoServReembolsado.nrDoctoServico",doctoReembolsado.getNrDoctoServico());
				
				Pessoa pessoaRemetente = reciboReembolso.getClienteByIdClienteRemetente().getPessoa();
				DomainValue tpIdentificacaoRemetente = pessoaRemetente.getTpIdentificacao();
				if (pessoaRemetente != null) {
					row.put("reciboReembolso.clienteByIdClienteRemetente.pessoa.tpIdentificacao",
							tpIdentificacaoRemetente.getDescription().getValue());
				}
				row.put("reciboReembolso.clienteByIdClienteRemetente.pessoa.nrIdentificacaoFormatado",
						FormatUtils.formatIdentificacao(tpIdentificacaoRemetente,pessoaRemetente.getNrIdentificacao()));
				row.put("reciboReembolso.clienteByIdClienteRemetente.pessoa.nmPessoa",
						pessoaRemetente.getNmPessoa());
				
				Cliente clienteByIdClienteDestinatario = reciboReembolso.getClienteByIdClienteDestinatario();
				if (clienteByIdClienteDestinatario != null) {
					Pessoa pessoaDestinatario = clienteByIdClienteDestinatario.getPessoa();
					DomainValue tpIdentificacaoDestinatario = pessoaDestinatario.getTpIdentificacao();
					if (tpIdentificacaoDestinatario != null) {
						row.put("reciboReembolso.clienteByIdClienteDestinatario.pessoa.tpIdentificacao",
								tpIdentificacaoDestinatario.getDescription().getValue());
					}
					row.put("reciboReembolso.clienteByIdClienteDestinatario.pessoa.nrIdentificacaoFormatado",
							FormatUtils.formatIdentificacao(tpIdentificacaoDestinatario,pessoaDestinatario.getNrIdentificacao()));
					row.put("reciboReembolso.clienteByIdClienteDestinatario.pessoa.nmPessoa",
							pessoaDestinatario.getNmPessoa());
				}			
				
				return row;
			}
    		
    	};

    	return (ResultSetPage)frsp.doFilter();
    }
        
    public Integer getRowCountComp(Map parameters) {
    	return getRowCountItemList(parameters, "comp");
    }
    
    public Integer getRowCountReemb(Map parameters) {
    	return getRowCountItemList(parameters, "reemb");
    }
    
    public Serializable saveComp(TypedFlatMap parameters) {
    	Long idMir = parameters.getLong("masterId");
    	Long idDocumentoMir = parameters.getLong("idDocumentoMir");
    	Long idRegistroDocumentoEntrega = parameters.getLong("registroDocumentoEntrega.idRegistroDocumentoEntrega");
    	
    	MasterEntry entry = getMasterFromSession(idMir, false);
		ItemList items = getItemsFromSession(entry,"comp");
		ItemListConfig itemsConfig = getMasterConfig().getItemListConfig("comp");
		
		for (Iterator i = items.iterator(idMir, itemsConfig) ; i.hasNext() ; ) {
			DocumentoMir documentoMir = (DocumentoMir)i.next();
			RegistroDocumentoEntrega registroDocumentoEntrega = documentoMir.getRegistroDocumentoEntrega();
			if (!documentoMir.getIdDocumentoMir().equals(idDocumentoMir) &&
					registroDocumentoEntrega.getIdRegistroDocumentoEntrega().equals(idRegistroDocumentoEntrega)) {
				throw new BusinessException("LMS-09013");
			}
		}
    	
    	return saveItemInstance(parameters, "comp");
    }
    
    public Serializable saveReemb(TypedFlatMap parameters) {
    	Long idMir = parameters.getLong("masterId");
    	Long idDocumentoMir = parameters.getLong("idDocumentoMir");
    	Long idDoctoServico = parameters.getLong("reciboReembolso.idDoctoServico");
    	
    	validateUniqueConstraintReembolsos(idDoctoServico,idMir,idDocumentoMir);
    	
    	return saveItemInstance(parameters, "reemb");
    }
    
    public void removeById(Long id) {
    	getMirService().removeByIdComplete((Long)id);
		newMaster();
	}
	
	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		getMirService().removeByIdsComplete(ids);
	}
    
    /** 
	 *
     */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIdsComp(List ids) {
    	super.removeItemByIds(ids, "comp");
    }
    
    /** 
	 *
     */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIdsReemb(List ids) {
    	super.removeItemByIds(ids, "reemb");
    }
    
	protected MasterEntryConfig createMasterConfig(MasterDetailFactory masterFactory) {
		MasterEntryConfig config = masterFactory.createMasterEntryConfig(Mir.class);
		
		// Comparador para realizar a ordenação dos items filhos de acordo com a regra de negócio.
		Comparator descComparator = new Comparator() {
			public int compare(Object o1, Object o2) {
	    		Collator collator = Collator.getInstance(LocaleContextHolder.getLocale());
	    		
				if ((o1 instanceof Comparable) && (o2 instanceof Comparable)) {
					return ((Comparable)o1).compareTo(o2);
				} else {
					String strComp1 = null;
					String strComp2 = null;
					
					strComp1 = "";
			
					strComp2 = "";
					
					if (strComp1 == null || strComp2 == null)
						return 0;
					return collator.compare(strComp1,strComp2);
				}
			}
    	};
		
		
    	ItemListConfig itemInitComp = new ItemListConfig() {
    		
			public void setMasterOnItem(Object master, Object itemBean) {
				Mir mir = (Mir)master; // Pai
    			DocumentoMir documentoMir = (DocumentoMir)itemBean; // filho
    			documentoMir.setMir(mir);
    		}

    		public List initialize(Long masterId, Map parameters) {
    			if (masterId != null) {
    				return getMirService().findDocsByMir(masterId,"C");
    			} else
    				return new ArrayList(0);
    		}
    		
    		public Integer getRowCount(Long masterId, Map parameters) {
    			if (masterId != null) {
    				return getMirService().getRowCountDocsByMir(masterId,"C");
    			} else
    				return Integer.valueOf(0);
    		}
    		
			public void modifyItemValues(Object newValues, Object bean) {
				Set ignore = new HashSet();
				ignore.add("versao");
				ReflectionUtils.syncObjectProperties(bean, newValues);
			}
			
			public Map configItemDomainProperties() {
				return null;
			}
	
			public Object populateNewItemInstance(Map params, Object bean) {
				TypedFlatMap p = (TypedFlatMap)params;
				
				DocumentoMir documentoMir = new DocumentoMir();
				RegistroDocumentoEntrega registroDocumentoEntrega = new RegistroDocumentoEntrega();
				documentoMir.setRegistroDocumentoEntrega(registroDocumentoEntrega);
				
				DoctoServico doctoServico = new DoctoServico();
				registroDocumentoEntrega.setDoctoServico(doctoServico);
				Filial filialDoctoServico = new Filial();
				Pessoa pessoaFilial = new Pessoa();
				filialDoctoServico.setPessoa(pessoaFilial);
				doctoServico.setFilialByIdFilialOrigem(filialDoctoServico);
				
				Cliente clienteRemetente = new Cliente();
				doctoServico.setClienteByIdClienteRemetente(clienteRemetente);
				Pessoa pessoaRemetente = new Pessoa();
				clienteRemetente.setPessoa(pessoaRemetente);
				
				TipoDocumentoEntrega tipoDocumentoEntrega = new TipoDocumentoEntrega();
				registroDocumentoEntrega.setTipoDocumentoEntrega(tipoDocumentoEntrega);
				
				
				documentoMir.setIdDocumentoMir(p.getLong("idDocumentoMir"));
				registroDocumentoEntrega.setIdRegistroDocumentoEntrega(p.getLong("registroDocumentoEntrega.idRegistroDocumentoEntrega"));
				
				doctoServico.setIdDoctoServico(p.getLong("idDoctoServico"));
				
				DomainValue dvTpDocumentoServico = p.getDomainValue("registroDocumentoEntrega.doctoServico.tpDocumentoServico");
				dvTpDocumentoServico.setDescription(p.getVarcharI18n("tpDoctoServicoHidden"));
				doctoServico.setTpDocumentoServico(dvTpDocumentoServico);
				
				filialDoctoServico.setIdFilial(p.getLong("registroDocumentoEntrega.doctoServico.filialByIdFilialOrigem.idFilial"));
				filialDoctoServico.setSgFilial(p.getString("registroDocumentoEntrega.doctoServico.filialByIdFilialOrigem.sgFilial"));
				pessoaFilial.setNmFantasia(p.getString("registroDocumentoEntrega.doctoServico.filialByIdFilialOrigem.pessoa.nmFantasia"));
				doctoServico.setNrDoctoServico(p.getLong("nrDoctoServicoHidden"));
								
				clienteRemetente.setIdCliente(
						p.getLong("registroDocumentoEntrega.doctoServico.clienteByIdClienteRemetente.idCliente"));
				
				String tpIdentificacaoRemente = p.getString("registroDocumentoEntrega.doctoServico.clienteByIdClienteRemetente.pessoa.tpIdentificacao.value");
				if (StringUtils.isNotBlank(tpIdentificacaoRemente)) {
					DomainValue dvTpIdentificacaoRemetente = getDomainValueService().findDomainValueByValue("DM_TIPO_IDENTIFICACAO",
							tpIdentificacaoRemente);
					pessoaRemetente.setTpIdentificacao(dvTpIdentificacaoRemetente);	
				}
				
				pessoaRemetente.setNrIdentificacao(
						p.getString("registroDocumentoEntrega.doctoServico.clienteByIdClienteRemetente.pessoa.nrIdentificacao"));
				pessoaRemetente.setNmPessoa(
						p.getString("registroDocumentoEntrega.doctoServico.clienteByIdClienteRemetente.pessoa.nmPessoa"));
				
				String nrIdentificacaoClienteDestinatario = 
						p.getString("registroDocumentoEntrega.doctoServico.clienteByIdClienteDestinatario.pessoa.nrIdentificacao");
				if (StringUtils.isNotBlank(nrIdentificacaoClienteDestinatario)) {
					Cliente clienteDestinatario = new Cliente();
					doctoServico.setClienteByIdClienteDestinatario(clienteDestinatario);
					Pessoa pessoaDestinatario = new Pessoa();
					clienteDestinatario.setPessoa(pessoaDestinatario);
										
					String tpIdentificacaoDestinatario = 
							p.getString("registroDocumentoEntrega.doctoServico.clienteByIdClienteDestinatario.pessoa.tpIdentificacao.value");
					if (StringUtils.isNotBlank(tpIdentificacaoDestinatario)) {
						DomainValue dvTpIdentificacaoDestinatario = getDomainValueService().findDomainValueByValue("DM_TIPO_IDENTIFICACAO",
								tpIdentificacaoDestinatario);
						pessoaDestinatario.setTpIdentificacao(dvTpIdentificacaoDestinatario);
					}
					
					pessoaDestinatario.setNrIdentificacao(nrIdentificacaoClienteDestinatario);
					pessoaDestinatario.setNmPessoa(
							p.getString("registroDocumentoEntrega.doctoServico.clienteByIdClienteDestinatario.pessoa.nmPessoa"));
				}
				
				tipoDocumentoEntrega.setIdTipoDocumentoEntrega(
						p.getLong("registroDocumentoEntrega.tipoDocumentoEntrega.idTipoDocumentoEntrega"));
				tipoDocumentoEntrega.setDsTipoDocumentoEntrega(
						p.getVarcharI18n("registroDocumentoEntrega.tipoDocumentoEntrega.dsTipoDocumentoEntrega"));
				
				documentoMir.setVersao(p.getInteger("versao"));
				
				return documentoMir;
			}
    	};
		
    	ItemListConfig itemInitReemb = new ItemListConfig() {

    		public void setMasterOnItem(Object master, Object itemBean) {
    			Mir mir = (Mir)master; // Pai
    			DocumentoMir documentoMir = (DocumentoMir)itemBean; // filho
    			documentoMir.setMir(mir);
    		}
    		
    		public List initialize(Long masterId, Map parameters) {
    			if (masterId != null) {
    				return getMirService().findDocsByMir(masterId,"R");
    			} else
    				return new ArrayList(0);
    		}
    		
    		public Integer getRowCount(Long masterId, Map parameters) {
    			if (masterId != null) {
    				return getMirService().getRowCountDocsByMir(masterId,"R");
    			} else
    				return Integer.valueOf(0);
    		}
    		
			public void modifyItemValues(Object newValues, Object bean) {
				Set ignore = new HashSet();
				ignore.add("versao");
				ReflectionUtils.syncObjectProperties(bean, newValues);
			}
			
			public Map configItemDomainProperties() {
				return null;
			}
	
			public Object populateNewItemInstance(Map params, Object bean) {
				TypedFlatMap p = (TypedFlatMap)params;
				
				DocumentoMir documentoMir = new DocumentoMir();
				ReciboReembolso reciboReembolso = new ReciboReembolso();
				documentoMir.setReciboReembolso(reciboReembolso);
				
				Filial filialRecibo = new Filial();
				Pessoa pessoaFilialRecibo = new Pessoa();
				filialRecibo.setPessoa(pessoaFilialRecibo);
				reciboReembolso.setFilial(filialRecibo);
				DoctoServico doctoServicoReembolsado = new DoctoServico();
				reciboReembolso.setDoctoServicoByIdDoctoServReembolsado(doctoServicoReembolsado);
				Filial filialDoctoServicoReembolsado = new Filial();
				doctoServicoReembolsado.setFilialByIdFilialOrigem(filialDoctoServicoReembolsado);
				
				Cliente clienteRemetente = new Cliente();
				reciboReembolso.setClienteByIdClienteRemetente(clienteRemetente);
				Pessoa pessoaRemetente = new Pessoa();
				clienteRemetente.setPessoa(pessoaRemetente);
				
				Moeda moeda = new Moeda();
				reciboReembolso.setMoeda(moeda);
				
				documentoMir.setIdDocumentoMir(p.getLong("idDocumentoMir"));
				
				reciboReembolso.setIdDoctoServico(p.getLong("reciboReembolso.idDoctoServico"));
				
				DomainValue dvTpDocumentoServico = p.getDomainValue("reciboReembolso.tpDocumentoServico.value");
				dvTpDocumentoServico.setDescription(p.getVarcharI18n("reciboReembolso.tpDocumentoServico.description"));
				
				reciboReembolso.setTpDocumentoServico(dvTpDocumentoServico);
				filialRecibo.setIdFilial(p.getLong("reciboReembolso.filial.idFilial"));
				filialRecibo.setSgFilial(p.getString("reciboReembolso.filial.sgFilial"));
				pessoaFilialRecibo.setNmFantasia(p.getString("reciboReembolso.filial.pessoa.nmFantasia"));
				reciboReembolso.setNrReciboReembolso(p.getInteger("reciboReembolso.nrReciboReembolso"));
				
				reciboReembolso.setVlReembolso(p.getBigDecimal("reciboReembolso.vlReembolso"));
				reciboReembolso.setVlAplicado(p.getBigDecimal("reciboReembolso.vlAplicado"));
				reciboReembolso.setTpValorAtribuidoRecibo(p.getDomainValue("reciboReembolso.tpValorAtribuidoRecibo"));
				moeda.setDsSimbolo(p.getString("reciboReembolso.dsSimbolo"));
				
				doctoServicoReembolsado.setIdDoctoServico(p.getLong("reciboReembolso.doctoServicoByIdDoctoServReembolsado.idDoctoServico"));
				
				DomainValue dvTpDoctoReembolsado = 
						p.getDomainValue("reciboReembolso.doctoServicoByIdDoctoServReembolsado.tpDocumentoServico.value");
				dvTpDoctoReembolsado.setDescription(
						p.getVarcharI18n("reciboReembolso.doctoServicoByIdDoctoServReembolsado.tpDocumentoServico.description"));
				doctoServicoReembolsado.setTpDocumentoServico(dvTpDoctoReembolsado);
				
				doctoServicoReembolsado.setNrDoctoServico(p.getLong("reciboReembolso.doctoServicoByIdDoctoServReembolsado.nrDoctoServico"));
				filialDoctoServicoReembolsado.setSgFilial(
						p.getString("reciboReembolso.doctoServicoByIdDoctoServReembolsado.filialByIdFilialOrigem.sgFilial"));
								
				String tpIdentificacaoRemetente = p.getString("reciboReembolso.clienteByIdClienteRemetente.pessoa.tpIdentificacao");
				if (StringUtils.isNotBlank(tpIdentificacaoRemetente)) {
					DomainValue dvTpIdentificacaoRemetente = getDomainValueService().findDomainValueByValue("DM_TIPO_IDENTIFICACAO",
							tpIdentificacaoRemetente);
					pessoaRemetente.setTpIdentificacao(dvTpIdentificacaoRemetente);
				}
				
				pessoaRemetente.setNrIdentificacao(p.getString("reciboReembolso.clienteByIdClienteRemetente.pessoa.nrIdentificacao"));
				pessoaRemetente.setNmPessoa(p.getString("reciboReembolso.clienteByIdClienteRemetente.pessoa.nmPessoa"));
				
				
				String nrIdentificacaoClienteDestinatario = 
						p.getString("reciboReembolso.clienteByIdClienteDestinatario.pessoa.nrIdentificacao");
				if (StringUtils.isNotBlank(nrIdentificacaoClienteDestinatario)) {
					Cliente clienteDestinatario = new Cliente();
					reciboReembolso.setClienteByIdClienteDestinatario(clienteDestinatario);
					Pessoa pessoaDestinatario = new Pessoa();
					clienteDestinatario.setPessoa(pessoaDestinatario);					
					
					String tpIdentificacaoDestinatario = p.getString("reciboReembolso.clienteByIdClienteDestinatario.pessoa.tpIdentificacao");
					if (StringUtils.isNotBlank(tpIdentificacaoDestinatario)) {
						DomainValue dvTpIdentificacaoDestinatario = getDomainValueService().findDomainValueByValue("DM_TIPO_IDENTIFICACAO",
								tpIdentificacaoDestinatario);
						pessoaDestinatario.setTpIdentificacao(dvTpIdentificacaoDestinatario);
					}
					
					pessoaDestinatario.setNrIdentificacao(nrIdentificacaoClienteDestinatario);
					pessoaDestinatario.setNmPessoa(p.getString("reciboReembolso.clienteByIdClienteDestinatario.pessoa.nmPessoa"));
				}
				
				documentoMir.setVersao(p.getInteger("versao"));
				
				return documentoMir;
			}
    	};
    	
		config.addItemConfig("reemb",DocumentoMir.class, itemInitReemb, descComparator);
		config.addItemConfig("comp",DocumentoMir.class, itemInitComp, descComparator);
		
		return config;
	}
	
	/**
	 * Método responsável pelo salvamento da entidade Mir e seus 
	 * filhos (Comprovantes OU Reembolsos) de acordo com o tipo do documento.
	 * 
	 * @param parameters
	 * @return TypedFlatMap com informações da entidade salva.
	 */
	public TypedFlatMap store(TypedFlatMap parameters) {
		MasterEntry entry = getMasterFromSession(parameters.getLong("idMir"), true);
		Mir mir = (Mir)entry.getMaster();
		
		mir.setIdMir(parameters.getLong("idMir"));
		mir.setTpMir(parameters.getDomainValue("tpMir"));
		mir.setTpDocumentoMir(parameters.getDomainValue("tpDocumentoMir"));
		
		Usuario usuarioCriacao = new Usuario();
		usuarioCriacao.setIdUsuario(parameters.getLong("usuarioByIdUsuarioCriacao.idUsuario"));
		mir.setUsuarioByIdUsuarioCriacao(usuarioCriacao);
		
		Usuario usuarioRecebimento = null;
		Long idUsuarioRecebimento = parameters.getLong("usuarioByIdUsuarioRecebimento.idUsuario");
		if (idUsuarioRecebimento != null) {
			usuarioRecebimento = new Usuario();
			usuarioRecebimento.setIdUsuario(idUsuarioRecebimento);
			mir.setUsuarioByIdUsuarioRecebimento(usuarioRecebimento);
		}
		mir.setUsuarioByIdUsuarioRecebimento(usuarioRecebimento);
		
		Filial filialOrigem = new Filial();
		filialOrigem.setIdFilial(parameters.getLong("filialByIdFilialOrigem.idFilial"));
		filialOrigem.setSgFilial(parameters.getString("filialByIdFilialOrigem.sgFilial"));
		mir.setFilialByIdFilialOrigem(filialOrigem);
		
		Filial filialDestino = new Filial();
		filialDestino.setIdFilial(parameters.getLong("filialByIdFilialDestino.idFilial"));
		mir.setFilialByIdFilialDestino(filialDestino);
		
		ItemList items = null;
		
		// Se o tipo do mir é comprovante:
		if (mir.getTpDocumentoMir().getValue().equals("C")) {
			items = getItemsFromSession(entry,"comp");
		
			if (!items.hasItems())
				throw new BusinessException("LMS-09010");
		// Senão o tipo do mir é recibo reembolso:
		} else {
			items = getItemsFromSession(entry,"reemb");
		
			if (!items.hasItems())
				throw new BusinessException("LMS-09011");
		}
	
		mir = (Mir)getMirService().storeWithItems(mir,items);
		
		items.resetItemsState(); 
    	updateMasterInSession(entry);
		
		TypedFlatMap retorno = new TypedFlatMap();
		retorno.put("idMir",mir.getIdMir());
		retorno.put("nrMir",mir.getFilialByIdFilialOrigem().getSgFilial() + " " + 
				FormatUtils.formatIntegerWithZeros(mir.getNrMir(),"00000000"));
		
		retorno.put("dhEnvio",mir.getDhEnvio());
		retorno.put("dhEmissao",mir.getDhEmissao());
		retorno.put("dhRecebimento",mir.getDhRecebimento());
		
		return retorno;
	}
	
	public TypedFlatMap findByIdCustom(Long id) {
		Mir mir = (Mir)getMirService().findById(id);
		
		// Coloca pojo na seção (característica DF2).
		putMasterInSession(mir);
		
		Usuario usuarioCriacao = mir.getUsuarioByIdUsuarioCriacao();
		Usuario usuarioRecebimento = mir.getUsuarioByIdUsuarioRecebimento();
		Filial filialOrigem = mir.getFilialByIdFilialOrigem();
		Filial filialDestino = mir.getFilialByIdFilialDestino();
		Pessoa pessoaFilialOrigem = filialOrigem.getPessoa();
		Pessoa pessoaFilialDestino = filialDestino.getPessoa();
		
		TypedFlatMap retorno = new TypedFlatMap();
		retorno.put("idMir",mir.getIdMir());
		
		retorno.put("nrMir",filialOrigem.getSgFilial() + " " + 
				FormatUtils.formatIntegerWithZeros(mir.getNrMir(),"00000000"));
		
		retorno.put("tpDocumentoMir.value",mir.getTpDocumentoMir().getValue());
		
		DomainValue tpMir = mir.getTpMir();
		retorno.put("tpMir.value",tpMir.getValue());
		retorno.put("tpMir.description",tpMir.getDescription().getValue());
		
		retorno.put("filialByIdFilialOrigem.idFilial",filialOrigem.getIdFilial());
		retorno.put("filialByIdFilialOrigem.sgFilial",filialOrigem.getSgFilial());
		retorno.put("filialByIdFilialOrigem.pessoa.nmFantasia",pessoaFilialOrigem.getNmFantasia());
		retorno.put("filialByIdFilialOrigem.siglaNomeFilial",filialOrigem.getSiglaNomeFilial());
		
		retorno.put("usuarioByIdUsuarioCriacao.idUsuario",usuarioCriacao.getIdUsuario());
		retorno.put("usuarioByIdUsuarioCriacao.nrMatricula",usuarioCriacao.getNrMatricula());
		retorno.put("usuarioByIdUsuarioCriacao.nmUsuario",usuarioCriacao.getNmUsuario());
		
		retorno.put("filialByIdFilialDestino.idFilial",filialDestino.getIdFilial());
		retorno.put("filialByIdFilialDestino.sgFilial",filialDestino.getSgFilial());
		retorno.put("filialByIdFilialDestino.pessoa.nmFantasia",pessoaFilialDestino.getNmFantasia());
		retorno.put("filialByIdFilialDestino.siglaNomeFilial",filialDestino.getSiglaNomeFilial());
		
		if (usuarioRecebimento != null) {
			retorno.put("usuarioByIdUsuarioRecebimento.idUsuario",usuarioRecebimento.getIdUsuario());
			retorno.put("usuarioByIdUsuarioRecebimento.nrMatricula",usuarioRecebimento.getNrMatricula());
			retorno.put("usuarioByIdUsuarioRecebimento.nmUsuario",usuarioRecebimento.getNmUsuario());
		}
		retorno.put("dhEmissao",mir.getDhEmissao());
		retorno.put("dhEnvio",mir.getDhEnvio());
		retorno.put("dhRecebimento",mir.getDhRecebimento());
		
		return retorno;
	}	
	
	public ResultSetPage findPaginatedCustom(TypedFlatMap criteria) {
		ResultSetPage rsp = getMirService().findPaginatedCustom(criteria);
		
		FilterResultSetPage frsp = new FilterResultSetPage(rsp) {

			public Map filterItem(Object item) {
				Mir mir = (Mir)item;
				Filial filialOrigem = mir.getFilialByIdFilialOrigem();
				Filial filialDestino = mir.getFilialByIdFilialDestino();
				Pessoa pessoaFilialOrigem = filialDestino.getPessoa();
				Pessoa pessoaFilialDestino = filialDestino.getPessoa();
				
				TypedFlatMap row = new TypedFlatMap();
				row.put("idMir",mir.getIdMir());
				row.put("filialByIdFilialOrigem.idFilial",filialOrigem.getIdFilial());
				row.put("filialByIdFilialOrigem.sgFilial",filialOrigem.getSgFilial());
				row.put("filialByIdFilialOrigem.pessoa.nmFantasia",pessoaFilialOrigem.getNmFantasia());
				row.put("nrMir",mir.getNrMir());
				row.put("filialByIdFilialDestino.idFilial",filialDestino.getIdFilial());
				row.put("filialByIdFilialDestino.sgFilial",filialDestino.getSgFilial());
				row.put("filialByIdFilialDestino.pessoa.nmFantasia",pessoaFilialDestino.getNmFantasia());
				row.put("tpMir.description",mir.getTpMir().getDescription().getValue());
				row.put("tpDocumento.description",mir.getTpDocumentoMir().getDescription().getValue());
				row.put("tpDocumentoMir.value",mir.getTpDocumentoMir().getValue());
				row.put("dhEmissao",mir.getDhEmissao());
				row.put("dhEnvio",mir.getDhEnvio());
				row.put("dhRecebimento",mir.getDhRecebimento());
				return row;
			}
			
		};
		
		return (ResultSetPage)frsp.doFilter();
	}
	
	public Integer getRowCountCustom(TypedFlatMap filtros) {
		return getMirService().getRowCountCustom(filtros);
	}
	
	
	private TypedFlatMap findGridCompPendentesBeanToMap(RegistroDocumentoEntrega registroDocumentoEntrega) {
		TypedFlatMap row = new TypedFlatMap();
		
		row.put("idRegistroDocumentoEntrega",registroDocumentoEntrega.getIdRegistroDocumentoEntrega());
		
		DoctoServico doctoServico = registroDocumentoEntrega.getDoctoServico();
		row.put("doctoServico.tpDocumentoServico",
				doctoServico.getTpDocumentoServico().getDescription().getValue());
		row.put("doctoServico.filialByIdFilialOrigem.sgFilial",
				doctoServico.getFilialByIdFilialOrigem().getSgFilial());
		row.put("doctoServico.nrDoctoServico",doctoServico.getNrDoctoServico());
		
		Pessoa pessoaRemetente = doctoServico.getClienteByIdClienteRemetente().getPessoa();
		DomainValue tpIdentificacaoRemetente = pessoaRemetente.getTpIdentificacao();
		if (tpIdentificacaoRemetente != null) {
			row.put("doctoServico.clienteByIdClienteRemetente.pessoa.tpIdentificacao",
					tpIdentificacaoRemetente.getDescription().getValue());
		}
		row.put("doctoServico.clienteByIdClienteRemetente.pessoa.nrIdentificacaoFormatado",
				FormatUtils.formatIdentificacao(tpIdentificacaoRemetente,pessoaRemetente.getNrIdentificacao()));
		row.put("doctoServico.clienteByIdClienteRemetente.pessoa.nmPessoa",
				pessoaRemetente.getNmPessoa());
		
		Cliente clienteByIdClienteDestinatario = doctoServico.getClienteByIdClienteDestinatario();
		if (clienteByIdClienteDestinatario != null) {
			Pessoa pessoaDestinatario = clienteByIdClienteDestinatario.getPessoa();
			DomainValue tpIdentificacaoDestinatario = pessoaDestinatario.getTpIdentificacao();
			if (tpIdentificacaoDestinatario != null) {
				row.put("doctoServico.clienteByIdClienteDestinatario.pessoa.tpIdentificacao",
						tpIdentificacaoDestinatario.getDescription().getValue());
			}
			
			row.put("doctoServico.clienteByIdClienteDestinatario.pessoa.nrIdentificacaoFormatado",
					FormatUtils.formatIdentificacao(tpIdentificacaoDestinatario,pessoaDestinatario.getNrIdentificacao()));
			row.put("doctoServico.clienteByIdClienteDestinatario.pessoa.nmPessoa",
					pessoaDestinatario.getNmPessoa());
		}
		
		
		row.put("tipoDocumentoEntrega.dsTipoDocumentoEntrega",
				registroDocumentoEntrega.getTipoDocumentoEntrega().getDsTipoDocumentoEntrega().getValue());
		
		return row;
	}
	
	public List findGridCompPendentes(TypedFlatMap filtros) {
		Long idClienteRemetente = filtros.getLong("clienteByIdClienteRemetente.idCliente");
		Long idClienteDestinatario = filtros.getLong("clienteByIdClienteDestinatario.idCliente");
		String tpMir = filtros.getString("tpMir");
		Long idFilialOrigem = filtros.getLong("idFilialOrigem");
		Long idFilialDestino = filtros.getLong("idFilialDestino");
		
		List l = getMirService().findComprovantesPendentes(tpMir,idClienteRemetente,idClienteDestinatario,
				idFilialOrigem,idFilialDestino);
		
		Long masterId = filtros.getLong("idMir");
		MasterEntry entry = getMasterFromSession(masterId, false);
    	ItemList items = getItemsFromSession(entry,"comp");
    	ItemListConfig itemsConfig = getMasterConfig().getItemListConfig("comp");
		if (!items.isInitialized()) { 
			items.initialize(getMirService().findDocsByMir(masterId,"C"));
		}
		
		List newList = new ArrayList();
		Iterator i = l.iterator();
		while (i.hasNext()) {
			RegistroDocumentoEntrega registroDocumentoEntrega = (RegistroDocumentoEntrega)i.next();
			
			// Valida se o comprovante já foi associado na seção.
			boolean blAssociado = false;
			Long idRegistroDocumentoEntrega = registroDocumentoEntrega.getIdRegistroDocumentoEntrega();
			for (Iterator iDocumentos = items.iterator(masterId, itemsConfig) ; iDocumentos.hasNext() ; ) {
				DocumentoMir documentoMir = (DocumentoMir)iDocumentos.next();
				if (documentoMir.getRegistroDocumentoEntrega().getIdRegistroDocumentoEntrega().equals(idRegistroDocumentoEntrega)) {
					blAssociado = true;
					break; 
				}
			}
			if (blAssociado)
				continue;
						
			TypedFlatMap row = findGridCompPendentesBeanToMap(registroDocumentoEntrega);			
			newList.add(row);
		}
		
		List lRemovidos = items.getRemovedItems();
		Iterator iRemovidos = lRemovidos.iterator();
		while (iRemovidos.hasNext()) {
			DocumentoMir documentoMirAux = (DocumentoMir)iRemovidos.next();
			RegistroDocumentoEntrega registroDocumentoEntrega = documentoMirAux.getRegistroDocumentoEntrega();
			
			// Valida se o recibo já foi associado na seção.
			boolean blAssociado = false;
			Long idRegistroDocumentoEntrega = registroDocumentoEntrega.getIdRegistroDocumentoEntrega();
			for (Iterator iDocumentos = items.iterator(masterId, itemsConfig) ; iDocumentos.hasNext() ; ) {
				DocumentoMir documentoMir = (DocumentoMir)iDocumentos.next();
				if (documentoMir.getRegistroDocumentoEntrega().getIdRegistroDocumentoEntrega()
						.equals(idRegistroDocumentoEntrega)) {
					blAssociado = true;
					break;
				}
			}
			if (blAssociado)
				continue;			
			
			
			TypedFlatMap row = findGridCompPendentesBeanToMap(registroDocumentoEntrega);
			newList.add(row);
		}
		
		return newList;
	}	

	private TypedFlatMap findGridReembPendentesBeanToMap(ReciboReembolso reciboReembolso) {
		TypedFlatMap row = new TypedFlatMap();
		
		row.put("idReciboReembolso",reciboReembolso.getIdDoctoServico());

		row.put("tpDocumentoServico",
				reciboReembolso.getTpDocumentoServico().getDescription().getValue());
		row.put("filial.sgFilial",
				reciboReembolso.getFilial().getSgFilial());
		row.put("nrDoctoServico",reciboReembolso.getNrReciboReembolso());
		
		DoctoServico doctoReembolsado = reciboReembolso.getDoctoServicoByIdDoctoServReembolsado(); 
		row.put("doctoServicoByIdDoctoServReembolsado.tpDocumentoServico",
				doctoReembolsado.getTpDocumentoServico().getDescription().getValue());
		row.put("doctoServicoByIdDoctoServReembolsado.filialByIdFilialOrigem.sgFilial",
				doctoReembolsado.getFilialByIdFilialOrigem().getSgFilial());
		row.put("doctoServicoByIdDoctoServReembolsado.nrDoctoServico",doctoReembolsado.getNrDoctoServico());
		
		Pessoa pessoaRemetente = reciboReembolso.getClienteByIdClienteRemetente().getPessoa();
		DomainValue tpIdentificacaoRemetente = pessoaRemetente.getTpIdentificacao();
		if (pessoaRemetente != null) {
			row.put("clienteByIdClienteRemetente.pessoa.tpIdentificacao",
					tpIdentificacaoRemetente.getDescription().getValue());
		}
		row.put("clienteByIdClienteRemetente.pessoa.nrIdentificacaoFormatado",
				FormatUtils.formatIdentificacao(tpIdentificacaoRemetente,pessoaRemetente.getNrIdentificacao()));
		row.put("clienteByIdClienteRemetente.pessoa.nmPessoa",
				pessoaRemetente.getNmPessoa());
		
		Cliente clienteByIdClienteDestinatario = reciboReembolso.getClienteByIdClienteDestinatario();
		
		if (clienteByIdClienteDestinatario != null) {
			Pessoa pessoaDestinatario = clienteByIdClienteDestinatario.getPessoa();
			DomainValue tpIdentificacaoDestinatario = pessoaDestinatario.getTpIdentificacao();
			if (tpIdentificacaoDestinatario != null) {
				row.put("clienteByIdClienteDestinatario.pessoa.tpIdentificacao",
						tpIdentificacaoDestinatario.getDescription().getValue());
			}
			row.put("clienteByIdClienteDestinatario.pessoa.nrIdentificacaoFormatado",
					FormatUtils.formatIdentificacao(tpIdentificacaoDestinatario,pessoaDestinatario.getNrIdentificacao()));
			row.put("clienteByIdClienteDestinatario.pessoa.nmPessoa",
					pessoaDestinatario.getNmPessoa());
		}
				
		return row;
	}
	
	public List findGridReembPendentes(TypedFlatMap filtros) {
		Long idClienteRemetente = filtros.getLong("clienteByIdClienteRemetente.idCliente");
		Long idClienteDestinatario = filtros.getLong("clienteByIdClienteDestinatario.idCliente");
		String tpMir = filtros.getString("tpMir");
		Long idFilialOrigem = filtros.getLong("idFilialOrigem");
		Long idFilialDestino = filtros.getLong("idFilialDestino");
		
		List l = getMirService().findReembolsosPendentes(tpMir,idClienteRemetente,idClienteDestinatario,
				idFilialOrigem,idFilialDestino);
		
		Long masterId = filtros.getLong("idMir");
		MasterEntry entry = getMasterFromSession(masterId, false);
    	ItemList items = getItemsFromSession(entry,"reemb");
    	ItemListConfig itemsConfig = getMasterConfig().getItemListConfig("reemb");
		if (!items.isInitialized()) { 
			items.initialize(getMirService().findDocsByMir(masterId,"R"));
		}
		
		List newList = new ArrayList();
		Iterator i = l.iterator();
		while (i.hasNext()) {
			ReciboReembolso reciboReembolso = (ReciboReembolso)i.next();
			
			// Valida se o recibo já foi associado na seção.
			boolean blAssociado = false;
			Long idReciboReembolso = reciboReembolso.getIdDoctoServico();
			for (Iterator iDocumentos = items.iterator(masterId, itemsConfig) ; iDocumentos.hasNext() ; ) {
				DocumentoMir documentoMir = (DocumentoMir)iDocumentos.next();
				if (documentoMir.getReciboReembolso().getIdDoctoServico().equals(idReciboReembolso)) {
					blAssociado = true;
					break;
				}
			}
			if (blAssociado)
				continue;
						
			TypedFlatMap row = findGridReembPendentesBeanToMap(reciboReembolso);
			newList.add(row);
		}
		
		List lRemovidos = items.getRemovedItems();
		Iterator iRemovidos = lRemovidos.iterator();
		while (iRemovidos.hasNext()) {
			DocumentoMir documentoMirAux = (DocumentoMir)iRemovidos.next();
			ReciboReembolso reciboReembolso = documentoMirAux.getReciboReembolso();
			
			// Valida se o recibo já foi associado na seção.
			boolean blAssociado = false;
			Long idReciboReembolso = reciboReembolso.getIdDoctoServico();
			for (Iterator iDocumentos = items.iterator(masterId, itemsConfig) ; iDocumentos.hasNext() ; ) {
				DocumentoMir documentoMir = (DocumentoMir)iDocumentos.next();
				if (documentoMir.getReciboReembolso().getIdDoctoServico().equals(idReciboReembolso)) {
					blAssociado = true;
					break;
				}
			}
			if (blAssociado)
				continue;			
			
			
			TypedFlatMap row = findGridReembPendentesBeanToMap(reciboReembolso);
			newList.add(row);
		}

		return newList;
	}	
	
	
	
	 /**
     * Atualiza dhEnvio de uma entidade de Mir.
     * @param idMir
     * @param dhEnvio
     * @return
     */
    public TypedFlatMap updateConfirmarEnvio(TypedFlatMap criteria) {
    	Long id = criteria.getLong("idMir");
    	DateTime dataAtual = JTDateTimeUtils.getDataHoraAtual();
    	Mir mir = getMirService().updateConfirmarEnvio(id,dataAtual);
    	
    	putMasterInSession(mir);
    	
    	TypedFlatMap retorno = new TypedFlatMap();
    	retorno.put("dhEnvio",dataAtual);
    	
    	return retorno;
    }
    
    /**
     * Atualiza dhRecebimento de uma instância de Mir.
     * @param idMir
     * @param dhRecebimento
     * @return
     */
    public TypedFlatMap updateConfirmarRecebimento(TypedFlatMap criteria) {
    	Long id = criteria.getLong("idMir");
    	DateTime dataAtual = JTDateTimeUtils.getDataHoraAtual();
    	Mir mir = getMirService().updateConfirmarRecebimento(id,dataAtual);
    	
    	putMasterInSession(mir);
    	
    	TypedFlatMap retorno = new TypedFlatMap();
    	retorno.put("dhRecebimento",dataAtual);
    	
    	return retorno;
    }
	
    /**
     * Atualiza dhEmissao de uma instância de Mir.
     * @param idMir
     * @param dhEmissao
     * @return
     */
    public TypedFlatMap updateConfirmarEmissao(TypedFlatMap criteria) {
    	Long id = criteria.getLong("idMir");
    	DateTime dataAtual = JTDateTimeUtils.getDataHoraAtual();
    	Mir mir = getMirService().updateConfirmarEmissao(id,dataAtual);
    	
    	putMasterInSession(mir);
    	
    	TypedFlatMap retorno = new TypedFlatMap();
    	retorno.put("dhEmissao",dataAtual);
    	
    	return retorno;
    }
    
	/**
	 * Verifica se existem documentos já associados a MIR do tipo informado.
	 * @param criteria
	 * @return
	 */
    public Long validateTpDocumentoMir(TypedFlatMap criteria) {
    	String tpDocumentoMir = criteria.getString("tpDocumentoMir");
    	
    	MasterEntry entry = getMasterFromSession(criteria.getLong("idMir"), false);
    	ItemList items = null;
    	if (StringUtils.isBlank(tpDocumentoMir) || tpDocumentoMir.equals("C")) {
    		items = getItemsFromSession(entry,"reemb");
    		
    		if (items.hasItems())
				throw new BusinessException("LMS-09008");
    	} 
    	
    	if (StringUtils.isBlank(tpDocumentoMir) || tpDocumentoMir.equals("R")) {
    		items = getItemsFromSession(entry,"comp");
    		
    		if (items.hasItems())
				throw new BusinessException("LMS-09009");
    	}
    	
    	return Long.valueOf(0);
    }
    
    
	/**
	 * find da lookup de filial.
	 * @param criteria
	 * @return List com filiais encontradas.
	 */
	public List findLookupFilial(Map criteria) {
		return filialService.findLookupFilial(criteria);
	}
	
	/**
	 * find da lookup de filial.
	 * @param criteria
	 * @return List com filiais encontradas.
	 */
	public List findLookupCliente(Map criteria) {
		return clienteService.findLookup(criteria);
	}
	
	
	/**
	 * Find da lookup de funcionário.
	 * @param criteria
	 * @return List com usuários encontrados.
	 */
	public List findLookupUsuarioFuncionario(TypedFlatMap criteria) {
		Long idUsuario = criteria.getLong("idUsuario");
		String nrMatricula = criteria.getString("nrMatricula");
		Long idFilial = criteria.getLong("filial.idFilial");
		
		return usuarioService.findLookupUsuarioFuncionario(idUsuario,nrMatricula,idFilial,null,null,null,true);
	}
	
	public TypedFlatMap findInfoUsuarioLogado() {
		TypedFlatMap info = new TypedFlatMap();
		
		Filial filial = SessionUtils.getFilialSessao();
		info.put("filial.idFilial",filial.getIdFilial());
		info.put("filial.sgFilial",filial.getSgFilial());
		info.put("filial.pessoa.nmFantasia",filial.getPessoa().getNmFantasia());
		info.put("filial.siglaNomeFilial",filial.getSiglaNomeFilial());
		
		HistoricoFilial historicoFilial = SessionUtils.getUltimoHistoricoFilialSessao();
		info.put("filial.tpFilial",historicoFilial.getTpFilial().getValue());
		
		Usuario usuario = SessionUtils.getUsuarioLogado();
		info.put("usuario.idUsuario",usuario.getIdUsuario());
		info.put("usuario.nrMatricula",usuario.getNrMatricula());
		info.put("usuario.nmUsuario",usuario.getNmUsuario());
		
		return info;
	}
	
	
	public TypedFlatMap validateDoctoServicoInComprovantes(TypedFlatMap parameters) {
		Long idDoctoServico = parameters.getLong("idDoctoServico");
		Long idFilialOrigem = parameters.getLong("idFilialOrigem");
		Long idFilialDestino = parameters.getLong("idFilialDestino");
		String tpMir = parameters.getString("tpMir");
		Long idMir = parameters.getLong("idMir");
		Long idDocumentoMir = parameters.getLong("idDocumentoMir");
		
		validateUniqueConstraintComprovantes(idDoctoServico, idMir, idDocumentoMir);
		
		return getMirService().validateComprovantes(idDoctoServico,idFilialOrigem,idFilialDestino,tpMir,idMir);
	}
	
	/**
	 * @param idDoctoServico
	 * @param idMir
	 * @param idDocumentoMir
	 */
	private void validateUniqueConstraintComprovantes(Long idDoctoServico, Long idMir, Long idDocumentoMir) {
		MasterEntry entry = getMasterFromSession(idMir, false);
		ItemList items = getItemsFromSession(entry,"comp");
		ItemListConfig itemsConfig = getMasterConfig().getItemListConfig("comp");
		
		for (Iterator i = items.iterator(idMir, itemsConfig) ; i.hasNext() ; ) {
			DocumentoMir documentoMir = (DocumentoMir)i.next();
			RegistroDocumentoEntrega registroDocumentoEntrega = documentoMir.getRegistroDocumentoEntrega();
			DoctoServico doctoServico = registroDocumentoEntrega.getDoctoServico();
			if (!documentoMir.getIdDocumentoMir().equals(idDocumentoMir) &&
					doctoServico.getIdDoctoServico().equals(idDoctoServico)) {
				throw new BusinessException("LMS-09013");
			}
		}
	}
	
	public TypedFlatMap validateDoctoServicoInReembolsos(TypedFlatMap parameters) {
		Long idDoctoServico = parameters.getLong("idDoctoServico");
		Long idFilialDestino = parameters.getLong("idFilialDestino");
		String tpMir = parameters.getString("tpMir");
		Long idMir = parameters.getLong("idMir");
		Long idDocumentoMir = parameters.getLong("idDocumentoMir");
		
		validateUniqueConstraintReembolsos(idDoctoServico, idMir, idDocumentoMir);
		
		return getMirService().validateReembolsos(idDoctoServico,idFilialDestino,tpMir,idMir);
	}
	
	/**
	 * @param idDoctoServico
	 * @param idMir
	 * @param idDocumentoMir
	 */
	private void validateUniqueConstraintReembolsos(Long idDoctoServico, Long idMir, Long idDocumentoMir) {
		MasterEntry entry = getMasterFromSession(idMir, false);
		ItemList items = getItemsFromSession(entry,"reemb");
		ItemListConfig itemsConfig = getMasterConfig().getItemListConfig("reemb");
		
		for (Iterator i = items.iterator(idMir, itemsConfig) ; i.hasNext() ; ) {
			DocumentoMir documentoMir = (DocumentoMir)i.next();
			ReciboReembolso reciboReembolso = documentoMir.getReciboReembolso();
			if (!documentoMir.getIdDocumentoMir().equals(idDocumentoMir) &&
					reciboReembolso.getIdDoctoServico().equals(idDoctoServico)) {
				throw new BusinessException("LMS-09014");
			}
		}
	}
	
	public TypedFlatMap findFilialDestinoByMir(TypedFlatMap map) {
		Mir mir = (Mir)getMirService().findById(map.getLong("idMir"));
		Filial filialDestino = mir.getFilialByIdFilialDestino();
		
		TypedFlatMap retorno = new TypedFlatMap();
		retorno.put("filial.idFilial",filialDestino.getIdFilial());
		retorno.put("filial.sgFilial",filialDestino.getSgFilial());
		retorno.put("filial.pessoa.nmFantasia",filialDestino.getPessoa().getNmFantasia());
		return retorno;
	}
	
	
	/**
     * Clona uma MIR alterando usuário de destino
     * @param idMir
     * @param idSetor
     * @param idUsuarioDestino
     * @return
     */
	public TypedFlatMap storeClonarMirRecebimento(TypedFlatMap values) {
		Long idMirOld = values.getLong("idMir");
		Long idUsuarioDestino = values.getLong("usuario.idUsuario");
		
		Long idMir = getMirService().storeClonarMirRecebimento(idMirOld,idUsuarioDestino);
		
		return this.findByIdCustom(idMir);
	}
	
	public void confirmarPendenciasReem(TypedFlatMap values) {
		Long idMir = values.getLong("idMir");
		List ids = values.getList("reciboReembolso.ids");
		if (ids != null) {
			Iterator i = ids.iterator();
			while (i.hasNext()) {
				Long id = Long.valueOf((String)i.next());
				DocumentoMir documentoMir = getMirService().findReciboReembolsoById(id);
				this.saveItemInstanceOnSession(idMir,documentoMir,"reemb");
			}
		}
	}
	
	public void confirmarPendenciasComp(TypedFlatMap values) {
		Long idMir = values.getLong("idMir");
		List ids = values.getList("registroDocumentoEntrega.ids");
		if (ids != null) {
			Iterator i = ids.iterator();
			while (i.hasNext()) {
				Long id = Long.valueOf((String)i.next());
				DocumentoMir documentoMir = getMirService().findComprovanteById(id);
				this.saveItemInstanceOnSession(idMir,documentoMir,"comp");
			}
		}
	}
	
	/**
     * Método que popula a combo de tipos de documento.
     * NÃO É CARREGADO O VALOR DO DOMÍNIO 'RRE'.
     * 
     * @param criteria
     * @return List
     */
    public List findTipoDocumentoServico(Map criteria) {
        List dominiosValidos = new ArrayList();
        dominiosValidos.add("CTR");
        dominiosValidos.add("CRT");
        dominiosValidos.add("MDA");
        dominiosValidos.add("NFT");
        dominiosValidos.add("NTE");
        dominiosValidos.add("CTE");
        List retorno = getDomainValueService().findByDomainNameAndValues(
                "DM_TIPO_DOCUMENTO_SERVICO", dominiosValidos);
        return retorno;
    }
	
	/**
	 * Busca a filial baseado no documento de serviço
	 * @param criteria
	 * @return
	 */
	public List findLookupFilialByDocumentoServico(Map criteria) {
		FilterList filter = new FilterList(filialService.findLookup(criteria)) {
			public Map filterItem(Object item) {
				Filial filial = (Filial) item;
				TypedFlatMap typedFlatMap = new TypedFlatMap();
				typedFlatMap.put("idFilial", filial.getIdFilial());
				typedFlatMap.put("sgFilial", filial.getSgFilial());
				return typedFlatMap;
			}
		};
		return (List) filter.doFilter();
	}
	

	//  findLookup's para o segundo campo da tag documento de serviço:
	public List findLookupServiceDocumentFilialCTR(Map criteria) {
		return this.findLookupFilialByDocumentoServico(criteria);
	}

	public List findLookupServiceDocumentFilialCRT(Map criteria) {
		return this.findLookupFilialByDocumentoServico(criteria);
	}
	
	public List findLookupServiceDocumentFilialNFT(Map criteria) {
		return this.findLookupFilialByDocumentoServico(criteria);
	}
	
	public List findLookupServiceDocumentFilialMDA(Map criteria) {
		return this.findLookupFilialByDocumentoServico(criteria);
	}
	
	public List findLookupServiceDocumentFilialNTE(Map criteria) {
		return this.findLookupFilialByDocumentoServico(criteria);
	}
	
	public List findLookupServiceDocumentFilialCTE(Map criteria) {
		return this.findLookupFilialByDocumentoServico(criteria);
	}
	
	
	//  findLookup's para o terceiro campo da tag documento de serviço:
	public List findLookupServiceDocumentNumberCTR(TypedFlatMap criteria) {
		return doctoServicoLookupFacade.findLookup(criteria,TipoDocumentoServico.CTR);
	}

	public List findLookupServiceDocumentNumberCRT(TypedFlatMap criteria) {
		return doctoServicoLookupFacade.findLookup(criteria,TipoDocumentoServico.CRT);
	}

	public List findLookupServiceDocumentNumberMDA(TypedFlatMap criteria) {
		return doctoServicoLookupFacade.findLookup(criteria,TipoDocumentoServico.MDA);
	}
	
	public List findLookupServiceDocumentNumberNFT(TypedFlatMap criteria) {
		return doctoServicoLookupFacade.findLookup(criteria,TipoDocumentoServico.NFT);
	}

	public List findLookupServiceDocumentNumberRRE(TypedFlatMap criteria) {
		return doctoServicoLookupFacade.findLookup(criteria,TipoDocumentoServico.RRE);
	}	
	
	public List findLookupServiceDocumentNumberNTE(TypedFlatMap criteria) {
		return doctoServicoLookupFacade.findLookup(criteria,TipoDocumentoServico.NTE);
	}	
	
	public List findLookupServiceDocumentNumberCTE(TypedFlatMap criteria) {
		return doctoServicoLookupFacade.findLookup(criteria,TipoDocumentoServico.CTE);
	}	
	
	public void setUsuarioService(UsuarioService usuarioService) {
		this.usuarioService = usuarioService;
	}
	
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}
	public void setDoctoServicoLookupFacade(
			DoctoServicoLookupFacade doctoServicoLookupFacade) {
		this.doctoServicoLookupFacade = doctoServicoLookupFacade;
	}
	
}