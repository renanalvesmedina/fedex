package com.mercurio.lms.entrega.action;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.report.ReportActionSupport;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.entrega.report.EmitirDocumentosServicoDPEVencidoService;
import com.mercurio.lms.municipios.model.Regional;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.RegionalService;
import com.mercurio.lms.util.session.SessionUtils;
/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.entrega.emitirDocumentosServicoDPEVencidoAction"
 */

public class EmitirDocumentosServicoDPEVencidoAction extends ReportActionSupport {
	
	private FilialService filialService;
	private RegionalService regionalService;

	
	
	private EmitirDocumentosServicoDPEVencidoService emitirDocumentosServicoDPEVencidoService;
	
	public void setEmitirDocumentosServicoDPEVencidoService(
			EmitirDocumentosServicoDPEVencidoService emitirDocumentosServicoDPEVencidoService) {
		this.emitirDocumentosServicoDPEVencidoService = emitirDocumentosServicoDPEVencidoService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public List findLookupFilial(Map criteria) {		
		return filialService.findLookup(criteria);	
	}

	public List findLookupFilialRegional(Map criteria) {		
		return filialService.findLookupFilial(criteria);	
	}
	
	@Override
	public java.io.File execute(TypedFlatMap parameters) throws Exception {
		
		this.reportServiceSupport = this.emitirDocumentosServicoDPEVencidoService;
		
		return super.execute(parameters);
	}
	
	/**
	 * Find da combo de regionais.
	 * @return
	 */
	public List findComboRegional() {
		List regionais = SessionUtils.getRegionaisUsuarioLogado();
		List retorno = new ArrayList(regionais.size());
		Iterator iRegionais = regionais.iterator();
		while (iRegionais.hasNext()) {
			Regional r = (Regional)iRegionais.next();
			Map m = new TypedFlatMap();
			m.put("idRegional",r.getIdRegional());
			m.put("siglaDescricao",r.getSiglaDescricao());
			m.put("dtVigenciaInicial",r.getDtVigenciaInicial());
			m.put("dtVigenciaFinal",r.getDtVigenciaFinal());
			retorno.add(m);
		}
		return retorno;
	}

	public RegionalService getRegionalService() {
		return regionalService;
	}

	public void setRegionalService(RegionalService regionalService) {
		this.regionalService = regionalService;
	}
}
