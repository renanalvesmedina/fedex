package com.mercurio.lms.entrega.action;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.report.ReportExecutionManager;
import com.mercurio.adsm.framework.report.ReportServiceSupport;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.ControleCarga;
import com.mercurio.lms.carregamento.model.Manifesto;
import com.mercurio.lms.carregamento.model.service.ManifestoService;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.configuracoes.model.TelefoneEndereco;
import com.mercurio.lms.configuracoes.model.service.TelefoneEnderecoService;
import com.mercurio.lms.contasreceber.report.EmitirReciboFreteService;
import com.mercurio.lms.contratacaoveiculos.model.MeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteService;
import com.mercurio.lms.entrega.model.ManifestoEntrega;
import com.mercurio.lms.entrega.model.service.ManifestoEntregaService;
import com.mercurio.lms.entrega.report.EmitirManifestoService;
import com.mercurio.lms.entrega.report.EmitirReciboReembolsoService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.RotaColetaEntrega;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.RotaColetaEntregaService;
import com.mercurio.lms.sim.model.SolicitacaoRetirada;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.service.VersaoDescritivoPceService;
import com.mercurio.lms.vendas.util.ConstantesEventosPCE;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * Generated by: ADSM ActionGenerator
 * <p>
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 *
 * @spring.bean id="lms.entrega.emitirManifestoAction"
 */
public class EmitirManifestoAction  {

    private static final String ID_MANIFESTO = "idManifesto";
    private static final String IS_REEMITIR = "isReemitir";

    private FilialService filialService;
	private RotaColetaEntregaService rotaColetaEntregaService;
	private ManifestoEntregaService manifestoEntregaService;
	private ConfiguracoesFacade configuracoesFacade;
	private TelefoneEnderecoService telefoneEnderecoService;
	private MeioTransporteService meioTransporteService;
	private VersaoDescritivoPceService versaoDescritivoPceService;
	private ManifestoService manifestoService;
	private EmitirManifestoService emitirManifestoService;
	private EmitirReciboReembolsoService emitirReciboReembolsoService;
	private EmitirReciboFreteService emitirReciboFreteService;

	private ReportExecutionManager reportExecutionManager;
	private static final Log LOGGER = LogFactory.getLog(EmitirManifestoAction.class);

	public String execute(TypedFlatMap parameters) throws Exception {
		String whichReport = parameters.getString("whichReport");
		ReportServiceSupport currentReport;

        if ("emissaoReciboViagem".equals(whichReport)) {
			parameters.put(IS_REEMITIR, Boolean.FALSE);
			currentReport = emitirReciboReembolsoService;
		} else if ("reemissaoReciboViagem".equals(whichReport)) {
			parameters.put(IS_REEMITIR, Boolean.TRUE);
			currentReport = emitirReciboReembolsoService;
		} else if ("emissaoRecibo".equals(whichReport)) {
			parameters.put(IS_REEMITIR, Boolean.FALSE);
			currentReport = emitirReciboFreteService;
		} else if ("reemissaoRecibo".equals(whichReport)) {
			parameters.put(IS_REEMITIR, Boolean.FALSE);
			currentReport = emitirReciboFreteService;
		} else {
			throw new IllegalStateException("Nenhum relatório informado, provavel erro na tela");
		}
		return reportExecutionManager.generateReportLocator(currentReport, parameters);
	}

	/**
	 * Emissão do Manifesto de Entrega.
	 * Se for encontrado um bloqueio, o manifesto não é emitido, e o alerta PCE deverá ser exibido para o usuário.
	 * @param parameters
	 * @return
	 * @throws Exception
	 */
	public TypedFlatMap executeManifesto(TypedFlatMap parameters) throws Exception {
		TypedFlatMap retorno = new TypedFlatMap();

		try {
			//caso exista PCE do tipo bloqueio 'B' abre popup
			List<Long> versaoDescritivoPceList = versaoDescritivoPceService.findVersaoDescritivoPcebyManifestoAndTpAcao(
									parameters.getLong("idManifesto"),
									"B",
									ConstantesEventosPCE.CD_PROCESSO_ENTREGA,
									ConstantesEventosPCE.CD_EVENTO_MANIFESTO_ENTREGA,
									ConstantesEventosPCE.CD_OCORRENCIA_NA_ENTREGA);

			if( !versaoDescritivoPceList.isEmpty() ){
				Long idVersaoDescritivoPce = versaoDescritivoPceList.get(0);

				throw new BusinessException("LMS-01097", new Long[]{idVersaoDescritivoPce});
			}

			String reportLocator = this.reportExecutionManager.generateReportLocator(emitirManifestoService, parameters);
			retorno.put("strFile",reportLocator);

    	} catch (BusinessException be) {
    		String key = be.getMessageKey();
    		if (!"LMS-01097".equals(key)) {
    			throw be;
    		}

    		Long idVersaoDescritivoPce = ((Long[])be.getMessageArguments())[0];
        	versaoDescritivoPceService.executeConfirmaRecebimentoDoAlerta(idVersaoDescritivoPce,null);

        	retorno.put("idPce",idVersaoDescritivoPce);
		}

    	return retorno;
	}

	public TypedFlatMap storeValidateEmissao(TypedFlatMap parameters) {
		long starttime = System.currentTimeMillis();
		TypedFlatMap map = manifestoEntregaService.storeValidateEmissaoAdaptor(parameters);

		ManifestoEntrega me = (ManifestoEntrega)map.get("manifestoEntrega");
		Manifesto m = me.getManifesto();

		map.remove("manifestoEntrega");
		map.put("blEmitirManifesto",Boolean.TRUE);
		DomainValue tpManifestoEntrega = m.getTpManifestoEntrega();
		if (tpManifestoEntrega != null) {
			map.put("tpManifestoEntrega.value",tpManifestoEntrega.getValue());
			map.put("tpManifestoEntrega.description",tpManifestoEntrega.getDescription().getValue());
		}
		map.put("tpStatusManifesto.value",m.getTpStatusManifesto().getValue());
		map.put("tpStatusManifesto.description",m.getTpStatusManifesto().getDescription().getValue());
		map.put("dhEmissao",m.getDhEmissaoManifesto());

        long seconds = System.currentTimeMillis() - starttime;
        LOGGER.debug("[TIMELOG EMISSAO MANIFESTO];" + parameters.getLong(ID_MANIFESTO) + ";" + JTDateTimeUtils.getDataHoraAtual() + ";" + seconds + ";" + SessionUtils.getFilialSessao().getSgFilial());

        return map;
    }

    public TypedFlatMap validateReemissaoCobranca(TypedFlatMap map) {
        Long idManifestoEntrega = map.getLong("idManifestoEntrega");
        boolean blEmitirBoleto = manifestoEntregaService.validateIfExistsDocumentoCobranca(idManifestoEntrega, "B");
        if (!blEmitirBoleto) {
            throw new BusinessException("LMS-09109");
        }

        TypedFlatMap retorno = new TypedFlatMap();
        retorno.put("blEmitirBoleto", blEmitirBoleto);
        return retorno;
    }

    public TypedFlatMap findByIdCustom(Long id) {
        Manifesto manifesto = manifestoEntregaService.findByIdEmitirManifesto(id);

        TypedFlatMap retorno = new TypedFlatMap();

        retorno.put(ID_MANIFESTO, manifesto.getIdManifesto());

        Filial filial = manifesto.getFilialByIdFilialOrigem();
        retorno.put("filial.idFilial", filial.getIdFilial());
        retorno.put("filial.sgFilial", filial.getSgFilial());
        retorno.put("filial.pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
        retorno.put("filial.tpOrdemDoc", filial.getTpOrdemDoc().getValue());

        ControleCarga controleCarga = manifesto.getControleCarga();
        if (controleCarga != null) {
            retorno.put("controleCarga.idControleCarga", controleCarga.getIdControleCarga());
            retorno.put("controleCarga.nrControleCarga", controleCarga.getNrControleCarga());
            retorno.put("tpControleCargaValor", controleCarga.getTpControleCarga().getValue());
            retorno.put("controleCarga.tpStatusControleCarga", controleCarga.getTpStatusControleCarga().getValue());

            Filial filialOrigem = controleCarga.getFilialByIdFilialOrigem();
            retorno.put("filialControleCarga.idFilial", filialOrigem.getIdFilial());
            retorno.put("filialControleCarga.sgFilial", filialOrigem.getSgFilial());

            RotaColetaEntrega rotaColetaEntrega = controleCarga.getRotaColetaEntrega();
            if (rotaColetaEntrega != null) {
                retorno.put("controleCarga.rotaColetaEntrega.nrRota", rotaColetaEntrega.getNrRota());
                retorno.put("controleCarga.rotaColetaEntrega.dsRota", rotaColetaEntrega.getDsRota());
            }
        }

        ManifestoEntrega me = manifesto.getManifestoEntrega();
        if (me != null) {
            retorno.put("idManifestoEntrega", me.getIdManifestoEntrega());
            retorno.put("manifestoEntrega.nrManifestoEntrega", me.getNrManifestoEntrega());
            Filial filialEntrega = me.getFilial();
            if (filialEntrega != null) {
                retorno.put("manifestoEntrega.filial.sgFilial", filialEntrega.getSgFilial());
            }
            retorno.put("obManifestoEntrega", me.getObManifestoEntrega());
        }

        DomainValue tpManifestoEntrega = manifesto.getTpManifestoEntrega();
        if (tpManifestoEntrega != null) {
            retorno.put("tpManifestoEntrega.value", tpManifestoEntrega.getValue());
            retorno.put("tpManifestoEntrega.description", tpManifestoEntrega.getDescription().getValue());
        }
        retorno.put("tpStatusManifesto.value", manifesto.getTpStatusManifesto().getValue());
        retorno.put("tpStatusManifesto.description", manifesto.getTpStatusManifesto().getDescription().getValue());
        retorno.put("filialNrPreManifesto.sgFilial", filial.getSgFilial());
        retorno.put("nrPreManifesto", manifesto.getNrPreManifesto());
        retorno.put("dhEmissao", manifesto.getDhEmissaoManifesto());

        SolicitacaoRetirada solicitacaoRetirada = manifesto.getSolicitacaoRetirada();
        if (solicitacaoRetirada != null) {
            Filial filialRetirada = solicitacaoRetirada.getFilial();
            Pessoa pessoaRetirada = filialRetirada.getPessoa();

            retorno.put("solicitacaoRetirada.idSolicitacaoRetirada", solicitacaoRetirada.getIdSolicitacaoRetirada());
            retorno.put("solicitacaoRetirada.filial.idFilial", filialRetirada.getIdFilial());
            retorno.put("solicitacaoRetirada.filial.sgFilial", filialRetirada.getSgFilial());
            retorno.put("solicitacaoRetirada.nrSolicitacaoRetirada", solicitacaoRetirada.getNrSolicitacaoRetirada());
            retorno.put("solicitacaoRetirada.filial.nmFilial", pessoaRetirada.getNmFantasia());

            DomainValue tpIdentificacao = solicitacaoRetirada.getTpIdentificacao();
            if (tpIdentificacao != null) {
                retorno.put("pessoa.tpIdentificacao", tpIdentificacao.getValue());
                retorno.put("pessoa.nrIdentificacao", solicitacaoRetirada.getNrCnpj());
            }
            retorno.put("pessoa.nmPessoa", solicitacaoRetirada.getNmRetirante());
            retorno.put("nrDdd", solicitacaoRetirada.getNrDdd());
            retorno.put("nrTelefone", solicitacaoRetirada.getNrTelefone());
            retorno.put("pessoa.nrRg", solicitacaoRetirada.getNrRg());
            // 'gato' pra funcionar o componente de pessoa.
            retorno.put("pessoa.tpPessoa", "J");
            retorno.put("pessoa.idPessoa", "-1");

            String nrPlaca = solicitacaoRetirada.getNrPlaca();
            retorno.put("meioTransporte.nrPlaca", nrPlaca);
            String nrPlacaSemiReboque = solicitacaoRetirada.getNrPlacaSemiReboque();
            retorno.put("semiReboque.nrPlaca", nrPlacaSemiReboque);
        }

        return retorno;
    }


    /**
     * Verifica se a pessoa especificada é Jurídica.
     * Em uma inclusão: Verifica se existe outra pessoa com o mesmo tipo e número de identificação informados.
     *
     * @param map
     * @return
     */
    public List validateIdentificacao(TypedFlatMap map) {
        String tpIdentificacao = map.getString("tpIdentificacao");
        String nrIdentificacao = map.getString("nrIdentificacao");

        List retorno = new ArrayList(1);

        Pessoa pessoa = configuracoesFacade.getPessoa(nrIdentificacao, tpIdentificacao);

        if (pessoa != null) {
            TypedFlatMap row = new TypedFlatMap();
            row.put("idPessoa", pessoa.getIdPessoa());
            row.put("nmPessoa", pessoa.getNmPessoa());
            row.put("tpIdentificacao", pessoa.getTpIdentificacao());
            row.put("nrIdentificacao", pessoa.getNrIdentificacao());
            row.put("pessoa.nrRg", pessoa.getNrRg());
            row.putAll(getDsTelefonePadrao(pessoa.getIdPessoa()));

            retorno.add(row);
        }

        return retorno;
    }

    /**
     * Retorna descrição de telefone de uma pessoa no padrão: +55 (51) 33565050
     *
     * @param id id da Pessoa
     * @return
     */
    private Map getDsTelefonePadrao(Long id) {
        TelefoneEndereco telefoneEndereco = telefoneEnderecoService.findTelefoneEnderecoPadrao(id, null);
        Map telefone = new TypedFlatMap();
        if (telefoneEndereco != null) {
            telefone.put("nrTelefone", telefoneEndereco.getNrTelefone());
            telefone.put("nrDdd", telefoneEndereco.getNrDdd());
        }
        return telefone;
    }

    /**
     * Retorna para a tela a filial do usuário logado.
     *
     * @return
     */
    public TypedFlatMap findFilialUsuarioLogado() {
        TypedFlatMap retorno = new TypedFlatMap();

        Filial f = SessionUtils.getFilialSessao();
        retorno.put("idFilial", f.getIdFilial());
        retorno.put("sgFilial", f.getSgFilial());
        retorno.put("pessoa.nmFantasia", f.getPessoa().getNmFantasia());

        return retorno;
    }

    /**
     * findLookup de filiais.
     *
     * @param criteria
     * @return
     */
    public List findLookupFilial(Map criteria) {
        return filialService.findLookupFilial(criteria);
    }

    /**
     * findLookup de Rota Coleta/entrega.
     *
     * @param criteria
     * @return
     */
    public List findLookupRotaColetaEntrega(Map criteria) {
        return rotaColetaEntregaService.find(criteria);
    }

    public List findLookupManifestoEntrega(TypedFlatMap criteria) {
        return manifestoEntregaService.findLookupCustom(criteria);
    }

    /**
     * findLookup de Meio de transporte.
     *
     * @param criteria
     * @return
     */
    public List findLookupMeioTransporte(TypedFlatMap criteria) {
        String nrIdentificador = criteria.getString("nrPlaca");

        List retorno = new ArrayList(1);
        TypedFlatMap mt = this.findMeioTransporte(nrIdentificador);
        if (mt != null) {
            retorno.add(mt);
        }

        return retorno;
    }

    public TypedFlatMap findMeioTransporte(String nrIdentificador) {
        MeioTransporte meioTransporte = meioTransporteService.findMeioTransporteByIdentificacao(nrIdentificador);
        TypedFlatMap result = new TypedFlatMap();
        if (meioTransporte != null) {
            result.put("nrPlaca", meioTransporte.getNrIdentificador());
        }
        return result;
    }

    public List findLookupPreManifesto(Map criteria) {
        return manifestoService.find(criteria);
    }

    public ResultSetPage findPaginatedPreManifesto(TypedFlatMap criteria) {
        return manifestoEntregaService.findPaginatedPreManifesto(criteria);
    }

    public Integer getRowCountPreManifesto(TypedFlatMap criteria) {
        return manifestoEntregaService.getRowCountPreManifesto(criteria);
    }

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public void setRotaColetaEntregaService(
			RotaColetaEntregaService rotaColetaEntregaService) {
		this.rotaColetaEntregaService = rotaColetaEntregaService;
	}

	public void setManifestoEntregaService(
			ManifestoEntregaService manifestoEntregaService) {
		this.manifestoEntregaService = manifestoEntregaService;
	}

	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}


	public void setTelefoneEnderecoService(
			TelefoneEnderecoService telefoneEnderecoService) {
		this.telefoneEnderecoService = telefoneEnderecoService;
	}


	public void setMeioTransporteService(MeioTransporteService meioTransporteService) {
		this.meioTransporteService = meioTransporteService;
	}


	public void setEmitirManifestoService(
			EmitirManifestoService emitirManifestoService) {
		this.emitirManifestoService = emitirManifestoService;
	}


	public void setEmitirReciboReembolsoService(
			EmitirReciboReembolsoService emitirReciboReembolsoService) {
		this.emitirReciboReembolsoService = emitirReciboReembolsoService;
	}

	public void setVersaoDescritivoPceService(
			VersaoDescritivoPceService versaoDescritivoPceService) {
		this.versaoDescritivoPceService = versaoDescritivoPceService;
	}

	public void setManifestoService(ManifestoService manifestoService) {
		this.manifestoService = manifestoService;
	}

	public void setEmitirReciboFreteService(
			EmitirReciboFreteService emitirReciboFreteService) {
		this.emitirReciboFreteService = emitirReciboFreteService;
	}

	public void setReportExecutionManager(
			ReportExecutionManager reportExecutionManager) {
		this.reportExecutionManager = reportExecutionManager;
	}

}
