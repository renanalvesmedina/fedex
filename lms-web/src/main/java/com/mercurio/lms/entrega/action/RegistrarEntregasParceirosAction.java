package com.mercurio.lms.entrega.action;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.MapUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.joda.time.DateTime;
import org.springframework.transaction.UnexpectedRollbackException;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.session.SessionContext;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.ControleCarga;
import com.mercurio.lms.carregamento.model.Manifesto;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.configuracoes.model.service.ClienteUsuarioService;
import com.mercurio.lms.configuracoes.model.service.PessoaService;
import com.mercurio.lms.contratacaoveiculos.model.MeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.Proprietario;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteService;
import com.mercurio.lms.contratacaoveiculos.model.service.ProprietarioService;
import com.mercurio.lms.entrega.model.ManifestoEntrega;
import com.mercurio.lms.entrega.model.service.ManifestoEntregaDocumentoService;
import com.mercurio.lms.entrega.model.service.ManifestoEntregaService;
import com.mercurio.lms.entrega.model.service.OcorrenciaEntregaService;
import com.mercurio.lms.entrega.model.service.ReciboReembolsoService;
import com.mercurio.lms.entrega.model.service.RegistrarEntregasParceirosService;
import com.mercurio.lms.expedicao.DoctoServicoLookupFacade;
import com.mercurio.lms.expedicao.model.DoctoServico;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.model.service.CtoInternacionalService;
import com.mercurio.lms.expedicao.model.service.DoctoServicoService;
import com.mercurio.lms.expedicao.model.service.NotaFiscalConhecimentoService;
import com.mercurio.lms.municipios.model.Empresa;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.service.ClienteService;
/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.entrega.registrarEntregasParceirosAction"
 */

public class RegistrarEntregasParceirosAction extends CrudAction {
	private Logger log = LogManager.getLogger(this.getClass());
	private CtoInternacionalService ctoInternacionalService;
	private ReciboReembolsoService reciboReembolsoService;
	private ClienteUsuarioService clienteUsuarioService;
	private ClienteService clienteService;
	private MeioTransporteService meioTransporteService;
	private DomainValueService domainValueService;
	private OcorrenciaEntregaService ocorrenciaEntregaService;
	private ConhecimentoService conhecimentoService;
	private FilialService filialService;
	private PessoaService pessoaService;
	private NotaFiscalConhecimentoService notaFiscalConhecimentoService;
	private DoctoServicoLookupFacade doctoServicoLookupFacade;
	private DoctoServicoService doctoServicoService;
	private RegistrarEntregasParceirosService registrarEntregasParceirosService;
	private ManifestoEntregaService manifestoEntregaService;
	private ProprietarioService proprietarioService;
	private ManifestoEntregaDocumentoService manifestoEntregaDocumentoService;

	public List findLookupClienteUsuario(Map criteria) {
		return clienteUsuarioService.findLookup(criteria);
	}

	public List findLookupCliente(Map criteria) {
		String nrIdentificacao = MapUtils.getString(MapUtils.getMap(criteria, "pessoa"), "nrIdentificacao");
		return clienteService.findLookupCliente(nrIdentificacao);
	}

	public List findLookupMeioTransp(Map criteria) {
		List list = meioTransporteService.findLookup(criteria);
		if (list.size() == 1) {
			MeioTransporte bean = (MeioTransporte)list.get(0);
			TypedFlatMap result = new TypedFlatMap();
			result.put("idMeioTransporte",bean.getIdMeioTransporte());
			result.put("nrIdentificador",bean.getNrIdentificador());
			result.put("nrFrota",bean.getNrFrota());
			list.set(0,result);
		}
		return list;
	}

	public List findLookupOcorrenciaEntrega(Map criteria) {
		return ocorrenciaEntregaService.findLookup(criteria);
	}


	public List findLookupFilial(Map criteria){
		return filialService.findLookup(criteria);
	}
	
	public List findLookupManifestoEntrega(TypedFlatMap criteria){
		List manifestos = new ArrayList() ;
		Manifesto manifesto;
		for(Object objeto: manifestoEntregaService.findLookupCustom(criteria)){
			Map mapa = (Map) objeto;
			DomainValue tpmanifestoEntrega = (DomainValue) mapa.get("manifesto.tpManifestoEntrega");
			if("EP".equals(tpmanifestoEntrega.getValue())){
				String identificador = (String) mapa.get("manifesto.controleCarga.proprietario.pessoa.nrIdentificacao");
				DomainValue tipoIdentificador = (DomainValue) mapa.get("manifesto.controleCarga.proprietario.pessoa.tpIdentificacao");
				Pessoa pessoa = new Pessoa();
				pessoa.setTpIdentificacao(tipoIdentificador);
				pessoa.setNrIdentificacao(identificador);
				mapa.put("nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(pessoa));
				manifestos.add(mapa);
			}else{
				throw new BusinessException("LMS-09124");
			}
		}
		
		if(manifestos.size()==0){
			throw new BusinessException("LMS-30017");
		}
		
		return manifestos;
	}
	
	
	public List findLookupProprietario(Map criteria) {
		if (criteria.get("nrIdentificacao") != null) {
			Map mapNrIdentificacao = new HashMap();
			mapNrIdentificacao.put("nrIdentificacao", criteria.get("nrIdentificacao"));
			criteria.put("pessoa", mapNrIdentificacao);
			criteria.remove("nrIdentificacao");
		}		
		
    	List<Proprietario> list = proprietarioService.findLookup(criteria);
    	List listReturn = new ArrayList();
    	for (Proprietario proprietario : list) {
    		Map mapRetorno = new HashMap();
    		mapRetorno.put("idProprietario", proprietario.getIdProprietario());
    		mapRetorno.put("nrIdentificacaoProprietario", FormatUtils.formatIdentificacao(proprietario.getPessoa()));
    		mapRetorno.put("nmProprietario", proprietario.getPessoa().getNmPessoa());
    		listReturn.add(mapRetorno);
		}
    	
    	return listReturn; 
	}

	public TypedFlatMap findDataSession() {
		List clientes = SessionUtils.getClientesUsuarioLogado();
		TypedFlatMap result = new TypedFlatMap();
		if (clientes != null && clientes.size() == 1) {
			Cliente bean = (Cliente)clientes.get(0);

			Pessoa pessoa = pessoaService.findById(bean.getIdCliente());

			result.put("idCliente",bean.getIdCliente());
			result.put("pessoa.nrIdentificacao",FormatUtils.formatIdentificacao(pessoa.getTpIdentificacao(),pessoa.getNrIdentificacao()));
			result.put("pessoa.nmPessoa",pessoa.getNmPessoa());
		}
		Usuario usuario = SessionUtils.getUsuarioLogado();
		result.put("usuario.nmUsuario",usuario.getNmUsuario());
		result.put("usuario.idUsuario",usuario.getIdUsuario());
		result.put("usuario.blIrrestritoCliente", usuario.getBlIrrestritoCliente());
		result.put("doctoServico.filialByIdFilialOrigem.tpOrdemDoc", SessionUtils.getFilialSessao().getTpOrdemDoc().getValue());
		result.put("dhAtual",JTDateTimeUtils.getDataHoraAtual());	
		
		Empresa empresa = SessionUtils.getEmpresaSessao();
		result.put("empresa.nmEmpresa",empresa.getPessoa().getNmPessoa());
		result.put("empresa.nrIdentificacao",empresa.getPessoa().getNrIdentificacao());
		result.put("empresa.nrIdentificacaoFormatado",empresa.getPessoa().getNrIdentificacaoFormatado());
		return result; 
	}

	public TypedFlatMap executeConfirmation(TypedFlatMap parameters) {
		Long idDoctoServico = parameters.getLong("idDoctoServico");
		Long idOcorrenciaEntrega = parameters.getLong("ocorrenciaEntrega.idOcorrenciaEntrega");
		String nmRecebedor = parameters.getString("recebedor");
		String rg = parameters.getString("rg");
		String tpDoctoServico = parameters.getString("doctoServico.tpDocumentoServico");
		Short cdOcorrenciaEntrega = parameters.getShort("ocorrenciaEntrega.cdOcorrenciaEntrega");
		Long idManifestoEntrega = parameters.getLong("manifestoEntrega.idManifestoEntrega");
		DoctoServico bean = doctoServicoService.findById(parameters.getLong("idDoctoServico"));
		ManifestoEntrega manifestoEntrega = manifestoEntregaService.findById(idManifestoEntrega);
		DateTime dhEvento = parameters.getDateTime("dhOcorrencia").withZoneRetainFields(SessionUtils.getFilialSessao().getDateTimeZone());
		Filial bean_filial = filialService.findById(parameters.getLong("doctoServico.filialByIdFilialOrigem.idFilial"));

		String dsDoctoServico = doctoServicoLookupFacade.formatarDocumentoByTipo(bean.getTpDocumentoServico().getValue(),
				bean_filial.getSgFilial(),
				bean.getNrDoctoServico().toString());

		
		String tpFormaBaixa = "N";
		String tpEntregaParcial = parameters.getString("tpEntregaParcial"); 
		
		List doctos = manifestoEntregaDocumentoService.findByIdDoctoServico(idDoctoServico);
		
		Boolean isDocumentoFisico = doctos !=null && doctos.size()>0;
		
		try {
			manifestoEntregaDocumentoService.executeBaixaDocumento(idManifestoEntrega,idDoctoServico,cdOcorrenciaEntrega,
																tpFormaBaixa, tpEntregaParcial,dhEvento,nmRecebedor,manifestoEntrega.getManifesto().getObManifesto(),
																false,false,isDocumentoFisico, rg, null, null, SessionUtils.getFilialSessao(), SessionUtils.getUsuarioLogado());
		} catch (UnexpectedRollbackException e) {
			// LMS-4332 nesses casos deve silenciar a exceção e não exibir a
			// mensagem na tela.
			log.error(e);
	}

		if(SessionContext.containsKey("LMS-09143")){
			TypedFlatMap map = new TypedFlatMap();
			map.put("LMS09143", true);
			SessionContext.remove("LMS-09143");
			return map;
	}
		
		if(cdOcorrenciaEntrega.equals(Short.valueOf("102"))) {
			TypedFlatMap map = new TypedFlatMap();
			map.put("abrirRegistrarPorNotaFiscal", true);
			map.put("idDoctoServico", idDoctoServico);
			map.put("idManifesto", idManifestoEntrega);
			map.put("tpManifesto", "E");
			return map;
		}
	
		return null;
	}
	
	public TypedFlatMap findControleCarga(TypedFlatMap criteria) {
		Long idMeioTransporte = criteria.getLong("idMeioTransporte");
		Long idFilial = criteria.getLong("idFilial");
		if (idFilial == null || idMeioTransporte == null)
			return null;

		ControleCarga bean = getService().findControleCargaByMeioTransporte(idMeioTransporte,idFilial,"TC");
		if (bean != null) {
			TypedFlatMap result = new TypedFlatMap();
			result.put("controleCarga",new StringBuffer(bean.getFilialByIdFilialOrigem().getSgFilial()).append(" ").append(new DecimalFormat("00000000").format(bean.getNrControleCarga().doubleValue())).toString());
			result.put("idControleCarga",bean.getIdControleCarga());
			return result;
		}
		return null;
	}

	public void setMeioTransporteService(MeioTransporteService meioTransporteService) {
		this.meioTransporteService = meioTransporteService;
	}

	public ResultSetPage findPaginated(TypedFlatMap criteria) {
		ResultSetPage resultSetPage = getService().findPaginated(criteria);
		List<Map> results = resultSetPage.getList();

		DomainValue tpIdentificacao;
		for (Map result : results) {
			tpIdentificacao = (DomainValue)result.get("destinatario_pessoa_tpIdentificacao");
			result.put("destinatario_pessoa_nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(tpIdentificacao.getValue(), MapUtils.getString(result, "destinatario_pessoa_nrIdentificacao")));
		}
		return resultSetPage;
	}

	public Integer getRowCount(TypedFlatMap criteria) {
		return getService().getRowCount(criteria);
	}
	 
	// LMS-4599 -- busca os dados para a tela de manter agendamentos de empresas parceiras
	public TypedFlatMap findDadosAgendamentoParceira(TypedFlatMap doctoServico){
		return registrarEntregasParceirosService.findDadosAgendamentoParceira(doctoServico); 
	}
	
	
	///AQUI PRA BAIXO SÓ DOCTOSERVICO
	//LISTA OS VALORES NA COMBO
	public List findTpDoctoServico() {
		List dominiosValidos = new ArrayList();
		dominiosValidos.add("CTR");
		dominiosValidos.add("CRT");
		dominiosValidos.add("RRE");
		dominiosValidos.add("NFT");
		dominiosValidos.add("MDA");
		dominiosValidos.add("NTE");
		dominiosValidos.add("CTE");
		List retorno = domainValueService.findByDomainNameAndValues("DM_TIPO_DOCUMENTO_SERVICO",dominiosValidos);
		return retorno;
	}

	public List findLookupConhecimento(TypedFlatMap criteria) {
		if(criteria.getLong("remetente.idCliente")== null)
			throw new BusinessException("LMS-09111");
		return notaFiscalConhecimentoService.findLookupNotaFiscalCliente(criteria);
	}

	//FINDS LOOKUP NUMBERS
	public List findLookupServiceDocumentNumberRRE(Map criteria) {
		return reciboReembolsoService.findLookup(criteria);
	}
	public List findLookupServiceDocumentNumberCTR(Map criteria) {
		return conhecimentoService.findLookup(criteria);
	}
	public List findLookupServiceDocumentNumberCRT(Map criteria) {
		return ctoInternacionalService.findLookup(criteria);
	}
	public List findLookupServiceDocumentNumberNFT(Map criteria) {
		return conhecimentoService.findLookup(criteria);
	}
	public List findLookupServiceDocumentNumberMDA(Map criteria) {
		return conhecimentoService.findLookup(criteria);
	}
	public List findLookupServiceDocumentNumberNTE(Map criteria) {
		return conhecimentoService.findLookup(criteria);
	}
	public List findLookupServiceDocumentNumberCTE(Map criteria) {
		return conhecimentoService.findLookup(criteria);
	}

	//IOC
	public void setService(RegistrarEntregasParceirosService registrarBaixaEntregasService) {
		this.registrarEntregasParceirosService = registrarBaixaEntregasService;
	}
	private RegistrarEntregasParceirosService getService() {
		return (RegistrarEntregasParceirosService)this.registrarEntregasParceirosService;
	}
	public void setOcorrenciaEntregaService(OcorrenciaEntregaService ocorrenciaEntregaService) {
		this.ocorrenciaEntregaService = ocorrenciaEntregaService;
	}
	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}
	public void setCtoInternacionalService(CtoInternacionalService ctoInternacionalService) {
		this.ctoInternacionalService = ctoInternacionalService;
	}
	public void setReciboReembolsoService(ReciboReembolsoService reciboReembolsoService) {
		this.reciboReembolsoService = reciboReembolsoService;
	}
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}
	public void setClienteUsuarioService(ClienteUsuarioService clienteUsuarioService) {
		this.clienteUsuarioService = clienteUsuarioService;
	}
	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public void setPessoaService(PessoaService pessoaService) {
		this.pessoaService = pessoaService;
	}
	public void setNotaFiscalConhecimentoService(NotaFiscalConhecimentoService notaFiscalConhecimentoService) {
		this.notaFiscalConhecimentoService = notaFiscalConhecimentoService;
	}
	public void setDoctoServicoLookupFacade(DoctoServicoLookupFacade doctoServicoLookupFacade) {
		this.doctoServicoLookupFacade = doctoServicoLookupFacade;
	}
	public void setDoctoServicoService(DoctoServicoService doctoServicoService) {
		this.doctoServicoService = doctoServicoService;
	}
	public void setManifestoEntregaService(ManifestoEntregaService manifestoEntregaService) {
		this.manifestoEntregaService = manifestoEntregaService;
	}
/**
	 * @param manifestoEntregaDocumentoService the manifestoEntregaDocumentoService to set
	 */
	public void setManifestoEntregaDocumentoService(
			ManifestoEntregaDocumentoService manifestoEntregaDocumentoService) {
		this.manifestoEntregaDocumentoService = manifestoEntregaDocumentoService;
	}
	
}
