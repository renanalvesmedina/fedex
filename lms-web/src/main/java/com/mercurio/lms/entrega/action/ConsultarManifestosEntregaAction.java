package com.mercurio.lms.entrega.action;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.util.FilterResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.service.ControleCargaService;
import com.mercurio.lms.carregamento.model.service.EquipeService;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteService;
import com.mercurio.lms.entrega.model.service.ConsultarManifestosEntregaService;
import com.mercurio.lms.entrega.model.service.ManifestoEntregaService;
import com.mercurio.lms.entrega.model.service.ReciboReembolsoService;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.model.service.CtoInternacionalService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.RegiaoColetaEntregaFilService;
import com.mercurio.lms.municipios.model.service.RotaColetaEntregaService;
import com.mercurio.lms.pendencia.model.service.MdaService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir. O valor
 * do <code>id</code> informado abaixo deve ser utilizado para referenciar este
 * serviço.
 * 
 * @spring.bean id="lms.entrega.consultarManifestosEntregaAction"
 */
public class ConsultarManifestosEntregaAction extends CrudAction {
	private ConsultarManifestosEntregaService consultarManifestosEntregaService;
	private FilialService filialService;
	private RotaColetaEntregaService rotaColetaEntregaService;
	private MeioTransporteService meioTransporteService;
	private ControleCargaService controleCargaService;
	private DomainValueService domainValueService;
    private ConhecimentoService conhecimentoService;
    private CtoInternacionalService ctoInternacionalService;
    private MdaService mdaService;
    private ReciboReembolsoService reciboReembolsoService;
	private RegiaoColetaEntregaFilService regiaoColetaEntregaFilService;
    private EquipeService equipeService;
	
	/**
	 * Retorna todos os dados do detalhamento da tela 'Consultar Manifesto'.
	 * 
	 * @param idManifestoEntrega
	 * @return
	 */
	public Map findByIdConsultaManifesto(Long idManifestoEntrega) {
		return consultarManifestosEntregaService.findByIdConsultaManifesto(idManifestoEntrega);
	}	
	
	/**
	 * Consulta manifestoEntregaDocumento para apresentar no detalhamento da aba
	 * 'Documentos da tela 'Consultar Manifesto'.
	 * 
	 * @param idManifestoEntregaDocumento
     * @return
     */
	public Map findByIdManifestoEntregaDocumento(Long idManifestoEntregaDocumento) {
		Map retorno = consultarManifestosEntregaService.findByIdManifestoEntregaDocumento(idManifestoEntregaDocumento);
		DomainValue dvTpIdentificacao = (DomainValue) retorno.get("tpIdentificacaoRemetente");
		String nrIdentificacao = (String) retorno.get("nrIdentificacaoRemetente");
		if (dvTpIdentificacao != null && nrIdentificacao != null) {
			retorno.put("nrIdentificacaoRemetente", FormatUtils.formatIdentificacao(dvTpIdentificacao.getValue(), nrIdentificacao));
	}
		dvTpIdentificacao = (DomainValue) retorno.get("tpIdentificacaoDestinatario");
		nrIdentificacao = (String) retorno.get("nrIdentificacaoDestinatario");
		if (dvTpIdentificacao != null && nrIdentificacao != null) {
			retorno.put("nrIdentificacaoDestinatario", FormatUtils.formatIdentificacao(dvTpIdentificacao.getValue(), nrIdentificacao));
		}
		DomainValue dvTpDocumentoServico = (DomainValue) retorno.get("tpDocumentoServico");
		retorno.put("tpDocumentoServico_value", dvTpDocumentoServico.getValue());
		retorno.put("tpDocumentoServico_description", dvTpDocumentoServico.getDescription().getValue());
		DomainValue dvTpSituacaoDocumento = (DomainValue) retorno.get("tpSituacaoDocumento");
		retorno.put("tpSituacaoDocumento", dvTpSituacaoDocumento.getDescription().getValue());
		return retorno;
	}
    
    /**
	 * find da combo de região.
	 * 
     * @param criteria
     * @return
     */
	public List findComboRegiao(TypedFlatMap criteria) {
		return regiaoColetaEntregaFilService.findListRegiaoVigente(criteria, true);
	}
    
    /**
	 * Retorna para a tela a filial do usuário logado.
	 * 
     * @return
     */
	public TypedFlatMap findFilialUsuarioLogado() {
		TypedFlatMap retorno = new TypedFlatMap();
		Filial f = SessionUtils.getFilialSessao();
		retorno.put("idFilial", f.getIdFilial());
		retorno.put("sgFilial", f.getSgFilial());
		retorno.put("pessoa.nmFantasia", f.getPessoa().getNmFantasia());
		return retorno;
    }
    
    /**
     * findLookup de Controle de Carga.
	 * 
     * @param criteria
     * @return
     */
    public List findLookupControleCarga(Map criteria) {
    	return controleCargaService.findLookup(criteria);
    }
    
    /**
	 * findLookup de Equipes
	 * 
     * @param criteria
     * @return
     */
	public List findLookupEquipe(Map criteria) {
		return equipeService.findLookup(criteria);
    }
    
    /**
	 * findLookup de filiais.
	 * 
     * @param criteria
     * @return
     */
	public List findLookupFilial(Map criteria) {
		return filialService.findLookup(criteria);
	}
    
    /**
	 * findLookup de Meio de transporte.
	 * 
     * @param criteria
	 * @return
     */
	public List findLookupMeioTransporte(Map criteria) {
		return meioTransporteService.findLookup(criteria);
	}
        
	/**
	 * findLookup de Rota Coleta/entrega.
	 * 
	 * @param criteria
	 * @return
	 */
	public List findLookupRotaColetaEntrega(Map criteria) {
		return rotaColetaEntregaService.find(criteria);
    }
    
	public List findLookupServiceDocumentNumberCRT(Map criteria) {
		return ctoInternacionalService.findLookup(criteria);
    }
    
//  findLookup para o terceiro campo da tag documento de serviço
	public List findLookupServiceDocumentNumberCTR(Map criteria) {
		return conhecimentoService.findLookup(criteria);
	}
	public List findLookupServiceDocumentNumberCTE(Map criteria) {
		return conhecimentoService.findLookup(criteria);
	}
	public List findLookupServiceDocumentNumberNTE(Map criteria) {
		return conhecimentoService.findLookup(criteria);
	}
	
	public List findLookupServiceDocumentNumberMDA(Map criteria) {
		return mdaService.findLookup(criteria);
	}
	
	public List findLookupServiceDocumentNumberNFT(Map criteria) {
		return conhecimentoService.findLookup(criteria);
	}

	public List findLookupServiceDocumentNumberRRE(Map criteria) {
		return reciboReembolsoService.findLookup(criteria);
	}
    
    /**
	 * Consulta as informações a serem apresentadas na grid da 'Consulta de
	 * Manifestos'.
	 * 
     * @param criteria
     * @return
     */
    public ResultSetPage findPaginatedConsultaManifesto(TypedFlatMap criteria) {
    	return consultarManifestosEntregaService.findPaginatedConsultaManifesto(criteria);
    }
    
    /**
	 * Consulta as informações a serem apresentadas na grid da 'Consulta de
	 * Manifestos / Documentos'.
	 * 
     * @param criteria
     * @return
     */
    public ResultSetPage findPaginatedDoctosServico(TypedFlatMap criteria) {
    	ResultSetPage rsp = consultarManifestosEntregaService.findPaginatedDoctosServico(criteria);
    	FilterResultSetPage frsp = new FilterResultSetPage(rsp) {
			@Override
			public Map filterItem(Object item) {
				Map row = (Map)item;
				DomainValue dvTpIdentificacao = (DomainValue)row.get("tpIdentificacaoDestinatario");
				String nrIdentificacao = (String)row.get("nrIdentificacaoDestinatario");
				if (dvTpIdentificacao != null && nrIdentificacao != null) {
					row.put("nrIdentificacaoDestinatario", FormatUtils.formatIdentificacao(dvTpIdentificacao.getValue(), nrIdentificacao));
				}
				return row;
			}
    	};
    	return (ResultSetPage)frsp.doFilter();
    }
    
	public ResultSetPage findPaginatedLookup(TypedFlatMap criteria) {
		return getManifestoEntregaService().findPaginatedLookup(criteria);
    }
    
	public List findSituacaoManifesto() {
		List dominiosValidos = new ArrayList();
		dominiosValidos.add("EC");
		dominiosValidos.add("CC");
		dominiosValidos.add("ME");
		dominiosValidos.add("TC");
		dominiosValidos.add("AD");
		dominiosValidos.add("ED");
		dominiosValidos.add("DC");
		dominiosValidos.add("FE");
		dominiosValidos.add("CA");
		List retorno = domainValueService.findByDomainNameAndValues("DM_STATUS_MANIFESTO", dominiosValidos);
		return retorno;
	}

    /**
	 * Método que popula a combo de tipos de documento.
	 * 
	 * @param criteria
	 * @return List
	 */
	public List findTipoDocumentoServico(Map criteria) {
		List dominiosValidos = new ArrayList();
		dominiosValidos.add("CTR");
		dominiosValidos.add("CRT");
		dominiosValidos.add("MDA");
		dominiosValidos.add("CTE");
		dominiosValidos.add("NTE");
		dominiosValidos.add("NFT");
		List retorno = domainValueService.findByDomainNameAndValues("DM_TIPO_DOCUMENTO_SERVICO", dominiosValidos);
		return retorno;
		}
		
	private ManifestoEntregaService getManifestoEntregaService() {
		return (ManifestoEntregaService) this.defaultService;
		}
		
    /**
	 * Consulta quantidade de registros a serem apresentadas na grid da
	 * 'Consulta de Manifestos'.
	 * 
	 * @param criteria
     * @return
     */
	public Integer getRowCountConsultaManifesto(TypedFlatMap criteria) {
		return consultarManifestosEntregaService.getRowCountConsultaManifesto(criteria);
    }
    
    /**
	 * Consulta quantidade de registros a serem apresentadas na grid da
	 * 'Consulta de Manifestos / Documentos'.
	 * 
	 * @param criteria
     * @return
     */
	public Integer getRowCountDoctosServico(TypedFlatMap criteria) {
		return consultarManifestosEntregaService.getRowCountDoctosServico(criteria);
    }    
    
	public Integer getRowCountLookup(TypedFlatMap criteria) {
		return getManifestoEntregaService().getRowCountLookup(criteria);
	}

	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
	}

	public void setConsultarManifestosEntregaService(ConsultarManifestosEntregaService consultarManifestosEntregaService) {
		this.consultarManifestosEntregaService = consultarManifestosEntregaService;
	}

	public void setControleCargaService(ControleCargaService controleCargaService) {
		this.controleCargaService = controleCargaService;
	}

	public void setCtoInternacionalService(CtoInternacionalService ctoInternacionalService) {
		this.ctoInternacionalService = ctoInternacionalService;
	}

	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}

	public void setEquipeService(EquipeService equipeService) {
		this.equipeService = equipeService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public void setMdaService(MdaService mdaService) {
		this.mdaService = mdaService;
	}

	public void setMeioTransporteService(MeioTransporteService meioTransporteService) {
		this.meioTransporteService = meioTransporteService;
	}

	public void setReciboReembolsoService(ReciboReembolsoService reciboReembolsoService) {
		this.reciboReembolsoService = reciboReembolsoService;
	}

	public void setRegiaoColetaEntregaFilService(RegiaoColetaEntregaFilService regiaoColetaEntregaFilService) {
		this.regiaoColetaEntregaFilService = regiaoColetaEntregaFilService;
	}

	public void setRotaColetaEntregaService(RotaColetaEntregaService rotaColetaEntregaService) {
		this.rotaColetaEntregaService = rotaColetaEntregaService;
	}

	public void setService(ManifestoEntregaService serviceService) {
		this.defaultService = serviceService;
	}
}
