package com.mercurio.lms.entrega.action;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.transaction.UnexpectedRollbackException;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.FindDefinition;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.ControleCarga;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.contratacaoveiculos.model.EventoMeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.MeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteService;
import com.mercurio.lms.entrega.model.service.ManifestoEntregaService;
import com.mercurio.lms.entrega.model.service.OcorrenciaEntregaService;
import com.mercurio.lms.entrega.model.service.ReciboReembolsoService;
import com.mercurio.lms.entrega.model.service.RegistrarBaixaEntregasOnTimeService;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.model.service.CtoInternacionalService;
import com.mercurio.lms.expedicao.model.service.DadosComplementoService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.pendencia.model.service.MdaService;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.entrega.registrarBaixaEntregasOnTimeAction"
 */
 
public class RegistrarBaixaEntregasOnTimeAction extends CrudAction {
	private Logger log = LogManager.getLogger(this.getClass());
	private ManifestoEntregaService manifestoEntregaService;
	private ConhecimentoService conhecimentoService;
	private CtoInternacionalService ctoInternacionalService;
	private MdaService mdaService;
	private ReciboReembolsoService reciboReembolsoService;
	private FilialService filialService;
	private MeioTransporteService meioTransporteService;
	private DomainValueService domainValueService;
	private OcorrenciaEntregaService ocorrenciaEntregaService;
	private RegistrarBaixaEntregasOnTimeService registrarBaixaEntregasOnTimeService;
	private DadosComplementoService dadosComplementoService;

	public List findLookupFilial(Map criteria) {
		return filialService.findLookup(criteria);
	}

	public List findLookupMeioTransp(Map criteria) {
		List list = meioTransporteService.findLookup(criteria);
		if (list.size() == 1) {
			MeioTransporte bean = (MeioTransporte)list.get(0);
			TypedFlatMap result = new TypedFlatMap();
			result.put("idMeioTransporte",bean.getIdMeioTransporte());
			result.put("nrIdentificador",bean.getNrIdentificador());
			result.put("nrFrota",bean.getNrFrota());
			list.set(0,result);
		}
		return list;
	}

	public List findLookupManifestoEntrega(Map criteria) {
		return manifestoEntregaService.findLookup(criteria);
	}

	public List findLookupOcorrenciaEntrega(Map criteria) {
		return ocorrenciaEntregaService.findLookup(criteria);
	}


	public void createEventoManifesto(TypedFlatMap parameters) {
		getRegistrarBaixaEntregasOnTimeService().executeInsersaoEvento(parameters.getString("sgFilial"),parameters.getString("nrManifesto"));
	}

	public TypedFlatMap findDataSession() {
		Filial bean = SessionUtils.getFilialSessao();
		TypedFlatMap result = new TypedFlatMap();
		result.put("filial.idFilial",bean.getIdFilial());
		result.put("filial.sgFilial",bean.getSgFilial());
		result.put("filial.pessoa.nmFantasia",bean.getPessoa().getNmFantasia());
		Usuario usuario = SessionUtils.getUsuarioLogado();
		result.put("usuario.nmUsuario",usuario.getNmUsuario());
		result.put("dhAtual",JTDateTimeUtils.getDataHoraAtual());
		result.put("filial.tpOrdemDoc", SessionUtils.getFilialSessao().getTpOrdemDoc().getValue());
		return result;
	}

	public TypedFlatMap executeConfirmation(TypedFlatMap parameters) {
		
		Long idDoctoServico = parameters.getLong("idDoctoServico");
		Short cdOcorrenciaEntrega = parameters.getShort("ocorrenciaEntrega.cdOcorrenciaEntrega");
		String nmRecebedor = parameters.getString("recebedor");
		String obManifesto = parameters.getString("obManifesto");
		String complementoBaixaSPP = parameters.getString("complementoBaixaSPP");
		Boolean isValidDestinatario = parameters.getBoolean("isValidD");
		Boolean isValidRemetente = parameters.getBoolean("isValidR");
		String tpEntregaParcial = parameters.getString("tpEntregaParcial");
                String rg = parameters.getString("rg");
		
		try{
			return getRegistrarBaixaEntregasOnTimeService().executeConfirmation(idDoctoServico,cdOcorrenciaEntrega,nmRecebedor,obManifesto,
				isValidRemetente,isValidDestinatario,new DomainValue(complementoBaixaSPP), new DomainValue(tpEntregaParcial), rg);
		} catch (UnexpectedRollbackException e) {
			//LMS-4332 nesses casos deve silenciar a exceção e não exibir a mensagem na tela.
			log.error(e);
			return null;
	}
	}

	public TypedFlatMap findControleCarga(TypedFlatMap criteria) {
		Long idMeioTransporte = criteria.getLong("idMeioTransporte");
		Long idFilial = criteria.getLong("idFilial");
		if (idFilial == null || idMeioTransporte == null)
			return null;
		ControleCarga bean = getRegistrarBaixaEntregasOnTimeService().findControleCargaByMeioTransporte(idMeioTransporte,idFilial,"TC");
		
		TypedFlatMap result = new TypedFlatMap();
		if(bean != null){
			EventoMeioTransporte evento = getRegistrarBaixaEntregasOnTimeService().findLastEvetoMeioTransporteByIdMeioTranspote(idMeioTransporte,idFilial,bean.getIdControleCarga());
			
			if (evento != null)
				result.put("tpSituacaoMeioTransporte",evento.getTpSituacaoMeioTransporte().getValue());
			if (bean != null) {
				result.put("controleCarga.nrControle",new DecimalFormat("00000000").format(bean.getNrControleCarga().doubleValue()));
				result.put("controleCarga.sgFilial",bean.getFilialByIdFilialOrigem().getSgFilial());
				result.put("idControleCarga",bean.getIdControleCarga());
			}
		}
		return result;
	}

	public ResultSetPage findPaginated(TypedFlatMap criteria) {
		return getRegistrarBaixaEntregasOnTimeService().findPaginated(criteria);
	}

	public Integer getRowCount(TypedFlatMap criteria) {
		return getRegistrarBaixaEntregasOnTimeService().getRowCount(criteria);
	}

	public ResultSetPage findPaginatedConfirmation(TypedFlatMap criteria) {
		criteria.put("isBaixaOntime", Boolean.TRUE);
		return getRegistrarBaixaEntregasOnTimeService().findPaginatedConfirmation(criteria, FindDefinition.createFindDefinition(criteria));
	}

	public Integer getRowCountConfirmation(TypedFlatMap criteria) {
		criteria.put("isBaixaOntime", Boolean.TRUE);
		return getRegistrarBaixaEntregasOnTimeService().getRowCountConfirmation(criteria);
	}

	///AQUI PRA BAIXO SÓ DOCTOSERVICO
	//LISTA OS VALORES NA COMBO
	public List findTpDoctoServico() {
		List dominiosValidos = new ArrayList();
		dominiosValidos.add("CTR");
		dominiosValidos.add("NFT");
		dominiosValidos.add("CRT");
		dominiosValidos.add("MDA");
		dominiosValidos.add("RRE");
		dominiosValidos.add("NTE");
		dominiosValidos.add("CTE");
		List retorno = domainValueService.findByDomainNameAndValues("DM_TIPO_DOCUMENTO_SERVICO", dominiosValidos);
		return retorno;
	}

	//FINDS LOOKUP NUMBERS
	public List findLookupServiceDocumentNumberCTR(Map criteria) {
		return conhecimentoService.findLookup(criteria);
	}
	public List findLookupServiceDocumentNumberNFT(Map criteria) {
		return conhecimentoService.findLookup(criteria);
	}
	public List findLookupServiceDocumentNumberCRT(Map criteria) {
		return ctoInternacionalService.findLookup(criteria);
	}
	public List findLookupServiceDocumentNumberMDA(Map criteria) {
		return mdaService.findLookup(criteria);
	}
	public List findLookupServiceDocumentNumberRRE(Map criteria) {
		return reciboReembolsoService.findLookup(criteria);
	}
	public List findLookupServiceDocumentNumberNTE(Map criteria) {
		return conhecimentoService.findLookup(criteria);
	}
	public List findLookupServiceDocumentNumberCTE(Map criteria) {
		return conhecimentoService.findLookup(criteria);
	}

	//IOC
	public void setRegistrarBaixaEntregasOnTimeService(RegistrarBaixaEntregasOnTimeService registrarBaixaEntregasOnTimeService) {
		this.registrarBaixaEntregasOnTimeService = registrarBaixaEntregasOnTimeService;
	}
	private RegistrarBaixaEntregasOnTimeService getRegistrarBaixaEntregasOnTimeService() {
		return registrarBaixaEntregasOnTimeService;
	}
	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}
	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
	}
	public void setCtoInternacionalService(CtoInternacionalService ctoInternacionalService) {
		this.ctoInternacionalService = ctoInternacionalService;
	}
	public void setMdaService(MdaService mdaService) {
		this.mdaService = mdaService;
	}
	public void setReciboReembolsoService(ReciboReembolsoService reciboReembolsoService) {
		this.reciboReembolsoService = reciboReembolsoService;
	}
	public void setOcorrenciaEntregaService(OcorrenciaEntregaService ocorrenciaEntregaService) {
		this.ocorrenciaEntregaService = ocorrenciaEntregaService;
	} 
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public void setMeioTransporteService(MeioTransporteService meioTransporteService) {
		this.meioTransporteService = meioTransporteService;
	}

	public DadosComplementoService getDadosComplementoService() {
		return dadosComplementoService;
}

	public void setDadosComplementoService(
			DadosComplementoService dadosComplementoService) {
		this.dadosComplementoService = dadosComplementoService;
	}


}
