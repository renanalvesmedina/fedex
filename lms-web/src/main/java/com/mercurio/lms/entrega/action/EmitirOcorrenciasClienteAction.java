package com.mercurio.lms.entrega.action;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import com.mercurio.adsm.framework.report.ReportActionSupport;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.entrega.report.EmitirOcorrenciasClienteService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.HistoricoFilial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.service.ClienteService;

/**
 * @author Jose Rodrigo Moraes
 * @since 22/05/2006
 * 
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.entrega.emitirOcorrenciasClienteAction"
 */

public class EmitirOcorrenciasClienteAction extends ReportActionSupport {
	
	private FilialService filialService;
	private ClienteService clienteService;
	private EmitirOcorrenciasClienteService emitirOcorrenciasClienteService;
	
	/**
	 * Busca as filial de acordo com a sigla informada
	 * @param tfm <code>sgFilial</code> sigla da filial
	 * @return Lista de filiais
	 */ 
	public List findLookupFilial(TypedFlatMap tfm){
		return filialService.findLookupBySgFilial(tfm.getString("sgFilial"), tfm.getString("tpAcesso")); 
	}
	
	/**
	 * Busca os cliente de acordo com o número de identificação informado
	 * @param tfm cliente.pessoa.nrIdentificacao Número de identificação do cliente
	 * @return Lista de clientes
	 */
	public List findLookupCliente(TypedFlatMap tfm){
		
		List clientes = clienteService.findLookupSimplificado(tfm.getString("pessoa.nrIdentificacao"),null);
		
		List retorno = new ArrayList();
		
		for (Iterator iter = clientes.iterator(); iter.hasNext();) {
			
			Cliente element = (Cliente) iter.next();
			
			TypedFlatMap map = new TypedFlatMap();
			map.put("pessoa.nrIdentificacao",element.getPessoa().getNrIdentificacao());
			map.put("idCliente",element.getIdCliente());
			map.put("pessoa.nmPessoa",element.getPessoa().getNmPessoa());
			map.put("pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(element.getPessoa().getTpIdentificacao(),
																					   element.getPessoa().getNrIdentificacao()));
			
			retorno.add(map);
			
		}
		
		return retorno;
		
	}
	
	/**
	 * Busca a filial do usuário logado
	 * @param tfm Neste caso sem nenhum critério
	 * @return Filial do usuário logado
	 */
	public TypedFlatMap findFilialUsuario(TypedFlatMap tfm){
		
		TypedFlatMap map = new TypedFlatMap();
		
		Filial filial = SessionUtils.getFilialSessao();
		
		map.put("filialDestino.filial.idFilial",filial.getIdFilial());
		map.put("filialDestino.filial.sgFilial",filial.getSgFilial());
		map.put("filialDestino.filial.pessoa.nmFantasia",filial.getPessoa().getNmFantasia());
		
		HistoricoFilial historicoFilial = SessionUtils.getUltimoHistoricoFilialSessao();
		map.put("tpFilialSessao",historicoFilial.getTpFilial().getValue());
		
		return map;
	}
	
	public EmitirOcorrenciasClienteService getEmitirOcorrenciasClienteService() {
		return emitirOcorrenciasClienteService;
	}

	public void setEmitirOcorrenciasClienteService(EmitirOcorrenciasClienteService emitirOcorrenciasClienteService) {
		this.reportServiceSupport = emitirOcorrenciasClienteService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}



	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}

}
