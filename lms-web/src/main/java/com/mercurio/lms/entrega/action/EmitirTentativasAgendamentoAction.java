package com.mercurio.lms.entrega.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.report.ReportActionSupport;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.entrega.model.service.ReciboReembolsoService;
import com.mercurio.lms.entrega.report.EmitirTentativasAgendamentoService;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.model.service.CtoInternacionalService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.pendencia.model.service.MdaService;
import com.mercurio.lms.util.AliasToNestedMapResultTransformer;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.service.ClienteService;
 
/**
 * @author José Rodrigo Moraes
 * @since  26/05/2006
 * 
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.entrega.emitirTentativasAgendamentoAction"
 */

public class EmitirTentativasAgendamentoAction extends ReportActionSupport {
	
	private EmitirTentativasAgendamentoService emitirTentregasNaoRealizadasService;
	private FilialService filialService;
	private ClienteService clienteService;
	private DomainValueService domainValueService;
	private ConhecimentoService conhecimentoService;
	private CtoInternacionalService ctoInternacionalService;
	private MdaService mdaService;	
	private ReciboReembolsoService reciboReembolsoService;
	
	/**
	 * Busca as filial de acordo com a sigla informada
	 * @param tfm <code>sgFilial</code> sigla da filial
	 * @return Lista de filiais
	 */ 
	public List findLookupFilial(TypedFlatMap tfm){
		return filialService.findLookupBySgFilial(tfm.getString("sgFilial"), tfm.getString("tpAcesso"));
	}
	
	/**
	 * Busca os cliente de acordo com o número de identificação informado
	 * @param tfm cliente.pessoa.nrIdentificacao Número de identificação do cliente
	 * @return Lista de clientes
	 */
	public List findLookupCliente(TypedFlatMap tfm){
		
		List clientes = clienteService.findLookupSimplificado(tfm.getString("pessoa.nrIdentificacao"),null);
		
		List retorno = new ArrayList();
		
		for (Iterator iter = clientes.iterator(); iter.hasNext();) {
			
			Cliente element = (Cliente) iter.next();
			
			TypedFlatMap map = new TypedFlatMap();
			map.put("pessoa.nrIdentificacao",element.getPessoa().getNrIdentificacao());
			map.put("idCliente",element.getIdCliente());
			map.put("pessoa.nmPessoa",element.getPessoa().getNmPessoa());
			map.put("pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(element.getPessoa().getTpIdentificacao(),
																					   element.getPessoa().getNrIdentificacao()));
			
			retorno.add(map);
			
		}
		
		return retorno;
		
	}
	
	/**
	 * Busca a filial do usuário logado
	 * @param tfm Neste caso sem nenhum critério
	 * @return Filial do usuário logado
	 */
	public TypedFlatMap findFilialUsuario(TypedFlatMap tfm){
		
		TypedFlatMap map = new TypedFlatMap();
		
		Filial filial = SessionUtils.getFilialSessao();
		
		map.put("filialAgendamento.idFilial",filial.getIdFilial());
		map.put("filialAgendamento.sgFilial",filial.getSgFilial());
		map.put("filialAgendamento.pessoa.nmFantasia",filial.getPessoa().getNmFantasia());
		
		return map;
	}
	
	/**
	 * Verifica se o usuário tem permissão de acesso a alguma das filiais passadas por parâmetro
	 * @param idFilialOrigem Identificador da filial de origem
	 * @param idFilialDestino Identificador da filial de destino
	 * @param idFilialAgendamento Identificador da filial de agendamento
	 * @return Boolean.TRUE se tem permissão e Boolean.FALSE caso contrário
	 */
	public Serializable findPermissaoUsuario(TypedFlatMap tfm){
		
		Long idFilialOrigem = tfm.getLong("idFilialOrigem");
		Long idFilialDestino = tfm.getLong("idFilialDestino");
		Long idFilialAgendamento = tfm.getLong("idFilialAgendamento");
		
		Boolean retorno = Boolean.TRUE;
		
		if( idFilialOrigem != null || idFilialDestino != null || idFilialAgendamento != null ){	
		
			retorno = (Boolean)((EmitirTentativasAgendamentoService)this.getReportServiceSupport()).findPermissaoUsuario(idFilialOrigem,
																											        	 idFilialDestino,
																											        	 idFilialAgendamento);
		}
		
		return retorno;
	}
	
	/**
	 * Busca os tipos de documento de serviço para a combo de tipos de 
	 * documento de serviço (integrante da "estrutura" de documento de serviço
	 * @param criteria Critérios de pesquisa
	 * @return Lista de tipos de documento de serviço
	 */
	public List findTipoDocumentoServico(Map criteria) {
		List dominiosValidos = new ArrayList();
		dominiosValidos.add("CTR");
		dominiosValidos.add("CRT");
		dominiosValidos.add("MDA");
		dominiosValidos.add("NFT");
		dominiosValidos.add("RRE");
		dominiosValidos.add("NTE");
		dominiosValidos.add("CTE");
		List retorno = domainValueService.findByDomainNameAndValues("DM_TIPO_DOCUMENTO_SERVICO",dominiosValidos);
		return retorno;
	}
	
	/**
	 * Busca das filiais para a Lookup de filial dentro da "estrutura" documento de serviço 
	 * Para documentos CTR
	 * @param criteria sgFilial Sigla da Filial
	 * @return Lista de filiais de acordo com o critério passado
	 */
	public List findLookupServiceDocumentFilialCTR(Map criteria) {
	   	return findLookupFilialByDocumentoServico(criteria);
	}
	
	/**
	 * Busca das filiais para a Lookup de filial dentro da "estrutura" documento de serviço 
	 * Para documentos CRT
	 * @param criteria sgFilial Sigla da Filial
	 * @return Lista de filiais de acordo com o critério passado
	 */
	public List findLookupServiceDocumentFilialCRT(Map criteria) {
	   	return findLookupFilialByDocumentoServico(criteria);
	}
	
	/**
	 * Busca das filiais para a Lookup de filial dentro da "estrutura" documento de serviço 
	 * Para documentos MDA
	 * @param criteria sgFilial Sigla da Filial
	 * @return Lista de filiais de acordo com o critério passado
	 */
	public List findLookupServiceDocumentFilialMDA(Map criteria) {
	   	return findLookupFilialByDocumentoServico(criteria);
	}
	
	/**
	 * Busca das filiais para a Lookup de filial dentro da "estrutura" documento de serviço 
	 * Para documentos RRE
	 * @param criteria sgFilial Sigla da Filial
	 * @return Lista de filiais de acordo com o critério passado
	 */
	public List findLookupServiceDocumentFilialRRE(Map criteria){
		return findLookupFilialByDocumentoServico(criteria);
	}
		
	public List findLookupServiceDocumentFilialNTE(Map criteria){
		return findLookupFilialByDocumentoServico(criteria);
	}

	public List findLookupServiceDocumentFilialCTE(Map criteria){
		return findLookupFilialByDocumentoServico(criteria);
	}

	public List findLookupServiceDocumentFilialNFT(Map criteria){
		return findLookupFilialByDocumentoServico(criteria);
	}

	/**
	 * Método de pesquisa das filiais
	 * @param criteria Critérios dos documentos de serviço
	 * @return Lista de filiais
	 */
	public List findLookupFilialByDocumentoServico(Map criteria) {
	    List list = filialService.findLookup(criteria);
	    List retorno = new ArrayList();
	    for (Iterator iter = list.iterator(); iter.hasNext();) {
	    	Filial filial = (Filial)iter.next();
	    	TypedFlatMap typedFlatMap = new TypedFlatMap();
	    	typedFlatMap.put("idFilial", filial.getIdFilial());
	    	typedFlatMap.put("sgFilial", filial.getSgFilial());
	    	typedFlatMap.put("pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
	    	retorno.add(typedFlatMap);
	    }
	    return retorno;
	}
	 
	/**
	 * Busca dos documentos de serviço para a Lookup de documento de serviço dentro da "estrutura" documento de serviço 
	 * Para documentos CTR
	 * @param criteria nrDoctoServico Número do documento de serviço
	 * @return Lista de documentos de serviço
	 */
	public List findLookupServiceDocumentNumberCTR(Map criteria) {
	    return conhecimentoService.findLookup(criteria);
	}

	/**
	 * Busca dos documentos de serviço para a Lookup de documento de serviço dentro da "estrutura" documento de serviço 
	 * Para documentos CRT
	 * @param criteria nrDoctoServico Número do documento de serviço
	 * @return Lista de documentos de serviço
	 */
	public List findLookupServiceDocumentNumberCRT(Map criteria) {
	   	return ctoInternacionalService.findLookup(criteria);
	}

	/**
	 * Busca dos documentos de serviço para a Lookup de documento de serviço dentro da "estrutura" documento de serviço 
	 * Para documentos MDA
	 * @param criteria nrDoctoServico Número do documento de serviço
	 * @return Lista de documentos de serviço
	 */
	public List findLookupServiceDocumentNumberMDA(Map criteria) {
		return mdaService.findLookup(criteria);
	}
	
	/**
	 * Busca dos documentos de serviço para a Lookup de documento de serviço dentro da "estrutura" documento de serviço 
	 * Para documentos RRE
	 * @param criteria nrDoctoServico Número do documento de serviço
	 * @return Lista de documentos de serviço
	 */
	public List findLookupServiceDocumentNumberRRE(TypedFlatMap criteria){
		 List listaRecibo = reciboReembolsoService.findLookupCustom(criteria);
		 List listaNova = AliasToNestedMapResultTransformer.getInstance().transformListResult(listaRecibo);
		 return listaNova;
		 
	}
	 
	public List findLookupServiceDocumentNumberNTE(Map criteria) {
	    return conhecimentoService.findLookup(criteria);
	}

	public List findLookupServiceDocumentNumberCTE(Map criteria) {
		return conhecimentoService.findLookup(criteria);
	}

	public List findLookupServiceDocumentNumberNFT(Map criteria) {
		return conhecimentoService.findLookup(criteria);
	}

	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public EmitirTentativasAgendamentoService getEmitirTentativasAgendamentoService() {
		return emitirTentregasNaoRealizadasService;
	}

	public void setEmitirTentativasAgendamentoService(EmitirTentativasAgendamentoService emitirTentativasAgendamentoService) {
		this.reportServiceSupport = emitirTentativasAgendamentoService;
	}

	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}
	
	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
	}

	public void setCtoInternacionalService(CtoInternacionalService ctoInternacionalService) {
		this.ctoInternacionalService = ctoInternacionalService;
	}

	public void setMdaService(MdaService mdaService) {
		this.mdaService = mdaService;
	}

	public void setReciboReembolsoService(ReciboReembolsoService reciboReembolsoService) {
		this.reciboReembolsoService = reciboReembolsoService;
	}

}
