package com.mercurio.lms.entrega.action;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.joda.time.DateTime;
import org.springframework.transaction.UnexpectedRollbackException;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.FindDefinition;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.session.SessionContext;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.ControleCarga;
import com.mercurio.lms.carregamento.model.Manifesto;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.contratacaoveiculos.model.MeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteService;
import com.mercurio.lms.entrega.ConstantesEntrega;
import com.mercurio.lms.entrega.model.ManifestoEntrega;
import com.mercurio.lms.entrega.model.ManifestoEntregaDocumento;
import com.mercurio.lms.entrega.model.service.ManifestoEntregaService;
import com.mercurio.lms.entrega.model.service.ManifestoEntregaVolumeService;
import com.mercurio.lms.entrega.model.service.OcorrenciaEntregaService;
import com.mercurio.lms.entrega.model.service.ReciboReembolsoService;
import com.mercurio.lms.entrega.model.service.RegistrarBaixaEntregasOnTimeService;
import com.mercurio.lms.entrega.model.service.RegistrarBaixaEntregasService;
import com.mercurio.lms.expedicao.model.ManifestoViagemNacional;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.model.service.CtoInternacionalService;
import com.mercurio.lms.expedicao.model.service.ManifestoViagemNacionalService;
import com.mercurio.lms.expedicao.model.service.VolumeNotaFiscalService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.pendencia.model.service.MdaService;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;
/**
 * Generated by: ADSM ActionGenerator
 *
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.entrega.registrarBaixaEntregasAction"
 */

public class RegistrarBaixaEntregasAction extends CrudAction {
	private Logger log = LogManager.getLogger(this.getClass());
	private ManifestoEntregaService manifestoEntregaService;
	private ConhecimentoService conhecimentoService;
	private CtoInternacionalService ctoInternacionalService;
	private MdaService mdaService;
	private ReciboReembolsoService reciboReembolsoService;
	private FilialService filialService;
	private MeioTransporteService meioTransporteService;
	private DomainValueService domainValueService;
	private OcorrenciaEntregaService ocorrenciaEntregaService;
	private RegistrarBaixaEntregasOnTimeService registrarBaixaEntregasOnTimeService;
	private ManifestoViagemNacionalService manifestoViagemNacionalService;
	private RegistrarBaixaEntregasService registrarBaixaEntregasService;
	private ManifestoEntregaVolumeService manifestoEntregaVolumeService;
	private VolumeNotaFiscalService volumeNotaFiscalService;
	
	public List findLookupFilial(Map criteria) {
		return filialService.findLookupFilial(criteria);
	}

	public List findLookupMeioTransp(Map criteria) {
		List list = meioTransporteService.findLookup(criteria);
		if (list.size() == 1) {
			MeioTransporte bean = (MeioTransporte)list.get(0);
			TypedFlatMap result = new TypedFlatMap();
			result.put("idMeioTransporte",bean.getIdMeioTransporte());
			result.put("nrIdentificador",bean.getNrIdentificador());
			result.put("nrFrota",bean.getNrFrota());
			list.set(0,result);
		}
		return list;
	}

	public List findLookupManifestoEntrega(Map criteria) {
		return manifestoEntregaService.findLookup(criteria);
	}

	public List findLookupOcorrenciaEntrega(Map criteria) {
		return ocorrenciaEntregaService.findLookup(criteria);
	}

	public void createEventoManifesto(TypedFlatMap parameters) {
		getRegistrarBaixaEntregasService().executeInsersaoEvento(parameters.getString("sgFilial"),parameters.getString("nrManifesto"));
	}

	public void storeOcorrenciaOnManifestoEntregaVolume(TypedFlatMap criteria){
		String idsToSplit = criteria.getString("idsManifestoEntregaDocumento");
		Long idOcorrenciaEntrega = Long.parseLong(criteria.getString("ocorrenciaEntrega.idOcorrenciaEntrega"));
		String[] idsManifestoEntregaDocumentoStr = idsToSplit.split(",");
		Long[] idsManifestoEntregaDocumento = new Long[idsManifestoEntregaDocumentoStr.length];
		for (int i = 0; i < idsManifestoEntregaDocumentoStr.length; i++) {
			idsManifestoEntregaDocumento[i] = Long.parseLong(idsManifestoEntregaDocumentoStr[i]);
		}
    			
		Boolean validaListManifesto = registrarBaixaEntregasService.executeValidateListManifestoEntregaVolume(idsManifestoEntregaDocumento, idOcorrenciaEntrega);
		
    	
		if(validaListManifesto){
			this.executeConfirmation(criteria);
		}else{
					
		Short cdOcorrenciaEntrega = criteria.getShort("ocorrenciaEntrega.cdOcorrenciaEntrega");
		Boolean isDocumentoFisico = criteria.getBoolean("isDocFisico");
		DateTime dhOcorrencia = criteria.getDateTime("dhOcorrencia");
		Boolean isValidDestinatario = criteria.getBoolean("isValidD");
		Boolean isValidRemetente = criteria.getBoolean("isValidR");
		String tpFormaBaixa = "N";
    	
    	registrarBaixaEntregasService.storeOcorrenciaOnListManifestoEntregaVolume(
    			idsManifestoEntregaDocumento, 
    			cdOcorrenciaEntrega,
    			tpFormaBaixa,
    			dhOcorrencia,
    			isValidDestinatario,
    			isValidRemetente
    			);
 	}
 	}
	
    /**
     * 
     * @param criteria
     * @return
     */
    public ResultSetPage<Map<String, Object>> findPaginatedVolumes(TypedFlatMap criteria) {
    	Long idDoctoServico = criteria.getLong("idDoctoServico");
    	Long idManifestoEntrega = criteria.getLong("idManifestoEntrega");
    	return getVolumeNotaFiscalService().findPaginatedVolumesByDoctoServicoAndManifestoEntrega(idDoctoServico, idManifestoEntrega, FindDefinition.createFindDefinition(criteria));
    }

    /**
     * 
     * @param criteria
     * @return
     */
    public Integer getRowCountVolumes(TypedFlatMap criteria) {
    	Long idDoctoServico = criteria.getLong("idDoctoServico");
    	Long idManifestoEntrega = criteria.getLong("idManifestoEntrega");
    	return getVolumeNotaFiscalService().getRowCountVolumesByDoctoServicoAndManifestoEntrega(idDoctoServico, idManifestoEntrega);
    }
	

	public TypedFlatMap findDataSession() {
		Filial bean = SessionUtils.getFilialSessao();
		TypedFlatMap result = new TypedFlatMap();
		result.put("filial.idFilial",bean.getIdFilial());
		result.put("filial.sgFilial",bean.getSgFilial());
		result.put("filial.pessoa.nmFantasia",bean.getPessoa().getNmFantasia());
		Usuario usuario = SessionUtils.getUsuarioLogado();
		result.put("usuario.nmUsuario",usuario.getNmUsuario());
		result.put("filialByIdFilialOrigem.tpOrdemDoc", SessionUtils.getFilialSessao().getTpOrdemDoc().getValue());
		result.put("dhAtual",JTDateTimeUtils.getDataHoraAtual());
		return result;
	}

	public TypedFlatMap executeConfirmation(TypedFlatMap parameters) {
		String tpManifesto = parameters.getString("tpManifesto");
		Long idManifesto = null;
		if (tpManifesto.equals(ConstantesEntrega.TP_MANIFESTO_ENTREGA)) {
			idManifesto = parameters.getLong("manifestoEntrega.idManifestoEntrega");
		} 
		else if (tpManifesto.equals(ConstantesEntrega.TP_MANIFESTO_VIAGEM)) {
			idManifesto = parameters.getLong("manifestoViagem.idManifestoViagem");
		}
		
		Long idDoctoServico = parameters.getLong("idDoctoServico");
		Short cdOcorrenciaEntrega = parameters.getShort("ocorrenciaEntrega.cdOcorrenciaEntrega");
		String nmRecebedor = parameters.getString("recebedor");
		String rg = parameters.getString("rg");
		String obManifesto = parameters.getString("obManifesto");
		Boolean isValidDestinatario = parameters.getBoolean("isValidD");
		Boolean isValidRemetente = parameters.getBoolean("isValidR");
		DateTime dhOcorrencia = parameters.getDateTime("dhOcorrencia");
		String complementoBaixaSPP = parameters.getString("complementoBaixaSPP");
		Boolean isDocumentoFisico = parameters.getBoolean("isDocFisico");
		String tpEntregaParcial = parameters.getString("tpEntregaParcial");
		
		try{
		getRegistrarBaixaEntregasService().executeConfirmation(
				idManifesto,
				idDoctoServico,
				cdOcorrenciaEntrega,
				nmRecebedor,
				obManifesto,
				isValidRemetente,
				isValidDestinatario,
				dhOcorrencia,
				new DomainValue(complementoBaixaSPP),
					isDocumentoFisico,
					tpEntregaParcial, rg);
			
			
			if(SessionContext.containsKey("LMS-09143")){
				TypedFlatMap map = new TypedFlatMap();
				map.put("LMS09143", true);
				SessionContext.remove("LMS-09143");
				return map;
			}
			
			if(cdOcorrenciaEntrega.equals(Short.valueOf("102"))) {
				TypedFlatMap map = new TypedFlatMap();
				map.put("abrirRegistrarPorNotaFiscal", true);
				map.put("idDoctoServico", idDoctoServico);
				map.put("idManifesto", idManifesto);
				map.put("tpManifesto", tpManifesto);
				return map;
			}
			
			return null;
		} catch (UnexpectedRollbackException e) {
			//LMS-4332 nesses casos deve silenciar a exceção e não exibir a mensagem na tela.
			log.error(e);
	}
		return null;
	}

	public TypedFlatMap findControleCarga(TypedFlatMap criteria) {
		Long id = criteria.getLong("id");
		Boolean isDoctoServico = criteria.getBoolean("isDocto");
		if (id == null || isDoctoServico == null)
			return null;

		ControleCarga controleCarga = null;

		if (isDoctoServico.booleanValue()) {
			List rs = getRegistrarBaixaEntregasService().findControleCargaByDoctoServico(id);
			if (rs.isEmpty())
				throw new BusinessException("LMS-09092");
			controleCarga = ((ManifestoEntregaDocumento)rs.get(0)).getManifestoEntrega().getManifesto().getControleCarga();
		} else {
			List rs = getRegistrarBaixaEntregasService().findControleCargaByManifestoEntrega(id);
			if (!rs.isEmpty())
				controleCarga = ((ManifestoEntrega)rs.get(0)).getManifesto().getControleCarga();
		}
		if (controleCarga != null) {
			TypedFlatMap result = new TypedFlatMap();
			result.put("controleCarga.idControleCarga",controleCarga.getIdControleCarga());
			result.put("controleCarga.nrControleCarga",controleCarga.getNrControleCarga());
			result.put("controleCarga.filialByIdFilialOrigem.idFilial",controleCarga.getFilialByIdFilialOrigem().getIdFilial());
			result.put("controleCarga.filialByIdFilialOrigem.idFilial",controleCarga.getFilialByIdFilialOrigem().getSgFilial());
			return result;
		}
		return null;
	}

	public ResultSetPage findPaginated(TypedFlatMap criteria) {
		return getRegistrarBaixaEntregasService().findPaginated(criteria);
	}

	public Integer getRowCount(TypedFlatMap criteria) {
		return getRegistrarBaixaEntregasService().getRowCount(criteria);
	}

	public ResultSetPage findPaginatedConfirmation(TypedFlatMap criteria) {
		criteria.put("idControleCarga", criteria.get("controleCarga.idControleCarga"));
		criteria.put("isBaixaOntime", Boolean.FALSE);
		return registrarBaixaEntregasOnTimeService.findPaginatedConfirmation(criteria, FindDefinition.createFindDefinition(criteria)); 
	}

	public Integer getRowCountConfirmation(TypedFlatMap criteria) {
		criteria.put("idControleCarga", criteria.get("controleCarga.idControleCarga"));
		criteria.put("isBaixaOntime", Boolean.FALSE);
		return registrarBaixaEntregasOnTimeService.getRowCountConfirmation(criteria);
	}

	///AQUI PRA BAIXO SÓ DOCTOSERVICO
	//LISTA OS VALORES NA COMBO
	public List findTpDoctoServico() {
		List dominiosValidos = new ArrayList();
		dominiosValidos.add("CTR");
		dominiosValidos.add("NFT");
		dominiosValidos.add("CRT");
		dominiosValidos.add("MDA");
		dominiosValidos.add("RRE");
		dominiosValidos.add("NTE");
		dominiosValidos.add("CTE");
		List retorno = domainValueService.findByDomainNameAndValues("DM_TIPO_DOCUMENTO_SERVICO",dominiosValidos);
		return retorno;
	}

	public void validateFilialManifestoViagem(TypedFlatMap params) {
		Long idManifesto = params.getLong("idManifesto");
		ManifestoViagemNacional mvn = manifestoViagemNacionalService.findByIdManifestoViagem(idManifesto);
		
		Manifesto manifesto = mvn.getManifesto();
		Long idFilial = params.getLong("idFilial");
		Long idFilialOrigem = manifesto.getFilialByIdFilialOrigem().getIdFilial();
		Long idFilialDestino = manifesto.getFilialByIdFilialDestino().getIdFilial();
		
		if (!idFilialOrigem.equals(idFilial) && !idFilialDestino.equals(idFilial)) {
			throw new BusinessException("LMS-09085");
		}
	}
	
    public ResultSetPage<Map<String, Object>> findPaginatedEventosColetas(TypedFlatMap criteria) {
    	return getRegistrarBaixaEntregasService().findPaginatedEventosColetas(criteria);
    }

    public Integer getRowCountEventosColetas(TypedFlatMap criteria) {
    	return getRegistrarBaixaEntregasService().getRowCountEventosColetas(criteria);
    }
	
	//FINDS LOOKUP NUMBERS
	public List findLookupServiceDocumentNumberCTR(Map criteria) {
		return conhecimentoService.findLookup(criteria);
	}
	public List findLookupServiceDocumentNumberNFT(Map criteria) {
		return conhecimentoService.findLookup(criteria);
	}
	public List findLookupServiceDocumentNumberCRT(Map criteria) {
		return ctoInternacionalService.findLookup(criteria);
	}
	public List findLookupServiceDocumentNumberMDA(Map criteria) {
		return mdaService.findLookup(criteria);
	}
	public List findLookupServiceDocumentNumberRRE(Map criteria) {
		return reciboReembolsoService.findLookup(criteria);
	}
	public List findLookupServiceDocumentNumberNTE(Map criteria) {
		return conhecimentoService.findLookup(criteria);
	}
	public List findLookupServiceDocumentNumberCTE(Map criteria) {
		return conhecimentoService.findLookup(criteria);
	}
	
	public List findLookupManifestoDocumentNumberVN(Map criteria) {
		List list = manifestoViagemNacionalService.findLookup(criteria);
		return list;
	}

	//IOC
	public void setRegistrarBaixaEntregasService(RegistrarBaixaEntregasService registrarBaixaEntregasService) {
		this.registrarBaixaEntregasService = registrarBaixaEntregasService;
	}
	private RegistrarBaixaEntregasService getRegistrarBaixaEntregasService() {
		return (RegistrarBaixaEntregasService) this.registrarBaixaEntregasService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public void setMeioTransporteService(MeioTransporteService meioTransporteService) {
		this.meioTransporteService = meioTransporteService;
	}
	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}
	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
	}
	public void setCtoInternacionalService(CtoInternacionalService ctoInternacionalService) {
		this.ctoInternacionalService = ctoInternacionalService;
	}
	public void setManifestoEntregaService(ManifestoEntregaService manifestoEntregaService) {
		this.manifestoEntregaService = manifestoEntregaService;
	}
	public void setMdaService(MdaService mdaService) {
		this.mdaService = mdaService;
	}
	public void setReciboReembolsoService(ReciboReembolsoService reciboReembolsoService) {
		this.reciboReembolsoService = reciboReembolsoService;
	}
	public void setRegistrarBaixaEntregasOnTimeService(RegistrarBaixaEntregasOnTimeService registrarBaixaEntregasOnTimeService) {
		this.registrarBaixaEntregasOnTimeService = registrarBaixaEntregasOnTimeService;
	}
	public void setOcorrenciaEntregaService(OcorrenciaEntregaService ocorrenciaEntregaService) {
		this.ocorrenciaEntregaService = ocorrenciaEntregaService;
	}

	public void setManifestoViagemNacionalService(
			ManifestoViagemNacionalService manifestoViagemNacionalService) {
		this.manifestoViagemNacionalService = manifestoViagemNacionalService;
	}

	public void setManifestoEntregaVolumeService(
			ManifestoEntregaVolumeService manifestoEntregaVolumeService) {
		this.manifestoEntregaVolumeService = manifestoEntregaVolumeService;
}

	public ManifestoEntregaVolumeService getManifestoEntregaVolumeService() {
		return manifestoEntregaVolumeService;
	}

	public void setVolumeNotaFiscalService(VolumeNotaFiscalService volumeNotaFiscalService) {
		this.volumeNotaFiscalService = volumeNotaFiscalService;
	}

	public VolumeNotaFiscalService getVolumeNotaFiscalService() {
		return volumeNotaFiscalService;
	}

}
