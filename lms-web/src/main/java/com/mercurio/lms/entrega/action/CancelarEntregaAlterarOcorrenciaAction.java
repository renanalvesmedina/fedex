package com.mercurio.lms.entrega.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.transaction.UnexpectedRollbackException;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.util.FilterList;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.ControleCarga;
import com.mercurio.lms.carregamento.model.service.ControleCargaService;
import com.mercurio.lms.carregamento.model.service.PreManifestoDocumentoService;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.configuracoes.model.service.UsuarioService;
import com.mercurio.lms.entrega.model.service.CancelarEntregaAlterarOcorrenciaService;
import com.mercurio.lms.entrega.model.service.ManifestoEntregaDocumentoService;
import com.mercurio.lms.entrega.model.service.ManifestoEntregaService;
import com.mercurio.lms.entrega.model.service.OcorrenciaEntregaService;
import com.mercurio.lms.entrega.model.service.ReciboReembolsoService;
import com.mercurio.lms.expedicao.model.DoctoServico;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.model.service.CtoInternacionalService;
import com.mercurio.lms.expedicao.model.service.DoctoServicoService;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.NotaCreditoDocto;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.service.NotaCreditoDoctoService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.pendencia.model.OcorrenciaDoctoServico;
import com.mercurio.lms.pendencia.model.service.MdaService;
import com.mercurio.lms.pendencia.model.service.OcorrenciaDoctoServicoService;
import com.mercurio.lms.sim.ConstantesSim;
import com.mercurio.lms.sim.model.LocalizacaoMercadoria;
import com.mercurio.lms.util.AliasToTypedFlatMapResultTransformer;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.entrega.cancelarEntregaAlterarOcorrenciaAction"
 */

public class CancelarEntregaAlterarOcorrenciaAction extends CrudAction {

	private Logger log = LogManager.getLogger(this.getClass());
	private FilialService filialService;
	private ControleCargaService controleCargaService;
	private ManifestoEntregaService manifestoEntregaService;
	private DomainValueService domainValueService;
	private UsuarioService usuarioService;
	private ReciboReembolsoService reciboReembolsoService;
	private ConhecimentoService conhecimentoService;
	private CtoInternacionalService ctoInternacionalService;
	private MdaService mdaService;
	private OcorrenciaEntregaService ocorrenciaEntregaService;
	private ManifestoEntregaDocumentoService manifestoEntregaDocumentoService;
	private PreManifestoDocumentoService preManifestoDocumentoService;
	private DoctoServicoService doctoServicoService;
	private OcorrenciaDoctoServicoService ocorrenciaDoctoServicoService;
	private CancelarEntregaAlterarOcorrenciaService cancelarEntregaAlterarOcorrenciaService;
	private NotaCreditoDoctoService notaCreditoDoctoService;
	
	public void executeCancelar(TypedFlatMap parametros){
		try{
		cancelarEntregaAlterarOcorrenciaService.executeCancelarOcorrencia(parametros);
		} catch (UnexpectedRollbackException e) {
			//LMS-4332 nesses casos deve silenciar a exceção e não exibir a mensagem na tela.
			log.error(e);
	}	
	}	
	
	public List findFilial(Map criteria){
		return filialService.findLookup(criteria);
	}
	
	public List findOcorrenciaEntrega(Map criteria){
		return ocorrenciaEntregaService.findLookup(criteria);
	}
	
	public TypedFlatMap getDataHoraAtual(){
		TypedFlatMap retorno = new TypedFlatMap();
		retorno.put("dhRegistro", JTDateTimeUtils.getDataHoraAtual());
		return retorno;
	}
	
	public TypedFlatMap findFilialUsuarioLogado(){
		Filial f = SessionUtils.getFilialSessao();
		
		Usuario usuario  = SessionUtils.getUsuarioLogado();
    	boolean isUsuarioDIVOP = controleCargaService.validateManutencaoEspecialCC(usuario);
				
		TypedFlatMap retorno = new TypedFlatMap();
		retorno.put("idFilial", f.getIdFilial());
		retorno.put("sgFilial", f.getSgFilial());
		retorno.put("pessoa.nmFantasia", f.getPessoa().getNmFantasia());
		retorno.put("isUsuarioDIVOP", Boolean.valueOf(isUsuarioDIVOP));
		retorno.put("nmUsuario", usuario.getNmUsuario());
		
		return retorno;
	}
	
	public Map findLastManifestoEntrega(TypedFlatMap parametros){
		Long idDoctoServico = parametros.getLong("doctoServico.idDoctoServico");
		
		List result = manifestoEntregaDocumentoService.findManifestoEntregaByDoctoServicoAndTpStatusManifesto(idDoctoServico);

		Map retorno = new HashMap(); 
		
		List<NotaCreditoDocto> notasCreditoDocto = notaCreditoDoctoService.findByIdDoctoServico(idDoctoServico);
		if(notasCreditoDocto.isEmpty() || notasCreditoDocto == null){
			retorno.put("hasNota", false);
		}else{
			retorno.put("hasNota", true);
		}
		
		if (!result.isEmpty()){
			Map map = (Map) result.get(0);
			DomainValue tpStatus = (DomainValue)map.get("tpStatusManifesto");
			if ("FE".equals(tpStatus.getValue())) {
				throw new BusinessException("LMS-09107");
			}
			DomainValue tpEntregaParcial = (DomainValue)map.get("tpEntregaParcial");
			retorno.put("tpEntregaParcialDesc", tpEntregaParcial != null && tpEntregaParcial.getDescription() != null ? tpEntregaParcial.getDescription().toString() : "");
			retorno.putAll(map);
		}
		
		DoctoServico ds = doctoServicoService.findDoctoServicoById(idDoctoServico);
		
		if(ds.getBlBloqueado() && validateOcorrenciaEntrega(idDoctoServico, retorno)){
			throw new BusinessException("LMS-17012");
		}
		
		LocalizacaoMercadoria lm = ds.getLocalizacaoMercadoria();
		
		if (lm != null) {
			Short cdLocalizacao = lm.getCdLocalizacaoMercadoria(); 
			if (cdLocalizacao.equals(ConstantesSim.CD_MERCADORIA_AGUARDANDO_EMBARQUE)
					|| cdLocalizacao.equals(ConstantesSim.CD_MERCADORIA_EM_CARREGAMENTO_ENTREGA)
					|| cdLocalizacao.equals(ConstantesSim.CD_MERCADORIA_AGUARDANDO_SAIDA_ENTREGA)) {
				throw new BusinessException("LMS-09114");
			}
		}
		
		retorno.put("idFilialSessao", SessionUtils.getFilialSessao().getIdFilial());
		return retorno;
	}
	
	/**
	 * LMS-4567
	 * Ocorrência de pendência relacionada ao bloqueio em aberto
	 * (DOCTO_SERVICO.id_docto_servico = OCORRENCIA_DOCTO_SERVICO.id_docto_servico >>  OCORRENCIA_DOCTO_SERVICO.id_ocor_bloqueio 
	 * ONDE OCORRENCIA_DOCTO_SERVICO.id_ocor_liberacao IS NULL) for diferente da ocorrência de pendência da ocorrência de entrega que esta sendo alterada
	 * (OCORRENCIA_ENTREGA.id_ocorrencia_pendencia).
	 * 
	 * @param idDoctoServico
	 * @param retorno
	 * @return
	 */
	private boolean validateOcorrenciaEntrega(Long idDoctoServico, Map retorno) {
		Long idOcorrenciaPendencia = (Long) retorno.get("idOcorrenciaPendencia");
		if(idOcorrenciaPendencia != null){
			OcorrenciaDoctoServico ocorrenciaDoctoServico = ocorrenciaDoctoServicoService.findOcorrenciaDoctoServicoEmAbertoByIdDoctoServico(idDoctoServico);
			
			if(ocorrenciaDoctoServico != null && ocorrenciaDoctoServico.getOcorrenciaPendenciaByIdOcorBloqueio() != null 
					&&  ocorrenciaDoctoServico.getOcorrenciaPendenciaByIdOcorBloqueio().getIdOcorrenciaPendencia().compareTo(idOcorrenciaPendencia) != 0){
					return true;
			}
			
		}
		
		return false;
	}

	public List findLookupControleCarga(Map criteria) {
		FilterList filter = new FilterList(controleCargaService.findLookup(criteria)) {
			public Map filterItem(Object item) {
				ControleCarga cc = (ControleCarga)item;
    			TypedFlatMap typedFlatMap = new TypedFlatMap();
	    		typedFlatMap.put("idControleCarga", cc.getIdControleCarga());
		    	typedFlatMap.put("nrControleCarga", cc.getNrControleCarga());
		   		    
				return typedFlatMap;
			}
    	};
    	return (List)filter.doFilter();
	}
	
	public List findLookupManifestoEntrega(TypedFlatMap criteria){
		return manifestoEntregaService.findLookupCustom(criteria);
	}
	
	public void setCancelarEntregaAlterarOcorrenciaService(CancelarEntregaAlterarOcorrenciaService alterarOcorrenciaService){
		this.cancelarEntregaAlterarOcorrenciaService = alterarOcorrenciaService;
	}

	/**
	 * @param filialService The filialService to set.
	 */
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	
	 public List findTipoDocumentoServico(Map criteria) {
	    	List dominiosValidos = new ArrayList();
	    	dominiosValidos.add("CTR");
	    	dominiosValidos.add("CRT");
	    	dominiosValidos.add("MDA");
	    	dominiosValidos.add("NFT");
	    	dominiosValidos.add("RRE");
	    	dominiosValidos.add("NTE");
	    	dominiosValidos.add("CTE");
	    	List retorno = domainValueService.findByDomainNameAndValues("DM_TIPO_DOCUMENTO_SERVICO", dominiosValidos);
	    	return retorno;
	}
	    
    public List findLookupUsuarioFuncionario(TypedFlatMap tfm){
    	return usuarioService.findLookupUsuarioFuncionario(tfm.getLong("idUsuario"), tfm.getString("nrMatricula"), null, null, null, null, true);
    }
    
    public List findLookupServiceDocumentFilialRRE(Map criteria){
		return findLookupFilialByDocumentoServico(criteria);
	}
	
	public List findLookupServiceDocumentFilialCTR(Map criteria) {
		return findLookupFilialByDocumentoServico(criteria);		
	}

	public List findLookupServiceDocumentFilialCRT(Map criteria) {
	   	return findLookupFilialByDocumentoServico(criteria);
	}

	public List findLookupServiceDocumentFilialMDA(Map criteria) {
	   	return findLookupFilialByDocumentoServico(criteria);
	}
	
	public List findLookupServiceDocumentFilialNFT(Map criteria) {
		return this.findLookupFilialByDocumentoServico(criteria);
	}
	 
	public List findLookupServiceDocumentFilialNTE(Map criteria) {
		return this.findLookupFilialByDocumentoServico(criteria);
	}
	
	public List findLookupServiceDocumentFilialCTE(Map criteria) {
		return this.findLookupFilialByDocumentoServico(criteria);
	}


	public List findLookupFilialByDocumentoServico(Map criteria) {
    	List list = filialService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		Filial filial = (Filial)iter.next();
    		TypedFlatMap typedFlatMap = new TypedFlatMap();
    		typedFlatMap.put("idFilial", filial.getIdFilial());
    		typedFlatMap.put("sgFilial", filial.getSgFilial());
    		typedFlatMap.put("pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
    		retorno.add(typedFlatMap);
    	}
    	return retorno;
	}
			
	public List findLookupServiceDocumentNumberRRE(TypedFlatMap criteria){
		criteria.put("blBloqueado","N");
		List listaRecibo = reciboReembolsoService.findLookupCustom(criteria);
		AliasToTypedFlatMapResultTransformer a = new AliasToTypedFlatMapResultTransformer();
		return a.transformListResult(listaRecibo);
	}
	 
	public List findLookupServiceDocumentNumberCTR(Map criteria) {
		return conhecimentoService.findLookup(criteria);	    
	}

	public List findLookupServiceDocumentNumberCRT(Map criteria) {
	    return ctoInternacionalService.findLookup(criteria);
	}

	public List findLookupServiceDocumentNumberMDA(Map criteria) {
	    return mdaService.findLookup(criteria);
	}
				
	public List findLookupServiceDocumentNumberNFT(Map criteria) {
		return conhecimentoService.findLookup(criteria);
	}

	public List findLookupServiceDocumentNumberNTE(Map criteria) {
		return conhecimentoService.findLookup(criteria);
	}
	
	public List findLookupServiceDocumentNumberCTE(Map criteria) {
		return conhecimentoService.findLookup(criteria);
	}


	/**
	 * @param controleCargaService The controleCargaService to set.
	 */
	public void setControleCargaService(ControleCargaService controleCargaService) {
		this.controleCargaService = controleCargaService;
	}

	/**
	 * @param manifestoEntregaService The manifestoEntregaService to set.
	 */
	public void setManifestoEntregaService(ManifestoEntregaService manifestoEntregaService) {
		this.manifestoEntregaService = manifestoEntregaService;
	}

	/**
	 * @param conhecimentoService The conhecimentoService to set.
	 */
	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
	}

	/**
	 * @param ctoInternacionalService The ctoInternacionalService to set.
	 */
	public void setCtoInternacionalService(CtoInternacionalService ctoInternacionalService) {
		this.ctoInternacionalService = ctoInternacionalService;
	}

	/**
	 * @param domainValueService The domainValueService to set.
	 */
	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}

	/**
	 * @param mdaService The mdaService to set.
	 */
	public void setMdaService(MdaService mdaService) {
		this.mdaService = mdaService;
	}

	/**
	 * @param reciboReembolsoService The reciboReembolsoService to set.
	 */
	public void setReciboReembolsoService(ReciboReembolsoService reciboReembolsoService) {
		this.reciboReembolsoService = reciboReembolsoService;
	}

	/**
	 * @param usuarioService The usuarioService to set.
	 */
	public void setUsuarioService(UsuarioService usuarioService) {
		this.usuarioService = usuarioService;
	}

	/**
	 * @param ocorrenciaEntregaService The ocorrenciaEntregaService to set.
	 */
	public void setOcorrenciaEntregaService(OcorrenciaEntregaService ocorrenciaEntregaService) {
		this.ocorrenciaEntregaService = ocorrenciaEntregaService;
	}

	/**
	 * @param manifestoEntregaDocumentoService The manifestoEntregaDocumentoService to set.
	 */
	public void setManifestoEntregaDocumentoService(ManifestoEntregaDocumentoService manifestoEntregaDocumentoService) {
		this.manifestoEntregaDocumentoService = manifestoEntregaDocumentoService;
	}

	/**
	 * @param doctoServicoService The doctoServicoService to set.
	 */
	public void setDoctoServicoService(DoctoServicoService doctoServicoService) {
		this.doctoServicoService = doctoServicoService;
	}

	public PreManifestoDocumentoService getPreManifestoDocumentoService() {
		return preManifestoDocumentoService;
}

	public void setPreManifestoDocumentoService(
			PreManifestoDocumentoService preManifestoDocumentoService) {
		this.preManifestoDocumentoService = preManifestoDocumentoService;
	}

	public void setNotaCreditoDoctoService(NotaCreditoDoctoService notaCreditoDoctoService) {
		this.notaCreditoDoctoService = notaCreditoDoctoService;
}

	public OcorrenciaDoctoServicoService getOcorrenciaDoctoServicoService() {
		return ocorrenciaDoctoServicoService;
}

	public void setOcorrenciaDoctoServicoService(OcorrenciaDoctoServicoService ocorrenciaDoctoServicoService) {
		this.ocorrenciaDoctoServicoService = ocorrenciaDoctoServicoService;
	}

}
