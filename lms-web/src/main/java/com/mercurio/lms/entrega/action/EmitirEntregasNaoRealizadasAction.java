package com.mercurio.lms.entrega.action;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.report.ReportActionSupport;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.ControleCarga;
import com.mercurio.lms.entrega.model.ManifestoEntrega;
import com.mercurio.lms.entrega.model.ManifestoEntregaDocumento;
import com.mercurio.lms.entrega.model.service.ManifestoEntregaService;
import com.mercurio.lms.entrega.model.service.ReciboReembolsoService;
import com.mercurio.lms.entrega.report.EmitirEntregasNaoRealizadasService;
import com.mercurio.lms.expedicao.model.DoctoServico;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.model.service.CtoInternacionalService;
import com.mercurio.lms.expedicao.model.service.DoctoServicoService;
import com.mercurio.lms.expedicao.model.service.ManifestoViagemNacionalService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.RotaColetaEntregaService;
import com.mercurio.lms.pendencia.model.service.MdaService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.service.ClienteService;

/**
 * @author José Rodrigo Moraes
 * @since  24/05/2006
 * 
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.entrega.emitirEntregasNaoRealizadasAction"
 */

public class EmitirEntregasNaoRealizadasAction extends ReportActionSupport {

	private EmitirEntregasNaoRealizadasService emitirEntregasNaoRealizadasService;
	private FilialService filialService;
	private ClienteService clienteService;
	private RotaColetaEntregaService rotaColetaEntregaService; 
	private DomainValueService domainValueService;
	private ManifestoEntregaService manifestoEntregaService;
	private ConhecimentoService conhecimentoService;
	private CtoInternacionalService ctoInternacionalService;
	private MdaService mdaService;
	private ReciboReembolsoService reciboReembolsoService;
	private ManifestoViagemNacionalService manifestoViagemNacionalService;
	private DoctoServicoService doctoServicoService;
	
	/**
	 * Busca as filial de acordo com a sigla informada
	 * @param tfm <code>sgFilial</code> sigla da filial
	 * @return Lista de filiais
	 */
	public List findLookupFilial(TypedFlatMap tfm){ 
		return filialService.findLookupFilial(tfm);
	}
	
	/**
	 * Busca os cliente de acordo com o número de identificação informado
	 * @param tfm cliente.pessoa.nrIdentificacao Número de identificação do cliente
	 * @return Lista de clientes
	 */
	public List findLookupCliente(TypedFlatMap tfm){
			
		List clientes = clienteService.findLookupSimplificado(tfm.getString("pessoa.nrIdentificacao"),null);
		
		List retorno = new ArrayList();
			
		for (Iterator iter = clientes.iterator(); iter.hasNext();) {
				
			Cliente element = (Cliente) iter.next();
				
			TypedFlatMap map = new TypedFlatMap();
			map.put("pessoa.nrIdentificacao",element.getPessoa().getNrIdentificacao());
			map.put("idCliente",element.getIdCliente());
			map.put("pessoa.nmPessoa",element.getPessoa().getNmPessoa());
			map.put("pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(element.getPessoa().getTpIdentificacao(),
																					   element.getPessoa().getNrIdentificacao()));
				
			retorno.add(map);
				
		}
			
		return retorno;
			
	}
	
	/**
	 * Busca as rotas de coleta/entrega
	 * @param criteria <code>nrRota</code> Número da rota e/ou <br>
	 *                 <code>idFilial</code> Identificador da filial
	 * @return Lista de rotas coleta/entrega
	 */
	public List findLookupRotaColetaEntrega(Map criteria){
		 return rotaColetaEntregaService.findLookup(criteria);
	}
	
	/**
	 * Busca a filial do usuário logado
	 * @param tfm Neste caso sem nenhum critério
	 * @return Filial do usuário logado
	 */
	public TypedFlatMap findFilialUsuario(TypedFlatMap tfm){
		
		TypedFlatMap map = new TypedFlatMap();
		
		Filial filial = SessionUtils.getFilialSessao();
		
		map.put("rotaColetaEntrega.filial.idFilial",filial.getIdFilial());
		map.put("rotaColetaEntrega.filial.sgFilial",filial.getSgFilial());
		map.put("rotaColetaEntrega.filial.pessoa.nmFantasia",filial.getPessoa().getNmFantasia());
		
		return map;
	}

	
	/**
	 * Busca os tipos de documento serviço.
	 * @param criteria
	 * @return
	 */
    public List findTipoDocumentoServico(TypedFlatMap criteria) {
    	List dominiosValidos = new ArrayList();
    	dominiosValidos.add("CRT");
    	dominiosValidos.add("CTR"); 
    	dominiosValidos.add("NFT"); 
    	dominiosValidos.add("RRE"); 
    	dominiosValidos.add("MDA");
    	dominiosValidos.add("CTE");
    	dominiosValidos.add("NTE");
    	List retorno = this.getDomainValueService().findByDomainNameAndValues("DM_TIPO_DOCUMENTO_SERVICO", dominiosValidos);
    	return retorno;
    }	
	
    public List findLookupManifestoEntrega(TypedFlatMap criteria){
		return manifestoEntregaService.findLookupCustom(criteria);
	}
	
    public List findLookupServiceDocumentFilialCTR(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }
    public List findLookupServiceDocumentFilialCRT(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }
    public List findLookupServiceDocumentFilialNFT(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }
    public List findLookupServiceDocumentFilialRRE(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }
    public List findLookupServiceDocumentFilialMDA(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }
    public List findLookupServiceDocumentFilialCTE(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }
    public List findLookupServiceDocumentFilialNTE(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }      
    
    public List findLookupFilialByDocumentoServico(Map criteria) {
    	List list = filialService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		Filial filial = (Filial)iter.next();
    		TypedFlatMap typedFlatMap = new TypedFlatMap();
    		typedFlatMap.put("idFilial", filial.getIdFilial());
    		typedFlatMap.put("sgFilial", filial.getSgFilial());
    		typedFlatMap.put("pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
    		retorno.add(typedFlatMap);
    	}
    	return retorno;
    }
    
	public List findLookupFilialByControleCarga(Map criteria) {
    	List list = filialService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		Filial filial = (Filial)iter.next();
    		TypedFlatMap tfm = new TypedFlatMap();
    		tfm.put("idFilial", filial.getIdFilial());
    		tfm.put("sgFilial", filial.getSgFilial());
    		retorno.add(tfm);
    	}
    	return retorno;
    }
	
	public TypedFlatMap findDoctoServico(TypedFlatMap criteria) {
		Long idDoctoServico = criteria.getLong("idDoctoServico");
		Long idManifesto = criteria.getLong("idManifesto");
		Long idControleCarga = criteria.getLong("idControleCarga");
		Short naoEntregue = Short.valueOf("1");
		
		if (idDoctoServico != null){
			if(doctoServicoService.findLocalizacaoMercadoriaByidDoctoServicoCdLocalizacao(idDoctoServico, naoEntregue)){
				throw new BusinessException("LMS-10030");
			}
		}
		
		if(idDoctoServico != null || idManifesto!= null || idControleCarga!= null){
			boolean isDoctoValido= doctoServicoService.validateDoctoServicoByIdManifestoIdDoctoServico(idManifesto, idControleCarga, idDoctoServico);
			if(!isDoctoValido) {
				throw new BusinessException("LMS-00061");	
			}
		}else{
			throw new BusinessException("LMS-00061");
		}
		
		return null;
	}
	
	//FINDS LOOKUP NUMBERS
	public List findLookupServiceDocumentNumberCTR(Map criteria) {
		return conhecimentoService.findLookup(criteria);
	}
	public List findLookupServiceDocumentNumberNFT(Map criteria) {
		return conhecimentoService.findLookup(criteria);
	}
	public List findLookupServiceDocumentNumberCRT(Map criteria) {
		return ctoInternacionalService.findLookup(criteria);
	}
	public List findLookupServiceDocumentNumberMDA(Map criteria) {
		return mdaService.findLookup(criteria);
	}
	public List findLookupServiceDocumentNumberRRE(Map criteria) {
		return reciboReembolsoService.findLookup(criteria);
	}
	public List findLookupManifestoDocumentNumberVN(Map criteria) {
		List list = manifestoViagemNacionalService.findLookup(criteria);
		return list;
	}

	
	
	
	public EmitirEntregasNaoRealizadasService getEmitirEntregasNaoRealizadasService() {
		return emitirEntregasNaoRealizadasService;
	}

	public void setEmitirEntregasNaoRealizadasService(EmitirEntregasNaoRealizadasService emitirEntregasNaoRealizadasService) {
		this.reportServiceSupport = emitirEntregasNaoRealizadasService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}



	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}

	public void setRotaColetaEntregaService(
			RotaColetaEntregaService rotaColetaEntregaService) {
		this.rotaColetaEntregaService = rotaColetaEntregaService;
	}
	
	public DomainValueService getDomainValueService() {
		return domainValueService;
}
	
	public void setManifestoEntregaService(
			ManifestoEntregaService manifestoEntregaService) {
		this.manifestoEntregaService = manifestoEntregaService;
	}
	
	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}

	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
	}

	public void setCtoInternacionalService(
			CtoInternacionalService ctoInternacionalService) {
		this.ctoInternacionalService = ctoInternacionalService;
	}

	public void setMdaService(MdaService mdaService) {
		this.mdaService = mdaService;
	}

	public void setReciboReembolsoService(
			ReciboReembolsoService reciboReembolsoService) {
		this.reciboReembolsoService = reciboReembolsoService;
	}

	public void setManifestoViagemNacionalService(
			ManifestoViagemNacionalService manifestoViagemNacionalService) {
		this.manifestoViagemNacionalService = manifestoViagemNacionalService;
	}

	public DoctoServicoService getDoctoServicoService() {
		return doctoServicoService;
	}

	public void setDoctoServicoService(DoctoServicoService doctoServicoService) {
		this.doctoServicoService = doctoServicoService;
	}

}
