package com.mercurio.lms.configuracoes.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.InscricaoEstadual;
import com.mercurio.lms.configuracoes.model.ObservacaoICMSPessoa;
import com.mercurio.lms.configuracoes.model.service.ObservacaoICMSPessoaService;
import com.mercurio.lms.configuracoes.model.service.ParametroGeralService;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.LongUtils;

/**
 * @author José Rodrigo Moraes
 * @since  16/06/2006
 * 
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.configuracoes.manterObservacaoICMSPessoaAction"
 */
public class ManterObservacaoICMSPessoaAction extends CrudAction {
	
	private ParametroGeralService parametroGeralService;
		
	public Serializable findById(Long id) {
		return getObservacaoICMSPessoaService().findById(id);
	}	

	public void removeById(Long id) {
		
		List<Long> listId = new ArrayList<Long>();
		listId.add(id);
		validaExclusao(listId);
		
		getObservacaoICMSPessoaService().removeById(id);
	}

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		
		validaExclusao(ids);
		
		super.removeByIds(ids);
	}

	/**
	 * Valida vigencias
	 */
	public Serializable validaVigencias(TypedFlatMap map){
		TypedFlatMap tfm = new TypedFlatMap();		
		tfm.put("comparaInicial", JTDateTimeUtils.comparaData(map.getYearMonthDay("dtVigenciaInicial"), JTDateTimeUtils.getDataAtual()));
		
		if(map.getYearMonthDay("dtVigenciaFinal") != null){
			tfm.put("comparaFinal", JTDateTimeUtils.comparaData(map.getYearMonthDay("dtVigenciaFinal"), JTDateTimeUtils.getDataAtual()));
		}
		return tfm;
	}
	
	/**
	 * Se o registro possuir data de vigencia final informa a exception LMS-00005 
	 * @param ids
	 */
	private void validaExclusao(List ids){
		ObservacaoICMSPessoa obIcmsPessoa = null;
		for(Object id : ids){
			obIcmsPessoa = getObservacaoICMSPessoaService().findById(LongUtils.getLong(id));
			if(obIcmsPessoa.getDtVigenciaFinal() != null 
					|| JTDateTimeUtils.comparaData(obIcmsPessoa.getDtVigenciaInicial(), JTDateTimeUtils.getDataAtual()) <= 0){
				throw new BusinessException("LMS-00005");
			}
		}
	}
	
	/**
	 * Salva os dados da observação icms da pessoa
	 * @param tfm Dados da observação icms da pessoa
	 * @return Identificador da observacao salva
	 */
	public Serializable store(TypedFlatMap tfm) {
		
		/*A datade vigencia inicial deve ser maior que a data atual*/
		if(tfm.getLong("idObservacaoICMSPessoa") == null 
				&& JTDateTimeUtils.comparaData(tfm.getYearMonthDay("dtVigenciaInicial"), JTDateTimeUtils.getDataAtual()) < 0 ){
			throw new BusinessException("LMS-30040");
		}
		
		/*Se a data de vigencia final for menor que a data atual
		mostra a exceção*/
		if(tfm.getYearMonthDay("dtVigenciaFinal") != null 
				&& JTDateTimeUtils.comparaData(tfm.getYearMonthDay("dtVigenciaFinal"), JTDateTimeUtils.getDataAtual()) < 0){
			throw new BusinessException("LMS-01030");
		}

		ObservacaoICMSPessoa oip = new ObservacaoICMSPessoa();
		oip.setIdObservacaoICMSPessoa(tfm.getLong("idObservacaoICMSPessoa"));
		oip.setDtVigenciaInicial(tfm.getYearMonthDay("dtVigenciaInicial"));
		oip.setDtVigenciaFinal(tfm.getYearMonthDay("dtVigenciaFinal"));
		oip.setObObservacaoICMSPessoa(tfm.getString("obObservacaoICMSPessoa"));
		oip.setTpObservacaoICMSPessoa(tfm.getDomainValue("tpObservacaoICMSPessoa"));
		oip.setNrOrdemImpressao(tfm.getLong("nrOrdemImpressao"));
		oip.setCdEmbLegalMastersaf(tfm.getString("cdEmbLegalMastersaf"));
		
		InscricaoEstadual ie = new InscricaoEstadual();
		ie.setIdInscricaoEstadual(tfm.getLong("inscricaoEstadual.idInscricaoEstadual"));
		
		oip.setInscricaoEstadual(ie);
		
		getObservacaoICMSPessoaService().storeObservacaoICMSPessoa(oip);
		
		tfm.put("cdEmbLegalMastersaf", oip.getCdEmbLegalMastersaf());
		
		return tfm;
	}
	
	/**
	 * Seta a service padrão para a tela de Manter Observações de ICMS Pessoa
	 * @param service ObservacaoICMSPessoaService
	 */
	public void setObservacaoICMSPessoaService(ObservacaoICMSPessoaService service){
		this.defaultService = service;
	}
	
	/**
	 * Retorna a service padrão da tela de Manter Observações de ICMS Pessoa
	 * @return ObservacaoICMSPessoaService
	 */
	public ObservacaoICMSPessoaService getObservacaoICMSPessoaService(){
		return (ObservacaoICMSPessoaService)this.defaultService;
	}

	public ParametroGeralService getParametroGeralService() {
		return parametroGeralService;
}

	public void setParametroGeralService(ParametroGeralService parametroGeralService) {
		this.parametroGeralService = parametroGeralService;
	}

}
