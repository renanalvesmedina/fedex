package com.mercurio.lms.configuracoes.action;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.MapUtils;
import org.apache.commons.lang.math.NumberUtils;
import org.apache.commons.lang3.StringUtils;
import org.joda.time.YearMonthDay;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.EnderecoPessoa;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.configuracoes.model.TipoLogradouro;
import com.mercurio.lms.configuracoes.model.param.PesquisarCepParam;
import com.mercurio.lms.configuracoes.model.service.CepService;
import com.mercurio.lms.configuracoes.model.service.EnderecoPessoaService;
import com.mercurio.lms.configuracoes.model.service.TipoEnderecoPessoaService;
import com.mercurio.lms.configuracoes.model.service.TipoLogradouroService;
import com.mercurio.lms.municipios.model.Municipio;
import com.mercurio.lms.municipios.model.Pais;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.MunicipioService;
import com.mercurio.lms.municipios.model.service.PaisService;
import com.mercurio.lms.municipios.model.service.UnidadeFederativaService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.configuracoes.manterEnderecoPessoaAction"
 */
public class ManterEnderecoPessoaAction extends CrudAction {
	private static final String MAP_KEY_DT_VIGENCIA_INICIAL = "dtVigenciaInicial";
	private static final String MAP_KEY_ID_ENDERECO_PESSOA = "idEnderecoPessoa";
	private static final String MAP_KEY_ID_PESSOA = "idPessoa";
	private static final String MAP_KEY_MUNICIPIO_ID_MUNICIPIO = "municipio.idMunicipio";
	private static final String MAP_KEY_PESSOA_ID_PESSOA = "pessoa.idPessoa";
	private static final String MAP_KEY_NR_ENDERECO = "nrEndereco";
	private static final String MAP_KEY_TIPO_LOGRADOURO_ID_TIPO_LOGRADOURO = "tipoLogradouro.idTipoLogradouro";
	private CepService cepService;
	private TipoEnderecoPessoaService tipoEnderecoPessoaService;
	private ConfiguracoesFacade configuracoesFacade;
	private PaisService paisService;
	private TipoLogradouroService tipoLogradouroService;
	private MunicipioService municipioService;
	private UnidadeFederativaService unidadeFederativaService;
	private FilialService filialService;
	
	public void setEnderecoPessoa(EnderecoPessoaService enderecoPessoaService) {
		this.defaultService = enderecoPessoaService;
	}
	
	public EnderecoPessoaService getEnderecoPessoa() {
		return (EnderecoPessoaService)defaultService;
	}	
	
    public void removeById(java.lang.Long id) {
        ((EnderecoPessoaService)defaultService).removeById(id);
    }
    
	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	((EnderecoPessoaService)defaultService).removeByIds(ids);
    }

    public Map findById(java.lang.Long id) {
    	EnderecoPessoa enderecoPessoa = ((EnderecoPessoaService)defaultService).findById(id);
    	EnderecoPessoa enderecoPessoaPadrao = ((EnderecoPessoaService)defaultService).findEnderecoPessoaPadrao(enderecoPessoa.getPessoa().getIdPessoa());
    	TypedFlatMap retorno = new TypedFlatMap();

    	if(enderecoPessoa == null || enderecoPessoaPadrao == null){
    		throw new BusinessException("LMS-01194", new Object[]{""});
    	}
    	
    	//Se a data de vigencia inicial é menor que a data atual e que o blEndrecoMigrado é false, desabilitar os campos da tela
    	if (enderecoPessoa.getDtVigenciaInicial() != null && enderecoPessoa.getDtVigenciaInicial().isBefore(JTDateTimeUtils.getDataAtual()) && !enderecoPessoa.getBlEnderecoMigrado()){
    		retorno.put("blDisableTela", Boolean.TRUE);
    	}

    	//Se o endereço é um endereco residencial ou comercial, desabilitar a data vigencia final
    	if (tipoEnderecoPessoaService.executeIsComercialOrResidencial(enderecoPessoa.getIdEnderecoPessoa())){
    		retorno.put("blDisableVigenciaFinal", Boolean.TRUE);
    		
    		if (enderecoPessoa.getDtVigenciaInicial().isBefore(JTDateTimeUtils.getDataAtual()) &&
    			Boolean.FALSE.equals(enderecoPessoa.getBlEnderecoMigrado()) && 
    			(enderecoPessoa.getDtVigenciaFinal() == null || (enderecoPessoa.getDtVigenciaFinal().isAfter(JTDateTimeUtils.getDataAtual().minusDays(1))))){
    			retorno.put("mensagem", configuracoesFacade.getMensagem("LMS-27093"));
    		}
    	}
    	
    	// Valida se a data inicial do endereço que será carregado é menor que a data inicial 
    	// do endereço padrão. Caso seja, desabilita a combo de endereçoSubstituido.
    	if (JTDateTimeUtils.comparaData(enderecoPessoa.getDtVigenciaInicial(), enderecoPessoaPadrao.getDtVigenciaInicial()) < 0 ) {
    		retorno.put("blDisableComboEnderecoSubstituido", Boolean.TRUE);
    	}
    	
    	retorno.put(MAP_KEY_ID_ENDERECO_PESSOA, enderecoPessoa.getIdEnderecoPessoa());
    	retorno.put(MAP_KEY_PESSOA_ID_PESSOA, enderecoPessoa.getPessoa().getIdPessoa());
    	retorno.put("pessoa.nrIdentificacao", FormatUtils.formatIdentificacao(enderecoPessoa.getPessoa())); 
    	retorno.put("municipio.unidadeFederativa.pais.idPais", enderecoPessoa.getMunicipio().getUnidadeFederativa().getPais().getIdPais());
    	retorno.put("municipio.unidadeFederativa.pais.nmPais", enderecoPessoa.getMunicipio().getUnidadeFederativa().getPais().getNmPais());
    	retorno.put("nrCepLookup.nrCep", enderecoPessoa.getNrCep());    	
    	retorno.put("nrCep", enderecoPessoa.getNrCep());
    	retorno.put(MAP_KEY_TIPO_LOGRADOURO_ID_TIPO_LOGRADOURO, enderecoPessoa.getTipoLogradouro().getIdTipoLogradouro());
    	retorno.put("dsEndereco", enderecoPessoa.getDsEndereco());
    	retorno.put(MAP_KEY_NR_ENDERECO, enderecoPessoa.getNrEndereco());
    	retorno.put("dsComplemento", enderecoPessoa.getDsComplemento());
    	retorno.put("dsBairro", enderecoPessoa.getDsBairro());
    	retorno.put(MAP_KEY_MUNICIPIO_ID_MUNICIPIO, enderecoPessoa.getMunicipio().getIdMunicipio());
    	retorno.put("municipio.nmMunicipio", enderecoPessoa.getMunicipio().getNmMunicipio());
    	retorno.put("municipio.unidadeFederativa.idUnidadeFederativa", enderecoPessoa.getMunicipio().getUnidadeFederativa().getIdUnidadeFederativa());
    	retorno.put("municipio.unidadeFederativa.sgUnidadeFederativa", enderecoPessoa.getMunicipio().getUnidadeFederativa().getSgUnidadeFederativa());
    	retorno.put("municipio.unidadeFederativa.nmUnidadeFederativa", enderecoPessoa.getMunicipio().getUnidadeFederativa().getNmUnidadeFederativa());
    	retorno.put(MAP_KEY_DT_VIGENCIA_INICIAL, enderecoPessoa.getDtVigenciaInicial());
    	retorno.put("dtVigenciaFinal", enderecoPessoa.getDtVigenciaFinal());
    	retorno.put("nrLatitude", enderecoPessoa.getNrLatitude());
    	retorno.put("nrLatitudeTmp", enderecoPessoa.getNrLatitudeTmp());
    	retorno.put("nrLongitude", enderecoPessoa.getNrLongitude());
    	retorno.put("nrLongitudeTmp", enderecoPessoa.getNrLongitudeTmp());
    	retorno.put("qualidade", enderecoPessoa.getNrQualidade());
    	retorno.put("obEnderecoPessoa", enderecoPessoa.getObEnderecoPessoa());
    	retorno.put("enderecoCompleto", getEnderecoPessoa().getEnderecoCompleto(enderecoPessoa.getPessoa().getIdPessoa()));

    	if (enderecoPessoa.getUsuarioInclusao()!=null){
    		retorno.put("nmUsuarioInclusao", enderecoPessoa.getUsuarioInclusao().getNmUsuario());
    	}
    	
    	if (enderecoPessoa.getUsuarioAlteracao() != null){
    		retorno.put("nmUsuarioAlteracao", enderecoPessoa.getUsuarioAlteracao().getNmUsuario());
    	}
    	
    	return retorno;
    }
    
    public Serializable store(TypedFlatMap map) {
    	EnderecoPessoa enderecoPessoa = mountEnderecoPessoa(map);
    	
    	Long idEnderecoPessoa = (Long)getEnderecoPessoa().store(enderecoPessoa, map.getLong("enderecoSubstituido.idEnderecoPessoa"));
    	
    	Map mapRetorno = (Map)findById(idEnderecoPessoa);
    	
    	mapRetorno.put("mensagem", null);
    	
    	return (Serializable)mapRetorno;
    }
    
    private EnderecoPessoa mountEnderecoPessoa(TypedFlatMap map){
    	EnderecoPessoa enderecoPessoa;
    	
    	if (map.getLong(MAP_KEY_ID_ENDERECO_PESSOA) != null) {
    		enderecoPessoa = getEnderecoPessoa().findById(map.getLong(MAP_KEY_ID_ENDERECO_PESSOA));
    	} else {
    		enderecoPessoa = new EnderecoPessoa();
    	}
    	
    	Municipio municipio = null;
    	
    	if (map.getLong(MAP_KEY_MUNICIPIO_ID_MUNICIPIO) != null){
    		municipio = new Municipio();
    		municipio.setIdMunicipio(map.getLong(MAP_KEY_MUNICIPIO_ID_MUNICIPIO)); 
    		
    	}
    	enderecoPessoa.setMunicipio(municipio);
    	
    	TipoLogradouro tipoLogradouro = null;    	
    	if (map.getLong(MAP_KEY_TIPO_LOGRADOURO_ID_TIPO_LOGRADOURO) != null){
    		tipoLogradouro = new TipoLogradouro();
    		tipoLogradouro.setIdTipoLogradouro(map.getLong(MAP_KEY_TIPO_LOGRADOURO_ID_TIPO_LOGRADOURO)); 
    		
    	}
    	enderecoPessoa.setTipoLogradouro(tipoLogradouro);
    	
    	Pessoa pessoa = null;
    	if (map.getLong(MAP_KEY_PESSOA_ID_PESSOA) != null){
    		pessoa = new Pessoa();
    		pessoa.setIdPessoa(map.getLong(MAP_KEY_PESSOA_ID_PESSOA)); 
    		
    	}
    	enderecoPessoa.setPessoa(pessoa);
    	
    	enderecoPessoa.setNrCep(map.getString("nrCep"));
    	enderecoPessoa.setDtVigenciaInicial(map.getYearMonthDay(MAP_KEY_DT_VIGENCIA_INICIAL));
    	enderecoPessoa.setDtVigenciaFinal(map.getYearMonthDay("dtVigenciaFinal"));
    	enderecoPessoa.setDsEndereco(map.getString("dsEndereco"));
    	
    	if(map.getString(MAP_KEY_NR_ENDERECO) != null){
    		enderecoPessoa.setNrEndereco(map.getString(MAP_KEY_NR_ENDERECO).trim());
    	}
    	
    	enderecoPessoa.setNrLatitude(this.convertCoordenadasParaBigDecimal(map, "nrLatitude"));	
    	enderecoPessoa.setNrLatitudeTmp(this.convertCoordenadasParaBigDecimal(map, "nrLatitudeTmp"));
    	enderecoPessoa.setNrLongitude(this.convertCoordenadasParaBigDecimal(map, "nrLongitude"));
    	enderecoPessoa.setNrLongitudeTmp(this.convertCoordenadasParaBigDecimal(map, "nrLongitudeTmp"));
    	enderecoPessoa.setNrQualidade(map.getInteger("qualidade"));
    	enderecoPessoa.setDsComplemento(map.getString("dsComplemento"));
    	enderecoPessoa.setDsBairro(map.getString("dsBairro"));
    	enderecoPessoa.setObEnderecoPessoa(map.getString("obEnderecoPessoa"));
    	return enderecoPessoa;
    }

	private BigDecimal convertCoordenadasParaBigDecimal(TypedFlatMap map, String chave) {
		String coordenada = StringUtils.isNoneBlank(MapUtils.getString(map, chave)) ? MapUtils.getString(map, chave).replaceAll(",",".") : null;
		return NumberUtils.createBigDecimal(coordenada);
	}
    
    /**
     * Busca ceps
     * 
     *
     * @author José Rodrigo Moraes
     * @since 23/01/2007
     *
     * @param criteria
     * @return
     */
    public List findCepLookup(TypedFlatMap criteria) {
    	PesquisarCepParam param = new PesquisarCepParam();
    	param.setNrCep(criteria.getString("cepCriteria"));
    	param.setIdPais(criteria.getLong("municipio.unidadeFederativa.pais.idPais"));
    	param.setSgPais(criteria.getString("municipio.unidadeFederativa.pais.sgPais"));
    	param.setOnlyActives(criteria.getBoolean("onlyActives"));
    	return cepService.findCepLookupByManterEnderecoPessoa(param);		 
	}
    
    /**
     * Busca o pais do usuário logado e a data atual a ser usada na data de vigência inicial
     */
    public Map findPaisUsuarioLogadoDataAtual() {		
    	TypedFlatMap retorno = new TypedFlatMap();
    	//País da sessão
    	Pais paisSessao = paisService.findById(SessionUtils.getPaisSessao().getIdPais());
    	retorno.put("idPais", paisSessao.getIdPais());
    	retorno.put("sgPais", paisSessao.getSgPais());
    	retorno.put("nmPais", paisSessao.getNmPais());
    	retorno.put("blCepOpcional", paisSessao.getBlCepOpcional()); 
    	retorno.put("tpSituacao", paisSessao.getTpSituacao());
    	
    	retorno.put(MAP_KEY_DT_VIGENCIA_INICIAL, JTDateTimeUtils.getDataAtual());
    	
		return retorno;
	}
    
    public List findEnderecoSubstituidoCombo(TypedFlatMap map){
    	if ( map.get(MAP_KEY_ID_PESSOA) != null ){
    		List lstEndereco = new ArrayList();
    		YearMonthDay dtVigenciaInicial = map.getYearMonthDay(MAP_KEY_DT_VIGENCIA_INICIAL);
    		if (dtVigenciaInicial == null) {
    			dtVigenciaInicial = JTDateTimeUtils.getDataAtual();
    		}
			EnderecoPessoa enderecoPessoa = ((EnderecoPessoaService)defaultService)
    			.findEnderecoSubstituido(map.getLong(MAP_KEY_ID_PESSOA), dtVigenciaInicial);
    		
    		if (enderecoPessoa != null){ 
    			Map mapEndereco = new TypedFlatMap();
				mapEndereco.put("enderecoCompleto", getEnderecoPessoa().getEnderecoCompletoPorEnderecoIdPessoa(enderecoPessoa.getIdEnderecoPessoa()));
    			mapEndereco.put(MAP_KEY_ID_ENDERECO_PESSOA, enderecoPessoa.getIdEnderecoPessoa());
    			
    			lstEndereco.add(mapEndereco);
    		}
    		return lstEndereco;
    	} else {
    		return null;
    	}
    }
    
    /**
     * Busca o número de endereçoPessoa vigentes de acordo com a pessoa.
     *
     * @author Hector Julian Esnaola Junior
     * @since 27/08/2007
     *
     * @param tfm
     * @return
     *
     */
    public Map validaQuantidadeEnderecoPessoa(TypedFlatMap tfm){
    	Map map = new HashMap();
    	map.put("quantidade", getEnderecoPessoa()
    			.findTodosByIdPessoa(tfm.getLong(MAP_KEY_ID_PESSOA),
    					JTDateTimeUtils.getDataAtual(), 
    					null).size());
    	return map;
    }
    
    public Boolean validateExisteFilialByIdPessoa(TypedFlatMap tfm) {
		Long idPessoa = tfm.getLong(MAP_KEY_ID_PESSOA);
		return filialService.validateEnderecoPessoaDeUmaFilialByIdPessoa(idPessoa);
	}
    
    public Map<String, Object> loadCoordenadasTemporaria(Long idPessoa) {
    	return getEnderecoPessoa().loadCoordenadasTemporariaByIdPessoa(idPessoa);
	}
    
    public Pais findPaisByIdPais(TypedFlatMap map) {
    	return paisService.findById(map.getLong("idPais"));
    }
    
    public List findLookupPais(TypedFlatMap criteria) {
    	return paisService.findLookup(criteria);
    }
    
    public List findLookupTipoLogradouro(TypedFlatMap criteria) {
    	return tipoLogradouroService.find(criteria);
    }
    
    public List findLookupMunicipio(Map criteria) {
    	return municipioService.findLookup(criteria);
    } 
    
    public List findLookupUnidadeFederativa(Map criteria) { 
    	return unidadeFederativaService.findLookup(criteria);
    }
    
	public void setCepService(CepService cepService) {
		this.cepService = cepService;
	}
	public void setTipoEnderecoPessoaService(
			TipoEnderecoPessoaService tipoEnderecoPessoaService) {
		this.tipoEnderecoPessoaService = tipoEnderecoPessoaService;
	}
	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}
	public void setPaisService(PaisService paisService) {
		this.paisService = paisService;
	}
	public void setTipoLogradouroService(TipoLogradouroService tipoLogradouroService) {
		this.tipoLogradouroService = tipoLogradouroService;
	}
	public void setMunicipioService(MunicipioService municipioService) {
		this.municipioService = municipioService;
	}
	public void setUnidadeFederativaService(
			UnidadeFederativaService unidadeFederativaService) {
		this.unidadeFederativaService = unidadeFederativaService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
}
