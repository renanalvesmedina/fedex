package com.mercurio.lms.configuracoes.action;


import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.pojo.Aba;
import com.mercurio.adsm.framework.model.pojo.ModuloSistema;
import com.mercurio.adsm.framework.model.pojo.Recurso;
import com.mercurio.adsm.framework.model.pojo.Tela;
import com.mercurio.adsm.framework.model.service.AbaService;
import com.mercurio.adsm.framework.model.service.ModuloSistemaService;
import com.mercurio.adsm.framework.model.service.RecursoService;
import com.mercurio.adsm.framework.security.Resource;
import com.mercurio.adsm.framework.util.TypedFlatMap;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.configuracoes.manterAbaAction"
 */
public class ManterAbaAction extends CrudAction { 
	
	private RecursoService recursoService;
	private ModuloSistemaService moduloSistemaService;
		
	public RecursoService getRecursoService() {
		return recursoService;
	}

	public void setRecursoService(RecursoService recursoService) {
		this.recursoService = recursoService;
	}

	public void setAba(AbaService abaService) {
		this.defaultService = abaService;
	}
	
	
	public AbaService getService()
	{
		return ((AbaService)defaultService); 
	}
	
	/**
	 * Metodo que persist os dados.
	 * @author Diego Pacheco - LMS
	 * @param TypedFlatMap com os dados.
	 * @return Serializable
	 */
    public Serializable store(TypedFlatMap mapa) {    
    	
    	Aba 	aba 	    = new Aba();
    	Recurso recursoTela;
    	Recurso recursoAba  = new Recurso();
    	Tela tela = new Tela();
    	ModuloSistema moduloSistema;
    	Resource resource;
    	
    	recursoTela = (Recurso)this.recursoService.findByIdMetodoTela(mapa.getLong("tela.idRecurso"));
    	moduloSistema = moduloSistemaService.findById(recursoTela.getTela().getModuloSistema().getIdModuloSistema());
    	
		recursoAba.setIdRecurso(mapa.getLong("idAba"));
    	recursoAba.setNmRecurso(mapa.getString("recurso.nmRecurso"));
    	recursoAba.setDsRecurso(mapa.getString("recurso.dsRecurso"));
	    	resource = new Resource(recursoTela.getCdRecurso());
	    	resource = new Resource(moduloSistema.getSistema().getNmSistema(),null,resource.getViewAction(),mapa.getString("cdRecurso"),null);
    	recursoAba.setCdRecurso(resource.getCompound());
    	
		tela.setIdTela(recursoTela.getIdRecurso());
		tela.setRecurso(recursoTela);
		
		aba.setIdAba(recursoAba.getIdRecurso());
		aba.setRecurso(recursoAba);
		aba.setTela(tela);			

		return getService().store(aba);
	}

	public void removeById(java.lang.Long id) {
    	getService().removeById(id);
    }

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	getService().removeByIds(ids);
    } 
	
    /**
	 * Metodo que procura por um elemento. <BR>
	 * OBS: esse metodo deve de ser trocado tela{idTela} para: tala.idRecurso para compatibilidade de tela.
	 * @author Diego Pacheco - LMS
	 * @param Long id 
	 * @return HashMap
	 */
    public Map findById(Long id) {
    	Resource resource;
    	Map result = getService().findByIdAba(id);
    	result.put("tela.idRecurso",((java.util.Map)result.get("tela")).get("idTela"));
    	resource = new Resource( ((java.util.Map)result.get("recurso")).get("cdRecurso").toString() );
    	result.put("cdRecurso",resource.getTabCmd());
		return result; 
	}

    
    /**
	 * Metodo que Chama a Lookup de tela.
	 * OBS: esse metodo faz a conversão do retorno da look para um mapa e coloca em uma list.
	 * @author Diego Pacheco - LMS
	 * @param TypedFlatMap criteria 
	 * @return List
	 */
	public List findLookupTela(TypedFlatMap criteria) {
		
		List l = this.recursoService.findLookupTela(criteria);
		
		if (l.size()==0) return null;
		
		ArrayList novaLista = new ArrayList();
		
		for(Iterator it = l.listIterator(); it.hasNext();) 
		{
			Object[] obj = (Object[])it.next();			
		
			HashMap mapa = new HashMap(2);		
			mapa.put("idRecurso",Long.valueOf(obj[0].toString()));
			mapa.put("nmRecurso",obj[1].toString());	
			
			novaLista.add(mapa);
		}			
		return  novaLista;
	}	
	
   /**
    * FindPaginated de Aba.
    * @param criteria com os parrametros de pesquisa no banco.
    * @return ResultSetPage com o resultado de pesquisa no banco.
    */
	public ResultSetPage findPagineted(TypedFlatMap criteria){   	
	   return getService().findPagineted(criteria);   
	} 
   
   
   /**
    * FindPaginatedRowCount de Aba.
    * @param criteria com os parrametros de pesquisa no banco.
    * @return Integer com o total de resitros do resultado de pesquisa no banco.
    */
   public Integer findPaginetedRowCount(TypedFlatMap criteria){   	
       return getService().findPaginetedRowCount(criteria);
   }

public ModuloSistemaService getModuloSistemaService() {
	return moduloSistemaService;
}

public void setModuloSistemaService(ModuloSistemaService moduloSistemaService) {
	this.moduloSistemaService = moduloSistemaService;
}

  
   
}