package com.mercurio.lms.configuracoes.action;

import java.io.Serializable;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.joda.time.YearMonthDay;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.ParametroBoletoFilial;
import com.mercurio.lms.configuracoes.model.service.ParametroBoletoFilialService;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.JTDateTimeUtils;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.configuracoes.manterParametrosBoletoFilialAction"
 */
public class ManterParametrosBoletoFilialAction extends CrudAction{

	/** Set ParametrosBoletoFilialService - Spring (Inversion of Control) */
	public void setParametroBoletoFilialService(ParametroBoletoFilialService parametrosBoletoFilialService) {
		this.defaultService = parametrosBoletoFilialService;
	}
	
	/** Set FilialService - Spring (inversion of Control) */
	private FilialService filialService;
	public void setFilialService(FilialService filialService){
		this.filialService = filialService;
	}
	
	/**
	 * Insere, caso o id seja <code>null</code> ou atualiza uma entidade, caso contrário.
	 * @param bean entidade a ser armazenada.
	 * @return entidade que foi armazenada.
	 */
    public Serializable store(ParametroBoletoFilial bean) {
        return ((ParametroBoletoFilialService)this.defaultService).store(bean);
    }
    
    /**
     * Remove uma ParametroBoletoFilial pelo id passado mpor parametro
     * @param id
     */
    public void removeById(Long id) {
		((ParametroBoletoFilialService)this.defaultService).removeById(id);
	}
	
	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		((ParametroBoletoFilialService)this.defaultService).removeByIds(ids);
	}
    
	/**
	 * Busca uma ParametroBoletoFilial de acordo com o id passado por parametro
	 * @param id
	 * @return
	 */
	public Serializable findById(Long id) {
		return ((ParametroBoletoFilialService)this.defaultService).findById(id);
	}
	
	/**
	 * 
	 *
	 * @author Hector Julian Esnaola Junior
	 * @since 24/07/2006
	 *
	 * @param map
	 * @return
	 *
	 */
	public List findLookupFilial(TypedFlatMap map){
		return this.filialService.findLookup(map);
	}

	
	
	
	/**
	 * Método que verifica se a data da vigencia inicial é maior que a data de hj,
	 * em caso negativo bloqueia os campos.
	 * 
	 * @author Diego Umpierre
	 * @since 22/09/2006
	 * 
	 * @return Map 
	 */
	public Map validatePermissionEdit(TypedFlatMap criteria){
		
		Map map = new HashMap();
		
		/** Caso a dtVigenciaFinal seja menor que a data atual */	
		if (criteria.getYearMonthDay("dtVigenciaFinal") != null && JTDateTimeUtils.comparaData(
				criteria.getYearMonthDay("dtVigenciaFinal"), 
				JTDateTimeUtils.getDataAtual()) < 0) {
			map.put("result", "M");
		/** Caso a dtVigenciaInicial seja menor que a data atual */
		} else if(JTDateTimeUtils.comparaData(criteria.getYearMonthDay("dtVigenciaInicial"), JTDateTimeUtils.getDataAtual()) < 0){
				map.put("result", "T");
		/** Caso a dtVigenciaInicial seja maior que a data atual */
		}else{
			map.put("result", "F");
		}
		
		map.put("daOnde",criteria.get("daOnde"));
		
		return map;
	}

	
    /**
     * Busca a data atual
     * @param tfm Critérios de pesquisa
     * @return YearMonthDay Data atual
     */
    public YearMonthDay findDataAtual(TypedFlatMap tfm){
    	return JTDateTimeUtils.getDataAtual();
    	 
    }

    
	/**
	 * Método responsável por buscar os dados da grid 
	 * 
	 * @author Diego Umpierre
	 * @since 26/09/2006
	 * 
	 * @param tfm Critérios de pesquisa
	 * @return ResultSetPage Dados resultantes da query de pesquisa e dados de paginação
	 */
	public ResultSetPage findPaginatedTela(TypedFlatMap criteria) {
		return ((ParametroBoletoFilialService)this.defaultService).findPaginatedTela(criteria);
	}
	
	/**
	 * Método responsável por buscar o número de linhas da grid 
	 * 
	 * @author Diego Umpierre
	 * @since 26/09/2006
	 * 
	 * @param criteria
	 * @return Integer
	 */
	public Integer getRowCountTela(TypedFlatMap criteria) {
		return ((ParametroBoletoFilialService)this.defaultService).getRowCountTela(criteria);
	}
    
	
}
