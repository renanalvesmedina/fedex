package com.mercurio.lms.configuracoes.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.ListIterator;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.pojo.Autoridade;
import com.mercurio.adsm.framework.model.pojo.AutoridadeLista;
import com.mercurio.adsm.framework.model.pojo.ListaPermissao;
import com.mercurio.adsm.framework.model.pojo.Perfil;
import com.mercurio.adsm.framework.model.pojo.UsuarioADSM;
import com.mercurio.adsm.framework.model.service.AutoridadeListaService;
import com.mercurio.adsm.framework.model.service.ListaPermissaoService;
import com.mercurio.adsm.framework.model.service.PerfilService;
import com.mercurio.adsm.framework.model.service.UsuarioADSMService;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.service.UsuarioService;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;


/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.seguranca.manterAutoridadeListaAction"
 */
public class ManterAutoridadeListaAction extends CrudAction {
	
	private ListaPermissaoService listaPermissaoService;
	private UsuarioService usuarioService;
	private PerfilService perfilService;	
	private UsuarioADSMService usuarioADSMService;
	
	public void setDefaultService(AutoridadeListaService defaultService) {		
		this.defaultService = defaultService;
	}	
		
	private AutoridadeListaService getService()
	{
		return ((AutoridadeListaService)defaultService);		
	}
	
	public void setListaPermissaoService(ListaPermissaoService listaPermissaoService) {		
		this.listaPermissaoService = listaPermissaoService;
	}
	
	public void setUsuarioService(UsuarioService usuarioService) {		
		this.usuarioService = usuarioService;
	}
	
	public void setPerfilService(PerfilService perfilService) {		
		this.perfilService = perfilService;
	}
	
	public List findLookupListaPermissao(TypedFlatMap tfm) {		
		List list = this.listaPermissaoService.findLookup(tfm);
		
		if (list != null && list.size() == 1) {
			return list;
		} else {
			tfm.put("nmListaPermissao",tfm.get("nmListaPermissao").toString() + "%");
			list = this.listaPermissaoService.findLookup(tfm);
		}
		
		return list;
	}
				
	public List findLookupUsuario(TypedFlatMap tfm) {		
		return this.usuarioService.findLookup(tfm);
	}
	
	public List findLookupPerfil(TypedFlatMap tfm) {		
		return this.perfilService.findLookup(tfm);
	}	
	
	
   /**
	 * Metodo que persist os dados.	  
	 * @author Diego Pacheco - LMS
	 * @param TypedFlatMap criteria 
	 * @return Serializable
	 */
	public Serializable store(TypedFlatMap tfm) 
	{		
		AutoridadeLista autoridadeLista = new AutoridadeLista();
		ListaPermissao listaPermissao = new ListaPermissao();
		Autoridade autoridade = new Autoridade();
		Perfil perfil = null;
		UsuarioADSM usuario = null;
		
		if (tfm.get("idAutoridadeLista")!=null)	autoridadeLista.setIdAutoridadeLista(tfm.getLong("idAutoridadeLista"));
		
		/* Define o tipo de Autoridade. */
		if (tfm.getString("tpAutoridade").equals("Perfil"))
		{
			perfil = new Perfil();
			perfil.setIdPerfil(tfm.getLong("perfil.idPerfil"));
			autoridade.setIdAutoridade(perfil.getIdPerfil());
			autoridade.setPerfil(perfil);
		}
		else
		{
			if (tfm.getString("tpAutoridade").equals("Usuário"))
			{
				usuario = new UsuarioADSM();
				usuario.setIdUsuario(tfm.getLong("usuario.idUsuario"));
				autoridade.setIdAutoridade(usuario.getIdUsuario());
				autoridade.setUsuario(usuario);
			}
		}
		
		listaPermissao.setIdListaPermissao(tfm.getLong("listaPermissao.idListaPermissao"));
		
		autoridadeLista.setListaPermissao(listaPermissao);
		autoridadeLista.setAutoridade(autoridade);
				
		Serializable ret = getService().store(autoridadeLista);
		return ret;
		
	}		
	
	public List findLookupUsuarioAdsm(TypedFlatMap criteria) {
		
		List result = this.usuarioADSMService.findLookup(criteria);		
		
		ArrayList newList = null;		
		if (result!=null && result.size()>0)
		{
			
			ListIterator lit = result.listIterator();
			newList = new ArrayList();
			while(lit.hasNext())
			{
				UsuarioADSM usuarioAdsm = (UsuarioADSM)lit.next(); 
				HashMap newMap = new HashMap();
				newMap.put("login",usuarioAdsm.getLogin());
				newMap.put("idUsuario",usuarioAdsm.getIdUsuario());

				newList.add(newMap);				
			}
		}
		return newList;

	}
   

	public ResultSetPage findPaginatedAutoridadeLista(TypedFlatMap criteria) {		
		return getService().findPaginatedAutoridadeLista(criteria);
	}

	public Integer findAutoridadeListaRowCount(TypedFlatMap criteria) {		
		return getService().findAutoridadeListaRowCount(criteria);
	}

	
	public void removeById(Long id) {
		getService().removeById((Long)id);
	}
	
	/**
	*
	**/
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		getService().removeByIds(ids);
	}

	public TypedFlatMap findById(Long id) {
		TypedFlatMap tfm = getService().findByIdMap(id);
		tfm.put("hIdUsuarioADSM",tfm.getLong("usuario.idUsuario"));	
		return tfm;	
	}

	public UsuarioADSMService getUsuarioADSMService() {
		return usuarioADSMService;
	}

	public void setUsuarioADSMService(UsuarioADSMService usuarioADSMService) {
		this.usuarioADSMService = usuarioADSMService;
	}	
	
}