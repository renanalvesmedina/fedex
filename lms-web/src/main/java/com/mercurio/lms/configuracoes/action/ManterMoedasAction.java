package com.mercurio.lms.configuracoes.action;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.hibernate.VarcharI18n;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Moeda;
import com.mercurio.lms.configuracoes.model.service.MoedaService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.configuracoes.manterMoedasAction"
 */

public class ManterMoedasAction extends CrudAction {

	public void removeById(java.lang.Long id) {
		getMoedaService().removeById(id);
	}

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		getMoedaService().removeByIds(ids);
	}

	 /** Busca a moeda de acordo com o id passado
	 *  
	 * @author Diego Umpierre
	 * @since 17/08/2006
	 * 
	 * @param Long id
	 * @return Map com os dados da Moeda 
	 * */
	public Map<String, Object> findById(java.lang.Long id) {
		Moeda moeda = getMoedaService().findById(id); 

		Map<String, Object> result = new HashMap<String, Object>();

		result.put("idMoeda", moeda.getIdMoeda());
		result.put("dsMoeda", moeda.getDsMoeda());
		result.put("sgMoeda", moeda.getSgMoeda());
		result.put("tpSituacao", moeda.getTpSituacao().getValue());
		result.put("dsSimbolo", moeda.getDsSimbolo());
		result.put("nrIsoCode", moeda.getNrIsoCode());

		//separando os valores do campo DS_VALOR_EXTENSO
		String[] desc = moeda.getDsValorExtenso().toString().split(";");

		if (desc.length > 0)result.put("nmDecimalSingular", desc[0]);
		if (desc.length > 1)result.put("nmDecimalPlural", desc[1]);
		if (desc.length > 2)result.put("nmInteiroSingular", desc[2]);
		if (desc.length > 3)result.put("nmInteiroPlural", desc[3]);

		return  result;
	}

	/** Salva a moeda
	 *  
	 * @author Diego Umpierre
	 * @since 17/08/2006
	 * 
	 * @param TypedFlatMap map com os dados da moeda
	 * @return Map com o id da moeda que acabo de ser inserido
	 * */
	public Map<String, Object> store(TypedFlatMap map) {
		Moeda moeda = new Moeda();

		moeda.setIdMoeda(map.getLong("idMoeda"));
		moeda.setDsMoeda(map.getVarcharI18n("dsMoeda"));
		moeda.setSgMoeda(map.getString("sgMoeda"));
		moeda.setTpSituacao(new DomainValue(map.getString("tpSituacao")));
		moeda.setDsSimbolo(map.getString("dsSimbolo"));
		moeda.setNrIsoCode(map.getShort("nrIsoCode"));

		//concatenando os valores do campo DS_VALOR_EXTENSO
		StringBuffer dsValEx = new StringBuffer();

		dsValEx.append( map.getVarcharI18n("nmDecimalSingular").toString().replaceAll(";","") ).append(";")
				.append( map.getVarcharI18n("nmDecimalPlural").toString().replaceAll(";","")  ).append(";") 
				.append(map.getVarcharI18n("nmInteiroSingular").toString().replaceAll(";","") ).append(";") 
				.append( map.getVarcharI18n("nmInteiroPlural").toString().replaceAll(";","") );

		moeda.setDsValorExtenso(new VarcharI18n( dsValEx.toString()));

		Long idMoeda = (Long) getMoedaService().store(moeda);

		Map<String, Object> result = new HashMap<String, Object>();

		result.put("idMoeda", idMoeda);

		//separando os valores do campo DS_VALOR_EXTENSO
		String[] desc = moeda.getDsValorExtenso().toString().split(";");

		if (desc.length > 0)result.put("nmDecimalSingular", desc[0]);
		if (desc.length > 1)result.put("nmDecimalPlural", desc[1]);
		if (desc.length > 2)result.put("nmInteiroSingular", desc[2]);
		if (desc.length > 3)result.put("nmInteiroPlural", desc[3]);

		return result;
	}

	public void setMoedaService(MoedaService moedaService) {
		this.defaultService = moedaService;
	}

	private MoedaService getMoedaService() {
		return (MoedaService) this.defaultService;
	}
}
