package com.mercurio.lms.configuracoes.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.EmpresaCobranca;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.configuracoes.model.service.EmpresaCobrancaService;
import com.mercurio.lms.configuracoes.model.service.PessoaService;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.configuracoes.manterEmpresasCobrancaAction"
 */

public class ManterEmpresasCobrancaAction extends CrudAction {	
	
	private PessoaService pessoaService;
	private DomainValueService domainValueService;
	
	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}
	public void setEmpresaCobranca(EmpresaCobrancaService empresaCobrancaService) {
		this.defaultService = empresaCobrancaService;
	}
    public void removeById(java.lang.Long id) {
        ((EmpresaCobrancaService)defaultService).removeById(id);
    }

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	((EmpresaCobrancaService)defaultService).removeByIds(ids);
    }
    
    public Serializable findById(java.lang.Long id) {
    	return ((EmpresaCobrancaService)defaultService).findById((Long)id);
    }
    
    public Map store(EmpresaCobranca bean) {
    	if (bean.getPessoa().getIdPessoa() != null){
    		Pessoa pessoa = pessoaService.findById(bean.getPessoa().getIdPessoa());
    		
    		pessoa.setNmPessoa(bean.getPessoa().getNmPessoa());
    		pessoa.setDsEmail(bean.getPessoa().getDsEmail());

    		bean.setPessoa(pessoa);
    	}

    	Serializable id =  ((EmpresaCobrancaService)defaultService).store(bean);

    	EmpresaCobranca empresaCobranca = ((EmpresaCobrancaService)defaultService).findById((Long)id);
    	
    	TypedFlatMap map = new TypedFlatMap();
    	
    	map.put("idEmpresaCobranca", empresaCobranca.getIdEmpresaCobranca());
    	map.put("pessoa.idPessoa", empresaCobranca.getPessoa().getIdPessoa());
    	map.put("pessoa.dhInclusao", empresaCobranca.getPessoa().getDhInclusao());
    	
    	return map;
    }
    
    /**
	 * Verifica se já existe uma Empresa Cobrança com o Número e Tipo de Identificação informado.
	 * @param map deve conter o numero e tipo de identificação; 
	 */
	public List validateExistenciaEmpresaCobranca(TypedFlatMap criteria){
		Pessoa pessoa = ((EmpresaCobrancaService)defaultService).validateEmpresaCobranca(criteria);
		TypedFlatMap map = new TypedFlatMap();
		
		List lstPessoa = new ArrayList();
		
		if (pessoa != null){
			map.put("idPessoa", pessoa.getIdPessoa());
			map.put("nmPessoa", pessoa.getNmPessoa());
			map.put("nrIdentificacao", pessoa.getNrIdentificacaoFormatado());
			map.put("dsEmail", pessoa.getDsEmail());
			map.put("dhInclusao", pessoa.getDhInclusao());
			
			lstPessoa.add(map);
		}else{
			lstPessoa.add(criteria);
		}
		
		
		
		
		
		return lstPessoa;
	}
	
	/**
	 * 
	 *
	 * @author Hector Julian Esnaola Junior
	 * @since 20/07/2007
	 *
	 * @param tfm
	 * @return
	 *
	 */
	public List findTpIdentificacaoPessoa(TypedFlatMap tfm){
	
		List lst = new ArrayList();
		
		lst.add("CNPJ");
		lst.add("CUIT");
		lst.add("RUT");
		lst.add("RUC");
		
		return domainValueService.findByDomainNameAndValues("DM_TIPO_IDENTIFICACAO_PESSOA", lst);
	}
	
	public void setPessoaService(PessoaService pessoaService) {
		this.pessoaService = pessoaService;
	}
}
