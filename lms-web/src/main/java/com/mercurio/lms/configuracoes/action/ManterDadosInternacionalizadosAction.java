package com.mercurio.lms.configuracoes.action;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.util.FilterResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.AllViews;
import com.mercurio.lms.configuracoes.model.IdiomaBean;
import com.mercurio.lms.configuracoes.model.SistemaBean;
import com.mercurio.lms.configuracoes.model.service.DadosInternacionalizadosService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.configuracoes.manterDadosInternacionalizadosAction"
 */

public class ManterDadosInternacionalizadosAction extends CrudAction {

	private static final String DEFAULT_LOCALE = "pt_BR";
	
	private DadosInternacionalizadosService dadosI18nService;
	private DomainValueService domainValueService;

	public void setDadosInternacionalizadosService(DadosInternacionalizadosService service) {
		this.dadosI18nService = service;
	}
	
	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}
	
	/**
	 * Popula a combobox de sistemas.
	 * 
	 * @return
	 */
	public List findSistemas() {
		
		List sistemas = dadosI18nService.findSistemas();
		List retorno = new ArrayList(sistemas.size());
		for (Iterator iter = sistemas.iterator(); iter.hasNext();) {
			SistemaBean element = (SistemaBean) iter.next();
			Map sys = new HashMap();
			sys.put("nmSistema", element.getNmSistema());
			sys.put("idSistema", element.getIdSistema());
			retorno.add(sys);
		}
		
		return retorno;
	}
	
	/**
	 * Busca a quantidade de caracteres maximo para a coluna.
	 * 
	 * @param criteria
	 * @return
	 */
	public Integer findColumnLength(TypedFlatMap criteria) {
		String columnName = criteria.getString("coluna");
		if (StringUtils.isBlank(columnName)) {
			return 0;
		}
		String tableName = criteria.getString("tabela.idTabela");
		Integer idSistema = criteria.getInteger("sistema");

		return dadosI18nService.findColumnLength(tableName, columnName, idSistema);
	}
	
	public List findLocale() {
		// busca os itens do dominio TP_LINGUAGEM com os idiomas suportados
		List list = domainValueService.findDomainValues("TP_LINGUAGEM");
		// remove o idioma portugues e os idiomas inativos
		List retorno = new ArrayList(list.size());
		for (int i = 0; i < list.size(); i++) {
			DomainValue domain = (DomainValue) list.get(i);
			if (!domain.getValue().equals(DEFAULT_LOCALE) && domain.getStatus().booleanValue()) {
				Map bean = new HashMap();
				bean.put("nmLocale", domain.getDescription());
				bean.put("locale", domain.getValue());
				retorno.add(bean);
			}
		}
		
		return retorno;
	}
	
	/**
	 * Consulta paginada grid editavel da tela de dados i18n.
	 *  
	 * @param criteria
	 * @return
	 */
	public ResultSetPage findDadosI18n(TypedFlatMap criteria) {
		return dadosI18nService.findDadosI18n(criteria);
	}
	
	/**
	 * Consulta de numero de linhas totais da grid editavel da tela de dados i18n.
	 *  
	 * @param criteria
	 * @return
	 */
	public Integer getRowCountDadosI18n(TypedFlatMap criteria) {
		return dadosI18nService.getRowCountDadosI18n(criteria);
	}
	
	/**
	 * Consulta da lookup de tabelas que possuem i18n.
	 * 
	 * @param criteria
	 * @return
	 */
	public List findTabelasInternacionalizaveis(TypedFlatMap criteria) {
		final List tabelas = dadosI18nService.findTabelasI18n(criteria.getString("nmTabela"), 
												criteria.getInteger("idSistema"));
		
		List retorno = new ArrayList();
		
		for (Iterator iter = tabelas.iterator(); iter.hasNext();) {
			AllViews av = (AllViews) iter.next();
			TypedFlatMap tfm = new TypedFlatMap();
			tfm.put("nmTabela", av.getViewName());
			tfm.put("idTabela", av.getViewName()); // deve retornar o nome da view como ID devido a limitação do
			retorno.add(tfm);				 // mecanismo de combo/lookup dinamico q só funciona com o valor do id
											 // para filtros
		}
		
		return retorno;
	}
	
	/**
	 * Consulta paginada da tela de pesquisa da popup de tabelas i18n.
	 * 
	 * @param criteria
	 * @return
	 */
	public ResultSetPage findTabelasInternacionalizadasLookup(TypedFlatMap criteria) {
		ResultSetPage page =  dadosI18nService.findTabelasI18nLookup(criteria);
		FilterResultSetPage filter = new FilterResultSetPage(page) {

			public Map filterItem(Object item) {
				Map map = new HashMap(2);
				map.put("nmTabela", ((Map)item).get("VIEW_NAME"));
				map.put("idTabela", ((Map)item).get("VIEW_NAME"));
				return map;
			}
			
		};
		
		return (ResultSetPage) filter.doFilter();
	}

	/**
	 * Preenche a combobox de colunas da tabela i18n.
	 * @param criteria
	 * @return
	 */
	public List findColunasInternacionalizadas(TypedFlatMap criteria) {	
		
		List colunas = dadosI18nService.findColunasTabelasI18n(criteria.getString("nmTabela"), 
													   criteria.getInteger("idSistema"));

		List retorno = new ArrayList(colunas.size());
		
		for (Iterator iter = colunas.iterator(); iter.hasNext();) {
			Map col = (Map) iter.next();
			TypedFlatMap tfm = new TypedFlatMap();
			tfm.put("nmColuna", col.get("COLUMN_NAME"));
			tfm.put("idColuna", col.get("COLUMN_NAME")); 
			retorno.add(tfm);				 
		}

		return retorno;
	}
	
	public Integer getRowCountTabelasInternacionalizadas(TypedFlatMap criteria) {
		return dadosI18nService.getRowCountTabelasI18n(criteria.getString("nmTabela"), 
													   criteria.getInteger("idSistema"));
	}
	
	public List storeUpdateDelete(TypedFlatMap criteria) {
		
		final String columnName = criteria.getString("coluna");
		final String tableName = criteria.getString("tabela.idTabela");
		final Integer idSistema = criteria.getInteger("sistema");
		final Locale locale = new Locale(criteria.getString("locale").substring(0, 2), criteria.getString("locale").substring(3));
		
		List dadosI18nTela = criteria.getList("dadosInternacionalizados");
		
		List dadosI18n = new ArrayList(dadosI18nTela.size());
		
		for (Iterator iter = dadosI18nTela.iterator(); iter.hasNext();) {
			Map dado = (Map) iter.next();
			IdiomaBean idioma = new IdiomaBean();
			idioma.setIdPortugues(Integer.valueOf((String) dado.get("id")));
			idioma.setDescricaoTraduzida((String) dado.get("descricaoTraduzida"));
			idioma.setLocale(locale);
			dadosI18n.add(idioma);
		}
		
		dadosI18nService.storeUpdateDelete(tableName, columnName, idSistema, locale, dadosI18n);
		return Collections.EMPTY_LIST;
		
	}
}
