package com.mercurio.lms.tributos.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.joda.time.YearMonthDay;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.configuracoes.model.service.PessoaService;
import com.mercurio.lms.tributos.model.ExcecaoICMSCliente;
import com.mercurio.lms.tributos.model.RemetenteExcecaoICMSCli;
import com.mercurio.lms.tributos.model.service.ExcecaoICMSClienteService;
import com.mercurio.lms.tributos.model.service.RemetenteExcecaoICMSCliService;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.vendas.model.Cliente;

/**
 * Generated by: ADSM ActionGenerator
 * 
 * Não inserir documentação após ou remover a tag do XDoclet a seguir. O valor
 * do <code>id</code> informado abaixo deve ser utilizado para referenciar
 * este serviço.
 * 
 * @spring.bean id="lms.tributos.manterRemetentesExcecaoICMSCienteAction"
 */
public class ManterRemetentesExcecaoICMSCienteAction extends CrudAction {

	// Variáveis de instância.
	private PessoaService pessoaService;
	private ExcecaoICMSClienteService excecaoIcmsClienteService;
	private RemetenteExcecaoICMSCliService remetenteExcecaoICMSCliService;

	/**
	 * Insere, caso o id seja <code>null</code> ou atualiza uma entidade, caso
	 * contrário.
	 * 
	 * @param bean
	 *            entidade a ser armazenada.
	 * @return entidade que foi armazenada.
	 */
	public Serializable store(TypedFlatMap tfm) {
		RemetenteExcecaoICMSCli bean = populateRemetenteExcecaoICMSCli(tfm);
		return getRemetenteExcecaoICMSCliService().store(bean);
	}

	public RemetenteExcecaoICMSCli populateRemetenteExcecaoICMSCli(
			TypedFlatMap tfm) {
		RemetenteExcecaoICMSCli bean = new RemetenteExcecaoICMSCli();

		ExcecaoICMSCliente excecaoIcmsCliente = new ExcecaoICMSCliente();
		excecaoIcmsCliente.setIdExcecaoICMSCliente(tfm
				.getLong("excecaoICMSCliente.idExcecaoICMSCliente"));

		bean.setExcecaoICMSCliente(excecaoIcmsCliente);
		bean.setIdRemetenteExcecaoICMSCli(tfm
				.getLong("idRemetenteExcecaoICMSCli"));
		bean.setDtVigenciaFinal(tfm.getYearMonthDay("dtVigenciaFinal"));
		bean.setDtVigenciaInicial(tfm.getYearMonthDay("dtVigenciaInicial"));
		bean.setNrCnpjParcialRem(excecaoIcmsClienteService.formatCnpj(tfm
				.getString("nrCnpjParcialRem"), tfm.getString("tipoCnpj")));
		return bean;
	}

	/**
	 * Remove uma ParametroSubstituicaoTrib pelo id passado mpor parametro
	 * 
	 * @param id
	 */
	public void removeById(Long id) {
		getRemetenteExcecaoICMSCliService().removeById(id);
	}

	/**
	 * 
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		getRemetenteExcecaoICMSCliService().removeByIds(ids);
	}

	/**
	 * 
	 * 
	 * @author Hector Julian Esnaola Junior
	 * @since 03/08/2006
	 * 
	 * @param nrIdentificacaoParcial
	 * @return pessoa <Pessoa>
	 * 
	 */
	public Pessoa findFirstPessoaByNrIdentificacao(String nrIdentificacaoParcial) {
		Pessoa pessoa = null;
		List lst = null;
		lst = pessoaService
				.findNrCNPJParcialEqualNrIdentificacaoPessoa(nrIdentificacaoParcial);
		if (lst != null && !lst.isEmpty())
			pessoa = (Pessoa) lst.get(0);
		return pessoa;
	}

	/**
	 * Busca uma ParametroSubstituicaoTrib de acordo com o id passado por
	 * parametro
	 * 
	 * @param id
	 * @return
	 */
	public Map findById(Long id) {

		TypedFlatMap ret = new TypedFlatMap();

		RemetenteExcecaoICMSCli remExCli = getRemetenteExcecaoICMSCliService()
				.findById(id);

		ret.put("excecaoICMSCliente.idExcecaoICMSCliente", remExCli
				.getExcecaoICMSCliente().getIdExcecaoICMSCliente());
		ret.put("idRemetenteExcecaoICMSCli", remExCli
				.getIdRemetenteExcecaoICMSCli());
		ret.put("excecaoICMSCliente.unidadeFederativa.idUnidadeFederativa",
				remExCli.getExcecaoICMSCliente().getUnidadeFederativa()
						.getIdUnidadeFederativa());
		ret.put("excecaoICMSCliente.unidadeFederativa.sgUnidadeFederativa",
				remExCli.getExcecaoICMSCliente().getUnidadeFederativa()
						.getSgUnidadeFederativa());
		ret.put("excecaoICMSCliente.unidadeFederativa.nmUnidadeFederativa",
				remExCli.getExcecaoICMSCliente().getUnidadeFederativa()
						.getNmUnidadeFederativa());
		ret.put("excecaoICMSCliente.unidadeFederativa.siglaDescricao", remExCli
				.getExcecaoICMSCliente().getUnidadeFederativa()
				.getSiglaDescricao());

		ret.put("excecaoICMSCliente.tipoTributacaoIcms.idTipoTributacaoIcms",
				remExCli.getExcecaoICMSCliente().getTipoTributacaoIcms()
						.getIdTipoTributacaoIcms());
		ret.put("excecaoICMSCliente.nrCNPJParcialDev", remExCli
				.getExcecaoICMSCliente().getNrCNPJParcialDev());

		// nome devedor
		Pessoa p = findFirstPessoaByNrIdentificacao(remExCli
				.getExcecaoICMSCliente().getNrCNPJParcialDev().toString());

		if (p != null) {
			ret.put("nmDevedor", p.getNmPessoa());
		}

		ret.put("nrCnpjParcialRem", remExCli.getNrCnpjParcialRem());

		// nome remetente
		p = findFirstPessoaByNrIdentificacao(remExCli.getNrCnpjParcialRem()
				.toString());

		if (p != null) {
			ret.put("nomeRemetente", p.getNmPessoa());
		}

		ret.put("dtVigenciaInicial", remExCli.getDtVigenciaInicial());
		ret.put("dtVigenciaFinal", remExCli.getDtVigenciaFinal());

		return ret;

	}

	/**
	 * Verifica se para o cnpj informado existe uma Pessoa.
	 * 
	 * @author HectorJ
	 * @since 31/05/2006
	 * 
	 * @param nrCNPJParcialRem
	 */
	public Map findNrCNPJParcialRemEqualNrIdentificacaoPessoa(
			TypedFlatMap criteria) {
		TypedFlatMap ret = new TypedFlatMap();

		// Formata o cnpj de acordo com o tipo selecionado na tela.
		String nrIdentificacao = excecaoIcmsClienteService.formatCnpj(criteria
				.getString("nrCNPJParcial"), criteria.getString("tipoCnpj"));

		Cliente cliente = remetenteExcecaoICMSCliService.findClienteByCNPJParcial(nrIdentificacao);
		if (cliente != null){
			ret.put("nrCnpjParcialRem", nrIdentificacao);
			ret.put("nomeRemetente",cliente.getPessoa().getNmPessoa());
		}
		return ret;
	}

	/**
	 * Valida se a dtVigenciaFinal é maior ou igual a data atual.
	 * 
	 * @param tfm
	 * @return
	 */
	public Map validateDtVigenciaFinal(TypedFlatMap tfm) {
		Map retorno = new HashMap<String, Boolean>();
		Boolean maiorIgualDtAtual;

		YearMonthDay dtVigenciaFinal = tfm.getYearMonthDay("dtVigenciaFinal");
		if (dtVigenciaFinal == null) {
			maiorIgualDtAtual = Boolean.FALSE;
		} else {
			maiorIgualDtAtual = JTDateTimeUtils.comparaData(dtVigenciaFinal,
					JTDateTimeUtils.getDataAtual()) >= 0;
		}
		retorno.put("dtVigenciaFinalMaiorIgualDtAtual", maiorIgualDtAtual);

		return retorno;
	}

	/**
	 * Método responsável por buscar os dados da grid
	 * 
	 * @author Diego Umpierre
	 * @since 18/07/2006
	 * 
	 * @param tfm
	 *            Critérios de pesquisa
	 * @return ResultSetPage Dados resultantes da query de pesquisa e dados de
	 *         paginação
	 */
	public ResultSetPage findPaginatedTela(TypedFlatMap criteria) {
		if (!"".equals(criteria.getString("nrCNPJParcialRem"))) {
			// Formata o cnpj de acordo com o tipo selecionado na tela.
			String nrIdentificacao = excecaoIcmsClienteService.formatCnpj(
					criteria.get("nrCNPJParcialRem").toString(), criteria.get(
							"tipoCnpj").toString());
			criteria.put("nrCnpjParcialRem", nrIdentificacao);
		}

		ResultSetPage rsp = getRemetenteExcecaoICMSCliService()
				.findPaginatedTela(criteria);
		List resultados = rsp.getList();
		TypedFlatMap ret = null;
		List retorno = new ArrayList();

		for (Iterator iter = resultados.iterator(); iter.hasNext();) {

			RemetenteExcecaoICMSCli remExCli = (RemetenteExcecaoICMSCli) iter
					.next();
			ret = new TypedFlatMap();
			ret.put("idRemetenteExcecaoICMSCli", remExCli
					.getIdRemetenteExcecaoICMSCli());
			List pessoas = null;
			String nrCNPJParcial = remExCli.getNrCnpjParcialRem();
			try {
				pessoas = pessoaService
						.findNrCNPJParcialEqualNrIdentificacaoPessoa(nrCNPJParcial);
			} catch (Exception e) {
			}

			if (pessoas != null && !pessoas.isEmpty()) {
				ret.put("nrCnpjParcialRem", nrCNPJParcial + " - "
						+ ((Pessoa) pessoas.get(0)).getNmPessoa());
			} else {
				ret.put("nrCnpjParcialRem", nrCNPJParcial);
			}

			ret.put("dtVigenciaInicial", remExCli.getDtVigenciaInicial());
			ret.put("dtVigenciaFinal", remExCli.getDtVigenciaFinal());

			retorno.add(ret);
		}
		rsp.setList(retorno);

		return rsp;
	}

	/**
	 * Método responsável por buscar o número de linhas da grid
	 * 
	 * @author Diego Umpierre
	 * @since 18/07/2006
	 * 
	 * @param criteria
	 * @return Integer
	 */
	public Integer getRowCountTela(TypedFlatMap criteria) {
		return getRemetenteExcecaoICMSCliService().getRowCountTela(criteria);
	}

	public void setPessoaService(PessoaService pessoaService) {
		this.pessoaService = pessoaService;
	}

	public void setRemetenteExcecaoICMSCliService(
			RemetenteExcecaoICMSCliService remetenteExcecaoICMSCliService) {
		this.remetenteExcecaoICMSCliService = remetenteExcecaoICMSCliService;
	}

	public RemetenteExcecaoICMSCliService getRemetenteExcecaoICMSCliService() {
		return remetenteExcecaoICMSCliService;
	}

	public void setExcecaoIcmsClienteService(
			ExcecaoICMSClienteService excecaoIcmsClienteService) {
		this.excecaoIcmsClienteService = excecaoIcmsClienteService;
	}

}
