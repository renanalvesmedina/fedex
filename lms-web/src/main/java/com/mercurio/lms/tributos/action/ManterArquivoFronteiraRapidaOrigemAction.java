package com.mercurio.lms.tributos.action;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.joda.time.DateTime;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.model.service.ManifestoNacionalCtoService;
import com.mercurio.lms.expedicao.model.service.ManifestoViagemNacionalService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.session.SessionUtils;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.tributos.manterArquivoFronteiraRapidaOrigemAction"
 */

public class ManterArquivoFronteiraRapidaOrigemAction extends CrudAction {

	private ManifestoNacionalCtoService manifestoNacionalCtoService;
	private FilialService filialService;
	private ConhecimentoService conhecimentoService;
	private ManifestoViagemNacionalService manifestoViagemNacionalService;
	private DomainValueService domainValueService;
	
	/**
	 * Método responsável por setar a flag de fronteira rápida para incluído ou não incluído
	 * @param criteria
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void storeConhecimentosFronteiraRapida(List criteria){
    	manifestoNacionalCtoService.storeConhecimentosFronteiraRapida(criteria);
    }

	
	/**
     * Método responsável por fazer a contagem dos registros que retornam do hql para paginação.
     * @param criteria
     * @return Integer contendo o número de registros retornados.
     */
    public Integer getRowCountByManifestoViagemNacional(TypedFlatMap criteria){
    	return manifestoViagemNacionalService.getRowCountByManifestoViagemNacional(criteria);
    }
    
    /**
     * Método (sobrescrito) responsável por carregar dados páginados de acordo com os filtros passados
     * @param criteria
     * @return List contendo o resultado do hql.
     */
	public ResultSetPage findPaginatedByManifestoViagemNacional(TypedFlatMap criteria) {
		return manifestoViagemNacionalService.findPaginatedByManifestoViagemNacional(criteria);
	}
	
	public List findLookupServiceDocumentFilialCTR(Map criteria) {
		return findLookupFilialByDocumentoServico(criteria);
	}
	
	public List findLookupFilialByDocumentoServico(Map criteria) {
		List list = getFilialService().findLookup(criteria);
		List retorno = new ArrayList();
		
		for (Iterator iter = list.iterator(); iter.hasNext();) {
    		Filial filial = (Filial)iter.next();
    		TypedFlatMap typedFlatMap = new TypedFlatMap();
    		typedFlatMap.put("idFilial", filial.getIdFilial());
    		typedFlatMap.put("sgFilial", filial.getSgFilial());
    		typedFlatMap.put("pessoa.nmFantasia",
    				         filial.getPessoa().getNmFantasia());
    		retorno.add(typedFlatMap);
    	}
		
		return retorno;
	} 
	
	public List findLookupServiceDocumentNumberCTR(TypedFlatMap criteria) {
		Long idFilial 		  = criteria.getLong("filialByIdFilialOrigem.idFilial");
		Long nrConhecimento   = criteria.getLong("nrDoctoServico");
		String tpDoctoServico = criteria.getString("tpDocumentoServico");
    	return getConhecimentoService().findLookupDocumentNumberCTR(nrConhecimento, idFilial, tpDoctoServico);
    }

    public List findLookupManifestoDocumentFilialVN(Map criteria) {
	   	return findLookupFilialByManifesto(criteria);
	}
    
    public List findLookupFilialByManifesto(Map criteria) {
    	List list = filialService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		Filial filial = (Filial)iter.next();
    		TypedFlatMap typedFlatMap = new TypedFlatMap();
    		typedFlatMap.put("idFilial", filial.getIdFilial());
    		typedFlatMap.put("sgFilial", filial.getSgFilial());
    		typedFlatMap.put("pessoa.nmFantasia",filial.getPessoa().getNmFantasia());
    		retorno.add(typedFlatMap);
    	}
    	return retorno;
    }
    
    public List findLookupManifestoDocumentNumberVN(TypedFlatMap criteria) {
    	String nrManifestoOrigem = criteria.getString("nrManifestoOrigem");
    	Long idFilial = criteria.getLong("manifesto.filialByIdFilialOrigem.idFilial");
    	List list = getManifestoViagemNacionalService().findLookupManifestoVNSpecific(nrManifestoOrigem, idFilial);
    	for (Iterator iter = list.iterator(); iter.hasNext(); ){
    		Map map = (Map) iter.next();
    		DateTime joda = (DateTime) map.remove("dataEmissao");
    		map.put("dataEmissao", joda.toYearMonthDay());
    	}
    	return list;
    }
	
    /**
     * Retorna a filial do usuário logado 
     *
     * @author Hector Julian Esnaola Junior
     * @since 26/02/2007
     *
     * @return
     *
     */
	public TypedFlatMap findFilialUsuarioLogado(){
		TypedFlatMap tfm = new TypedFlatMap();
		Filial filial = SessionUtils.getFilialSessao();		
		tfm.put("filial.idFilial",filial.getIdFilial());
		tfm.put("filial.sgFilial",filial.getSgFilial());
		tfm.put("filial.pessoa.nmFantasia",filial.getPessoa().getNmFantasia());
		return tfm;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	
	public FilialService getFilialService() {
		return filialService;
	}

	public ManifestoNacionalCtoService getManifestoNacionalCtoService() {
		return manifestoNacionalCtoService;
	}

	public void setManifestoNacionalCtoService(ManifestoNacionalCtoService manifestoNacionalCtoService) {
		this.manifestoNacionalCtoService = manifestoNacionalCtoService;
	}

	public ConhecimentoService getConhecimentoService() {
		return conhecimentoService;
	}

	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
	}

	public ManifestoViagemNacionalService getManifestoViagemNacionalService() {
		return manifestoViagemNacionalService;
	}

	public void setManifestoViagemNacionalService(
			ManifestoViagemNacionalService manifestoViagemNacionalService) {
		this.manifestoViagemNacionalService = manifestoViagemNacionalService;
	}


	public DomainValueService getDomainValueService() {
		return domainValueService;
	}


	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}

}
