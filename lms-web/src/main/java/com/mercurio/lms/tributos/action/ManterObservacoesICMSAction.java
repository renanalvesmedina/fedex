package com.mercurio.lms.tributos.action;

import java.io.Serializable;
import java.text.Collator;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.joda.time.YearMonthDay;
import org.springframework.context.i18n.LocaleContextHolder;

import com.mercurio.adsm.core.util.ReflectionUtils;
import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.masterdetail.ItemList;
import com.mercurio.adsm.framework.model.masterdetail.ItemListConfig;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailAction;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailFactory;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailKey;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntry;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntryConfig;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.service.ParametroGeralService;
import com.mercurio.lms.configuracoes.util.MapUtilsPlus;
import com.mercurio.lms.municipios.model.Pais;
import com.mercurio.lms.municipios.model.UnidadeFederativa;
import com.mercurio.lms.municipios.model.service.UnidadeFederativaService;
import com.mercurio.lms.tributos.model.DescricaoTributacaoIcms;
import com.mercurio.lms.tributos.model.ObservacaoICMS;
import com.mercurio.lms.tributos.model.TipoTributacaoIcms;
import com.mercurio.lms.tributos.model.service.DescricaoTributacaoIcmsService;
import com.mercurio.lms.tributos.model.service.EmbasamentoLegalIcmsService;
import com.mercurio.lms.tributos.model.service.ObservacaoICMSService;
import com.mercurio.lms.tributos.model.service.TipoTributacaoIcmsService;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.LongUtils;
import com.mercurio.lms.util.session.SessionUtils;


/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.tributos.manterObservacoesICMSAction"
 */

public class ManterObservacoesICMSAction extends MasterDetailAction {
	
	private static final String OB_ICMS = "observacaoICMS";
	
	private UnidadeFederativaService unidadeFederativaService;
	private TipoTributacaoIcmsService tipoTributacaoIcmsService;
	private EmbasamentoLegalIcmsService embasamentoLegalIcmsService; 
	private ObservacaoICMSService observacaoICMSService;
	private ParametroGeralService parametroGeralService;
	
	public EmbasamentoLegalIcmsService getEmbasamentoLegalIcmsService() {
		return embasamentoLegalIcmsService;
	}
	
	public ParametroGeralService getParametroGeralService() {
		return parametroGeralService;
	}

	public void setParametroGeralService(ParametroGeralService parametroGeralService) {
		this.parametroGeralService = parametroGeralService;
	}

	public void setObservacaoICMSService(ObservacaoICMSService observacaoICMSService) {
		this.observacaoICMSService = observacaoICMSService;
	}

	public List findUf(){
		Pais pais = SessionUtils.getPaisSessao();
		
		return unidadeFederativaService.findUfsByPais(pais.getIdPais(), null);
	}	
	
	public List findUfAtivo(){
		Pais pais = SessionUtils.getPaisSessao();
		
		return unidadeFederativaService.findUfsByPais(pais.getIdPais(), "A");
	}
	
	/**
	 * Busca tipos de tributação Icms de acordo com os filtros
	 *
	 * @author Hector Julian Esnaola Junior
	 * @since 06/12/2006
	 *
	 * @param map
	 * @return
	 *
	 */
	public List findTipoTributacao(TypedFlatMap map){
		Long idTipoTributacao = null;
		String onlyActives = null;
		
		/** Caso venha da Cad */
		if(map != null){
			idTipoTributacao = map.getLong("tipoTributacaoIcms.idTipoTributacaoIcms");
			onlyActives = "A";
		}
		
		return tipoTributacaoIcmsService
					.findComboTipoTributacaoIcms(null, onlyActives , idTipoTributacao);
	}

	public void setDescricaoTributacaoIcmsService(DescricaoTributacaoIcmsService descricaoTributacaoIcmsService) {
		super.setMasterService(descricaoTributacaoIcmsService);
	}	
	
	public DescricaoTributacaoIcmsService getDescricaoTributacaoIcmsService() {
		return (DescricaoTributacaoIcmsService)super.getMasterService();
	}
	
	public ResultSetPage findPaginated(Map map){
		return getDescricaoTributacaoIcmsService().findPaginated(map);
	}

	public Integer getRowCount(Map map){
		return getDescricaoTributacaoIcmsService().getRowCount(map);
	}	
	
	public Serializable store(TypedFlatMap map) {
				
		MasterEntry entry = getMasterFromSession(map.getLong("idDescricaoTributacaoIcms"), true);		
		ItemList items = getItemsFromSession(entry, OB_ICMS);		
			
		
		DescricaoTributacaoIcms descricaoTributacaoIcms = mountDescricaoTributacaoIcms((DescricaoTributacaoIcms)entry.getMaster() ,map);		
		try {
			
			descricaoTributacaoIcms = getDescricaoTributacaoIcmsService().store(descricaoTributacaoIcms, items);
			items.resetItemsState();		
			updateMasterInSession(entry);			
			return descricaoTributacaoIcms.getIdDescricaoTributacaoIcms();
        } catch (RuntimeException e) {
            throw e;
        }			
	} 
	
	private DescricaoTributacaoIcms mountDescricaoTributacaoIcms(DescricaoTributacaoIcms descricaoTributacaoIcms, TypedFlatMap map){		
		UnidadeFederativa unidadeFederativa = new UnidadeFederativa();
		unidadeFederativa.setIdUnidadeFederativa(map.getLong("unidadeFederativa.idUnidadeFederativa"));
		descricaoTributacaoIcms.setUnidadeFederativa(unidadeFederativa);
		
		TipoTributacaoIcms tipoTributacaoIcms = new TipoTributacaoIcms();
		tipoTributacaoIcms.setIdTipoTributacaoIcms(map.getLong("tipoTributacaoIcms.idTipoTributacaoIcms"));
		descricaoTributacaoIcms.setTipoTributacaoIcms(tipoTributacaoIcms);
		
		return descricaoTributacaoIcms;
	}
    
	public Object findById(java.lang.Long id) {
		Object masterObj = getDescricaoTributacaoIcmsService().findById(id);
		putMasterInSession(masterObj); 
		return masterObj;
	}
    
	/**
	 * Apaga várias entidades através do Id.
	 *
	 * @param ids lista com as entidades que deverão ser removida.
	 *
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)	
	public void removeByIds(List ids) {
		
		for(Object id : ids){
			validaExclusao(LongUtils.getLong(id));
		}		
		getDescricaoTributacaoIcmsService().removeByIds(ids);
	}
	
	public void removeById(Long id) {	
		
		validaExclusao(id);
		
		getDescricaoTributacaoIcmsService().removeById(id);
		newMaster();			
	}    
    
	/**
	 * Verifica se a entidade DescricaoTributacaoIcms possue vinculo com
	 * ObservacaoICMS , caso existir verifica se a observacaoICMS possue data final ou
	 * se a data inicial é menor ou igual a data atual
	 * 
	 * @param id
	 */
	private void validaExclusao(Long id){

		List<ObservacaoICMS> list = observacaoICMSService.findListByIdDescricaoTributacao(id);

		if(list != null && !list.isEmpty()){
			for(ObservacaoICMS ob : list){
				if(ob.getDtVigenciaFinal() != null 
						|| JTDateTimeUtils.comparaData(ob.getDtVigenciaInicial(), JTDateTimeUtils.getDataAtual()) <= 0){
					throw new BusinessException("LMS-00005");
				}
			}
		}
	}
	
	/*
	 * 
	 * 
	 * 
	 * MÉTODOS DO FILHO
	 * 
	 * 
	 * 
	 */

	public Serializable saveItem(Map parameters) {
		
		YearMonthDay dtVigenciaInicial  = MapUtilsPlus.getYearMonthDay(parameters, "dtVigenciaInicial");
		if(MapUtilsPlus.getLong(parameters, "idObservacaoICMS") == null 
				&& JTDateTimeUtils.comparaData(dtVigenciaInicial, JTDateTimeUtils.getDataAtual()) <= 0){
			throw new BusinessException("LMS-30040");
		}
		
		YearMonthDay dtVigenciaFinal  = MapUtilsPlus.getYearMonthDay(parameters, "dtVigenciaFinal");
		if(dtVigenciaFinal != null 
				&& JTDateTimeUtils.comparaData(dtVigenciaFinal, JTDateTimeUtils.getDataAtual()) < 0){
			throw new BusinessException("LMS-01030");
		}
		
		return saveItemInstance(parameters, OB_ICMS);
	}
	
	public ResultSetPage findPaginatedItem(Map parameters) {
		return findPaginatedItemList(parameters, OB_ICMS);
	}
	
	public Integer getRowCountItem(Map parameters){
		return getRowCountItemList(parameters, OB_ICMS);
	}
	
	public Object findByIdItem(MasterDetailKey key) {
		return findItemById(key, OB_ICMS);
	}	
	
	/**
	 * Apaga várias entidades através do Id.
	 *
	 * @param ids lista com as entidades que deverão ser removida.
	 *
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)	
	public void removeByIdsItem(List ids) {
		
		validaExclusaoItem(ids);
		
		super.removeItemByIds(ids, OB_ICMS);
	}	

	/**
	 * se a observacao possuir data de vigencia final ou se a data vigente inicial for
	 * menor ou igual a data atual lanca a exception LMS-00005 
	 * @param ids
	 */
	private void validaExclusaoItem(List ids){
		ObservacaoICMS  obs = null;
		for(Object id : ids){
			obs = observacaoICMSService.findById(LongUtils.getLong(id)) ;
			if(obs.getDtVigenciaFinal() != null 
					|| JTDateTimeUtils.comparaData(obs.getDtVigenciaInicial(), JTDateTimeUtils.getDataAtual()) <= 0 ){
				throw new BusinessException("LMS-00005");
			}
		}
	}
	
	protected MasterEntryConfig createMasterConfig(MasterDetailFactory masterFactory) {
		
		MasterEntryConfig config = masterFactory.createMasterEntryConfig(DescricaoTributacaoIcms.class);
		
		// Comparador para realizar a ordenação dos items filhos de acordo com a regra de negócio.
		Comparator descComparator = new Comparator() {
			
			public int compare(Object o1, Object o2) {
				Collator collator = Collator.getInstance(LocaleContextHolder.getLocale());
				
				if ((o1 instanceof Comparable) && (o2 instanceof Comparable)) {
					return ((Comparable)o1).compareTo(o2);
				} else {
					ObservacaoICMS d1 = (ObservacaoICMS) o1;
					ObservacaoICMS d2 = (ObservacaoICMS) o2;
					
					int retorno = collator.compare(d1.getTpObservacaoICMS().getValue(),
							d2.getTpObservacaoICMS().getValue());
					if (retorno == 0){
						retorno = d1.getDtVigenciaInicial().compareTo(d2.getDtVigenciaInicial());
					}
					if (retorno == 0){
						retorno = collator.compare(d1.getNrOrdemImpressao().toString(),
								d2.getNrOrdemImpressao().toString());
					}
					return retorno;
				}
			}
			
		};
		
		
		// Esta instancia será responsavel por carregar os items filhos na sessão a partir do banco de dados.
		ItemListConfig itemInit = new ItemListConfig() {
			
			
			public List initialize(Long idDescricaoTributacaoIcms) {
				return getDescricaoTributacaoIcmsService().findItem(idDescricaoTributacaoIcms);
			}

			public Integer getRowCount(Long idDescricaoTributacaoIcms) {
				return getDescricaoTributacaoIcmsService().getRowCountItem(idDescricaoTributacaoIcms);
			}

			public void modifyItemValues(Object newBean, Object bean) {
				Set ignore = new HashSet(3, 1f);
				ignore.add("idObservacaoICMS");
				ignore.add("versao");
				ReflectionUtils.syncObjectProperties(bean, newBean, ignore);
			}

			public Map configItemDomainProperties() {
				Map props = new HashMap(2, 1f);
				props.put("tpObservacaoICMS", "DM_TIPO_OBSERVACAO_ICMS");
				return props;
			}

			public Object populateNewItemInstance(Map parameters, Object observacaoICMS) {
				TypedFlatMap map = new TypedFlatMap();
				
				map.putAll(parameters);
				
				observacaoICMS = mountObservacaoICMS(map, (ObservacaoICMS)observacaoICMS);

								
	    		resolveDomainValueProperties(observacaoICMS);
				ItemList items = getItemsFromSession(getMasterFromSession(getMasterId(parameters), true), OB_ICMS);
				ItemListConfig config = getMasterConfig().getItemListConfig(OB_ICMS);
				
				getDescricaoTributacaoIcmsService().validateVigenciaItens((ObservacaoICMS)observacaoICMS, items.iterator(getMasterId(parameters), config));
				return observacaoICMS;
			}
			
		};			
		
		config.addItemConfig(OB_ICMS,ObservacaoICMS.class, itemInit, descComparator);
		return config;
	}
	
	private ObservacaoICMS mountObservacaoICMS(TypedFlatMap map, ObservacaoICMS observacaoICMS){
		observacaoICMS.setIdObservacaoICMS(map.getLong("idObservacaoICMS"));
		observacaoICMS.setTpObservacaoICMS(map.getDomainValue("tpObservacaoICMS"));
		observacaoICMS.setDtVigenciaInicial(map.getYearMonthDay("dtVigenciaInicial"));
		observacaoICMS.setDtVigenciaFinal(map.getYearMonthDay("dtVigenciaFinal"));
		observacaoICMS.setObObservacaoICMS(map.getString("obObservacaoICMS"));
		observacaoICMS.setNrOrdemImpressao(map.getLong("nrOrdemImpressao"));
		observacaoICMS.setCdEmbLegalMastersaf(map.getString("cdEmbLegalMastersaf"));		
		return observacaoICMS;
	}
	
	
	
	
	
	
	
	
	
	
	public void setUnidadeFederativaService(
			UnidadeFederativaService unidadeFederativaService) {
		this.unidadeFederativaService = unidadeFederativaService;
	}

	public void setTipoTributacaoIcmsService(
			TipoTributacaoIcmsService tipoTributacaoIcmsService) {
		this.tipoTributacaoIcmsService = tipoTributacaoIcmsService;
	}    

	public void setEmbasamentoLegalIcmsService(
			EmbasamentoLegalIcmsService embasamentoLegalIcmsService) {
		this.embasamentoLegalIcmsService = embasamentoLegalIcmsService;
}
}
