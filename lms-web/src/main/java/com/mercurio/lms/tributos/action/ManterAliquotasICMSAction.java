package com.mercurio.lms.tributos.action;

import java.io.Serializable;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.session.SessionContext;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.ParametroGeral;
import com.mercurio.lms.configuracoes.model.service.ParametroGeralService;
import com.mercurio.lms.municipios.model.Pais;
import com.mercurio.lms.municipios.model.service.UnidadeFederativaService;
import com.mercurio.lms.tributos.model.AliquotaIcms;
import com.mercurio.lms.tributos.model.EmbasamentoLegalIcms;
import com.mercurio.lms.tributos.model.service.AliquotaIcmsService;
import com.mercurio.lms.tributos.model.service.EmbasamentoLegalIcmsService;
import com.mercurio.lms.tributos.model.service.TipoTributacaoIcmsService;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.LongUtils;
import com.mercurio.lms.util.session.SessionKey;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * N�o inserir documenta��o ap�s ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este servi�o.
 * @spring.bean id="lms.tributos.manterAliquotasICMSAction"
 */

public class ManterAliquotasICMSAction extends CrudAction {
	
	private UnidadeFederativaService unidadeFederativaService;
	private TipoTributacaoIcmsService tipoTributacaoIcmsService;
	private EmbasamentoLegalIcmsService embasamentoLegalIcmsService;
	
	/** Utilizando outra service  */
	private ParametroGeralService parametroGeralService;

	
	
	/** Agora est� recebendo um TypedFlatMap da tela */
	public ResultSetPage findPaginatedTela(TypedFlatMap criteria) {
		return defaultService.findPaginated(criteria);
	}
	
	/** Agora est� recebendo um TypedFlatMap da tela */
	public Integer getRowCountTela(TypedFlatMap criteria) {
		return defaultService.getRowCount(criteria);
	}

	

	/**
	 * Retorna os valores dos parametros gerais para:
	 * 
	 * ID_TIPO_TRIBUTACAO_NORMAL e ID_TIPO_TRIBUTACAO_ST
	 * 
	 * usado na tela de Manter Aliquota Icms
	 * 
     * @author Diego Umpierre
     * 06/06/2006
     * 
	 * @return Map map de objetos para preencher os dados inicias da tela
	 * */
	public List findInitialValue(){
		Map map = new HashMap();
		
		List lista = new ArrayList();		
		
		ParametroGeral parametroGeral = getParametroGeralService().findByNomeParametro("ID_TIPO_TRIBUTACAO_NORMAL",false);
		
		map.put("idTipoTributacaoNormal",parametroGeral.getDsConteudo());
		
		parametroGeral = getParametroGeralService().findByNomeParametro("ID_TIPO_TRIBUTACAO_ST",false);
			
		map.put("idTipoTributacaoST",parametroGeral.getDsConteudo());
		
		lista.add(map);
		
		return lista;
		
	}
	
	/**
	 * @author Jos� Rodrigo Moraes
	 * @since  20/07/2006
	 * 
	 * Busca da data atual do sistema
	 * 
	 * @return Data atual
	 */
	public Serializable findDataAtual(){
		TypedFlatMap tfm = new TypedFlatMap();
		tfm.put("dtVigenciaInicial",JTDateTimeUtils.getDataAtual().plusDays(1));
		return tfm;
	}

	public List findUnidadeFederativa(Map criteria){
		return getUnidadeFederativaService().find(criteria);
	}
	
	public List findUnidadeFederativaPaisLogado(TypedFlatMap criteria){
		Pais p = (Pais)SessionContext.get(SessionKey.PAIS_KEY);
		if (criteria == null)
			criteria = new TypedFlatMap();
		criteria.put("pais.idPais",p.getIdPais().toString());
		return getUnidadeFederativaService().findByPais(criteria);
	}
	
	public List findTipoTributacaoIcms(Map criteria){
		return getTipoTributacaoIcmsService().find(criteria);
	}
	
	public TypedFlatMap store(AliquotaIcms bean) {
		
		if(bean.getIdAliquotaIcms() == null 
				&& bean.getDtVigenciaInicial().compareTo(JTDateTimeUtils.getDataAtual())  <= 0){
			throw new BusinessException("LMS-30040");
    }
	
		if(bean.getDtVigenciaFinal() != null 
				&& bean.getDtVigenciaFinal().compareTo(JTDateTimeUtils.getDataAtual()) < 0 ){			
			throw new BusinessException("LMS-01030");
		}
		
		if(bean.getUnidadeFederativaDestino() != null 
				&& bean.getUnidadeFederativaDestino().getIdUnidadeFederativa() != null){
			if(bean.getRegiaoGeografica() != null && bean.getRegiaoGeografica().getIdRegiaoGeografica() != null ){
				throw new BusinessException("LMS-23033");
			}
		}
		
		Long idTrNormal = LongUtils.getLong(parametroGeralService.findConteudoByNomeParametro("ID_TIPO_TRIBUTACAO_NORMAL", false));	
		
		if(bean.getTipoTributacaoIcms() != null && !idTrNormal.equals(bean.getTipoTributacaoIcms().getIdTipoTributacaoIcms()) 
				&& bean.getEmbasamento() == null ){
			throw new BusinessException("LMS-23042");
		}
		
		if(bean.getEmbasamento() != null && bean.getEmbasamento().getIdEmbasamento() != null){
			
			EmbasamentoLegalIcms embasamento = getEmbasamentoLegalIcmsService().findById(bean.getEmbasamento().getIdEmbasamento());
			
			if(!embasamento.getUnidadeFederativaOrigem().equals(bean.getUnidadeFederativaOrigem())){
				throw new BusinessException("LMS-23043");
			}
			if(!embasamento.getTipoTributacaoIcms().getIdTipoTributacaoIcms().equals(bean.getTipoTributacaoIcms().getIdTipoTributacaoIcms())){
				throw new BusinessException("LMS-23044");
			}
		}
		
		Boolean b = (Boolean)((AliquotaIcmsService) defaultService).findExisteVigenciaAliquota(bean);
		
		if(b){
			throw new BusinessException("LMS-00047");
		}
		
		Serializable id = ((AliquotaIcmsService)defaultService).store(bean); 
		
		TypedFlatMap map = new TypedFlatMap();
		map.put("idAliquotaIcms", id);
		
    	return map;
    }
	
	public void setService(AliquotaIcmsService serviceService) {
		this.defaultService = serviceService;
	}
	
    public void removeById(java.lang.Long id) {
    	
    	this.validaExclusao(id);   	    	
    	
        ((AliquotaIcmsService)defaultService).removeById(id);
    }


	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
						
		AliquotaIcms aliquota = null;
		for(Object id : ids){
			this.validaExclusao(LongUtils.getLong(id));			
		}	
		
    	((AliquotaIcmsService)defaultService).removeByIds(ids);
    }

	private void validaExclusao(Long id){
		AliquotaIcms aliquota = ((AliquotaIcmsService)defaultService).findById(LongUtils.getLong(id));
		if(aliquota.getDtVigenciaFinal() != null 
				|| aliquota.getDtVigenciaInicial() != null  && aliquota.getDtVigenciaInicial().compareTo(JTDateTimeUtils.getDataAtual())  <= 0){
			throw new BusinessException("LMS-00005");
    }
	}

    public TypedFlatMap findById(java.lang.Long id) {
    	AliquotaIcms aliquota = ((AliquotaIcmsService)defaultService).findById(id);
    	
    	TypedFlatMap map = new TypedFlatMap();
    	map.put("idAliquotaIcms", aliquota.getIdAliquotaIcms());
    	map.put("ufOrigem", aliquota.getUnidadeFederativaOrigem().getIdUnidadeFederativa());
    	
    	if(aliquota.getUnidadeFederativaDestino() != null){
    		map.put("ufDestino", aliquota.getUnidadeFederativaDestino().getIdUnidadeFederativa());
    	}
    	
    	if(aliquota.getRegiaoGeografica() != null){
    		map.put("idRegiaoGeografica", aliquota.getRegiaoGeografica().getIdRegiaoGeografica());
    	}
    	
    	map.put("idStRemetente", aliquota.getTpSituacaoTribRemetente().getValue());
    	map.put("idStDestinatario", aliquota.getTpSituacaoTribDestinatario().getValue());

    	map.put("tpFrete", aliquota.getTpTipoFrete().getValue());
    	map.put("tpSitTributaria", aliquota.getTipoTributacaoIcms().getIdTipoTributacaoIcms());
    	
    	if(aliquota.getEmbasamento() != null){
    		map.put("idEmbasamento", aliquota.getEmbasamento().getIdEmbasamento());
    		map.put("sgUFEmbasamento", aliquota.getEmbasamento().getUnidadeFederativaOrigem().getSgUnidadeFederativa());
    		map.put("idUFEmbasamento", aliquota.getEmbasamento().getUnidadeFederativaOrigem().getIdUnidadeFederativa());
    		map.put("dsEmbLegalComp", aliquota.getEmbasamento().getDsEmbLegalCompleto());
    	}
    	
    	map.put("pcAliquota", aliquota.getPcAliquota());
    	map.put("pcEmbutimento", aliquota.pcEmbuteCalculado().setScale(2,RoundingMode.HALF_UP));    	
    	map.put("obAliquota", aliquota.getObAliquota());
    	
    	if(aliquota.getDtVigenciaInicial() != null){
    		map.put("dtVigInicial", JTDateTimeUtils.convertFrameworkDateToFormat(aliquota.getDtVigenciaInicial().toString(), "dd/MM/yyyy"));
    	}
    	
    	if(aliquota.getDtVigenciaFinal() != null){
    		map.put("dtVigenciaFinal", JTDateTimeUtils.convertFrameworkDateToFormat(aliquota.getDtVigenciaFinal().toString(), "dd/MM/yyyy"));
    	}
    	
		if(aliquota.getDtVigenciaInicial() != null){
			map.put("comparaInicial",JTDateTimeUtils.comparaData(aliquota.getDtVigenciaInicial(), JTDateTimeUtils.getDataAtual()));
		}
		
		if(aliquota.getDtVigenciaFinal() != null){
			map.put("comparaFinal",JTDateTimeUtils.comparaData(aliquota.getDtVigenciaFinal(), JTDateTimeUtils.getDataAtual()));
		}    	

    	return map;
    }

	public TipoTributacaoIcmsService getTipoTributacaoIcmsService() {
		return tipoTributacaoIcmsService;
	}

	public void setTipoTributacaoIcmsService(
			TipoTributacaoIcmsService tipoTributacaoIcmsService) {
		this.tipoTributacaoIcmsService = tipoTributacaoIcmsService;
	}

	public UnidadeFederativaService getUnidadeFederativaService() {
		return unidadeFederativaService;
	}

	public void setUnidadeFederativaService(
			UnidadeFederativaService unidadeFederativaService) {
		this.unidadeFederativaService = unidadeFederativaService;
	}
    

	public ParametroGeralService getParametroGeralService() {
		return parametroGeralService;
	}

	public void setParametroGeralService(ParametroGeralService parametroGeralService) {
		this.parametroGeralService = parametroGeralService;
	}

	public EmbasamentoLegalIcmsService getEmbasamentoLegalIcmsService() {
		return embasamentoLegalIcmsService;
	}

	public void setEmbasamentoLegalIcmsService(
			EmbasamentoLegalIcmsService embasamentoLegalIcmsService) {
		this.embasamentoLegalIcmsService = embasamentoLegalIcmsService;
	}



}
