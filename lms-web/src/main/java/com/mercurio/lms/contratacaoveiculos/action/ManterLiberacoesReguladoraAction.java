package com.mercurio.lms.contratacaoveiculos.action;

import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.joda.time.YearMonthDay;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.Domain;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.configuracoes.util.MapUtilsPlus;
import com.mercurio.lms.contratacaoveiculos.model.LiberacaoReguladora;
import com.mercurio.lms.contratacaoveiculos.model.MeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.Motorista;
import com.mercurio.lms.contratacaoveiculos.model.Proprietario;
import com.mercurio.lms.contratacaoveiculos.model.service.LiberacaoReguladoraService;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTranspProprietarioService;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteService;
import com.mercurio.lms.contratacaoveiculos.model.service.MotoristaService;
import com.mercurio.lms.contratacaoveiculos.model.service.ProprietarioService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.seguros.model.ReguladoraSeguro;
import com.mercurio.lms.seguros.model.service.ReguladoraSeguroService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contratacaoveiculos.manterLiberacoesReguladoraAction"
 */
public class ManterLiberacoesReguladoraAction extends CrudAction {
	private ReguladoraSeguroService reguladoraSeguroService;
	private FilialService filialService;
	private ProprietarioService proprietarioService;
	private MeioTransporteService meioTransporteService;
	private MotoristaService motoristaService;
	private MeioTranspProprietarioService meioTranspProprietarioService;

	public void removeById(java.lang.Long id) {
		((LiberacaoReguladoraService)defaultService).removeById(id);
	}

	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		((LiberacaoReguladoraService)defaultService).removeByIds(ids);
	}

	public TypedFlatMap findById(java.lang.Long id) {
		TypedFlatMap toReturn = new TypedFlatMap();
		Map liberacaoReguladora = getLiberacaoReguladoraService().findLiberacaoReguladoraById(id);
		DomainValue tpOperacao = (DomainValue)liberacaoReguladora.remove("tpOperacao");
		for (Iterator ie = liberacaoReguladora.keySet().iterator(); ie.hasNext();) {
			String key = (String)ie.next();
			toReturn.put(key.replace('_','.'),liberacaoReguladora.get(key));
		}
		toReturn.put("tpOperacao", tpOperacao.getValue());

		if (toReturn.getDomainValue("motorista.tpVinculo") != null) {
			toReturn.put("motorista.tpVinculo.value",toReturn.getDomainValue("motorista.tpVinculo").getValue());
			toReturn.remove("motorista.tpVinculo");
		}
		//Motorista
		if (toReturn.getDomainValue("motorista.pessoa.tpIdentificacao") != null && toReturn.getString("motorista.pessoa.nrIdentificacao") != null) {
			String nrIdentificacaoFormatado = FormatUtils.formatIdentificacao(toReturn.getDomainValue("motorista.pessoa.tpIdentificacao").getValue(), toReturn.getString("motorista.pessoa.nrIdentificacao"));
			toReturn.put("motorista.pessoa.nrIdentificacaoFormatado", nrIdentificacaoFormatado);
		}
		toReturn.remove("motorista.pessoa.tpIdentificacao");
		//Proprietario
		if (toReturn.getDomainValue("proprietario.pessoa.tpIdentificacao") != null && toReturn.getString("proprietario.pessoa.nrIdentificacao") != null) {
			String nrIdentificacaoFormatado = FormatUtils.formatIdentificacao(toReturn.getDomainValue("proprietario.pessoa.tpIdentificacao").getValue(), toReturn.getString("proprietario.pessoa.nrIdentificacao"));
			toReturn.put("proprietario.pessoa.nrIdentificacaoFormatado", nrIdentificacaoFormatado);
		}
		toReturn.remove("proprietario.pessoa.tpIdentificacao");

		
		//LMS-3783
		YearMonthDay dataAtual = JTDateTimeUtils.getDataAtual();
		boolean blVigenteAgregFunc = false;
		DomainValue vinculo = (DomainValue)liberacaoReguladora.get("motorista_tpVinculo");
		if (!vinculo.getValue().equals("E")
				&& ((MapUtilsPlus.getYearMonthDay(liberacaoReguladora, "dtLiberacao").isBefore(dataAtual)) 
						&& (dataAtual.isBefore(MapUtilsPlus.getYearMonthDay(liberacaoReguladora, "dtVencimento"))))) {
			blVigenteAgregFunc = true;
		}
		toReturn.put("blVigenteAgregFunc", blVigenteAgregFunc);

		return toReturn;
	}

	public ResultSetPage findPaginated(TypedFlatMap criteria) {
		return getLiberacaoReguladoraService().findPaginated(criteria);
	}

	public List findLookupMeioTransporte(TypedFlatMap criteria) {
		return meioTransporteService.findLookupWithProprietario(criteria);
	}

	public Integer getRowCount(TypedFlatMap criteria) {
		return getLiberacaoReguladoraService().getRowCount(criteria);
	}

	public TypedFlatMap store(TypedFlatMap parameters) {
		ReguladoraSeguro reguladoraSeguro = new ReguladoraSeguro();
		reguladoraSeguro.setIdReguladora(parameters.getLong("reguladoraSeguro.idReguladora"));

		Filial filial = new Filial();
		filial.setIdFilial(parameters.getLong("filial.idFilial"));

		MeioTransporte meioTransporte = null;
		if (parameters.getLong("meioTransporte.idMeioTransporte") != null) {
			meioTransporte = new MeioTransporte();
			meioTransporte.setIdMeioTransporte(parameters.getLong("meioTransporte.idMeioTransporte"));
		}

		Motorista motorista = new Motorista();
		motorista.setIdMotorista(parameters.getLong("motorista.idMotorista"));
		DomainValue tpVinculo = parameters.getDomainValue("motorista.tpVinculo.value");
		motorista.setTpVinculo(tpVinculo);
		Pessoa pessoa = new Pessoa();
		pessoa.setNmPessoa(parameters.getString("motorista.pessoa.nmPessoa"));
		pessoa.setIdPessoa(parameters.getLong("motorista.idMotorista"));
		motorista.setPessoa(pessoa);

		Usuario usuario = new Usuario();
		usuario.setIdUsuario(SessionUtils.getUsuarioLogado().getIdUsuario());

		LiberacaoReguladora liberacaoReguladora = new LiberacaoReguladora();
		Long idLiberacaoReguladora = parameters.getLong("idLiberacaoReguladora");
		liberacaoReguladora.setIdLiberacaoReguladora(idLiberacaoReguladora);
		DomainValue tpOperacao = parameters.getDomainValue("tpOperacao");
		liberacaoReguladora.setTpOperacao(tpOperacao);
		liberacaoReguladora.setNrLiberacao(parameters.getString("nrLiberacao"));
		liberacaoReguladora.setFilial(filial);
		liberacaoReguladora.setMotorista(motorista);
		liberacaoReguladora.setMeioTransporte(meioTransporte);
		liberacaoReguladora.setUsuario(usuario);
		liberacaoReguladora.setReguladoraSeguro(reguladoraSeguro);

		YearMonthDay dtLiberacao = JTDateTimeUtils.getDataAtual();
		YearMonthDay dtVencimento = JTDateTimeUtils.getDataAtual();
		if(idLiberacaoReguladora != null) {
			dtLiberacao = parameters.getYearMonthDay("dtLiberacao");
			dtVencimento = parameters.getYearMonthDay("dtVencimento");
		}
		liberacaoReguladora.setDtLiberacao(dtLiberacao);
		liberacaoReguladora.setDtVencimento(dtVencimento);

		/** STORE */
		TypedFlatMap result = new TypedFlatMap();
		result.put("blEnableUpdate", getLiberacaoReguladoraService().store(liberacaoReguladora));

		idLiberacaoReguladora = liberacaoReguladora.getIdLiberacaoReguladora();

		result.put("idLiberacaoReguladora", idLiberacaoReguladora);
		result.put("dtLiberacao", liberacaoReguladora.getDtLiberacao());
		if (liberacaoReguladora.getDtVencimento() != null) {
			result.put("dtVencimento", liberacaoReguladora.getDtVencimento());
		}
		return result;
	}

	public TypedFlatMap getFilialUsuario() {
		Filial bean = SessionUtils.getFilialSessao();
		TypedFlatMap result = new TypedFlatMap();
		result.put("filial.idFilial",bean.getIdFilial());
		result.put("filial.sgFilial",bean.getSgFilial());
		result.put("filial.pessoa.nmFantasia",bean.getPessoa().getNmFantasia());
		return result;
	}

	public List findComboReguladoraSeguro(TypedFlatMap criteria) {
		criteria = (criteria == null) ? new TypedFlatMap() : criteria;
		return reguladoraSeguroService.findCombo(criteria.getString("tpSituacao"));
	}

	public List findLookupFilial(Map criteria) {
		return filialService.findLookupFilial(criteria);
	}

	public List findLookupMototorista(Map criteria) {
		criteria.remove("proprietario");
		return motoristaService.findLookup(criteria);
	}

	public List findLookupMototoristaReal(TypedFlatMap criteria) {
		return motoristaService.findLookupMotorista(criteria);
	}

	public List findLookupMeioTransp(Map criteria) {
		return meioTransporteService.findLookup(criteria);
	}

	public List findLookupProprietario(TypedFlatMap criteria) {
		return proprietarioService.findLookupProprietario(criteria.getString("pessoa.nrIdentificacao"), criteria.getString("tpSituacao"));
	}

	public TypedFlatMap findProprietarioByMeioTransporte(Long idMeioTransporte) {
		Proprietario proprietario = meioTranspProprietarioService.findProprietarioByIdMeioTransporte(idMeioTransporte,JTDateTimeUtils.getDataAtual());
		if (proprietario != null) {
			TypedFlatMap result = new TypedFlatMap();
			result.put("proprietario.idProprietario",proprietario.getIdProprietario());
			result.put("proprietario.pessoa.nrIdentificacao",FormatUtils.formatIdentificacao(proprietario.getPessoa().getTpIdentificacao(),proprietario.getPessoa().getNrIdentificacao()));
			result.put("proprietario.pessoa.nrIdentificacaoFormatado",FormatUtils.formatIdentificacao(proprietario.getPessoa().getTpIdentificacao(),proprietario.getPessoa().getNrIdentificacao()));
			result.put("proprietario.pessoa.nmPessoa",proprietario.getPessoa().getNmPessoa());
			return result;
		} else
			return null;
	}

	private LiberacaoReguladoraService getLiberacaoReguladoraService() {
		return (LiberacaoReguladoraService)this.defaultService;
	}
	public void setLiberacaoReguladoraService(LiberacaoReguladoraService serviceService) {
		this.defaultService = serviceService;
	}
	public void setMeioTranspProprietarioService(MeioTranspProprietarioService meioTranspProprietarioService) {
		this.meioTranspProprietarioService = meioTranspProprietarioService;
	}
	public void setReguladoraSeguroService(ReguladoraSeguroService reguladoraSeguroService) {
		this.reguladoraSeguroService = reguladoraSeguroService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public void setProprietarioService(ProprietarioService proprietarioService) {
		this.proprietarioService = proprietarioService;
	}
	public void setMeioTransporteService(MeioTransporteService meioTransporteService) {
		this.meioTransporteService = meioTransporteService;
	}
	public void setMotoristaService(MotoristaService motoristaService) {
		this.motoristaService = motoristaService;
	}	
}
