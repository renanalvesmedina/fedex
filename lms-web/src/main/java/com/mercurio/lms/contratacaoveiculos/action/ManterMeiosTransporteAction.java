package com.mercurio.lms.contratacaoveiculos.action;

import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.lang.StringUtils;

import com.mercurio.adsm.core.InfrastructureException;
import com.mercurio.adsm.core.util.Base64Util;
import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.PaginatedQuery;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.contratacaoveiculos.model.AnexoMeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.ConteudoAtributoModelo;
import com.mercurio.lms.contratacaoveiculos.model.EixosTipoMeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.FotoMeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.MarcaMeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.MeioTranspConteudoAtrib;
import com.mercurio.lms.contratacaoveiculos.model.MeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.MeioTransportePeriferico;
import com.mercurio.lms.contratacaoveiculos.model.MeioTransporteRodoviario;
import com.mercurio.lms.contratacaoveiculos.model.ModeloMeioTranspAtributo;
import com.mercurio.lms.contratacaoveiculos.model.ModeloMeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.OperadoraMct;
import com.mercurio.lms.contratacaoveiculos.model.PerifericoRastreador;
import com.mercurio.lms.contratacaoveiculos.model.SolicitacaoContratacao;
import com.mercurio.lms.contratacaoveiculos.model.TipoMeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.service.BloqueioMotoristaPropService;
import com.mercurio.lms.contratacaoveiculos.model.service.EixosTipoMeioTransporteService;
import com.mercurio.lms.contratacaoveiculos.model.service.FotoMeioTransporteService;
import com.mercurio.lms.contratacaoveiculos.model.service.MarcaMeioTransporteService;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteRodoviarioService;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteService;
import com.mercurio.lms.contratacaoveiculos.model.service.ModeloMeioTransporteService;
import com.mercurio.lms.contratacaoveiculos.model.service.OperadoraMctService;
import com.mercurio.lms.contratacaoveiculos.model.service.PerifericoRastreadorService;
import com.mercurio.lms.contratacaoveiculos.model.service.ProprietarioService;
import com.mercurio.lms.contratacaoveiculos.model.service.TipoMeioTransporteService;
import com.mercurio.lms.fretecarreteiroviagem.model.TipoCombustivel;
import com.mercurio.lms.fretecarreteiroviagem.model.service.TipoCombustivelService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.Municipio;
import com.mercurio.lms.municipios.model.Pais;
import com.mercurio.lms.municipios.model.UnidadeFederativa;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.MunicipioService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.WarningCollectorUtils;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contratacaoveiculos.manterMeiosTransporteAction"
 */

public class ManterMeiosTransporteAction extends CrudAction {
	private FilialService filialService;
	private TipoMeioTransporteService tipoMeioTransporteService;
	private BloqueioMotoristaPropService bloqueioMotoristaPropService;
	private ConfiguracoesFacade configuracoesFacade;
	private ProprietarioService proprietarioService;
	private MarcaMeioTransporteService marcaMeioTransporteService;
	private ModeloMeioTransporteService modeloMeioTransporteService;
	private OperadoraMctService operadoraMctService;
	private MeioTransporteRodoviarioService meioTransporteRodoviarioService;
	private MunicipioService municipioService;
	private EixosTipoMeioTransporteService eixosTipoMeioTransporteService;
	private PerifericoRastreadorService perifericoRastreadorService;
	private FotoMeioTransporteService fotoMeioTransporteService;
	private TipoCombustivelService tipoCombustivelService;

	public Serializable findByIdCustom(Long id) {
		MeioTransporte meioTransporte = getService().findByIdCustom(id);
		Filial filial = meioTransporte.getFilial();
		Filial filialAgregadoCe = meioTransporte.getFilialAgregadoCe();
		ModeloMeioTransporte modelo = meioTransporte.getModeloMeioTransporte();
		MarcaMeioTransporte marca = modelo.getMarcaMeioTransporte();
		TipoMeioTransporte tipo = modelo.getTipoMeioTransporte();
		MeioTransporteRodoviario meioTransporteRodoviario = meioTransporte.getMeioTransporteRodoviario();
		TipoCombustivel tipoCombustivel = meioTransporte.getTipoCombustivel();

		TypedFlatMap retorno = new TypedFlatMap();

		retorno.put("idMeioTransporte", meioTransporte.getIdMeioTransporte());
		retorno.put("nrAntt", meioTransporte.getNrAntt());
		retorno.put("blAlugado.value", meioTransporte.getBlAlugado().getValue());
		
		retorno.put("filial.idFilial", filial.getIdFilial());
		retorno.put("filial.sgFilial", filial.getSgFilial());
		retorno.put("filial.pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
		if (filialAgregadoCe != null) {
			retorno.put("filialAgregadoCe.idFilial", filialAgregadoCe.getIdFilial());
			retorno.put("filialAgregadoCe.sgFilial", filialAgregadoCe.getSgFilial());
			retorno.put("filialAgregadoCe.pessoa.nmFantasia", filialAgregadoCe.getPessoa().getNmFantasia());
		}
		retorno.put("nrIdentificador", meioTransporte.getNrIdentificador());
		retorno.put("tpVinculo.value", meioTransporte.getTpVinculo().getValue());
		retorno.put("nrAnoFabricao", meioTransporte.getNrAnoFabricao());
		retorno.put("qtPortas", meioTransporte.getQtPortas());
		retorno.put("nrCapacidadeKg", meioTransporte.getNrCapacidadeKg());
		retorno.put("nrCapacidadeM3", meioTransporte.getNrCapacidadeM3());
		retorno.put("tpSituacao.value", meioTransporte.getTpSituacao().getValue());
		retorno.put("nrFrota", meioTransporte.getNrFrota());
		if(meioTransporte.getNrCodigoBarra() != null){
			retorno.put("nrCodigoBarra", meioTransporte.getNrCodigoBarra().toString().substring(2));
			retorno.put("preNrCodigoBarra", meioTransporte.getNrCodigoBarra().toString().substring(0, 2));
		}
		//Data de atualização do registro
		retorno.put("dtAtualizacao", meioTransporte.getDtAtualizacao());
		retorno.put("usuarioAtualizacao.nrMatricula", meioTransporte.getUsuarioAtualizacao().getNrMatricula());
		retorno.put("usuarioAtualizacao.nmUsuario", meioTransporte.getUsuarioAtualizacao().getNmUsuario());
		retorno.put("tpModal.value", meioTransporte.getTpModal().getValue());
		retorno.put("modeloMeioTransporte.tipoMeioTransporte.tpMeioTransporte.value", tipo.getTpMeioTransporte().getValue());
		retorno.put("modeloMeioTransporte.idModeloMeioTransporte", modelo.getIdModeloMeioTransporte());
		retorno.put("modeloMeioTransporte.tipoMeioTransporte.idTipoMeioTransporte", tipo.getIdTipoMeioTransporte());

		if(tipoCombustivel != null){
			retorno.put("tipoCombustivel.idTipoCombustivel", tipoCombustivel.getIdTipoCombustivel());			
		}

		Long idTipoComposto = this.findPrimeiroCompostoByTipoMeioTransporte(tipo.getIdTipoMeioTransporte());
		if (idTipoComposto != null) {
			retorno.put("modeloMeioTransporte.tipoMeioTransporte.tipoMeioTransporte.idTipoMeioTransporte", idTipoComposto);
		}

		retorno.put("dsTipoMeioTransporteTemp", tipo.getDsTipoMeioTransporte());
		retorno.put("modeloMeioTransporte.marcaMeioTransporte.idMarcaMeioTransporte",
				marca.getIdMarcaMeioTransporte());

		if (meioTransporteRodoviario != null) {
			retorno.put("meioTransporteRodoviario.idMeioTransporte", meioTransporteRodoviario.getIdMeioTransporte());
			retorno.put("meioTransporteRodoviario.blControleTag", meioTransporteRodoviario.getBlControleTag());
			retorno.put("meioTransporteRodoviario.nrTag", meioTransporteRodoviario.getNrTag());
			retorno.put("meioTransporteRodoviario.blPossuiPlataforma", meioTransporteRodoviario.getBlPossuiPlataforma());
			retorno.put("meioTransporteRodoviario.blMonitorado", meioTransporteRodoviario.getBlMonitorado());
			retorno.put("meioTransporteRodoviario.vlAlturaBau", meioTransporteRodoviario.getVlAlturaBau());
			retorno.put("meioTransporteRodoviario.vlLarguraBau", meioTransporteRodoviario.getVlLarguraBau());
			retorno.put("meioTransporteRodoviario.vlProfundidadeBau", meioTransporteRodoviario.getVlProfundidadeBau());
			EixosTipoMeioTransporte eixos = meioTransporteRodoviario.getEixosTipoMeioTransporte();
			if (eixos != null) {
				retorno.put("meioTransporteRodoviario.eixosTipoMeioTransporte.idEixosTipoMeioTransporte", eixos.getIdEixosTipoMeioTransporte());
			}
			if (meioTransporteRodoviario.getNrRastreador() != null) {
				retorno.put("meioTransporteRodoviario.nrRastreador", meioTransporteRodoviario.getNrRastreador());
			}
			retorno.put("meioTransporteRodoviario.psTara", meioTransporteRodoviario.getPsTara());
			retorno.put("meioTransporteRodoviario.nrDddCelular", meioTransporteRodoviario.getNrDddCelular());
			retorno.put("meioTransporteRodoviario.nrCelular", meioTransporteRodoviario.getNrCelular());
			retorno.put("meioTransporteRodoviario.cdRenavam", meioTransporteRodoviario.getCdRenavam());
			retorno.put("meioTransporteRodoviario.nrCertificado", meioTransporteRodoviario.getNrCertificado());
			retorno.put("meioTransporteRodoviario.dtEmissao", meioTransporteRodoviario.getDtEmissao());
			retorno.put("meioTransporteRodoviario.nrChassi", meioTransporteRodoviario.getNrChassi());
			retorno.put("meioTransporteRodoviario.nrBilheteSeguro", meioTransporteRodoviario.getNrBilheteSeguro());
			retorno.put("meioTransporteRodoviario.dtVencimentoSeguro", meioTransporteRodoviario.getDtVencimentoSeguro());

			OperadoraMct operadoraMct = meioTransporteRodoviario.getOperadoraMct();
			if (operadoraMct != null) {
				retorno.put("meioTransporteRodoviario.operadoraMct.idOperadoraMct", operadoraMct.getIdOperadoraMct());
				retorno.put("meioTransporteRodoviario.operadoraMct.pessoa.nmPessoa", operadoraMct.getPessoa().getNmPessoa());
			}

			MeioTransporteRodoviario meioTransporteTracionador = meioTransporteRodoviario.getMeioTransporteRodoviario();
			if (meioTransporteTracionador != null) {
				MeioTransporte tracionador = meioTransporteTracionador.getMeioTransporte();
				retorno.put("meioTransporteRodoviario.meioTransporteRodoviario.idMeioTransporte", tracionador.getIdMeioTransporte());
				retorno.put("meioTransporteRodoviario.meioTransporteRodoviario.meioTransporte.nrIdentificador", tracionador.getNrIdentificador());
				retorno.put("meioTransporteRodoviario.meioTransporteRodoviario.meioTransporte.nrFrota", tracionador.getNrFrota());
				retorno.put("meioTransporteRodoviario.meioTransporteRodoviario.meioTransporte.nrAnoFabricao", tracionador.getNrAnoFabricao());
			}

			Municipio municipio = meioTransporteRodoviario.getMunicipio();
			if (municipio != null) {
				retorno.put("meioTransporteRodoviario.municipio.idMunicipio", municipio.getIdMunicipio());
				retorno.put("meioTransporteRodoviario.municipio.nmMunicipio", municipio.getNmMunicipio());
				UnidadeFederativa uf = municipio.getUnidadeFederativa();
				retorno.put("meioTransporteRodoviario.municipio.unidadeFederativa.nmUnidadeFederativa", uf.getNmUnidadeFederativa());
				Pais pais = uf.getPais();
				retorno.put("meioTransporteRodoviario.municipio.unidadeFederativa.pais.nmPais", pais.getNmPais().getValue());
				retorno.put("meioTransporteRodoviario.municipio.unidadeFederativa.pais.sgPais",	pais.getSgPais());
			}
		}

		List<FotoMeioTransporte> fotoMeioTransportes = meioTransporte.getFotoMeioTransportes();
 		if (fotoMeioTransportes != null && !fotoMeioTransportes.isEmpty()) {
 			FotoMeioTransporte fotoMeioTransporte = fotoMeioTransportes.get(0);
 						
			/*
			 * Pode acontecer de a base sofrer alguma alteração manual ou importação de
			 * registros e danificar o arquivo da foto.
			 */
			if(fotoMeioTransporte != null && fotoMeioTransporte.getImMeioTransporte() != null){
				retorno.put("imMeioTransporte", Base64Util.encode(fotoMeioTransporte.getImMeioTransporte()));
				retorno.put("idFotoMeioTransporte", fotoMeioTransporte.getIdFotoMeioTransporte());
			}			
 		}		

		if (bloqueioMotoristaPropService.validateBloqueiosVigentes(meioTransporte)) {
			retorno.put("captionBloquear", configuracoesFacade.getMensagem("liberar"));
			retorno.put("tpStatus", configuracoesFacade.getMensagem("bloqueado"));
		} else {
			retorno.put("captionBloquear", configuracoesFacade.getMensagem("bloquear"));
			retorno.put("tpStatus", configuracoesFacade.getMensagem("liberado"));
		}
		
		retorno.put("meioTransportePerifericos", getService().findMeioTransportePerifericos(meioTransporte));

		if( meioTransporte.getTpOperacao()!= null){
			retorno.put("tpOperacao", meioTransporte.getTpOperacao().getValue());			
		}
		
		
		
		retorno.putAll(getService().findDadosWorkflow(meioTransporte));
		getTpSituacao(meioTransporte, retorno);
		getDtAtualizacao(meioTransporte, retorno);
		getUsuarioAlteracao(meioTransporte, retorno);
		
		return retorno;
	}

	public ResultSetPage findPaginatedCustom(TypedFlatMap criteria) {
		return getService().findPaginatedCustom(criteria);
	}

	public Integer getRowCountCustom(TypedFlatMap criteria) {
		return getService().getRowCountCustom(criteria);
	}

	public TypedFlatMap storeCustom(TypedFlatMap map) {
		MeioTransporte meioTransporte = null;
		Long idMeioTransporte = map.getLong("idMeioTransporte");
		if(idMeioTransporte != null) {
			meioTransporte = getService().findByIdCustom(idMeioTransporte);
		} else {
			meioTransporte = new MeioTransporte();
		}
		meioTransporte.setUsuarioAtualizacao(SessionUtils.getUsuarioLogado());
		meioTransporte.setDtAtualizacao(JTDateTimeUtils.getDataAtual());
		
		meioTransporte.setTpOperacao(map.getDomainValue("tpOperacao"));
		meioTransporte.setNrAntt(map.getString("nrAntt"));
		meioTransporte.setBlAlugado(map.getDomainValue("blAlugado"));
		
		Filial filial = new Filial();
		filial.setIdFilial(map.getLong("filial.idFilial"));
		meioTransporte.setFilial(filial);
		meioTransporte.setTpVinculo(map.getDomainValue("tpVinculo"));

		Long idFilialAgregado = map.getLong("filialAgregadoCe.idFilial");
		if(idFilialAgregado != null) {
			Filial filialAgregado = new Filial();
			filialAgregado.setIdFilial(idFilialAgregado);
			meioTransporte.setFilialAgregadoCe(filialAgregado);
		} else {
			meioTransporte.setFilialAgregadoCe(null);
		}
		meioTransporte.setTpModal(map.getDomainValue("tpModal"));
		meioTransporte.setNrFrota(map.getString("nrFrota"));

		/** Trata inserção do Meio de Transporte RODOVIÁRIO. */
		List<MeioTransportePeriferico> meioTransportePerifericos = null;
		String tpMeioTransporte = map.getString("modeloMeioTransporte.tpMeioTransporte");
		if ("R".equals(tpMeioTransporte)) {
			MeioTransporteRodoviario meioTransporteRodoviario = this.parseMeioTransporteRodoviario(map);
			meioTransporteRodoviario.setMeioTransporte(meioTransporte);
			meioTransporte.setMeioTransporteRodoviario(meioTransporteRodoviario);

			/** Meio Transporte Periféricos */
			if(meioTransporteRodoviario.getNrRastreador() != null) {
				List<TypedFlatMap> mapPerifericos = map.getList("meioTransportePerifericos");
				if(mapPerifericos != null && !mapPerifericos.isEmpty()) {
					meioTransportePerifericos = new ArrayList<MeioTransportePeriferico>(mapPerifericos.size());
					for (TypedFlatMap listPerifericos : mapPerifericos) {
						MeioTransportePeriferico meioTransportePeriferico = new MeioTransportePeriferico();
						meioTransportePeriferico.setMeioTransporte(meioTransporte);
						PerifericoRastreador perifericoRastreador = new PerifericoRastreador();
						perifericoRastreador.setIdPerifericoRastreador(listPerifericos.getLong("idPerifericoRastreador"));
						meioTransportePeriferico.setPerifericoRastreador(perifericoRastreador);
						meioTransportePerifericos.add(meioTransportePeriferico);
					}
				}
			}
		}
		meioTransporte.setMeioTransportePerifericos(meioTransportePerifericos);
		meioTransporte.setNrIdentificador(map.getString("nrIdentificador"));

		ModeloMeioTransporte modeloMeioTransporte = new ModeloMeioTransporte();
		modeloMeioTransporte.setIdModeloMeioTransporte(map.getLong("modeloMeioTransporte.idModeloMeioTransporte"));
		modeloMeioTransporte.setTpMeioTransporte(new DomainValue(tpMeioTransporte));

		TipoMeioTransporte tipoMeioTransporte = new TipoMeioTransporte();
		tipoMeioTransporte.setIdTipoMeioTransporte(map.getLong("modeloMeioTransporte.tipoMeioTransporte.idTipoMeioTransporte"));
		modeloMeioTransporte.setTipoMeioTransporte(tipoMeioTransporte);
		meioTransporte.setModeloMeioTransporte(modeloMeioTransporte);

		meioTransporte.setNrAnoFabricao(map.getShort("nrAnoFabricao"));
		meioTransporte.setQtPortas(map.getShort("qtPortas"));
		if(map.getLong("nrCodigoBarra") != null){
			meioTransporte.setNrCodigoBarra(Long.parseLong(map.getString("preNrCodigoBarra") + StringUtils.leftPad(map.getString("nrCodigoBarra"), 10, "0") ));
		}else{
			meioTransporte.setNrCodigoBarra(null);
		}
		meioTransporte.setNrCapacidadeKg(map.getBigDecimal("nrCapacidadeKg"));
		meioTransporte.setNrCapacidadeM3(map.getBigDecimal("nrCapacidadeM3"));

		if(map.getLong("tipoCombustivel.idTipoCombustivel") != null){
			TipoCombustivel tipoCombustivel = new TipoCombustivel();
			tipoCombustivel.setIdTipoCombustivel(map.getLong("tipoCombustivel.idTipoCombustivel"));
			meioTransporte.setTipoCombustivel(tipoCombustivel);
		}

		/** Picture */
		String strFoto = map.getString("imMeioTransporte");
		Long idFotoMeioTransporteToRemove = null;
		FotoMeioTransporte fotoMeioTransporte = null;
		if (meioTransporte.getFotoMeioTransportes() != null && meioTransporte.getFotoMeioTransportes().size() > 0) {
			fotoMeioTransporte = (FotoMeioTransporte) meioTransporte.getFotoMeioTransportes().get(0);
		}

		if (StringUtils.isNotBlank(strFoto)) {
			try {
				if (fotoMeioTransporte == null) {
					fotoMeioTransporte = new FotoMeioTransporte();
					List<FotoMeioTransporte> fotosMeioTransporte = new ArrayList<FotoMeioTransporte>(1);
					fotoMeioTransporte.setMeioTransporte(meioTransporte);
					fotosMeioTransporte.add(fotoMeioTransporte);
					meioTransporte.setFotoMeioTransportes(fotosMeioTransporte);
				}
				fotoMeioTransporte.setImMeioTransporte(Base64Util.decode(strFoto));
			} catch (IOException e) {
				throw new InfrastructureException(e.getMessage());
			}
		} else {
			if (fotoMeioTransporte != null) {
				idFotoMeioTransporteToRemove = fotoMeioTransporte.getIdFotoMeioTransporte(); 
				fotoMeioTransporte.setMeioTransporte(null);

				meioTransporte.setFotoMeioTransportes(new ArrayList<FotoMeioTransporte>(1));
			}
		}

		meioTransporte.setTpSituacao(map.getDomainValue("tpSituacao"));
		if (StringUtils.isNotBlank(map.getString("tpStatus"))) {
			meioTransporte.setTpStatus(map.getString("tpStatus"));
		}
		/** Atributos */
		this.parseAttributes(map, meioTransporte);
		/** Remove mensagens da sessão */
		WarningCollectorUtils.remove();
		
		/** STORE */
		getService().store(meioTransporte);
		if(idFotoMeioTransporteToRemove != null) {
			fotoMeioTransporteService.removeById(idFotoMeioTransporteToRemove);
		}

		/** Parameters de retorno pra tela */
		TypedFlatMap retorno = new TypedFlatMap();
		// Seta valores do bean que retornará para a tela após salvar com sucesso.
		if(meioTransporte.getNrCodigoBarra() != null){
			retorno.put("nrCodigoBarra", meioTransporte.getNrCodigoBarra().toString().substring(2));
			retorno.put("preNrCodigoBarra", meioTransporte.getNrCodigoBarra().toString().substring(0, 2));
		}
		retorno.put("idMeioTransporte", meioTransporte.getIdMeioTransporte());
		retorno.put("tpSituacao.value", meioTransporte.getTpSituacao().getValue());

		if (meioTransporte.getTpStatus() == null) {
			retorno.put("tpStatus", configuracoesFacade.getMensagem("liberado"));
		}

		retorno.put("nrFrota", meioTransporte.getNrFrota());
		retorno.put("tpVinculo.value", meioTransporte.getTpVinculo().getValue());
		retorno.put("modeloMeioTransporte.tipoMeioTransporte.tpMeioTransporte.value", tpMeioTransporte);
		retorno.put("modeloMeioTransporte.idModeloMeioTransporte", meioTransporte.getModeloMeioTransporte().getIdModeloMeioTransporte());
		//Retorna a data de atualização para a tela
		retorno.put("dtAtualizacao", meioTransporte.getDtAtualizacao());
		retorno.put("usuarioAtualizacao.nmUsuario", meioTransporte.getUsuarioAtualizacao().getNmUsuario());
		retorno.put("usuarioAtualizacao.nrMatricula", meioTransporte.getUsuarioAtualizacao().getNrMatricula());
		Filial filialAgregadoCe = meioTransporte.getFilialAgregadoCe();
		if (filialAgregadoCe != null) {
			Filial filialAgregadoCE = filialService.findById(filialAgregadoCe.getIdFilial());
			retorno.put("filialAgregadoCe.idFilial", filialAgregadoCE.getIdFilial());
			retorno.put("filialAgregadoCe.sgFilial", filialAgregadoCE.getSgFilial());
			retorno.put("filialAgregadoCe.pessoa.nmFantasia", filialAgregadoCE.getPessoa().getNmFantasia());
		}
		MeioTransporteRodoviario meioTransporteRodoviario = meioTransporte.getMeioTransporteRodoviario();
		if (meioTransporteRodoviario != null) {
			retorno.put("meioTransporteRodoviario.idMeioTransporte", meioTransporteRodoviario.getIdMeioTransporte());
		}
		if (meioTransporte.getFotoMeioTransportes() != null && meioTransporte.getFotoMeioTransportes().size() > 0) {
			retorno.put("imMeioTransporte", Base64Util.encode(((FotoMeioTransporte) meioTransporte.getFotoMeioTransportes().get(0))
			.getImMeioTransporte()));
		}
		if(meioTransporte.getPendencia() != null){
			retorno.put("dsPendencia", meioTransporte.getPendencia().getTpSituacaoPendencia().getDescription());			
		}
		
		if( meioTransporte.getTpOperacao()!= null){
			retorno.put("tpOperacao", meioTransporte.getTpOperacao().getValue());			
		}

		
		retorno.putAll(getService().findDadosWorkflow(meioTransporte));
		getTpSituacao(meioTransporte, retorno);
		getDtAtualizacao(meioTransporte, retorno);
		getUsuarioAlteracao(meioTransporte, retorno);
		
		/** Add Warnings on return parameters */
		WarningCollectorUtils.putAll(retorno);
		return retorno;
	}

	/**
	 * @param meioTransporte
	 * @param map
	 */
	private void getUsuarioAlteracao(MeioTransporte meioTransporte, TypedFlatMap map) {
		Usuario usuarioAlteracao = meioTransporte.getUsuarioAtualizacao();
		
		if (usuarioAlteracao != null){			
			map.put("usuarioAtualizacao.idUsuario", usuarioAlteracao.getIdUsuario());
			map.put("usuarioAtualizacao.nrMatricula", usuarioAlteracao.getNrMatricula());			
			map.put("usuarioAtualizacao.nmUsuario", usuarioAlteracao.getNmUsuario());
		}
	}
	
	
	/**
	 * 
	 * @param meioTransporte
	 * @param retorno
	 */
	private void getTpSituacao(MeioTransporte meioTransporte, TypedFlatMap retorno) {
		if(meioTransporte.getTpSituacao() == null){
			return;
		}
		
		retorno.put("tpSituacao.value", meioTransporte.getTpSituacao().getValue());
	}

	/**
	 * @param meioTransporte
	 * @param retorno
	 */
	private void getDtAtualizacao(MeioTransporte meioTransporte, TypedFlatMap retorno) {
		retorno.put("dtAtualizacao", meioTransporte.getDtAtualizacao());
	}
	
	private MeioTransporteRodoviario parseMeioTransporteRodoviario(TypedFlatMap map) {
		MeioTransporteRodoviario meioTransporteRodoviario = new MeioTransporteRodoviario();
		meioTransporteRodoviario.setIdMeioTransporte(map.getLong("meioTransporteRodoviario.idMeioTransporte"));

		meioTransporteRodoviario.setBlControleTag(map.getBoolean("meioTransporteRodoviario.blControleTag"));
		meioTransporteRodoviario.setNrTag(map.getInteger("meioTransporteRodoviario.nrTag"));
		meioTransporteRodoviario.setBlPossuiPlataforma(map.getBoolean("meioTransporteRodoviario.blPossuiPlataforma"));
		meioTransporteRodoviario.setBlMonitorado(map.getBoolean("meioTransporteRodoviario.blMonitorado"));
		meioTransporteRodoviario.setVlAlturaBau(map.getBigDecimal("meioTransporteRodoviario.vlAlturaBau"));
		meioTransporteRodoviario.setVlLarguraBau(map.getBigDecimal("meioTransporteRodoviario.vlLarguraBau"));
		meioTransporteRodoviario.setVlProfundidadeBau(map.getBigDecimal("meioTransporteRodoviario.vlProfundidadeBau"));

		EixosTipoMeioTransporte eixosTipoMeioTransporte = new EixosTipoMeioTransporte();
		eixosTipoMeioTransporte.setIdEixosTipoMeioTransporte(map.getLong("meioTransporteRodoviario.eixosTipoMeioTransporte.idEixosTipoMeioTransporte"));
		meioTransporteRodoviario.setEixosTipoMeioTransporte(eixosTipoMeioTransporte);

		Long idOperadoraMct = map.getLong("meioTransporteRodoviario.operadoraMct.idOperadoraMct");
		if (map.getBoolean("meioTransporteRodoviario.blMonitorado") == true && idOperadoraMct == null) {
			throw new BusinessException("LMS-26117");
		}
		
		if(idOperadoraMct != null) {
			OperadoraMct operadoraMct = new OperadoraMct();
			operadoraMct.setIdOperadoraMct(idOperadoraMct);
			meioTransporteRodoviario.setOperadoraMct(operadoraMct);
		}

		meioTransporteRodoviario.setNrRastreador(map.getLong("meioTransporteRodoviario.nrRastreador"));
		meioTransporteRodoviario.setPsTara(map.getBigDecimal("meioTransporteRodoviario.psTara"));
		meioTransporteRodoviario.setNrDddCelular(map.getString("meioTransporteRodoviario.nrDddCelular"));
		meioTransporteRodoviario.setNrCelular(map.getLong("meioTransporteRodoviario.nrCelular"));
		meioTransporteRodoviario.setCdRenavam(map.getLong("meioTransporteRodoviario.cdRenavam"));
		meioTransporteRodoviario.setNrCertificado(map.getLong("meioTransporteRodoviario.nrCertificado"));
		meioTransporteRodoviario.setDtEmissao(map.getYearMonthDay("meioTransporteRodoviario.dtEmissao"));
		meioTransporteRodoviario.setNrChassi(map.getString("meioTransporteRodoviario.nrChassi"));

		Municipio municipio = new Municipio();
		municipio.setIdMunicipio(map.getLong("meioTransporteRodoviario.municipio.idMunicipio"));
		meioTransporteRodoviario.setMunicipio(municipio);
		
		String sgPais = map.getString("meioTransporteRodoviario.municipio.unidadeFederativa.pais.sgPais");
		if(StringUtils.isNotBlank(sgPais)) {
			UnidadeFederativa uf = new UnidadeFederativa();
			Pais pais = new Pais();
			pais.setSgPais(sgPais);
			
			uf.setPais(pais);
			municipio.setUnidadeFederativa(uf);
		}

		meioTransporteRodoviario.setNrBilheteSeguro(map.getString("meioTransporteRodoviario.nrBilheteSeguro"));
		meioTransporteRodoviario.setDtVencimentoSeguro(map.getYearMonthDay("meioTransporteRodoviario.dtVencimentoSeguro"));

		Long idMeioTransporteComposto = map.getLong("meioTransporteRodoviario.meioTransporteRodoviario.idMeioTransporte");
		if(idMeioTransporteComposto != null) {
			MeioTransporteRodoviario meioTransporteComposto = new MeioTransporteRodoviario();
			meioTransporteComposto.setIdMeioTransporte(idMeioTransporteComposto);
			meioTransporteRodoviario.setMeioTransporteRodoviario(meioTransporteComposto);
		}

		return meioTransporteRodoviario;
	}

	private void parseAttributes(TypedFlatMap map, MeioTransporte meioTransporte) {
		Map<String, Object> atribs = new HashMap<String, Object>();
		
		List<MeioTranspConteudoAtrib> meioTranspConteudoAtribs = new ArrayList<MeioTranspConteudoAtrib>();
		for (Map.Entry<String, Object> entry : (Set<Map.Entry<String, Object>>) map.entrySet()) {
			String key = entry.getKey();
			
			if (key.startsWith("atrib.")) {
				Object value = entry.getValue();
				if (value instanceof Map) {
					Map conteudoAtributo = (Map) value;
					for (Map.Entry<String, String> entryConteudo : (Set<Map.Entry<String, String>>) conteudoAtributo.entrySet()) {
						String valueConteudo = entryConteudo.getValue();
						MeioTranspConteudoAtrib meioTranspConteudoAtrib = createMeioTranspConteudoAtrib(valueConteudo, meioTransporte, Long.valueOf(FormatUtils.filterNumber(key)), key.substring(6, 4));
						if (meioTranspConteudoAtrib != null) {
							meioTranspConteudoAtribs.add(meioTranspConteudoAtrib);
						}
					}
				} else {
					MeioTranspConteudoAtrib meioTranspConteudoAtrib = createMeioTranspConteudoAtrib((String) value, meioTransporte, Long.valueOf(FormatUtils.filterNumber(key)), key.substring(6, 10));
					if (meioTranspConteudoAtrib != null) {
						meioTranspConteudoAtribs.add(meioTranspConteudoAtrib);
					}
				}
			}
		}
		if (!meioTranspConteudoAtribs.isEmpty()) {
			meioTransporte.setMeioTranspConteudoAtribs(meioTranspConteudoAtribs);
		}
	}
	
	private MeioTranspConteudoAtrib createMeioTranspConteudoAtrib(String dsConteudo, 
			MeioTransporte meioTransporte, Long idModeloMeioTranspAtributo, String tpComponente) {
		
		if (StringUtils.isNotBlank(dsConteudo)) {
			MeioTranspConteudoAtrib result = new MeioTranspConteudoAtrib();
			result.setMeioTransporte(meioTransporte);
			ModeloMeioTranspAtributo modeloMeioTranspAtributo = new ModeloMeioTranspAtributo();
			modeloMeioTranspAtributo.setIdModeloMeioTranspAtributo(idModeloMeioTranspAtributo);
			result.setModeloMeioTranspAtributo(modeloMeioTranspAtributo);
			if ("elem".equals(tpComponente)) {
				result.setDsConteudo(dsConteudo);
			} else if ("comb".equals(tpComponente)) {
				ConteudoAtributoModelo conteudoAtributoModelo = new ConteudoAtributoModelo();
				conteudoAtributoModelo.setIdConteudoAtributoModelo(Long.valueOf(dsConteudo));
				result.setConteudoAtributoModelo(conteudoAtributoModelo);
			}
			return result;
		}
		return null;
	}

	public List<Filial> findLookupFilial(TypedFlatMap tfm) { 
		return filialService.findLookupBySgFilial(tfm.getString("sgFilial"), tfm.getString("tpAcesso"));
	}

	public List findComboTipoMeioTransporte(Map map) {
		// Só consulta se for recebido um valor com a chave tpMeioTransporte
		if (map != null && map.get("tpMeioTransporte") != null) {
			return tipoMeioTransporteService.findCombo(map);
		}
		return Collections.EMPTY_LIST;
	}

	public List findComboTipoMeioTransporteAtivo(Map map) {
		// Só consulta se for recebido um valor com a chave tpMeioTransporte
		if (map != null && map.get("tpMeioTransporte") != null) {
			map.put("tpSituacao","A");
			return tipoMeioTransporteService.findCombo(map);
		}
		return Collections.EMPTY_LIST;
	}

	public List findLookupProprietario(Map map) {
		return proprietarioService.findLookup(map);
	}

	public List findComboMarcaMeioTransporte(Map map) {
		// Só consulta se for recebido um valor com a chave tpMeioTransporte
		if (map != null && map.get("tpMeioTransporte") != null) {
			return marcaMeioTransporteService.find(map);
		}
		return Collections.EMPTY_LIST;
	}

	public List findComboModeloMeioTransporte(Map map) {
		if (map != null) {
			Map tipoMeioTransporte = (Map)map.get("tipoMeioTransporte");
			Map marcaMeioTransporte = (Map)map.get("marcaMeioTransporte");
			if ((tipoMeioTransporte != null && tipoMeioTransporte.get("idTipoMeioTransporte") != null) ||
					(marcaMeioTransporte != null && marcaMeioTransporte.get("idMarcaMeioTransporte") != null)) {
				return modeloMeioTransporteService.find(map);
			}
		}
		return Collections.EMPTY_LIST;
	}

	/**
	 * Retorna uma lista para a combo caso tenha sido informado o tipo e a marca do meio de transporte, 
	 * do contrário, retorna uma lista vazia
	 * @param map
	 * @return
	 */
	public List findComboModeloByTipoByMarca(Map map) {
		if (map != null) {
			Map tipoMeioTransporte = (Map)map.get("tipoMeioTransporte");
			Map marcaMeioTransporte = (Map)map.get("marcaMeioTransporte");
			if (tipoMeioTransporte != null 
				&& tipoMeioTransporte.get("idTipoMeioTransporte") != null
				&& marcaMeioTransporte != null
				&& marcaMeioTransporte.get("idMarcaMeioTransporte") != null) {
				return modeloMeioTransporteService.find(map);
			}
		}
		return Collections.EMPTY_LIST;
	}

	public List findComboOperadoraMct(Map map) {
		return operadoraMctService.find(map);
	}

	public List findLookupRodo(Map map) {
		return meioTransporteRodoviarioService.findLookup(map);
	}

	public List findLookupMunicipio(Map map) {
		return municipioService.findLookup(map);
	}

	public List findComboEixosTipoMeioTransporte(Long idTipoMeioTransporte) {
		List l = eixosTipoMeioTransporteService.findEixosByTpMeioTransp(idTipoMeioTransporte);
		List newList = new ArrayList();
		for (Iterator i = l.iterator(); i.hasNext();) {
			EixosTipoMeioTransporte eixo = (EixosTipoMeioTransporte) i.next();
			TypedFlatMap row = new TypedFlatMap();
			row.put("qtEixos", eixo.getQtEixos());
			row.put("idEixosTipoMeioTransporte", eixo.getIdEixosTipoMeioTransporte());
			newList.add(row);
		}
		return newList;
	}

	/**
	 * Retorna para a tela a filial do usuário logado.
	 * @return
	 */
	public TypedFlatMap findFilialUsuarioLogado() {
		TypedFlatMap retorno = new TypedFlatMap();

		Filial f = SessionUtils.getFilialSessao();
		retorno.put("idFilial", f.getIdFilial());
		retorno.put("sgFilial", f.getSgFilial());
		retorno.put("pessoa.nmFantasia", f.getPessoa().getNmFantasia());

		return retorno;
	}

	/**
	 * Retorna a lista de perifericos de rastreador
	 * @param criteria
	 * @return
	 */
	public List findPerifericoRastreador(Map criteria) {
		return perifericoRastreadorService.find(criteria);
	}

	/**
	 * Valida se tipo de meio de transporte é composto 
	 * @param params
	 * @return
	 */
	public TypedFlatMap validateTipoMeioTransporte(TypedFlatMap params) {
		TypedFlatMap retorno = new TypedFlatMap();
		retorno.put("idComposto", this.findPrimeiroCompostoByTipoMeioTransporte(params.getLong("id")));
		return retorno;
	}

	public Long findPrimeiroCompostoByTipoMeioTransporte(Long id) {
		List l = tipoMeioTransporteService.findComposicoesByTipo(id);
		if (!l.isEmpty()) {
			TipoMeioTransporte t = (TipoMeioTransporte) l.get(0);
			return t.getIdTipoMeioTransporte();
		}
		return null;
	}

	public List findAtributosByModelo(TypedFlatMap map) {
		return getService().findAtributosByModelo(map);
	}

	public String calculaCapacidade(TypedFlatMap values) {
		return meioTransporteRodoviarioService.calculaCapacidade(values);
	}

	/**
	 * Verifica se proprietario possui bloqueios vigentes. 
	 * Em caso afirmativo retorna <i>desbloquear</i>.
	 * Em caso negativo, retorna <i>bloquear</i>.
	 * @param idProprietario
	 * @author luisfco
	 */
	public Map validateBloqueiosVigentes(Long idMeioTransporte) {
		Map map = new HashMap();
		MeioTransporte mt = new MeioTransporte();
		mt.setIdMeioTransporte(idMeioTransporte);
		if (mt != null && bloqueioMotoristaPropService.validateBloqueiosVigentes(mt))
			map.put("valorBotaoBloqueio", "desbloquear");
		else
			map.put("valorBotaoBloqueio", "bloquear");
		return map;
	}

	public TypedFlatMap validateInfoMeioTransporteByNrPlaca(TypedFlatMap criteria) {
		String tpVinculo = criteria.getString("tpVinculo");
		Long idTipoMeioTransporte = criteria.getLong("idTipoMeioTransporte");

		String nrIdentificador = criteria.getString("nrIdentificador");
		List l = getService().findInfoMeioTransporteSolicitacaoByNrPlaca(nrIdentificador);

		class MapRetorno extends TypedFlatMap {

			void putCustom(SolicitacaoContratacao sc) {
				this.put("nrAnoFabricao",sc.getNrAnoFabricacaoMeioTransporte());
				this.put("tpVinculo.value",sc.getTpVinculoContratacao().getValue());
				TipoMeioTransporte tipoMeioTransporte = sc.getTipoMeioTransporte();
				this.put("modeloMeioTransporte.tipoMeioTransporte.idTipoMeioTransporte",
						tipoMeioTransporte.getIdTipoMeioTransporte());
				this.put("modeloMeioTransporte.tipoMeioTransporte.tpMeioTransporte.value",
						tipoMeioTransporte.getTpMeioTransporte().getValue());
				this.put("dsTipoMeioTransporteTemp",
						tipoMeioTransporte.getDsTipoMeioTransporte());
			}

		}
	
		MapRetorno retorno = new MapRetorno();
		if (!l.isEmpty()) {
			if (StringUtils.isEmpty(tpVinculo) && idTipoMeioTransporte == null) {
				SolicitacaoContratacao sc = (SolicitacaoContratacao)l.get(0);
				retorno.putCustom(sc);
			} else {
				Iterator it = l.iterator();
				SolicitacaoContratacao sc = null;
				String tpVinculoSolicitacao = "";
				Long idTipoSolicitacao = -1L;

				while (it.hasNext() &&
						(tpVinculo.equals("") || !tpVinculo.equals(tpVinculoSolicitacao)) &&
						(idTipoMeioTransporte == null || !idTipoMeioTransporte.equals(idTipoSolicitacao))) {
					sc = (SolicitacaoContratacao)it.next();
					tpVinculoSolicitacao = sc.getTpVinculoContratacao().getValue();
					idTipoSolicitacao = sc.getTipoMeioTransporte().getIdTipoMeioTransporte();
				}

				if (StringUtils.isEmpty(tpVinculo) || tpVinculo.equals(tpVinculoSolicitacao) &&
						(idTipoMeioTransporte == null || idTipoMeioTransporte.equals(idTipoSolicitacao))) {
					retorno.putCustom(sc);
				} else if (StringUtils.isNotEmpty(tpVinculo) &&
						!tpVinculo.equals(tpVinculoSolicitacao)) {
					throw new BusinessException("LMS-26091",new Object[]{sc.getTpVinculoContratacao().getDescription()});
				} else if (idTipoMeioTransporte != null &&
						!idTipoMeioTransporte.equals(idTipoSolicitacao)) {
					throw new BusinessException("LMS-26094",new Object[]{sc.getTipoMeioTransporte().getDsTipoMeioTransporte()});
				}
			}
		}

		if (retorno.isEmpty())
			retorno.put("flag", "flag");

		return retorno;
	}

	/**
	 * @param id do meio de transporte
	 */
	public void removeByIdCustom(Long id) {
		getService().removeById(id);
	}

	/**
	 * @param ids Lista de ids dos meios de transportes.
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		getService().removeByIds(ids);
	}

	/**
	 * Método responsável pela busca de todos os tipod de combustíveis
	 */
	public List findComboTipoCombustivel(Map<String, Object> map) {
		map.put("tpSituacao", "A");
		return tipoCombustivelService.findCombo(map);			
	}
	
	/**
	 * Método responsável pela busca dos tipo de combustíveis conforme o tipo de meio de transporte selecionado
	 */
	public List findTipoCombustivelByTpMeioTransporte(Map map){
		TypedFlatMap tfm = new TypedFlatMap();
		tfm.put("tpSituacao", "A");
		tfm.put("id", map.get("id"));
		return tipoCombustivelService.findTipoCombustivelByTpMeioTransporte(tfm);
	}
	
	public TypedFlatMap findAnexoMeioTransporteById(TypedFlatMap criteria) {
		AnexoMeioTransporte meioTransporteAnexo = getService().findAnexoMeioTransporteById(criteria.getLong("idAnexoMeioTransporte"));
		
		TypedFlatMap map = new TypedFlatMap();
		map.put("idAnexoMeioTransporte", meioTransporteAnexo.getIdAnexoMeioTransporte());
		map.put("dsAnexo", meioTransporteAnexo.getDsAnexo());
		map.put("dcArquivo", Base64Util.encode(meioTransporteAnexo.getDcArquivo()));
		map.put("idMeioTransporte", meioTransporteAnexo.getMeioTransporte().getIdMeioTransporte());
		return map;
	}
	
    @SuppressWarnings({ "rawtypes", "unchecked" })
	public ResultSetPage findPaginatedAnexoMeioTransporte(TypedFlatMap criteria) {
    	Long idMeioTransporte = criteria.getLong("idMeioTransporte");
    	
    	/*
		 * Verificação necessária porque a ação padrão do remover recarrega
		 * todas as abas por padrão.
		 */
    	if(idMeioTransporte == null){
    		return null;
    	}
    	
    	criteria.put("idMeioTransporte", idMeioTransporte);
    	return getService().findPaginatedAnexoMeioTransporte(new PaginatedQuery(criteria));
    }

    public Integer getRowCountAnexoMeioTransporte(TypedFlatMap criteria){
    	return getService().getRowCountAnexoMeioTransporte(criteria);
    }
	
    public Serializable storeAnexoMeioTransporte(TypedFlatMap map){
    	MeioTransporte meioTransporte = (MeioTransporte) getService().storeAnexoMeioTransporte(map);
    	
    	TypedFlatMap result = new TypedFlatMap();
    	
    	result.putAll(getService().findDadosWorkflow(meioTransporte));
		getTpSituacao(meioTransporte, result);
		getDtAtualizacao(meioTransporte, result);
		getUsuarioAlteracao(meioTransporte, result);
		
		return result;
    }
    
    public Serializable removeByIdsAnexoMeioTransporte(TypedFlatMap criteria){
    	MeioTransporte meioTransporte = (MeioTransporte) getService().removeByIdsAnexoMeioTransporte(criteria);
    	
    	TypedFlatMap result = new TypedFlatMap();
    	
    	result.putAll(getService().findDadosWorkflow(meioTransporte));
		getTpSituacao(meioTransporte, result);
		getDtAtualizacao(meioTransporte, result);
		getUsuarioAlteracao(meioTransporte, result);
		
		return result;
    }
	
	public void setMeioTransporteService(MeioTransporteService meioTransporteService) {
		this.defaultService = meioTransporteService;
	}
	private MeioTransporteService getService() {
		return (MeioTransporteService)this.defaultService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public void setTipoMeioTransporteService(TipoMeioTransporteService tipoMeioTransporteService) {
		this.tipoMeioTransporteService = tipoMeioTransporteService;
	}
	public void setBloqueioMotoristaPropService(BloqueioMotoristaPropService bloqueioMotoristaPropService) {
		this.bloqueioMotoristaPropService = bloqueioMotoristaPropService;
	}
	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}
	public void setProprietarioService(ProprietarioService proprietarioService) {
		this.proprietarioService = proprietarioService;
	}
	public void setMarcaMeioTransporteService(MarcaMeioTransporteService marcaMeioTransporteService) {
		this.marcaMeioTransporteService = marcaMeioTransporteService;
	}
	public void setMeioTransporteRodoviarioService(MeioTransporteRodoviarioService meioTransporteRodoviarioService) {
		this.meioTransporteRodoviarioService = meioTransporteRodoviarioService;
	}
	public void setModeloMeioTransporteService(ModeloMeioTransporteService modeloMeioTransporteService) {
		this.modeloMeioTransporteService = modeloMeioTransporteService;
	}
	public void setMunicipioService(MunicipioService municipioService) {
		this.municipioService = municipioService;
	}
	public void setOperadoraMctService(OperadoraMctService operadoraMctService) {
		this.operadoraMctService = operadoraMctService;
	}
	public void setEixosTipoMeioTransporteService(EixosTipoMeioTransporteService eixosTipoMeioTransporteService) {
		this.eixosTipoMeioTransporteService = eixosTipoMeioTransporteService;
	}
	public void setPerifericoRastreadorService(PerifericoRastreadorService perifericoRastreadorService) {
		this.perifericoRastreadorService = perifericoRastreadorService;
	}
	public void setFotoMeioTransporteService(FotoMeioTransporteService fotoMeioTransporteService) {
		this.fotoMeioTransporteService = fotoMeioTransporteService;
	}
	public void setTipoCombustivelService(TipoCombustivelService tipoCombustivelService) {
		this.tipoCombustivelService = tipoCombustivelService;
	}
} 