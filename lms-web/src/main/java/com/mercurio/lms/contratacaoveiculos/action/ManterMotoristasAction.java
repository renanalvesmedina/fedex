package com.mercurio.lms.contratacaoveiculos.action;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.MapUtils;
import org.springframework.dao.DataIntegrityViolationException;

import com.mercurio.adsm.core.util.Base64Util;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.PaginatedQuery;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.configuracoes.model.param.PesquisarCepParam;
import com.mercurio.lms.configuracoes.model.service.CepService;
import com.mercurio.lms.configuracoes.model.service.RHCargoService;
import com.mercurio.lms.configuracoes.model.service.TipoLogradouroService;
import com.mercurio.lms.contratacaoveiculos.model.AnexoMotorista;
import com.mercurio.lms.contratacaoveiculos.model.service.MotoristaService;
import com.mercurio.lms.contratacaoveiculos.model.service.ProprietarioService;
import com.mercurio.lms.municipios.model.Pais;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.MunicipioService;
import com.mercurio.lms.municipios.model.service.PaisService;
import com.mercurio.lms.municipios.model.service.RotaIdaVoltaService;
import com.mercurio.lms.municipios.model.service.UnidadeFederativaService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contratacaoveiculos.manterMotoristasAction"
 */

public class ManterMotoristasAction extends CrudAction {
	private RotaIdaVoltaService rotaIdaVoltaService;
	private MotoristaService motoristaService;
	private FilialService filialService;
	private ProprietarioService proprietarioService;
	private MunicipioService municipioService;
	private UnidadeFederativaService unidadeFederativaService;
	private CepService cepService;
	private PaisService paisService;
	private TipoLogradouroService tipoLogradouroService;
	private RHCargoService rhCargoService;

	public List findLookupRotasViagem(TypedFlatMap tfm) {
		return rotaIdaVoltaService.findLookupRotaIdaVolta(tfm);
	}

	public void setRhCargoService(RHCargoService rhCargoService) {
		this.rhCargoService = rhCargoService;
	}

	public List findLookupFilial(Map criteria) {
		return filialService.findLookup(criteria);
	}

	public List findLookupUF(Map criteria) {
		return unidadeFederativaService.findLookup(criteria);
	}

	public List findLookupProprietario(Map criteria) {
		return proprietarioService.findLookup(criteria);
	}

	public List findLookupMunicipio(Map criteria) {
		return municipioService.findLookup(criteria);
	}

	public Map findByIdDetalhamento(java.lang.Long id) {
		return motoristaService.findByIdDetalhamento(id);
	}

	public List findLookupUsuarioFuncionario(TypedFlatMap tfm) {
		return motoristaService.findLookupUsuarioFuncionario(tfm);
	}

	/**
	 * LMS 7128
	 * @param tfm
	 * @return
	 */
	public List findLookupMotoristaInstrutor(TypedFlatMap tfm) {
		return motoristaService.findLookupMotoristaInstrutor(tfm);
	}
	public Pessoa validateIdentificacao(Map map) {
		return motoristaService.validateIdentificacao(map);
	}

	public Serializable storeMap(TypedFlatMap map) {
		return motoristaService.storeMap(map);
	}

	public ResultSetPage findPaginatedCustom(TypedFlatMap criteria) {
		return motoristaService.findPaginatedCustom(criteria);
	}

	public Integer getRowCountCustom(TypedFlatMap criteria) {
		return motoristaService.getRowCountCustom(criteria);
	}

	/**
	 * Apaga várias entidades através do Id.
	 *
	 * @param ids lista com as entidades que deverão ser removida.
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		motoristaService.removeByIds(ids);
	}

	/**
	 * Apaga uma entidade através do Id.
	 *
	 * @param id indica a entidade que deverá ser removida.
	 */
	public void removeById(Long id) {
		motoristaService.removeById(id);
		try {
			motoristaService.removePessoaById(id);
		} catch (DataIntegrityViolationException e) {
			//Não tratar erros de constraint na exclusão da pessoa
		}
	}

	/* Lookups de endereço */
	public List findCepLookup(TypedFlatMap criteria) {
    	PesquisarCepParam param = new PesquisarCepParam();
    	param.setNrCep(criteria.getString("cepCriteria"));
    	param.setIdPais(criteria.getLong("municipio.unidadeFederativa.pais.idPais"));
    	return cepService.findCepLookupByManterEnderecoPessoa(param);		 
	}
	
	public Pais findPaisByIdPais(TypedFlatMap map) {
    	return paisService.findById(map.getLong("idPais"));
    }
	
	public List findLookupPais(TypedFlatMap criteria) {
    	return paisService.findLookup(criteria);
    }
    
    public List findLookupTipoLogradouro(TypedFlatMap criteria) {
    	return tipoLogradouroService.find(criteria);
    }
    
    public List findLookupUnidadeFederativa(Map criteria) { 
    	return unidadeFederativaService.findLookup(criteria);
    }
	
	public Map<String, Object> findLocalizacaoMotorista(Map<String, Object> parametros) {
		return motoristaService.findLocalizacaoMotorista(MapUtils.getLong(parametros, "idMotorista"));
	}

	public TypedFlatMap findAnexoMotoristaById(TypedFlatMap criteria) {
		AnexoMotorista anexoMotorista = motoristaService.findAnexoMotoristaById(criteria.getLong("idAnexoMotorista"));
		
		TypedFlatMap map = new TypedFlatMap();
		map.put("idAnexoMotorista", anexoMotorista.getIdAnexoMotorista());
		map.put("dsAnexo", anexoMotorista.getDsAnexo());
		map.put("dcArquivo", Base64Util.encode(anexoMotorista.getDcArquivo()));
		map.put("idMotorista", anexoMotorista.getMotorista().getIdMotorista());
		return map;
	}
	
    @SuppressWarnings({ "rawtypes", "unchecked" })
	public ResultSetPage findPaginatedAnexoMotorista(TypedFlatMap criteria) {
    	Long idMotorista = criteria.getLong("idMotorista");
    	
    	/*
		 * Verificação necessária porque a ação padrão do remover recarrega
		 * todas as abas por padrão.
		 */
    	if(idMotorista == null){
    		return null;
    	}
    	
    	criteria.put("idMotorista", criteria.getLong("idMotorista"));
    	return motoristaService.findPaginatedAnexoMotorista(new PaginatedQuery(criteria));
    }

    
    //---LMS 7128-----    
    public List findCargoMotoristaInstrutor(TypedFlatMap criteria){
    	return rhCargoService.findCargoMotoristaInstrutor(criteria);
    }
    
    public Integer getRowCountAnexoMotorista(TypedFlatMap criteria){
    	return motoristaService.getRowCountAnexoMotorista(criteria);
    }
	
    public Serializable storeAnexoMotorista(TypedFlatMap map){
    	return motoristaService.storeAnexoMotorista(map);
    }
	
    public Serializable removeByIdsAnexoMotorista(TypedFlatMap ids){
    	return motoristaService.removeByIdsAnexoMotorista(ids);
    }
    
	public void setUnidadeFederativaService(UnidadeFederativaService unidadeFederativaService) {
		this.unidadeFederativaService = unidadeFederativaService;
	}
	public void setMunicipioService(MunicipioService municipioService) {
		this.municipioService = municipioService;
	}
	public void setProprietarioService(ProprietarioService proprietarioService) {
		this.proprietarioService = proprietarioService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public void setMotoristaService(MotoristaService motoristaService) {
		this.motoristaService = motoristaService;
	}
	/**
	 * @param rotaIdaVoltaService The rotaIdaVoltaService to set.
	 */
	public void setRotaIdaVoltaService(RotaIdaVoltaService rotaIdaVoltaService) {
		this.rotaIdaVoltaService = rotaIdaVoltaService;
	}

	public void setCepService(CepService cepService) {
		this.cepService = cepService;
	}
	public void setPaisService(PaisService paisService) {
		this.paisService = paisService;
	}
	public void setTipoLogradouroService(TipoLogradouroService tipoLogradouroService) {
		this.tipoLogradouroService = tipoLogradouroService;
	}	
}