package com.mercurio.lms.contratacaoveiculos.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.contratacaoveiculos.model.ChecklistMeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.ItChecklistTpMeioTransp;
import com.mercurio.lms.contratacaoveiculos.model.RespostaChecklist;
import com.mercurio.lms.contratacaoveiculos.model.SolicitacaoContratacao;
import com.mercurio.lms.contratacaoveiculos.model.service.ChecklistMeioTransporteService;
import com.mercurio.lms.contratacaoveiculos.model.service.ItChecklistTpMeioTranspService;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteService;
import com.mercurio.lms.contratacaoveiculos.model.service.RespostaChecklistService;
import com.mercurio.lms.contratacaoveiculos.model.service.SolicitacaoContratacaoService;
import com.mercurio.lms.municipios.model.Rota;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.JTFormatUtils;
import com.mercurio.lms.util.session.SessionUtils;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contratacaoveiculos.manterCheckListAction"
 */

public class ManterCheckListAction extends CrudAction {

	private FilialService filialService;
	
	private SolicitacaoContratacaoService solicitacaoContratacaoService;
	
	private ItChecklistTpMeioTranspService itChecklistTpMeioTranspService;
	
	private RespostaChecklistService respostaChecklistService;
	
	private MeioTransporteService meioTransporteService;
	
	public void setMeioTransporteService(MeioTransporteService meioTransporteService) {
		this.meioTransporteService = meioTransporteService;
	}
	public RespostaChecklistService getRespostaChecklistService() {
		return respostaChecklistService;
	}
	public void setRespostaChecklistService(
			RespostaChecklistService respostaChecklistService) {
		this.respostaChecklistService = respostaChecklistService;
	}
	public ItChecklistTpMeioTranspService getItChecklistTpMeioTranspService() {
		return itChecklistTpMeioTranspService;
	}
	public void setItChecklistTpMeioTranspService(
			ItChecklistTpMeioTranspService itChecklistTpMeioTranspService) {
		this.itChecklistTpMeioTranspService = itChecklistTpMeioTranspService;
	}
	public SolicitacaoContratacaoService getSolicitacaoContratacaoService() {
		return solicitacaoContratacaoService;
	}
	public void setSolicitacaoContratacaoService(
			SolicitacaoContratacaoService solicitacaoContratacaoService) {
		this.solicitacaoContratacaoService = solicitacaoContratacaoService;
	}
	public FilialService getFilialService() {
		return filialService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public void setService(ChecklistMeioTransporteService checklistMeioTransporteService) {
		this.defaultService = checklistMeioTransporteService;
	}
	public void removeById(java.lang.Long id) {
		((ChecklistMeioTransporteService)defaultService).removeById(id);
	}

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		((ChecklistMeioTransporteService)defaultService).removeByIds(ids);
	}
	
	public List findLookupMeioTransp(String nrIdentificacaoMeioTransp) {
		Map criteria = new HashMap();
		criteria.put("nrIdentificador",nrIdentificacaoMeioTransp);
		return meioTransporteService.findLookup(criteria);
		
	}
	
	//metodo responsável pela lookup de filial
	public List findLookupFilial(Map criteria){
		return getFilialService().findLookupFilial(criteria);
	}
	
	
	
    //metodo responsável pela lookup de solicitação de contratação
	public List findLookupSolicitacaoContratacao(Map criteria){
		List lista = getSolicitacaoContratacaoService().findLookup(criteria);
		
		if(!lista.isEmpty()){
			if(lista.size() == 1){
				SolicitacaoContratacao solicitacaoContratacao = (SolicitacaoContratacao)lista.get(0);
				if(solicitacaoContratacao.getRota() == null){
					String dsRotaConcatenada = ((ChecklistMeioTransporteService)defaultService).findDsRotaSolicitacaoContratacao(solicitacaoContratacao.getIdSolicitacaoContratacao());
					Rota rota = new Rota();
					rota.setDsRota(dsRotaConcatenada);
					solicitacaoContratacao.setRota(rota);
						
				}
			}	
		}
		return lista;
	}
		
	
	
	public Map findRotaByIdSolicitacaoContratacao(Map criteria){
		Map map = new HashMap();
		if(!criteria.get("idSolicitacaoContratacao").equals("")){
			Long idSolicitacaoContratacao = Long.valueOf(criteria.get("idSolicitacaoContratacao").toString());
			String dsRota = getSolicitacaoContratacaoService().findRotaByIdSolicitacaoContratacao(idSolicitacaoContratacao);
			map.put("dsRota",dsRota);
		}
		if(!criteria.get("nrIdentificacaoMT").equals("")){
			String nrFrotaMT = meioTransporteService.findNrFrotaByNrIdentificacao(criteria.get("nrIdentificacaoMT").toString());
			map.put("nrFrotaMT", nrFrotaMT);
		}
		if(!criteria.get("nrIdentificacaoSR").equals("")){
			String nrFrotaSR = meioTransporteService.findNrFrotaByNrIdentificacao(criteria.get("nrIdentificacaoSR").toString());
			map.put("nrFrotaSR", nrFrotaSR);
		}
		
		return map;
	}
	
	
	
	//metodos responsáveis pela paginação do ChecklistMeioTransporte
	public ResultSetPage findPaginatedChecklistMeioTransporte(TypedFlatMap criteria) {
		return ((ChecklistMeioTransporteService)defaultService).findPaginated(criteria);
	}
	public Integer getRowCountChecklistMeioTransporte(TypedFlatMap criteria) {
		return ((ChecklistMeioTransporteService)defaultService).getRowCount(criteria);
	}
	
	//metodo responsável por trazer informações do usuario logado
	public Map findInformacoesUsuarioLogado(){
		TypedFlatMap typedFlatMap = new TypedFlatMap();
		
		Long idFilial = SessionUtils.getFilialSessao().getIdFilial();
		String sgFilial = SessionUtils.getFilialSessao().getSgFilial();
		String nmPessoa = SessionUtils.getFilialSessao().getPessoa().getNmFantasia();
			
		Long idUsuario = SessionUtils.getUsuarioLogado().getIdUsuario();
		String nmUsuario = SessionUtils.getUsuarioLogado().getNmUsuario();
		String matricula = SessionUtils.getUsuarioLogado().getNrMatricula();
		
		typedFlatMap.put("filial.idFilial", idFilial);
		typedFlatMap.put("filial.sgFilial", sgFilial);
		typedFlatMap.put("filial.pessoa.nmFantasia", nmPessoa);
		
		typedFlatMap.put("dtRealizacao", JTFormatUtils.format(JTDateTimeUtils.getDataAtual(), JTFormatUtils.DEFAULT));
		
		typedFlatMap.put("usuario.nrMatricula",matricula);
		typedFlatMap.put("usuario.nmFuncionario",nmUsuario);
		typedFlatMap.put("usuario.idUsuario",idUsuario);
		
		return typedFlatMap;
		
	}
	
	//verifica se existe algum checklist associado a solicitacao de contratacao
	public void findCheckListByIdSolicitacao(Long idSolicitacaoContratacao){
		 ((ChecklistMeioTransporteService)defaultService).findCheckListByIdSolicitacao(idSolicitacaoContratacao);
	}
	
	
	public Serializable store(ChecklistMeioTransporte bean) {
		return ((ChecklistMeioTransporteService)defaultService).store(bean);
	}
		
	 //findPaginated para a pop pup de tipo de meio de transporte
	 public List findPaginatedItChecklistByIdTipoMeioTransporteSolicitacao(Map criteria) {
		List listaSemiReboque = null;
		List listaMeioTransporte = null;
		List retorno = new ArrayList();
		
		/*
		 * Lista que sempre adiciona à tupla as informações nrIdentificacao e nrFrota.
		 */
		class ReturnList extends ArrayList<Map> {

			private String nrIdentificacao;
			private String nrFrota;

			ReturnList(String nrIdentificacao, String nrFrota) {
				super();
				this.nrIdentificacao = nrIdentificacao;
				this.nrFrota = nrFrota;
			}
			
			@Override
			public boolean add(Map o) {
				o.put("nrIdentificacao",nrIdentificacao);
				o.put("nrFrota",nrFrota);
				return super.add(o);
			}
			
			@Override
			public boolean addAll(Collection<? extends Map> c) {
				for (Map m : c) {
					m.put("nrIdentificacao",nrIdentificacao);
					m.put("nrFrota",nrFrota);
				}
				return super.addAll(c);
			}
			
		}

		// parametros do tipo de meio de transporte
		Long idTipoMeioTransporte = Long.valueOf(criteria.get("idTipoMeioTransporte").toString());
		Long idChecklistMeioTransporte = Long.valueOf(criteria.get("idChecklistMeioTransporte").toString());
		listaMeioTransporte = getItChecklistTpMeioTranspService()
				.findItChecklistByIdTipoMeioTransporteSolicitacao(idTipoMeioTransporte, idChecklistMeioTransporte);

		// parâmetros do semi-reboque
		String idTipoMeioTransporteSR = (String) criteria.get("idTipoMeioTransporteSemiReboque");
		if (StringUtils.isNotBlank(idTipoMeioTransporteSR)) {
			listaSemiReboque = getItChecklistTpMeioTranspService()
					.findItChecklistByIdTipoMeioTransporteSolicitacao(Long.valueOf(idTipoMeioTransporteSR),idChecklistMeioTransporte);
		}

		// Responsável por criar a lista que será retornada com nrFrota e nrIdentificador.
		String nrIdentificacaoMeioTransp = (String) criteria.get("nrIdentificacaoMeioTransp");
		String nrFrotaMT = (String) criteria.get("nrFrotaMT");
		ReturnList retornoMT = new ReturnList(nrIdentificacaoMeioTransp,nrFrotaMT);
		retornoMT.addAll(listaMeioTransporte);
		retorno.addAll(retornoMT);
		
		if (listaSemiReboque != null) {
			String nrIdentificacaoSemiReboque = (String) criteria.get("nrIdentificacaoSemiReboque");
			String nrFrotaSR = (String) criteria.get("nrFrotaSR");
			
			ReturnList retornoSR = new ReturnList(nrIdentificacaoSemiReboque,nrFrotaSR);
			retornoSR.addAll(listaSemiReboque);
			retorno.addAll(retornoSR);
		}
		
		return retorno;
	}
	 
	 //findPaginated para a pop pup de motorista
	 public List findPaginatedItChecklistMotByIdTipoMeioTransporteSolicitacao(Map criteria){
		 String tpIdentificacaoMot = null;
		 String nrIdentificacaoFormatadoMot = null;
		 String nmPessoaMot = null;
		 String idMotorista1 = null;
		 String idMotorista2 = null;
		 List listaItemsMot2 = null;
		 
		 //parametros do tipo de meio de transporte
		 Long idTipoMeioTransporte = Long.valueOf(criteria.get("idTipoMeioTransporte").toString());
		 Long idChecklistMeioTransporte = Long.valueOf(criteria.get("idChecklistMeioTransporte").toString());
		
		 
		 //1º motorista
		 idMotorista1 = criteria.get("idPessoaMot1").toString();
		 tpIdentificacaoMot = criteria.get("tpIdentificacaoMot1").toString();
		 nrIdentificacaoFormatadoMot= criteria.get("nrIdentificacaoFormatadoMot1").toString();
		 nmPessoaMot = criteria.get("nmPessoaMot1").toString();
		 
         List listaItemsMot1 = getItChecklistTpMeioTranspService().findItChecklistMotByIdTipoMeioTransporteSolicitacao(idTipoMeioTransporte,idChecklistMeioTransporte,idMotorista1);
         if(!listaItemsMot1.isEmpty()){
        	 for(Iterator iter = listaItemsMot1.iterator();iter.hasNext();){
        		 Map map = (Map)iter.next();
        		 map.put("nrIdentificacaoFormatado", nrIdentificacaoFormatadoMot);
        		 map.put("nmPessoa",nmPessoaMot);
        		 map.put("idMotorista", idMotorista1);
        		 map.put("tipoIdentificacao",tpIdentificacaoMot);
        	 }
         }
		 
         //2º motorista
         if(StringUtils.isNotBlank(criteria.get("nrIdentificacaoFormatadoMot2").toString())){
         	 tpIdentificacaoMot = criteria.get("tpIdentificacaoMot2").toString();
			 nrIdentificacaoFormatadoMot= criteria.get("nrIdentificacaoFormatadoMot2").toString();
			 nmPessoaMot = criteria.get("nmPessoaMot2").toString();
			 idMotorista2 = criteria.get("idPessoaMot2").toString();
			 
			 listaItemsMot2 = getItChecklistTpMeioTranspService().findItChecklistMotByIdTipoMeioTransporteSolicitacao(idTipoMeioTransporte,idChecklistMeioTransporte, idMotorista2);
         
			 if(listaItemsMot2 != null && !listaItemsMot2.isEmpty()){
				 for(Iterator iter = listaItemsMot2.iterator();iter.hasNext();){
	        		 Map map = (Map)iter.next();
	        		 map.put("nrIdentificacaoFormatado", nrIdentificacaoFormatadoMot);
	        		 map.put("nmPessoa",nmPessoaMot);
	        		 map.put("idMotorista", idMotorista2);
	        		 map.put("tipoIdentificacao",tpIdentificacaoMot);
	        	 }
				 listaItemsMot1.addAll(listaItemsMot2);
			 }	 
         }
		 return listaItemsMot1;
	}
	 
	
	 //salva os itens da poppup de motorista e os itens da poppup de tipo de meio de transporte
	 public TypedFlatMap storeChecklistTipoMeioTransporte(TypedFlatMap typedFlatMap){
		 List itens = typedFlatMap.getList("itChecklistTpMeioTransp");	
		 String situacaoChecklist = null;
		 TypedFlatMap retorno = new TypedFlatMap();
		 
		 if(!itens.isEmpty()){
			 
			 for(int i = 0; i< itens.size(); i++){
				TypedFlatMap item = (TypedFlatMap)itens.get(i);
				if(item.getString("apr").equals(""))
					throw new BusinessException("LMS-26050");
			 }
			 
			 ChecklistMeioTransporte check = new ChecklistMeioTransporte();
			 check.setIdChecklistMeioTransporte(typedFlatMap.getLong("idChecklistMeioTransporte"));
		 	 
			 for(int i = 0; i< itens.size(); i++){
				TypedFlatMap item = (TypedFlatMap)itens.get(i);
				RespostaChecklist resposta = new RespostaChecklist();
				
				if(item.get("idRespostaChecklist") != null && item.get("idRespostaChecklist") != ""){
					resposta.setIdRespostaChecklist(item.getLong("idRespostaChecklist"));
				}
				
				if(item.get("idMotorista") != null && item.get("idMotorista") != ""){
					Pessoa pessoa = new Pessoa();
					pessoa.setIdPessoa(Long.valueOf(item.getString("idMotorista")));
					resposta.setPessoa(pessoa);
				}
				
				
				if(item.getString("apr").equalsIgnoreCase("S"))
					resposta.setBlAprovado(Boolean.TRUE);
				else
					resposta.setBlAprovado(Boolean.FALSE);
						
				ItChecklistTpMeioTransp it = new ItChecklistTpMeioTransp();
				it.setIdItChecklistTpMeioTransp(item.getLong("id"));
				
				resposta.setItChecklistTpMeioTransp(it);
				
				
				resposta.setChecklistMeioTransporte(check);
				
				getRespostaChecklistService().store(resposta);
			}	
		
		 	situacaoChecklist =((ChecklistMeioTransporteService)defaultService).getSituacaoChecklistMeioTransporte(typedFlatMap.getLong("idChecklistMeioTransporte"));
		    
		     
		 	 DomainValue tpSituacaoCheck = new DomainValue();
		 	 tpSituacaoCheck.setValue(situacaoChecklist);
		 	 check.setTpSituacao(tpSituacaoCheck);
		 	 ((ChecklistMeioTransporteService)defaultService).updateSituacaoChecklist(check);
		 	  retorno.put("situacaoChecklist", situacaoChecklist);
		}
		 return retorno;
		 
	}
	 
	public TypedFlatMap findByIdCustom(Long id) {
		return ((ChecklistMeioTransporteService)defaultService).findByIdCustom(id);
	}
}
