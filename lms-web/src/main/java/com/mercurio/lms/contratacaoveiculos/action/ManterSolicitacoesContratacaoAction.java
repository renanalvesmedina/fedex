package com.mercurio.lms.contratacaoveiculos.action;

import static java.lang.Boolean.FALSE;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.joda.time.YearMonthDay;

import com.mercurio.adsm.core.util.Base64Util;
import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.PaginatedQuery;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.session.SessionContext;
import com.mercurio.adsm.framework.util.FilterList;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.ControleCarga;
import com.mercurio.lms.carregamento.model.FilialRotaCc;
import com.mercurio.lms.carregamento.model.service.ControleCargaService;
import com.mercurio.lms.carregamento.model.service.FilialRotaCcService;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.ConteudoParametroFilial;
import com.mercurio.lms.configuracoes.model.MoedaPais;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.configuracoes.model.service.ConteudoParametroFilialService;
import com.mercurio.lms.configuracoes.model.service.EnderecoPessoaService;
import com.mercurio.lms.configuracoes.model.service.ParametroGeralService;
import com.mercurio.lms.configuracoes.model.service.UsuarioService;
import com.mercurio.lms.contratacaoveiculos.model.AnexoSolicContratacao;
import com.mercurio.lms.contratacaoveiculos.model.FluxoContratacao;
import com.mercurio.lms.contratacaoveiculos.model.MeioTranspProprietario;
import com.mercurio.lms.contratacaoveiculos.model.MeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.SolicitacaoContratacao;
import com.mercurio.lms.contratacaoveiculos.model.TipoMeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.service.EixosTipoMeioTransporteService;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteService;
import com.mercurio.lms.contratacaoveiculos.model.service.SolicitacaoContratacaoService;
import com.mercurio.lms.contratacaoveiculos.model.service.TipoMeioTransporteService;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.ParcelaTabelaCe;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.TabelaColetaEntrega;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.service.ParcelaTabelaCeService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.FilialRota;
import com.mercurio.lms.municipios.model.Rota;
import com.mercurio.lms.municipios.model.RotaIdaVolta;
import com.mercurio.lms.municipios.model.service.FilialRotaService;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.RotaIdaVoltaService;
import com.mercurio.lms.municipios.model.service.RotaService;
import com.mercurio.lms.util.BigDecimalUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.workflow.model.Acao;
import com.mercurio.lms.workflow.model.Pendencia;
import com.mercurio.lms.workflow.model.service.AcaoService;

/**
 * Generated by: ADSM ActionGenerator
 *
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contratacaoveiculos.manterSolicitacoesContratacaoAction"
 */ 

public class ManterSolicitacoesContratacaoAction extends CrudAction {
	private TipoMeioTransporteService tipoMeioTransporteService;
	private FilialService filialService;
	private UsuarioService usuarioService;
	private DomainValueService domainValueService;
	private MeioTransporteService meioTransporteService;
	private EnderecoPessoaService enderecoPessoaService;
	private RotaService rotaService;
	private ParcelaTabelaCeService parcelaTabelaCeService;
	private ConfiguracoesFacade configuracoesFacade;
	private RotaIdaVoltaService rotaIdaVoltaService;
	private AcaoService acaoService;
	private FilialRotaService filialRotaService;
	private EixosTipoMeioTransporteService eixosTipoMeioTransporteService;
	private ControleCargaService controleCargaService;
	private FilialRotaCcService filialRotaCcService;
	private ParametroGeralService parametroGeralService;
    
    private ConteudoParametroFilialService conteudoParametroFilialService;
	private static final String PARAMETRO_FILIAL = "ATIVA_CALCULO_PADRAO";
	private static final String SIM = "S";
    
    
	public void removeById(java.lang.Long id) {
		getSolicitacaoContratacaoService().removeById(id);
	}

	/**
	 *
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		getSolicitacaoContratacaoService().removeByIds(ids);
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	public Map findById(java.lang.Long id) {
		TypedFlatMap result = getSolicitacaoContratacaoService().findByIdTela(id);
		MeioTransporte meioTransporte = null;
		if (result.get("nrIdentificacaoMeioTransp.nrPlaca") != null) {
			meioTransporte = meioTransporteService.findMeioTransporteByIdentificacao(result.getString("nrIdentificacaoMeioTransp.nrPlaca"));
			if(meioTransporte != null) {
				result.put("nrIdentificacaoMeioTransp.nrFrota", meioTransporte.getNrFrota());
			}
		}
		
		if(meioTransporte != null) {
		    if(meioTransporte.getMeioTranspProprietarios() != null){
		        MeioTranspProprietario meioTranspProprietario =  meioTransporteService.findProprietario(meioTransporte.getIdMeioTransporte());
		        if(meioTranspProprietario!= null){
		            result.put("proprietario.identificacao",meioTranspProprietario.getProprietario().getPessoa().getNrIdentificacao());
		            result.put("proprietario.nmProprietario",meioTranspProprietario.getProprietario().getPessoa().getNmPessoa());				
		        }
		        
		    }
		}

		if (result.get("nrIdentificacaoSemiReboque.nrPlaca") != null) {
			meioTransporte = meioTransporteService.findMeioTransporteByIdentificacao(result.getString("nrIdentificacaoSemiReboque.nrPlaca"));
			if(meioTransporte != null) {
				result.put("nrIdentificacaoSemiReboque.nrFrota", meioTransporte.getNrFrota());
			}
		}
		

		if (result.getLong("tipoMeioTransporte.idTipoMeioTransporte") != null) {
			Long idTipoMeioTransporte = result.getLong("tipoMeioTransporte.idTipoMeioTransporte");
			result.put("idTipoMeioTransporteTemp", idTipoMeioTransporte);
			result.put("dsTipoMeioTransporteTemp", result.getString("tipoMeioTransporte.dsTipoMeioTransporte"));
			if (idTipoMeioTransporte != null) {
				TipoMeioTransporte tpMeioTransporte = tipoMeioTransporteService.findById(idTipoMeioTransporte);
				if (tpMeioTransporte.getTipoMeioTransporte() != null) {
					result.put("idComposto", tpMeioTransporte.getTipoMeioTransporte().getIdTipoMeioTransporte());
					result.put("dsComposto", tpMeioTransporte.getTipoMeioTransporte().getDsTipoMeioTransporte());
				}
			}
		}
		result.put("tpVinculoContratacao", result.getString("tpVinculoContratacao"));

		//Regras 3.8 .. 3.10
		String tpSituacaoContratacao = result.getString("tpSituacaoContratacao");
		result.put("behavior", validBehavior(tpSituacaoContratacao, result.getLong("idPendencia")));

		if (result.get("idAcao") != null) {
			Acao acao = acaoService.findById(result.getLong("idAcao"));
			if (acao.getUsuario() != null) {
				result.put("acao.usuario.nmUsuario", acao.getUsuario().getNmUsuario());
				result.put("acao.usuario.nrMatricula", acao.getUsuario().getNrMatricula());
			}
			result.put("acao.dhAcao", acao.getDhAcao());
			result.put("acao.obAcao", acao.getObAcao());
		}
		result.put("tpModal", result.get("tpModal"));

		if ("V".equals(result.getString("tpSolicitacaoContratacao"))) {
			//VIAGEM
			if (result.getLong("rota.idRota") != null) {
				Long idRota = result.getLong("rota.idRota");
				Rota rota = rotaService.findById(idRota);
				List<FilialRota> filiaisRota = filialRotaService.findByIdRota(rota.getIdRota());
				List rotas = new ArrayList();
				for (FilialRota filialRota: filiaisRota) {
					Filial filial = filialService.findById(filialRota.getFilial().getIdFilial());
					if (filial != null) {
						Map filialMap = new HashMap();
							filialMap.put("sgFilial",filial.getSgFilial());
							filialMap.put("idFilial",filial.getIdFilial());
							filialMap.put("dtImplantacaoLMS", filial.getDtImplantacaoLMS());

						Map rotasMap = new HashMap();
							rotasMap.put("nmFilial",filial.getPessoa().getNmFantasia());
							rotasMap.put("filial",filialMap);
						rotas.add(rotasMap);
					}
				}
				result.put("blEnvolveParceira", rota.getBlEnvolveParceira());
				result.put("rotas",rotas);
			} else if (result.get("idRotaIdaVolta") != null) {
				RotaIdaVolta r = rotaIdaVoltaService.findById(result.getLong("idRotaIdaVolta"));
				result.put("rotaIdaVolta.idRotaIdaVolta", result.getLong("idRotaIdaVolta"));
				result.put("rotaIdaVolta.nrRota", r.getNrRota());
				result.put("rotaIdaVolta.dsRota", r.getRota().getDsRota());
			}
		} else if("P".equals(result.getString("tpSolicitacaoContratacao"))){
			
			result.put("vlFreteSugeridoPuxada", result.get("vlFreteSugerido"));
			result.put("vlFreteMaximoAutorizadoPuxada",result.get("vlFreteMaximoAutorizado"));
			result.put("vlFreteNegociadoPuxada", result.get("vlFreteNegociado"));
			
		} else {			
			//COLETA ENTREGA
			TabelaColetaEntrega tce = getSolicitacaoContratacaoService().findTabelaCEByIdSolicitacao(result.getLong("idSolicitacaoContratacao"));
			if (tce != null) {
				result.put("tabelaColetaEntrega.blDomingo",tce.getBlDomingo());
				result.put("tabelaColetaEntrega.blSegunda",tce.getBlSegunda());
				result.put("tabelaColetaEntrega.blTerca",tce.getBlTerca());
				result.put("tabelaColetaEntrega.blQuarta",tce.getBlQuarta());
				result.put("tabelaColetaEntrega.blQuinta",tce.getBlQuinta());
				result.put("tabelaColetaEntrega.blSexta",tce.getBlSexta());
				result.put("tabelaColetaEntrega.blSabado",tce.getBlSabado());

				result.put("tabelaColetaEntrega.dtVigenciaFinal",tce.getDtVigenciaFinal());
				result.put("tabelaColetaEntrega.dtVigenciaInicial",tce.getDtVigenciaInicial());
				result.put("tabelaColetaEntrega.hrDiariaInicial",tce.getHrDiariaInicial());
				result.put("tabelaColetaEntrega.idTabelaColetaEntrega",tce.getIdTabelaColetaEntrega());
			}else{
				result.put("tabelaColetaEntrega.dtVigenciaFinal",result.get("dtVigenciaFinal"));
				result.put("tabelaColetaEntrega.dtVigenciaInicial",result.get("dtVigenciaInicial"));
			}
			
		}
		return result;
	}

	@SuppressWarnings("rawtypes")
	private Integer validBehavior(String tpSituacaoContratacao, Long idPendencia) {
		if (tpSituacaoContratacao.equals("SA")) {
			if (idPendencia != null) {
				List acoes = acaoService.findByPendencia(idPendencia);
				if (acoes.size() > 0)
					return Integer.valueOf("8");
				else
					return Integer.valueOf("0");
			}
			return Integer.valueOf("7");
		} else if (tpSituacaoContratacao.equals("AN"))
			return Integer.valueOf("9");
		else if (tpSituacaoContratacao.equals("AP") || tpSituacaoContratacao.equals("RE") || tpSituacaoContratacao.equals("CA"))
			return Integer.valueOf("10");
		else 
			return Integer.valueOf("0");
	}

	@SuppressWarnings({ "rawtypes", "unchecked" })
	public List findComboTpMeioTransporte(TypedFlatMap criteria) {
		criteria.put("tpMeioTransporte", "R");

		List rs = tipoMeioTransporteService.find(criteria);
		List filtrado = new ArrayList();
		for (Iterator ie = rs.iterator(); ie.hasNext();) {
			TipoMeioTransporte tpMT = (TipoMeioTransporte)ie.next();
			TypedFlatMap result = new TypedFlatMap();
			result.put("idTipoMeioTransporte",tpMT.getIdTipoMeioTransporte());
			result.put("tpSituacao",tpMT.getTpSituacao());
			result.put("dsTipoMeioTransporte",tpMT.getDsTipoMeioTransporte());
			filtrado.add(result);
		}
		return filtrado;
	}

	@SuppressWarnings("rawtypes")
	public List findLookupFilial(Map criteria) {
		return filialService.findLookupFilial(criteria);
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	public List findLookupFilialByControleCarga(Map criteria) {
		List<Filial> filiais = filialService.findLookup(criteria);
		List<TypedFlatMap> result = new ArrayList<TypedFlatMap>();
		for (Filial filial : filiais) {
			TypedFlatMap mapFilial = new TypedFlatMap();
			mapFilial.put("idFilial", filial.getIdFilial());
			mapFilial.put("sgFilial", filial.getSgFilial());
			result.add(mapFilial);
		}
		return result;
    }
	
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public List<Map<String, Object>> findLookupControleCarga(Map criteria) {
		FilterList filter = new FilterList(controleCargaService.findLookup(criteria)) {
			public Map<String, Object> filterItem(Object item) {
				ControleCarga cc = (ControleCarga)item;
    			TypedFlatMap controleCarga = new TypedFlatMap();
	    		controleCarga.put("idControleCarga", cc.getIdControleCarga());
		    	controleCarga.put("nrControleCarga", cc.getNrControleCarga());
		    	controleCarga.put("filialByIdFilialOrigem.idFilial", cc.getFilialByIdFilialOrigem().getIdFilial());		    	
		    	controleCarga.put("filialByIdFilialOrigem.sgFilial", cc.getFilialByIdFilialOrigem().getSgFilial());
		    	controleCarga.put("filialByIdFilialOrigem.pessoa.nmFantasia", cc.getFilialByIdFilialOrigem().getPessoa().getNmFantasia());
				return controleCarga;
			}
    	};
    	return (List<Map<String, Object>>) filter.doFilter();
    }
	
	public List<TypedFlatMap> findDadosControleCarga(Long idControleCarga) {
		ControleCarga controleCarga = controleCargaService.findByIdInitLazyProperties(idControleCarga, false);
		String tpStatusControleCarga = controleCarga.getTpStatusControleCarga().getValue(); 
		if ("GE".equals(tpStatusControleCarga) 
				|| "FE".equals(tpStatusControleCarga)
				|| "CA".equals(tpStatusControleCarga)) {
			throw new BusinessException("LMS-29176");
		}
		// so chegara aqui se as regras acima nao estourarem, portanto retorna
		// as filiais
		List<FilialRotaCc> filialRotaCcs = filialRotaCcService.findByControleCarga(idControleCarga);
		if (filialRotaCcs != null) {
			List<TypedFlatMap> result = new ArrayList<TypedFlatMap>();
			for (FilialRotaCc frcc : filialRotaCcs) {
				TypedFlatMap mapFrcc = new TypedFlatMap();
				mapFrcc.put("idFilial", frcc.getFilial().getIdFilial());
				mapFrcc.put("sgFilial", frcc.getFilial().getSgFilial());
				mapFrcc.put("pessoa.nmFantasia", frcc.getFilial().getPessoa().getNmFantasia());
				result.add(mapFrcc);
			}
			return result;
		}
		return null;
	}
	
	@SuppressWarnings("rawtypes")
	public List findLookupRotasViagem(TypedFlatMap tfm) {
		List toReturn = rotaIdaVoltaService.findLookupRotaIdaVolta(tfm);
		return toReturn;
	}
 
	@SuppressWarnings("rawtypes")
	public List findLookupUsuario(TypedFlatMap tfm) {
		return usuarioService.findLookupUsuarioFuncionario(tfm.getLong("idUsuario"), tfm.getString("nrMatricula"), null, null, null, null, true);
	}

	@SuppressWarnings("rawtypes")
	public List findComboMoedaPais(TypedFlatMap criteria) {
		return configuracoesFacade.getMoedasPais(enderecoPessoaService.findEnderecoPessoaPadrao(criteria.getLong("idFilial")).getMunicipio().getUnidadeFederativa().getPais().getIdPais(),Boolean.TRUE);
	} 

	@SuppressWarnings("rawtypes")
	public List findTpVeiculo(TypedFlatMap tfm) {
		if (tfm != null) {
			String tpSolicitacaoContratacao = tfm.getString("tpSolicitacaoContratacao");

			List list = domainValueService.findDomainValues("DM_TIPO_VINCULO_VEICULO",Boolean.TRUE);
			if (tpSolicitacaoContratacao.equals("C")) {
				for(int x = 0; x < list.size(); x++) {
					if (((DomainValue)list.get(x)).getValue().equals("P"))
						list.remove(x);
				}
			}
			return list;
		} else return Collections.EMPTY_LIST;
	}

	@SuppressWarnings({ "rawtypes", "unchecked" })
	public List findGridParcelas(TypedFlatMap criteria) {
		Long idTabelaColetaEntrega = criteria.getLong("idTabelaColetaEntrega");
		Long idTipoMeioTransporte = criteria.getLong("idTipoMeioTransporte");
		Long idFilial = criteria.getLong("idFilial");
		YearMonthDay date = criteria.getYearMonthDay("dtVigenciaInicial");
		String tpSituacaoContratacao = criteria.getString("tpSituacaoContratacao");

		if (date == null)
			date = JTDateTimeUtils.getDataAtual();

		List result = new ArrayList();

		//INCLUSAO
		for (int x = 0;x < SolicitacaoContratacaoService.values.length; x++) {
			TypedFlatMap resultT = new TypedFlatMap();
			// DH or EV ...
			String atualDomain = domainValueService.findDomainValueByValue("DM_TIPO_PARCELA_FRETE_COLETA_ENTREGA",SolicitacaoContratacaoService.values[x]).getValue();

			// PRIMEIRA VEZ QUE ENTRA NA TELA
			if (idTabelaColetaEntrega == null) {
				if(!atualDomain.equals("PF") && !atualDomain.equals("PV")) {
				if (idTipoMeioTransporte != null && idFilial != null) {
					resultT.put("tpParcela",domainValueService.findDomainValueByValue("DM_TIPO_PARCELA_FRETE_COLETA_ENTREGA",SolicitacaoContratacaoService.values[x]));

					ParcelaTabelaCe parcelas = getSolicitacaoContratacaoService().findParcelaTabelaCeByTpParcela(resultT.getDomainValue("tpParcela").getValue(),idTipoMeioTransporte,date,idFilial);
					if (parcelas != null)
						resultT.put("vlFreteReferencia",parcelas.getVlDefinido());
				}
				}
			} else {
				
				ParcelaTabelaCe parcela = parcelaTabelaCeService.findParcelaTabelaCeByTpParcelaAndTabelaCE(atualDomain,idTabelaColetaEntrega);
				if (parcela == null) {
					if (idTipoMeioTransporte != null && date != null) {
						DomainValue dmTpParcela = domainValueService.findDomainValueByValue("DM_TIPO_PARCELA_FRETE_COLETA_ENTREGA",SolicitacaoContratacaoService.values[x]);
						ParcelaTabelaCe parcelas = getSolicitacaoContratacaoService().findParcelaTabelaCeByTpParcela(atualDomain,idTabelaColetaEntrega,null,null);
						if (parcelas != null){
							resultT.put("vlFreteReferencia",parcelas.getVlDefinido());
						} else if(tpSituacaoContratacao.equals("SA") && ("PF".equals(atualDomain) || "PV".equals(atualDomain))) {
							resultT = this.populateParcela(dmTpParcela);
					}
					}
				} else {
					resultT.put("tpParcela",domainValueService.findDomainValueByValue("DM_TIPO_PARCELA_FRETE_COLETA_ENTREGA",SolicitacaoContratacaoService.values[x]));
					resultT.put("idParcelaTabelaCe",parcela.getIdParcelaTabelaCe());
					resultT.put("vlSugerido",parcela.getVlSugerido());
					resultT.put("vlMaximoAprovado",parcela.getVlMaximoAprovado());
					resultT.put("vlNegociado",parcela.getVlNegociado());
					resultT.put("vlFreteReferencia",parcela.getVlReferencia());
					resultT.put("pcSobreValor",parcela.getPcSobreValor());
				}
			}
			if(!resultT.isEmpty()){
			result.add(resultT);
		}
		}
		
		return result; 
	}

	private TypedFlatMap populateParcela(DomainValue tpParcela) {
		TypedFlatMap rTpParcela = new TypedFlatMap();
		rTpParcela.put("tpParcela",tpParcela);
		rTpParcela.put("vlSugerido", BigDecimalUtils.ZERO);

		return rTpParcela;
	}
	
	public Integer getRowCountGridParcelas(TypedFlatMap criteria) {
		return Integer.valueOf(SolicitacaoContratacaoService.values.length);
	}

	public Integer getRowCountFluxoContratacao(TypedFlatMap criteria) {
		return getSolicitacaoContratacaoService().getRowCountFluxoContratacao(criteria);
	}

	@SuppressWarnings("rawtypes")
	public List findGridFluxoContratacao(TypedFlatMap criteria) {
		BigDecimal vlFreteSugerido = criteria.getBigDecimal("vlFreteSugerido");
		BigDecimal vlFreteMaximoAutorizado = criteria.getBigDecimal("vlFreteMaximoAutorizado");
		BigDecimal valor = vlFreteMaximoAutorizado != null && ! BigDecimal.ZERO.equals(vlFreteMaximoAutorizado)
			? vlFreteMaximoAutorizado
			: vlFreteSugerido != null ? vlFreteSugerido : BigDecimal.ZERO;
		
		return findFluxosContratacao(criteria, valor);
	}

	@SuppressWarnings("rawtypes")
	public ResultSetPage findPaginated(TypedFlatMap criteria) {
		return getSolicitacaoContratacaoService().findPaginated(criteria);
	}

	public Integer getRowCount(TypedFlatMap criteria) {
		return getSolicitacaoContratacaoService().getRowCount(criteria);
	}

	@SuppressWarnings({ "rawtypes", "unchecked", "unused" })
	public TypedFlatMap store(TypedFlatMap parameters) {
		List parcelas = new ArrayList();
		List fluxoContratacaoList = new ArrayList();
		
		if ("V".equals(parameters.getDomainValue("tpSolicitacaoContratacao").getValue()) || 
				("C".equals(parameters.getDomainValue("tpSolicitacaoContratacao").getValue()) && "A".equals(parameters.getDomainValue("tpVinculoContratacao").getValue()))
				|| (isCalculoPadrao(parameters.getLong("filial.idFilial")) && "C".equals(parameters.getDomainValue("tpSolicitacaoContratacao").getValue()))
				) {
			if(parameters.getString("nrIdentificacaoMeioTransp.nrPlaca").isEmpty() && parameters.getString("nrIdentificacaoSemiReboque.nrPlaca").isEmpty()){
				throw new BusinessException("LMS-04239");
			}
		}

		RotaIdaVolta rotaIdaVolta = null;
		if (parameters.getLong("rotaIdaVolta.idRotaIdaVolta") != null) {
			rotaIdaVolta = rotaIdaVoltaService.findById(parameters.getLong("rotaIdaVolta.idRotaIdaVolta"));
		}
		SolicitacaoContratacao bean = mapToBean(parameters, rotaIdaVolta);

		// valida fluxo contratacao
		if ("V".equals(parameters.getDomainValue("tpSolicitacaoContratacao").getValue())) {
			fluxoContratacaoList = mapToFluxoContratacaoList(parameters);
			
			if (parameters.getLong("idSolicitacaoContratacao") == null || fluxoContratacaoList.size() > 0) {
				//Caso não entrou na tela de fluxo e é inclusão
				if (fluxoContratacaoList.size() == 0) {
					parameters.put("idRotaIdaVolta", parameters.get("rotaIdaVolta.idRotaIdaVolta"));
					fluxoContratacaoList = getSolicitacaoContratacaoService().findGridFluxoContratacao(parameters);
				}
				
				//Caso esteja incluindo a solicitação e não informou os fluxos
				if (fluxoContratacaoList.size() == 0) {
					throw new BusinessException("LMS-26098");
				}
				//Soma os percentuais e deve fechar em 100%
				BigDecimal somatorio = BigDecimal.ZERO;
				for (Iterator ie = fluxoContratacaoList.iterator(); ie.hasNext();) {
					FluxoContratacao fluxoContratacao = (FluxoContratacao)ie.next();
					
					if (fluxoContratacao.getPcValorFrete() == null) {
						throw new BusinessException("LMS-26099");
					}
					somatorio = somatorio.add(fluxoContratacao.getPcValorFrete());
				}
				
				if (new BigDecimal(100).compareTo(somatorio) != 0) {
					throw new BusinessException("LMS-26100");
				}
			}
		}
		
		if (parameters.getLong("usuarioSolicitador.idUsuario") != null) {
			Usuario usuario = new Usuario();
			usuario.setIdUsuario(parameters.getLong("usuarioSolicitador.idUsuario"));
			bean.setUsuarioSolicitador(usuario);
		}

		if (parameters.getLong("idPendencia") != null) {
			Pendencia pendencia = new Pendencia();
			pendencia.setTpSituacaoPendencia(parameters.getDomainValue("tpSituacaoPendencia"));
			pendencia.setIdPendencia(parameters.getLong("idPendencia"));
			bean.setPendencia(pendencia);
		}

		if (parameters.getLong("idAcao") != null) {
			Acao acao = new Acao();
			acao.setIdAcao(parameters.getLong("idAcao"));
			bean.setAcao(acao);
		}
		
		if (parameters.getLong("controleCarga.idControleCarga") != null) {
			ControleCarga controleCarga = new ControleCarga();
			controleCarga.setIdControleCarga(parameters.getLong("controleCarga.idControleCarga"));
			bean.setControleCarga(controleCarga);
		}

		if ("V".equals(bean.getTpSolicitacaoContratacao().getValue())) {

			bean.setDtViagem(parameters.getYearMonthDay("dtViagem"));
			bean.setVlFreteSugerido(parameters.getBigDecimal("vlFreteSugerido"));
			bean.setVlFreteMaximoAutorizado(parameters.getBigDecimal("vlFreteMaximoAutorizado"));
			bean.setVlFreteNegociado(parameters.getBigDecimal("vlFreteNegociado"));

			if (parameters.getString("tpRotaSolicitacao") != null
					&& "EV".equals(parameters.getString("tpRotaSolicitacao"))) {
				List<TypedFlatMap> tempRota = parameters.getList("rotas");

				if (tempRota == null || tempRota.size() < 2)
					throw new BusinessException("LMS-26066");

				if (FALSE.equals(bean.getBlQuebraMeioTransporte())) {
					Long idFilialSolicitacao = bean.getFilial().getIdFilial();
					Long idFilialRota = tempRota.get(0).getLong("filial.idFilial");
					if (!idFilialSolicitacao.equals(idFilialRota)) {
						throw new BusinessException("LMS-26071");
					}
				}

				List<Filial> rotas = new ArrayList<Filial>();
				StringBuilder dsRota = new StringBuilder();
				for (TypedFlatMap filialMap : tempRota) {
					Filial filialRota = new Filial();
					filialRota.setIdFilial(filialMap.getLong("filial.idFilial"));
					filialRota.setDtImplantacaoLMS(filialMap.getYearMonthDay("filial.dtImplantacaoLMS"));
					filialRota.setSgFilial(filialMap.getString("filial.sgFilial"));
					rotas.add(filialRota);
					if (dsRota.length() > 0) {
						dsRota.append("-");
					}
					dsRota.append(filialRota.getSgFilial());
				}
				Rota rota = rotaService.storeValidaByFiliais(rotas);
				if (rota.getIdRota() != null) {
					rota.setIdRota(rota.getIdRota());
					bean.setRota(rota);
				}
			}
		} else {
			
			if("P".equals(bean.getTpSolicitacaoContratacao().getValue())) {
				bean.setVlFreteSugerido(parameters.getBigDecimal("vlFreteSugeridoPuxada"));
				bean.setVlFreteMaximoAutorizado(parameters.getBigDecimal("vlFreteMaximoAutorizadoPuxada"));
				bean.setVlFreteNegociado(parameters.getBigDecimal("vlFreteNegociadoPuxada"));
			}
			
			bean.setNrIdentificacaoMeioTransp(parameters.getString("nrIdentificacaoMeioTransp.nrPlaca"));
			bean.setNrAnoFabricacaoMeioTransporte(parameters.getLong("nrAnoFabricacaoMeioTransporte"));
			bean.setNrIdentificacaoSemiReboque(parameters.getString("nrIdentificacaoSemiReboque.nrPlaca"));
			bean.setNrAnoFabricacaoMeioTransporteSemiReboque(parameters.getLong("nrAnoFabricacaoMeioTransporteSemiReboque"));

			if (!"A".equals(bean.getTpVinculoContratacao().getValue())  && !"P".equals(bean.getTpSolicitacaoContratacao().getValue())) {			

				if (parameters.getYearMonthDay("tabelaColetaEntrega.dtVigenciaInicial") == null
						|| parameters.getYearMonthDay("tabelaColetaEntrega.dtVigenciaFinal") == null) {
					throw new BusinessException("LMS-29153");
				}else{
					bean.setDtInicioContratacao(parameters.getYearMonthDay("tabelaColetaEntrega.dtVigenciaInicial"));
					bean.setDtFimContratacao(parameters.getYearMonthDay("tabelaColetaEntrega.dtVigenciaFinal"));
				}
				
				if(!isCalculoPadrao(bean.getFilial().getIdFilial())){
					if (!parameters.getBoolean("tabelaColetaEntrega.blDomingo").booleanValue()
							&& !parameters.getBoolean("tabelaColetaEntrega.blQuarta").booleanValue()
							&& !parameters.getBoolean("tabelaColetaEntrega.blQuinta").booleanValue()
							&& !parameters.getBoolean("tabelaColetaEntrega.blSabado").booleanValue()
							&& !parameters.getBoolean("tabelaColetaEntrega.blSegunda").booleanValue()
							&& !parameters.getBoolean("tabelaColetaEntrega.blSexta").booleanValue()
							&& !parameters.getBoolean("tabelaColetaEntrega.blTerca").booleanValue()) {
						throw new BusinessException("LMS-29020");
					}
					parcelas = mapToTabelaColetaEntrega(parameters, bean.getFilial(), bean.getTipoMeioTransporte());
					if (parcelas.size() <= 0) {
						throw new BusinessException("LMS-26036");
					}					
				}
			}
		}
		
		//1
		if ("CR".equals(bean.getTpSituacaoContratacao().getValue()) &&
				"V".equals(bean.getTpSolicitacaoContratacao().getValue()) && 
				bean.getDtViagem().compareTo(JTDateTimeUtils.getDataAtual()) < 0) {
			throw new BusinessException("LMS-26035");
		}

		//7
		if ("V".equals(bean.getTpSolicitacaoContratacao().getValue()) && 
				"AN".equals(bean.getTpSituacaoContratacao().getValue()) && 
				(bean.getVlFreteNegociado() == null || 
						StringUtils.isBlank(bean.getNrIdentificacaoMeioTransp()))) {
			throw new BusinessException("LMS-26042");
		}

		//8
		if("V".equals(bean.getTpSolicitacaoContratacao().getValue()) && 
				"AN".equals(bean.getTpSituacaoContratacao().getValue()) && 
				bean.getVlFreteMaximoAutorizado() != null && 
				bean.getVlFreteNegociado().compareTo(bean.getVlFreteMaximoAutorizado()) == 1) {
			throw new BusinessException("LMS-26043");
		}
		
		//LMS-2681
		validateAnoVeiculo(parameters, bean);

		//LMS-4808
		this.validateParcelasFreteOrValor("PF", parameters);
		this.validateParcelasFreteOrValor("PV", parameters);
		this.validatePreenchimentoVlAutorizadoAndPercSobreValor("PF", parameters);
		this.validatePreenchimentoVlAutorizadoAndPercSobreValor("PV", parameters);
		
		SolicitacaoContratacao solicitacao = getSolicitacaoContratacaoService().store(bean, parcelas, fluxoContratacaoList);
		
		TypedFlatMap result = new TypedFlatMap();

		if (parameters.getDomainValue("tpSituacaoContratacao") != null
				&& parameters.getDomainValue("tpSituacaoContratacao").getValue().equals("SA")) {

			if (bean.getTpSolicitacaoContratacao().getValue().equals("V")) {
				if (bean.getVlFreteMaximoAutorizado() != null
						&& bean.getVlFreteSugerido() != null
						&& bean.getVlFreteMaximoAutorizado().compareTo(bean.getVlFreteSugerido()) > 0)
					result.put("excedeuSugerido", Boolean.TRUE);
			} else {
				for (Iterator i = parcelas.iterator(); i.hasNext();) {
					ParcelaTabelaCe parcela = (ParcelaTabelaCe) i.next();
					if (parcela.getVlSugerido() != null
							&& parcela.getVlMaximoAprovado() != null
							&& parcela.getVlMaximoAprovado().compareTo(parcela.getVlSugerido()) > 0) {
						result.put("excedeuSugerido", Boolean.TRUE);
						break;
					}
				}
			}
		}
		result.put("tpSituacaoContratacao", bean.getTpSituacaoContratacao().getValue());
		result.put("idSolicitacaoContratacao", bean.getIdSolicitacaoContratacao());
		result.put("nrSolicitacaoContratacao", bean.getNrSolicitacaoContratacao());
		result.put("nrAnoFabricacaoMeioTransporte", bean.getNrAnoFabricacaoMeioTransporte());
		result.put("nrAnoFabricacaoMeioTransporteSemiReboque", bean.getNrAnoFabricacaoMeioTransporteSemiReboque());
		result.put("dtCriacao", bean.getDtCriacao());
		result.put("behavior", validBehavior(bean.getTpSituacaoContratacao().getValue(), 
				((bean.getPendencia() == null) ? null : bean.getPendencia().getIdPendencia())));

		if (bean.getPendencia() != null)
			result.put("idPendencia", bean.getPendencia().getIdPendencia());
		if (parcelas != null && parcelas.size() > 0
				&& parcelas.get(0) instanceof ParcelaTabelaCe) {
			List parcelasReturn = new ArrayList();
			result.put("tabelaColetaEntrega.idTabelaColetaEntrega",
					((ParcelaTabelaCe) parcelas.get(0)).getTabelaColetaEntrega().getIdTabelaColetaEntrega());
			for (int x = 0; x < parcelas.size(); x++) {
				ParcelaTabelaCe parcela = (ParcelaTabelaCe) parcelas.get(x);
				TypedFlatMap row = new TypedFlatMap();
				row.put("id", parcela.getIdParcelaTabelaCe());
				row.put("vlRef", parcela.getVlReferencia());
				parcelasReturn.add(row);
			}
			result.put("Parcela", parcelasReturn);
		} else if (parcelas != null && parcelas.size() > 0
				&& parcelas.get(0) instanceof TabelaColetaEntrega)
			result.put("tabelaColetaEntrega.idTabelaColetaEntrega",
					((TabelaColetaEntrega) parcelas.get(0)).getIdTabelaColetaEntrega());
		
		if(fluxoContratacaoList!=null && !fluxoContratacaoList.isEmpty() && fluxoContratacaoList.get(0) instanceof FluxoContratacao ){
			List fluxosReturn = new ArrayList(); 
			for (int i = 0; i < fluxoContratacaoList.size(); i++) {
				FluxoContratacao fluxoContratacao =  (FluxoContratacao)fluxoContratacaoList.get(i);
				TypedFlatMap row = new TypedFlatMap();
				row.put("id", fluxoContratacao.getIdFluxoContratacao());
				row.put("nrChaveLiberacao", fluxoContratacao.getNrChaveLiberacao());
				fluxosReturn.add(row);
			}
			result.put("FluxoContratacao", fluxosReturn);
		}
		
		List<String> warnings = (List)SessionContext.get("SESSION_WARNINGS");
		if(warnings != null && warnings.size() > 0) {
			String users = "";
			for (String warn : warnings) {
				users += (warn + ", ");
			}
			users = users.substring(0, users.length()-2);
			result.put("emailInvalido", "Email do(s) integrante(s) "+users+" não informado no sistema!");
		}
		
		return result;
	}

	private boolean isCalculoPadrao(Long idFilial) {
		ConteudoParametroFilial conteudoParametroFilial = conteudoParametroFilialService.findByNomeParametro(idFilial, PARAMETRO_FILIAL, false, true);
		if (conteudoParametroFilial != null && SIM.equalsIgnoreCase(conteudoParametroFilial.getVlConteudoParametroFilial())) {
			return true;
		}
		return false;
	}

	/**
	 * LMS - 4808 -	Ao clicar em salvar tudo, o LMS validará o preenchimento das parcelas, verificando se elas seguem as seguintes regras de preenchimento:
	 * 	Se a parcela % de frete estiver preenchida, nenhuma outra parcela pode ter o valor maior que 0. 
	 * 	Se a parcela % de valor de mercadoria estiver preenchida, nenhuma outra parcela pode ter o valor maior que 0. 
	 * 
	 * */
	@SuppressWarnings("unchecked")
	private void validateParcelasFreteOrValor(String tpParcela, TypedFlatMap parameters) {
		List<TypedFlatMap> listParcelas = (List<TypedFlatMap>) parameters.getList("ParcelaTabelaCe");
		
		if (listParcelas != null) {
			// Pega vlMaximaAprovadoPF para comparar com as outras parcelas
			BigDecimal vlMaximoAprovado = null;
			for (TypedFlatMap typedFlatMap : listParcelas) {
				if (typedFlatMap.getString("tpParcela.value").equals(tpParcela)) {
					vlMaximoAprovado = typedFlatMap.getBigDecimal("vlMaximoAprovado");
					break;
				}
			}

			// Comparar vlMaximaAprovadoPF com as outras parcelas
			for (TypedFlatMap typedFlatMap : listParcelas) {
				if (!typedFlatMap.getString("tpParcela.value").equals(tpParcela)) {
					if (typedFlatMap.getBigDecimal("vlMaximoAprovado") != null) {
						if (BigDecimalUtils.hasValue(vlMaximoAprovado) && BigDecimalUtils.hasValue(typedFlatMap.getBigDecimal("vlMaximoAprovado"))) {
							String lblPV = getMessage("percentualSobreValor");
							String lblPF = getMessage("percentualFrete");
							throw new BusinessException("LMS-26115", new Object[] { lblPF, lblPV });
						}
					}
				}
			}
		}
	}
	
	/**
	 * LMS-4808
	 * - Se a parcela % de frete ou a parcela de % de valor de mercadoria estiverem apenas com o Valor autorizado até ou apenas com a % sobre valor preenchidos, exibir a mensagem: LMS-26114. Após isso abortar operação.
	 * 	LMS-26114: Para salvar uma tabela com parcela de {0} é necessário que o campo "Valor autorizado até" e "% sobre valor" estejam preenchidos.
	 * 	{0}: Label da parcela que está sendo salva.

	 * 
	 * */
	private void validatePreenchimentoVlAutorizadoAndPercSobreValor(String tpParcela, TypedFlatMap parameters) {
		@SuppressWarnings("unchecked")
		List<TypedFlatMap> listParcelas = (List<TypedFlatMap>) parameters.getList("ParcelaTabelaCe");
		
		if(listParcelas != null) {
			for (TypedFlatMap typedFlatMap : listParcelas) {
				if (typedFlatMap.getString("tpParcela.value").equals(tpParcela)) {
					if((typedFlatMap.getBigDecimal("vlMaximoAprovado") != null &&
							typedFlatMap.getBigDecimal("pcSobreValor") == null) ||
						(typedFlatMap.getBigDecimal("vlMaximoAprovado") == null &&
							typedFlatMap.getBigDecimal("pcSobreValor") != null)) {
						String lblPercentual = "PV".equals(tpParcela) ? getMessage("percentualSobreValor") : getMessage("percentualFrete");
						throw new BusinessException("LMS-26114", new Object[] { lblPercentual });
					}
				}
			}
		}
	}
	
	/**
	 * Valida o ano do veiculo.
	 * @param parameters
	 * @param bean
	 */
	private void validateAnoVeiculo(TypedFlatMap parameters, SolicitacaoContratacao bean) {
		if ("AN".equals(bean.getTpSituacaoContratacao().getValue()) && StringUtils.isNotBlank(bean.getNrIdentificacaoMeioTransp())) {
			MeioTransporte meioTransporte = meioTransporteService.findMeioTransporteByIdentificacao(bean.getNrIdentificacaoMeioTransp());
			if (meioTransporte == null) {
				if (bean.getNrAnoFabricacaoMeioTransporte() == null) {
					throw new BusinessException("LMS-26110");
				}
			} else {
				bean.setNrAnoFabricacaoMeioTransporte(Long.valueOf(meioTransporte.getNrAnoFabricao()));
			}

		
			TipoMeioTransporte tipoMeioTransporte = tipoMeioTransporteService.findById(bean.getTipoMeioTransporte().getIdTipoMeioTransporte());
			if (tipoMeioTransporte.getTipoMeioTransporte() != null) {
				if (bean.getNrIdentificacaoMeioTransp() != null && !"".equals(bean.getNrIdentificacaoMeioTransp()) && 
						bean.getNrAnoFabricacaoMeioTransporte() != null && !"".equals(bean.getNrAnoFabricacaoMeioTransporte()) &&
						bean.getNrIdentificacaoSemiReboque() != null && !"".equals(bean.getNrIdentificacaoSemiReboque()) && 
						(bean.getNrAnoFabricacaoMeioTransporteSemiReboque() == null || "".equals(bean.getNrAnoFabricacaoMeioTransporteSemiReboque()))) {
					
					MeioTransporte meioTransporteSemiReboque = meioTransporteService.findMeioTransporteByIdentificacao(bean.getNrIdentificacaoSemiReboque());
					if (meioTransporteSemiReboque == null) {
						throw new BusinessException("LMS-26111");
					} else {
						bean.setNrAnoFabricacaoMeioTransporteSemiReboque(Long.valueOf(meioTransporteSemiReboque.getNrAnoFabricao()));
					}
				} 
			}
		
			if (!"S".equals(parameters.getString("isAnoConfirmado"))) {
				Integer nrAnos = Integer.valueOf(parametroGeralService.findByNomeParametro("NR_ANOS_MAX_CONTRATACAO_MEIO_TRANSP").getDsConteudo());
				
				Integer diferenca = (Integer.valueOf(JTDateTimeUtils.getDataAtual().getYear())) - (Integer.valueOf(bean.getNrAnoFabricacaoMeioTransporte().toString()));
				if (nrAnos.compareTo(diferenca) < 0) {
					throw new BusinessException("LMS-26112",new Object[]{nrAnos});
				}
			}
		}
	}
	@SuppressWarnings("unchecked")
	private List<FluxoContratacao> mapToFluxoContratacaoList(TypedFlatMap parameters) {
		List<FluxoContratacao> toReturn = new ArrayList<FluxoContratacao>();
		List<TypedFlatMap> fluxoContratacaoListMap;
		if (parameters.get("FluxoContratacao") instanceof List) {
			fluxoContratacaoListMap = parameters.getList("FluxoContratacao");
		} else fluxoContratacaoListMap = new ArrayList<TypedFlatMap>();
		for (TypedFlatMap fluxoContratacaoMap: fluxoContratacaoListMap) {
			FluxoContratacao fluxoContratacao = new FluxoContratacao();
			fluxoContratacao.setIdFluxoContratacao(fluxoContratacaoMap.getLong("idFluxoContratacao"));
			
			String nrChaveLiberacao = fluxoContratacaoMap.getString("nrChaveLiberacaoEdit");
			if (! StringUtils.isEmpty(nrChaveLiberacao)) {
				fluxoContratacao.setNrChaveLiberacao(nrChaveLiberacao);
			} else {
				fluxoContratacao.setNrChaveLiberacao("0");
			}
			
			if (fluxoContratacaoMap.get("pcValorFrete") != null) {
				fluxoContratacao.setPcValorFrete(fluxoContratacaoMap.getBigDecimal("pcValorFrete"));
			}
			
			Filial filialOrigem = new Filial();
			filialOrigem.setIdFilial(fluxoContratacaoMap.getLong("filialOrigem.idFilial"));
			fluxoContratacao.setFilialOrigem(filialOrigem);
			
			Filial filialDestino = new Filial();
			filialDestino.setIdFilial(fluxoContratacaoMap.getLong("filialDestino.idFilial"));
			fluxoContratacao.setFilialDestino(filialDestino);
			
			fluxoContratacao.setTpAbrangencia(new DomainValue(fluxoContratacaoMap.getString("tpAbrangencia")));
			
			toReturn.add(fluxoContratacao);
		}
		return toReturn;
	}
	
	@SuppressWarnings("rawtypes")
	public List findComboModal(){
		List<String> values = new ArrayList<String>();
		values.add("A"); // aereo
		values.add("R"); // rodoviário
		return domainValueService.findByDomainNameAndValues("DM_TIPO_MEIO_TRANSPORTE", values);
	}

	private SolicitacaoContratacao mapToBean(TypedFlatMap parameters, RotaIdaVolta rotaIdaVolta) {
		SolicitacaoContratacao bean = new SolicitacaoContratacao();
		bean.setIdSolicitacaoContratacao(parameters.getLong("idSolicitacaoContratacao"));
		bean.setTpSolicitacaoContratacao(parameters.getDomainValue("tpSolicitacaoContratacao"));
		bean.setTpVinculoContratacao(parameters.getDomainValue("tpVinculoContratacao"));
		bean.setNrSolicitacaoContratacao(parameters.getLong("nrSolicitacaoContratacao"));
		bean.setBlIndicadorRastreamento(parameters.getBoolean("blIndicadorRastreamento"));
		bean.setObObservacao(parameters.getString("obObservacao"));
		bean.setDtCriacao(parameters.getYearMonthDay("dtCriacao"));
		bean.setTpRotaSolicitacao(parameters.getDomainValue("tpRotaSolicitacao"));
		bean.setTpFluxoContratacao(parameters.getDomainValue("tpFluxoContratacao"));
		bean.setTpAbrangencia(parameters.getDomainValue("tpAbrangencia"));
		Filial filial = new Filial();
		filial.setIdFilial(parameters.getLong("filial.idFilial"));
		filial.setDtImplantacaoLMS(parameters.getYearMonthDay("filial.dtImplantacaoLMS"));
		bean.setFilial(filial);
		bean.setRotaIdaVolta(rotaIdaVolta);
		TipoMeioTransporte tipoMeioTransporte = new TipoMeioTransporte();
		tipoMeioTransporte.setIdTipoMeioTransporte(parameters.getLong("tipoMeioTransporte.idTipoMeioTransporte"));
		bean.setTipoMeioTransporte(tipoMeioTransporte);
		MoedaPais moedaPais = new MoedaPais();
		moedaPais.setIdMoedaPais(parameters.getLong("moedaPais.idMoedaPais"));
		bean.setMoedaPais(moedaPais);
		bean.setNrIdentificacaoMeioTransp(parameters.getString("nrIdentificacaoMeioTransp.nrPlaca"));
		bean.setNrIdentificacaoSemiReboque(parameters.getString("nrIdentificacaoSemiReboque.nrPlaca"));
		bean.setNrAnoFabricacaoMeioTransporteSemiReboque(parameters.getLong("nrAnoFabricacaoMeioTransporteSemiReboque"));
		bean.setNrAnoFabricacaoMeioTransporte(parameters.getLong("nrAnoFabricacaoMeioTransporte"));
		bean.setTpSituacaoContratacao(parameters.getDomainValue("tpSituacaoContratacao"));
		bean.setNrDddSolicitante(parameters.getString("nrDddSolicitante"));
		bean.setNrTelefoneSolicitante(parameters.getString("nrTelefoneSolicitante"));
		bean.setQtEixos(parameters.getInteger("eixosTipoMeioTransporte.qtEixos"));
		bean.setVlPostoPassagem(parameters.getBigDecimal("vlPostoPassagem"));
		bean.setVlPostoPassagem(parameters.getBigDecimal("vlPostoPassagem"));
		bean.setTpModal(parameters.getDomainValue("tpModal"));
		String blQuebraMeioTransporte = parameters.getString("blQuebraMeioTransporte");
		if (StringUtils.isNotBlank(blQuebraMeioTransporte)) {
			if ("S".equals(blQuebraMeioTransporte)) {
				bean.setBlQuebraMeioTransporte(Boolean.TRUE);
			} else {
				bean.setBlQuebraMeioTransporte(Boolean.FALSE);
			}
		} else {
			bean.setBlQuebraMeioTransporte(Boolean.FALSE);
		}
		
		// LMSA-6319
		bean.setTpCargaCompartilhada(parameters.getDomainValue("cargaCompartilhada.tipo"));
		
		return bean;
	}
	
	@SuppressWarnings({ "rawtypes", "unchecked", "unused" })
	private List mapToTabelaColetaEntrega(TypedFlatMap parameters, Filial filial, TipoMeioTransporte tipoMeioTransporte) {
		List list = new ArrayList();
		TabelaColetaEntrega tabelaColetaEntrega = new TabelaColetaEntrega();
		tabelaColetaEntrega.setIdTabelaColetaEntrega(parameters.getLong("tabelaColetaEntrega.idTabelaColetaEntrega"));
		tabelaColetaEntrega.setBlDomingo(parameters.getBoolean("tabelaColetaEntrega.blDomingo"));
		tabelaColetaEntrega.setBlSegunda(parameters.getBoolean("tabelaColetaEntrega.blSegunda"));
		tabelaColetaEntrega.setBlTerca(parameters.getBoolean("tabelaColetaEntrega.blTerca"));
		tabelaColetaEntrega.setBlQuarta(parameters.getBoolean("tabelaColetaEntrega.blQuarta"));
		tabelaColetaEntrega.setBlQuinta(parameters.getBoolean("tabelaColetaEntrega.blQuinta"));
		tabelaColetaEntrega.setBlSexta(parameters.getBoolean("tabelaColetaEntrega.blSexta"));
		tabelaColetaEntrega.setBlSabado(parameters.getBoolean("tabelaColetaEntrega.blSabado"));
		tabelaColetaEntrega.setHrDiariaInicial(parameters.getTimeOfDay("tabelaColetaEntrega.hrDiariaInicial"));
		tabelaColetaEntrega.setDtVigenciaInicial(parameters.getYearMonthDay("tabelaColetaEntrega.dtVigenciaInicial"));
		tabelaColetaEntrega.setDtVigenciaFinal(parameters.getYearMonthDay("tabelaColetaEntrega.dtVigenciaFinal"));
		tabelaColetaEntrega.setTipoMeioTransporte(tipoMeioTransporte);
		
		Long idSolicitacaoContratacao = parameters.getLong("idSolicitacaoContratacao");
		Integer numParcelasAtivas;
		if (idSolicitacaoContratacao == null) {
			// DEVE CARREGAR TODAS AS PARCELAS AO ENTRAR PELA PRIMEIRA VEZ NA TELA
			numParcelasAtivas = 4;
		} else {
			// CARREGA SOMENTE AS PARCELAS ATIVAS NA TELA
			numParcelasAtivas = parcelaTabelaCeService.findParcelasTabelaColetaEntrega(idSolicitacaoContratacao).size();
		}
		
		boolean blVlSugerido = false; 
		
		if (parameters.getList("ParcelaTabelaCe") != null) {
			for (int x = 0; x < parameters.getList("ParcelaTabelaCe").size(); x++) {
				if (parameters.getBigDecimal((new StringBuffer("ParcelaTabelaCe:")).append(x).append(".vlSugerido").toString()) != null) {
					DomainValue tpParcela = parameters.getDomainValue((new StringBuffer("ParcelaTabelaCe:")).append(x).append(".tpParcela.value").toString());
					ParcelaTabelaCe parcelaTabelaCe = new ParcelaTabelaCe();
					Long id = parameters.getLong((new StringBuffer("ParcelaTabelaCe:")).append(x).append(".id").toString());
					parcelaTabelaCe.setIdParcelaTabelaCe(id);
					parcelaTabelaCe.setTpParcela(tpParcela);

					if (id == null) {
						ParcelaTabelaCe parcelas = getSolicitacaoContratacaoService()
								.findParcelaTabelaCeByTpParcela(
										tpParcela.getValue(),
										tabelaColetaEntrega.getTipoMeioTransporte().getIdTipoMeioTransporte(),
										tabelaColetaEntrega.getDtVigenciaInicial(),
										filial.getIdFilial());
						if (parcelas != null){
							parcelaTabelaCe.setVlReferencia(parcelas.getVlDefinido());
						}
					} else {
						parcelaTabelaCe.setVlReferencia(parameters
								.getBigDecimal((new StringBuffer(
										"ParcelaTabelaCe:")).append(x)
										.append(".vlFreteReferencia")
										.toString()));
					}

					parcelaTabelaCe.setVlSugerido(parameters
							.getBigDecimal((new StringBuffer(
									"ParcelaTabelaCe:")).append(x)
									.append(".vlSugerido").toString()));

					parcelaTabelaCe.setVlMaximoAprovado(parameters
							.getBigDecimal((new StringBuffer(
									"ParcelaTabelaCe:")).append(x)
									.append(".vlMaximoAprovado")
									.toString()));
					
					parcelaTabelaCe.setVlNegociado(parameters
									.getBigDecimal((new StringBuffer(
											"ParcelaTabelaCe:"))
											.append(x).append(
													".vlNegociado")
											.toString()));
					parcelaTabelaCe.setPcSobreValor((parameters
							.getBigDecimal((new StringBuffer(
									"ParcelaTabelaCe:")).append(x)
									.append(".pcSobreValor")
									.toString())));

					parcelaTabelaCe.setTabelaColetaEntrega(tabelaColetaEntrega);
					list.add(parcelaTabelaCe);
					
					if(BigDecimalUtils.hasValue(parcelaTabelaCe.getVlSugerido())){
						blVlSugerido = true;
				}
					
			}
			}
		} else
			list.add(tabelaColetaEntrega);

		if(!blVlSugerido){
			throw new BusinessException("LMS-04420");
		}

		return list;
	}
	
	public TypedFlatMap validateTipoMeioTransporte(Long idTipoMeioTransporte) {
		TypedFlatMap result = new TypedFlatMap();
		if (idTipoMeioTransporte != null) {
			TipoMeioTransporte tpMeioTransporte = tipoMeioTransporteService.findById(idTipoMeioTransporte);
			if (tpMeioTransporte.getTipoMeioTransporte() != null) {
				result.put("idComposto",tpMeioTransporte.getTipoMeioTransporte().getIdTipoMeioTransporte());
				result.put("dsComposto",tpMeioTransporte.getTipoMeioTransporte().getDsTipoMeioTransporte());
			}
		}
		return result;
	}

	public List<Map<String, Object>> findMeioTransporte(String nrIdentificador) {
		MeioTransporte meioTransporte = meioTransporteService.findMeioTransporteByIdentificacao(nrIdentificador);
		return ajusteRetorno(meioTransporte);
	}

	@SuppressWarnings("unchecked")
	private List<Map<String, Object>> ajusteRetorno(MeioTransporte meioTransporte) {
		TypedFlatMap map = new TypedFlatMap();
		List<Map<String, Object>> result = new ArrayList<Map<String,Object>>(1);
		if(meioTransporte != null) {
			
			
			if(meioTransporte.getMeioTranspProprietarios() != null){
				MeioTranspProprietario meioTranspProprietario =  meioTransporteService.findProprietario(meioTransporte.getIdMeioTransporte());
				map.put("proprietario.identificacao",meioTranspProprietario.getProprietario().getPessoa().getNrIdentificacao());
				map.put("proprietario.nmProprietario",meioTranspProprietario.getProprietario().getPessoa().getNmPessoa());
			}
			
			
			
			map.put("nrFrota",meioTransporte.getNrFrota());
			map.put("nrPlaca",meioTransporte.getNrIdentificador());
			map.put("anoFabricacao",meioTransporte.getNrAnoFabricao());
			map.put("modeloMeioTransporte.tipoMeioTransporte.idTipoMeioTransporte",meioTransporte.getModeloMeioTransporte().getTipoMeioTransporte().getIdTipoMeioTransporte());
			map.put("tpVinculo",meioTransporte.getTpVinculo().getValue());
			result.add(map);
		}
		return result;
	}
	
	public List<Map<String, Object>> findMeioTransporteAprovado(String nrIdentificador) {
		MeioTransporte meioTransporte = meioTransporteService.findMeioTransporteByIdentificacaoAprovado(nrIdentificador);
		return ajusteRetorno(meioTransporte);
	}
	

	public TypedFlatMap findVlSugeridoToRota(TypedFlatMap criteria) {
		return getSolicitacaoContratacaoService().findVlSugeridoToRota(criteria);
	}

	public TypedFlatMap findVlSugeridoToRotaExpressa(TypedFlatMap criteria) {
		return getSolicitacaoContratacaoService().findVlSugeridoToRotaExpressa(criteria);
	}

	public TypedFlatMap findDataSession() {
		Usuario usuario = SessionUtils.getUsuarioLogado();
		Filial filial = SessionUtils.getFilialSessao();
		TypedFlatMap result = new TypedFlatMap();
		result.put("usuario.idUsuario",usuario.getIdUsuario());
		result.put("usuario.nmUsuario",usuario.getNmUsuario());
		result.put("usuario.nrMatricula",usuario.getNrMatricula());
		result.put("filial.idFilial",filial.getIdFilial());
		result.put("filial.sgFilial",filial.getSgFilial());
		result.put("filial.dtImplantacaoLMS",filial.getDtImplantacaoLMS());
		result.put("filial.pessoa.nmFantasia",filial.getPessoa().getNmFantasia());
		result.put("dtAtual", JTDateTimeUtils.getDataAtual());
		return result;
	}

	public TypedFlatMap validaDataImplantacaoMerger(){
		TypedFlatMap result = new TypedFlatMap();
		String parametro = parametroGeralService.findSimpleConteudoByNomeParametro("INICIO_PROJETO_MERGER");
    	if (parametro != null && parametro.length() > 0){
    		YearMonthDay dataInicio = JTDateTimeUtils.convertDataStringToYearMonthDay(parametro,"dd/MM/yyyy");
    		result.put("mergerImplantado", JTDateTimeUtils.comparaData(dataInicio, JTDateTimeUtils.getDataAtual()) < 0);
    	}
    	
		result.put("calculoPadrao", isCalculoPadrao(SessionUtils.getFilialSessao().getIdFilial()));
    	
		return result;
	}
	
	

	public TypedFlatMap executeCancel(Long idSolicitacaoContratacao) {
		getSolicitacaoContratacaoService().executeCancel(idSolicitacaoContratacao);
		TypedFlatMap result = new TypedFlatMap();
		DomainValue cancelado = domainValueService.findDomainValueByValue("DM_SITUACAO_SOLICITACAO_CONTRATACAO","CA");

		result.put("behavior",validBehavior(cancelado.getValue(),null));
		result.put("tpSituacaoContratacao.value",cancelado.getValue());
		result.put("tpSituacaoContratacao.description",cancelado.getDescription());

		return result;
	}

	@SuppressWarnings("unchecked")
	public List<TypedFlatMap> findComboEixosTipoMeioTransporte(Long idTipoMeioTransporte) {
		List<Integer> eixos = eixosTipoMeioTransporteService.findSumEixosByTpMeioTransp(idTipoMeioTransporte);
		List<TypedFlatMap> newList = new ArrayList<TypedFlatMap>(eixos.size());
		for(Integer qtEixo : eixos) {
			TypedFlatMap row = new TypedFlatMap();
			row.put("qtEixos", qtEixo);
			newList.add(row);
		}
		return newList;
	}

	@SuppressWarnings("unchecked")
	private List<TypedFlatMap> findFluxosContratacao(TypedFlatMap criteria, BigDecimal valor) {
		List<TypedFlatMap> result = criteria.getList("FluxoContratacao");
		//Se os fluxos já existem, apenas recalcula os percentuais
		if(result != null) {
			for (TypedFlatMap fluxo : result) {
				fluxo.put("idFluxoContratacao", fluxo.remove("id"));
				fluxo.put("dsFluxoFilial", fluxo.getString("dsFluxoFilialEdit"));
				fluxo.put("nrChaveLiberacao", fluxo.getString("nrChaveLiberacaoEdit"));
				BigDecimal pcValorFrete = fluxo.getBigDecimal("pcValorFrete");
				if (pcValorFrete != null) {
					fluxo.put("valorFrete", BigDecimalUtils.round(pcValorFrete.multiply(valor).divide(new BigDecimal(100))));
				}
			}
			return result;
		}

		List<FluxoContratacao> listaFluxo = getSolicitacaoContratacaoService().findGridFluxoContratacao(criteria);
		if (listaFluxo != null && !listaFluxo.isEmpty()) {
			result = new ArrayList<TypedFlatMap>();
			for (FluxoContratacao fluxoContratacao : listaFluxo) {
				TypedFlatMap row = new TypedFlatMap();
				BigDecimal pcValorFrete = fluxoContratacao.getPcValorFrete();
				if (pcValorFrete == null) {
					pcValorFrete = BigDecimal.ZERO;
				}
				row.put("idFluxoContratacao", fluxoContratacao.getIdFluxoContratacao());
				row.put("filialOrigem.idFilial", fluxoContratacao.getFilialOrigem().getIdFilial());
				row.put("filialDestino.idFilial", fluxoContratacao.getFilialDestino().getIdFilial());
				row.put("dsFluxoFilial", fluxoContratacao.getFilialOrigem().getSgFilial() + "-" + fluxoContratacao.getFilialDestino().getSgFilial());
				row.put("dsFluxoFilialEdit", fluxoContratacao.getFilialOrigem().getSgFilial() + "-" + fluxoContratacao.getFilialDestino().getSgFilial());
				String nrChave = (fluxoContratacao.getNrChaveLiberacao() == null || "0".equals(fluxoContratacao.getNrChaveLiberacao())) 
						? ""
						: StringUtils.leftPad(fluxoContratacao.getNrChaveLiberacao().toString(), 31, '0');
				row.put("nrChaveLiberacao", nrChave);
				row.put("nrChaveLiberacaoEdit", nrChave);
				row.put("pcValorFrete", pcValorFrete);
				row.put("valorFrete", BigDecimalUtils.round(pcValorFrete.multiply(valor).divide(new BigDecimal(100))));
				row.put("tpAbrangencia", fluxoContratacao.getTpAbrangencia().getValue());
				row.put("tpAbrangenciaDescription", fluxoContratacao.getTpAbrangencia().getDescription().getValue());
				result.add(row);
			}
			return result;
		}
		return null;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	public Map validateUserPerfilModalAereo(){
		Map<String, Boolean> mapRet = new TypedFlatMap();
		Long idPerfilAereo = Long.parseLong(parametroGeralService.findSimpleConteudoByNomeParametro("ID_PERFIL_PERMITE_SOLICITACAO_AEREO"));
		
		mapRet.put("permiteModalAereo", usuarioService.findUsuarioHasPerfil(SessionUtils.getUsuarioLogado().getIdUsuario(), idPerfilAereo));
		return mapRet;
	}

	public TypedFlatMap findAnexoSolicContratacaoById(TypedFlatMap criteria) {
		AnexoSolicContratacao solicitacaoContratacaoAnexo = getSolicitacaoContratacaoService().findAnexoSolicContratacaoById(criteria.getLong("idAnexoSolicContratacao"));
		
		TypedFlatMap map = new TypedFlatMap();
		map.put("idAnexoSolicContratacao", solicitacaoContratacaoAnexo.getIdAnexoSolicContratacao());
		map.put("dsAnexo", solicitacaoContratacaoAnexo.getDsAnexo());
		map.put("dcArquivo", Base64Util.encode(solicitacaoContratacaoAnexo.getDcArquivo()));
		map.put("idSolicitacaoContratacao", solicitacaoContratacaoAnexo.getSolicitacaoContratacao().getIdSolicitacaoContratacao());
		return map;
	}
	
    @SuppressWarnings({ "rawtypes", "unchecked" })
	public ResultSetPage findPaginatedAnexoSolicContratacao(TypedFlatMap criteria) {
    	Long idSolicitacaoContratacao = criteria.getLong("idSolicitacaoContratacao");
    	
    	/*
		 * Verificação necessária porque a ação padrão do remover recarrega
		 * todas as abas por padrão.
		 */
    	if(idSolicitacaoContratacao == null){
    		return null;
    	}
    	
    	criteria.put("idSolicitacaoContratacao", idSolicitacaoContratacao);
    	return getSolicitacaoContratacaoService().findPaginatedAnexoSolicContratacao(new PaginatedQuery(criteria));
    }

    public Integer getRowCountAnexoSolicContratacao(TypedFlatMap criteria){
    	return getSolicitacaoContratacaoService().getRowCountAnexoSolicContratacao(criteria);
    }
	
    public Serializable storeAnexoSolicContratacao(TypedFlatMap map){
    	return getSolicitacaoContratacaoService().storeAnexoSolicContratacao(map);
    }
    
    @SuppressWarnings("rawtypes")
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIdsAnexoSolicContratacao(List ids){
    	getSolicitacaoContratacaoService().removeByIdsAnexoSolicContratacao(ids);
    }
	
	private SolicitacaoContratacaoService getSolicitacaoContratacaoService() {
		return (SolicitacaoContratacaoService) this.defaultService;
	}
	public void setSolicitacaoContratacaoService(SolicitacaoContratacaoService serviceService) {
		this.defaultService = serviceService;
	}
	public void setTipoMeioTransporteService(TipoMeioTransporteService tipoMeioTransporteService) {
		this.tipoMeioTransporteService = tipoMeioTransporteService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}
	public void setMeioTransporteService(MeioTransporteService meioTransporteService) {
		this.meioTransporteService = meioTransporteService;
	}
	public void setEnderecoPessoaService(EnderecoPessoaService enderecoPessoaService) {
		this.enderecoPessoaService = enderecoPessoaService;
	}
	public void setRotaService(RotaService rotaService) {
		this.rotaService = rotaService; 
	}
	public void setParcelaTabelaCeService(ParcelaTabelaCeService parcelaTabelaCeService) {
		this.parcelaTabelaCeService = parcelaTabelaCeService;
	}
	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}
	public void setRotaIdaVoltaService(RotaIdaVoltaService rotaIdaVoltaService) {
		this.rotaIdaVoltaService = rotaIdaVoltaService;
	}
	public void setAcaoService(AcaoService acaoService) {
		this.acaoService = acaoService;
	}
	public void setUsuarioService(UsuarioService usuarioService) {
		this.usuarioService = usuarioService;
	}
	public void setFilialRotaService(FilialRotaService filialRotaService) {
		this.filialRotaService = filialRotaService;
	}
	public void setEixosTipoMeioTransporteService(EixosTipoMeioTransporteService eixosTipoMeioTransporteService) {
		this.eixosTipoMeioTransporteService = eixosTipoMeioTransporteService;
	}

	public void setControleCargaService(ControleCargaService controleCargaService) {
		this.controleCargaService = controleCargaService;
	}

	public void setFilialRotaCcService(FilialRotaCcService filialRotaCcService) {
		this.filialRotaCcService = filialRotaCcService;
	}

	/**
	 * @param parametroGeralService the parametroGeralService to set
	 */
	public void setParametroGeralService(ParametroGeralService parametroGeralService) {
		this.parametroGeralService = parametroGeralService;
	}

	public void setConteudoParametroFilialService(
			ConteudoParametroFilialService conteudoParametroFilialService) {
		this.conteudoParametroFilialService = conteudoParametroFilialService;
	}
	

}
