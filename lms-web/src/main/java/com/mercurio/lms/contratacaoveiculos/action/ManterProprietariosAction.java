package com.mercurio.lms.contratacaoveiculos.action;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.contratacaoveiculos.model.Proprietario;
import com.mercurio.lms.contratacaoveiculos.model.service.ProprietarioService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.session.SessionUtils;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contratacaoveiculos.manterProprietariosAction"
 */
 
public class ManterProprietariosAction extends CrudAction {
	private FilialService filialService;
	
	public void setProprietario(ProprietarioService proprietarioService) {
		this.defaultService = proprietarioService;
	}

	public Map findByIdDetalhamento(Long id) {
		return getProprietarioService().findByIdDetalhamento(id);
	}
	
	public ResultSetPage findPaginatedCustom(TypedFlatMap criteria) {
		return getProprietarioService().findPaginatedCustom(criteria);
	}
	
	public Integer getRowCountCustom(TypedFlatMap criteria) {
		return getProprietarioService().getRowCountCustom(criteria);
	}
	
	/**
	 * @param bean entidade a ser armazenada.
	 * @return entidade que foi armazenada.
	 */
    public Map store(Proprietario bean) {
		return getProprietarioService().store(bean);
	}
	
	/**
	 * @param id indica a entidade que deverá ser removida.
	 */
    public void removeById(Serializable id) {
		getProprietarioService().removeById((Long)id);
	}
	
	/**
     * @param ids Lista de ids das Rota
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	getProprietarioService().removeByIds(ids);
    }
	
	private ProprietarioService getProprietarioService() {
		return (ProprietarioService)defaultService;
	}
	
	public List findLookupFilial(Map criteria) {
		return filialService.findLookup(criteria);
	}
	
	public List validateIdentificacao(TypedFlatMap map) {
		return getProprietarioService().validateIdentificacao(map);
	}
	
	public List findDiasUteisPagamentoSemanal() {
		return getProprietarioService().findDiasUteisPagamentoSemanal();
	}
	
	public Map validateBloqueiosVigentes(Long idProprietario) {
		return getProprietarioService().validateBloqueiosVigentes(idProprietario);
	}
	
	public void removeProprietarioById(Long id) { 
		getProprietarioService().removeProprietarioById(id);
	}
	
	public TypedFlatMap findFilialUsuarioLogado() { 
		Filial bean = SessionUtils.getFilialSessao();
		TypedFlatMap result = new TypedFlatMap(); 
		
		result.put("idFilial",bean.getIdFilial());
		result.put("sgFilial",bean.getSgFilial());
		result.put("pessoa.nmFantasia",bean.getPessoa().getNmFantasia());

		return result;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	}
