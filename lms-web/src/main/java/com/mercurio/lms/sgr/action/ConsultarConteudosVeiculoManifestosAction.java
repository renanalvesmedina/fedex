package com.mercurio.lms.sgr.action;

import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.ControleCarga;
import com.mercurio.lms.carregamento.model.Manifesto;
import com.mercurio.lms.carregamento.model.service.ControleCargaService;
import com.mercurio.lms.carregamento.model.service.ManifestoService;
import com.mercurio.lms.coleta.model.service.PedidoColetaService;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.Moeda;
import com.mercurio.lms.configuracoes.model.service.ConversaoMoedaService;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteRodoviarioService;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.model.service.CtoInternacionalService;
import com.mercurio.lms.expedicao.model.service.DoctoServicoService;
import com.mercurio.lms.expedicao.model.service.NotaFiscalServicoService;
import com.mercurio.lms.expedicao.util.ConstantesExpedicao;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.Pais;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.pendencia.model.service.MdaService;
import com.mercurio.lms.sgr.model.SolicMonitPreventivo;
import com.mercurio.lms.sgr.model.service.SolicMonitPreventivoService;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.sgr.consultarConteudosVeiculoManifestosAction"
 */

public class ConsultarConteudosVeiculoManifestosAction extends CrudAction {

	private FilialService filialService;
	private ConversaoMoedaService conversaoMoedaService;
	private MeioTransporteRodoviarioService meioTransporteRodoviarioService;
	private SolicMonitPreventivoService solicMonitPreventivoService;
	private ControleCargaService controleCargaService;
	private PedidoColetaService pedidoColetaService;
	private ConfiguracoesFacade configuracoesFacade;
	private ConhecimentoService conhecimentoService;
	private NotaFiscalServicoService notaFiscalServicoService;
	private CtoInternacionalService ctoInternacionalService;
	private DoctoServicoService doctoServicoService;
	private DomainValueService domainValueService;
	private ManifestoService manifestoService;
	private MdaService mdaService;
	
	
    /***************************************************************************************
     * Main Page Methods
     ***************************************************************************************/	
	/**
	 * Método que irá popular o componente de smp, quando a tela de veiculos
	 * for chamada via popup
	 */
	public TypedFlatMap findSolicMonitPreventivo(TypedFlatMap tfm) {
		Long idSmp = tfm.getLong("idSolicMonitPreventivo");
		TypedFlatMap retorno = new TypedFlatMap();
		SolicMonitPreventivo smp = this.solicMonitPreventivoService.findById(idSmp);
		retorno.put("idSolicMonitPreventivo", smp.getIdSolicMonitPreventivo());
		retorno.put("nrSmp", smp.getNrSmp());
		retorno.put("filial.idFilial", smp.getFilial().getIdFilial());
		retorno.put("filial.sgFilial", smp.getFilial().getSgFilial());
		retorno.put("dhGeracao", smp.getDhGeracao());
		retorno.put("vlSmp", smp.getVlSmp());

		if (smp.getMoedaPais() != null) {
			retorno.put("moedaPais.moeda.siglaSimbolo", smp.getMoedaPais().getMoeda().getSiglaSimbolo());
		}

		ControleCarga controleCarga = controleCargaService.findById(smp.getControleCarga().getIdControleCarga());
		
		retorno.put("controleCarga.idControleCarga", controleCarga.getIdControleCarga());
		retorno.put("controleCarga.filialByIdFilialOrigem.idFilial", controleCarga.getFilialByIdFilialOrigem().getIdFilial());
		retorno.put("controleCarga.filialByIdFilialOrigem.sgFilial", controleCarga.getFilialByIdFilialOrigem().getSgFilial());
		retorno.put("controleCarga.nrControleCarga", controleCarga.getNrControleCarga());
		retorno.put("vlTotalFrota", controleCarga.getVlTotalFrota());
		
		if (controleCarga.getMeioTransporteByIdTransportado()!=null) {
			retorno.put("meioTransporte.nrFrota", controleCarga.getMeioTransporteByIdTransportado().getNrFrota());
			retorno.put("meioTransporte.nrIdentificador", controleCarga.getMeioTransporteByIdTransportado().getNrIdentificador());
			retorno.put("meioTransporte.idMeioTransporte", controleCarga.getMeioTransporteByIdTransportado().getIdMeioTransporte());
		}
		
		return retorno;
	}
	
	public ResultSetPage findPages(TypedFlatMap tfm) {
    	
    	String coletaName = configuracoesFacade.getMensagem("coleta");
    	Moeda moedaUsuario = SessionUtils.getMoedaSessao();

		List list = new ArrayList();
		ResultSetPage rsp = solicMonitPreventivoService.findConsultaConteudoVeiculos(tfm);
		List resultSetList = rsp.getList();
		
		for (int i=0; i<resultSetList.size(); i++) {

			TypedFlatMap dataSet = new TypedFlatMap(); 
			Object[] result = (Object[])resultSetList.get(i);
			
			Long nrManifesto         = (Long)result[0];
			Long idManifesto         = (Long)result[1];
			String sgFilialManifesto = (String)result[2];
			String tpColetaViagem    = (String)result[3];
			Long idControleCarga     = (Long)result[4];
			String tpStatus          = (String)result[5];
			String tpManifesto       = (String)result[6];
			String tpManifestoViagem = (String)result[8];
			String tpManifestoEntrega= (String)result[9];
			String sgMoeda           = (String)result[10];
			String dsSimbolo         = (String)result[11];
			BigDecimal vlTotalManifesto  = (BigDecimal)result[12];
			Long nrControleCarga	 = (Long)result[13];
			String sgFilialCc  		 = (String)result[14];
			
			DomainValue tpManifestoValue   = tpManifesto!=null ? this.domainValueService.findDomainValueByValue("DM_TIPO_MANIFESTO", tpManifesto) : new DomainValue();
			
			dataSet.put("rowId", Long.valueOf(i));
			dataSet.put("tpColetaViagem", tpColetaViagem);
			dataSet.put("idManifesto",      idManifesto);
			dataSet.put("idControleCarga",  idControleCarga);
			dataSet.put("sgFilialManifesto", sgFilialManifesto);
			dataSet.put("nrManifesto", nrManifesto);
			dataSet.put("nrControleCarga", nrControleCarga);
			dataSet.put("sgFilialCc", sgFilialCc);
			
			// se manifesto (coleta)
			if ("C" .equals(tpColetaViagem)) {
				
				DomainValue tpStatusManifestoColetaValue = tpStatus!=null ? this.domainValueService.findDomainValueByValue("DM_STATUS_MANIFESTO_COLETA", tpStatus) : null;
				dataSet.put("tpStatus", tpStatusManifestoColetaValue);
				dataSet.put("tpOperacao", coletaName);
				dataSet.put("tpManifesto", coletaName);
				dataSet.put("sgMoeda", moedaUsuario.getSgMoeda());
				dataSet.put("dsSimbolo", moedaUsuario.getDsSimbolo());
				dataSet.put("vlTotalManifesto", getValorPedidoColetaConvertido(idManifesto));
				
			// senão manifesto (viagem ou entrega)
			} else {

				DomainValue tpStatusManifestoValue = tpStatus!=null ? this.domainValueService.findDomainValueByValue("DM_STATUS_MANIFESTO", tpStatus) : null;
				dataSet.put("tpStatus", tpStatusManifestoValue);
				dataSet.put("tpOperacao", tpManifestoValue.getDescription());
				dataSet.put("vlTotalManifesto", vlTotalManifesto);
				dataSet.put("sgMoeda", sgMoeda);
				dataSet.put("dsSimbolo",dsSimbolo);

				if (tpManifesto!=null) {
					
					if (("V").equals(tpManifesto)) {
						DomainValue tpManifestoViagemValue = tpManifestoViagem!=null ? this.domainValueService.findDomainValueByValue("DM_TIPO_MANIFESTO_VIAGEM", tpManifestoViagem) : new DomainValue();
						dataSet.put("tpManifesto", tpManifestoViagemValue.getDescription());

					} else if (("E").equals(tpManifesto)){
						DomainValue tpManifestoEntregaValue = tpManifestoEntrega!=null ? this.domainValueService.findDomainValueByValue("DM_TIPO_MANIFESTO_ENTREGA", tpManifestoEntrega) : new DomainValue();
						dataSet.put("tpManifesto", tpManifestoEntregaValue.getDescription());
					}
				}
			}
			list.add(dataSet);
		}
		rsp.setList(list);
		return rsp;
	}
	
	public Integer getRows(TypedFlatMap tfm) {
    	
		Long idSolicMonitPreventivo = tfm.getLong("smp.idSolicMonitPreventivo");
    	Long idMeioTransporte = tfm.getLong("meioTransporteRodoviario.idMeioTransporte");
    	Long idControleCarga = tfm.getLong("controleCarga.idControleCarga");
    	
    	if (idSolicMonitPreventivo==null && idMeioTransporte==null && idControleCarga==null) {
    		return Integer.valueOf(0);
    	}
    	
    	return solicMonitPreventivoService.getRowCountConsultaConteudoVeiculos(tfm);
	}
	
    /***************************************************************************************
     *  Documentos Popup Methods 
     ***************************************************************************************/
	/**
	 * Obtém dados do manifesto.
	 * @param tfm
	 * @return
	 */
	public TypedFlatMap findManifestoById(TypedFlatMap tfm) {
		
		Manifesto manifesto = this.manifestoService.findById(tfm.getLong("idManifesto"));
		DomainValue tpManifesto = manifesto.getTpManifesto();
		DomainValue tpAbrangencia = manifesto.getTpAbrangencia();
		String strTipoManifesto = new String();
		String nrManifesto = null;
		
		if ("E".equals(tpManifesto.getValue())) {
			strTipoManifesto = tpManifesto.getDescription().getValue();
			
		} else if (tpAbrangencia!=null) {
			strTipoManifesto = tpManifesto.getDescription().getValue() + " " + tpAbrangencia.getDescription().getValue();
		}
		
		if (manifesto.getManifestoEntrega()!=null) {
			nrManifesto = new DecimalFormat("00000000").format(manifesto.getManifestoEntrega().getNrManifestoEntrega());
			
		} else if (manifesto.getManifestoInternacional()!=null) {
			nrManifesto = new DecimalFormat("00000000").format(manifesto.getManifestoInternacional().getNrManifestoInt());
			
		} else if (manifesto.getManifestoViagemNacional()!=null) {
			nrManifesto = new DecimalFormat("00000000").format(manifesto.getManifestoViagemNacional().getNrManifestoOrigem());
		}
		
		TypedFlatMap result = new TypedFlatMap();
		result.put("manifesto.idManifesto", manifesto.getIdManifesto());
		result.put("manifesto.sgFilial", manifesto.getFilialByIdFilialOrigem().getSgFilial());
		result.put("manifesto.nrManifesto", nrManifesto);
		result.put("manifesto.tpManifesto", strTipoManifesto);

		return result;
	}
	
	public ResultSetPage findDocumentos(TypedFlatMap tfm) {
		return doctoServicoService.findPaginatedDocumentosManifesto(tfm);
	}
	
	public Integer getRowCountDocumentos(TypedFlatMap tfm) {
		return doctoServicoService.getRowCountDocumentosManifesto(tfm);
	}


    /***************************************************************************************
     *  Utility Methods 
     ***************************************************************************************/
	/**
	 * Obtém o valor convertido da soma dos valores dos pedidos de coleta
	 * relativos ao manifesto de coleta em questão.<br>
	 * Converte para a moeda do usuário.
	 * @param idManifestoColeta
	 * @return
	 */
	private BigDecimal getValorPedidoColetaConvertido(Long idManifestoColeta) {

		BigDecimal resultado = new BigDecimal(0);
		Moeda moedaUsuario = SessionUtils.getMoedaSessao();
		Pais paisUsuario   = SessionUtils.getPaisSessao();
		
		Iterator it = pedidoColetaService.findValorVerificadoPedidoColetaByIdManifestoColeta(idManifestoColeta).iterator();

		while(it.hasNext()) {
			
			Map map = (Map)it.next();
			Long idMoedaPedido = (Long)map.get("idMoeda");
			BigDecimal valorPedido = (BigDecimal)map.get("vlTotalVerificado");
			
			// nao necessita conversão
			if (idMoedaPedido.equals(moedaUsuario.getIdMoeda())) {
				resultado = resultado.add(valorPedido);
				
			// necessita conversao	
			} else {
				
				BigDecimal convertido = conversaoMoedaService
										.findConversaoMoeda(paisUsuario.getIdPais(), 
															idMoedaPedido, 
															paisUsuario.getIdPais(),
															moedaUsuario.getIdMoeda(),
															JTDateTimeUtils.getDataAtual(), 
															valorPedido);
				
				resultado = resultado.add(convertido);
			}
		}
		
		return resultado;
	}


    /***************************************************************************************
     * Lookup Finders
     ***************************************************************************************/
	public List findLookupSmp(Map fromMap) {
		List list = new ArrayList();
		fromMap.put("nrSmp", ((Map)fromMap.remove("solicMonitPreventivo")).get("nrSmp"));

		for (Iterator it = solicMonitPreventivoService.findLookup(fromMap).iterator(); it.hasNext(); ) {
			SolicMonitPreventivo solicMonitPreventivo = (SolicMonitPreventivo)it.next();
			TypedFlatMap map = new TypedFlatMap();
			map.put("dhGeracao", solicMonitPreventivo.getDhGeracao());
			map.put("idSolicMonitPreventivo", solicMonitPreventivo.getIdSolicMonitPreventivo());
			map.put("solicMonitPreventivo.nrSmp", solicMonitPreventivo.getNrSmp());			
			map.put("vlSmp", solicMonitPreventivo.getVlSmp());
			if (solicMonitPreventivo.getMoedaPais() != null) {
				map.put("moedaPais.moeda.siglaSimbolo", solicMonitPreventivo.getMoedaPais().getMoeda().getSiglaSimbolo());
			}
			
			ControleCarga controleCarga = controleCargaService.findById(solicMonitPreventivo.getControleCarga().getIdControleCarga());
			
			if ("CA".equals(controleCarga.getTpStatusControleCarga().getValue()) || "FE".equals(controleCarga.getTpStatusControleCarga().getValue())) {
				throw new BusinessException("LMS-11011");
			}
			
			map.put("controleCarga.idControleCarga", controleCarga.getIdControleCarga());
			map.put("controleCarga.nrControleCarga", controleCarga.getNrControleCarga());
			map.put("controleCarga.idFilial", controleCarga.getFilialByIdFilialOrigem().getIdFilial());
			map.put("controleCarga.sgFilial", controleCarga.getFilialByIdFilialOrigem().getSgFilial());			
			list.add(map);
		}
		return list;
	}
	
	public List findLookupFilial(TypedFlatMap tfm) {
		return filialService.findLookupFilial(tfm);
	}
	
	public List findLookupControleCarga(TypedFlatMap tfm) {		
		List list = controleCargaService.findLookup(tfm);
		if (list.size()==1) {
			ControleCarga controleCarga = (ControleCarga)list.get(0);
			if ("CA".equals(controleCarga.getTpStatusControleCarga().getValue()) || "FE".equals(controleCarga.getTpStatusControleCarga().getValue())) {
				throw new BusinessException("LMS-11012");
			}
		}
		List<TypedFlatMap>result = new ArrayList<TypedFlatMap>();
		for (Iterator it = list.iterator(); it.hasNext(); ) {
			ControleCarga controleCarga = (ControleCarga)it.next();
			TypedFlatMap item = new TypedFlatMap();
			item.put("vlTotalFrota", controleCargaService.
					generateCalculaValorTotalMercadoriaControleCarga(controleCarga.getIdControleCarga(), null, null, null, Boolean.TRUE));
			item.put("idControleCarga", controleCarga.getIdControleCarga());
			item.put("nrControleCarga", controleCarga.getNrControleCarga());
			item.put("filialByIdFilialOrigem.idFilial", controleCarga.getFilialByIdFilialOrigem().getIdFilial());
			item.put("filialByIdFilialOrigem.sgFilial", controleCarga.getFilialByIdFilialOrigem().getSgFilial());
			item.put("filialByIdFilialOrigem.pessoa.nmFantasia", controleCarga.getFilialByIdFilialOrigem().getPessoa().getNmFantasia());
			
			if (controleCarga.getMeioTransporteByIdTransportado()!=null) {
				item.put("meioTransporteByIdTransportado.nrFrota", controleCarga.getMeioTransporteByIdTransportado().getNrFrota());
				item.put("meioTransporteByIdTransportado.nrIdentificador", controleCarga.getMeioTransporteByIdTransportado().getNrIdentificador());
				item.put("meioTransporteByIdTransportado.idMeioTransporte", controleCarga.getMeioTransporteByIdTransportado().getIdMeioTransporte());
			}
			result.add(item);
		}
		
		return result;
	}
	
	public List findLookupMeioTransporteRodoviario(Map map) {
		return meioTransporteRodoviarioService.findLookup(map);
	}
	
    /***************************************************************************************
     * Documento Servico Methods
     ***************************************************************************************/
    public List findLookupConhecimento(Map criteria) {
    	List list = this.conhecimentoService.findLookup(criteria);
    	return list;
    }
    public List findLookupServiceDocumentNumberCTR(Map criteria) {
    	List list = this.conhecimentoService.findLookup(criteria);
    	return list;
    }
    public List findLookupServiceDocumentNumberCRT(Map criteria) {
    	List list = this.ctoInternacionalService.findLookup(criteria);
    	return list;
    }
    public List findLookupServiceDocumentNumberNFS(Map criteria) {
    	List list = this.notaFiscalServicoService.findLookup(criteria);
    	return list;
    }
    public List findLookupServiceDocumentNumberNFT(Map criteria) {
    	criteria.put("tpDoctoServico", ConstantesExpedicao.NOTA_FISCAL_TRANSPORTE);
    	List list = this.conhecimentoService.findLookup(criteria);
    	return list;
    }
    public List findLookupServiceDocumentNumberMDA(Map criteria) {
    	List list = this.mdaService.findLookup(criteria);
    	return list;
    }
    public List findLookupServiceDocumentFilialCTR(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }
    public List findLookupServiceDocumentFilialCRT(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }
    public List findLookupServiceDocumentFilialMDA(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }
    public List findLookupServiceDocumentFilialNFT(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }
    public List findLookupServiceDocumentFilialNFS(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }
    public List findLookupFilialByDocumentoServico(Map criteria) {
    	List list = this.filialService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		Filial filial = (Filial)iter.next();
    		TypedFlatMap typedFlatMap = new TypedFlatMap();
    		typedFlatMap.put("idFilial", filial.getIdFilial());
    		typedFlatMap.put("sgFilial", filial.getSgFilial());
    		retorno.add(typedFlatMap);
    	}
    	return retorno;
    }
    
    public List findTipoDocumentoServico(Map criteria) {
    	List dominiosValidos = new ArrayList();
    	dominiosValidos.add("CTR");
    	dominiosValidos.add("CRT");
    	dominiosValidos.add("MDA");
    	dominiosValidos.add("NFT");
    	dominiosValidos.add("NFS");
    	
    	List retorno = this.domainValueService.findByDomainNameAndValues("DM_TIPO_DOCUMENTO_SERVICO", dominiosValidos);
    	return retorno;
    }

    /***************************************************************************************
     * Getters n' Setters
     ***************************************************************************************/
	public void setSolicMonitPreventivoService(
			SolicMonitPreventivoService solicMonitPreventivoService) {
		this.solicMonitPreventivoService = solicMonitPreventivoService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public void setControleCargaService(ControleCargaService controleCargaService) {
		this.controleCargaService = controleCargaService;
	}

	public void setMeioTransporteRodoviarioService(
			MeioTransporteRodoviarioService meioTransporteRodoviarioService) {
		this.meioTransporteRodoviarioService = meioTransporteRodoviarioService;
	}

	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}

	public void setPedidoColetaService(PedidoColetaService pedidoColetaService) {
		this.pedidoColetaService = pedidoColetaService;
	}

	public void setConversaoMoedaService(ConversaoMoedaService conversaoMoedaService) {
		this.conversaoMoedaService = conversaoMoedaService;
	}

	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
	}

	public void setCtoInternacionalService(
			CtoInternacionalService ctoInternacionalService) {
		this.ctoInternacionalService = ctoInternacionalService;
	}

	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}

	public void setMdaService(MdaService mdaService) {
		this.mdaService = mdaService;
	}

	public void setManifestoService(ManifestoService manifestoService) {
		this.manifestoService = manifestoService;
	}

	public void setDoctoServicoService(DoctoServicoService doctoServicoService) {
		this.doctoServicoService = doctoServicoService;
	}

	public void setNotaFiscalServicoService(
			NotaFiscalServicoService notaFiscalServicoService) {
		this.notaFiscalServicoService = notaFiscalServicoService;
	}
	
	/**
	 * Realiza o findById quando a tela esta sendo chamada da visualizacao do workflow.
	 * 
	 * @param criteria
	 * @return
	 */
	public TypedFlatMap findByIdProcessoWorkflow(TypedFlatMap criteria) {
		
		ControleCarga controleCarga = this.controleCargaService.findById(criteria.getLong("idProcessoWorkflow"));
		
		TypedFlatMap result = new TypedFlatMap(); 

		result.put("controleCarga.idControleCarga", controleCarga.getIdControleCarga());
		result.put("controleCarga.nrControleCarga", controleCarga.getNrControleCarga());
		
		result.put("controleCarga.filialByIdFilialOrigem.idFilial", controleCarga.getFilialByIdFilialOrigem().getIdFilial());
		result.put("controleCarga.filialByIdFilialOrigem.sgFilial", controleCarga.getFilialByIdFilialOrigem().getSgFilial());
		result.put("meioTransporteRodoviario2.idMeioTransporte", controleCarga.getMeioTransporteByIdTransportado().getIdMeioTransporte());
		result.put("meioTransporteRodoviario2.meioTransporte.nrFrota", controleCarga.getMeioTransporteByIdTransportado().getNrFrota());
		result.put("meioTransporteRodoviario.idMeioTransporte", controleCarga.getMeioTransporteByIdTransportado().getIdMeioTransporte());
		result.put("meioTransporteRodoviario.meioTransporte.nrIdentificador", controleCarga.getMeioTransporteByIdTransportado().getNrIdentificador());
		
		return result;
	}

}
