package com.mercurio.lms.sgr.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.MapUtils;

import com.mercurio.adsm.framework.model.FindDefinition;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.hibernate.VarcharI18n;
import com.mercurio.adsm.framework.report.ReportActionSupport;
import com.mercurio.adsm.framework.util.FilterList;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.ControleCarga;
import com.mercurio.lms.carregamento.model.service.ControleCargaService;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.configuracoes.model.service.MoedaService;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.RotaIdaVoltaService;
import com.mercurio.lms.sgr.model.EventoSMP;
import com.mercurio.lms.sgr.model.ExigenciaGerRisco;
import com.mercurio.lms.sgr.model.ExigenciaSmp;
import com.mercurio.lms.sgr.model.SolicMonitPreventivo;
import com.mercurio.lms.sgr.model.TipoExigenciaGerRisco;
import com.mercurio.lms.sgr.model.service.EventoSMPService;
import com.mercurio.lms.sgr.model.service.ExigenciaGerRiscoService;
import com.mercurio.lms.sgr.model.service.ExigenciaSmpService;
import com.mercurio.lms.sgr.model.service.GerarEnviarSMPService;
import com.mercurio.lms.sgr.model.service.SolicMonitPreventivoService;
import com.mercurio.lms.sgr.model.service.TipoExigenciaGerRiscoService;
import com.mercurio.lms.sgr.report.EmitirSMPService;
import com.mercurio.lms.sgr.util.ConstantesGerRisco;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.sgr.manterSMPAction"
 */

public class ManterSMPAction extends ReportActionSupport {
	
	private FilialService filialService;
	private SolicMonitPreventivoService solicMonitPreventivoService;
	private MeioTransporteService meioTransporteService;
	private ControleCargaService controleCargaService;
	private ExigenciaGerRiscoService exigenciaGerRiscoService;
	private TipoExigenciaGerRiscoService tipoExigenciaGerRiscoService;
	private RotaIdaVoltaService rotaIdaVoltaService;
	private ExigenciaSmpService exigenciaSmpService;
	private MoedaService moedaService;
	private GerarEnviarSMPService gerarEnviarSMPService; 
	private EventoSMPService eventoSMPService;
	
	private static final String ORIGEM_MANUAL = "M";
	
	public GerarEnviarSMPService getGerarEnviarSMPService() {
		return gerarEnviarSMPService;
	}

	public void setGerarEnviarSMPService(GerarEnviarSMPService gerarEnviarSMPService) {
		this.gerarEnviarSMPService = gerarEnviarSMPService;
	}
	
	private MoedaService getMoedaService() {
		return moedaService;
	}

	public void setMoedaService(MoedaService moedaService) {
		this.moedaService = moedaService;
	}

	public void setEmitirSMPService(EmitirSMPService emitirSMPService) {
		this.reportServiceSupport = emitirSMPService;
	}

	private ExigenciaSmpService getExigenciaSmpService() {
		return exigenciaSmpService;
	}

	public void setExigenciaSmpService(ExigenciaSmpService exigenciaSmpService) {
		this.exigenciaSmpService = exigenciaSmpService;
	}

	private RotaIdaVoltaService getRotaIdaVoltaService() {
		return rotaIdaVoltaService;
	}

	public void setRotaIdaVoltaService(RotaIdaVoltaService rotaIdaVoltaService) {
		this.rotaIdaVoltaService = rotaIdaVoltaService;
	}

	private TipoExigenciaGerRiscoService getTipoExigenciaGerRiscoService() {
		return tipoExigenciaGerRiscoService;
	}

	public void setTipoExigenciaGerRiscoService(
			TipoExigenciaGerRiscoService tipoExigenciaGerRiscoService) {
		this.tipoExigenciaGerRiscoService = tipoExigenciaGerRiscoService;
	}

	private ExigenciaGerRiscoService getExigenciaGerRiscoService() {
		return exigenciaGerRiscoService;
	}

	public void setExigenciaGerRiscoService(
			ExigenciaGerRiscoService exigenciaGerRiscoService) {
		this.exigenciaGerRiscoService = exigenciaGerRiscoService;
	}

	private ControleCargaService getControleCargaService() {
		return controleCargaService;
	}

	public void setControleCargaService(ControleCargaService controleCargaService) {
		this.controleCargaService = controleCargaService;
	}

	private MeioTransporteService getMeioTransporteService() {
		return meioTransporteService;
	}

	public void setMeioTransporteService(MeioTransporteService meioTransporteService) {
		this.meioTransporteService = meioTransporteService;
	}

	private SolicMonitPreventivoService getSolicMonitPreventivoService() {
		return solicMonitPreventivoService;
	}

	public void setSolicMonitPreventivoService(SolicMonitPreventivoService solicMonitPreventivoService) {
		this.solicMonitPreventivoService = solicMonitPreventivoService;
	}

	private FilialService getFilialService() {
		return filialService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	
	public TypedFlatMap findDadosSessao(){
		Filial fil = SessionUtils.getFilialSessao();
		Usuario usuario = SessionUtils.getUsuarioLogado();
		TypedFlatMap retorno = new TypedFlatMap(); 
		
		retorno.put("idFilial", fil.getIdFilial());
		retorno.put("sgFilial", fil.getSgFilial());
		retorno.put("nmFantasia", fil.getPessoa().getNmFantasia());
		retorno.put("idUsuario", usuario.getIdUsuario());
		retorno.put("nrMatricula", usuario.getNrMatricula());
		retorno.put("nome", usuario.getNmUsuario());
		
		return retorno;
	}
	
	public SolicMonitPreventivo findSMPById(Long idSMP) {
		return this.getSolicMonitPreventivoService().findSMPById(idSMP);
	}
	
	/**
     * Consulta a filial pela sigla informada 
     * @param map
     * @return
     */
    public List findLookupFilial(Map map) {
    	return getFilialService().findLookup(map);
    }    
	
    /**
     * Método de pesquisa para Manter SMP 
     * @param tfm
     * @param fd
     * @return
     * @author Rodrigo Antunes
     */
    @SuppressWarnings("rawtypes")
	public ResultSetPage findPaginatedSMP(TypedFlatMap tfm) {
    	return this.getSolicMonitPreventivoService().findPaginatedSMP(tfm, FindDefinition.createFindDefinition(tfm));
    }
    
    /**
     * row count para Manter SMP 
     * @param tfm
     * @return
     */
    public Integer getRowCountSMP(TypedFlatMap tfm) {
        return this.getSolicMonitPreventivoService().getRowCountSMP(tfm);
    }

    /**
     * lookup de veiculo 
     * @param map
     * @return
     */
    public List findLookupMeioTransporte(Map map) {
    	return getMeioTransporteService().findLookup(map);
    }
    
    /**
     * lookup de controle de carga 
     * @param criteria
     * @return
     */
    public List findControleCarga(Map criteria) {
    	FilterList filter = new FilterList(getControleCargaService().findLookup(criteria)) {
			public Map filterItem(Object item) {
				ControleCarga controleCarga = (ControleCarga)item;
    			TypedFlatMap typedFlatMap = new TypedFlatMap();
	    		typedFlatMap.put("idControleCarga", controleCarga.getIdControleCarga());
		    	typedFlatMap.put("nrControleCarga", controleCarga.getNrControleCarga());
				return typedFlatMap;
			}
    	};
    	return (List)filter.doFilter();
    }
    
    /**
     * Combo de exigencias 
     * @param map
     * @return
     */
    public List findExigenciaGerRisco(Map map) {
    	return getExigenciaGerRiscoService().findOrdenadoPorNivel(map);
    }
    
    /**
     * Combo de tipo de exigencias 
     * @param map
     * @return
     */
    public List findTipoExigenciaGerRisco(Map map) {
    	return getTipoExigenciaGerRiscoService().findOrdenadoPorDescricao(map);
    }
    
    public List findLookupRotaIdaVolta(Map map) {
    	return getRotaIdaVoltaService().findLookup(map);
    }
    
    /**
     * Método de pesquisa para aba de providencias
     * @param map
     * @return
     */
    public ResultSetPage findPaginatedExigenciaSmpByIdSmp(TypedFlatMap  tfm) {
    	Long idSmp = tfm.getLong("solicMonitPreventivo.idSolicMonitPreventivo"); 
    	return this.getExigenciaSmpService().findPaginatedExigenciaSmpByIdSmp(idSmp, FindDefinition.createFindDefinition(tfm));
    }
    
    /**
     * row count para findPaginatedExigenciaSmpByIdSmp
     * @param map
     * @return
     */
    public Integer getRowCountExigenciaSmpByIdSmp(TypedFlatMap tfm) {
    	Long idSmp = tfm.getLong("solicMonitPreventivo.idSolicMonitPreventivo"); 
    	return this.getExigenciaSmpService().getRowCountExigenciaSmpByIdSmp(idSmp);
    }
    
    public void removeExigenciasSmp(TypedFlatMap tfm) {
    	Long idSMP = tfm.getLong("idSMP");
    	List idsExigenciasSmp = tfm.getList("idsExigenciasSMP.ids");

    	List listaIds = new ArrayList();
    	for (Iterator iter = idsExigenciasSmp.iterator(); iter.hasNext();) {
    		listaIds.add( Long.valueOf((String)iter.next()) );
    	}
    	getExigenciaSmpService().removeByIdsToManterSmp(listaIds, idSMP);
    }
    
    /**
     * 
     * @param id
     * @return
     */
    public ExigenciaSmp findExigenciaSmpById(Long id) {
    	return this.getExigenciaSmpService().findById(id);
    }
    
    
    public Map<String, Object> tipoExigenciaGerRiscoOnChange(Map<String, Object> criteria) {
		Long idTipoExigenciaGerRisco = MapUtils.getLong(criteria, "idTipoExigenciaGerRisco");
		TipoExigenciaGerRisco tipoExigenciaGerRisco = tipoExigenciaGerRiscoService.findById(idTipoExigenciaGerRisco);
		Map<String, Object> result = new HashMap<String, Object>();
		result.put("tpExigencia", tipoExigenciaGerRisco.getTpExigencia().getValue());
		result.put("blExigeQuantidade", tipoExigenciaGerRisco.getBlExigeQuantidade() ? true : null);

        List<TypedFlatMap> exigenciasGerRisco = new ArrayList<TypedFlatMap>();
        criteria.put("tipoExigenciaGerRisco.idTipoExigenciaGerRisco", idTipoExigenciaGerRisco);
        List<ExigenciaGerRisco> list = exigenciaGerRiscoService.findOrdenadoPorNivel(criteria);
		for (ExigenciaGerRisco exigenciaGerRisco : list) {
        	TypedFlatMap map = new TypedFlatMap();
        	map.put("idExigenciaGerRisco", exigenciaGerRisco.getIdExigenciaGerRisco());
        	map.put("dsResumida", exigenciaGerRisco.getDsResumida());
        	map.put("dsCompleta", exigenciaGerRisco.getDsCompleta());
        	map.put("blAreaRisco", exigenciaGerRisco.getBlAreaRisco() ? true : null);
        	exigenciasGerRisco.add(map);
        }
        result.put("exigenciasGerRisco", exigenciasGerRisco);
		return result;
	}
    
    
	public Map<String, Object> loadExigenciaSMP(Map<String, Object> criteria) {
		Long idExigenciaSMP = MapUtils.getLong(criteria, "idExigenciaSMP");
		ExigenciaSmp exigenciaSMP = exigenciaSmpService.findById(idExigenciaSMP);
		Map<String, Object> result = new HashMap<String, Object>();
		TipoExigenciaGerRisco tipoExigenciaGerRisco = exigenciaSMP.getExigenciaGerRisco()
				.getTipoExigenciaGerRisco();
		result.put("blExigeQuantidade", tipoExigenciaGerRisco.getBlExigeQuantidade() ? true : null);
		result.put("blAreaRisco", exigenciaSMP.getExigenciaGerRisco().getBlAreaRisco() ? true : null);
		result.put("disabledAll", !exigenciaSMP.getTpManutRegistro().getValue().equals(ORIGEM_MANUAL) ? true : null);
		return result;
	}
	
	/**
	 * Salva a exigencia smp
	 * 
	 * @param bean
	 * @return
	 */
	public Serializable storeExigenciaSmp(ExigenciaSmp bean) {
		return this.getExigenciaSmpService().storeExigenciaSmpToManterSmp(bean);
	}
    
    public Map<String, VarcharI18n> findExigenciaById(Map<String, String> criteria) {
    	String idStr = (String) criteria.get("idExigenciaGerRisco");
    	Long id  = Long.valueOf(idStr);
    	Map<String, VarcharI18n> map = new HashMap<String, VarcharI18n>();
    	map.put("dsCompleta", getExigenciaGerRiscoService().findById(id).getDsCompleta() ) ;
    	return map;
    }
    
    public Map<String, VarcharI18n> findHistoricoById(Map<String, String> criteria) {
    	String idStr = (String) criteria.get("idExigenciaSMP");
    	Long id  = Long.valueOf(idStr);
    	Map<String, VarcharI18n> map = new HashMap<String, VarcharI18n>();
    	map.put("dsHistoricoAlteracao",getExigenciaSmpService().findById(id).getDsHistoricoAlteracao());
    	return map;
    }
    
    public List findComboMoeda(Map criteria) {
    	return this.getMoedaService().find(criteria);
    }
    
    
	public void storeReenviarSmp(TypedFlatMap tfm) {
		@SuppressWarnings("unchecked")
		List<String> idsSMP = tfm.getList("idsSMP.ids");
		for (String idSMP : idsSMP) {
			SolicMonitPreventivo solic = findSMPById(Long.valueOf(idSMP));
			if (solic.getTpStatusSmpGR().getValue().equals(ConstantesGerRisco.TP_STATUS_SMP_GR_ERRO_INSERIR)
					|| solic.getTpStatusSmpGR().getValue()
							.equals(ConstantesGerRisco.TP_STATUS_SMP_GR_ERRO_FINALIZAR)
					|| solic.getTpStatusSmpGR().getValue()
							.equals(ConstantesGerRisco.TP_STATUS_SMP_GR_SMP_ERRO_CANCELAR_SMP)) {
				ControleCarga cc = solic.getControleCarga();
				gerarEnviarSMPService.generateReenviarSmp(cc.getIdControleCarga(),
						solic.getIdSolicMonitPreventivo());
			}
		}
	}

	/**
	 * LMS-7906 - Busca quantidade de {@link EventoSMP}s para tela "Manter SMP",
	 * aba "Eventos".
	 * 
	 * @param criteria
	 * @return
	 */
	public Integer getRowCountEventoSMP(TypedFlatMap criteria) {
        return eventoSMPService.getRowCountEventoSMP(criteria);
	}

	/**
	 * FIXME corrigir número do JIRA
	 * 
	 * LMS-7906 - Busca página de {@link EventoSMP}s para tela "Manter SMP", aba
	 * "Eventos".
	 * 
	 * @param criteria
	 * @return
	 */
	public ResultSetPage<EventoSMP> findPaginatedEventoSMP(TypedFlatMap criteria) {
		return eventoSMPService.findPaginatedEventoSMP(criteria, FindDefinition.createFindDefinition(criteria));
	}

	public void setEventoSMPService(EventoSMPService eventoSMPService) {
		this.eventoSMPService = eventoSMPService;
	}

}
