package com.mercurio.lms.sgr.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.MapUtils;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.contratacaoveiculos.model.PerifericoRastreador;
import com.mercurio.lms.contratacaoveiculos.model.service.PerifericoRastreadorService;
import com.mercurio.lms.sgr.model.ExigenciaGerRisco;
import com.mercurio.lms.sgr.model.PerifericoExigenciaGerRisco;
import com.mercurio.lms.sgr.model.TipoExigenciaGerRisco;
import com.mercurio.lms.sgr.model.service.ExigenciaGerRiscoService;
import com.mercurio.lms.sgr.model.service.TipoExigenciaGerRiscoService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.sgr.manterExigenciasGerenciamentoRiscoAction"
 */

public class ManterExigenciasGerenciamentoRiscoAction extends CrudAction {
	
	private static final String ID_EXIGENCIA_GER_RISCO = "idExigenciaGerRisco";
	private static final String NR_NIVEL = "nrNivel";
	private static final String TP_SITUACAO = "tpSituacao";
	private static final String DS_RESUMIDA = "dsResumida";
	private static final String DS_COMPLETA = "dsCompleta";
	private static final String ID_TIPO_EXIGENCIA_GER_RISCO = "tipoExigenciaGerRisco.idTipoExigenciaGerRisco";
	private static final String TP_CRITERIO_AGRUPAMENTO = "tpCriterioAgrupamento";
	private static final String BL_AREA_RISCO = "blAreaRisco";
	private static final String PERIFERICOS_RASTREADOR = "perifericosRastreador";
	private static final String ID_PERIFERICO_RASTREADOR = "idPerifericoRastreador";
	private static final String DS_PERIFERICO_RASTREADOR = "dsPerifericoRastreador";
	private static final String CD_EXIGENCIA_GER_RISCO = "cdExigenciaGerRisco";

	private ExigenciaGerRiscoService exigenciaGerRiscoService;
	private TipoExigenciaGerRiscoService tipoExigenciaGerRiscoService;
	private PerifericoRastreadorService perifericoRastreadorService;

	public ExigenciaGerRiscoService getExigenciaGerRiscoService() {
		return exigenciaGerRiscoService;
	}

	public void setExigenciaGerRiscoService(
			ExigenciaGerRiscoService exigenciaGerRiscoService) {
		this.exigenciaGerRiscoService = exigenciaGerRiscoService;
	}

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	((ExigenciaGerRiscoService)defaultService).removeByIds(ids);
    }

	/**
	 * Realiza uma pesquisa de Exigências baseada no Tipo de Exigência e retorna
     * para a tela um map com a lista de exigências  
     * utilizado em listbox
	 */
	public Map findExigenciasByTipoExigencia(Map criteria) {
        List result = exigenciaGerRiscoService.findListExigenciasByTipoExigencia(criteria);
        List listRetorno = new ArrayList();
        TypedFlatMap map = null; 
        for (Iterator iter = result.iterator(); iter.hasNext();) {
        	ExigenciaGerRisco exigenciaGerRisco = (ExigenciaGerRisco) iter.next();
        	map = new TypedFlatMap();
        	map.put(ID_EXIGENCIA_GER_RISCO, exigenciaGerRisco.getIdExigenciaGerRisco());
        	map.put(DS_RESUMIDA, exigenciaGerRisco.getDsResumida());
        	map.put(DS_COMPLETA, exigenciaGerRisco.getDsCompleta());
        	map.put(NR_NIVEL, exigenciaGerRisco.getNrNivel());
			listRetorno.add(map);
		}
        Map mapRetorno = new HashMap();
        mapRetorno.put("exigenciasGerRisco", listRetorno);
        return mapRetorno;
	}

	public void setTipoExigenciaGerRiscoService(TipoExigenciaGerRiscoService tipoExigenciaGerRiscoService) {
		this.tipoExigenciaGerRiscoService = tipoExigenciaGerRiscoService;
	}

	public void setPerifericoRastreadorService(PerifericoRastreadorService perifericoRastreadorService) {
		this.perifericoRastreadorService = perifericoRastreadorService;
	}

	public Map<String, Object> tipoExigenciaGerRiscoOnChange(Map<String, Object> criteria) {
		Long idTipoExigenciaGerRisco = MapUtils.getLong(criteria, "idTipoExigenciaGerRisco");
		TipoExigenciaGerRisco tipoExigenciaGerRisco = tipoExigenciaGerRiscoService.findById(idTipoExigenciaGerRisco);
		Map<String, Object> result = new HashMap<String, Object>();
		String tpExigenciaValue = tipoExigenciaGerRisco.getTpExigencia().getValue();
		result.put("tpExigencia", tpExigenciaValue);
		if (!"VE".equals(tpExigenciaValue)) {
			result.put("disablePerifericosRastreador", true);
		}
		return result;
	}

	public TypedFlatMap findById(Long idExigenciaGerRisco) {
		ExigenciaGerRisco exigenciaGerRisco = exigenciaGerRiscoService.findById(idExigenciaGerRisco);
		TypedFlatMap exigenciaGerRiscoMap = new TypedFlatMap();
		exigenciaGerRiscoMap.put(ID_EXIGENCIA_GER_RISCO, exigenciaGerRisco.getIdExigenciaGerRisco());
		exigenciaGerRiscoMap.put(NR_NIVEL, exigenciaGerRisco.getNrNivel());
		exigenciaGerRiscoMap.put(ID_TIPO_EXIGENCIA_GER_RISCO, exigenciaGerRisco.getTipoExigenciaGerRisco().getIdTipoExigenciaGerRisco());
		exigenciaGerRiscoMap.put(DS_RESUMIDA, exigenciaGerRisco.getDsResumida());
		exigenciaGerRiscoMap.put(DS_COMPLETA, exigenciaGerRisco.getDsCompleta());
		exigenciaGerRiscoMap.put(TP_SITUACAO, exigenciaGerRisco.getTpSituacao().getValue());
		exigenciaGerRiscoMap.put(TP_CRITERIO_AGRUPAMENTO, exigenciaGerRisco.getTpCriterioAgrupamento().getValue());
		exigenciaGerRiscoMap.put(BL_AREA_RISCO, exigenciaGerRisco.getBlAreaRisco());
		exigenciaGerRiscoMap.put(PERIFERICOS_RASTREADOR, perifericosRastreadorMap(idExigenciaGerRisco));
		exigenciaGerRiscoMap.put(CD_EXIGENCIA_GER_RISCO, exigenciaGerRisco.getCdExigenciaGerRisco());
		return exigenciaGerRiscoMap;
	}

	private List<TypedFlatMap> perifericosRastreadorMap(Long idExigenciaGerRisco) {
		List<TypedFlatMap> perifericosRastreadorList = new ArrayList<TypedFlatMap>();
		for (PerifericoRastreador perifericoRastreador : perifericoRastreadorService.findPerifericosRastreador(idExigenciaGerRisco)) {
			TypedFlatMap perifericoRastreadorMap = new TypedFlatMap();
			perifericoRastreadorMap.put(ID_PERIFERICO_RASTREADOR, perifericoRastreador.getIdPerifericoRastreador());
			perifericoRastreadorMap.put(DS_PERIFERICO_RASTREADOR, perifericoRastreador.getDsPerifericoRastreador());
			perifericosRastreadorList.add(perifericoRastreadorMap);
		}
		return perifericosRastreadorList;
	}

	public TypedFlatMap store(TypedFlatMap exigenciaGerRiscoMap) {
		ExigenciaGerRisco exigenciaGerRisco = new ExigenciaGerRisco();
		Long idExigenciaGerRisco = exigenciaGerRiscoMap.getLong(ID_EXIGENCIA_GER_RISCO);
		if (idExigenciaGerRisco != null) {
			exigenciaGerRisco.setIdExigenciaGerRisco(idExigenciaGerRisco);
		}
		exigenciaGerRisco.setNrNivel(exigenciaGerRiscoMap.getLong(NR_NIVEL));
		Long idTipoExigenciaGerRisco = exigenciaGerRiscoMap.getLong(ID_TIPO_EXIGENCIA_GER_RISCO);
		exigenciaGerRisco.setTipoExigenciaGerRisco(tipoExigenciaGerRiscoService.findById(idTipoExigenciaGerRisco));
		exigenciaGerRisco.setDsResumida(exigenciaGerRiscoMap.getVarcharI18n(DS_RESUMIDA));
		exigenciaGerRisco.setDsCompleta(exigenciaGerRiscoMap.getVarcharI18n(DS_COMPLETA));
		exigenciaGerRisco.setTpSituacao(exigenciaGerRiscoMap.getDomainValue(TP_SITUACAO));
		exigenciaGerRisco.setTpCriterioAgrupamento(exigenciaGerRiscoMap.getDomainValue(TP_CRITERIO_AGRUPAMENTO));
		exigenciaGerRisco.setBlAreaRisco(exigenciaGerRiscoMap.getBoolean(BL_AREA_RISCO));
		List<PerifericoExigenciaGerRisco> perifericosRastreador = exigenciaGerRisco.getPerifericosRastreador();
		if (perifericosRastreador == null) {
			perifericosRastreador = new ArrayList<PerifericoExigenciaGerRisco>();
			exigenciaGerRisco.setPerifericosRastreador(perifericosRastreador);
		} else {
			perifericosRastreador.clear();
		}
		@SuppressWarnings("unchecked")
		List<TypedFlatMap> perifericosRastreadorList = (List<TypedFlatMap>) exigenciaGerRiscoMap.get(PERIFERICOS_RASTREADOR);
		if (perifericosRastreadorList != null) {
			for (TypedFlatMap perifericoRastreadorMap : perifericosRastreadorList) {
				Long idPerifericoRastreador = perifericoRastreadorMap.getLong(ID_PERIFERICO_RASTREADOR);
				PerifericoRastreador perifericoRastreador = perifericoRastreadorService.findById(idPerifericoRastreador);
				PerifericoExigenciaGerRisco perifericoExigenciaGerRisco = new PerifericoExigenciaGerRisco();
				perifericoExigenciaGerRisco.setExigenciaGerRisco(exigenciaGerRisco);
				perifericoExigenciaGerRisco.setPerifericoRastreador(perifericoRastreador);
				perifericosRastreador.add(perifericoExigenciaGerRisco);
			}
		}
		exigenciaGerRisco.setCdExigenciaGerRisco(exigenciaGerRiscoMap.getString(CD_EXIGENCIA_GER_RISCO));
		exigenciaGerRisco = exigenciaGerRiscoService.store(exigenciaGerRisco);
		return findById(exigenciaGerRisco.getIdExigenciaGerRisco());
	}

	public void removeById(Long id) {
		exigenciaGerRiscoService.removeById(id);
	}

}
