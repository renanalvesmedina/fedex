package com.mercurio.lms.sgr.action;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.FilterList;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.municipios.model.Empresa;
import com.mercurio.lms.sgr.model.FilialMonitoramento;
import com.mercurio.lms.sgr.model.service.FilialMonitoramentoService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.session.SessionUtils;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.sgr.manterFilialResponsavelMonitoramentoAction"
 */

public class ManterFilialResponsavelMonitoramentoAction extends CrudAction {
	
	public void setFilialMonitoramento(FilialMonitoramentoService filialMonitoramentoService) {
		this.defaultService = filialMonitoramentoService;
	}
	public FilialMonitoramentoService getFilialMonitoramento() {
		return (FilialMonitoramentoService)defaultService;
	}

    public void removeById(java.lang.Long id) {
    	getFilialMonitoramento().removeById(id);
    }

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	getFilialMonitoramento().removeByIds(ids);
    }

    public FilialMonitoramento findById(java.lang.Long id) {
    	return getFilialMonitoramento().findById(id);
    }

    public Serializable store(FilialMonitoramento bean) {
    	return getFilialMonitoramento().store(bean);
    }
    
    public ResultSetPage findPaginatedGrid(Map criteria) {
    	ResultSetPage resultSetPage = getFilialMonitoramento().findPaginated(criteria);
    	FilterList filter = new FilterList(resultSetPage.getList()) {
			public Map filterItem(Object item) {
				FilialMonitoramento fm = (FilialMonitoramento)item;
    			TypedFlatMap typedFlatMap = new TypedFlatMap();
	    		typedFlatMap.put("idFilialMonitoramento", fm.getIdFilialMonitoramento());
		    	typedFlatMap.put("filialByIdFilialMonitorada.pessoa.nmFantasia", fm.getFilialByIdFilialMonitorada().getPessoa().getNmFantasia());
		    	typedFlatMap.put("filialByIdFilialMonitorada.sgFilial", fm.getFilialByIdFilialMonitorada().getSgFilial());
		    	typedFlatMap.put("filialByIdFilialResponsavel.pessoa.nmFantasia", fm.getFilialByIdFilialResponsavel().getPessoa().getNmFantasia());
		    	typedFlatMap.put("filialByIdFilialResponsavel.sgFilial", fm.getFilialByIdFilialResponsavel().getSgFilial());
		    	typedFlatMap.put("tpTipoOperacao", fm.getTpTipoOperacao());
				return typedFlatMap;
			}
    	};
    	resultSetPage.setList((List)filter.doFilter());
    	return resultSetPage;
    }
    
    public Map findEmpresaUsuarioLogado(Map criteria){
    	Map map = new TypedFlatMap();
    	Empresa empresa = SessionUtils.getEmpresaSessao();
    	map.put("idEmpresa", empresa.getIdEmpresa());
    	map.put("pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(empresa.getPessoa()));
    	map.put("pessoa.nmPessoa", empresa.getPessoa().getNmPessoa());
   		map.put("tpEmpresa", empresa.getTpEmpresa().getValue());
    	return map;
    }
}