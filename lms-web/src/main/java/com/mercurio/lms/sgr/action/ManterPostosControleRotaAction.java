package com.mercurio.lms.sgr.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.municipios.model.Rota;
import com.mercurio.lms.sgr.model.PostoControle;
import com.mercurio.lms.sgr.model.RotaPostoControle;
import com.mercurio.lms.sgr.model.service.RotaPostoControleService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTFormatUtils;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.sgr.manterPostosControleRotaAction"
 */

public class ManterPostosControleRotaAction extends CrudAction {
	public void setRotaPostoControle(RotaPostoControleService rotaPostoControleService) {
		this.defaultService = rotaPostoControleService;
	}
    public void removeById(java.lang.Long id) {
        ((RotaPostoControleService)defaultService).removeById(id);
    }

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	((RotaPostoControleService)defaultService).removeByIds(ids);
    }

    public TypedFlatMap findById(java.lang.Long id) {
    	TypedFlatMap map = new TypedFlatMap();
    	RotaPostoControle rotaPostoControle = ((RotaPostoControleService)defaultService).findById(id);
    	
    	map.put("idRotaPostoControle", rotaPostoControle.getIdRotaPostoControle());
    	map.put("nrKmProximoPosto", rotaPostoControle.getNrKmProximoPosto());
    	map.put("nrOrdem", rotaPostoControle.getNrOrdem());
    	map.put("nrTempoProximoPosto", 
    			FormatUtils.converteMinutosParaHorasMinutos(rotaPostoControle.getNrTempoProximoPosto(),FormatUtils.ESCALA_HHH));
    	if (rotaPostoControle.getPostoControle()!=null){
    		map.put("postoControle.idPostoControle", rotaPostoControle.getPostoControle().getIdPostoControle());
    		map.put("postoControle.nmPostoControlePassaporte", rotaPostoControle.getPostoControle().getNmPostoControlePassaporte());
    	}
    	if (rotaPostoControle.getRota()!=null){
    		map.put("rota.idRota", rotaPostoControle.getRota().getIdRota());	
    	}
    	return map;
    }
    
	public Serializable store(TypedFlatMap tfmBean) {
		RotaPostoControle rotaPostoControle = new RotaPostoControle();
		rotaPostoControle.setIdRotaPostoControle(tfmBean.getLong("idRotaPostoControle"));
		rotaPostoControle.setNrKmProximoPosto(tfmBean.getInteger("nrKmProximoPosto"));
		rotaPostoControle.setNrOrdem(tfmBean.getShort("nrOrdem"));
		
		Long tempoEmMinutos = FormatUtils.converteHorasMinutosParaMinutos(tfmBean.getString("nrTempoProximoPosto"),FormatUtils.ESCALA_HHH);
		rotaPostoControle.setNrTempoProximoPosto(tempoEmMinutos);
		
		Long idPostoControle = tfmBean.getLong("postoControle.idPostoControle");
		if (idPostoControle!=null){
			PostoControle postoControle = new PostoControle();
			postoControle.setIdPostoControle(idPostoControle);
			rotaPostoControle.setPostoControle(postoControle);
		}
		
		Long idRota = tfmBean.getLong("rota.idRota");
		if (idRota!=null){
			Rota rota = new Rota();
			rota.setIdRota(idRota);
			rotaPostoControle.setRota(rota);
		}
		return ((RotaPostoControleService)defaultService).store(rotaPostoControle);
	}
	
    /**
     * findPaginated para a grid 
     * @param tfm
     * @return
     */	
	public ResultSetPage findPaginated(TypedFlatMap tfm) {
		ResultSetPage resultSetPage = ((RotaPostoControleService)defaultService).findPaginated(tfm); 
		List listRetorno = new ArrayList();
		for (Iterator iter = resultSetPage.getList().iterator(); iter.hasNext();) {
			RotaPostoControle rotaPostoControle = (RotaPostoControle) iter.next();
			TypedFlatMap tfmRetorno = new TypedFlatMap();
			tfmRetorno.put("nrOrdem", rotaPostoControle.getNrOrdem());  
			tfmRetorno.put("idRotaPostoControle", rotaPostoControle.getIdRotaPostoControle());
			tfmRetorno.put("postoControle.nmPostoControlePassaporte", rotaPostoControle.getPostoControle().getNmPostoControlePassaporte());
			tfmRetorno.put("postoControle.nmLocal", rotaPostoControle.getPostoControle().getNmLocal());
			tfmRetorno.put("postoControle.municipio.nmMunicipio", rotaPostoControle.getPostoControle().getMunicipio().getNmMunicipio());
			tfmRetorno.put("postoControle.municipio.unidadeFederativa.sgUnidadeFederativa", rotaPostoControle.getPostoControle().getMunicipio().getUnidadeFederativa().getSgUnidadeFederativa()); 
			tfmRetorno.put("postoControle.rodovia.sgRodovia",  rotaPostoControle.getPostoControle().getRodovia().getSgRodovia());
			tfmRetorno.put("postoControle.nrKm", rotaPostoControle.getPostoControle().getNrKm());
			if (rotaPostoControle.getNrTempoProximoPosto()!=null){
				tfmRetorno.put("nrTempoProximoPosto", (JTFormatUtils.formatTime((rotaPostoControle.getNrTempoProximoPosto().longValue() * 60), 2, 1)));
			}
			tfmRetorno.put("nrKmProximoPosto", rotaPostoControle.getNrKmProximoPosto());

			listRetorno.add(tfmRetorno);
		}
		resultSetPage.setList(listRetorno);
		return resultSetPage;
	}

    /**
     * row count
     * @param tfm
     * @return
     */
    public Integer getRowCount(TypedFlatMap tfm) {
        return ((RotaPostoControleService)defaultService).getRowCount(tfm);
    }
}
