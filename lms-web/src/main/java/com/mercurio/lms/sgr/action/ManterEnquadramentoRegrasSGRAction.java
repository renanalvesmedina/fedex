package com.mercurio.lms.sgr.action;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.MapUtils;
import org.apache.commons.lang.StringUtils;
import org.joda.time.YearMonthDay;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.FilterList;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Moeda;
import com.mercurio.lms.configuracoes.model.service.MoedaService;
import com.mercurio.lms.sgr.model.EnquadramentoRegra;
import com.mercurio.lms.sgr.model.service.EnquadramentoRegraService;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.PessoaUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.service.ClienteService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.sgr.manterEnquadramentoRegrasSGRAction"
 */

public class ManterEnquadramentoRegrasSGRAction extends CrudAction {
	
	private MoedaService moedaService;
	private ClienteService clienteService;
	
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}
	public void setMoedaService(MoedaService moedaService) {
		this.moedaService = moedaService;
	}
	public void setEnquadramentoRegra(EnquadramentoRegraService enquadramentoRegraService) {
		this.defaultService = enquadramentoRegraService;
	}
	public EnquadramentoRegraService getEnquadramentoRegraService() {
		return (EnquadramentoRegraService)defaultService;
	}
	
	
	
    public void removeById(java.lang.Long id) {
    	getEnquadramentoRegraService().removeById(id);
    }

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	getEnquadramentoRegraService().removeByIds(ids);
    }

	/*
	 * Chama verificação de permissões do usuário sobre uma filial / regional
	 * */
	public Moeda getMoedaUsuario() {
		return SessionUtils.getMoedaSessao();
    }
    
    public EnquadramentoRegra findById(java.lang.Long id) {
    	return getEnquadramentoRegraService().findById(id);
    }

    public ResultSetPage findPaginatedGridEnquadramento(TypedFlatMap criteria) {
    	return getEnquadramentoRegraService().findPaginated(criteria);
    }
    
    public Integer getRowCountGridEnquadramento(TypedFlatMap criteria) {
    	return getEnquadramentoRegraService().getRowCount(criteria);
    }
    
    public YearMonthDay getDataAtual() {
		return JTDateTimeUtils.getDataAtual();
	}
    
	public List findLookup(Map criteria) {
		Map pessoa = (Map) criteria.get("pessoa");
		String nrIdentificacao = MapUtils.getString(pessoa, "nrIdentificacao");
		if (!StringUtils.isBlank(nrIdentificacao)) {
			pessoa.put("nrIdentificacao", PessoaUtils.validateIdentificacao(nrIdentificacao));
		}
    
		List resultado = clienteService.findLookupByNomeCliente(criteria);
		return resultado;
	}    
    
    /**
     * 
     * @param criteria
     * @return
     */
    public List findMoeda(Map criteria) {
    	FilterList filter = new FilterList(moedaService.find(criteria)) {
			public Map filterItem(Object item) {
				Moeda moeda = (Moeda)item;
    			TypedFlatMap typedFlatMap = new TypedFlatMap();
	    		typedFlatMap.put("idMoeda", moeda.getIdMoeda());
		    	typedFlatMap.put("siglaSimbolo", moeda.getSiglaSimbolo());
				return typedFlatMap;
			}
    	};
    	return (List)filter.doFilter();
    }
    
    

    
    
	/**
	 * Insere, caso o id seja <code>null</code> ou atualiza uma entidade, caso contrário.
	 *
	 * @param bean entidade a ser armazenada.
	 * @return entidade que foi armazenada.
	 */
    public Serializable store(EnquadramentoRegra bean) {
  		return getEnquadramentoRegraService().storeByManterEnquadramentoRegrasSGR(bean);
    }

}