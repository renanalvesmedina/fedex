package com.mercurio.lms.portaria.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.joda.time.DateTime;

import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.report.ReportActionSupport;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.ControleCarga;
import com.mercurio.lms.carregamento.model.EquipeOperacao;
import com.mercurio.lms.carregamento.model.service.ControleCargaService;
import com.mercurio.lms.carregamento.model.service.EquipeOperacaoService;
import com.mercurio.lms.carregamento.model.service.LacreControleCargaService;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.configuracoes.model.service.UsuarioService;
import com.mercurio.lms.contratacaoveiculos.model.MeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.MeioTransporteRodoviario;
import com.mercurio.lms.contratacaoveiculos.model.Motorista;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteRodoviarioService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.portaria.model.RegistroAuditoria;
import com.mercurio.lms.portaria.model.service.LacreRegistroAuditoriaService;
import com.mercurio.lms.portaria.model.service.RegistroAuditoriaService;
import com.mercurio.lms.portaria.report.EmitirResultadosAuditoriaCargaAnaliseService;
import com.mercurio.lms.util.AliasToNestedMapResultTransformer;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.portaria.manterRegistrosAuditoriasCargasAction"
 */

public class ManterRegistrosAuditoriasCargasAction extends ReportActionSupport {
	
	private FilialService filialService;
	private ControleCargaService controleCargaService;
	private UsuarioService usuarioService;
	private LacreControleCargaService lacreControleCargaService;
	private MeioTransporteRodoviarioService meioTransporteRodoviarioService;
	private RegistroAuditoriaService registroAuditoriaService;	
	private LacreRegistroAuditoriaService lacreRegistroAuditoriaService;
	private EquipeOperacaoService equipeOperacaoService;
	
	
	public void setEquipeOperacaoService(EquipeOperacaoService equipeOperacaoService) {
		this.equipeOperacaoService = equipeOperacaoService;
	}
	/*********************************************************************************
	 * Métodos de remove 
	 *********************************************************************************/
	public void removeById(java.lang.Long id) {
        getRegistroAuditoriaService().removeById(id);
    }
	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	getRegistroAuditoriaService().removeByIds(ids);
    }
    
	/*********************************************************************************
	 * Store 
	 *********************************************************************************/
    public Serializable store(TypedFlatMap tfm) {
    	
    	RegistroAuditoria ra = new RegistroAuditoria();
    	ra.setIdRegistroAuditoria(tfm.getLong("idRegistroAuditoria"));
    	
    	ControleCarga controleCarga = new ControleCarga();
    	controleCarga.setIdControleCarga(tfm.getLong("controleCarga.idControleCarga"));
    	ra.setControleCarga(controleCarga);
    	ra.setDhRegistroAuditoria(JTDateTimeUtils.getDataHoraAtual());

    	Filial filial = new Filial();
    	filial.setIdFilial(tfm.getLong("filial.idFilial"));
    	ra.setFilial(filial);
    	
    	MeioTransporteRodoviario meioTransporteRodoviario = new MeioTransporteRodoviario();
    	meioTransporteRodoviario.setIdMeioTransporte(tfm.getLong("controleCarga.meioTransporteByIdTransportado.idMeioTransporte"));
    	MeioTransporte meioTransporte = new MeioTransporte();
    	meioTransporte.setIdMeioTransporte(tfm.getLong("controleCarga.meioTransporteByIdTransportado.idMeioTransporte"));
    	meioTransporte.setNrIdentificador(tfm.getString("controleCarga.meioTransporteByIdTransportado.nrIdentificador"));
    	meioTransporte.setNrFrota(tfm.getString("controleCarga.meioTransporteByIdTransportado.nrFrota"));
    	meioTransporteRodoviario.setMeioTransporte(meioTransporte);
    	ra.setMeioTransporteRodoviario(meioTransporteRodoviario);
    	
    	if (tfm.getLong("controleCarga.meioTransporteByIdSemiRebocado.idMeioTransporte") != null){
    		MeioTransporteRodoviario semiReboque = new MeioTransporteRodoviario();
    		semiReboque.setIdMeioTransporte(tfm.getLong("controleCarga.meioTransporteByIdSemiRebocado.idMeioTransporte"));
    		ra.setSemiReboque(semiReboque);
    	}
    	
    	Usuario usuario = new Usuario();
    	usuario.setIdUsuario(tfm.getLong("usuario.idUsuario"));
    	ra.setUsuario(usuario);
    	
    	ra.setNrRegistroAuditoria(tfm.getInteger("nrRegistroAuditoria"));
    	ra.setObComentarios(tfm.getString("obComentarios"));
    	ra.setTpResultado(tfm.getDomainValue("tpResultado"));
    	ra.setDhLiberacao(tfm.getDateTime("dhLiberacao"));
    	ra.setTpSituacao(new DomainValue("A"));
    	
    	if (tfm.getLong("idEquipeOperacao") != null) {
        	EquipeOperacao equipeOperacao = new EquipeOperacao();    	
        	equipeOperacao.setIdEquipeOperacao(tfm.getLong("idEquipeOperacao"));
        	equipeOperacao.setVersao(tfm.getInteger("versao"));
        	ra.setEquipeOperacao(equipeOperacao);
    	}
    	
    	Map lacresAtuais = getNrLacresAntigosAndNovosFromLacresAtuais(tfm);
    	
    	return getRegistroAuditoriaService().storeFromAction(ra, tfm, (List)lacresAtuais.get("novos"), (List)lacresAtuais.get("antigos"));
    }
     
    
	/*********************************************************************************
	 * Finders 
	 *********************************************************************************/
    public TypedFlatMap findById(java.lang.Long id) {
    	
    	RegistroAuditoria ra = getRegistroAuditoriaService().findByIdCustom(id);    	  	
    	
    	TypedFlatMap retorno = new TypedFlatMap();
    	retorno.put("idRegistroAuditoria",ra.getIdRegistroAuditoria());
		retorno.put("filial.pessoa.nmFantasia", ra.getFilial().getPessoa().getNmFantasia());
		retorno.put("filial.sgFilial", ra.getFilial().getSgFilial());
		retorno.put("filial.idFilial", ra.getFilial().getIdFilial());
		retorno.put("nrRegistroAuditoria", ra.getNrRegistroAuditoria());
		retorno.put("dhRegistroAuditoria", ra.getDhRegistroAuditoria());		
		retorno.put("obComentarios", ra.getObComentarios());
		retorno.put("tpResultado.value", ra.getTpResultado().getValue());
		retorno.put("dhLiberacao", ra.getDhLiberacao());
		retorno.put("obMotivoLiberacao", ra.getObMotivoLiberacao());
		retorno.put("usuario.idUsuario", ra.getUsuario().getIdUsuario());
		retorno.put("usuario.nmUsuario", ra.getUsuario().getNmUsuario());
		
		Usuario usuarioLiberacao = ra.getUsuarioLiberacao();
		if (usuarioLiberacao != null){
			retorno.put("usuarioLiberacao.idUsuario", usuarioLiberacao.getIdUsuario());
			retorno.put("usuarioLiberacao.nmUsuario", usuarioLiberacao.getNmUsuario());
		}
		
		retorno.put("controleCarga.idControleCarga", ra.getControleCarga().getIdControleCarga());
		retorno.put("controleCarga.meioTransporteByIdTransportado.nrFrota", ra.getMeioTransporteRodoviario().getMeioTransporte().getNrFrota());
		retorno.put("controleCarga.meioTransporteByIdTransportado.nrIdentificador", ra.getMeioTransporteRodoviario().getMeioTransporte().getNrIdentificador());
		retorno.put("controleCarga.meioTransporteByIdTransportado.idMeioTransporte", ra.getMeioTransporteRodoviario().getMeioTransporte().getIdMeioTransporte());
		
		if (ra.getSemiReboque() != null) {
			retorno.put("controleCarga.meioTransporteByIdSemiRebocado.nrFrota", ra.getSemiReboque().getMeioTransporte().getNrFrota());
			retorno.put("controleCarga.meioTransporteByIdSemiRebocado.nrIdentificador", ra.getSemiReboque().getMeioTransporte().getNrIdentificador());
			retorno.put("controleCarga.meioTransporteByIdSemiRebocado.idMeioTransporte", ra.getSemiReboque().getMeioTransporte().getIdMeioTransporte());
		}
		 
		ControleCarga cc = ra.getControleCarga();
		retorno.put("controleCarga.nrControleCarga", cc.getNrControleCarga());
		retorno.put("controleCarga.filialByIdFilialOrigem.idFilial", cc.getFilialByIdFilialOrigem().getIdFilial());
		retorno.put("controleCarga.filialByIdFilialOrigem.sgFilial", cc.getFilialByIdFilialOrigem().getSgFilial());		
		retorno.put("controleCarga.filialByIdFilialOrigem.pessoa.nmFantasia", cc.getFilialByIdFilialOrigem().getPessoa().getNmFantasia());
		if (cc.getFilialByIdFilialDestino() != null){
			retorno.put("controleCarga.filialByIdFilialDestino.idFilial", cc.getFilialByIdFilialDestino().getIdFilial());
			retorno.put("controleCarga.filialByIdFilialDestino.sgFilial", cc.getFilialByIdFilialDestino().getSgFilial());
			retorno.put("controleCarga.filialByIdFilialDestino.siglaNomeFilial", cc.getFilialByIdFilialDestino().getSiglaNomeFilial());
			retorno.put("controleCarga.filialByIdFilialDestino.pessoa.nmFantasia", cc.getFilialByIdFilialDestino().getPessoa().getNmFantasia());
		}

		Motorista motorista = cc.getMotorista();
		if (Hibernate.isInitialized(motorista) && motorista != null) {
			retorno.put("controleCarga.motorista.pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(motorista.getPessoa()));
			retorno.put("controleCarga.motorista.pessoa.nmPessoa", motorista.getPessoa().getNmPessoa());
			retorno.put("controleCarga.motorista.idMotorista", motorista.getIdMotorista());
		}
		retorno.put("tpControleCargaValue", cc.getTpControleCarga().getValue());
		retorno.put("tpControleCarga", cc.getTpControleCarga().getDescription());
	 	
		Long idControleCarga = ra.getControleCarga().getIdControleCarga();
		
    	DateTime dhEmissaoEvento = getRegistroAuditoriaService().findDhEmissaoFromLastEventoEmitidoByIdControleCarga(idControleCarga);
		if (dhEmissaoEvento != null) {    		   		
			retorno.put("controleCarga.eventoControleCarga.dhEvento", dhEmissaoEvento);
		}
		
		Long idEquipeOperacao=null;
		Integer versao= null; 
		if (ra.getEquipeOperacao() != null){
			idEquipeOperacao = ra.getEquipeOperacao().getIdEquipeOperacao();
			versao = ra.getEquipeOperacao().getVersao();
		}	
		
		retorno.put("idEquipeOperacao", idEquipeOperacao);
		retorno.put("versao", versao);
		
    	TypedFlatMap tfm = new TypedFlatMap();
    	tfm.put("idControleCarga", idControleCarga);
    	tfm.put("idRegistroAuditoria", id);
    	tfm.put("idEquipeOperacao", idEquipeOperacao);
    	Map listboxesValues = findListBoxesValuesDetalhamento(tfm);
    	
    	retorno.putAll(listboxesValues);
    	
    	
    	return retorno;
    }
    
    public ResultSetPage findPaginatedCustom(TypedFlatMap tfm) {
    	ResultSetPage rsp = getRegistroAuditoriaService().findPaginatedCustom(tfm);    	
    	List list = AliasToNestedMapResultTransformer.getInstance().transformListResult(rsp.getList());
    	
    	for (Iterator it = list.iterator(); it.hasNext(); ) {
    		Map map = (Map) it.next();
    		String tpResultado = (String)((Map)map.get("tpResultado")).get("value");
    		DateTime dhLiberacao = (DateTime)map.get("dhLiberacao");

    		if ("A".equals(tpResultado) || ("R".equals(tpResultado) && dhLiberacao != null )) {
    			map.put("meioTransporteLiberado", Boolean.TRUE.toString());
    		} else {
    			map.put("meioTransporteLiberado", Boolean.FALSE);
    		}
    	}
    	
    	rsp.setList(list);
    	return rsp;
    }
    
        
    public Integer getRowCountCustom(TypedFlatMap tfm) {
    	return getRegistroAuditoriaService().getRowCount(tfm);
    }
    
    public List findLookupFilial(Map criteria) {
		return filialService.findLookupFilial(criteria);
	}
    
    public List findLookupMeioTransp(Map criteria) {
    	return meioTransporteRodoviarioService.findLookup(criteria);
    }
    
    public List findLookupControleCarga(Map criteria) {
    	List list = controleCargaService.findLookup(criteria); 
    	
    	if (list.size() == 1) {
    		
        	ControleCarga bean = (ControleCarga) list.remove(0);
        	
        	Map controleCarga = new HashMap();
           	controleCarga.put("nrControleCarga", bean.getNrControleCarga());
           	controleCarga.put("idControleCarga", bean.getIdControleCarga());
           	controleCarga.put("tpControleCarga", bean.getTpControleCarga());
           	
           	List listaEquipeOperacao = equipeOperacaoService.findEquipeByIdControleCarga(bean.getIdControleCarga());
           	if(!listaEquipeOperacao.isEmpty()){
           		EquipeOperacao equipeOperacao = (EquipeOperacao)listaEquipeOperacao.get(0);
           		controleCarga.put("idEquipeOperacao", equipeOperacao.getIdEquipeOperacao());
           		controleCarga.put("versao", equipeOperacao.getVersao());
           	}   		
        	Filial filial = bean.getFilialByIdFilialOrigem();
        	if (filial != null) {
        		Map filialByIdFilialOrigem = new HashMap();
				filialByIdFilialOrigem.put("idFilial", filial.getIdFilial());
	        	filialByIdFilialOrigem.put("sgFilial", filial.getSgFilial());
	        	filialByIdFilialOrigem.put("siglaNomeFilial", filial.getSgFilial() + " - " +  filial.getPessoa().getNmFantasia());
        	        	
	        	Map filialByIdFilialOrigem_pessoa = new HashMap();
	        	filialByIdFilialOrigem_pessoa.put("nmFantasia", filial.getPessoa().getNmFantasia());
	        	filialByIdFilialOrigem.put("pessoa", filialByIdFilialOrigem_pessoa);
	        	controleCarga.put("filialByIdFilialOrigem", filialByIdFilialOrigem);
        	}
        	        	
        	Filial filialDestino = bean.getFilialByIdFilialDestino();
        	if (filialDestino != null) {
        		Map filialByIdFilialDestino = new HashMap();
				filialByIdFilialDestino.put("idFilial", filialDestino.getIdFilial());
	        	filialByIdFilialDestino.put("sgFilial", filialDestino.getSgFilial());
	        	filialByIdFilialDestino.put("siglaNomeFilial", filialDestino.getSiglaNomeFilial());
	        	
	        	Map filialByIdFilialDestino_pessoa = new HashMap();
	        	filialByIdFilialDestino_pessoa.put("nmFantasia", filialDestino.getPessoa().getNmFantasia());
	        	filialByIdFilialDestino.put("pessoa", filialByIdFilialDestino_pessoa);
	        	controleCarga.put("filialByIdFilialDestino", filialByIdFilialDestino);
        	}
        	        	
        	MeioTransporte meioTransporte = bean.getMeioTransporteByIdTransportado();
        	if (meioTransporte != null){
        		Map meioTransporteByIdTransportado = new HashMap();
				meioTransporteByIdTransportado.put("idMeioTransporte", meioTransporte.getIdMeioTransporte());
	        	meioTransporteByIdTransportado.put("nrIdentificador", meioTransporte.getNrIdentificador());
	        	meioTransporteByIdTransportado.put("nrFrota", meioTransporte.getNrFrota());
	        	controleCarga.put("meioTransporteByIdTransportado", meioTransporteByIdTransportado);
        	}
        	        	
        	MeioTransporte semiRebocado = bean.getMeioTransporteByIdSemiRebocado();
        	if (semiRebocado != null){
        		Map meioTransporteByIdSemiRebocado = new HashMap();
				meioTransporteByIdSemiRebocado.put("idMeioTransporte", semiRebocado.getIdMeioTransporte());
	        	meioTransporteByIdSemiRebocado.put("nrIdentificador", semiRebocado.getNrIdentificador());
	        	meioTransporteByIdSemiRebocado.put("nrFrota", semiRebocado.getNrFrota());
	        	controleCarga.put("meioTransporteByIdSemiRebocado", meioTransporteByIdSemiRebocado);
        	}
        	        	
        	Motorista objMotorista = bean.getMotorista();
        	if (objMotorista != null){
        		Map motorista = new HashMap();
        		motorista.put("idMotorista", objMotorista.getIdMotorista());
	        	 
            	Map motorista_pessoa = new HashMap();
	        	motorista_pessoa.put("nmPessoa", objMotorista.getPessoa().getNmPessoa());
	        	motorista_pessoa.put("nrIdentificacao", objMotorista.getPessoa().getNrIdentificacao());
	        	motorista_pessoa.put("nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(objMotorista.getPessoa()));
	        	motorista.put("pessoa", motorista_pessoa);
	        	controleCarga.put("motorista", motorista);
        	}
        	
    		DateTime dhEmissaoEvento = getRegistroAuditoriaService().findDhEmissaoFromLastEventoEmitidoByIdControleCarga(bean.getIdControleCarga());
    		if (dhEmissaoEvento != null) {
	    		Map eventoControleCarga = new HashMap();
	    		eventoControleCarga.put("dhEvento", dhEmissaoEvento);
	    		controleCarga.put("eventoControleCarga", eventoControleCarga);
    		}
    		
    		list.add(controleCarga);
    		
    	}
    	
    	return list;
    }
    
	/**
	 * finder para a listbox de equipe 
	 * @param idControleCarga
	 * @return
	 */ 
    private List findIntegrantes(Long id, boolean isDetalhamento) {
    	List list = new ArrayList();
    	
    	if (!isDetalhamento){
    		list = getRegistroAuditoriaService().findEmpresasIntegrantesByIdControleCarga(id);
    		list.addAll(getRegistroAuditoriaService().findFuncionariosIntegrantesByIdControleCarga(id));
    	} else {
    		list = getRegistroAuditoriaService().findEmpresasIntegrantesByIdEquipeOperacao(id);
    		list.addAll(getRegistroAuditoriaService().findFuncionariosIntegrantesByIdEquipeOperacao(id));
    	}
    	
    	return list;
    }
    
    
    private List findEquipeByIdRegistroAuditoria(Long idRegistroAuditoria){
    	return getRegistroAuditoriaService().findEquipeByIdRegistroAuditoria(idRegistroAuditoria);    	
    }
    
    /**
     * busca os valores das listobxes
     * @param criteria
     * @return
     */
    public Map findListboxesValues(TypedFlatMap criteria) {
    	Map map = new HashMap();
    	
    	List integrantes = AliasToNestedMapResultTransformer.getInstance().transformListResult(findIntegrantes(criteria.getLong("idControleCarga"), false));
    	if (!integrantes.isEmpty()){
    		Map item = (Map) integrantes.get(0);
    		Long idEquipeOperacao = (Long)item.get("idEquipeOperacao");
    		Integer versao = (Integer) item.get("versao");
    		map.put("idEquipeOperacao", idEquipeOperacao);
    		map.put("versao", versao);
    	}
    	
    	List lacres = AliasToNestedMapResultTransformer.getInstance().transformListResult(lacreControleCargaService.findLacresFechadosByIdControleCarga(criteria.getLong("idControleCarga")));
    	List equipeAuditoria = findEquipeByIdRegistroAuditoria(criteria.getLong("idRegistroAuditoria"));
    	

    	DateTime dhEmissaoEvento = getRegistroAuditoriaService().findDhEmissaoFromLastEventoEmitidoByIdControleCarga(criteria.getLong("idControleCarga"));
		if (dhEmissaoEvento != null) {
    		Map eventoControleCarga = new HashMap();
    		eventoControleCarga.put("dhEvento", dhEmissaoEvento);
    		map.put("eventoControleCarga", eventoControleCarga);
		}
    	
    	map.put("lacres", lacres);
    	map.put("equipe", integrantes);
    	map.put("lacresAtuais", lacres);
    	map.put("equipeAuditoria", equipeAuditoria);

    	return map;
    }

    public Map findListBoxesValuesDetalhamento(TypedFlatMap criteria) {
    	Map map = new HashMap();
    	List integrantes = new ArrayList();
    	
    	if (criteria.getLong("idEquipeOperacao") != null){
    		integrantes = AliasToNestedMapResultTransformer.getInstance().transformListResult(findIntegrantes(criteria.getLong("idEquipeOperacao"), true));    	    	
    	}
    	List lacres = lacreRegistroAuditoriaService.findLacresByRegistroAuditoria(criteria.getLong("idRegistroAuditoria"), Boolean.TRUE);
    	List lacresAtuais = lacreRegistroAuditoriaService.findLacresByRegistroAuditoria(criteria.getLong("idRegistroAuditoria"), Boolean.FALSE);
    	List equipeAuditoria = findEquipeByIdRegistroAuditoria(criteria.getLong("idRegistroAuditoria"));
    	
    	map.put("lacres", lacres);
    	map.put("equipe", integrantes);
    	map.put("lacresAtuais", lacresAtuais);
    	map.put("equipeAuditoria", equipeAuditoria);

    	return map;
    }
    
    public List findLookupFuncionario(TypedFlatMap criteria) {
    	return  usuarioService.findLookupUsuario(criteria);
  
    }
	
    /**
     * busca a filial do usuario logado
     * @return
     */
	public Map findFilialUsuario() {
		Filial fi = SessionUtils.getFilialSessao();
		
		Map retorno = new HashMap();
		
		Map filial = new HashMap();
		filial.put("idFilial", fi.getIdFilial());
		filial.put("sgFilial", fi.getSgFilial());
		filial.put("siglaNomeFilial", fi.getSiglaNomeFilial());
		
		Map filial_pessoa = new HashMap();
		filial_pessoa.put("nmFantasia", fi.getPessoa().getNmFantasia());
		filial.put("pessoa", filial_pessoa);

		retorno.put("filial", filial);
		return retorno;
	}	
	
	/**
	 * Retorna um map com uma list de lacres antigos (que já exixtiam) 
	 * e uma list de lacres novos (inseridos) da listbox de lacres atuais. 
	 * @param tfm
	 * @return
	 * @author luisfco
	 */
	private Map getNrLacresAntigosAndNovosFromLacresAtuais(TypedFlatMap tfm) {
		Map map = new HashMap();
		List lacresNovos = new ArrayList();
		List lacresAntigos = new ArrayList();
		Long idControleCarga = tfm.getLong("controleCarga.idControleCarga");
		List lacres = new ArrayList();
    	if (tfm.getList("lacres") != null) {
	    	for (Iterator it = tfm.getList("lacres").iterator(); it.hasNext(); ) {
	    		lacres.add(((TypedFlatMap)it.next()).getString("nrLacres"));
	    	}
    	}

    	if (tfm.getList("lacresAtuais") != null) {
	    	for (Iterator it = tfm.getList("lacresAtuais").iterator(); it.hasNext(); ) {
	    		String nrLacres = (String) ((TypedFlatMap)it.next()).getString("nrLacres");
	    		if (!lacres.contains(nrLacres)) {
	    			// se o lacre ja nao foi salvo, entao insere
	    			if (lacreControleCargaService.findLacreControleCargaByIdControleCargaAndNrLacre(idControleCarga, nrLacres) == null)
	    				lacresNovos.add(nrLacres);
	    		} else { 
	    			lacresAntigos.add(nrLacres);
	    		}
	    	}
    	}
    	
    	map.put("novos", lacresNovos);
    	map.put("antigos", lacresAntigos);
    	
    	return map;
	}
	
	/*********************************************************************************
	 * Getters and Setters 
	 *********************************************************************************/
	public RegistroAuditoriaService getRegistroAuditoriaService() {
		return this.registroAuditoriaService;
	}
	public void setControleCargaService(ControleCargaService controleCargaService) {
		this.controleCargaService = controleCargaService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public void setMeioTransporteRodoviarioService(MeioTransporteRodoviarioService meioTransporteRodoviarioService) {
		this.meioTransporteRodoviarioService = meioTransporteRodoviarioService;
	}
	public void setRegistroAuditoriaService(RegistroAuditoriaService ras) {
		this.registroAuditoriaService = ras;
	}
	public void setLacreControleCargaService(LacreControleCargaService lacreControleCargaService) {
		this.lacreControleCargaService = lacreControleCargaService;
	}
	/**
	 * @param emitirResultadosAuditoriaCargaAnaliseService The emitirResultadosAuditoriaCargaAnaliseService to set.
	 */
	public void setEmitirResultadosAuditoriaCargaAnaliseService(
			EmitirResultadosAuditoriaCargaAnaliseService emitirResultadosAuditoriaCargaAnaliseService) {
		this.reportServiceSupport = emitirResultadosAuditoriaCargaAnaliseService;
	}
	/**
	 * @param lacreRegistroAuditoriaService The lacreRegistroAuditoriaService to set.
	 */
	public void setLacreRegistroAuditoriaService(
			LacreRegistroAuditoriaService lacreRegistroAuditoriaService) {
		this.lacreRegistroAuditoriaService = lacreRegistroAuditoriaService;
	}
	/**
	 * @param usuarioService The usuarioService to set.
	 */
	public void setUsuarioService(UsuarioService usuarioService) {
		this.usuarioService = usuarioService;
	}

}
