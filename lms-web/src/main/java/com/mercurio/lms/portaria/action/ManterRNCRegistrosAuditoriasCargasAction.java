package com.mercurio.lms.portaria.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.expedicao.model.Conhecimento;
import com.mercurio.lms.expedicao.model.CtoInternacional;
import com.mercurio.lms.expedicao.model.DoctoServico;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.pendencia.model.Mda;
import com.mercurio.lms.portaria.model.NaoConformidadeAuditoria;
import com.mercurio.lms.portaria.model.RegistroAuditoria;
import com.mercurio.lms.portaria.model.service.NaoConformidadeAuditoriaService;
import com.mercurio.lms.rnc.model.NaoConformidade;
import com.mercurio.lms.rnc.model.OcorrenciaNaoConformidade;
import com.mercurio.lms.rnc.model.service.NaoConformidadeService;
import com.mercurio.lms.rnc.model.service.OcorrenciaNaoConformidadeService;
import com.mercurio.lms.util.session.SessionUtils;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.portaria.manterRNCRegistrosAuditoriasCargasAction"
 */

public class ManterRNCRegistrosAuditoriasCargasAction extends CrudAction {

	private FilialService filialService;
	private NaoConformidadeService naoConformidadeService;
	private OcorrenciaNaoConformidadeService ocorrenciaNaoConformidadeService;
	
	public TypedFlatMap findFilialUsuario(){ 
		Filial fil = SessionUtils.getFilialSessao();
	
		TypedFlatMap retorno = new TypedFlatMap(); 
		
		retorno.put("idFilial", fil.getIdFilial());
		retorno.put("sgFilial", fil.getSgFilial());
		retorno.put("nmFantasia", fil.getPessoa().getNmFantasia());
		
		return retorno;
	}
	
	public Serializable storeNaoConformidadeAuditoria(TypedFlatMap tfm) {
		NaoConformidadeAuditoria nca = new NaoConformidadeAuditoria();
		nca.setIdNaoConformidadeAuditoria(tfm.getLong("idNaoConformidadeAuditoria"));
		RegistroAuditoria ra = new RegistroAuditoria();
		ra.setIdRegistroAuditoria(tfm.getLong("registroAuditoria.idRegistroAuditoria"));
		nca.setRegistroAuditoria(ra);
		
		if(tfm.getLong("naoConformidade.idNaoConformidade")!= null){
			NaoConformidade nc = new NaoConformidade();	
			nc.setIdNaoConformidade(tfm.getLong("naoConformidade.idNaoConformidade"));
			nca.setNaoConformidade(nc);
		}
		
		return getNaoConformidadeAuditoriaService().store(nca);
	}
	
	
    public ResultSetPage findPaginatedNaoConformidadeAuditoria(Map criteria) {
    	ResultSetPage resultSetPage = getNaoConformidadeAuditoriaService().findPaginated(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter=resultSetPage.getList().iterator(); iter.hasNext();) {
    		Map map = new HashMap(); 
    		NaoConformidadeAuditoria nca = (NaoConformidadeAuditoria)iter.next();
    		map.put("idNaoConformidadeAuditoria", nca.getIdNaoConformidadeAuditoria());
    		map.put("nrNaoConformidade", nca.getNaoConformidade().getNrNaoConformidade());
    		map.put("sgFilialNaoConformidade", nca.getNaoConformidade().getFilial().getSgFilial());
    		
    		String tpDocumentoServico = "";
    		if (nca.getNaoConformidade() != null && nca.getNaoConformidade().getDoctoServico() != null) {
    			map.put("sgFilialDocumentoServico", nca.getNaoConformidade().getDoctoServico().getFilialByIdFilialOrigem().getSgFilial());
    			tpDocumentoServico = nca.getNaoConformidade().getDoctoServico().getTpDocumentoServico().getValue();

    			map.put("nrDocumentoServico", nca.getNaoConformidade().getDoctoServico().getNrDoctoServico());	    	
    			tpDocumentoServico = nca.getNaoConformidade().getDoctoServico().getTpDocumentoServico().getDescription().getValue();
    		}
    		map.put("tpDocumentoServico", tpDocumentoServico);
    		
    		List ocorrencias = ocorrenciaNaoConformidadeService.findOcorrenciasByIdNaoConformidade(nca.getNaoConformidade().getIdNaoConformidade());
    		map.put("ocorrencias", transformaOcorrenciasInLinha(ocorrencias));
    		
    		retorno.add(map);
    	}
    	resultSetPage.setList(retorno);
    	return resultSetPage;
    }
    
    private String transformaOcorrenciasInLinha(List ocorrencias){
    	StringBuffer linha = new StringBuffer();
    	
    	for (Iterator iter = ocorrencias.iterator(); iter.hasNext();) {
			OcorrenciaNaoConformidade onc = (OcorrenciaNaoConformidade) iter.next();
			
			linha
				 .append(onc.getDsOcorrenciaNc())
				 .append(iter.hasNext() ? ", " : "");			
		}
    	
    	return linha.toString();
    }
    
    
    public Integer getRowCountNaoConformidadeAuditoria(Map criteria) {
    	return super.getRowCount(criteria);
    }

    
    /**
     * Método que busca os dados para a lookup de Não Conformidade.
     * Sobrescrito para retornar os mesmos dados do método findPaginated
     * utilizado na grid de Não Conformidade.
     * @param criteria
     * @return
     */
    public List findLookupNaoConformidade(Map criteria) {
        List list = this.naoConformidadeService.findLookup(criteria);
        List retorno = new ArrayList();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
            Map map = new HashMap();
            NaoConformidade nc = (NaoConformidade) iter.next();
            map.put("idNaoConformidade", nc.getIdNaoConformidade());
            map.put("nrNaoConformidade", nc.getNrNaoConformidade());
            map.put("sgFilialNaoConformidade", nc.getFilial().getSgFilial());
            String tpDocumentoServico = "";
            String nrDocumentoServico = "";
            
            if (nc.getDoctoServico() != null) {
                tpDocumentoServico = nc.getDoctoServico().getTpDocumentoServico().getDescription().getValue();
              	map.put("sgFilialDocumentoServico", nc.getDoctoServico().getFilialByIdFilialOrigem().getSgFilial());
                if (tpDocumentoServico.equals("CTRC")) {
                        nrDocumentoServico = ((Conhecimento)nc.getDoctoServico()).getNrConhecimento().toString();
                } else if (tpDocumentoServico.equals("CRT")) {
                        nrDocumentoServico = ((CtoInternacional)nc.getDoctoServico()).getNrCrt().toString();
                } else if (tpDocumentoServico.equals("MDA")) {
                        nrDocumentoServico = ((Mda)nc.getDoctoServico()).getNrDoctoServico().toString();
                }
            }
            map.put("tpDocumentoServico", tpDocumentoServico);
            map.put("nrDocumentoServico", nrDocumentoServico);
            retorno.add(map);
        }
        return retorno;
    }
    
    public Map findListboxValues(TypedFlatMap tfm) {
    	Map map = new HashMap();
        List ocorrencias = ocorrenciaNaoConformidadeService.findOcorrenciasByIdNaoConformidade(tfm.getLong("idNaoConformidade"));
        map.put("ocorrencias", transformOcorrenciasIntoMapList(ocorrencias));
    	return map;
    }


    public TypedFlatMap findByIdNaoConformidadeAuditoria(Long idNaoConformidadeAuditoria) {
    	
    	NaoConformidadeAuditoria nca = getNaoConformidadeAuditoriaService().findById((Long)idNaoConformidadeAuditoria);

    	TypedFlatMap tfm = new TypedFlatMap();
		NaoConformidade naoConformidade = nca.getNaoConformidade();
		tfm.put("idNaoConformidadeAuditoria", nca.getIdNaoConformidadeAuditoria());
		tfm.put("naoConformidade.filial.idFilial", naoConformidade.getFilial().getIdFilial());
		tfm.put("naoConformidade.filial.sgFilial", naoConformidade.getFilial().getSgFilial());
		tfm.put("naoConformidade.idNaoConformidade", nca.getIdNaoConformidadeAuditoria());
		tfm.put("naoConformidade.nrNaoConformidade", naoConformidade.getNrNaoConformidade());
		DoctoServico doctoServico = naoConformidade.getDoctoServico();
		if (doctoServico != null) {
			tfm.put("naoConformidade.doctoServico.tpDocumentoServico.description", doctoServico.getTpDocumentoServico().getDescription());
			tfm.put("naoConformidade.doctoServico.filialByIdFilialOrigem.sgFilial", doctoServico.getTpDocumentoServico().getDescription());
			tfm.put("naoConformidade.doctoServico.conhecimento.nrConhecimento", doctoServico.getTpDocumentoServico().getDescription());
			tfm.put("sgFilialDocumentoServico", doctoServico.getFilialByIdFilialOrigem().getSgFilial());
		}
		
		String tpDocumentoServico = "";
		if (naoConformidade != null && doctoServico != null) {
			tfm.put("sgFilialDocumentoServico", doctoServico.getFilialByIdFilialOrigem().getSgFilial());
			tpDocumentoServico = doctoServico.getTpDocumentoServico().getValue();
			tfm.put("nrDocumentoServico", doctoServico.getNrDoctoServico());    		
			tpDocumentoServico = doctoServico.getTpDocumentoServico().getDescription().getValue();
		}
		tfm.put("tpDocumentoServico", tpDocumentoServico);

		
		
		List ocorrencias = ocorrenciaNaoConformidadeService.findOcorrenciasByIdNaoConformidade(naoConformidade.getIdNaoConformidade());
		tfm.put("ocorrencias", transformOcorrenciasIntoMapList(ocorrencias));    		
    		
    	return tfm;
    }
    
    private List transformOcorrenciasIntoMapList(List ocorrencias) {
    	List transformedOcorrencias = new ArrayList();
    	
    	for(Iterator it = ocorrencias.iterator(); it.hasNext(); ) {
    		TypedFlatMap item = new TypedFlatMap();
    		OcorrenciaNaoConformidade onc = (OcorrenciaNaoConformidade)it.next();
    		item.put("idOcorrenciaNaoConformidade", onc.getIdOcorrenciaNaoConformidade());
    		
    		StringBuffer dsOcorrencia = new StringBuffer()
									    		.append(onc.getNrOcorrenciaNc())
									    		.append(" - ")
									    		.append(onc.getDsOcorrenciaNc());
    		
    		item.put("dsOcorrenciaNc", dsOcorrencia.toString());
    		transformedOcorrencias.add(item);
    	}
    	return transformedOcorrencias;
    }
    
    public List findLookupFilial(Map criteria) {
		return filialService.findLookupFilial(criteria);
	}
    
    /*******************************************************************************************
     * Getters and Setters 
     *******************************************************************************************/
	public void setNaoConformidadeAuditoriaService(NaoConformidadeAuditoriaService naoConformidadeAuditoriaService) {
		this.defaultService = naoConformidadeAuditoriaService;
	}
	public NaoConformidadeAuditoriaService getNaoConformidadeAuditoriaService() {
		return (NaoConformidadeAuditoriaService)this.defaultService;
	}
	public void setOcorrenciaNaoConformidadeService(OcorrenciaNaoConformidadeService ocorrenciaNaoConformidadeService) {
		this.ocorrenciaNaoConformidadeService = ocorrenciaNaoConformidadeService;
	}
	public void setNaoConformidadeService(NaoConformidadeService naoConformidadeService) {
		this.naoConformidadeService = naoConformidadeService;
	}
    public void removeById(java.lang.Long id) {
        ((NaoConformidadeAuditoriaService)defaultService).removeById(id);
    }
	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	((NaoConformidadeAuditoriaService)defaultService).removeByIds(ids);
    }


	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

}
