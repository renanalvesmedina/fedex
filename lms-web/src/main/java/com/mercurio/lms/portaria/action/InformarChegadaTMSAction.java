package com.mercurio.lms.portaria.action;

import java.io.Serializable;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.map.HashedMap;
import org.apache.commons.lang.time.DateFormatUtils;
import org.joda.time.DateTime;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.portaria.model.ManifestoTMS;
import com.mercurio.lms.portaria.model.service.AcaoIntegracaoEventosService;
import com.mercurio.lms.portaria.model.service.InformarChegadaTMSService;
import com.mercurio.lms.util.JTDateTimeUtils;

/**
 * Generated by: ADSM ActionGenerator
 * 
 * Não inserir documentação após ou remover a tag do XDoclet a seguir. O valor
 * do <code>id</code> informado abaixo deve ser utilizado para referenciar este
 * serviço.
 * 
 * @spring.bean id="lms.portaria.manterManifestoTMSAction"
 */

public class InformarChegadaTMSAction extends CrudAction {
	
	private AcaoIntegracaoEventosService acaoIntegracaoEventosService;

	public void setService(InformarChegadaTMSService serviceService) {
		this.defaultService = serviceService;
	}

	public Map onPageLoad(TypedFlatMap params) {
		return getService().findFilialUsuarioLogado();
	}

	/**
	 * @return
	 */
	private InformarChegadaTMSService getService() {
		return (InformarChegadaTMSService) defaultService;
	}

	public void removeById(java.lang.Long id) {
		getService().removeById(id);
	}

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		getService().removeByIds(ids);
	}

	public Map findById(java.lang.Long id) {
		ManifestoTMS manifestoTMS = getService().findById(id);

		TypedFlatMap retorno = new TypedFlatMap();
		return retorno;
	}

	public ResultSetPage findPaginated(Map criteria) {
		return ((InformarChegadaTMSService) this.defaultService)
				.findPaginated(criteria);
	}

	public Integer getRowCount(Map criteria) {
		return ((InformarChegadaTMSService) this.defaultService)
				.getRowCount(criteria);
	}

	public List findLookupFilial(Map criteria) {
		return getService().findLookupFilial(criteria);
	}
	
	public ResultSetPage validateManifestoTMS(TypedFlatMap parameter){
		Long idFilial = parameter.getLong("idFilial");
		Long nrManifesto = parameter.getLong("nrManifesto");
		Long idManifesto = parameter.getLong("idManifesto");
		Boolean v = getService().validateQtdConhecimentos(idFilial,nrManifesto);

		if( !v ){
			throw new BusinessException("LMS-06034");
		}
		getService().storeDhChegada(idFilial, nrManifesto);
		
		/*Grava evento ação integração evento*/
		getAcaoIntegracaoEventosService().storeAcaoIntegracaoEvento("PI LMS-C022S", idManifesto);
		
		Map criteria = new HashedMap();
		criteria.put("idFilial", idFilial);
		criteria.put("_currentPage", "1");
		criteria.put("_pageSize", "100");
		return findPaginated(criteria);
	}

	public Map montaConfirmacao(TypedFlatMap parameter){
		final String LMS_06036 = "LMS-06036"; 
		Long idManifestoTMS = parameter.getLong("idManifestoTMS");
		ManifestoTMS manifestoTMS = getService().findById(idManifestoTMS);
		DateTime dhAtual = JTDateTimeUtils.getDataHoraAtual();
		
		String msg = getMessage(LMS_06036,new Object[]{null,manifestoTMS.getDsVeiculo(),formatDate(dhAtual)});

		Map result = new HashMap<String, Object>();
		result.put("msg", LMS_06036 + " - " + msg);
		result.put("idFilial", manifestoTMS.getFilialManifesto().getIdFilial());
		result.put("nrManifesto", manifestoTMS.getNrManifesto());
		result.put("idManifesto", manifestoTMS.getIdManifestoTMS());
		return result;
	}
	
	private String formatDate(DateTime data) {
		if(data != null) {
			return DateFormatUtils.format(data.toDate(),"dd/MM/yyyy HH:mm");
		} else {
			return "";
		}
	}

	public Serializable store(TypedFlatMap beanMap) {
		//metodo Não utilizado pela classe
		return null;
	}

	public AcaoIntegracaoEventosService getAcaoIntegracaoEventosService() {
		return acaoIntegracaoEventosService;
	}

	public void setAcaoIntegracaoEventosService(
			AcaoIntegracaoEventosService acaoIntegracaoEventosService) {
		this.acaoIntegracaoEventosService = acaoIntegracaoEventosService;
	}

}
