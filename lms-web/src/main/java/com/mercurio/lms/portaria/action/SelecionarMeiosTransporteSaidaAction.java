package com.mercurio.lms.portaria.action;

import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.util.FilterList;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.portaria.model.service.InformarSaidaService;
import com.mercurio.lms.portaria.model.service.PortariaService;
import com.mercurio.lms.util.session.SessionUtils;


/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.portaria.selecionarMeiosTransporteSaidaAction"
 */

public class SelecionarMeiosTransporteSaidaAction extends CrudAction {
	
	private InformarSaidaService informarSaidaService;
	private PortariaService portariaService;
	private FilialService filialService;
	
	public TypedFlatMap findFilialSessao(){
		
		TypedFlatMap retorno  = new TypedFlatMap();
		Filial filial = SessionUtils.getFilialSessao();
		
		retorno.put("idFilial", filial.getIdFilial());
		retorno.put("sgFilial", filial.getSgFilial());
		retorno.put("pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
		
		return retorno;
	}
	
    public List findLookupFilial(Map map) {
    	FilterList filter = new FilterList(filialService.findLookup(map)) {
			public Map filterItem(Object item) {
				Filial filial = (Filial)item;
    			TypedFlatMap typedFlatMap = new TypedFlatMap();
	    		typedFlatMap.put("idFilial", filial.getIdFilial());
		    	typedFlatMap.put("sgFilial",  filial.getSgFilial());
		    	typedFlatMap.put("pessoa.nmFantasia",  filial.getPessoa().getNmFantasia());
				return typedFlatMap;
			}
    	};
    	return (List)filter.doFilter();
    }
	   
    
	/**
	 * Verifica se existem manifestos não disponíveis para dar saída, vinculados ao Controle de. (LMS-697)
	 * @return boolean
	 */
    public boolean validaManifestoETransito(TypedFlatMap parametros) {
		return getInformarSaidaService().validateManifestoETransito(parametros);
	}
    
	public List findFilial(Map parametros){
		return filialService.findComboByUsuarioLogado();
	}
	
	public List findPortaria(TypedFlatMap parametros){
		return getPortariaService().findByFilial(parametros.getLong("idFilial"));
	}
	
	public List findGridViagem(TypedFlatMap parametros){
		return getInformarSaidaService().findGridViagem(parametros.getLong("idFilial"));
	}

	public List findGridColetaEntrega(TypedFlatMap parametros){
		return getInformarSaidaService().findGridColetaEntrega(parametros.getLong("idFilial"), parametros.getLong("idPortaria"));
	}
	
	/** 
	 * @return Returns the informarSaidaService.
	 */
	public InformarSaidaService getInformarSaidaService() {
		return informarSaidaService;
	}

	/**
	 * @param informarSaidaService The informarSaidaService to set.
	 */
	public void setInformarSaidaService(InformarSaidaService informarSaidaService) {
		this.informarSaidaService = informarSaidaService;
	}

	/**
	 * @return Returns the portariaService.
	 */
	public PortariaService getPortariaService() {
		return portariaService;
	}

	/**
	 * @param portariaService The portariaService to set.
	 */
	public void setPortariaService(PortariaService portariaService) {
		this.portariaService = portariaService;
	}

	public FilialService getFilialService() {
		return filialService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

}
