package com.mercurio.lms.portaria.action;

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.portaria.model.Terminal;
import com.mercurio.lms.portaria.model.service.BoxService;
import com.mercurio.lms.portaria.model.service.DocaService;
import com.mercurio.lms.portaria.model.service.TerminalService;
import com.mercurio.lms.util.JTVigenciaUtils;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.portaria.manterTerminaisAction"
 */

public class ManterTerminaisAction extends CrudAction {
	
	private FilialService filialService;
	private DocaService docaService;
	private BoxService boxService;
	
	public void setService(TerminalService serviceService) {
		this.defaultService = serviceService;
	}
    public void removeById(java.lang.Long id) {
        ((TerminalService)defaultService).removeById(id);
    }

    public TypedFlatMap store(TypedFlatMap beanMap) {
		Filial filial = new Filial();
			   filial.setIdFilial(beanMap.getLong("filial.idFilial"));
		Pessoa pessoa = new Pessoa();
			   pessoa.setIdPessoa(beanMap.getLong("pessoa.idPessoa"));
			   pessoa.setNmPessoa(beanMap.getString("pessoa.nmPessoa"));
		Terminal bean = new Terminal();
				 bean.setObTerminal(beanMap.getString("obTerminal"));
				 bean.setDtVigenciaInicial(beanMap.getYearMonthDay("dtVigenciaInicial"));
				 bean.setDtVigenciaFinal(beanMap.getYearMonthDay("dtVigenciaFinal"));
				 bean.setNrAreaTotal(beanMap.getBigDecimal("nrAreaTotal"));
				 bean.setNrAreaArmazenagem(beanMap.getBigDecimal("nrAreaArmazenagem"));
				 bean.setPessoa(pessoa);
				 bean.setFilial(filial);
				 bean.setIdTerminal(beanMap.getLong("idTerminal"));
		bean = ((TerminalService)defaultService).store(bean);
		TypedFlatMap result = new TypedFlatMap();
					 result.put("pessoa.idPessoa",bean.getPessoa().getIdPessoa());
			         result.put("idTerminal",bean.getIdTerminal());
			         result.put("dtVigenciaInicial",bean.getDtVigenciaInicial());
			         result.put("acaoVigenciaAtual",JTVigenciaUtils.getIntegerAcaoVigencia(bean));
       return result;
    }
	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	((TerminalService)defaultService).removeByIds(ids);
    }

    public TypedFlatMap findById(java.lang.Long id) {
    	List rs = ((TerminalService)defaultService).findByIdView(id);
    	TypedFlatMap result = new TypedFlatMap();
    	if (rs.size() > 0) {
	    	Map resultFind = (Map)rs.get(0);
			for(Iterator ie = resultFind.keySet().iterator(); ie.hasNext();) {
				Object key = ie.next();
				result.put(key.toString().replace('_','.'),resultFind.get(key));
			}

			result.put("acaoVigenciaAtual",JTVigenciaUtils.getIntegerAcaoVigencia(result.getYearMonthDay("dtVigenciaInicial"),result.getYearMonthDay("dtVigenciaFinal")));
			result.put("nrDocas",docaService.getRowCountDocasVigenteByTerminal(id));
			result.put("nrBoxes",boxService.getRowCountBoxesVigenteByTerminal(id));
			result.put("dtVigenciaInicialDetalhe",result.get("dtVigenciaInicial"));
    	}
    	return result;
    }
    
    public TypedFlatMap findFilialUsuarioLogado() {
    	Filial f = ((TerminalService)this.defaultService).findFilialUsuarioLogado();
    	TypedFlatMap result = new TypedFlatMap();
    	result.put("idFilial",f.getIdFilial());
    	result.put("sgFilial",f.getSgFilial());
    	result.put("pessoa.nmFantasia",f.getPessoa().getNmFantasia());
    	return result;
    }
    public ResultSetPage findPaginated(TypedFlatMap criteria) {
    	return ((TerminalService)this.defaultService).findPaginated(criteria);
    }
    public Integer getRowCount(TypedFlatMap criteria) {
    	return ((TerminalService)this.defaultService).getRowCount(criteria);
    }

	public List findLookupFilial(TypedFlatMap criteria) {
		Map empresa = null;
		if (!StringUtils.isBlank(criteria.getString("empresa.tpEmpresa"))) {
			empresa = new HashMap();
			empresa.put("tpEmpresa",criteria.getString("empresa.tpEmpresa"));
		}
		Map criteria2 = new HashMap();
			criteria2.put("sgFilial",criteria.getString("sgFilial"));
			criteria2.put("empresa",empresa);
			
		return filialService.findLookupFilial(criteria2);
	}
	public FilialService getFilialService() {
		return filialService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public DocaService getDocaService() {
		return docaService;
	}
	public void setDocaService(DocaService docaService) {
		this.docaService = docaService;
	}
	public BoxService getBoxService() {
		return boxService;
	}
	public void setBoxService(BoxService boxService) {
		this.boxService = boxService;
	}
}
