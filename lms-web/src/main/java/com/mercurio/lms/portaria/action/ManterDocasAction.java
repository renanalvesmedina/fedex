package com.mercurio.lms.portaria.action;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.FilterResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.portaria.model.Doca;
import com.mercurio.lms.portaria.model.Terminal;
import com.mercurio.lms.portaria.model.service.DocaService;
import com.mercurio.lms.portaria.model.service.TerminalService;
import com.mercurio.lms.util.session.SessionUtils;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.portaria.manterDocasAction"
 */

public class ManterDocasAction extends CrudAction {

	private TerminalService terminalService;
	private FilialService filialService;
	
	
	public void setService(DocaService docaService) {
		this.defaultService = docaService;
	}
	
	
	public List findTerminal(TypedFlatMap criteria){
		if (criteria.getLong("idTerminal") != null){
			List result = getTerminalService().findTerminalVigenteByFilial(criteria.getLong("idFilial"), criteria.getLong("idTerminal"));
			return result;
		}
		return getTerminalService().findTerminalVigenteByFilial(criteria.getLong("idFilial"));
	}

	public List findTerminalTodos(TypedFlatMap criteria){
		return getTerminalService().findCombo(criteria);
	}
	
	public List findFilial(Map criteria){
		return getFilialService().findLookup(criteria);
	}
	
	public Map findByIdDetalhamento(Long id){
		return ((DocaService)(this.defaultService)).findByIdDetalhamento(id);
	}
	
	public TypedFlatMap findFilialUsuarioLogado(){
		Filial f = SessionUtils.getFilialSessao();
		TypedFlatMap retorno = new TypedFlatMap();
		retorno.put("idFilial", f.getIdFilial());
		retorno.put("sgFilial", f.getSgFilial());
		retorno.put("nmFantasia", f.getPessoa().getNmFantasia());
		
		return retorno; 
		
	}
	
	public Serializable store(Doca bean) {
		return ((DocaService) this.defaultService).store(bean); 
	}
	
	public Map storeMap(TypedFlatMap map) {
		return ((DocaService) this.defaultService).storeMap(map); 
	}
	
	public Doca findById(Long id) {
		return ((DocaService) this.defaultService).findById(id); 
	}

	
	public void removeById(Long id) {
		((DocaService) this.defaultService).removeById(id); 
	}
	
	public ResultSetPage findPaginated(Map criteria) {
		ResultSetPage rsp = this.defaultService.findPaginated(criteria);
		
		FilterResultSetPage frsp = new FilterResultSetPage(rsp) {

			public Map filterItem(Object item) {
				Doca doca = (Doca) item;
				TypedFlatMap row = new TypedFlatMap();
				
				row.put("idDoca", doca.getIdDoca()); 
				
				Terminal terminal = doca.getTerminal();
				row.put("terminal.filial.sgFilial", terminal.getFilial().getSgFilial());
				row.put("terminal.pessoa.nmPessoa", terminal.getPessoa().getNmPessoa());
				
				row.put("nrDoca", doca.getNrDoca());
				row.put("dsDoca", doca.getDsDoca());
				row.put("tpSituacaoDoca", doca.getTpSituacaoDoca());
				row.put("dtVigenciaInicial", doca.getDtVigenciaInicial());
				row.put("dtVigenciaFinal", doca.getDtVigenciaFinal());				
								
				return row;
			}
			
		};
		
		return (ResultSetPage)frsp.doFilter();
	
	}
	
	/**
	 * Apaga várias entidades através do Id.
	 *
	 * @param ids lista com as entidades que deverão ser removida.
	 *
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		((DocaService) this.defaultService).removeByIds(ids);	
	}

	/**
	 * @return Returns the terminalService.
	 */
	public TerminalService getTerminalService() {
		return terminalService;
	}


	/**
	 * @param terminalService The terminalService to set.
	 */
	public void setTerminalService(TerminalService terminalService) {
		this.terminalService = terminalService;
	}


	/**
	 * @return Returns the filialService.
	 */
	public FilialService getFilialService() {
		return filialService;
	}


	/**
	 * @param filialService The filialService to set.
	 */
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
}
