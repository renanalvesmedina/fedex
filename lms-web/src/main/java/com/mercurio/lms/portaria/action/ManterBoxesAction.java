package com.mercurio.lms.portaria.action;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.FilterResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.pendencia.model.service.ModuloService;
import com.mercurio.lms.portaria.model.Box;
import com.mercurio.lms.portaria.model.service.BoxService;
import com.mercurio.lms.portaria.model.service.DocaService;
import com.mercurio.lms.portaria.model.service.TerminalService;
import com.mercurio.lms.util.session.SessionUtils;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;


/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.portaria.manterBoxesAction"
 */

public class ManterBoxesAction extends CrudAction {
	
	private TerminalService terminalService;
	private FilialService filialService;
	private DocaService docaService;
	private ModuloService moduloService;
	
	public void setService(BoxService boxService) {
		this.defaultService = boxService;
	}

	public List findTerminal(TypedFlatMap criteria){
		if (criteria.getLong("idTerminal") != null){
			List result = getTerminalService().findTerminalVigenteByFilial(criteria.getLong("idFilial"), criteria.getLong("idTerminal"));
			return result;
		}
		return getTerminalService().findTerminalVigenteByFilial(criteria.getLong("idFilial"));
	}
	
	public List findTerminalTodos(TypedFlatMap criteria){
		return getTerminalService().findCombo(criteria);
	}

	public List findDoca(TypedFlatMap criteria){
		if (criteria.getLong("idDoca") != null)
			return getDocaService().findDocaVigenteByTerminal(criteria.getLong("idTerminal"), criteria.getLong("idDoca"));
		return getDocaService().findDocaVigenteByTerminal(criteria.getLong("idTerminal"));
	}
	
	public List findDocaTodos(TypedFlatMap criteria){
		return getDocaService().find(criteria);
	}
	
	public List findFilial(Map criteria){
		return getFilialService().findLookupFilial(criteria);
	}
	
	public List findModulo(TypedFlatMap criteria){
		criteria.put("tpSituacao", "A"); 
		return getModuloService().find(criteria);
	}
	
	public TypedFlatMap findFilialUsuarioLogado(){
		Filial f = SessionUtils.getFilialSessao();
		TypedFlatMap retorno = new TypedFlatMap();
		retorno.put("idFilial", f.getIdFilial());
		retorno.put("sgFilial", f.getSgFilial());
		retorno.put("nmFantasia", f.getPessoa().getNmFantasia());
		
		return retorno; 
		
	}
		
	public Serializable store(Box bean) {
		return ((BoxService) this.defaultService).store(bean); 
	}
	
	public Map storeMap(TypedFlatMap map) {
		return ((BoxService) this.defaultService).storeMap(map); 
	}
	
	public Map findById(Long id) {
		return ((BoxService) this.defaultService).findByIdDetalhamento(id); 
	}
	
	public void removeById(Long id) {
		((BoxService) this.defaultService).removeById(id); 
	}
	
	public ResultSetPage findPaginated(Map criteria) {
		ResultSetPage rsp = this.defaultService.findPaginated(criteria);
		
		FilterResultSetPage frsp = new FilterResultSetPage(rsp) {

			public Map filterItem(Object item) {
				Box box = (Box) item;
				TypedFlatMap row = new TypedFlatMap();
				
				row.put("idBox", box.getIdBox());
				row.put("doca.terminal.filial.sgFilial", box.getDoca().getTerminal().getFilial().getSgFilial());
				row.put("doca.terminal.pessoa.nmPessoa", box.getDoca().getTerminal().getPessoa().getNmPessoa());
				row.put("doca.numeroDescricaoDoca", box.getDoca().getNumeroDescricaoDoca());
				row.put("nrBox", box.getNrBox());
				row.put("dsBox", box.getDsBox());
				row.put("tpSituacaoBox", box.getTpSituacaoBox());
				row.put("dtVigenciaInicial", box.getDtVigenciaInicial());
				row.put("dtVigenciaFinal", box.getDtVigenciaFinal());
								
				return row;
			}			
		};
		
		return (ResultSetPage)frsp.doFilter();			
	
	}
	/**
	 * Apaga várias entidades através do Id.
	 *
	 * @param ids lista com as entidades que deverão ser removida.
	 *
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		((BoxService) this.defaultService).removeByIds(ids); 
	}
	
	/**
	 * @return Returns the terminalService.
	 */
	public TerminalService getTerminalService() {
		return terminalService;
	}

	/**
	 * @param terminalService The terminalService to set.
	 */
	public void setTerminalService(TerminalService terminalService) {
		this.terminalService = terminalService;
	}

	/**
	 * @return Returns the filialService.
	 */
	public FilialService getFilialService() {
		return filialService;
	}

	/**
	 * @param filialService The filialService to set.
	 */
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	/**
	 * @return Returns the docaService.
	 */
	public DocaService getDocaService() {
		return docaService;
	}

	/**
	 * @param docaService The docaService to set.
	 */
	public void setDocaService(DocaService docaService) {
		this.docaService = docaService;
	}

	/**
	 * @return Returns the moduloService.
	 */
	public ModuloService getModuloService() {
		return moduloService;
	}

	/**
	 * @param moduloService The moduloService to set.
	 */
	public void setModuloService(ModuloService moduloService) {
		this.moduloService = moduloService;
	}
	
}
