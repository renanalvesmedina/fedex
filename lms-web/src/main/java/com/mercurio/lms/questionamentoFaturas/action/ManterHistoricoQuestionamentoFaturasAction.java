package com.mercurio.lms.questionamentoFaturas.action;

import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.mercurio.adsm.framework.model.FindDefinition;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.lms.questionamentoFaturas.model.service.HistoricoQuestionamentoFaturasService;
import com.mercurio.lms.questionamentoFaturas.model.service.QuestionamentoFaturasService;
import com.mercurio.lms.questionamentofaturas.model.HistoricoQuestionamentoFatura;
import com.mercurio.lms.questionamentofaturas.model.QuestionamentoFatura;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.questionamentoFaturas.manterHistoricoQuestionamentoFaturasAction"
 * @author Moacir Zardo Junior
 */

public class ManterHistoricoQuestionamentoFaturasAction {
	private HistoricoQuestionamentoFaturasService historicoQuestionamentoFaturasService;
	private QuestionamentoFaturasService questionamentoFaturasService;
	
    public HistoricoQuestionamentoFatura findById(Long id) {
    	return historicoQuestionamentoFaturasService.findById(id);
    }
    
    public Map<String, Object> findQuestionamentoFaturaById(Long id) {
    	Map<String, Object> mapRetorno = new HashMap<String, Object>(); 
    	QuestionamentoFatura questionamentoFatura = questionamentoFaturasService.findByIdBasic(id);
    	String unidSigla;
    	
    	if (questionamentoFatura.getTpDocumento().getValue().equals("R")){
    		
    		unidSigla = questionamentoFatura.getFatura().getFilialByIdFilial().getSgFilial();
    		mapRetorno.put("numero", questionamentoFatura.getFatura().getNrFatura());
    	} else {
    		unidSigla = questionamentoFatura.getDoctoServico().getFilialByIdFilialOrigem().getSgFilial();
    		mapRetorno.put("numero", questionamentoFatura.getDoctoServico().getNrDoctoServico());
    	}
    	mapRetorno.put("tpDocumento", questionamentoFatura.getTpDocumento().getValue());
    	mapRetorno.put("unidSigla", unidSigla);
    	
    	return mapRetorno;
    }

    public ResultSetPage<Map<String, Object>> findPaginatedHistoricoQuestionamentoFaturas(Map<String, Object> criteria) {
    	    	
    	String strIdQuestionamentoFatura = (String)criteria.get("idQuestionamentoFatura");
    	Long idQuestionamentoFatura = null;
    	if (StringUtils.isNotBlank(strIdQuestionamentoFatura) && StringUtils.isNumeric(strIdQuestionamentoFatura)){
    		idQuestionamentoFatura = Long.valueOf(strIdQuestionamentoFatura);
    	}
    	FindDefinition findDefinition = FindDefinition.createFindDefinition(criteria);
		return historicoQuestionamentoFaturasService.findPaginatedHistoricoQuestionamentoFaturas(idQuestionamentoFatura, findDefinition);
	}

    public Integer getRowCount(Map criteria){
    	return historicoQuestionamentoFaturasService.getRowCount(criteria);
    }

	public void setHistoricoQuestionamentoFaturasService(HistoricoQuestionamentoFaturasService historicoQuestionamentoFaturasService) {
		this.historicoQuestionamentoFaturasService = historicoQuestionamentoFaturasService;
	}

	public void setQuestionamentoFaturasService(
			QuestionamentoFaturasService questionamentoFaturasService) {
		this.questionamentoFaturasService = questionamentoFaturasService;
	}
	
}