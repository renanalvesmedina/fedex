 package com.mercurio.lms.carregamento.action;

import java.io.Serializable;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mercurio.adsm.core.util.ReflectionUtils;
import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.masterdetail.ItemList;
import com.mercurio.adsm.framework.model.masterdetail.ItemListConfig;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailAction;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailFactory;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailKey;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntry;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntryConfig;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.CarregamentoDescarga;
import com.mercurio.lms.carregamento.model.DispCarregDescQtde;
import com.mercurio.lms.carregamento.model.DispCarregIdentificado;
import com.mercurio.lms.carregamento.model.DispositivoUnitizacao;
import com.mercurio.lms.carregamento.model.EquipeOperacao;
import com.mercurio.lms.carregamento.model.TipoDispositivoUnitizacao;
import com.mercurio.lms.carregamento.model.service.CarregamentoDescargaService;
import com.mercurio.lms.carregamento.model.service.ControleCargaService;
import com.mercurio.lms.carregamento.model.service.DispCarregDescQtdeService;
import com.mercurio.lms.carregamento.model.service.DispCarregIdentificadoService;
import com.mercurio.lms.carregamento.model.service.DispositivoUnitizacaoService;
import com.mercurio.lms.carregamento.model.service.IntegranteEqOperacService;
import com.mercurio.lms.carregamento.model.service.TipoDispositivoUnitizacaoService;
import com.mercurio.lms.configuracoes.model.service.FuncionarioService;
import com.mercurio.lms.municipios.model.Empresa;
import com.mercurio.lms.municipios.model.service.EmpresaService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.session.SessionUtils;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;

/**
 * Generated by: ADSM ActionGenerator
 * 
 * Não inserir documentação após ou remover a tag do XDoclet a seguir. O valor
 * do <code>id</code> informado abaixo deve ser utilizado para referenciar
 * este serviço.
 * 
 * @spring.bean id="lms.carregamento.finalizarCarregamentoPreManifestosAction"
 */

public class FinalizarCarregamentoPreManifestosAction extends MasterDetailAction {
	
	private IntegranteEqOperacService integranteEqOperacService;
	private ControleCargaService controleCargaService;
	private FuncionarioService funcionarioService;
	private EmpresaService empresaService;
	private TipoDispositivoUnitizacaoService tipoDispositivoUnitizacaoService;
	private DispositivoUnitizacaoService dispositivoUnitizacaoService;
	private DispCarregIdentificadoService dispCarregIdentificadoService;
	private DispCarregDescQtdeService dispCarregDescQtdeService;
	
	/**
	 * Busca a Service default desta Action
	 * 
	 * @param carregamentoDescargaService
	 */
	public CarregamentoDescargaService getCarregamentoDescargaService() {
		return (CarregamentoDescargaService) super.getMasterService();
	}	
	
	public void setCarregamentoDescargaService(CarregamentoDescargaService carregamentoDescargaService) {
		this.setMasterService(carregamentoDescargaService);
	}

	public ControleCargaService getControleCargaService() {
		return controleCargaService;
	}

	public void setControleCargaService(ControleCargaService controleCargaService) {
		this.controleCargaService = controleCargaService;
	}

	public EmpresaService getEmpresaService() {
		return empresaService;
	}

	public void setEmpresaService(EmpresaService empresaService) {
		this.empresaService = empresaService;
	}

	public FuncionarioService getFuncionarioService() {
		return funcionarioService;
	}

	public void setFuncionarioService(FuncionarioService funcionarioService) {
		this.funcionarioService = funcionarioService;
	}

	public IntegranteEqOperacService getIntegranteEqOperacService() {
		return integranteEqOperacService;
	}

	public void setIntegranteEqOperacService(IntegranteEqOperacService integranteEqOperacService) {
		this.integranteEqOperacService = integranteEqOperacService;
	}
	
	public TipoDispositivoUnitizacaoService getTipoDispositivoUnitizacaoService() {
		return tipoDispositivoUnitizacaoService;
	}

	public void setTipoDispositivoUnitizacaoService(
			TipoDispositivoUnitizacaoService tipoDispositivoUnitizacaoService) {
		this.tipoDispositivoUnitizacaoService = tipoDispositivoUnitizacaoService;
	}

	public DispositivoUnitizacaoService getDispositivoUnitizacaoService() {
		return dispositivoUnitizacaoService;
	}

	public void setDispositivoUnitizacaoService(DispositivoUnitizacaoService dispositivoUnitizacaoService) {
		this.dispositivoUnitizacaoService = dispositivoUnitizacaoService;
	}
	
	public List findEmpresas(Map criteria){
		
		return this.getEmpresaService().findLookup(criteria);
	}
	
	public List findTipoDispositivo(Map criteria) {
		criteria.put("tpControleDispositivo", "Q");
		return this.getTipoDispositivoUnitizacaoService().findTipoDispositivoOrdenado(criteria);
	}
	
	public List findTipoDispositivoIdentificacao(Map criteria) {
		criteria.put("tpControleDispositivo", "I");
		return this.getTipoDispositivoUnitizacaoService().findTipoDispositivoOrdenado(criteria);
	}
	
	public List findDispositivoUnitizacao(Map criteria){
		return this.getDispositivoUnitizacaoService().findLookup(criteria);
	}
	
	public DispCarregDescQtdeService getDispCarregDescQtdeService() {
		return dispCarregDescQtdeService;
	}

	public void setDispCarregDescQtdeService(
			DispCarregDescQtdeService dispCarregDescQtdeService) {
		this.dispCarregDescQtdeService = dispCarregDescQtdeService;
	}

	public DispCarregIdentificadoService getDispCarregIdentificadoService() {
		return dispCarregIdentificadoService;
	}

	public void setDispCarregIdentificadoService(
			DispCarregIdentificadoService dispCarregIdentificadoService) {
		this.dispCarregIdentificadoService = dispCarregIdentificadoService;
	}
	
	//###############################
	// Metodos de negocio
	//###############################
	
	/**
	 * Retorna os dados de empresa do usuario logado.
	 */
	public TypedFlatMap findBasicDataUsuario() {
		TypedFlatMap typedFlatMap = new TypedFlatMap();
		Empresa empresa = SessionUtils.getEmpresaSessao();
		
		typedFlatMap.put("idEmpresa", empresa.getIdEmpresa());
		typedFlatMap.put("nrIdentificacao", FormatUtils.formatIdentificacao(empresa.getPessoa().getTpIdentificacao(), empresa.getPessoa().getNrIdentificacao()));
		typedFlatMap.put("nmPessoa", empresa.getPessoa().getNmPessoa());
		typedFlatMap.put("tpIdentificacao", empresa.getPessoa().getTpIdentificacao().getValue());
		
		return typedFlatMap;
	}

	/**
	 * Chama a service de carregamentoDescarga para finalizar o carregamento de um
	 * determinado manifesto.
	 * 
	 * @param TypedFlatMap bean
	 * @return
	 */
	public void storeFinalizarCarregamentoPreManifesto(TypedFlatMap criteria) {
		MasterEntry entry = getMasterFromSession(criteria.getLong(""), true);
    	ItemList itemsSemIdentificacao = getItemsFromSession(entry, "dispositivosSemIdentificacao");
    	ItemListConfig itemsSemIdentificacaoConfig = getMasterConfig().getItemListConfig("dispositivosSemIdentificacao");
    	ItemList itemsComIdentificacao = getItemsFromSession(entry, "dispositivosComIdentificacao");
    	ItemListConfig itemsComIdentificacaoConfig = getMasterConfig().getItemListConfig("dispositivosComIdentificacao");

    	this.getCarregamentoDescargaService().storeFinalizarCarregamentoPreManifesto(criteria, itemsSemIdentificacao, itemsSemIdentificacaoConfig, itemsComIdentificacao, itemsComIdentificacaoConfig);
    	// FIXME: verificar se o ItemList não precisa ser resetado, por padrão toda a DF2
    	// deve ter esse comportamento (ItemList.resetItemsState())
    	updateMasterInSession(entry);
	}
	
	/***
     * Remoção de um conjunto de registros Master.
     * 
     * @param ids
     * 
	 *
     */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIdsDispositivosSemIdentificacao(List ids) {
    	super.removeItemByIds(ids, "dispositivosSemIdentificacao");
    }
    
    /***
     * Remoção de um conjunto de registros Master.
     * 
     * @param ids
     * 
	 *
     */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIdsDispositivosComIdentificacao(List ids) {
    	super.removeItemByIds(ids, "dispositivosComIdentificacao");
    }
    
    /**
     * Salva um item na sessão.
     * 
     * @param bean
     * @return
     */
    public Serializable saveDispositivosSemIdentificacao(TypedFlatMap parameters) {
    	
    	MasterEntry entry = getMasterFromSession(parameters.getLong(""), true);
    	ItemList itemsSemIdentificacao = getItemsFromSession(entry, "dispositivosSemIdentificacao");
    	ItemListConfig itensSemIdentificacaoConfig = getMasterConfig().getItemListConfig("dispositivosSemIdentificacao");
    	
    	if (parameters.getLong("idDispCarregDescQtde")==null) {
	    	for (Iterator iter = itemsSemIdentificacao.iterator(null, itensSemIdentificacaoConfig); iter.hasNext();) {
	    		DispCarregDescQtde dispCarregDescQtde = (DispCarregDescQtde) iter.next();
				
	    		//Verifica se o objeto a ser validade ja existe na grid...
	    		if ((dispCarregDescQtde.getTipoDispositivoUnitizacao().getIdTipoDispositivoUnitizacao().equals(parameters.getLong("tipoDispositivoUnitizacao.idTipoDispositivoUnitizacao"))) &&
	    			(dispCarregDescQtde.getEmpresa().getIdEmpresa().equals(parameters.getLong("empresa.idEmpresa")))) {
	    			throw new BusinessException("LMS-05021");
	    		}
			}
    	}
    	
    	return saveItemInstance(parameters, "dispositivosSemIdentificacao");
    }
    
    /**
     * Salva um item na sessão.
     * 
     * @param bean
     * @return
     */
    public Serializable saveDispositivosComIdentificacao(TypedFlatMap parameters) {
    	
    	MasterEntry entry = getMasterFromSession(parameters.getLong("masterId"), true);
    	ItemList itemsComIdentificacao = getItemsFromSession(entry, "dispositivosComIdentificacao");
    	
    	ItemListConfig itensComIdentificacaoCofnig = getMasterConfig().getItemListConfig("dispositivosComIdentificacao");
    	
    	if (parameters.getLong("idDispCarregIdentificado")==null) {
	    	for (Iterator iter = itemsComIdentificacao.iterator(null, itensComIdentificacaoCofnig); iter.hasNext();) {
	    		DispCarregIdentificado dispCarregIdentificado = (DispCarregIdentificado) iter.next();
				
	    		//Verifica se o objeto a ser validade ja existe na grid...
	    		if (dispCarregIdentificado.getDispositivoUnitizacao().getIdDispositivoUnitizacao()
	    				.equals(parameters.getLong("dispositivoUnitizacao.idDispositivoUnitizacao"))){ 
	    			throw new BusinessException("LMS-05022");
	    		}
			}
    	}
    	
    	return saveItemInstance(parameters, "dispositivosComIdentificacao");
    }
   
    /**
     * Faz o findPaginated do filho
     * Possui uma chamada 'interna' para o findPaginated(initialize) 
     * contido dentro do 'createMasterConfig'
     * 
     * @param parameters
     * @return
     */
    public ResultSetPage findPaginatedDispositivosSemIdentificacao(Map parameters) {
    	parameters.put("masterId", null);
    	ResultSetPage result = findPaginatedItemList(parameters, "dispositivosSemIdentificacao");
    	return result;
    }
    
    public ResultSetPage findPaginatedDispositivosComIdentificacao(Map parameters) {
    	parameters.put("masterId", null);
    	ResultSetPage result = findPaginatedItemList(parameters, "dispositivosComIdentificacao");
    	return result;
    }

    /**
     * Faz o getRowCount do filho
     * Possui uma chamada 'interna' para o getRowCount contido dentro 
     * do 'createMasterConfig'
     * 
     * @param parameters
     * @return
     */
    public Integer getRowCountDispositivosSemIdentificacao(Map parameters){
    	parameters.put("masterId", null);
    	return getRowCountItemList(parameters, "dispositivosSemIdentificacao");
    }
    
    public Integer getRowCountDispositivosComIdentificacao(Map parameters){
    	parameters.put("masterId", null);
    	return getRowCountItemList(parameters, "dispositivosComIdentificacao");
    }
    
    /**
     * Busca o objeto para popular os dados do form.
     * 
     * @param key
     * @return
     */
    public Object findByIdDispositivosSemIdentificacao(MasterDetailKey key) {
    	DispCarregDescQtde	 dispCarregDescQtde = (DispCarregDescQtde)findItemById(key, "dispositivosSemIdentificacao");

		TypedFlatMap dispCarregDescQtdeMap = new TypedFlatMap();
		
		dispCarregDescQtdeMap.put("idDispCarregDescQtde", dispCarregDescQtde.getIdDispCarregDescQtde());
		dispCarregDescQtdeMap.put("tipoDispositivoUnitizacao.idTipoDispositivoUnitizacao", dispCarregDescQtde.getTipoDispositivoUnitizacao().getIdTipoDispositivoUnitizacao());
		dispCarregDescQtdeMap.put("empresa.idEmpresa", dispCarregDescQtde.getEmpresa().getIdEmpresa());
		dispCarregDescQtdeMap.put("empresa.pessoa.nrIdentificacao", FormatUtils.formatIdentificacao(dispCarregDescQtde.getEmpresa().getPessoa()));
		dispCarregDescQtdeMap.put("empresa.pessoa.nmPessoa", dispCarregDescQtde.getEmpresa().getPessoa().getNmPessoa());
		dispCarregDescQtdeMap.put("empresa.pessoa.tpIdentificacao.value", dispCarregDescQtde.getEmpresa().getPessoa().getTpIdentificacao().getValue());
		dispCarregDescQtdeMap.put("qtDispositivo", dispCarregDescQtde.getQtDispositivo());
    	
    	return dispCarregDescQtdeMap;
    }
    
    /**
     * Busca o objeto para popular os dados do form.
     * 
     * @param key
     * @return
     */
    public Object findByIdDispositivosComIdentificacao(MasterDetailKey key) {
    	DispCarregIdentificado	 dispCarregIdentificado = (DispCarregIdentificado)findItemById(key, "dispositivosComIdentificacao");

    	TypedFlatMap dispCarregIdentificadoMap = new TypedFlatMap();
		
    	dispCarregIdentificadoMap.put("idDispCarregIdentificado", dispCarregIdentificado.getIdDispCarregIdentificado());
		dispCarregIdentificadoMap.put("tipoDispositivoUnitizacao.idTipoDispositivoUnitizacao", dispCarregIdentificado.getDispositivoUnitizacao().getTipoDispositivoUnitizacao().getIdTipoDispositivoUnitizacao());
		dispCarregIdentificadoMap.put("empresa.idEmpresa", dispCarregIdentificado.getDispositivoUnitizacao().getEmpresa().getIdEmpresa());
		dispCarregIdentificadoMap.put("empresa.pessoa.nrIdentificacao", FormatUtils.formatIdentificacao(dispCarregIdentificado.getDispositivoUnitizacao().getEmpresa().getPessoa()));
		dispCarregIdentificadoMap.put("empresa.pessoa.tpIdentificacao.value", dispCarregIdentificado.getDispositivoUnitizacao().getEmpresa().getPessoa().getTpIdentificacao().getValue());
		dispCarregIdentificadoMap.put("empresa.pessoa.nmPessoa", dispCarregIdentificado.getDispositivoUnitizacao().getEmpresa().getPessoa().getNmPessoa());
		
		dispCarregIdentificadoMap.put("dispositivoUnitizacao.idDispositivoUnitizacao", dispCarregIdentificado.getDispositivoUnitizacao().getIdDispositivoUnitizacao());
		dispCarregIdentificadoMap.put("dispositivoUnitizacao.nrIdentificacao", dispCarregIdentificado.getDispositivoUnitizacao().getNrIdentificacao());
		
    	return dispCarregIdentificadoMap;
    }
    
    /***
     * Remove uma lista de registros items.
     *  
     * @param ids ids dos registros item a serem removidos.
     * 
	 *
     */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIdsIntegranteEquipe(List ids) {
    	super.removeItemByIds(ids, "integrantes");
    }

    
    //####################################
    // Dados da DF2
    //####################################
    
	protected MasterEntryConfig createMasterConfig(MasterDetailFactory masterFactory) { 
		
		//Declaracao da classe pai
		MasterEntryConfig config = masterFactory.createMasterEntryConfig(EquipeOperacao.class);
		
    	Comparator dispositivosSemComparator = new Comparator() {
			public int compare(Object obj1, Object obj2) {
				DispCarregDescQtde dispCarregDescQtde1 = (DispCarregDescQtde)obj1;
				DispCarregDescQtde dispCarregDescQtde2 = (DispCarregDescQtde)obj2;
        		return dispCarregDescQtde1.getTipoDispositivoUnitizacao().getTpControleDispositivo().getValue()
        			.compareTo(dispCarregDescQtde2.getTipoDispositivoUnitizacao().getTpControleDispositivo().getValue());  		
			}    		
    	};
    	
    	Comparator dispositivosComComparator = new Comparator() {
			public int compare(Object obj1, Object obj2) {
				DispCarregIdentificado dispCarregIdentificado1 = (DispCarregIdentificado)obj1;
				DispCarregIdentificado dispCarregIdentificado2 = (DispCarregIdentificado)obj2;
        		return dispCarregIdentificado1.getDispositivoUnitizacao().getTipoDispositivoUnitizacao().getTpControleDispositivo().getValue()
        			.compareTo(dispCarregIdentificado2.getDispositivoUnitizacao().getTipoDispositivoUnitizacao().getTpControleDispositivo().getValue());  		
			}    		
    	};
    	    	
    	//########################
    	// Primeira aba
    	//########################
    	ItemListConfig dispCarregDescQtdeListConfig = new ItemListConfig() {
 
			public List initialize(Long masterId, Map parameters) {
				return getDispCarregDescQtdeService().findDispCarregDescQtdeByIdCarregamentoDescarga(masterId);			
			}
			
			public Integer getRowCount(Long masterId, Map parameters) {
				return getDispCarregDescQtdeService().getRowCountDispCarregDescQtdeByIdCarregamentoDescarga(masterId);				
			}			

			/**
             * Seta um pai para o itemConfig de DispositivoUnitizacao
             */
            public void setMasterOnItem(Object master, Object itemBean) {
            	CarregamentoDescarga carregamentoDescarga = new CarregamentoDescarga();
            	((DispCarregDescQtde) itemBean).setCarregamentoDescarga(carregamentoDescarga);
            }
            
			public Object populateNewItemInstance(Map parameters, Object object) {
				TypedFlatMap criteria = (TypedFlatMap) parameters;
				
				DispCarregDescQtde dispCarregDescQtde = (DispCarregDescQtde) object;
				
				//Populando objeto...
				dispCarregDescQtde.setIdDispCarregDescQtde(criteria.getLong("idDispCarregDescQtde"));
				dispCarregDescQtde.setQtDispositivo(criteria.getInteger("qtDispositivo"));
				
				TipoDispositivoUnitizacao tipoDispositivoUnitizacao = getTipoDispositivoUnitizacaoService().findById(criteria.getLong("tipoDispositivoUnitizacao.idTipoDispositivoUnitizacao"));
				dispCarregDescQtde.setTipoDispositivoUnitizacao(tipoDispositivoUnitizacao); 
				
				Empresa empresa = getEmpresaService().findById(criteria.getLong("empresa.idEmpresa"));
				dispCarregDescQtde.setEmpresa(empresa);
				
				return dispCarregDescQtde;
			}
			
			public void modifyItemValues(Object newBean, Object oldBean) {
				Set ignore = new HashSet();
				ignore.add("versao");
				ignore.add("idDispCarregIdentificado");	
				ReflectionUtils.syncObjectProperties(oldBean, newBean, ignore);				
			}

			public Map configItemDomainProperties() {
				return null;
			}

    	};

    	//########################
    	// Segunda aba
    	//########################
    	ItemListConfig dispCarregIdentificadoListConfig = new ItemListConfig() {
    		
			public List initialize(Long masterId, Map parameters) {
				return getDispCarregIdentificadoService().findDispCarregIdentificadoByIdCarregamentoDescarga(masterId);		
			}
			
			public Integer getRowCount(Long masterId, Map parameters) {
				return getDispCarregIdentificadoService().getRowCountDispCarregIdentificadoByIdCarregamentoDescarga(masterId);			
			}			

            public void setMasterOnItem(Object master, Object itemBean) {
            	CarregamentoDescarga carregamentoDescarga = new CarregamentoDescarga();
            	((DispCarregIdentificado) itemBean).setCarregamentoDescarga(carregamentoDescarga);
            }
			
			public Object populateNewItemInstance(Map parameters, Object object) {
				TypedFlatMap criteria = (TypedFlatMap) parameters;
								
				DispCarregIdentificado dispCarregIdentificado = (DispCarregIdentificado) object;
				dispCarregIdentificado.setIdDispCarregIdentificado(criteria.getLong("idDispCarregIdentificado"));
				//Populando objeto...
				DispositivoUnitizacao dispositivoUnitizacao = getDispositivoUnitizacaoService().findById(criteria.getLong("dispositivoUnitizacao.idDispositivoUnitizacao"));
				dispCarregIdentificado.setDispositivoUnitizacao(dispositivoUnitizacao);
				
				return dispCarregIdentificado;
			}
			
			public void modifyItemValues(Object newBean, Object oldBean) {
				Set ignore = new HashSet();
				ignore.add("versao");
				ignore.add("idIntegranteEqOperac");		
				ReflectionUtils.syncObjectProperties(oldBean, newBean, ignore);				
			}

			public Map configItemDomainProperties() {

				return null;
			}
    	};
    	
    	//Seta as configuracoes do filho...
		config.addItemConfig("dispositivosSemIdentificacao", DispCarregDescQtde.class, dispCarregDescQtdeListConfig, dispositivosSemComparator);
		config.addItemConfig("dispositivosComIdentificacao", DispCarregIdentificado.class, dispCarregIdentificadoListConfig, dispositivosComComparator); 
		
		return config;
	}
	
}
