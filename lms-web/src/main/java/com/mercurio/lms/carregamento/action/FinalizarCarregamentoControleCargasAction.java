 package com.mercurio.lms.carregamento.action;

import java.io.IOException;
import java.io.Serializable;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mercurio.lms.BASE64Decoder;

import com.mercurio.adsm.core.util.ReflectionUtils;
import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.masterdetail.ItemList;
import com.mercurio.adsm.framework.model.masterdetail.ItemListConfig;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailAction;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailFactory;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailKey;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntry;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntryConfig;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.CarregamentoDescarga;
import com.mercurio.lms.carregamento.model.FotoCarregmtoDescarga;
import com.mercurio.lms.carregamento.model.service.CarregamentoDescargaService;
import com.mercurio.lms.carregamento.model.service.FotoCarregmtoDescargaService;
import com.mercurio.lms.carregamento.model.service.LacreControleCargaService;
import com.mercurio.lms.configuracoes.model.Foto;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;

/**
 * Generated by: ADSM ActionGenerator
 * 
 * Não inserir documentação após ou remover a tag do XDoclet a seguir. O valor
 * do <code>id</code> informado abaixo deve ser utilizado para referenciar
 * este serviço.
 * 
 * @spring.bean id="lms.carregamento.finalizarCarregamentoControleCargasAction"
 */

public class FinalizarCarregamentoControleCargasAction extends MasterDetailAction {
	
	private LacreControleCargaService lacreControleCargaService;
	private FotoCarregmtoDescargaService fotoCarregmtoDescargaService;
	private Logger log = LogManager.getLogger(this.getClass());
		
	/**
	 * Busca a Service default desta Action
	 */
	
	//###############################
	// Setters e getters
	//###############################
	
	public CarregamentoDescargaService getCarregamentoDescargaService() {
		return (CarregamentoDescargaService) super.getMasterService();
	}	
	
	public void setCarregamentoDescargaService(CarregamentoDescargaService carregamentoDescargaService) {
		this.setMasterService(carregamentoDescargaService);
	}
	
	public LacreControleCargaService getLacreControleCargaService() {
		return lacreControleCargaService;
	}

	public void setLacreControleCargaService(LacreControleCargaService lacreControleCargaService) {
		this.lacreControleCargaService = lacreControleCargaService;
	}
	
	public FotoCarregmtoDescargaService getFotoCarregmtoDescargaService() {
		return fotoCarregmtoDescargaService;
	}

	public void setFotoCarregmtoDescargaService(FotoCarregmtoDescargaService fotoCarregmtoDescargaService) {
		this.fotoCarregmtoDescargaService = fotoCarregmtoDescargaService;
	}
	
	//###############################
	// Pesquisa dos objetos
	//###############################

	public List findLacreControleCarga(Map criteria) {
		criteria = new HashMap();
		criteria.put("tpStatusLacre", "FE");
		return this.getLacreControleCargaService().find(criteria);
	}
	
	/**
	 * Gera um newMaster e carrega o objetos pai para a sessao.
	 */
	public TypedFlatMap findDataFinalCarregamento(TypedFlatMap criteria) {

		CarregamentoDescarga carregamentoDescarga = this.getCarregamentoDescargaService()
			.findById(criteria.getLong("idCarregamentoDescarga"));
		
		newMaster();
		putMasterInSession(carregamentoDescarga);
		
		criteria = new TypedFlatMap();
		criteria.put("dhFimOperacao", JTDateTimeUtils.getDataHoraAtual());
		
		return criteria;
	}
	
	//###############################
	// Metedos de negocio
	//###############################

	/**
	 * Chama a service de carregamentoDescarga para finalizar o carregamento de um
	 * determinado manifesto.
	 */
	public void storeFinalizarCarregamento(TypedFlatMap criteria) {
		 
		MasterEntry masterEntry = getMasterFromSession(criteria.getLong("idCarregamentoDescarga"), false);
    	CarregamentoDescarga carregamentoDescarga = (CarregamentoDescarga) masterEntry.getMaster();
    	ItemList itemsFotos = getItemsFromSession(masterEntry, "fotos");
    	ItemListConfig config = getMasterConfig().getItemListConfig("fotos");
    	
    	this.getCarregamentoDescargaService().storeFinalizarCarregamento(carregamentoDescarga, criteria, itemsFotos, config);
    	updateMasterInSession(masterEntry);
	}
	
	//LMS-5477
	
	/***
     * Remoção de um conjunto de registros Master.
     */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIdsFotos(List ids) {
    	super.removeItemByIds(ids, "fotos");
    }
    
    /**
     * Salva um item na sessão.
     */
    public Serializable saveFotos(TypedFlatMap parameters) {
    	return saveItemInstance(parameters, "fotos");
    }
   
    /**
     * Faz o findPaginated do filho
     * Possui uma chamada 'interna' para o findPaginated(initialize) 
     * contido dentro do 'createMasterConfig'
     */
    public ResultSetPage findPaginated(Map parameters) {
    	parameters.put("masterId", null);
    	ResultSetPage result = findPaginatedItemList(parameters, "fotos");
    	return result;
    }

    /**
     * Faz o getRowCount do filho
     * Possui uma chamada 'interna' para o getRowCount contido dentro 
     * do 'createMasterConfig'
     */
    public Integer getRowCount(Map parameters){
    	parameters.put("masterId", null);
    	return getRowCountItemList(parameters, "fotos");
    }
    
    public Object findByIdFotos(MasterDetailKey key) {
    	FotoCarregmtoDescarga fotoCarregmtoDescarga = (FotoCarregmtoDescarga)findItemById(key, "fotos");

    	return fotoCarregmtoDescarga;
    }
    
    //####################################
    // Dados da DF2
    //####################################
    
	protected MasterEntryConfig createMasterConfig(MasterDetailFactory masterFactory) { 
		
		//Declaracao da classe pai
		MasterEntryConfig config = masterFactory.createMasterEntryConfig(CarregamentoDescarga.class);
		
    	Comparator fotoComparator = new Comparator() {
			public int compare(Object obj1, Object obj2) {
				FotoCarregmtoDescarga fotoCarregmtoDescarga1 = (FotoCarregmtoDescarga)obj1;
				FotoCarregmtoDescarga fotoCarregmtoDescarga2 = (FotoCarregmtoDescarga)obj2;
        		return fotoCarregmtoDescarga1.getDsFoto().compareTo(fotoCarregmtoDescarga2.getDsFoto());  		
			}    		
    	};
    	    	
    	//########################
    	// Primeira aba
    	//########################
    	/**
    	 * ItemConfig para FotoCarregmtoDescarga
    	 */
    	ItemListConfig fotoItemList = new ItemListConfig() {
    		
			public List initialize(Long masterId, Map parameters) {				
				return getFotoCarregmtoDescargaService().findFotoCarregmtoDescarga(masterId);				
			}
		
			public Integer getRowCount(Long masterId, Map parameters) {				
				return getFotoCarregmtoDescargaService().getRowCountFotoCarregmtoDescarga(masterId);				
			}
			
			/**
			 * Seta um pai para o itemConfig de LacreControleCarga
			 */
			public void setMasterOnItem(Object master, Object itemBean) {
				CarregamentoDescarga CarregamentoDescarga = new CarregamentoDescarga();
				((FotoCarregmtoDescarga) itemBean).setCarregamentoDescarga(CarregamentoDescarga);								
			}

			public void modifyItemValues(Object newBean, Object bean) {
		        Set ignore = new HashSet();
		        ignore.add("idFotoCarregmtoDescarga"); // id do filho
		        ignore.add("versao");
		        ignore.add("carregamentoDescarga "); // classe pai
		        
		        ReflectionUtils.syncObjectProperties(bean, newBean, ignore);
		    }	

			public Object populateNewItemInstance(Map parameters, Object bean) {
				FotoCarregmtoDescarga fotoCarregmtoDescarga = (FotoCarregmtoDescarga) bean;
				
				TypedFlatMap criteria = (TypedFlatMap) parameters;	
				
				fotoCarregmtoDescarga.setDsFoto(criteria.getString("dsFoto"));
				
				Foto foto = new Foto();
				foto.setIdFoto(null);
				try {
					foto.setFoto(new BASE64Decoder().decodeBuffer(criteria.getString("foto.foto")));
				} catch (IOException e) {
					log.error(e);
				}
				fotoCarregmtoDescarga.setFoto(foto);

				return fotoCarregmtoDescarga;
			}			

    	};   
    	
    	//Seta as configuracoes do filho...
		config.addItemConfig("fotos", FotoCarregmtoDescarga.class, fotoItemList, fotoComparator); 
		
		return config;
	}
	
	/**
	 * Verifica se existem documentos de servico a serem embarcados antes do 
	 * termino do carregamento
	 */
	public TypedFlatMap validateControleCargaDoctoServico(TypedFlatMap criteria) {
		Long idControleCarga = criteria.getLong("idControleCarga");
		List listaDocumentos = this.getCarregamentoDescargaService().validateDoctoServico(idControleCarga);		
		if (!listaDocumentos.isEmpty()){
			StringBuffer nrDoctoServicos = new StringBuffer();
			for (Iterator iter = listaDocumentos.iterator(); iter.hasNext();) {
				TypedFlatMap tfm = (TypedFlatMap)iter.next();
				nrDoctoServicos.append("\n ");
				nrDoctoServicos.append(tfm.getString("tpDocumentoServicoDescription")).append(" ");
				nrDoctoServicos.append(tfm.getString("sgFilialOrigem")).append(" "); 
				nrDoctoServicos.append(FormatUtils.formataNrDocumento(
						String.valueOf(tfm.getLong("nrDoctoServico")), tfm.getString("tpDocumentoServicoValue"))).append(" ");
			}
	    	Object[] messages = {nrDoctoServicos.toString()};
			throw new BusinessException("LMS-05026", messages);
		}
		return new TypedFlatMap(); 
	}	
	
	/**
	 * Verifica se existe algum controle de carga entre os controles de carga
	 * da tela que ja foram cadastrados. 
	 */
	public TypedFlatMap validateLacresControleCarga(TypedFlatMap criteria) {
		
		return new TypedFlatMap();
	}
}
