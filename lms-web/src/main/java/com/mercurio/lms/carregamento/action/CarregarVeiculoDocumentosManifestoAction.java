package com.mercurio.lms.carregamento.action;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.joda.time.DateTime;
import org.joda.time.Duration;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.masterdetail.ItemList;
import com.mercurio.adsm.framework.model.masterdetail.ItemListConfig;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailAction;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailFactory;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailKey;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntry;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntryConfig;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.util.FilterList;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.ControleCarga;
import com.mercurio.lms.carregamento.model.ControleTrecho;
import com.mercurio.lms.carregamento.model.Manifesto;
import com.mercurio.lms.carregamento.model.PreManifestoDocumento;
import com.mercurio.lms.carregamento.model.service.CarregamentoDescargaService;
import com.mercurio.lms.carregamento.model.service.ControleCargaService;
import com.mercurio.lms.carregamento.model.service.ControleTrechoService;
import com.mercurio.lms.carregamento.model.service.ManifestoService;
import com.mercurio.lms.carregamento.model.service.PreManifestoDocumentoService;
import com.mercurio.lms.coleta.model.DetalheColeta;
import com.mercurio.lms.coleta.model.PedidoColeta;
import com.mercurio.lms.coleta.model.service.DetalheColetaService;
import com.mercurio.lms.coleta.model.service.PedidoColetaService;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.configuracoes.model.service.ConversaoMoedaService;
import com.mercurio.lms.configuracoes.model.service.PessoaService;
import com.mercurio.lms.entrega.model.AgendamentoDoctoServico;
import com.mercurio.lms.entrega.model.DocumentoMir;
import com.mercurio.lms.entrega.model.service.AgendamentoDoctoServicoService;
import com.mercurio.lms.entrega.model.service.AgendamentoEntregaService;
import com.mercurio.lms.entrega.model.service.DocumentoMirService;
import com.mercurio.lms.entrega.model.service.ReciboReembolsoService;
import com.mercurio.lms.expedicao.model.DoctoServico;
import com.mercurio.lms.expedicao.model.service.AwbService;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.model.service.CtoInternacionalService;
import com.mercurio.lms.expedicao.model.service.DoctoServicoService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.Rota;
import com.mercurio.lms.municipios.model.RotaColetaEntrega;
import com.mercurio.lms.municipios.model.RotaIdaVolta;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.RotaColetaEntregaService;
import com.mercurio.lms.municipios.model.service.RotaIdaVoltaService;
import com.mercurio.lms.municipios.model.service.SubstAtendimentoFilialService;
import com.mercurio.lms.pendencia.model.service.MdaService;
import com.mercurio.lms.sim.model.LocalizacaoMercadoria;
import com.mercurio.lms.sim.model.service.EventoDocumentoServicoService;
import com.mercurio.lms.sim.model.service.IncluirEventosRastreabilidadeInternacionalService;
import com.mercurio.lms.sim.model.service.LocalizacaoMercadoriaService;
import com.mercurio.lms.sim.model.service.SolicitacaoRetiradaService;
import com.mercurio.lms.util.BigDecimalUtils;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.JTFormatUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.service.ClienteService;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.carregamento.carregarVeiculoDocumentosManifestoAction"
 */

public class CarregarVeiculoDocumentosManifestoAction extends MasterDetailAction {
	private PreManifestoDocumentoService preManifestoDocumentoService;
	private ClienteService clienteService;
	private FilialService filialService;
	private ControleCargaService controleCargaService;
	private DomainValueService domainValueService;
	private RotaColetaEntregaService rotaColetaEntregaService;
	private RotaIdaVoltaService rotaIdaVoltaService;	
	private AwbService awbService;	
	private DoctoServicoService doctoServicoService;
	private LocalizacaoMercadoriaService localizacaoMercadoriaService;
	private EventoDocumentoServicoService eventoDocumentoServicoService;
	private ConversaoMoedaService conversaoMoedaService;
	private PedidoColetaService pedidoColetaService;
	private DetalheColetaService detalheColetaService;
	private SubstAtendimentoFilialService substAtendimentoFilialService;
	private ConfiguracoesFacade configuracoesFacade;
	private PessoaService pessoaService;
	private AgendamentoDoctoServicoService agendamentoDoctoServicoService;
	private AgendamentoEntregaService agendamentoEntregaService;
	private DocumentoMirService documentoMirService;
	private SolicitacaoRetiradaService solicitacaoRetiradaService;
	private ControleTrechoService controleTrechoService;
	private CarregamentoDescargaService carregamentoDescargaService;
	private ConhecimentoService conhecimentoService;
	private CtoInternacionalService ctoInternacionalService;
	private MdaService mdaService;
	private ReciboReembolsoService reciboReembolsoService;
	private IncluirEventosRastreabilidadeInternacionalService incluirEventosRastreabilidadeInternacionalService;
	
	/**
	 * Declaração serviço principal da Action.
	 */
	public void setManifestoService(ManifestoService manifestoService) {
		this.setMasterService(manifestoService);
	}	
	public ManifestoService getManifestoService() {
		return (ManifestoService) super.getMasterService();
	}	
	public CarregamentoDescargaService getCarregamentoDescargaService() {
		return carregamentoDescargaService;
	}
	public void setCarregamentoDescargaService(CarregamentoDescargaService carregamentoDescargaService) {
		this.carregamentoDescargaService = carregamentoDescargaService;
	}
	public ConhecimentoService getConhecimentoService() {
		return conhecimentoService;
	}
	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
	}
	public CtoInternacionalService getCtoInternacionalService() {
		return ctoInternacionalService;
	}
	public void setCtoInternacionalService(
			CtoInternacionalService ctoInternacionalService) {
		this.ctoInternacionalService = ctoInternacionalService;
	}
	public MdaService getMdaService() {
		return mdaService;
	}
	public void setMdaService(MdaService mdaService) {
		this.mdaService = mdaService;
	}
	public ReciboReembolsoService getReciboReembolsoService() {
		return reciboReembolsoService;
	}
	public void setReciboReembolsoService(
			ReciboReembolsoService reciboReembolsoService) {
		this.reciboReembolsoService = reciboReembolsoService;
	}
	
	public PreManifestoDocumentoService getPreManifestoDocumentoService() {
		return preManifestoDocumentoService;
	}
	public void setPreManifestoDocumentoService(
			PreManifestoDocumentoService preManifestoDocumentoService) {
		this.preManifestoDocumentoService = preManifestoDocumentoService;
	}	
	public ClienteService getClienteService() {
		return clienteService;
	}
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}
	public FilialService getFilialService() {
		return filialService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public ControleCargaService getControleCargaService() {
		return controleCargaService;
	}
	public void setControleCargaService(ControleCargaService controleCargaService) {
		this.controleCargaService = controleCargaService;
	}
	public DomainValueService getDomainValueService() {
		return domainValueService;
	}
	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}
	public RotaColetaEntregaService getRotaColetaEntregaService() {
		return rotaColetaEntregaService;
	}
	public void setRotaColetaEntregaService(
			RotaColetaEntregaService rotaColetaEntregaService) {
		this.rotaColetaEntregaService = rotaColetaEntregaService;
	}
	public RotaIdaVoltaService getRotaIdaVoltaService() {
		return rotaIdaVoltaService;
	}
	public void setRotaIdaVoltaService(RotaIdaVoltaService rotaIdaVoltaService) {
		this.rotaIdaVoltaService = rotaIdaVoltaService;
	}
	public AwbService getAwbService() {
		return awbService;
	}
	public void setAwbService(AwbService awbService) {
		this.awbService = awbService;
	}
	public ConversaoMoedaService getConversaoMoedaService() {
		return conversaoMoedaService;
	}
	public void setConversaoMoedaService(ConversaoMoedaService conversaoMoedaService) {
		this.conversaoMoedaService = conversaoMoedaService;
	}
	public DoctoServicoService getDoctoServicoService() {
		return doctoServicoService;
	}
	public void setDoctoServicoService(DoctoServicoService doctoServicoService) {
		this.doctoServicoService = doctoServicoService;
	}
	public EventoDocumentoServicoService getEventoDocumentoServicoService() {
		return eventoDocumentoServicoService;
	}
	public void setEventoDocumentoServicoService(
			EventoDocumentoServicoService eventoDocumentoServicoService) {
		this.eventoDocumentoServicoService = eventoDocumentoServicoService;
	}
	public LocalizacaoMercadoriaService getLocalizacaoMercadoriaService() {
		return localizacaoMercadoriaService;
	}
	public void setLocalizacaoMercadoriaService(
			LocalizacaoMercadoriaService localizacaoMercadoriaService) {
		this.localizacaoMercadoriaService = localizacaoMercadoriaService;
	}
	public PedidoColetaService getPedidoColetaService() {
		return pedidoColetaService;
	}
	public void setPedidoColetaService(PedidoColetaService pedidoColetaService) {
		this.pedidoColetaService = pedidoColetaService;
	}
	public DetalheColetaService getDetalheColetaService() {
		return detalheColetaService;
	}
	public void setDetalheColetaService(DetalheColetaService detalheColetaService) {
		this.detalheColetaService = detalheColetaService;
	}
	public SubstAtendimentoFilialService getSubstAtendimentoFilialService() {
		return substAtendimentoFilialService;
	}
	public void setSubstAtendimentoFilialService(
			SubstAtendimentoFilialService substAtendimentoFilialService) {
		this.substAtendimentoFilialService = substAtendimentoFilialService;
	}
	public ConfiguracoesFacade getConfiguracoesFacade() {
		return configuracoesFacade;
	}
	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}
	public PessoaService getPessoaService() {
		return pessoaService;
	}
	public void setPessoaService(PessoaService pessoaService) {
		this.pessoaService = pessoaService;
	}
	public AgendamentoDoctoServicoService getAgendamentoDoctoServicoService() {
		return agendamentoDoctoServicoService;
	}
	public void setAgendamentoDoctoServicoService(
			AgendamentoDoctoServicoService agendamentoDoctoServicoService) {
		this.agendamentoDoctoServicoService = agendamentoDoctoServicoService;
	}
	public AgendamentoEntregaService getAgendamentoEntregaService() {
		return agendamentoEntregaService;
	}
	public void setAgendamentoEntregaService(
			AgendamentoEntregaService agendamentoEntregaService) {
		this.agendamentoEntregaService = agendamentoEntregaService;
	}
	public DocumentoMirService getDocumentoMirService() {
		return documentoMirService;
	}
	public void setDocumentoMirService(DocumentoMirService documentoMirService) {
		this.documentoMirService = documentoMirService;
	}
	public SolicitacaoRetiradaService getSolicitacaoRetiradaService() {
		return solicitacaoRetiradaService;
	}
	public void setSolicitacaoRetiradaService(
			SolicitacaoRetiradaService solicitacaoRetiradaService) {
		this.solicitacaoRetiradaService = solicitacaoRetiradaService;
	}
	public ControleTrechoService getControleTrechoService() {
		return controleTrechoService;
	}
	public void setControleTrechoService(ControleTrechoService controleTrechoService) {
		this.controleTrechoService = controleTrechoService;
	}
	public IncluirEventosRastreabilidadeInternacionalService getIncluirEventosRastreabilidadeInternacionalService() {
		return incluirEventosRastreabilidadeInternacionalService;
	}
	public void setIncluirEventosRastreabilidadeInternacionalService(
			IncluirEventosRastreabilidadeInternacionalService incluirEventosRastreabilidadeInternacionalService) {
		this.incluirEventosRastreabilidadeInternacionalService = incluirEventosRastreabilidadeInternacionalService;
	}
	
	/**
	 * ResultSetPage de Manifestos
	 * @param criteria
	 * @return
	 */
    public ResultSetPage findPaginatedManifesto(TypedFlatMap criteria) {
    	return this.getManifestoService().findPaginatedManifesto(criteria);
    }

    /**
     * Quantidade de manifestos do ResultSetPage
     * @param criteria
     * @return
     */
    public Integer getRowCountManifesto(TypedFlatMap criteria) {
    	return this.getManifestoService().getRowCountManifesto(criteria);
    }
	
    
	/**
	 * ##############################################################################################
	 * #						 INICIO DOS MÉTODOS DIVERSOS PARA A TELA							#
	 * ##############################################################################################
	 */

	/**
	 * Busca algums dos dados do usuario logado, que está na sessão.
	 */
	public TypedFlatMap getDadosSessao() {
		TypedFlatMap dadosUsuario = new TypedFlatMap();

		dadosUsuario.put("filialOrigem.idFilial", SessionUtils.getFilialSessao().getIdFilial());
		dadosUsuario.put("filialOrigem.sgFilial", SessionUtils.getFilialSessao().getSgFilial());
		dadosUsuario.put("filialOrigem.pessoa.nmFantasia", SessionUtils.getFilialSessao().getPessoa().getNmFantasia());

		dadosUsuario.put("postoAvancado.idPostoAvancado", Long.valueOf(2));
		dadosUsuario.put("postoAvancado.dsPostoAvancado", "Posto Porto Alegre");

		return dadosUsuario;
	}	

	public List findLookupBySgFilial(TypedFlatMap criteria) {
		return this.getFilialService().findLookupBySgFilial((String)criteria.get("sgFilial"), (String)criteria.get("tpAcesso"));
	}	
	
	/**
	 * Busca os campos da tela de carregamento a partir de um controle de carga
	 */
	public List findControleCargaByNrControleByFilial(TypedFlatMap criteria) {
		Long nrControleCarga = criteria.getLong("nrControleCarga");
		Long idFilial = criteria.getLong("filialByIdFilialOrigem.idFilial");
		
		return this.getControleCargaService().findControleCargaByNrControleByFilial(nrControleCarga, idFilial);
	}

	public List findLookupRotaIdaVolta(TypedFlatMap criteria) {
		return this.getRotaIdaVoltaService().findLookup(criteria);		
	}
	
	public List findLookupRotaColetaEntrega(TypedFlatMap criteria) {
		return this.getRotaColetaEntregaService().findLookup(criteria);		
	}
	
	public List findLookupFilial(TypedFlatMap criteria) {
		return this.getFilialService().findLookup(criteria);
	}
	
	public List findLookupCliente(Map criteria) {		
		return this.getClienteService().findLookup(criteria);
	}	
	
	
	public List findComboTipoPreManifesto(TypedFlatMap criteria) {
		List listTpPreManifesto = new ArrayList();		
		if (criteria.getString("tpManifesto").equals("V")) {
			listTpPreManifesto = this.getDomainValueService().findDomainValues("DM_TIPO_MANIFESTO_VIAGEM");
		} else if (criteria.getString("tpManifesto").equals("E")) {
			listTpPreManifesto = this.getDomainValueService().findDomainValues("DM_TIPO_MANIFESTO_ENTREGA");
		}
		
		return listTpPreManifesto;
	}
	
    public List findTipoDocumentoServico(TypedFlatMap criteria) {
    	List dominiosValidos = new ArrayList();
    	dominiosValidos.add("CTR");
    	dominiosValidos.add("CRT");
    	dominiosValidos.add("NFT");
    	dominiosValidos.add("MDA");
    	dominiosValidos.add("RRE");
    	List retorno = this.getDomainValueService().findByDomainNameAndValues("DM_TIPO_DOCUMENTO_SERVICO", dominiosValidos);
    	return retorno;
    }	
    
	/**
	 * ##############################################################################################
	 * #						 FIM DOS MÉTODOS DIVERSOS PARA A TELA								#
	 * ##############################################################################################
	 */
    
    
    
    
    
	/**
	 * ##############################################################################################
	 * #							 INICIO DOS MÉTODOS PARA TELA DE DF2							#
	 * ##############################################################################################
	 */
    
    public TypedFlatMap store(TypedFlatMap bean) {
    	
    	// Validações para Pré-Manifesto    	
		ControleCarga controleCarga = this.getControleCargaService().findById(bean.getLong("controleCarga.idControleCarga"));
		if (controleCarga.getTpControleCarga().getValue().equals("V")) {    			
			RotaIdaVolta rotaIdaVolta = this.getRotaIdaVoltaService().findById(bean.getLong("rotaIdaVolta.idRotaIdaVolta"));
			Rota rota = rotaIdaVolta.getRota();
			int indexOrigem = rota.getDsRota().indexOf(SessionUtils.getFilialSessao().getSgFilial());
			int indexDestino = rota.getDsRota().indexOf(bean.getString("filialByIdFilialDestino.sgFilial"));
			if (indexOrigem > indexDestino) {
				throw new BusinessException("LMS-05034");
			}
			
    		List listManifesto = this.getManifestoService().findManifestoByIdControleCarga(bean.getLong("controleCarga.idControleCarga"), null, null, null);
    		for (Iterator iter = listManifesto.iterator(); iter.hasNext();) {
				Manifesto manifesto = (Manifesto) iter.next();
				if ( manifesto.getFilialByIdFilialOrigem().getIdFilial().equals(SessionUtils.getFilialSessao().getIdFilial()) && 
						manifesto.getFilialByIdFilialDestino().getIdFilial().equals(bean.getLong("filialByIdFilialDestino.idFilial")) &&
						manifesto.getTpStatusManifesto().getValue().equals("PM") ) {
					throw new BusinessException("LMS-05035");
				}
			}	    
    		
    		if (bean.getString("tpPreManifesto").equals("RV")) {
    			if (controleCarga.getMeioTransporteByIdTransportado().getTpVinculo().getValue().equals("E")) {
    				throw new BusinessException("LMS-05036");
    			}
    			
    			if (!rotaIdaVolta.getRotaViagem().getTpRota().getValue().equals("EX")) {
    				throw new BusinessException("LMS-05037");
    			}
    			
    			if (listManifesto.size() > 0) {
    				throw new BusinessException("LMS-05038");
    			}
    		}
		}
    			
    	MasterEntry entry = getMasterFromSession(bean.getLong("idManifesto"), true);
    	Manifesto manifesto = (Manifesto) entry.getMaster();
    	
    	manifesto.setIdManifesto(bean.getLong("idManifesto"));
    	manifesto.setNrPreManifesto(bean.getLong("nrPreManifesto"));
    	manifesto.setDhGeracaoPreManifesto(JTDateTimeUtils.getDataHoraAtual());
    	manifesto.setTpManifesto(bean.getDomainValue("tpManifesto"));
    	if (bean.getString("tpManifesto").equals("V")) {
    		manifesto.setTpManifestoViagem(bean.getDomainValue("tpPreManifesto"));
    	} else if (bean.getString("tpManifesto").equals("E")) {
    		manifesto.setTpManifestoEntrega(bean.getDomainValue("tpPreManifesto"));
    	}
    	manifesto.setTpModal(bean.getDomainValue("tpModal"));
    	manifesto.setTpAbrangencia(bean.getDomainValue("tpAbrangencia"));
    	manifesto.setTpStatusManifesto(new DomainValue("PM"));
    	manifesto.setObManifesto(bean.getString("obManifesto"));
    	
    	if(bean.getLong("filialByIdFilialOrigem.idFilial") != null) {
    		manifesto.setFilialByIdFilialOrigem(this.getFilialService().findById(bean.getLong("filialByIdFilialOrigem.idFilial")));
    	} else {
    		manifesto.setFilialByIdFilialOrigem(SessionUtils.getFilialSessao());
    	}
    	manifesto.setFilialByIdFilialDestino(this.getFilialService().findById(bean.getLong("filialByIdFilialDestino.idFilial")));
    	manifesto.setControleCarga(controleCarga);
 
    	// Verifica se existe trexo para o controle carga a partir da filial de origem e da filial de destino
    	ControleTrecho controleTrecho = this.getControleTrechoService()
    												.findControleTrechoByIdControleCargaByIdFilialOrigemByIdFilialDestino(
    																	controleCarga.getIdControleCarga(),
    																	manifesto.getFilialByIdFilialOrigem().getIdFilial(),
    																	manifesto.getFilialByIdFilialDestino().getIdFilial());
    	if (controleTrecho==null) {
    		throw new BusinessException("LMS-05053");
    	}
    	manifesto.setControleTrecho(controleTrecho);
    	manifesto.setMoeda(SessionUtils.getMoedaSessao());
    	
    	if (bean.getLong("solicitacaoRetirada.idSolicitacaoRetirada") != null) {
        	manifesto.setSolicitacaoRetirada(this.getSolicitacaoRetiradaService().findById(
																bean.getLong("solicitacaoRetirada.idSolicitacaoRetirada")));
		}
    	if (bean.getLong("cliente.idCliente") != null) {
    		manifesto.setCliente(this.getClienteService().findById(bean.getLong("cliente.idCliente")));
		}
    		
    	ItemList items = getItemsFromSession(entry, "preManifestoDocumento");
    	ItemListConfig itemsConfig = getMasterConfig().getItemListConfig("preManifestoDocumento");    	
    	
    	// Faz a conversão de valores do DoctoServico para o valor da moeda do usuário logado.
    	BigDecimal vlTotalManifesto = BigDecimalUtils.ZERO;
    	BigDecimal psTotalManifesto = BigDecimalUtils.ZERO;
    	BigDecimal psTotalAforadoManifesto = BigDecimalUtils.ZERO;
    	for(Iterator iter = items.iterator(manifesto.getIdManifesto(), itemsConfig); iter.hasNext();) {
    		PreManifestoDocumento preManifestoDocumento = (PreManifestoDocumento) iter.next();
    		DoctoServico doctoServico = this.getDoctoServicoService().findDoctoServicoById(preManifestoDocumento.getDoctoServico().getIdDoctoServico());
    		
    		if (doctoServico.getVlMercadoria() != null) {
    			BigDecimal vlTotalManifestoConvertido = conversaoMoedaService.findConversaoMoeda(
   					 doctoServico.getPaisOrigem().getIdPais(),
   					 doctoServico.getMoeda().getIdMoeda(),
   					 SessionUtils.getPaisSessao().getIdPais(),
   					 SessionUtils.getMoedaSessao().getIdMoeda(),
   					 JTDateTimeUtils.getDataAtual(),
   					 doctoServico.getVlMercadoria());
   			
    			vlTotalManifesto = vlTotalManifesto.add(vlTotalManifestoConvertido);				
			}
    		
    		if (doctoServico.getPsReal() != null) {
    			psTotalManifesto = psTotalManifesto.add(doctoServico.getPsReal());
			}
    		
    		if (doctoServico.getPsAforado() != null) {
    			psTotalAforadoManifesto = psTotalAforadoManifesto.add(doctoServico.getPsAforado());
			}    		
    	}
    	
		manifesto.setVlTotalManifesto(vlTotalManifesto);
		manifesto.setPsTotalManifesto(psTotalManifesto);
		manifesto.setPsTotalAforadoManifesto(psTotalAforadoManifesto);
    			
    	TypedFlatMap mapBeanStored = this.getManifestoService().storeAll(manifesto, items, itemsConfig);		    	
    	items.resetItemsState(); 
    	updateMasterInSession(entry);
    	
    	return mapBeanStored;
    }    
    
    
	/**
	 * Salva a referencia do objeto Master na sessão.
	 * não devem ser inicializadas as coleções que representam os filhos
	 * já que o usuário pode vir a não utilizar a aba de filhos, evitando assim
	 * a carga desnecessária de objetos na sessão e a partir do banco de dados.
	 * 
	 * @param id
	 */
    public Object findById(java.lang.Long id) {
		Object masterObj = this.getManifestoService().findManifestoById(id);
		putMasterInSession(masterObj); 		
		Manifesto manifesto = (Manifesto) masterObj;
		
		TypedFlatMap mapManifesto = new TypedFlatMap();
		
		mapManifesto.put("idManifesto", manifesto.getIdManifesto());
		mapManifesto.put("filialByIdFilialOrigem.idFilial", manifesto.getFilialByIdFilialOrigem().getIdFilial());
		mapManifesto.put("filialByIdFilialOrigem.sgFilial", manifesto.getFilialByIdFilialOrigem().getSgFilial());		
		mapManifesto.put("nrPreManifesto", manifesto.getNrPreManifesto());
		mapManifesto.put("tpManifesto.description", manifesto.getTpManifesto().getDescription());
		mapManifesto.put("tpManifesto.value", manifesto.getTpManifesto().getValue());
		mapManifesto.put("tpManifesto.status", manifesto.getTpManifesto().getStatus());
		
		if (manifesto.getTpManifestoViagem() != null) {
			mapManifesto.put("tpPreManifesto.description", manifesto.getTpManifestoViagem().getDescription());
			mapManifesto.put("tpPreManifesto.value", manifesto.getTpManifestoViagem().getValue());
			mapManifesto.put("tpPreManifesto.status", manifesto.getTpManifestoViagem().getStatus());
			if (manifesto.getControleCarga().getRotaIdaVolta()!=null){
				mapManifesto.put("controleCarga.rotaIdaVolta.idRotaIdaVolta", manifesto.getControleCarga().getRotaIdaVolta().getIdRotaIdaVolta());
				RotaIdaVolta rotaIdaVolta = this.getRotaIdaVoltaService().findById(manifesto.getControleCarga().getRotaIdaVolta().getIdRotaIdaVolta());
				mapManifesto.put("controleCarga.rotaIdaVolta.nrRota", rotaIdaVolta.getNrRota());			
				mapManifesto.put("controleCarga.rotaIdaVolta.rota.dsRota", rotaIdaVolta.getRota().getDsRota());
			}
		} else if (manifesto.getTpManifestoEntrega() != null) {
			mapManifesto.put("tpPreManifesto.description", manifesto.getTpManifestoEntrega().getDescription());
			mapManifesto.put("tpPreManifesto.value", manifesto.getTpManifestoEntrega().getValue());
			mapManifesto.put("tpPreManifesto.status", manifesto.getTpManifestoEntrega().getStatus());		
			if (manifesto.getControleCarga().getRotaColetaEntrega()!=null){
				mapManifesto.put("controleCarga.rotaColetaEntrega.idRotaColetaEntrega", manifesto.getControleCarga().getRotaColetaEntrega().getIdRotaColetaEntrega());
				RotaColetaEntrega rotaColetaEntrega = this.getRotaColetaEntregaService().findById(manifesto.getControleCarga().getRotaColetaEntrega().getIdRotaColetaEntrega());
				mapManifesto.put("controleCarga.rotaColetaEntrega.nrRota", rotaColetaEntrega.getNrRota());
				mapManifesto.put("controleCarga.rotaColetaEntrega.dsRota", rotaColetaEntrega.getDsRota());
			}
		}
				
		mapManifesto.put("tpModal.description", manifesto.getTpModal().getDescription());
		mapManifesto.put("tpModal.value", manifesto.getTpModal().getValue());
		mapManifesto.put("tpModal.status", manifesto.getTpModal().getStatus());
		mapManifesto.put("tpAbrangencia.description", manifesto.getTpAbrangencia().getDescription());
		mapManifesto.put("tpAbrangencia.value", manifesto.getTpAbrangencia().getValue());
		mapManifesto.put("tpAbrangencia.status", manifesto.getTpAbrangencia().getStatus());
				
		mapManifesto.put("controleCarga.tpControleCarga", manifesto.getControleCarga().getTpControleCarga().getValue());
		mapManifesto.put("controleCarga.filialByIdFilialOrigem.idFilial", manifesto.getControleCarga().getFilialByIdFilialOrigem().getIdFilial());
		mapManifesto.put("controleCarga.filialByIdFilialOrigem.sgFilial", manifesto.getControleCarga().getFilialByIdFilialOrigem().getSgFilial());
		mapManifesto.put("controleCarga.idControleCarga", manifesto.getControleCarga().getIdControleCarga());
		mapManifesto.put("controleCarga.nrControleCarga", manifesto.getControleCarga().getNrControleCarga());
		
		mapManifesto.put("tpStatusManifesto.description", manifesto.getTpStatusManifesto().getDescription());
		mapManifesto.put("tpStatusManifesto.value", manifesto.getTpStatusManifesto().getValue());
		mapManifesto.put("tpStatusManifesto.status", manifesto.getTpStatusManifesto().getStatus());
		
		mapManifesto.put("filialByIdFilialDestino.idFilial", manifesto.getFilialByIdFilialDestino().getIdFilial());
		mapManifesto.put("filialByIdFilialDestino.sgFilial", manifesto.getFilialByIdFilialDestino().getSgFilial());
		Pessoa pessoaFilial = this.getPessoaService().findById(manifesto.getFilialByIdFilialDestino().getIdFilial());
		mapManifesto.put("filialByIdFilialDestino.pessoa.nmFantasia", pessoaFilial.getNmFantasia());
		mapManifesto.put("obManifesto", manifesto.getObManifesto());

		if(manifesto.getSolicitacaoRetirada() != null) {
			// TODO Código para pegar Solicitação de Retirada
		}
		
		if (manifesto.getCliente() != null) {
			mapManifesto.put("cliente.idCliente", manifesto.getCliente().getIdCliente());
			mapManifesto.put("cliente.pessoa.idPessoa", manifesto.getCliente().getPessoa().getIdPessoa());
			mapManifesto.put("cliente.pessoa.tpIdentificacao", manifesto.getCliente().getPessoa().getTpIdentificacao().getValue());
			mapManifesto.put("cliente.pessoa.nrIdentificacao", manifesto.getCliente().getPessoa().getNrIdentificacao());			
			mapManifesto.put("cliente.pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(manifesto.getCliente().getPessoa().getTpIdentificacao(), 
																										manifesto.getCliente().getPessoa().getNrIdentificacao()));
			mapManifesto.put("cliente.pessoa.nmPessoa", manifesto.getCliente().getPessoa().getNmPessoa());				
		}
				
		return mapManifesto;
    }
    
    /**
     * Remoção de um conjunto de registros Master.
     * 
	 *
     */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	this.getManifestoService().removeByIds(ids);
    }

    /**
     * Remoção de um registro Master.
     */    
    public void removeById(java.lang.Long id) {
    	this.getManifestoService().removeById(id);
		newMaster();
    }     
    
    /**
     * Salva um item Descrição Padrão na sessão.
     */
    public Serializable savePreManifestoDocumento(TypedFlatMap parameters) {
		List listIdsDocumentos = new ArrayList();
		Filial filialUsuarioLogado = SessionUtils.getFilialSessao();
		DateTime dataHoraAtual = JTDateTimeUtils.getDataHoraAtual();		
		
		if (parameters.getList("ids") != null) {
			listIdsDocumentos = parameters.getList("ids");
		} else if (parameters.getString("doctoServico.idDoctoServico") != null) {
			listIdsDocumentos.add(parameters.getString("doctoServico.idDoctoServico"));
		}
		
		Manifesto manifesto = this.getManifestoService().findById(parameters.getLong("idManifesto"));
		
		for (Iterator iter = listIdsDocumentos.iterator(); iter.hasNext();) {
			String idDoctoServico = (String) iter.next();
			DoctoServico doctoServico = this.getDoctoServicoService().findById(Long.valueOf(idDoctoServico));
			ControleCarga controleCarga = this.getControleCargaService().findByIdInitLazyProperties(manifesto.getControleCarga().getIdControleCarga(), false);

			PreManifestoDocumento preManifestoDocumento = new PreManifestoDocumento();
			preManifestoDocumento.setManifesto(manifesto);
			preManifestoDocumento.setDoctoServico(doctoServico);
			this.getPreManifestoDocumentoService().store(preManifestoDocumento);
			
			String tpDocumento = null;
			String strPreManifesto = preManifestoDocumento.getManifesto().getFilialByIdFilialOrigem().getSgFilial() + " " + StringUtils.leftPad(preManifestoDocumento.getManifesto().getNrPreManifesto().toString(), 8, '0');
	    	if (controleCarga.getTpControleCarga().getValue().equals("V")) {
	    		tpDocumento = "PMV"; //Pre-Manifesto Viagem
	    		incluirEventosRastreabilidadeInternacionalService.generateEventoDocumento(Short.valueOf("61"), doctoServico.getIdDoctoServico(), filialUsuarioLogado.getIdFilial(), strPreManifesto, dataHoraAtual,	null, filialUsuarioLogado.getSiglaNomeFilial(), tpDocumento);
	        	if (manifesto.getTpStatusManifesto().getValue().equals("CC") || manifesto.getTpStatusManifesto().getValue().equals("EC")){
	        		incluirEventosRastreabilidadeInternacionalService.generateEventoDocumento(Short.valueOf("25"), doctoServico.getIdDoctoServico(), filialUsuarioLogado.getIdFilial(), strPreManifesto, dataHoraAtual,	null, filialUsuarioLogado.getSiglaNomeFilial(), tpDocumento);
	        	}
	        	if (manifesto.getTpStatusManifesto().getValue().equals("CC")){
	        		incluirEventosRastreabilidadeInternacionalService.generateEventoDocumento(Short.valueOf("26"), doctoServico.getIdDoctoServico(), filialUsuarioLogado.getIdFilial(), strPreManifesto, dataHoraAtual,	null, filialUsuarioLogado.getSiglaNomeFilial(), tpDocumento);
	        	}
	    	} else { 
	    		tpDocumento = "PME"; //Pre-Manifesto Entrega
	    		incluirEventosRastreabilidadeInternacionalService.generateEventoDocumento(Short.valueOf("62"), doctoServico.getIdDoctoServico(), filialUsuarioLogado.getIdFilial(), strPreManifesto, dataHoraAtual,	null, filialUsuarioLogado.getSiglaNomeFilial(), tpDocumento);
	    		if (manifesto.getTpStatusManifesto().getValue().equals("CC") || manifesto.getTpStatusManifesto().getValue().equals("EC")){
	    			incluirEventosRastreabilidadeInternacionalService.generateEventoDocumento(Short.valueOf("24"), doctoServico.getIdDoctoServico(), filialUsuarioLogado.getIdFilial(), strPreManifesto, dataHoraAtual,	null, filialUsuarioLogado.getSiglaNomeFilial(), tpDocumento);
	    		}
	        	if (manifesto.getTpStatusManifesto().getValue().equals("CC")){
	        		incluirEventosRastreabilidadeInternacionalService.generateEventoDocumento(Short.valueOf("27"), doctoServico.getIdDoctoServico(), filialUsuarioLogado.getIdFilial(), strPreManifesto, dataHoraAtual,	null, filialUsuarioLogado.getSiglaNomeFilial(), tpDocumento);
	        	}
	    	}

			
		}
		return null;
    }     
    
    /**
     * Remove uma lista de registros items.
	 *  
	 * @param ids ids dos desciçoes item a serem removidos.
	 * 
	 * 
     */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIdsPreManifestoDocumento(List ids) {
    	super.removeItemByIds(ids, "preManifestoDocumento");
    }     
    
	/**
	 * FindPaginated para grid de PreManifestoDocumento
	 * @param criteria
	 * @return
	 */
	public ResultSetPage findPaginatedPreManifestoDocumento(TypedFlatMap criteria) {
    	ResultSetPage rspPreManifestoDocumento = findPaginatedItemList(criteria, "preManifestoDocumento");
    	
    	List listPreManifestoDocumento = new ArrayList();
    	for(int i=0; i< rspPreManifestoDocumento.getList().size(); i++) {
    		PreManifestoDocumento preManifestoDocumento = (PreManifestoDocumento) rspPreManifestoDocumento.getList().get(i);
    		DoctoServico doctoServico = this.getDoctoServicoService().findDoctoServicoById(preManifestoDocumento.getDoctoServico().getIdDoctoServico());
    		TypedFlatMap mapPreManifestoDocumento = new TypedFlatMap();    		
    		
        	mapPreManifestoDocumento.put("idPreManifestoDocumento", preManifestoDocumento.getIdPreManifestoDocumento());
        	
    		mapPreManifestoDocumento.put("doctoServico.idDoctoServico", doctoServico.getIdDoctoServico());    		
    		mapPreManifestoDocumento.put("doctoServico.tpDocumentoServico.description", doctoServico.getTpDocumentoServico().getDescription());
    		mapPreManifestoDocumento.put("doctoServico.tpDocumentoServico.value", doctoServico.getTpDocumentoServico().getValue());
    		mapPreManifestoDocumento.put("doctoServico.tpDocumentoServico.status", doctoServico.getTpDocumentoServico().getStatus());    		
    		mapPreManifestoDocumento.put("doctoServico.nrDoctoServico", doctoServico.getNrDoctoServico());
    		mapPreManifestoDocumento.put("doctoServico.qtVolumes", doctoServico.getQtVolumes());
    		mapPreManifestoDocumento.put("doctoServico.psReal", doctoServico.getPsReal());
    		mapPreManifestoDocumento.put("doctoServico.vlMercadoria", doctoServico.getVlMercadoria());
    		mapPreManifestoDocumento.put("doctoServico.vlTotalDocServico", doctoServico.getVlTotalDocServico());
    		mapPreManifestoDocumento.put("doctoServico.dtPrevEntrega", doctoServico.getDtPrevEntrega());
    		mapPreManifestoDocumento.put("doctoServico.dhEmissao", doctoServico.getDhEmissao());
    		if (doctoServico.getFilialByIdFilialDestino() != null) {
    			mapPreManifestoDocumento.put("doctoServico.filialByIdFilialDestino.idFilial", doctoServico.getFilialByIdFilialDestino().getIdFilial());
    			mapPreManifestoDocumento.put("doctoServico.filialByIdFilialDestino.sgFilial", doctoServico.getFilialByIdFilialDestino().getSgFilial());
    			mapPreManifestoDocumento.put("doctoServico.filialByIdFilialDestino.pessoa.nmFantasia", doctoServico.getFilialByIdFilialDestino().getPessoa().getNmFantasia());	
    		}
    		if (doctoServico.getMoeda() != null) {
    			mapPreManifestoDocumento.put("doctoServico.moeda.idMoeda", doctoServico.getMoeda().getIdMoeda());
    			mapPreManifestoDocumento.put("doctoServico.moeda.sgMoeda", doctoServico.getMoeda().getSgMoeda());
    			mapPreManifestoDocumento.put("doctoServico.moeda.dsSimbolo", doctoServico.getMoeda().getDsSimbolo());
    			
    			mapPreManifestoDocumento.put("doctoServico.moeda2.sgMoeda", doctoServico.getMoeda().getSgMoeda());
    			mapPreManifestoDocumento.put("doctoServico.moeda2.dsSimbolo", doctoServico.getMoeda().getDsSimbolo());    			
    		}
    		if (doctoServico.getServico() != null) {
    			mapPreManifestoDocumento.put("doctoServico.servico.idServico", doctoServico.getServico().getIdServico());
    			mapPreManifestoDocumento.put("doctoServico.servico.dsServico", doctoServico.getServico().getDsServico());
    			mapPreManifestoDocumento.put("doctoServico.servico.tpModal.description", doctoServico.getServico().getTpModal().getDescription());
    			mapPreManifestoDocumento.put("doctoServico.servico.tpModal.value", doctoServico.getServico().getTpModal().getValue());
    			mapPreManifestoDocumento.put("doctoServico.servico.tpModal.status", doctoServico.getServico().getTpModal().getStatus());
    			mapPreManifestoDocumento.put("doctoServico.servico.tpAbrangencia.description", doctoServico.getServico().getTpAbrangencia().getDescription());
    			mapPreManifestoDocumento.put("doctoServico.servico.tpAbrangencia.value", doctoServico.getServico().getTpAbrangencia().getValue());
    			mapPreManifestoDocumento.put("doctoServico.servico.tpAbrangencia.status", doctoServico.getServico().getTpAbrangencia().getStatus());
    			if (doctoServico.getServico().getTipoServico() != null) {
    				mapPreManifestoDocumento.put("doctoServico.servico.tipoServico.blPriorizar", doctoServico.getServico().getTipoServico().getBlPriorizar());
    			}
    		}
    		if (doctoServico.getLocalizacaoMercadoria() != null) {
    			mapPreManifestoDocumento.put("doctoServico.localizacaoMercadoria.idLocalizacaoMercadoria", doctoServico.getLocalizacaoMercadoria().getIdLocalizacaoMercadoria());
    			mapPreManifestoDocumento.put("doctoServico.localizacaoMercadoria.dsLocalizacaoMercadoria", doctoServico.getLocalizacaoMercadoria().getDsLocalizacaoMercadoria());
    		}
    		if (doctoServico.getClienteByIdClienteRemetente() != null) {
    			mapPreManifestoDocumento.put("doctoServico.clienteByIdClienteRemetente.idCliente", doctoServico.getClienteByIdClienteRemetente().getIdCliente());
    			mapPreManifestoDocumento.put("doctoServico.clienteByIdClienteRemetente.pessoa.nmPessoa", doctoServico.getClienteByIdClienteRemetente().getPessoa().getNmPessoa());
    		}
    		if (doctoServico.getClienteByIdClienteDestinatario() != null) {
    			mapPreManifestoDocumento.put("doctoServico.clienteByIdClienteRemetente.idCliente", doctoServico.getClienteByIdClienteRemetente().getIdCliente());
    			mapPreManifestoDocumento.put("doctoServico.clienteByIdClienteDestinatario.pessoa.nmPessoa", doctoServico.getClienteByIdClienteDestinatario().getPessoa().getNmPessoa());
    		}

    		
    		listPreManifestoDocumento.add(mapPreManifestoDocumento);
    	}
    	
    	rspPreManifestoDocumento.setList(listPreManifestoDocumento);
    	
    	return rspPreManifestoDocumento;
	}
	
	/**
	 * GetRowCount para grid de PreManifestoDocumento
	 * @param criteria
	 * @return
	 */
	public Integer getRowCountPreManifestoDocumento(TypedFlatMap criteria) {
		return getRowCountItemList(criteria, "preManifestoDocumento");
	}
	
    public Object findByIdPreManifestoDocumento(MasterDetailKey key) {
    	PreManifestoDocumento preManifestoDocumento = (PreManifestoDocumento) findItemById(key, "preManifestoDocumento");
    	DoctoServico doctoServico = preManifestoDocumento.getDoctoServico();
    	TypedFlatMap mapPreManifestoDocumento = new TypedFlatMap();
    	
    	mapPreManifestoDocumento.put("idPreManifestoDocumento", preManifestoDocumento.getIdPreManifestoDocumento());
    	
		mapPreManifestoDocumento.put("doctoServico.idDoctoServico", doctoServico.getIdDoctoServico());    		
		mapPreManifestoDocumento.put("doctoServico.tpDocumentoServico.description", doctoServico.getTpDocumentoServico().getDescription());
		mapPreManifestoDocumento.put("doctoServico.tpDocumentoServico.value", doctoServico.getTpDocumentoServico().getValue());
		mapPreManifestoDocumento.put("doctoServico.tpDocumentoServico.status", doctoServico.getTpDocumentoServico().getStatus());    		
		mapPreManifestoDocumento.put("doctoServico.nrDoctoServico", doctoServico.getNrDoctoServico());
		mapPreManifestoDocumento.put("doctoServico.qtVolumes", doctoServico.getQtVolumes());
		mapPreManifestoDocumento.put("doctoServico.psReal", doctoServico.getPsReal());
		mapPreManifestoDocumento.put("doctoServico.vlMercadoria", doctoServico.getVlMercadoria());
		mapPreManifestoDocumento.put("doctoServico.vlTotalDocServico", doctoServico.getVlTotalDocServico());
		mapPreManifestoDocumento.put("doctoServico.dtPrevEntrega", doctoServico.getDtPrevEntrega());
		mapPreManifestoDocumento.put("doctoServico.dhEmissao", doctoServico.getDhEmissao());
		if (doctoServico.getFilialByIdFilialDestino() != null) {
			mapPreManifestoDocumento.put("doctoServico.filialByIdFilialDestino.idFilial", doctoServico.getFilialByIdFilialDestino().getIdFilial());
			mapPreManifestoDocumento.put("doctoServico.filialByIdFilialDestino.sgFilial", doctoServico.getFilialByIdFilialDestino().getSgFilial());
			mapPreManifestoDocumento.put("doctoServico.filialByIdFilialDestino.pessoa.nmFantasia", doctoServico.getFilialByIdFilialDestino().getPessoa().getNmFantasia());	
		}
		if (doctoServico.getMoeda() != null) {
			mapPreManifestoDocumento.put("doctoServico.moeda.idMoeda", doctoServico.getMoeda().getIdMoeda());
			mapPreManifestoDocumento.put("doctoServico.moeda.sgMoeda", doctoServico.getMoeda().getSgMoeda());
			mapPreManifestoDocumento.put("doctoServico.moeda.dsSimbolo", doctoServico.getMoeda().getDsSimbolo());
		}
		if (doctoServico.getServico() != null) {
			mapPreManifestoDocumento.put("doctoServico.servico.idServico", doctoServico.getServico().getIdServico());
			mapPreManifestoDocumento.put("doctoServico.servico.dsServico", doctoServico.getServico().getDsServico());
			mapPreManifestoDocumento.put("doctoServico.servico.tpModal.description", doctoServico.getServico().getTpModal().getDescription());
			mapPreManifestoDocumento.put("doctoServico.servico.tpModal.value", doctoServico.getServico().getTpModal().getValue());
			mapPreManifestoDocumento.put("doctoServico.servico.tpModal.status", doctoServico.getServico().getTpModal().getStatus());
			mapPreManifestoDocumento.put("doctoServico.servico.tpAbrangencia.description", doctoServico.getServico().getTpAbrangencia().getDescription());
			mapPreManifestoDocumento.put("doctoServico.servico.tpAbrangencia.value", doctoServico.getServico().getTpAbrangencia().getValue());
			mapPreManifestoDocumento.put("doctoServico.servico.tpAbrangencia.status", doctoServico.getServico().getTpAbrangencia().getStatus());
			if (doctoServico.getServico().getTipoServico() != null) {
				mapPreManifestoDocumento.put("doctoServico.servico.tipoServico.blPriorizar", doctoServico.getServico().getTipoServico().getBlPriorizar());
			}
		}
		if (doctoServico.getLocalizacaoMercadoria() != null) {
			mapPreManifestoDocumento.put("doctoServico.localizacaoMercadoria.idLocalizacaoMercadoria", doctoServico.getLocalizacaoMercadoria().getIdLocalizacaoMercadoria());
			mapPreManifestoDocumento.put("doctoServico.localizacaoMercadoria.dsLocalizacaoMercadoria", doctoServico.getLocalizacaoMercadoria().getDsLocalizacaoMercadoria());
		}
		if (doctoServico.getClienteByIdClienteRemetente() != null) {
			mapPreManifestoDocumento.put("doctoServico.clienteByIdClienteRemetente.idCliente", doctoServico.getClienteByIdClienteRemetente().getIdCliente());
			mapPreManifestoDocumento.put("doctoServico.clienteByIdClienteRemetente.pessoa.nmPessoa", doctoServico.getClienteByIdClienteRemetente().getPessoa().getNmPessoa());
		}
		if (doctoServico.getClienteByIdClienteDestinatario() != null) {
			mapPreManifestoDocumento.put("doctoServico.clienteByIdClienteRemetente.idCliente", doctoServico.getClienteByIdClienteRemetente().getIdCliente());
			mapPreManifestoDocumento.put("doctoServico.clienteByIdClienteDestinatario.pessoa.nmPessoa", doctoServico.getClienteByIdClienteDestinatario().getPessoa().getNmPessoa());
		}
    	
    	return mapPreManifestoDocumento;    	
    }    	
    
    
	protected MasterEntryConfig createMasterConfig(MasterDetailFactory masterFactory) {
		
		/**
		 * Declaracao da classe pai
		 */		
		MasterEntryConfig config = masterFactory.createMasterEntryConfig(Manifesto.class);
		
		/**
		 * Esta classe e reponsavel por ordenar a List dos filhos que estao
		 * em memoria de acordo com as regras de negocio
		 */
    	Comparator descComparator = new Comparator() {
			public int compare(Object obj1, Object obj2) {
        		return 1; 		
			}
    	};		
		
    	
    	/**
    	 * Esta instancia é responsavel por carregar os 
    	 * items filhos na sessão a partir do banco de dados.
    	 */
    	ItemListConfig itemInit = new ItemListConfig() {
 
    		/**
    		 * Find paginated do filho
    		 * Passa por este ponto apenas na primeira vez em que a list filha e chamada.
    		 * Apos a primeira vez ela e carregada da memoria
    		 * 
    		 * @param masterId id do pai
    		 * @param parameters todos os parametros vindo da tela pai
    		 */    		
			public List initialize(Long masterId, Map parameters) {				
				return getPreManifestoDocumentoService().findPreManifestoDocumentoByIdManifesto(masterId);
			}

			/**
			 * Busca rowCount da grid da tela filha
			 * Passa por este ponto apenas na primeira vez em que a list filha e chamada.
    		 * Apos a primeira vez ela e carregada da memoria
			 * 
			 * @param masterId id do pai
			 * @param parameters todos os parametros vindo da tela pai
			 */			
			public Integer getRowCount(Long masterId, Map parameters) {				
				return getPreManifestoDocumentoService().getRowCountPreManifestoDocumento(masterId);				
			}
			
			/**
			 * Todos os dados a serem carregados na grid pelo form passam antes por este
			 * metodo. Para se fazer uma validacao...
			 * Recomenda-se que o bean em questao seja gerado nesta classe a partir dos
			 * parametros enviados da tela para se evitar um 'ReflectionUtils'
			 * 
			 * @param parameters 
			 * @param bean a ser istanciado
			 * @return Object bean instanciado
			 */
			public Object populateNewItemInstance(Map parameters, Object bean) {
				PreManifestoDocumento preManifestoDocumento = (PreManifestoDocumento) bean;				
				TypedFlatMap param = (TypedFlatMap) parameters;
				
				if (param.getLong("masterId") !=null) {
					preManifestoDocumento.setManifesto(getManifestoService().findById(param.getLong("masterId")));
				}				
				if (param.getLong("doctoServico.idDoctoServico") != null) {
					preManifestoDocumento.setDoctoServico(getDoctoServicoService().findDoctoServicoById(param.getLong("doctoServico.idDoctoServico")));
				}
				
				return preManifestoDocumento;
			}			

    	};    	
    	
    	config.addItemConfig("preManifestoDocumento", PreManifestoDocumento.class, itemInit, descComparator);
    	
		return config;
	}
	
	/**
	 * ##############################################################################################
	 * #							 FIM DOS MÉTODOS PARA TELA DE DF2								#
	 * ##############################################################################################
	 */	

	
	
	
	/**
	 * ##############################################################################################
	 * #				 INICIO DOS MÉTODOS PARA A POP-UP DE ADICIONAR DOCUMENTOS 					#
	 * ##############################################################################################
	 */

	public List findLookupCliente(TypedFlatMap criteria) {		
		return this.getClienteService().findLookup(criteria);
	}
	
	public List findLookupAwb(TypedFlatMap criteria) {
		return this.getAwbService().findLookup(criteria);
	}	
	
	/**
	 * FindPaginated para a grid de Terminal
	 * @param criteria
	 * @return
	 */
	public ResultSetPage findPaginatedTerminal(TypedFlatMap criteria) {
		List idsLocalizacao = new ArrayList();
		LocalizacaoMercadoria localizacaoMercadoria = this.getLocalizacaoMercadoriaService().
																	findLocalizacaoMercadoriaByCodigo(Short.valueOf("24"));
		idsLocalizacao.add(localizacaoMercadoria.getIdLocalizacaoMercadoria());
				
		ResultSetPage rsp = this.getDoctoServicoService().findPaginatedDoctoServicoByLocalizacaoMercadoria(idsLocalizacao, 
																			Boolean.FALSE, criteria, null);
		
    	List listDoctoServico = new ArrayList();
    	for(int i=0; i< rsp.getList().size(); i++) {
    		DoctoServico doctoServico = (DoctoServico) rsp.getList().get(i);    		    		
    		TypedFlatMap mapDoctoServico = new TypedFlatMap();    		
    		
    		mapDoctoServico.put("idDoctoServico", doctoServico.getIdDoctoServico());    		
    		mapDoctoServico.put("tpDocumentoServico.description", doctoServico.getTpDocumentoServico().getDescription());
    		mapDoctoServico.put("tpDocumentoServico.value", doctoServico.getTpDocumentoServico().getValue());
    		mapDoctoServico.put("tpDocumentoServico.status", doctoServico.getTpDocumentoServico().getStatus());    		
    		mapDoctoServico.put("nrDoctoServico", doctoServico.getNrDoctoServico());
    		mapDoctoServico.put("qtVolumes", doctoServico.getQtVolumes());
    		mapDoctoServico.put("psReal", doctoServico.getPsReal());
    		mapDoctoServico.put("vlMercadoria", doctoServico.getVlMercadoria());
    		mapDoctoServico.put("dtPrevEntrega", doctoServico.getDtPrevEntrega());
    		mapDoctoServico.put("dhEmissao", doctoServico.getDhEmissao());
    		mapDoctoServico.put("blBloqueado", doctoServico.getBlBloqueado());
    		if (doctoServico.getFilialByIdFilialDestino() != null) {
    			mapDoctoServico.put("filialByIdFilialDestino.idFilial", doctoServico.getFilialByIdFilialDestino().getIdFilial());
    			mapDoctoServico.put("filialByIdFilialDestino.sgFilial", doctoServico.getFilialByIdFilialDestino().getSgFilial());
    			mapDoctoServico.put("filialByIdFilialDestino.pessoa.nmFantasia", doctoServico.getFilialByIdFilialDestino().getPessoa().getNmFantasia());	
			}
    		if (doctoServico.getFilialByIdFilialOrigem() != null) {
    			mapDoctoServico.put("filialByIdFilialOrigem.idFilial", doctoServico.getFilialByIdFilialOrigem().getIdFilial());
    			mapDoctoServico.put("filialByIdFilialOrigem.sgFilial", doctoServico.getFilialByIdFilialOrigem().getSgFilial());
    			mapDoctoServico.put("filialByIdFilialOrigem.pessoa.nmFantasia", doctoServico.getFilialByIdFilialOrigem().getPessoa().getNmFantasia());	
			}    		
    		if (doctoServico.getMoeda() != null) {
    			mapDoctoServico.put("moeda.idMoeda", doctoServico.getMoeda().getIdMoeda());
    			mapDoctoServico.put("moeda.sgMoeda", doctoServico.getMoeda().getSgMoeda());
    			mapDoctoServico.put("moeda.dsSimbolo", doctoServico.getMoeda().getDsSimbolo());
			}
    		if (doctoServico.getServico() != null) {
    			mapDoctoServico.put("servico.idServico", doctoServico.getServico().getIdServico());
    			mapDoctoServico.put("servico.dsServico", doctoServico.getServico().getDsServico());
    			mapDoctoServico.put("servico.tpModal.description", doctoServico.getServico().getTpModal().getDescription());
    			mapDoctoServico.put("servico.tpModal.value", doctoServico.getServico().getTpModal().getValue());
    			mapDoctoServico.put("servico.tpModal.status", doctoServico.getServico().getTpModal().getStatus());
    			mapDoctoServico.put("servico.tpAbrangencia.description", doctoServico.getServico().getTpAbrangencia().getDescription());
    			mapDoctoServico.put("servico.tpAbrangencia.value", doctoServico.getServico().getTpAbrangencia().getValue());
    			mapDoctoServico.put("servico.tpAbrangencia.status", doctoServico.getServico().getTpAbrangencia().getStatus());
    			if (doctoServico.getServico().getTipoServico() != null) {
    				mapDoctoServico.put("servico.tipoServico.blPriorizar", doctoServico.getServico().getTipoServico().getBlPriorizar());
				}
			}
    		if (doctoServico.getClienteByIdClienteRemetente() != null) {
    			mapDoctoServico.put("clienteByIdClienteRemetente.idCliente", doctoServico.getClienteByIdClienteRemetente().getIdCliente());
    			mapDoctoServico.put("clienteByIdClienteRemetente.pessoa.nmPessoa", doctoServico.getClienteByIdClienteRemetente().getPessoa().getNmPessoa());
			}
    		if (doctoServico.getClienteByIdClienteDestinatario() != null) {
    			mapDoctoServico.put("clienteByIdClienteDestinatario.idCliente", doctoServico.getClienteByIdClienteDestinatario().getIdCliente());
    			mapDoctoServico.put("clienteByIdClienteDestinatario.pessoa.nmPessoa", doctoServico.getClienteByIdClienteDestinatario().getPessoa().getNmPessoa());
			}
    		if (doctoServico.getRotaColetaEntregaByIdRotaColetaEntregaReal() != null) {
    			mapDoctoServico.put("rotaColetaEntregaByIdRotaColetaEntregaReal.idRotaColetaEntrega", doctoServico.getRotaColetaEntregaByIdRotaColetaEntregaReal().getIdRotaColetaEntrega());
			}     		
    		if (doctoServico.getPaisOrigem() != null) {
    			mapDoctoServico.put("paisOrigem.idPais", doctoServico.getPaisOrigem().getIdPais());
    		}
    		
    		
    		/* 
    		 * Busca o dhEvento da tabela de EventoDocumentoServico para ver a diferença entre a data atual
    		 * e assim buscar o número de dias no terminal. 
    		 */
    		DateTime dhEvento = this.getEventoDocumentoServicoService().
 				findMaiorDhEventoByIdDoctoServicoByIdsLocalizacaoMercadoria(doctoServico.getIdDoctoServico(), idsLocalizacao);
    		
    		Duration duration = new Duration(dhEvento, JTDateTimeUtils.getDataHoraAtual());
    		Integer dias = Integer.valueOf((int)(duration.getMillis() / (1000 * 60 * 60 * 24)));
    		mapDoctoServico.put("diasTerminal", dias);
    		
    		/*
    		 * Verifica se dtPrevEntrega é menor que a data atual, se o tpModal é igual a 'A'(Áereo)
    		 * e se o tipo de serviço possui blPriorizar = 'S'. Caso essas cláusulas sejam verdadeiras,
    		 * colocar o registro em destaque na grid.
    		 */
    		if (doctoServico.getDtPrevEntrega()!=null){
    			if ( doctoServico.getDtPrevEntrega().compareTo(JTDateTimeUtils.getDataAtual()) < 0 &&
    					doctoServico.getServico().getTpModal().getValue().equals("A") &&
    					doctoServico.getServico().getTipoServico().getBlPriorizar().booleanValue() ) {    			
    				mapDoctoServico.put("emDestaque", Boolean.TRUE);
    			} else {
    				mapDoctoServico.put("emDestaque", Boolean.FALSE);
    			}
    		}    		
    		
    		listDoctoServico.add(mapDoctoServico);
    	}
    	
    	rsp.setList(listDoctoServico);

		return rsp;
	}
	

	/**
	 * FindPaginated para a grid de Descarga
	 * @param criteria
	 * @return
	 */
	public ResultSetPage findPaginatedDescarga(TypedFlatMap criteria) {
		List idsLocalizacao = new ArrayList();
		LocalizacaoMercadoria localizacaoMercadoria = this.getLocalizacaoMercadoriaService().
																	findLocalizacaoMercadoriaByCodigo(Short.valueOf("5"));
		idsLocalizacao.add(localizacaoMercadoria.getIdLocalizacaoMercadoria());
				
		ResultSetPage rsp = this.getDoctoServicoService().findPaginatedDoctoServicoByLocalizacaoMercadoria(idsLocalizacao, 
																			Boolean.FALSE, criteria, null);
		
    	List listDoctoServico = new ArrayList();
    	for(int i=0; i< rsp.getList().size(); i++) {
    		DoctoServico doctoServico = (DoctoServico) rsp.getList().get(i);    		    		
    		TypedFlatMap mapDoctoServico = new TypedFlatMap();    		
    		
    		mapDoctoServico.put("idDoctoServico", doctoServico.getIdDoctoServico());    		
    		mapDoctoServico.put("tpDocumentoServico.description", doctoServico.getTpDocumentoServico().getDescription());
    		mapDoctoServico.put("tpDocumentoServico.value", doctoServico.getTpDocumentoServico().getValue());
    		mapDoctoServico.put("tpDocumentoServico.status", doctoServico.getTpDocumentoServico().getStatus());    		
    		mapDoctoServico.put("nrDoctoServico", doctoServico.getNrDoctoServico());
    		mapDoctoServico.put("qtVolumes", doctoServico.getQtVolumes());
    		mapDoctoServico.put("psReal", doctoServico.getPsReal());
    		mapDoctoServico.put("vlMercadoria", doctoServico.getVlMercadoria());
    		mapDoctoServico.put("dtPrevEntrega", doctoServico.getDtPrevEntrega());
    		mapDoctoServico.put("dhEmissao", doctoServico.getDhEmissao());
    		mapDoctoServico.put("blBloqueado", doctoServico.getBlBloqueado());
    		if (doctoServico.getFilialByIdFilialDestino() != null) {
    			mapDoctoServico.put("filialByIdFilialDestino.idFilial", doctoServico.getFilialByIdFilialDestino().getIdFilial());
    			mapDoctoServico.put("filialByIdFilialDestino.sgFilial", doctoServico.getFilialByIdFilialDestino().getSgFilial());
    			mapDoctoServico.put("filialByIdFilialDestino.pessoa.nmFantasia", doctoServico.getFilialByIdFilialDestino().getPessoa().getNmFantasia());	
			}
    		if (doctoServico.getFilialByIdFilialOrigem() != null) {
    			mapDoctoServico.put("filialByIdFilialOrigem.idFilial", doctoServico.getFilialByIdFilialOrigem().getIdFilial());
    			mapDoctoServico.put("filialByIdFilialOrigem.sgFilial", doctoServico.getFilialByIdFilialOrigem().getSgFilial());
    			mapDoctoServico.put("filialByIdFilialOrigem.pessoa.nmFantasia", doctoServico.getFilialByIdFilialOrigem().getPessoa().getNmFantasia());	
			} 
    		if (doctoServico.getMoeda() != null) {
    			mapDoctoServico.put("moeda.idMoeda", doctoServico.getMoeda().getIdMoeda());
    			mapDoctoServico.put("moeda.sgMoeda", doctoServico.getMoeda().getSgMoeda());
    			mapDoctoServico.put("moeda.dsSimbolo", doctoServico.getMoeda().getDsSimbolo());
			}
    		if (doctoServico.getServico() != null) {
    			mapDoctoServico.put("servico.idServico", doctoServico.getServico().getIdServico());
    			mapDoctoServico.put("servico.dsServico", doctoServico.getServico().getDsServico());
    			mapDoctoServico.put("servico.tpModal.description", doctoServico.getServico().getTpModal().getDescription());
    			mapDoctoServico.put("servico.tpModal.value", doctoServico.getServico().getTpModal().getValue());
    			mapDoctoServico.put("servico.tpModal.status", doctoServico.getServico().getTpModal().getStatus());
    			mapDoctoServico.put("servico.tpAbrangencia.description", doctoServico.getServico().getTpAbrangencia().getDescription());
    			mapDoctoServico.put("servico.tpAbrangencia.value", doctoServico.getServico().getTpAbrangencia().getValue());
    			mapDoctoServico.put("servico.tpAbrangencia.status", doctoServico.getServico().getTpAbrangencia().getStatus());
    			if (doctoServico.getServico().getTipoServico() != null) {
    				mapDoctoServico.put("servico.tipoServico.blPriorizar", doctoServico.getServico().getTipoServico().getBlPriorizar());
				}
			}
    		if (doctoServico.getClienteByIdClienteRemetente() != null) {
    			mapDoctoServico.put("clienteByIdClienteRemetente.idCliente", doctoServico.getClienteByIdClienteRemetente().getIdCliente());
    			mapDoctoServico.put("clienteByIdClienteRemetente.pessoa.nmPessoa", doctoServico.getClienteByIdClienteRemetente().getPessoa().getNmPessoa());
			}
    		if (doctoServico.getClienteByIdClienteDestinatario() != null) {
    			mapDoctoServico.put("clienteByIdClienteDestinatario.idCliente", doctoServico.getClienteByIdClienteDestinatario().getIdCliente());
    			mapDoctoServico.put("clienteByIdClienteDestinatario.pessoa.nmPessoa", doctoServico.getClienteByIdClienteDestinatario().getPessoa().getNmPessoa());
			}
    		if (doctoServico.getRotaColetaEntregaByIdRotaColetaEntregaReal() != null) {
    			mapDoctoServico.put("rotaColetaEntregaByIdRotaColetaEntregaReal.idRotaColetaEntrega", doctoServico.getRotaColetaEntregaByIdRotaColetaEntregaReal().getIdRotaColetaEntrega());
			}    		
    		if (doctoServico.getPaisOrigem() != null) {
    			mapDoctoServico.put("paisOrigem.idPais", doctoServico.getPaisOrigem().getIdPais());
    		}
    		
    		
    		/* 
    		 * Busca o dhEvento da tabela de EventoDocumentoServico para ver a diferença entre a data atual
    		 * e assim buscar o número de dias no terminal. 
    		 */
    		DateTime dhEvento = this.getEventoDocumentoServicoService().
    			findMaiorDhEventoByIdDoctoServicoByIdsLocalizacaoMercadoria(doctoServico.getIdDoctoServico(), idsLocalizacao);
    		
    		Duration duration = new Duration(dhEvento, JTDateTimeUtils.getDataHoraAtual());
    		Integer dias = Integer.valueOf((int)(duration.getMillis() / (1000 * 60 * 60 * 24)));
    		mapDoctoServico.put("diasTerminal", dias);
    		
    		/*
    		 * Verifica se dtPrevEntrega é menos que a data atual, se o tpModal é igual a 'A'(Áereo)
    		 * e se o tipo de serviço possui blPriorizar = 'S'. Caso essas cláusulas sejam verdadeiras,
    		 * colocar o registro em destaque na grid.
    		 */
    		if ( doctoServico.getDtPrevEntrega().compareTo(JTDateTimeUtils.getDataAtual()) < 0 &&
    		    doctoServico.getServico().getTpModal().getValue().equals("A") &&
    		    doctoServico.getServico().getTipoServico().getBlPriorizar().booleanValue() ) {    			
    			mapDoctoServico.put("emDestaque", Boolean.TRUE);
    		} else {
    			mapDoctoServico.put("emDestaque", Boolean.FALSE);
    		}
    		
    		
    		listDoctoServico.add(mapDoctoServico);
    	}
    	
    	rsp.setList(listDoctoServico);

		return rsp;
	}	
	
		
	/**
	 * FindPaginated para a grid de Descarga
	 * @param criteria
	 * @return
	 */
	public ResultSetPage findPaginatedChegadas(TypedFlatMap criteria) {
		List listTpStatusColeta = new ArrayList();
		listTpStatusColeta.add("AD");
		listTpStatusColeta.add("ED");
		listTpStatusColeta.add("NT");
		
		List listPedidoColeta = this.getPedidoColetaService().findPedidoColetaByTpStatusColetaByIdFilialResponsavel(
																			listTpStatusColeta, 
																			SessionUtils.getFilialSessao().getIdFilial());
		
		List listPedidosDetalhes = new ArrayList();
    	for(int i=0; i< listPedidoColeta.size(); i++) {
    		PedidoColeta pedidoColeta = (PedidoColeta) listPedidoColeta.get(i);
    		TypedFlatMap mapPedidoColeta = new TypedFlatMap();  
    		
    		List listDetalheColeta = this.getDetalheColetaService().findDetalheColeta(pedidoColeta.getIdPedidoColeta());
    		for (Iterator iter = listDetalheColeta.iterator(); iter.hasNext();) {
				DetalheColeta detalheColeta = (DetalheColeta) iter.next();    		
    			
				mapPedidoColeta.put("idPedidoColeta", pedidoColeta.getIdPedidoColeta());
	    		mapPedidoColeta.put("nrColeta", pedidoColeta.getNrColeta());
	    		    		
	     		if (pedidoColeta.getFilialByIdFilialResponsavel() != null) {
	     			mapPedidoColeta.put("filialByIdFilialResponsavel.sgFilial", pedidoColeta.getFilialByIdFilialResponsavel().getSgFilial());
				}
	    		if (pedidoColeta.getCliente() != null) {
	    			mapPedidoColeta.put("cliente.pessoa.nmPessoa", pedidoColeta.getCliente().getPessoa().getNmPessoa());
				}
				
				mapPedidoColeta.put("psReal", detalheColeta.getPsMercadoria());
				mapPedidoColeta.put("qtVolumes", detalheColeta.getQtVolumes());
				mapPedidoColeta.put("vlMercadoria", detalheColeta.getVlMercadoria());	
				if (detalheColeta.getServico() != null) {
					mapPedidoColeta.put("servico.dsServico", detalheColeta.getServico().getDsServico());
				}
				if (detalheColeta.getNaturezaProduto() != null) {
					mapPedidoColeta.put("naturezaProduto.dsNaturezaProduto", detalheColeta.getNaturezaProduto().getDsNaturezaProduto());
				}
	    		if (detalheColeta.getMoeda() != null) {
	    			mapPedidoColeta.put("moeda.idMoeda", detalheColeta.getMoeda().getIdMoeda());
	    			mapPedidoColeta.put("moeda.sgMoeda", detalheColeta.getMoeda().getSgMoeda());
	    			mapPedidoColeta.put("moeda.dsSimbolo", detalheColeta.getMoeda().getDsSimbolo());
				}
				if (detalheColeta.getFilial() != null) {
					mapPedidoColeta.put("filialDetalhe.pessoa.nmFantasia", detalheColeta.getFilial().getPessoa().getNmFantasia());
				}
	    		if (detalheColeta.getMunicipio().getUnidadeFederativa().getPais() != null) {
	    			mapPedidoColeta.put("paisOrigem.idPais", detalheColeta.getMunicipio().getUnidadeFederativa().getPais().getIdPais());
	    		}
				
				listPedidosDetalhes.add(mapPedidoColeta);				
			}
    	}

    	ResultSetPage rsp = new ResultSetPage(Integer.valueOf(1), false, false, Collections.EMPTY_LIST);
    	rsp.setCurrentPage(criteria.getInteger("_currentPage"));
    	rsp.setList(listPedidosDetalhes);
		return rsp;
	}
	
	/**
	 * FindPaginated para a grid de Descarga
	 * @param criteria
	 * @return
	 */
	public ResultSetPage findPaginatedExecutadas(TypedFlatMap criteria) {
		List listTpStatusColeta = new ArrayList();
		listTpStatusColeta.add("EX");
		
		List listPedidoColeta = this.getPedidoColetaService().findPedidoColetaByTpStatusColetaByIdFilialResponsavel(
																			listTpStatusColeta, 
																			SessionUtils.getFilialSessao().getIdFilial());
		
		List listPedidosDetalhes = new ArrayList();
    	for(int i=0; i< listPedidoColeta.size(); i++) {
    		PedidoColeta pedidoColeta = (PedidoColeta) listPedidoColeta.get(i);
    		TypedFlatMap mapPedidoColeta = new TypedFlatMap();  
    		
    		List listDetalheColeta = this.getDetalheColetaService().findDetalheColeta(pedidoColeta.getIdPedidoColeta());
    		for (Iterator iter = listDetalheColeta.iterator(); iter.hasNext();) {
				DetalheColeta detalheColeta = (DetalheColeta) iter.next();    		
    			
				mapPedidoColeta.put("idPedidoColeta", pedidoColeta.getIdPedidoColeta());
	    		mapPedidoColeta.put("nrColeta", pedidoColeta.getNrColeta());
	    		    		
	     		if (pedidoColeta.getFilialByIdFilialResponsavel() != null) {
	     			mapPedidoColeta.put("filialByIdFilialResponsavel.sgFilial", pedidoColeta.getFilialByIdFilialResponsavel()
	     																					.getSgFilial());
				}
	    		if (pedidoColeta.getCliente() != null) {
	    			mapPedidoColeta.put("cliente.pessoa.nmPessoa", pedidoColeta.getCliente().getPessoa().getNmPessoa());
				}
				
				mapPedidoColeta.put("psReal", detalheColeta.getPsMercadoria());
				mapPedidoColeta.put("qtVolumes", detalheColeta.getQtVolumes());
				mapPedidoColeta.put("vlMercadoria", detalheColeta.getVlMercadoria());	
				if (detalheColeta.getServico() != null) {
					mapPedidoColeta.put("servico.dsServico", detalheColeta.getServico().getDsServico());
				}
				if (detalheColeta.getNaturezaProduto() != null) {
					mapPedidoColeta.put("naturezaProduto.dsNaturezaProduto", detalheColeta.getNaturezaProduto()
																						  .getDsNaturezaProduto());
				}
	    		if (detalheColeta.getMoeda() != null) {
	    			mapPedidoColeta.put("moeda.idMoeda", detalheColeta.getMoeda().getIdMoeda());
	    			mapPedidoColeta.put("moeda.sgMoeda", detalheColeta.getMoeda().getSgMoeda());
	    			mapPedidoColeta.put("moeda.dsSimbolo", detalheColeta.getMoeda().getDsSimbolo());
				}
				if (detalheColeta.getFilial() != null) {
					mapPedidoColeta.put("filialDetalhe.pessoa.nmFantasia", detalheColeta.getFilial().getPessoa()
																									.getNmFantasia());
				}
	    		if (detalheColeta.getMunicipio().getUnidadeFederativa().getPais() != null) {
	    			mapPedidoColeta.put("paisOrigem.idPais", detalheColeta.getMunicipio().getUnidadeFederativa().getPais()
	    																										.getIdPais());
	    		}
				
				listPedidosDetalhes.add(mapPedidoColeta);				
			}
    	}

    	ResultSetPage rsp = ResultSetPage.EMPTY_RESULTSET;
    	rsp.setCurrentPage(criteria.getInteger("_currentPage"));
    	rsp.setList(listPedidosDetalhes);

		return rsp;
	}			
		
		
	/**
	 * Método que calcula os totais de peso, volume, valor mercadoria e quantidade de documentos.
	 * @param criteria
	 * @return
	 */
	public TypedFlatMap getCalculaTotais(TypedFlatMap criteria) {		
		TypedFlatMap totais = new TypedFlatMap();
		
		BigDecimal totalMercadoria = BigDecimalUtils.ZERO;
		BigDecimal totalPeso = BigDecimalUtils.ZERO;		
		Integer totalVolumes = Integer.valueOf(0);
		Integer totalDocumentos = Integer.valueOf(0);
				
		List listObjeto = criteria.getList("list");
		if (listObjeto != null) {
			for (Iterator iter = listObjeto.iterator(); iter.hasNext();) {
				TypedFlatMap mapObjeto = (TypedFlatMap) iter.next();
				
				totalMercadoria = totalMercadoria.add( this.getConversaoMoedaService().findConversaoMoeda(
																	//FIXME O pais origem nao deveria vir do doctoServico?
																	 mapObjeto.getLong("paisOrigem.idPais"),
																	 mapObjeto.getLong("moeda.idMoeda"),
																	 SessionUtils.getPaisSessao().getIdPais(),
																	 SessionUtils.getMoedaSessao().getIdMoeda(),
																	 JTDateTimeUtils.getDataAtual(),
																	 mapObjeto.getBigDecimal("vlMercadoria")) );
	
				totalPeso = totalPeso.add(mapObjeto.getBigDecimal("psReal"));
				totalVolumes = Integer.valueOf(totalVolumes.intValue() + mapObjeto.getInteger("qtVolumes").intValue());
			}
			totalDocumentos = Integer.valueOf(listObjeto.size());
		}
		totais.put("totalVolumes", totalVolumes);
		totais.put("totalPeso", FormatUtils.formatDecimal("#,###,##0.000", totalPeso));
		totais.put("totalMercadoria", SessionUtils.getMoedaSessao().getSiglaSimbolo() + " " +
									  FormatUtils.formatDecimal("#,###,###,###,##0.00", totalMercadoria));
		totais.put("totalDocumentos", totalDocumentos);
				
		return totais;
	}
	
	
	/**
	 * Método chamado ao selecionar um registro na grid de DoctoServico para validação de situações
	 * @param criteria
	 * @return
	 */
	public TypedFlatMap getValidacaoDoctoServico(TypedFlatMap criteria) {
		TypedFlatMap mapResult = new TypedFlatMap();
		mapResult.put("rowIndex", criteria.getLong("rowIndex"));
		
		// Se for to tipo 'Entrega'
		if (criteria.getString("manifesto.tpManifesto").equals("E")) {
				
			// Verifica se cliente Remetente do Documento em questão possui necessidade de Agendamento 
			// e se o Documento já foi agendado.
			Cliente clienteRemetente = this.getClienteService()
												.findByIdInitLazyProperties(criteria.getLong("doctoServico.clienteByIdClienteRemetente.idCliente"), false);
			Pessoa clienteDestinatario = this.getPessoaService()
												.findById(criteria.getLong("doctoServico.clienteByIdClienteDestinatario.idCliente"));
			
			if ( (clienteRemetente.getBlAgendamentoPessoaFisica().booleanValue() && 
				  clienteDestinatario.getTpPessoa().getValue().equals("F")) 
				 ||
				 (clienteRemetente.getBlAgendamentoPessoaJuridica().booleanValue() && 
				  clienteDestinatario.getTpPessoa().getValue().equals("J")) ) {
	
				AgendamentoDoctoServico agendamentoDoctoServico = null;
				
				List listAgendamentoDoctoServico = this.getAgendamentoDoctoServicoService().
											findAgendamentoByIdDoctoServico(criteria.getLong("doctoServico.idDoctoServico"));
				for (Iterator iter = listAgendamentoDoctoServico.iterator(); iter.hasNext();) {
					AgendamentoDoctoServico agendamento = (AgendamentoDoctoServico) iter.next();

					if (agendamento.getTpSituacao().getValue().equals("A") && 
							agendamento.getAgendamentoEntrega().getTpSituacaoAgendamento().getValue().equals("A")) {
						agendamentoDoctoServico = agendamento;					
					}
				}
				
				if (agendamentoDoctoServico != null) {
		
					// Testa se data do Agendamento é maior ou menos que a data atual
					if (agendamentoDoctoServico.getAgendamentoEntrega().getDtAgendamento()
																	   .compareTo(JTDateTimeUtils.getDataAtual()) > 0 ) {		    			
						String dataAgendamento = JTFormatUtils.format(agendamentoDoctoServico.
																getAgendamentoEntrega().getDtAgendamento(), JTFormatUtils.SHORT);
						mapResult.put("mensagem", this.getConfiguracoesFacade().getMensagem("LMS-05044") + dataAgendamento);
						return mapResult;
	
					} else if (agendamentoDoctoServico.getAgendamentoEntrega().getDtAgendamento()
																			  .compareTo(JTDateTimeUtils.getDataAtual()) < 0 ) {
						mapResult.put("mensagem", this.getConfiguracoesFacade().getMensagem("LMS-05045"));
						return mapResult;
					}
	
				}
			}
	
			// Verifica se o Documento é do tipo 'RRE' e permite incluir no manifesto somente se
			// for vinculada a uma MIR do tipo 'Administrativo para entrega'.
			if (criteria.getString("doctoServico.tpDocumentoServico.value").equals("RRE")) {
				DocumentoMir documentoMir = this.getDocumentoMirService().
						findDocumentoMirByIdReciboReembolso(criteria.getLong("doctoServico.idDoctoServico"), "AE");			

				if (documentoMir == null) {
					mapResult.put("mensagem", this.getConfiguracoesFacade().getMensagem("LMS-05046"));
					return mapResult;
				}
			}

			// Verifica se a rota de entrega do documento é diferente da rota de entrega 
			// do Controle de Carga no Manifesto em questão
			if (criteria.getLong("manifesto.controleCarga.rotaColetaEntrega.idRotaColetaEntrega") != null) {
				if ( !criteria.getLong("doctoServico.rotaColetaEntregaByIdRotaColetaEntregaReal.idRotaColetaEntrega").equals(
				     criteria.getLong("manifesto.controleCarga.rotaColetaEntrega.idRotaColetaEntrega")) ) {
					mapResult.put("mensagem", this.getConfiguracoesFacade().getMensagem("LMS-05047"));
					mapResult.put("confirmar", Boolean.TRUE);
					return mapResult;
				}
			}
			
		}
		
		// Verifica se o documento está bloqueado.
		if (criteria.getBoolean("doctoServico.blBloqueado").booleanValue()) {
			mapResult.put("mensagem", this.getConfiguracoesFacade().getMensagem("LMS-05048"));
			return mapResult;
		}
		
		// Verifica se o modal do documento é diferente do modal do Manifesto em questão
		if ( !criteria.getString("doctoServico.servico.tpModal.value").equals(criteria.getString("manifesto.tpModal")) ) {
			mapResult.put("mensagem", this.getConfiguracoesFacade().getMensagem("LMS-05049"));
			mapResult.put("confirmar", Boolean.TRUE);
			return mapResult;			
		}
		
		// Verificação de documentos com filial de destino diferente do destino do manifesto.
		if (criteria.getLong("manifesto.idFilialDestino") != null) {
			Filial filialDestinoSubstituta = this.getSubstAtendimentoFilialService()
										.findFilialDestinoDoctoServico(criteria.getLong("doctoServico.idDoctoServico"), null, null, null);
			if (!criteria.getLong("manifesto.idFilialDestino").equals(filialDestinoSubstituta.getIdFilial())) {			
				Pessoa pessoa = this.getPessoaService().findById(filialDestinoSubstituta.getIdFilial());
				mapResult.put("mensagem", this.getConfiguracoesFacade().getMensagem("LMS-05051") + pessoa.getNmFantasia());
				return mapResult;
			}
		}
				
		return mapResult;
	}
	
	
	/**
	 * Método que retorna um TypedFlatMap com o id do DoctoServico pesquisado atraves do Tipo de Documento, 
	 * da Filial de Origem e do Número.
	 * @param criteria
	 * @return
	 */
	public TypedFlatMap findDoctoServico(TypedFlatMap criteria) {		
		DoctoServico doctoServico = this.getDoctoServicoService()
				.findDoctoServicoByTpDocumentoByIdFilialOrigemByNrDoctoServicoByIdFilialLocalizacao(
																criteria.getString("doctoServico.tpDocumento"),
																criteria.getLong("doctoServico.filialByIdFilialOrigem.idFilial"),
																criteria.getLong("doctoServico.nrDoctoServico"), 
																SessionUtils.getFilialSessao().getIdFilial());
		
		if (doctoServico == null) {
			throw new BusinessException("LMS-05050");
		}
		
		TypedFlatMap mapDoctoServico = new TypedFlatMap();
		mapDoctoServico.put("idDoctoServico", doctoServico.getIdDoctoServico());    		
		mapDoctoServico.put("tpDocumentoServico.value", doctoServico.getTpDocumentoServico().getValue());
		mapDoctoServico.put("blBloqueado", doctoServico.getBlBloqueado());
		if (doctoServico.getFilialByIdFilialDestino() != null) {
			mapDoctoServico.put("filialByIdFilialDestino.idFilial", doctoServico.getFilialByIdFilialDestino().getIdFilial());
		}
		if (doctoServico.getServico() != null) {
			mapDoctoServico.put("servico.tpModal.value", doctoServico.getServico().getTpModal().getValue());
		}
		if (doctoServico.getClienteByIdClienteRemetente() != null) {
			mapDoctoServico.put("clienteByIdClienteRemetente.idCliente", doctoServico.getClienteByIdClienteRemetente().getIdCliente());
		}
		if (doctoServico.getClienteByIdClienteDestinatario() != null) {
			mapDoctoServico.put("clienteByIdClienteDestinatario.idCliente", doctoServico.getClienteByIdClienteDestinatario().getIdCliente());
		}
		if (doctoServico.getRotaColetaEntregaByIdRotaColetaEntregaReal() != null) {
			mapDoctoServico.put("rotaColetaEntregaByIdRotaColetaEntregaReal.idRotaColetaEntrega", doctoServico.getRotaColetaEntregaByIdRotaColetaEntregaReal().getIdRotaColetaEntrega());
		} 
		
		return mapDoctoServico;
	}
	
    /**
     * FindLookup para filial do tipo de DoctoServico Escolhido.
     */ 
    public List findLookupServiceDocumentFilialCTR(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }
    public List findLookupServiceDocumentFilialCRT(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }
    public List findLookupServiceDocumentFilialMDA(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }
    public List findLookupServiceDocumentFilialRRE(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }  
    public List findLookupServiceDocumentFilialNFT(Map criteria) {
    	return findLookupFilialByDocumentoServico(criteria);
    }  
    
    /**
     * FindLookup para a tag DoctoServico.
     */  
    public List findLookupServiceDocumentNumberCTR(Map criteria) {
    	return this.getConhecimentoService().findLookup(criteria);
    }
    public List findLookupServiceDocumentNumberCRT(Map criteria) {    	
    	return this.getCtoInternacionalService().findLookup(criteria);
    }    
    public List findLookupServiceDocumentNumberMDA(Map criteria) {
    	return this.getMdaService().findLookup(criteria);
    }
    public List findLookupServiceDocumentNumberRRE(Map criteria) {
    	return this.getReciboReembolsoService().findLookup(criteria);
    }
    public List findLookupServiceDocumentNumberNFT(Map criteria) {
    	return this.getConhecimentoService().findLookup(criteria);
    }
	
	/** 
     * Busca a filial baseado no documento de serviço
     * @param criteria
     * @return
     */
    public List findLookupFilialByDocumentoServico(Map criteria) {
    	
    	FilterList filter = new FilterList(getFilialService().findLookup(criteria)) {
			public Map filterItem(Object item) {
	    			Filial filial = (Filial)item;
	    			TypedFlatMap typedFlatMap = new TypedFlatMap();
		    		typedFlatMap.put("idFilial", filial.getIdFilial());
			    	typedFlatMap.put("sgFilial", filial.getSgFilial());
				return typedFlatMap;
			}
    	};
    	
    	return (List)filter.doFilter();
    }
    
	/**
	 * ##############################################################################################
	 * #				 FIM DOS MÉTODOS PARA A POP-UP DE ADICIONAR DOCUMENTOS 						#
	 * ##############################################################################################
	 */
	



}
