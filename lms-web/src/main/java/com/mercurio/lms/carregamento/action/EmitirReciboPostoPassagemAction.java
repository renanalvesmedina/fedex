package com.mercurio.lms.carregamento.action;

import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.FindDefinition;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.report.ReportExecutionManager;
import com.mercurio.adsm.framework.util.FilterResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.ReciboPostoPassagem;
import com.mercurio.lms.carregamento.model.service.ControleCargaService;
import com.mercurio.lms.carregamento.model.service.ReciboPostoPassagemService;
import com.mercurio.lms.carregamento.report.EmitirReciboPostoPassagemService;
import com.mercurio.lms.municipios.model.service.FilialService;

/**
 * Generated by: ADSM ActionGenerator 
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.carregamento.emitirReciboPostoPassagemAction"
 */

public class EmitirReciboPostoPassagemAction {
	
	private FilialService filialService;
	private ControleCargaService controleCargaService;
	private ReciboPostoPassagemService reciboPostoPassagemService;
	private ReportExecutionManager reportExecutionManager;
	private EmitirReciboPostoPassagemService emitirReciboPostoPassagemService;
	
	public ControleCargaService getControleCargaService() {
		return controleCargaService;
	}

	public void setControleCargaService(ControleCargaService controleCargaService) {
		this.controleCargaService = controleCargaService;
	}

	public FilialService getFilialService() {
		return filialService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public ReciboPostoPassagemService getReciboPostoPassagemService() {
		return reciboPostoPassagemService;
	}

	public void setReciboPostoPassagemService(ReciboPostoPassagemService reciboPostoPassagemService) {
		this.reciboPostoPassagemService = reciboPostoPassagemService;
	}

	public String execute(TypedFlatMap params) throws Exception {
		return this.reportExecutionManager.generateReportLocator(emitirReciboPostoPassagemService, params);
	}
	
	/*
	 * Metodos referentes a regra de negocio da tela.
	 */
	public void setComunicarUnidadesEmissaoRimReportService(EmitirReciboPostoPassagemService emitirReciboPostoPassagemService) {
		this.emitirReciboPostoPassagemService = emitirReciboPostoPassagemService;
	}	
	
	public Integer getRowCount(TypedFlatMap criteria) {
		Long idControleCarga = criteria.getLong("controleCarga.idControleCarga");
		Boolean blMostrarCancelados = criteria.getBoolean("blMostrarCancelados");
		return this.getReciboPostoPassagemService().getRowCountByIdControleCarga(idControleCarga, blMostrarCancelados);
	}

	public ResultSetPage findPaginated(TypedFlatMap criteria) {
		FindDefinition findDefinition = FindDefinition.createFindDefinition(criteria);
		Long idControleCarga = criteria.getLong("controleCarga.idControleCarga");
		Boolean blMostrarCancelados = criteria.getBoolean("blMostrarCancelados");
		FilterResultSetPage filterResultSetPage = new FilterResultSetPage(
			this.getReciboPostoPassagemService().findPaginatedByControleCarga(idControleCarga, blMostrarCancelados, findDefinition)) {
				public Map filterItem(Object item) {
					ReciboPostoPassagem reciboPostoPassagem = (ReciboPostoPassagem)item;
					TypedFlatMap typedFlatMap = new TypedFlatMap();
					typedFlatMap.put("idReciboPostoPassagem", reciboPostoPassagem.getIdReciboPostoPassagem());
					typedFlatMap.put("filial.sgFilial", reciboPostoPassagem.getFilial().getSgFilial());
					typedFlatMap.put("nrReciboPostoPassagem", reciboPostoPassagem.getNrReciboPostoPassagem());
					typedFlatMap.put("tpStatusRecibo", reciboPostoPassagem.getTpStatusRecibo());
					typedFlatMap.put("dhEmissao", reciboPostoPassagem.getDhEmissao());
					typedFlatMap.put("moeda.sgMoeda", reciboPostoPassagem.getMoeda().getSgMoeda());
					typedFlatMap.put("moeda.dsSimbolo", reciboPostoPassagem.getMoeda().getDsSimbolo());
					typedFlatMap.put("vlBruto", reciboPostoPassagem.getVlBruto());
					
					if (reciboPostoPassagem.getUsuario()!=null) {
						typedFlatMap.put("usuario.nmUsuario", reciboPostoPassagem.getUsuario().getNmUsuario());
					}
					
    				return typedFlatMap;
				}
			};
		
		return (ResultSetPage)filterResultSetPage.doFilter();
	}
	
	public void updateReciboPostoPassagem(TypedFlatMap criteria) {
		Long idReciboPostoPassagem = criteria.getLong("idReciboPostoPassagem");
		this.getReciboPostoPassagemService().updateReciboPostoPassagem(idReciboPostoPassagem);
	}
	
	/*
	 * Metodos referentes aos objetos da tela de comunicar
	 */
	public List findLookupBySgFilial(Map criteria) {
		return this.getFilialService().findLookupBySgFilial((String)criteria.get("sgFilial"), (String)criteria.get("tpAcesso"));
	}
	
	public List findLookupControleCarga(Map criteria) {
		return this.getControleCargaService().findLookup(criteria);
	}

	public void setReportExecutionManager(
			ReportExecutionManager reportExecutionManager) {
		this.reportExecutionManager = reportExecutionManager;
	}
	
}
