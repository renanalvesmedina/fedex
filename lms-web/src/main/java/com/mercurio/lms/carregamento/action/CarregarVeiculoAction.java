package com.mercurio.lms.carregamento.action;

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.CarregamentoDescarga;
import com.mercurio.lms.carregamento.model.EventoControleCarga;
import com.mercurio.lms.carregamento.model.service.CarregamentoDescargaService;
import com.mercurio.lms.carregamento.model.service.ControleCargaService;
import com.mercurio.lms.carregamento.model.service.EventoControleCargaService;
import com.mercurio.lms.carregamento.model.service.ManifestoService;
import com.mercurio.lms.carregamento.model.service.PreManifestoDocumentoService;
import com.mercurio.lms.configuracoes.model.service.MoedaService;
import com.mercurio.lms.configuracoes.model.service.PessoaService;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.PostoAvancadoService;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 * 
 * Não inserir documentação após ou remover a tag do XDoclet a seguir. O valor
 * do <code>id</code> informado abaixo deve ser utilizado para referenciar
 * este serviço.
 * 
 * @spring.bean id="lms.carregamento.carregarVeiculoAction"
 */

public class CarregarVeiculoAction extends CrudAction {

	private ControleCargaService controleCargaService;
	private EventoControleCargaService eventoControleCargaService;
	private FilialService filialService;
	private MoedaService moedaService;
	private PostoAvancadoService postoAvancadoService;
	private PessoaService pessoaService;
	private PreManifestoDocumentoService preManifestoDocumentoService;
	private ManifestoService manifestoService;

	public ControleCargaService getControleCargaService() {
		return this.controleCargaService;
	}
	public void setControleCargaService(ControleCargaService controleCargaService) {
		this.controleCargaService = controleCargaService;
	}
	public EventoControleCargaService getEventoControleCargaService() {
		return eventoControleCargaService;
	}
	public void setEventoControleCargaService(EventoControleCargaService eventoControleCargaService) {
		this.eventoControleCargaService = eventoControleCargaService;
	}
	public FilialService getFilialService() {
		return filialService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public MoedaService getMoedaService() {
		return moedaService;
	}
	public void setMoedaService(MoedaService moedaService) {
		this.moedaService = moedaService;
	}
	public PostoAvancadoService getPostoAvancadoService() {
		return postoAvancadoService;
	}
	public void setPostoAvancadoService(PostoAvancadoService postoAvancadoService) {
		this.postoAvancadoService = postoAvancadoService;
	}	
	public PessoaService getPessoaService() {
		return pessoaService;
	}
	public void setPessoaService(PessoaService pessoaService) {
		this.pessoaService = pessoaService;
	}	
	public PreManifestoDocumentoService getPreManifestoDocumentoService() {
		return preManifestoDocumentoService;
	}
	public void setPreManifestoDocumentoService(PreManifestoDocumentoService preManifestoDocumentoService) {
		this.preManifestoDocumentoService = preManifestoDocumentoService;
	}
	public void setManifestoService(ManifestoService manifestoService) {
		this.manifestoService = manifestoService;
	}
	
	
	/**
	 * Busca a Service default desta Action
	 * 
	 * @param carregamentoDescargaService
	 */
	public void setService(CarregamentoDescargaService carregamentoDescargaService) {
		this.defaultService = carregamentoDescargaService;
	}

	public CarregamentoDescargaService getService() {
		return (CarregamentoDescargaService) this.defaultService;
	}

	public void removeById(java.lang.Long id) {
		((CarregamentoDescargaService) defaultService).removeById(id);
	}

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		((CarregamentoDescargaService) defaultService).removeByIds(ids);
	}

	public CarregamentoDescarga findById(java.lang.Long id) {
		return ((CarregamentoDescargaService) defaultService).findById(id);
	}
	
	/**
	 * Busca para o objeto pessoa.
	 * 
	 * @param criteria
	 * @return
	 */
	public List findLookupPessoa(TypedFlatMap criteria) {
		Map pessoa = new HashMap();
		pessoa.put("tpPessoa", criteria.getString("pessoa.tpPessoa"));
		pessoa.put("nrIdentificacao", criteria.getString("pessoa.nrIdentificacao"));
		pessoa.put("tpIdentificacao", criteria.getString("pessoa.tpIdentificacao"));

		pessoa.remove("pessoa.nrIdentificacao");
		pessoa.remove("pessoa.tpIdentificacao");

		return this.getPessoaService().findLookup(pessoa);
	}

	/**
	 * Busca a quantidade de dados da grid de carregamentos
	 */
	public Integer getRowCount(TypedFlatMap criteria) {
		return this.getService().getRowCountCarregamentoDescarga(criteria, "C");
	}

	/**
	 * Busca os registros da grid de carregamento
	 */
	public ResultSetPage findPaginated(TypedFlatMap criteria) {
		return this.getService().findPaginatedCarregamentoDescarga(criteria, "C");
	}	
	
	/**
	 * 	Faz a chamada para o findPaginated de documentoServico.
	 * 
	 * @param criteria
	 * @return
	 */
	public ResultSetPage findPaginatedExigenciasGerRisco(TypedFlatMap criteria) {
		Long idControleCarga = criteria.getLong("idControleCarga");
        return this.getService().findPaginatedExigenciasGerRisco(idControleCarga);
	}
	
	/**
	 * Busca os dados necessarios para carregar o final a tela de 
	 * 
	 * @param criteria
	 * @return
	 */
	public TypedFlatMap loadFinalStates(TypedFlatMap criteria){
		CarregamentoDescarga carregamentoDescarga = this.getService().findById(criteria.getLong("idCarregamentoDescarga"));
		
		TypedFlatMap returnData = new TypedFlatMap();
		returnData.put("tpStatusControleCarga", carregamentoDescarga.getControleCarga().getTpStatusControleCarga().getDescription());
		returnData.put("dhFimOperacao", carregamentoDescarga.getDhFimOperacao());
		
		return returnData;
	}
	
	public void validatePreManifestos(TypedFlatMap criteria) {
		
		Long idControleCarga = criteria.getLong("idControleCarga");
		Long idFilial = criteria.getLong("idFilial");
		Long idPostoAvancado = criteria.getLong("idPostoAvancado");
		
		List result = this.getService().findCarregamentoDescarga(idControleCarga, idFilial, idPostoAvancado, "C");
		
		for (Iterator iter = result.iterator(); iter.hasNext();) {
			Map map = (Map) iter.next();
			if (map.get("dhFimCarregamento")==null) throw new BusinessException("LMS-05066");
		}
		
	}

	/**
	 * Busca os campos da tela de carregamento a partir de um controle de carga
	 * 
	 * @param criteria
	 * @return
	 */
	public List findCarregamentoDescargaByNrControleCarga(Map criteria) {

		Long nrControleCarga = Long.valueOf(criteria.get("nrControleCarga").toString());
		Long idFilial = Long.valueOf(((Map) criteria.get("filialByIdFilialOrigem")).get("idFilial").toString());
		
		List listControleCarga = this.getControleCargaService().findControleCargaByNrControleByFilial(nrControleCarga, idFilial);
		if (!listControleCarga.isEmpty()) {
		
			//TODO: Buscar posto avancado da sessao, ou do criteria decorrente de o usuario ja estar vindo da tela...
			Long idPostoAvancado = null;
			
			List result = this.getService().findCarregamentoDescargaByNrControleCarga(nrControleCarga, idFilial, idPostoAvancado, "C");
			
			//Verifica se existem dados dentro do resultado da consulta.
			if (!result.isEmpty()) {
				Map dataObject = (Map) result.get(0);

				//Verifica se pela descricao da rota do controleCarga possui a filial que o usuario esta logado.
				DomainValue tpControleCarga = (DomainValue) dataObject.get("tpControleCarga");
				if ((tpControleCarga!=null) && (tpControleCarga.getValue().equals("V"))){
					
					Long idControleCarga = Long.valueOf(String.valueOf(dataObject.get("idControleCarga")));
					Long idFilialOrigem = SessionUtils.getFilialSessao().getIdFilial();
					
					if (!this.getControleCargaService().findControleCargaInControleTrecho(idControleCarga, idFilialOrigem)) {
						throw new BusinessException("LMS-05069");
					}
				}
				
				Long idFilialAtual = (Long) dataObject.get("idFilialAtual");
				if (!SessionUtils.getFilialSessao().getIdFilial().equals(idFilialAtual)) {
					throw new BusinessException("LMS-05070");
				}
				
				Long idControleCarga = Long.valueOf(String.valueOf(dataObject.get("idControleCarga")));
				
				List resultEventoControleCarga = this.getEventoControleCargaService()
					.findEventoControleCargaByIdFilialByIdControleCargaByTpEvento(idFilial, idControleCarga, "CP");
				
				if (!resultEventoControleCarga.isEmpty()) {
					EventoControleCarga eventoControleCarga = (EventoControleCarga) resultEventoControleCarga.get(0);
					dataObject.put("dhEvento", eventoControleCarga.getDhEvento());
				}
			} else {
				throw new BusinessException("LMS-05077");
			}
			
			return result;
		}
		
		return listControleCarga;
	}

	/**
	 * Busca algums dos dados do usuario logado, que está na sessão.
	 * 
	 * @return map
	 */
	public Map getBasicData() {

		Map pessoa = new HashMap();
		pessoa.put("nmFantasia", SessionUtils.getFilialSessao().getPessoa().getNmFantasia());

		Map filial = new HashMap();
		filial.put("idFilial", SessionUtils.getFilialSessao().getIdFilial());
		filial.put("sgFilial", SessionUtils.getFilialSessao().getSgFilial());
		filial.put("pessoa", pessoa);

		Map dadosUsuario = new HashMap();
		dadosUsuario.put("filial", filial);

		return dadosUsuario;
	}
	
	public void updateValorTotalManifesto(TypedFlatMap criteria) {
		
		Long idManifesto = criteria.getLong("idManifesto");
		List result = this.getPreManifestoDocumentoService().findPreManifestoDocumentoByIdManifesto(idManifesto);
		
		this.getPreManifestoDocumentoService().updateValorTotalManifesto(idManifesto, result);
	}
	
	/**
     * Verifica se o manifesto em questao ja foi ou deve iniciar o seu carregamento
     * 
     * @param criteria
     * @return
     */
    public void generateCarregamento(TypedFlatMap criteria) {
    	Long idManifesto = Long.valueOf((String)criteria.get("idManifesto"));
    	Long idCarregamentoDescarga = Long.valueOf((String)criteria.get("idCarregamentoDescarga"));
    	this.getService().storeIniciarCarregamentoPreManifesto(idManifesto, idCarregamentoDescarga);
    }

	/**
	 * Efetua a consulta da tela de Gerenciamento de riscos.
	 * 
	 * @param criteria
	 * @return
	 */
	public Map getValoresManifestos(Map criteria) {
		Long idControleCarga = Long.valueOf(criteria.get("idControleCarga").toString());
		return this.getService().findValoresManifesto(idControleCarga);
	}

	public List findLookupBySgFilial(Map criteria) {
		return this.getFilialService().findLookupBySgFilial((String)criteria.get("sgFilial"), (String)criteria.get("tpAcesso"));
	}
	
	/**
	 * Remove um dos manifestos da grid de carregarVeiculo, a partir do idManifestoInformado
	 * 
	 * @param criteria
	 * @return
	 */
	public void removeManifestoCarregamento(TypedFlatMap criteria) {
		Long idManifesto = criteria.getLong("idManifesto");		
		this.manifestoService.removeById(idManifesto);	
	}

}
