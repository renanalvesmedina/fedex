package com.mercurio.lms.carregamento.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mercurio.adsm.core.util.ReflectionUtils;
import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.masterdetail.ItemList;
import com.mercurio.adsm.framework.model.masterdetail.ItemListConfig;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailAction;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailFactory;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailKey;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntry;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntryConfig;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.Equipe;
import com.mercurio.lms.carregamento.model.IntegranteEquipe;
import com.mercurio.lms.carregamento.model.service.CargoOperacionalService;
import com.mercurio.lms.carregamento.model.service.EquipeService;
import com.mercurio.lms.carregamento.model.service.IntegranteEquipeService;
import com.mercurio.lms.carregamento.model.service.PrestadorServicoService;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.configuracoes.model.service.FuncionarioService;
import com.mercurio.lms.configuracoes.model.service.PessoaService;
import com.mercurio.lms.configuracoes.model.service.UsuarioService;
import com.mercurio.lms.municipios.model.service.EmpresaService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.PessoaUtils;
import com.mercurio.lms.util.session.SessionUtils;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.carregamento.manterEquipesAction"
 */

public class ManterEquipesAction extends MasterDetailAction  {

	private PrestadorServicoService prestadorServicoService;
	private FuncionarioService funcionarioService;
	private IntegranteEquipeService integranteEquipeService;
	private UsuarioService usuarioService;
	private PessoaService pessoaService;
	private CargoOperacionalService cargoOperacionalService; 
	private EmpresaService empresaService;
	
	/**
	 * Declaração serviço principal da Action.
	 * 
	 * @param equipeService
	 */
	public void setEquipeService(EquipeService equipeService) {
		super.setMasterService(equipeService);
	}
	public EquipeService getEquipeService() {
		return (EquipeService) super.getMasterService();
	}
    public FuncionarioService getFuncionarioService() {
		return funcionarioService;
	}
	public void setFuncionarioService(FuncionarioService funcionarioService) {
		this.funcionarioService = funcionarioService;
	}
	public PrestadorServicoService getPrestadorServicoService() {
		return prestadorServicoService;
	}
	public void setPrestadorServicoService(PrestadorServicoService prestadorServicoService) {
		this.prestadorServicoService = prestadorServicoService;
	}
	public IntegranteEquipeService getIntegranteEquipeService() {
		return integranteEquipeService;
	}
	public void setIntegranteEquipeService(IntegranteEquipeService integranteEquipeService) {
		this.integranteEquipeService = integranteEquipeService;
	}
    public UsuarioService getUsuarioService() {
		return usuarioService;
	}
	public void setUsuarioService(UsuarioService usuarioService) {
		this.usuarioService = usuarioService;
	}
	public CargoOperacionalService getCargoOperacionalService() {
		return cargoOperacionalService;
	}
	public void setCargoOperacionalService(CargoOperacionalService cargoOperacionalService) {
		this.cargoOperacionalService = cargoOperacionalService;
	}
	public PessoaService getPessoaService() {
		return pessoaService;
	}
	public void setPessoaService(PessoaService pessoaService) {
		this.pessoaService = pessoaService;
	}

	public EmpresaService getEmpresaService() {
		return empresaService;
	}
	public void setEmpresaService(EmpresaService empresaService) {
		this.empresaService = empresaService;
	}
	
	//###############################
	// Metodos de negocio
	//###############################
	
	public Object findById(java.lang.Long id) {
		Object masterObj = getEquipeService().findById(id);
		putMasterInSession(masterObj);
		return masterObj;
    }
	
	/***
     * Remoção de um conjunto de registros Master.
     * 
     * @param ids
	 *
     */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	getEquipeService().removeByIds(ids);
    }

    /**
     * Remoção de um registro Master.
     * @param id
     */
    public void removeById(Long id) {
    	getEquipeService().removeById(id);
		newMaster();
    }
	
	public Serializable store(Equipe equipeTela) {
    	MasterEntry entry = getMasterFromSession(equipeTela.getIdEquipe(), true);
    	
    	Equipe equipe = (Equipe) entry.getMaster();
    	
    	Set ignore = new HashSet();
    	ignore.add("versao");
    	ReflectionUtils.syncObjectProperties(equipe, equipeTela, ignore);
    	
    	ItemList items = getItemsFromSession(entry, "integranteEquipe");
    	
    	ItemListConfig config = getMasterConfig().getItemListConfig("integranteEquipe");
    	Serializable id = getEquipeService().store(equipe, items, config);
    	items.resetItemsState(); 
    	updateMasterInSession(entry);
    	
    	return id;    	
    }

	/**
	 * Valida se o integrante equipe ja existe na sessao. Caso ele exista
	 * retorna 'true' caso nao existe retorna 'false'
	 * 
	 * @param parameters
	 * @return
	 */
    public boolean checkIntegranteEquipe(TypedFlatMap parameters) {
    	Long masterId = (Long) getMasterId(parameters);
   		ItemList itemList = loadItemList(masterId, "integranteEquipe", parameters);
    	
   		ItemListConfig itemListConfig = getMasterConfig().getItemListConfig("integranteEquipe");
    	for (Iterator iter = itemList.iterator(masterId, itemListConfig); iter.hasNext();) {
    		IntegranteEquipe integranteEquipe = (IntegranteEquipe) iter.next();
			
    		if (parameters.getString("tpIntegrante").equals(integranteEquipe.getTpIntegrante().getValue())){
	    		if (parameters.getString("tpIntegrante").equals("F")){
	    			if (integranteEquipe.getUsuario().getIdUsuario().equals(parameters.getLong("usuario.idUsuario"))) {
	    				return true;
	    			}
	    		} else {
	    			if (integranteEquipe.getPessoa().getIdPessoa().equals(parameters.getLong("prestadorServico.idPrestadorServico"))) {
	    				return true;
	    			}
	    		}
    		}
		}
    	return false;
    }
    
    /**
     * Salva um funcionario na sessao validadando se o .
     * 
     * @param bean
     * @return
     */
    public Serializable saveIntegranteEquipeFuncionario(TypedFlatMap parameters) {
    	Long masterId = (Long) getMasterId(parameters);
    	Long idIntegranteEquipe = parameters.getLong("idIntegranteEquipe");

    	MasterEntry entry = getMasterFromSession(masterId, true);
    	ItemList items = getItemsFromSession(entry, "integranteEquipe");
    	
	    if (idIntegranteEquipe==null) {
	    	if (checkIntegranteEquipe(parameters)) {
	    		throw new BusinessException("LMS-05311");
	    	}
	    }
    	
    	validaIntegranteEmEquipes(true, parameters, idIntegranteEquipe, items);
    	return saveItemInstance(parameters, "integranteEquipe");
    }

    /**
     * Salva um .
     * 
     * @param bean
     * @return
     */
    public Serializable saveIntegranteEquipeTerceiro(TypedFlatMap parameters) {
    	Long masterId = (Long) getMasterId(parameters);
    	Long idIntegranteEquipe = parameters.getLong("idIntegranteEquipe");

    	MasterEntry entry = getMasterFromSession(masterId, true);
    	ItemList items = getItemsFromSession(entry, "integranteEquipe");
    	
    	if (idIntegranteEquipe==null) {
	    	if (checkIntegranteEquipe(parameters)) {
	    		throw new BusinessException("LMS-05312");
	    	}
    	}
    	
    	validaIntegranteEmEquipes(false, parameters, idIntegranteEquipe, items);
    	getEquipeService().validateTerceiroIsFuncionario(FormatUtils.formatIdentificacao("CPF", parameters.getString("pessoa.nrIdentificacao")));

		return saveItemInstance(parameters, "integranteEquipe");
    }



    /**
     * 
     * @param isFuncionario
     * @param parameters
     * @param idIntegranteEquipe
     */
	private void validaIntegranteEmEquipes(boolean isFuncionario, TypedFlatMap parameters, Long idIntegranteEquipe, ItemList items) {
		// Verifica se o registro a ser incluído, não está na lista dos registros excluídos.
    	if (items != null) {
	    	for (Iterator iter = items.getRemovedItems().iterator(); iter.hasNext();) {
	    		IntegranteEquipe integranteEquipe = (IntegranteEquipe) iter.next();
	    		if (isFuncionario) {
		    		if (integranteEquipe.getUsuario() != null && integranteEquipe.getUsuario().getIdUsuario().compareTo( parameters.getLong("usuario.idUsuario")) == 0)
		    			return;
		    	}
	    		else {
	    			String idPessoa = parameters.getString("pessoa.idPessoa");
	    			if (integranteEquipe.getPessoa() != null && integranteEquipe.getPessoa().getIdPessoa().toString().equals(idPessoa))
	    				return;
	    		}
	    	}
    	}
		
		// Verifica se o registro já está cadastrado em outra equipe
    	Map mapIntegranteEquipe = new HashMap();
    	Map mapEquipe = new HashMap();
    	mapEquipe.put("tpSituacao","A");
    	mapIntegranteEquipe.put("equipe", mapEquipe);
    	
    	if (isFuncionario) { 
	    	Map mapUsuarioIntegrante = new HashMap();
	    	mapUsuarioIntegrante.put("idUsuario", parameters.getLong("usuario.idUsuario"));
	    	mapIntegranteEquipe.put("usuario", mapUsuarioIntegrante);
    	}
    	else {
	    	Map mapPessoaIntegrante = new HashMap();
	    	mapPessoaIntegrante.put("idPessoa", Long.valueOf( (String)parameters.getString("prestadorServico.idPrestadorServico") ));
	    	mapIntegranteEquipe.put("pessoa", mapPessoaIntegrante);
    	}
    	List listIntegranteEquipe = getIntegranteEquipeService().find(mapIntegranteEquipe);

    	boolean lancarExcecao = false;
    	if (!listIntegranteEquipe.isEmpty()) {
    		if ( idIntegranteEquipe != null ) {
    			for (Iterator iter = listIntegranteEquipe.iterator(); iter.hasNext(); ){
    				// verifica se o registro que está sendo gravado está no modo de edição.
    				IntegranteEquipe aux = (IntegranteEquipe)iter.next();
    				if (aux.getIdIntegranteEquipe().compareTo(idIntegranteEquipe) != 0)
    					lancarExcecao = true;
    			}
    		}
    		else
    			lancarExcecao = true;
    	}
    	if (lancarExcecao) {
    		if (isFuncionario)
    			throw new BusinessException("LMS-05004");
    		else
    			throw new BusinessException("LMS-05005");
    	}
	}


    public ResultSetPage findPaginatedIntegranteEquipeTerceiro(Map parameters) {
    	ResultSetPage result = findPaginatedItemList(parameters, "integranteEquipe");
    	return result;
    }
    
    public ResultSetPage findPaginatedIntegranteEquipeFuncionario(Map parameters) {
    	ResultSetPage result = findPaginatedItemList(parameters, "integranteEquipe");
    	return result;
    }

    public Integer getRowCountIntegranteEquipeTerceiro(Map parameters){
    	return getRowCountItemList(parameters, "integranteEquipe");
    }
    
    public Integer getRowCountIntegranteEquipeFuncionario(Map parameters){
    	return getRowCountItemList(parameters, "integranteEquipe");
    }

    public Object findByIdIntegranteEquipeTerceiro(MasterDetailKey key) {
    	IntegranteEquipe integranteEquipe = (IntegranteEquipe)findItemById(key, "integranteEquipe");
    	TypedFlatMap map = new TypedFlatMap();
    	map.put("idIntegranteEquipe", integranteEquipe.getIdIntegranteEquipe());
    	map.put("versao", integranteEquipe.getVersao());
    	map.put("cargoOperacional.idCargoOperacional", integranteEquipe.getCargoOperacional().getIdCargoOperacional());
    	map.put("pessoa.idPessoa", integranteEquipe.getPessoa().getIdPessoa());
    	map.put("pessoa.nmPessoa", integranteEquipe.getPessoa().getNmPessoa());
    	map.put("pessoa.nrIdentificacao", integranteEquipe.getPessoa().getNrIdentificacao());
    	map.put("pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(integranteEquipe.getPessoa()));    	
    	map.put("pessoa.idPessoa", integranteEquipe.getPessoa().getIdPessoa());
    	if (integranteEquipe.getEmpresa() != null) {
	    	map.put("empresa.idEmpresa", integranteEquipe.getEmpresa().getIdEmpresa());
	    	map.put("empresa.pessoa.nmPessoa", integranteEquipe.getEmpresa().getPessoa().getNmPessoa());
	    	map.put("empresa.pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(integranteEquipe.getEmpresa().getPessoa()));
    	}
    	return map;
    }
    
    public Object findByIdIntegranteEquipeFuncionario(MasterDetailKey key) {
    	IntegranteEquipe integranteEquipe = (IntegranteEquipe)findItemById(key, "integranteEquipe");
    	return integranteEquipe;
    }

	public void modifyItemValues(Object newBean, Object bean) {
        Set ignore = new HashSet();
        ignore.add("idIntegranteEquipe"); // id do detalhe
        ignore.add("versao");
        ignore.add("equipe"); // mestre
        ReflectionUtils.syncObjectProperties(bean, newBean, ignore);
    }

    
    /***
     * Remove uma lista de registros items.
     *  
     * @param ids ids dos registros item a serem removidos.
     * 
	 *
     */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIdsIntegranteEquipe(List ids) {
    	super.removeItemByIds(ids, "integranteEquipe");
    }

    //####################################
    // Dados da DF2
    //####################################
    
	protected MasterEntryConfig createMasterConfig(MasterDetailFactory masterFactory) { 
		
		MasterEntryConfig config = masterFactory.createMasterEntryConfig(Equipe.class);

		Comparator descComparator = new Comparator() {
			public int compare(Object obj1, Object obj2) {
				IntegranteEquipe integranteEquipe1 = (IntegranteEquipe)obj1;
				IntegranteEquipe integranteEquipe2 = (IntegranteEquipe)obj2;
				
				if ((integranteEquipe1.getTpIntegrante().getValue().equals("T")) && 
					(integranteEquipe2.getTpIntegrante().getValue().equals("T"))) {
					return integranteEquipe1.getPessoa().getNmPessoa().compareTo(integranteEquipe2.getPessoa().getNmPessoa());
				} else if ((integranteEquipe1.getTpIntegrante().getValue().equals("F")) && 
						   (integranteEquipe2.getTpIntegrante().getValue().equals("F"))) {
					
					//Aplica uma string vazia nos objetos apenas para fins comparativos...
					if (integranteEquipe1.getUsuario().getNrMatricula()==null) {
						integranteEquipe1.getUsuario().setNrMatricula("");
					}
						
					if (integranteEquipe2.getUsuario().getNrMatricula()==null) {
						integranteEquipe2.getUsuario().setNrMatricula("");
					}
					
					return integranteEquipe1.getUsuario().getNrMatricula()
								.compareTo(integranteEquipe2.getUsuario().getNrMatricula());
				}
				return 1;
			}    		
    	};
    	
    	ItemListConfig itemInit = new ItemListConfig() {
 
			public List initialize(Long masterId) { 
				return getEquipeService().findIntegranteEquipe(masterId);
			}

			public Integer getRowCount(Long masterId) {
				Integer count = getIntegranteEquipeService().getRowCountIntegranteEquipe(masterId);
				return count;
			}

			public void modifyItemValues(Object newBean, Object bean) {
				Set ignore = new HashSet();
				ignore.add("versao");
				ignore.add("tpIntegrante");
				ignore.add("equipe");
				ignore.add("idIntegranteEquipe");
				ReflectionUtils.syncObjectProperties(bean, newBean, ignore);				
			}

			/**
			 * Faz a separacao da list de funcionario para a list de terceiro
			 * 
			 * @param items
			 * @param parameters
			 */
			public List filterItems(List items, Map parameters) {
				List lista = super.filterItems(items, parameters);
				List novaLista = new ArrayList();
				
	    		for (Iterator iter = lista.iterator(); iter.hasNext();) {
	    			IntegranteEquipe integranteEquipe = (IntegranteEquipe) iter.next();
	    			String tpIntegrante = (String)parameters.get("tpIntegrante");
	    			
	    			if (tpIntegrante != null) {
	    				if (tpIntegrante.equals("F")) {
	    					if (integranteEquipe.getTpIntegrante().getValue().equals("F")) {
	    						novaLista.add(integranteEquipe);
	    					}
	    				}
	    				if (tpIntegrante.equals("T")) {
	    					if (integranteEquipe.getTpIntegrante().getValue().equals("T")) {
	    						novaLista.add(integranteEquipe);
	    					}
	    				}
	    			}
	    		}				
				return novaLista;
			}

			
			public Integer rowCountFilteredItems(List items, Map parameters) {
				List lista = super.filterItems(items, parameters);
				int count = 0;
				
	    		for (Iterator iter = lista.iterator(); iter.hasNext();) {
	    			IntegranteEquipe integranteEquipe = (IntegranteEquipe) iter.next();
	    			String tpIntegrante = (String)parameters.get("tpIntegrante");
	    			
	    			if (tpIntegrante != null) {
	    				if (tpIntegrante.equals("F")) {
	    					if (integranteEquipe.getTpIntegrante().getValue().equals("F")) {
	    						count++;
	    					}
	    				}
	    				if (tpIntegrante.equals("T")) {
	    					if (integranteEquipe.getTpIntegrante().getValue().equals("T")) {
	    						count++;
	    					}
	    				}
	    			}
	    		}				
				
				return Integer.valueOf(count);
			}

			public Map configItemDomainProperties() {
				return null;
			}

			public Object populateNewItemInstance(Map parameters, Object bean) {
				TypedFlatMap criteria = (TypedFlatMap) parameters;

				IntegranteEquipe integranteEquipe = (IntegranteEquipe) bean;
				integranteEquipe.setTpIntegrante(new DomainValue(criteria.getString("tpIntegrante")));
				integranteEquipe.setIdIntegranteEquipe(criteria.getLong("idIntegranteEquipe"));

				if (integranteEquipe.getTpIntegrante().getValue().equals("F")) {
					Usuario usuario = usuarioService.findById(criteria.getLong("usuario.idUsuario")) ;
					integranteEquipe.setUsuario(usuario);
				} 
				else {
					Long idPessoa = criteria.getLong("prestadorServico.idPrestadorServico");
					Long idCargoOperacional = criteria.getLong("cargoOperacional.idCargoOperacional");
					Long idEmpresa = criteria.getLong("empresa.idEmpresa");

					if (idPessoa != null) { 
						integranteEquipe.setPessoa(pessoaService.findById(idPessoa));
					}

					if (idCargoOperacional != null) 
						integranteEquipe.setCargoOperacional(cargoOperacionalService.findById(idCargoOperacional));

					if (idEmpresa != null) 
						integranteEquipe.setEmpresa(empresaService.findById(idEmpresa));					
				}
				return integranteEquipe;
			}
    	};
		config.addItemConfig("integranteEquipe", IntegranteEquipe.class, itemInit, descComparator);
		return config;
	}

	public List findLookupIntegrante(Map criteria) {
		Map mapPessoa = (Map)criteria.get("pessoa");
		mapPessoa.put("nrIdentificacao", PessoaUtils.validateIdentificacao((String)mapPessoa.get("nrIdentificacao")));
		return getPrestadorServicoService().findLookup(criteria);
	}

    public List findListCargo(Map criteria) {
    	return this.getCargoOperacionalService().findCargo(criteria);
    }

    /**
     * Busca o id da filial do usuario logado, que está na sessão.
     * 
     * @return map
     */
    public TypedFlatMap getFilialUsuarioLogado() {
    	TypedFlatMap usuarioData = new TypedFlatMap();
    	usuarioData.put("filialSessao.idFilial", SessionUtils.getFilialSessao().getIdFilial());
    	usuarioData.put("filialSessao.sgFilial", SessionUtils.getFilialSessao().getSgFilial());
    	usuarioData.put("filialSessao.pessoa.nmPessoa", SessionUtils.getFilialSessao().getPessoa().getNmFantasia());
		return usuarioData;
    }

    
    public List findLookupUsuarioFuncionario(TypedFlatMap tfm){
    	
    	return usuarioService.findLookupUsuarioFuncionario(
    			tfm.getLong("idUsuario"), 
    			FormatUtils.fillNumberWithZero(tfm.getString("nrMatricula"), 9), 
    			null, null, null, null, true);
    }
}