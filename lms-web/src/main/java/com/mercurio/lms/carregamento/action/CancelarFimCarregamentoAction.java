package com.mercurio.lms.carregamento.action;

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.ControleCarga;
import com.mercurio.lms.carregamento.model.Manifesto;
import com.mercurio.lms.carregamento.model.service.CarregamentoDescargaService;
import com.mercurio.lms.carregamento.model.service.ControleCargaService;
import com.mercurio.lms.carregamento.model.service.EventoControleCargaService;
import com.mercurio.lms.carregamento.model.service.ManifestoService;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 * 
 * Não inserir documentação após ou remover a tag do XDoclet a seguir. O valor
 * do <code>id</code> informado abaixo deve ser utilizado para referenciar
 * este serviço.
 * 
 * @spring.bean id="lms.carregamento.cancelarFimCarregamentoAction"
 */

public class CancelarFimCarregamentoAction {

	private CarregamentoDescargaService carregamentoDescargaService;
	private EventoControleCargaService eventoControleCargaService;
	private ControleCargaService controleCargaService;
	private FilialService filialService;
	private ManifestoService manifestoService;

	public CarregamentoDescargaService getCarregamentoDescargaService() {
		return carregamentoDescargaService;
	}

	public void setCarregamentoDescargaService(
			CarregamentoDescargaService carregamentoDescargaService) {
		this.carregamentoDescargaService = carregamentoDescargaService;
	}

	public ControleCargaService getControleCargaService() {
		return controleCargaService;
	}

	public void setControleCargaService(ControleCargaService controleCargaService) {
		this.controleCargaService = controleCargaService;
	}

	public EventoControleCargaService getEventoControleCargaService() {
		return eventoControleCargaService;
	}

	public void setEventoControleCargaService(
			EventoControleCargaService eventoControleCargaService) {
		this.eventoControleCargaService = eventoControleCargaService;
	}

	public FilialService getFilialService() {
		return filialService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public ManifestoService getManifestoService() {
		return manifestoService;
	}

	public void setManifestoService(ManifestoService manifestoService) {
		this.manifestoService = manifestoService;
	}

	/**
	 * Busca os campos da tela de carregamento a partir de um controle de carga
	 * 
	 * @param criteria
	 * @return
	 */
	//FIXME Realizar refactory para simplificar a lógica do método
	public List findCarregamentoDescargaByNrControleCarga(TypedFlatMap criteria) {
		Long nrControleCarga = criteria.getLong("nrControleCarga");
		Long idFilial = criteria.getLong("filialByIdFilialOrigem.idFilial");
		Long idPostoAvancado = null;

		ControleCarga controleCarga = controleCargaService.findControleCargaByNrControleCargaByIdFilial(nrControleCarga, idFilial);
		if (controleCarga!=null){
			String tpStatusControleCarga = controleCarga.getTpStatusControleCarga().getValue();
			if (!tpStatusControleCarga.equals("PO")
					&& !tpStatusControleCarga.equals("AE")
					&& !tpStatusControleCarga.equals("AV")) {
				throw new BusinessException("LMS-05130");
			}
		}

		List result = this.getCarregamentoDescargaService().findCarregamentoDescargaByNrControleCarga(nrControleCarga, idFilial, idPostoAvancado, null);

		//Verifica se existem dados dentro do resultado da consulta.
		if (result.size()>0) {
			Map mapCarregamentoDescarga = (Map) result.get(0);
			Long idControleCarga = Long.valueOf(mapCarregamentoDescarga.get("idControleCarga").toString());
			List listManifestos = manifestoService.findManifestoByIdControleCarga(idControleCarga, null, null, null);
			for (Iterator iter = listManifestos.iterator(); iter.hasNext();) {
				Manifesto manifesto = (Manifesto) iter.next();
				if (manifesto.getFilialByIdFilialOrigem().getIdFilial().equals(SessionUtils.getFilialSessao().getIdFilial())){
					String statusManifesto = manifesto.getTpStatusManifesto().getValue();
					if ( !(statusManifesto.equals("PM") 
							|| statusManifesto.equals("CC") 
							|| statusManifesto.equals("EF") 
							|| statusManifesto.equals("CA"))){
						throw new BusinessException("LMS-05139");
					}
				}
			}
		}
		return result;
	}

	/**
	 * Faz a chamada para a service de carregamentoDescarga, 
	 * 
	 * @param criteria
	 */
	@SuppressWarnings("rawtypes")
	public Map generateCancelarFimCarregamento(TypedFlatMap criteria) {
		
		Long idCarregamentoDescarga = criteria.getLong("idCarregamentoDescarga");
		String obCancelamento = criteria.getString("obCancelamento");
		
		return this.getCarregamentoDescargaService().generateCancelarFimCarregamento(idCarregamentoDescarga, obCancelamento);
	}

	/**
	 * Busca algums dos dados do usuario logado, que está na sessão.
	 * 
	 * @return map
	 */
	public Map getBasicData() {

		Map pessoa = new HashMap();
		pessoa.put("nmFantasia", SessionUtils.getFilialSessao().getPessoa().getNmFantasia());

		Map filial = new HashMap();
		filial.put("idFilial", SessionUtils.getFilialSessao().getIdFilial());
		filial.put("sgFilial", SessionUtils.getFilialSessao().getSgFilial());
		filial.put("pessoa", pessoa);

		Map dadosUsuario = new HashMap();
		dadosUsuario.put("filial", filial);

		return dadosUsuario;
	}

	public List findLookupBySgFilial(Map criteria) {
		return this.getFilialService().findLookup(criteria);
	}
}
