package com.mercurio.lms.carregamento.action;

import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringUtils;
import org.joda.time.DateTime;
import org.joda.time.YearMonthDay;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.FindDefinition;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.report.ReportExecutionManager;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.AdiantamentoTrecho;
import com.mercurio.lms.carregamento.model.CarregamentoDescarga;
import com.mercurio.lms.carregamento.model.ControleCarga;
import com.mercurio.lms.carregamento.model.ControleTrecho;
import com.mercurio.lms.carregamento.model.EventoControleCarga;
import com.mercurio.lms.carregamento.model.PagtoPedagioCc;
import com.mercurio.lms.carregamento.model.PostoPassagemCc;
import com.mercurio.lms.carregamento.model.TrechoCorporativo;
import com.mercurio.lms.carregamento.model.service.AdiantamentoTrechoService;
import com.mercurio.lms.carregamento.model.service.CarregamentoDescargaService;
import com.mercurio.lms.carregamento.model.service.ControleCargaService;
import com.mercurio.lms.carregamento.model.service.ControleTrechoService;
import com.mercurio.lms.carregamento.model.service.EventoControleCargaService;
import com.mercurio.lms.carregamento.model.service.PagtoPedagioCcService;
import com.mercurio.lms.carregamento.model.service.PostoPassagemCcService;
import com.mercurio.lms.carregamento.model.service.TrechoCorporativoService;
import com.mercurio.lms.carregamento.report.EmitirRelatorioControleCargaColetaEntregaService;
import com.mercurio.lms.carregamento.report.EmitirRelatorioControleCargaViagemService;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.ConteudoParametroFilial;
import com.mercurio.lms.configuracoes.model.service.ConteudoParametroFilialService;
import com.mercurio.lms.contratacaoveiculos.model.MeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.Motorista;
import com.mercurio.lms.contratacaoveiculos.model.PostoConveniado;
import com.mercurio.lms.contratacaoveiculos.model.Proprietario;
import com.mercurio.lms.contratacaoveiculos.model.SolicitacaoContratacao;
import com.mercurio.lms.contratacaoveiculos.model.service.BeneficiarioProprietarioService;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTranspProprietarioService;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteService;
import com.mercurio.lms.contratacaoveiculos.model.service.MotoristaService;
import com.mercurio.lms.contratacaoveiculos.model.service.PostoConveniadoService;
import com.mercurio.lms.contratacaoveiculos.model.service.ProprietarioService;
import com.mercurio.lms.contratacaoveiculos.model.service.SolicitacaoContratacaoService;
import com.mercurio.lms.expedicao.model.service.MonitoramentoDocEletronicoService;
import com.mercurio.lms.expedicao.util.ConstantesExpedicao;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.NotaCredito;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.service.NotaCreditoService;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.service.TabelaColetaEntregaCCService;
import com.mercurio.lms.fretecarreteiroviagem.model.ReciboFreteCarreteiro;
import com.mercurio.lms.fretecarreteiroviagem.model.service.ReciboFreteCarreteiroService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.Rota;
import com.mercurio.lms.municipios.model.RotaColetaEntrega;
import com.mercurio.lms.municipios.model.RotaIdaVolta;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.PontoParadaTrechoService;
import com.mercurio.lms.municipios.model.service.RotaColetaEntregaService;
import com.mercurio.lms.municipios.model.service.RotaIdaVoltaService;
import com.mercurio.lms.municipios.model.service.RotaService;
import com.mercurio.lms.portaria.model.ControleQuilometragem;
import com.mercurio.lms.portaria.model.service.ControleQuilometragemService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.JTFormatUtils;
import com.mercurio.lms.util.session.SessionUtils;

import br.com.tntbrasil.integracao.domains.sim.EventoDocumentoServicoDMN;

/**
 * Generated by: ADSM ActionGenerator
 * 
 * Não inserir documentação após ou remover a tag do XDoclet a seguir. O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este
 * serviço.
 * 
 * @spring.bean id="lms.carregamento.consultarControleCargasAction"
 */

public class ConsultarControleCargasAction {

    private AdiantamentoTrechoService adiantamentoTrechoService;
    private BeneficiarioProprietarioService beneficiarioProprietarioService;
    private ControleCargaService controleCargaService;
    private ControleQuilometragemService controleQuilometragemService;
    private ControleTrechoService controleTrechoService;
    private EventoControleCargaService eventoControleCargaService;
    private FilialService filialService;
    private MeioTranspProprietarioService meioTranspProprietarioService;
    private MeioTransporteService meioTransporteService;
    private MotoristaService motoristaService;
    private NotaCreditoService notaCreditoService;
    private PagtoPedagioCcService pagtoPedagioCcService;
    private PontoParadaTrechoService pontoParadaTrechoService;
    private PostoPassagemCcService postoPassagemCcService;
    private ProprietarioService proprietarioService;
    private ReciboFreteCarreteiroService reciboFreteCarreteiroService;
    private RotaColetaEntregaService rotaColetaEntregaService;
    private RotaIdaVoltaService rotaIdaVoltaService;
    private RotaService rotaService;
    private SolicitacaoContratacaoService solicitacaoContratacaoService;
    private TrechoCorporativoService trechoCorporativoService;
    private PostoConveniadoService postoConveniadoService;
    private CarregamentoDescargaService carregamentoDescargaService;
    private ReportExecutionManager reportExecutionManager;
    private EmitirRelatorioControleCargaColetaEntregaService emitirRelatorioControleCargaColetaEntregaService;
    private EmitirRelatorioControleCargaViagemService emitirRelatorioControleCargaViagemService;
    private TabelaColetaEntregaCCService tabelaColetaEntregaCCService;

    private static final String CALCULO_PADRAO = "Cálculo Padrão";
    private static final String PARAMETRO_FILIAL = "ATIVA_CALCULO_PADRAO";
    private static final String SIM = "S";
    private ConteudoParametroFilialService conteudoParametroFilialService;

    public PostoConveniadoService getPostoConveniadoService() {
        return postoConveniadoService;
    }

    public void setPostoConveniadoService(PostoConveniadoService postoConveniadoService) {
        this.postoConveniadoService = postoConveniadoService;
    }

    public void setBeneficiarioProprietarioService(BeneficiarioProprietarioService beneficiarioProprietarioService) {
        this.beneficiarioProprietarioService = beneficiarioProprietarioService;
    }

    public void setMeioTranspProprietarioService(MeioTranspProprietarioService meioTranspProprietarioService) {
        this.meioTranspProprietarioService = meioTranspProprietarioService;
    }

    public void setAdiantamentoTrechoService(AdiantamentoTrechoService adiantamentoTrechoService) {
        this.adiantamentoTrechoService = adiantamentoTrechoService;
    }

    public void setTrechoCorporativoService(TrechoCorporativoService trechoCorporativoService) {
        this.trechoCorporativoService = trechoCorporativoService;
    }

    public void setEventoControleCargaService(EventoControleCargaService eventoControleCargaService) {
        this.eventoControleCargaService = eventoControleCargaService;
    }

    public void setRotaService(RotaService rotaService) {
        this.rotaService = rotaService;
    }

    public void setNotaCreditoService(NotaCreditoService notaCreditoService) {
        this.notaCreditoService = notaCreditoService;
    }

    public void setPagtoPedagioCcService(PagtoPedagioCcService pagtoPedagioCcService) {
        this.pagtoPedagioCcService = pagtoPedagioCcService;
    }

    public void setPostoPassagemCcService(PostoPassagemCcService postoPassagemCcService) {
        this.postoPassagemCcService = postoPassagemCcService;
    }

    public void setReciboFreteCarreteiroService(ReciboFreteCarreteiroService reciboFreteCarreteiroService) {
        this.reciboFreteCarreteiroService = reciboFreteCarreteiroService;
    }

    public void setControleTrechoService(ControleTrechoService controleTrechoService) {
        this.controleTrechoService = controleTrechoService;
    }

    public void setControleQuilometragemService(ControleQuilometragemService controleQuilometragemService) {
        this.controleQuilometragemService = controleQuilometragemService;
    }

    public void setPontoParadaTrechoService(PontoParadaTrechoService pontoParadaTrechoService) {
        this.pontoParadaTrechoService = pontoParadaTrechoService;
    }

    public void setProprietarioService(ProprietarioService proprietarioService) {
        this.proprietarioService = proprietarioService;
    }

    public void setControleCargaService(ControleCargaService controleCargaService) {
        this.controleCargaService = controleCargaService;
    }

    public void setRotaIdaVoltaService(RotaIdaVoltaService rotaIdaVoltaService) {
        this.rotaIdaVoltaService = rotaIdaVoltaService;
    }

    public void setMotoristaService(MotoristaService motoristaService) {
        this.motoristaService = motoristaService;
    }

    public void setMeioTransporteService(MeioTransporteService meioTransporteService) {
        this.meioTransporteService = meioTransporteService;
    }

    public void setRotaColetaEntregaService(RotaColetaEntregaService rotaColetaEntregaService) {
        this.rotaColetaEntregaService = rotaColetaEntregaService;
    }

    public void setSolicitacaoContratacaoService(SolicitacaoContratacaoService solicitacaoContratacaoService) {
        this.solicitacaoContratacaoService = solicitacaoContratacaoService;
    }

    public void setFilialService(FilialService filialService) {
        this.filialService = filialService;
    }

    public ReportExecutionManager getReportExecutionManager() {
        return reportExecutionManager;
    }

    public void setReportExecutionManager(ReportExecutionManager reportExecutionManager) {
        this.reportExecutionManager = reportExecutionManager;
    }

    public EmitirRelatorioControleCargaColetaEntregaService getEmitirRelatorioControleCargaColetaEntregaService() {
        return emitirRelatorioControleCargaColetaEntregaService;
    }

    public void setEmitirRelatorioControleCargaColetaEntregaService(
            EmitirRelatorioControleCargaColetaEntregaService emitirRelatorioControleCargaColetaEntregaService) {
        this.emitirRelatorioControleCargaColetaEntregaService = emitirRelatorioControleCargaColetaEntregaService;
    }

    public EmitirRelatorioControleCargaViagemService getEmitirRelatorioControleCargaViagemService() {
        return emitirRelatorioControleCargaViagemService;
    }

    public void setEmitirRelatorioControleCargaViagemService(EmitirRelatorioControleCargaViagemService emitirRelatorioControleCargaViagemService) {
        this.emitirRelatorioControleCargaViagemService = emitirRelatorioControleCargaViagemService;
    }

    public TypedFlatMap getDataUsuario() {
        Filial filialUsuario = SessionUtils.getFilialSessao();
        TypedFlatMap map = new TypedFlatMap();
        map.put("filial.idFilial", filialUsuario.getIdFilial());
        map.put("filial.sgFilial", filialUsuario.getSgFilial());
        map.put("filial.pessoa.nmFantasia", filialUsuario.getPessoa().getNmFantasia());

        YearMonthDay dataAtual = JTDateTimeUtils.getDataAtual();
        map.put("dtAtual", dataAtual);
        map.put("dtInicial", dataAtual.minusDays(15));
        return map;
    }

    @SuppressWarnings({ "unchecked", "rawtypes" })
    public List findLookupFilial(Map criteria) {
        List list = filialService.findLookup(criteria);
        List retorno = new ArrayList();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
            Filial filial = (Filial) iter.next();
            TypedFlatMap typedFlatMap = new TypedFlatMap();
            typedFlatMap.put("idFilial", filial.getIdFilial());
            typedFlatMap.put("sgFilial", filial.getSgFilial());
            typedFlatMap.put("pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
            retorno.add(typedFlatMap);
        }
        return retorno;
    }

    @SuppressWarnings({ "unchecked", "rawtypes" })
    public List findLookupNotaCredito(TypedFlatMap criteria) {
        List list = notaCreditoService.findLookupCuston(criteria);
        List retorno = new ArrayList();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
            TypedFlatMap mapNotaCredito = (TypedFlatMap) iter.next();
            TypedFlatMap tfm = new TypedFlatMap();
            tfm.put("idNotaCredito", mapNotaCredito.getLong("idNotaCredito"));
            tfm.put("nrNotaCredito", mapNotaCredito.getLong("nrNotaCredito"));
            tfm.put("filial.idFilial", mapNotaCredito.getLong("filial.idFilial"));
            tfm.put("filial.sgFilial", mapNotaCredito.getString("filial.sgFilial"));
            tfm.put("filial.pessoa.nmFantasia", mapNotaCredito.getString("filial.pessoa.nmFantasia"));
            retorno.add(tfm);
        }
        return retorno;
    }

    @SuppressWarnings({ "unchecked", "rawtypes" })
    public List findLookupSolicitacaoContratacao(Map criteria) {
        List list = solicitacaoContratacaoService.findLookup(criteria);
        List retorno = new ArrayList();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
            SolicitacaoContratacao solicitacaoContratacao = (SolicitacaoContratacao) iter.next();
            TypedFlatMap typedFlatMap = new TypedFlatMap();
            typedFlatMap.put("idSolicitacaoContratacao", solicitacaoContratacao.getIdSolicitacaoContratacao());
            typedFlatMap.put("nrSolicitacaoContratacao", solicitacaoContratacao.getNrSolicitacaoContratacao());
            typedFlatMap.put("filial.idFilial", solicitacaoContratacao.getFilial().getIdFilial());
            typedFlatMap.put("filial.sgFilial", solicitacaoContratacao.getFilial().getSgFilial());
            typedFlatMap.put("filial.pessoa.nmFantasia", solicitacaoContratacao.getFilial().getPessoa().getNmFantasia());
            retorno.add(typedFlatMap);
        }
        return retorno;
    }

    @SuppressWarnings({ "unchecked", "rawtypes" })
    public List findLookupRotaColetaEntrega(Map criteria) {
        List list = rotaColetaEntregaService.findLookup(criteria);
        List retorno = new ArrayList();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
            RotaColetaEntrega rotaColetaEntrega = (RotaColetaEntrega) iter.next();
            TypedFlatMap typedFlatMap = new TypedFlatMap();
            typedFlatMap.put("idRotaColetaEntrega", rotaColetaEntrega.getIdRotaColetaEntrega());
            typedFlatMap.put("nrRota", rotaColetaEntrega.getNrRota());
            typedFlatMap.put("dsRota", rotaColetaEntrega.getDsRota());
            retorno.add(typedFlatMap);
        }
        return retorno;
    }

    @SuppressWarnings({ "unchecked", "rawtypes" })
    public List findLookupMeioTransporteTransportado(Map criteria) {
        criteria.put("tipoMeioTransporte", "transportado");
        return findLookupMeioTransporte(criteria);
    }

    @SuppressWarnings({ "unchecked", "rawtypes" })
    public List findLookupMeioTransporteSemiRebocado(Map criteria) {
        criteria.put("tipoMeioTransporte", "semiRebocado");
        return findLookupMeioTransporte(criteria);
    }

    @SuppressWarnings({ "unchecked", "rawtypes" })
    private List findLookupMeioTransporte(Map criteria) {
        List list = meioTransporteService.findLookup(criteria);
        List retorno = new ArrayList();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
            MeioTransporte meioTransporte = (MeioTransporte) iter.next();
            TypedFlatMap typedFlatMap = new TypedFlatMap();
            typedFlatMap.put("idMeioTransporte", meioTransporte.getIdMeioTransporte());
            typedFlatMap.put("nrIdentificador", meioTransporte.getNrIdentificador());
            typedFlatMap.put("nrFrota", meioTransporte.getNrFrota());
            typedFlatMap.put("tpVinculo", meioTransporte.getTpVinculo().getValue());
            typedFlatMap.put("modeloMeioTransporte.tipoMeioTransporte.tpMeioTransporte.value",
                    meioTransporte.getModeloMeioTransporte().getTipoMeioTransporte().getTpMeioTransporte().getValue());
            retorno.add(typedFlatMap);
        }
        return retorno;
    }

    @SuppressWarnings({ "rawtypes", "unchecked" })
    public List findLookupMotorista(Map criteria) {
        Map mapPessoa = (Map) criteria.get("pessoa");
        if (mapPessoa != null) {
            mapPessoa.remove("nmPessoa");
        }
        List list = motoristaService.findLookup(criteria);
        List retorno = new ArrayList();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
            Motorista motorista = (Motorista) iter.next();
            TypedFlatMap tfm = new TypedFlatMap();
            tfm.put("idMotorista", motorista.getIdMotorista());
            tfm.put("pessoa.nrIdentificacao", motorista.getPessoa().getNrIdentificacao());
            tfm.put("pessoa.tpIdentificacao", motorista.getPessoa().getTpIdentificacao());
            tfm.put("pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(motorista.getPessoa()));
            tfm.put("pessoa.nmPessoa", motorista.getPessoa().getNmPessoa());
            retorno.add(tfm);
        }
        return retorno;
    }

    @SuppressWarnings({ "rawtypes", "unchecked" })
    public List findLookupProprietario(Map criteria) {
        Map mapPessoa = (Map) criteria.get("pessoa");
        if (mapPessoa != null) {
            mapPessoa.remove("nmPessoa");
        }
        List list = proprietarioService.findLookup(criteria);
        List retorno = new ArrayList();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
            Proprietario proprietario = (Proprietario) iter.next();
            TypedFlatMap typedFlatMap = new TypedFlatMap();
            typedFlatMap.put("idProprietario", proprietario.getIdProprietario());
            typedFlatMap.put("pessoa.nrIdentificacao", proprietario.getPessoa().getNrIdentificacao());
            typedFlatMap.put("pessoa.tpIdentificacao", proprietario.getPessoa().getTpIdentificacao());
            typedFlatMap.put("pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(proprietario.getPessoa()));
            typedFlatMap.put("pessoa.nmPessoa", proprietario.getPessoa().getNmPessoa());
            retorno.add(typedFlatMap);
        }
        return retorno;
    }

    @SuppressWarnings({ "rawtypes", "unchecked" })
    public List findLookupRotaIdaVolta(TypedFlatMap criteria) {
        List list = rotaIdaVoltaService.findLookupRotaIdaVolta(criteria);
        List retorno = new ArrayList();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
            RotaIdaVolta rotaIdaVolta = (RotaIdaVolta) iter.next();
            TypedFlatMap tfm = new TypedFlatMap();
            tfm.put("idRotaIdaVolta", rotaIdaVolta.getIdRotaIdaVolta());
            tfm.put("nrRota", rotaIdaVolta.getNrRota());
            tfm.put("rota.dsRota", rotaIdaVolta.getRota().getDsRota());
            tfm.put("vlFreteKm", rotaIdaVolta.getVlFreteKm());
            tfm.put("nrDistancia", rotaIdaVolta.getNrDistancia());
            tfm.put("moedaPais.moeda.sgMoeda", rotaIdaVolta.getMoedaPais().getMoeda().getSgMoeda());
            tfm.put("moedaPais.moeda.dsSimbolo", rotaIdaVolta.getMoedaPais().getMoeda().getDsSimbolo());
            retorno.add(tfm);
        }
        return retorno;
    }

    @SuppressWarnings({ "unchecked", "rawtypes" })
    public List findLookupRota(TypedFlatMap criteria) {
        List list = rotaService.findLookup(criteria);
        List retorno = new ArrayList();
        for (Iterator iter = list.iterator(); iter.hasNext();) {
            Rota rota = (Rota) iter.next();
            TypedFlatMap tfm = new TypedFlatMap();
            tfm.put("idRota", rota.getIdRota());
            tfm.put("dsRota", rota.getDsRota());
            retorno.add(tfm);
        }
        return retorno;
    }

    /**
     * 
     * @param criteria
     * @return
     */
    public void validatePaginatedControleCarga(TypedFlatMap criteria) {
        controleCargaService.validatePaginatedControleCarga(criteria);
    }

    /**
     * 
     * @param criteria
     * @return
     */
    @SuppressWarnings("rawtypes")
    public ResultSetPage findPaginated(TypedFlatMap criteria) {
        ResultSetPage rsp = controleCargaService.findPaginatedControleCarga(criteria, FindDefinition.createFindDefinition(criteria));
        for (Iterator iter = rsp.getList().iterator(); iter.hasNext();) {
            TypedFlatMap tfm = (TypedFlatMap) iter.next();

            String tpControleCargaValue = tfm.getDomainValue("tpControleCarga").getValue();
            if (tpControleCargaValue.equals("C")) {
                tfm.put("dsRota", tfm.getString("dsRotaColeta"));
                tfm.put("tpRotaViagem", tfm.getDomainValue("tpControleCarga").getDescription().toString());
            } else {
                if (tfm.getDomainValue("tpRotaViagemDominio") != null) {
                    tfm.put("tpRotaViagem", tfm.getDomainValue("tpRotaViagemDominio").getDescription().toString());
                }
                tfm.put("dsRota", tfm.getString("dsRotaViagem"));
            }

            DateTime dhPrevisaoSaida = tfm.getDateTime("dhPrevisaoSaida");
            if (dhPrevisaoSaida != null) {
                tfm.put("hrPrevisaoSaida", JTFormatUtils.format(dhPrevisaoSaida, JTFormatUtils.SHORT, JTFormatUtils.TIMEOFDAY));
            }
            tfm.remove("tpRotaViagemDominio");

            if (tfm.get("motorista.pessoa.nrIdentificacao") != null) {
                tfm.put("motorista.idMotorista", tfm.get("motorista.pessoa.idPessoa"));
                tfm.put("motorista.pessoa.nmPessoa", tfm.get("motorista.pessoa.nmPessoa"));
                tfm.put("motorista.pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao((String) tfm.get("motorista.pessoa.tpIdentificacao.value"),
                        (String) tfm.get("motorista.pessoa.nrIdentificacao")));
            }
        }
        return rsp;
    }

    /**
     * 
     * @param criteria
     * @return
     */
    public Integer getRowCount(TypedFlatMap criteria) {
        return controleCargaService.getRowCountControleCarga(criteria);
    }

    /**
     * 
     * @param parameters
     * @return
     */
    @SuppressWarnings({ "rawtypes", "unchecked" })
    public List findPaginatedControleTrecho(TypedFlatMap parameters) {
        Long idControleCarga = parameters.getLong("idControleCarga");
        ControleCarga cc = controleCargaService.findByIdInitLazyProperties(idControleCarga, false);

        List lista = controleTrechoService.findControleTrechoByControleCarga(idControleCarga, Boolean.TRUE, null, null);
        List retorno = new ArrayList();
        for (Iterator iter = lista.iterator(); iter.hasNext();) {
            ControleTrecho ct = (ControleTrecho) iter.next();
            TypedFlatMap tfm = new TypedFlatMap();

            tfm.put("idControleTrecho", ct.getIdControleTrecho());
            tfm.put("filialByIdFilialOrigem.idFilial", ct.getFilialByIdFilialOrigem().getIdFilial());
            tfm.put("filialByIdFilialOrigem.sgFilial", ct.getFilialByIdFilialOrigem().getSgFilial());
            tfm.put("filialByIdFilialDestino.idFilial", ct.getFilialByIdFilialDestino().getIdFilial());
            tfm.put("filialByIdFilialDestino.sgFilial", ct.getFilialByIdFilialDestino().getSgFilial());
            tfm.put("dhSaida", ct.getDhSaida());
            tfm.put("dhChegada", ct.getDhChegada());
            tfm.put("dhPrevisaoSaida", ct.getDhPrevisaoSaida());
            tfm.put("nrDistancia", ct.getNrDistancia());
            tfm.put("hrTempoViagem", ct.getNrTempoViagem() == null ? null : JTFormatUtils.formatTime((ct.getNrTempoViagem().longValue() * 60), 2, 1));
            tfm.put("hrTempoOperacao", ct.getNrTempoOperacao() == null ? null : JTFormatUtils.formatTime((ct.getNrTempoOperacao().longValue() * 60), 2, 1));

            List listControleTrecho = controleTrechoService.findControleTrechoByControleCarga(idControleCarga, Boolean.TRUE,
                    ct.getFilialByIdFilialDestino().getIdFilial(), null);

            if (!listControleTrecho.isEmpty()) {
                ControleTrecho controleTrecho = (ControleTrecho) listControleTrecho.get(0);
                if (controleTrecho.getDhSaida() != null && controleTrecho.getDhChegada() != null) {
                    tfm.put("hrTempoOperacaoRealizado",
                            JTFormatUtils.formatTime((controleTrecho.getDhSaida().getMillis() - ct.getDhChegada().getMillis()) / 1000, 2, 1));
                }
            } else
                tfm.put("hrTempoOperacaoRealizado",
                        getHrTempoOperacaoRealizado(idControleCarga, ct.getDhChegada(), cc.getFilialByIdFilialDestino().getIdFilial()));

            retorno.add(tfm);
        }
        return retorno;
    }

    /**
     * 
     * @param idControleCarga
     * @param dhChegada
     * @return
     */
    @SuppressWarnings("rawtypes")
    private String getHrTempoOperacaoRealizado(Long idControleCarga, DateTime dhChegada, Long idFilialDestino) {
        List listaEventos = eventoControleCargaService.findEventoControleCargaByIdFilialByIdControleCargaByTpEvento(idFilialDestino, idControleCarga, "FD");

        if (!listaEventos.isEmpty()) {
            EventoControleCarga ecc = (EventoControleCarga) listaEventos.get(0);
            if (ecc.getDhEvento() != null && dhChegada != null) {
                return JTFormatUtils.formatTime((ecc.getDhEvento().getMillis() - dhChegada.getMillis()) / 1000, 2, 1);
            }
        }
        return null;
    }

    @SuppressWarnings({ "rawtypes", "unchecked" })
    public ResultSetPage findPaginatedPontosParada(TypedFlatMap criteria) {
        Long idRotaIdaVolta = criteria.getLong("rotaIdaVolta.idRotaIdaVolta");
        if (idRotaIdaVolta == null)
            return ResultSetPage.EMPTY_RESULTSET;

        List lista = pontoParadaTrechoService.findToGerarControleCarga(idRotaIdaVolta);
        List retorno = new ArrayList();
        TypedFlatMap mapRetorno = null;
        for (Iterator iter = lista.iterator(); iter.hasNext();) {
            TypedFlatMap map = (TypedFlatMap) iter.next();
            mapRetorno = new TypedFlatMap();
            mapRetorno.put("trecho", map.getString("sgFilialOrigem") + " - " + map.getString("sgFilialDestino"));
            String dsRodovia = map.getString("dsRodovia");
            mapRetorno.put("rodovia", map.getString("sgRodovia") + (StringUtils.isBlank(dsRodovia) ? "" : (" - " + dsRodovia)));
            mapRetorno.put("nrKm", map.getInteger("nrKm"));
            mapRetorno.put("nmMunicipio", map.getString("nmMunicipio"));
            mapRetorno.put("sgUf", map.getString("sgUf"));
            mapRetorno.put("hrTempoParada",
                    map.getInteger("nrTempoParada") == null ? null : JTFormatUtils.formatTime((map.getInteger("nrTempoParada").longValue() * 60), 2, 1));
            mapRetorno.put("nrLatitude", map.getBigDecimal("nrLatitude"));
            mapRetorno.put("nrLongitude", map.getBigDecimal("nrLongitude"));
            mapRetorno.put("idPontoParadaTrecho", map.getLong("idPontoParadaTrecho"));
            retorno.add(mapRetorno);
        }
        return new ResultSetPage(Integer.valueOf(1), retorno);
    }

    @SuppressWarnings("rawtypes")
    public ResultSetPage findPaginatedAdiantamentos(TypedFlatMap parameters) {
        ResultSetPage rsp = reciboFreteCarreteiroService.findPaginatedByIdControleCarga(parameters.getLong("idControleCarga"),
                FindDefinition.createFindDefinition(parameters));
        return rsp;
    }

    public Integer getRowCountAdiantamentos(TypedFlatMap parameters) {
        return reciboFreteCarreteiroService.getRowCountFindPaginatedByIdControleCarga(parameters.getLong("idControleCarga"));
    }

    @SuppressWarnings({ "rawtypes", "unchecked" })
    public List findPaginatedPagtoPedagioCc(TypedFlatMap parameters) {
        List listaRetorno = new ArrayList();
        List result = pagtoPedagioCcService.findPagtoPedagioCcByIdControleCarga(parameters.getLong("idControleCarga"));
        for (Iterator iter = result.iterator(); iter.hasNext();) {
            PagtoPedagioCc pagtoPedagioCc = (PagtoPedagioCc) iter.next();
            TypedFlatMap map = new TypedFlatMap();
            map.put("idPagtoPedagioCc", pagtoPedagioCc.getIdPagtoPedagioCc());
            map.put("vlPedagio", pagtoPedagioCc.getVlPedagio());
            map.put("moeda.sgMoeda", pagtoPedagioCc.getMoeda().getSgMoeda());
            map.put("moeda.dsSimbolo", pagtoPedagioCc.getMoeda().getDsSimbolo());
            map.put("tipoPagamPostoPassagem.dsTipoPagamPostoPassagem", pagtoPedagioCc.getTipoPagamPostoPassagem().getDsTipoPagamPostoPassagem());
            if (pagtoPedagioCc.getOperadoraCartaoPedagio() != null) {
                map.put("operadoraCartaoPedagio.pessoa.nmPessoa", pagtoPedagioCc.getOperadoraCartaoPedagio().getPessoa().getNmPessoa());
            }
            if (pagtoPedagioCc.getCartaoPedagio() != null) {
                map.put("cartaoPedagio.nrCartao", pagtoPedagioCc.getCartaoPedagio().getNrCartao());
            }
            listaRetorno.add(map);
        }
        return listaRetorno;
    }

    @SuppressWarnings({ "unchecked", "rawtypes" })
    public List findPaginatedPostoPassagemCc(TypedFlatMap parameters) {
        List result = postoPassagemCcService.findPostoPassagemCcByIdControleCarga(parameters.getLong("idControleCarga"));
        List retorno = new ArrayList();
        for (Iterator iter = result.iterator(); iter.hasNext();) {
            PostoPassagemCc postoPassagemCc = (PostoPassagemCc) iter.next();
            TypedFlatMap map = new TypedFlatMap();
            map.put("idPostoPassagemCc", postoPassagemCc.getIdPostoPassagemCc());
            map.put("vlPagar", postoPassagemCc.getVlPagar());
            map.put("postoPassagem.nrKm", postoPassagemCc.getPostoPassagem().getNrKm());
            map.put("postoPassagem.tpPostoPassagem", postoPassagemCc.getPostoPassagem().getTpPostoPassagem());
            map.put("postoPassagem.municipio.nmMunicipio", postoPassagemCc.getPostoPassagem().getMunicipio().getNmMunicipio());
            if (postoPassagemCc.getPostoPassagem().getRodovia() != null) {
                map.put("postoPassagem.rodovia.sgRodovia", postoPassagemCc.getPostoPassagem().getRodovia().getSgRodovia());
            }
            map.put("moeda.sgMoeda", postoPassagemCc.getMoeda().getSgMoeda());
            map.put("moeda.dsSimbolo", postoPassagemCc.getMoeda().getDsSimbolo());
            map.put("tipoPagamPostoPassagem.dsTipoPagamPostoPassagem", postoPassagemCc.getTipoPagamPostoPassagem().getDsTipoPagamPostoPassagem());
            retorno.add(map);
        }
        return retorno;
    }

    public TypedFlatMap findById(Long idControleCarga) {
        ControleCarga cc = controleCargaService.findByIdControleCarga(idControleCarga);
        TypedFlatMap tfm = new TypedFlatMap();
        tfm.put("idControleCarga", cc.getIdControleCarga());
        tfm.put("nrControleCarga", cc.getNrControleCarga());
        tfm.put("filialByIdFilialOrigem.idFilial", cc.getFilialByIdFilialOrigem().getIdFilial());
        tfm.put("filialByIdFilialOrigem.sgFilial", cc.getFilialByIdFilialOrigem().getSgFilial());
        tfm.put("tpControleCarga.value", cc.getTpControleCarga().getValue());
        tfm.put("tpControleCarga.description", cc.getTpControleCarga().getDescription().toString());
        tfm.put("tpStatusControleCarga.description", cc.getTpStatusControleCarga().getDescription().toString());
        tfm.put("nrSMP", cc.getNrSMP());

        if (!cc.getTpStatusControleCarga().getValue().equals("EV"))
            tfm.put("filialAtualizaStatus.sgFilial", cc.getFilialByIdFilialAtualizaStatus().getSgFilial());

        if (cc.getTpRotaViagem() != null) {
            tfm.put("tpRotaViagem.value", cc.getTpRotaViagem().getValue());
            tfm.put("tpRotaViagem.description", cc.getTpRotaViagem().getDescription().toString());
        }
        tfm.put("vlFreteCarreteiro", cc.getVlFreteCarreteiro());
        Long valorHrTempoViagem = cc.getNrTempoViagem() == null ? null : Long.valueOf(cc.getNrTempoViagem());
        tfm.put("hrTempoViagem", FormatUtils.converteMinutosParaHorasMinutos(valorHrTempoViagem, FormatUtils.ESCALA_HHH));
        tfm.put("dhPrevisaoSaida", cc.getDhPrevisaoSaida());

        if (cc.getRotaColetaEntrega() != null) {
            tfm.put("rotaColetaEntrega.nrRota", cc.getRotaColetaEntrega().getNrRota());
            tfm.put("rotaColetaEntrega.dsRota", cc.getRotaColetaEntrega().getDsRota());
        }
        if (cc.getRotaIdaVolta() != null) {
            tfm.put("rotaIdaVolta.idRotaIdaVolta", cc.getRotaIdaVolta().getIdRotaIdaVolta());
            tfm.put("rotaIdaVolta.nrRota", cc.getRotaIdaVolta().getNrRota());
            tfm.put("rotaIdaVolta.rota.dsRota", cc.getRotaIdaVolta().getRota().getDsRota());
        }
        if (cc.getSolicitacaoContratacao() != null) {
            tfm.put("solicitacaoContratacao.nrSolicitacaoContratacao", cc.getSolicitacaoContratacao().getNrSolicitacaoContratacao());
            tfm.put("solicitacaoContratacao.filial.sgFilial", cc.getSolicitacaoContratacao().getFilial().getSgFilial());
        }
        if (cc.getTipoTabelaColetaEntrega() != null) {
            tfm.put("tipoTabelaColetaEntrega.dsTipoTabelaColetaEntrega", cc.getTipoTabelaColetaEntrega().getDsTipoTabelaColetaEntrega());
        }
        if (cc.getVlFreteCarreteiro() != null && cc.getMoeda() != null) {
            tfm.put("moedaVlFreteCarreteiro", cc.getMoeda().getSgMoeda() + " " + cc.getMoeda().getDsSimbolo());
        }

        // VIAGEM
        if (cc.getTpControleCarga().getValue().equals("V")) {
            if (cc.getMeioTransporteByIdTransportado() != null) {
                tfm.put("meioTransporteByIdTransportado.idMeioTransporte", cc.getMeioTransporteByIdTransportado().getIdMeioTransporte());
                tfm.put("meioTransporteByIdTransportadoViagem.nrFrota", cc.getMeioTransporteByIdTransportado().getNrFrota());
                tfm.put("meioTransporteByIdTransportadoViagem.nrIdentificador", cc.getMeioTransporteByIdTransportado().getNrIdentificador());
            }
            if (cc.getMeioTransporteByIdSemiRebocado() != null) {
                tfm.put("meioTransporteByIdSemiRebocadoViagem.nrFrota", cc.getMeioTransporteByIdSemiRebocado().getNrFrota());
                tfm.put("meioTransporteByIdSemiRebocadoViagem.nrIdentificador", cc.getMeioTransporteByIdSemiRebocado().getNrIdentificador());
            }
            if (cc.getProprietario() != null) {
                String tpIdentificacao = FormatUtils.formatIdentificacao(cc.getProprietario().getPessoa().getTpIdentificacao(),
                        cc.getProprietario().getPessoa().getNrIdentificacao());
                tfm.put("proprietarioViagem.pessoa.nrIdentificacaoFormatado", tpIdentificacao);
                tfm.put("proprietarioViagem.pessoa.nmPessoa", cc.getProprietario().getPessoa().getNmPessoa());
            }
            if (cc.getMotorista() != null) {
                String tpIdentificacao = FormatUtils.formatIdentificacao(cc.getMotorista().getPessoa().getTpIdentificacao(),
                        cc.getMotorista().getPessoa().getNrIdentificacao());
                tfm.put("motoristaViagem.pessoa.nrIdentificacaoFormatado", tpIdentificacao);
                tfm.put("motoristaViagem.pessoa.nmPessoa", cc.getMotorista().getPessoa().getNmPessoa());
            }
            if (cc.getRota() != null) {
                tfm.put("rotaIdaVolta.rota.dsRota", cc.getRota().getDsRota());
            }
        }
        // COLETA
        else {
            if (cc.getMeioTransporteByIdTransportado() != null) {
                tfm.put("meioTransporteByIdTransportado.idMeioTransporte", cc.getMeioTransporteByIdTransportado().getIdMeioTransporte());
                tfm.put("meioTransporteByIdTransportadoColeta.nrFrota", cc.getMeioTransporteByIdTransportado().getNrFrota());
                tfm.put("meioTransporteByIdTransportadoColeta.nrIdentificador", cc.getMeioTransporteByIdTransportado().getNrIdentificador());
            }
            if (cc.getMeioTransporteByIdSemiRebocado() != null) {
                tfm.put("meioTransporteByIdSemiRebocadoColeta.nrFrota", cc.getMeioTransporteByIdSemiRebocado().getNrFrota());
                tfm.put("meioTransporteByIdSemiRebocadoColeta.nrIdentificador", cc.getMeioTransporteByIdSemiRebocado().getNrIdentificador());
            }
            if (cc.getProprietario() != null) {
                String tpIdentificacao = FormatUtils.formatIdentificacao(cc.getProprietario().getPessoa().getTpIdentificacao(),
                        cc.getProprietario().getPessoa().getNrIdentificacao());
                tfm.put("proprietarioColeta.pessoa.nrIdentificacaoFormatado", tpIdentificacao);
                tfm.put("proprietarioColeta.pessoa.nmPessoa", cc.getProprietario().getPessoa().getNmPessoa());
            }

            if (cc.getMotorista() != null) {
                String tpIdentificacao = FormatUtils.formatIdentificacao(cc.getMotorista().getPessoa().getTpIdentificacao(),
                        cc.getMotorista().getPessoa().getNrIdentificacao());
                tfm.put("motoristaColeta.pessoa.nrIdentificacaoFormatado", tpIdentificacao);
                tfm.put("motoristaColeta.pessoa.nmPessoa", cc.getMotorista().getPessoa().getNmPessoa());
            }

            // Faz o find novamente pois aqui na action não inicializa as propriedades lazy
            Filial filial = filialService.findById(cc.getFilialByIdFilialOrigem().getIdFilial());

            if (cc.getNotaCredito() != null) {
                // A princípio, se há nota de crédito para um controle de carga, deve haver somente uma
                // Modificação futura prevista.
                NotaCredito nc = notaCreditoService.findById(cc.getNotaCredito().getIdNotaCredito());

                tfm.put("notaCredito.nrNotaCredito", nc.getNrNotaCredito());

                tfm.put("notaCredito.filial.sgFilial", filial.getSgFilial());

                if (cc.getTipoTabelaColetaEntrega() == null && nc.getTpNotaCredito() != null) {
                    tfm.put("tipoTabelaColetaEntrega.dsTipoTabelaColetaEntrega", CALCULO_PADRAO);
                }
            } else {
                if (cc.getTipoTabelaColetaEntrega() == null
                        && CollectionUtils.isEmpty(tabelaColetaEntregaCCService.findByIdContoleCarga(cc.getIdControleCarga()))
                        && isCalculoPadrao(filial.getIdFilial())) {
                    tfm.put("tipoTabelaColetaEntrega.dsTipoTabelaColetaEntrega", CALCULO_PADRAO);
                }
            }

            ControleQuilometragem controleQuilometragemSaida = controleQuilometragemService
                    .findControleQuilometragemByIdControleCargaByIdFilial(cc.getIdControleCarga(), cc.getFilialByIdFilialOrigem().getIdFilial(), Boolean.TRUE);
            if (controleQuilometragemSaida != null)
                tfm.put("nrQuilometragemSaida", controleQuilometragemSaida.getNrQuilometragem());

            ControleQuilometragem controleQuilometragemRetorno = controleQuilometragemService
                    .findControleQuilometragemByIdControleCargaByIdFilial(cc.getIdControleCarga(), cc.getFilialByIdFilialOrigem().getIdFilial(), Boolean.FALSE);
            if (controleQuilometragemRetorno != null)
                tfm.put("nrQuilometragemRetorno", controleQuilometragemRetorno.getNrQuilometragem());
        }

        Filial filialUsuario = SessionUtils.getFilialSessao();
        tfm.put("idFilialUsuario", filialUsuario.getIdFilial());
        tfm.put("sgFilialUsuario", filialUsuario.getSgFilial());
        tfm.put("nmFantasiaFilialUsuario", filialUsuario.getPessoa().getNmFantasia());
        
        // LMSA-6340
        tfm.put("tpCargaCompartilhada", 
                cc.getSolicitacaoContratacao() != null ?
                        (cc.getSolicitacaoContratacao().getTpCargaCompartilhada() != null ? 
                                cc.getSolicitacaoContratacao().getTpCargaCompartilhada().getDescription() : null) : null);

        return tfm;
    }

    private boolean isCalculoPadrao(Long idFilial) {
        boolean calculoPadrao = false;
        ConteudoParametroFilial conteudoParametroFilial = conteudoParametroFilialService.findByNomeParametro(idFilial, PARAMETRO_FILIAL, false, true);
        if (conteudoParametroFilial != null && SIM.equalsIgnoreCase(conteudoParametroFilial.getVlConteudoParametroFilial())) {
            calculoPadrao = true;
        }
        return calculoPadrao;
    }

    public TypedFlatMap findByIdAdiantamento(Long idReciboFreteCarreteiro) {
        ReciboFreteCarreteiro bean = reciboFreteCarreteiroService.findByIdReciboFreteCarreteiro(idReciboFreteCarreteiro);
        TypedFlatMap map = new TypedFlatMap();
        map.put("idReciboFreteCarreteiro", bean.getIdReciboFreteCarreteiro());
        map.put("pcAdiantamentoFrete", bean.getPcAdiantamentoFrete());
        map.put("vlBruto", bean.getVlBruto());
        map.put("obReciboFreteCarreteiro", bean.getObReciboFreteCarreteiro());
        if (bean.getMoedaPais() != null) {
            map.put("moedaPais.moeda.siglaSimbolo", bean.getMoedaPais().getMoeda().getSiglaSimbolo());
        }
        if (bean.getBeneficiario() != null) {
            map.put("beneficiario.pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(bean.getBeneficiario().getPessoa()));
            map.put("beneficiario.pessoa.nmPessoa", bean.getBeneficiario().getPessoa().getNmPessoa());
        }
        if (bean.getProprietario() != null) {
            map.put("proprietario.pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(bean.getProprietario().getPessoa()));
            map.put("proprietario.pessoa.nmPessoa", bean.getProprietario().getPessoa().getNmPessoa());
        }
        if (bean.getContaBancaria() != null) {
            map.put("contaBancaria.nrContaBancaria", bean.getContaBancaria().getNrContaBancaria());
            map.put("contaBancaria.dvContaBancaria", bean.getContaBancaria().getDvContaBancaria());
            if (bean.getContaBancaria().getAgenciaBancaria() != null) {
                map.put("contaBancaria.agenciaBancaria.nrAgenciaBancaria", bean.getContaBancaria().getAgenciaBancaria().getNrAgenciaBancaria());
                map.put("contaBancaria.agenciaBancaria.nmAgenciaBancaria", bean.getContaBancaria().getAgenciaBancaria().getNmAgenciaBancaria());
                if (bean.getContaBancaria().getAgenciaBancaria().getBanco() != null) {
                    map.put("contaBancaria.agenciaBancaria.banco.nrBanco", bean.getContaBancaria().getAgenciaBancaria().getBanco().getNrBanco());
                    map.put("contaBancaria.agenciaBancaria.banco.nmBanco", bean.getContaBancaria().getAgenciaBancaria().getBanco().getNmBanco());
                }
            }
        }
        return map;
    }

    @SuppressWarnings({ "rawtypes", "unchecked" })
    public ResultSetPage findPaginatedTrechoCorporativo(TypedFlatMap criteria) {
        List listaTrechos = trechoCorporativoService.findByIdControleCarga(criteria.getLong("idControleCarga"), null, null);
        List lista = new ArrayList();
        for (Iterator iter = listaTrechos.iterator(); iter.hasNext();) {
            TrechoCorporativo tc = (TrechoCorporativo) iter.next();
            TypedFlatMap tfm = new TypedFlatMap();
            tfm.put("idTrechoCorporativo", tc.getIdTrechoCorporativo());
            tfm.put("sgFilialOrigem", tc.getFilialByIdFilialOrigem().getSgFilial());
            tfm.put("sgFilialDestino", tc.getFilialByIdFilialDestino().getSgFilial());
            tfm.put("vlFaixa1", tc.getVlFaixa1());
            tfm.put("vlFaixa2", tc.getVlFaixa2());
            tfm.put("vlFaixa3", tc.getVlFaixa3());
            tfm.put("hrSaida", tc.getHrSaida());
            tfm.put("hrPrevisao", tc.getQtdHorasPrev() == null ? null : JTFormatUtils.formatTime((tc.getQtdHorasPrev().longValue() * 60), 2, 1));
            lista.add(tfm);
        }
        return new ResultSetPage(Integer.valueOf(1), lista);
    }

    @SuppressWarnings({ "rawtypes", "unchecked" })
    public ResultSetPage findPaginatedAdiantamentoTrecho(TypedFlatMap criteria) {
        List listaTrechos = adiantamentoTrechoService.findByIdControleCarga(criteria.getLong("idControleCarga"), null, null);
        List lista = new ArrayList();
        for (Iterator iter = listaTrechos.iterator(); iter.hasNext();) {
            AdiantamentoTrecho adiantamentoTrecho = (AdiantamentoTrecho) iter.next();
            TypedFlatMap tfm = new TypedFlatMap();
            tfm.put("idAdiantamentoTrecho", adiantamentoTrecho.getIdAdiantamentoTrecho());
            tfm.put("idFilialOrigem", adiantamentoTrecho.getFilialByIdFilialOrigem().getIdFilial());
            tfm.put("sgFilialOrigem", adiantamentoTrecho.getFilialByIdFilialOrigem().getSgFilial());
            tfm.put("sgFilialDestino", adiantamentoTrecho.getFilialByIdFilialDestino().getSgFilial());
            tfm.put("vlFrete", adiantamentoTrecho.getVlFrete());
            tfm.put("vlAdiantamento", adiantamentoTrecho.getVlAdiantamento());
            tfm.put("pcFrete", adiantamentoTrecho.getPcFrete());
            tfm.put("tpStatusRecibo", adiantamentoTrecho.getTpStatusRecibo());
            lista.add(tfm);
        }
        return new ResultSetPage(Integer.valueOf(1), lista);
    }

    @SuppressWarnings({ "rawtypes", "unchecked" })
    public ResultSetPage findPaginatedCarregamentoDescarga(TypedFlatMap criteria) {
        List listCarredamentoDescarga = carregamentoDescargaService.findCarregamentoDescarga(criteria.getLong("idControleCarga"), "D");
        List lista = new ArrayList();
        for (Iterator iter = listCarredamentoDescarga.iterator(); iter.hasNext();) {
            CarregamentoDescarga carregamentoDescarga = (CarregamentoDescarga) iter.next();
            TypedFlatMap tfm = new TypedFlatMap();

            tfm.put("idCarregamentoDescarga", carregamentoDescarga.getIdCarregamentoDescarga());
            tfm.put("sgFilial", carregamentoDescarga.getFilial().getSgFilial());
            tfm.put("tpOperacao", carregamentoDescarga.getTpOperacao());
            tfm.put("tpStatusOperacao", carregamentoDescarga.getTpStatusOperacao());
            tfm.put("dhInicioOperacao", carregamentoDescarga.getDhInicioOperacao());
            tfm.put("dhFimOperacao", carregamentoDescarga.getDhFimOperacao());
            lista.add(tfm);
        }
        return new ResultSetPage(Integer.valueOf(1), lista);
    }

    public Integer getRowCountCarregamentoDescarga(TypedFlatMap parameters) {
        Long idControleCarga = parameters.getLong("idControleCarga");

        return carregamentoDescargaService.getRowCountCarregamentoDescarga(idControleCarga, "D");
    }

    public TypedFlatMap findDadosBeneficiario(TypedFlatMap criteria) {
        TypedFlatMap tfm = new TypedFlatMap();
        tfm.putAll(findProprietarioVeiculo(criteria.getLong("idMeioTransporte")));

        // Busca dados do beneficiário
        Long idProprietario = tfm.getLong("proprietario.idProprietario");
        tfm.putAll(findBeneficiario(idProprietario, criteria.getLong("idControleCarga")));
        return tfm;
    }

    /**
     * 
     * @param idMeioTransporte
     * @param mapRetorno
     */
    @SuppressWarnings("rawtypes")
    private TypedFlatMap findProprietarioVeiculo(Long idMeioTransporte) {
        TypedFlatMap tfm = new TypedFlatMap();

        Map mapResultado = meioTranspProprietarioService.findProprietarioByMeioTransporte(idMeioTransporte);
        if (mapResultado != null) {
            Map mapProprietario = (Map) mapResultado.get("proprietario");
            if (mapProprietario != null) {
                tfm.put("proprietario.idProprietario", mapProprietario.get("idProprietario"));
                Map mapPessoa = (Map) mapProprietario.get("pessoa");
                if (mapPessoa != null) {
                    tfm.put("proprietario.pessoa.nrIdentificacaoFormatado", FormatUtils
                            .formatIdentificacao((String) ((Map) mapPessoa.get("tpIdentificacao")).get("value"), (String) mapPessoa.get("nrIdentificacao")));
                    tfm.put("proprietario.pessoa.nmPessoa", mapPessoa.get("nmPessoa"));
                }
            }
        }
        return tfm;
    }

    @SuppressWarnings({ "unchecked", "rawtypes" })
    public TypedFlatMap findBeneficiario(Long idProprietario, Long idControleCarga) {
        TypedFlatMap tfm = new TypedFlatMap();

        List<AdiantamentoTrecho> adiantamentoTrechos = adiantamentoTrechoService.findByIdControleCarga(idControleCarga, null, null);
        PostoConveniado postoConveniado = null;

        String tpBeneficiarioAdiantamento = "PR";
        if (adiantamentoTrechos != null && !adiantamentoTrechos.isEmpty()) {
            postoConveniado = adiantamentoTrechos.get(0).getPostoConveniado();
            if (postoConveniado != null) {
                tpBeneficiarioAdiantamento = "PO";
            }
        }

        if (postoConveniado == null || "PR".equals(tpBeneficiarioAdiantamento)) {
            // popula campos com informações do proprietarios
            tfm.put("tpBeneficiario", "PR");
            if (idProprietario != null) {
                List retorno = beneficiarioProprietarioService.findBeneficiarioByIdProprietario(idProprietario);
                if (!retorno.isEmpty()) {
                    tfm.putAll(populateDadosBeneficiario((Map) retorno.get(0)));
                } else {
                    retorno = proprietarioService.findDadosBancariosByIdProprietario(idProprietario);
                    if (!retorno.isEmpty())
                        tfm.putAll(populateDadosBeneficiario((Map) retorno.get(0)));
                }
            }
        } else {
            if ("PO".equals(tpBeneficiarioAdiantamento)) {
                tfm.put("tpBeneficiario", "PO");
                tfm.putAll(populateDadosBeneficiario(postoConveniadoService.findDadosBancariosPostoConveniado(postoConveniado.getIdPostoConveniado())));
            }
        }

        return tfm;
    }

    @SuppressWarnings("rawtypes")
    private TypedFlatMap populateDadosBeneficiario(Map map) {
        TypedFlatMap tfm = new TypedFlatMap();
        tfm.put("contaBancaria.nrContaBancaria", map.get("nrContaBancaria") == null ? "" : map.get("nrContaBancaria"));
        tfm.put("contaBancaria.dvContaBancaria", map.get("dvContaBancaria") == null ? "" : map.get("dvContaBancaria"));
        tfm.put("contaBancaria.agenciaBancaria.nrAgenciaBancaria", map.get("nrAgenciaBancaria") == null ? "" : map.get("nrAgenciaBancaria"));
        tfm.put("contaBancaria.agenciaBancaria.nmAgenciaBancaria", map.get("nmAgenciaBancaria") == null ? "" : map.get("nmAgenciaBancaria"));
        tfm.put("contaBancaria.agenciaBancaria.banco.nrBanco", map.get("nrBanco") == null ? "" : map.get("nrBanco"));
        tfm.put("contaBancaria.agenciaBancaria.banco.nmBanco", map.get("nmBanco") == null ? "" : map.get("nmBanco"));
        return tfm;
    }

    public void setCarregamentoDescargaService(CarregamentoDescargaService carregamentoDescargaService) {
        this.carregamentoDescargaService = carregamentoDescargaService;
    }

    public File executeRelatorioControleCarga(TypedFlatMap parameters) throws Exception {
        String tpManifesto = parameters.getString("tpControleCarga.value");

        if (ConstantesExpedicao.TP_CONTROLE_CARGA_COLETA_ENTREGA.equalsIgnoreCase(tpManifesto)) {
            return this.reportExecutionManager.executeReport(this.emitirRelatorioControleCargaColetaEntregaService, parameters);
        } else if (ConstantesExpedicao.TP_CONTROLE_CARGA_VIAGEM.equalsIgnoreCase(tpManifesto)) {
            return this.reportExecutionManager.executeReport(this.emitirRelatorioControleCargaViagemService, parameters);
        }

        return null;
    }

    public void setConteudoParametroFilialService(ConteudoParametroFilialService conteudoParametroFilialService) {
        this.conteudoParametroFilialService = conteudoParametroFilialService;
    }

    public void setTabelaColetaEntregaCCService(TabelaColetaEntregaCCService tabelaColetaEntregaCCService) {
        this.tabelaColetaEntregaCCService = tabelaColetaEntregaCCService;
    }
	
    // LMSA-6159 LMSA-6249
	private ConfiguracoesFacade configuracoesFacade;
	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
	    this.configuracoesFacade = configuracoesFacade;
	}
    public TypedFlatMap generateNotFisFedEXAgain(Long idControleCarga) {
        TypedFlatMap param = new TypedFlatMap();
        param.put("idControleCarga", idControleCarga); // parameters.get("idControleCarga"));
        param.put("filialUsuario.idFilial", SessionUtils.getFilialSessao().getIdFilial());
        controleCargaService.generateNotFisFedEXAgainByControleCarga(param);
        param = new TypedFlatMap();
        // postar codigo de mensagem de sucesso
        String codigoEnvioSucesso = "LMS-05415";
        param.put("sucesso", configuracoesFacade.getMensagem(codigoEnvioSucesso));
        return param;
    }
	
}