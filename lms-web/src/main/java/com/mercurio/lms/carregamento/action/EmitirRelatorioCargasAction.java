package com.mercurio.lms.carregamento.action;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.report.ReportActionSupport;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.report.EmitirRelatorioCargasDetalhadoService;
import com.mercurio.lms.carregamento.report.EmitirRelatorioCargasResumidoService;
import com.mercurio.lms.configuracoes.model.Moeda;
import com.mercurio.lms.configuracoes.model.Servico;
import com.mercurio.lms.configuracoes.model.service.MoedaService;
import com.mercurio.lms.configuracoes.model.service.ServicoService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.RotaColetaEntrega;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.RotaColetaEntregaService;
import com.mercurio.lms.sim.model.service.LocalizacaoMercadoriaService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.service.ClienteService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.carregamento.emitirRelatorioCargasAction"
 */
public class EmitirRelatorioCargasAction extends ReportActionSupport {

	private ClienteService clienteService;
	private EmitirRelatorioCargasDetalhadoService emitirRelatorioCargasDetalhadoService;
	private EmitirRelatorioCargasResumidoService emitirRelatorioCargasResumidoService;
	private FilialService filialService;
	private LocalizacaoMercadoriaService localizacaoMercadoriaService;
	private MoedaService moedaService;
	private RotaColetaEntregaService rotaColetaEntregaService;
	private ServicoService servicoService;
	private DomainValueService domainValueService;

	public void setMoedaService(MoedaService moedaService) {
		this.moedaService = moedaService;
	}
	public void setEmitirRelatorioCargasDetalhadoService(EmitirRelatorioCargasDetalhadoService emitirRelatorioCargasDetalhadoService) {
		this.emitirRelatorioCargasDetalhadoService = emitirRelatorioCargasDetalhadoService;
	}
	public void setEmitirRelatorioCargasResumidoService(EmitirRelatorioCargasResumidoService emitirRelatorioCargasResumidoService) {
		this.emitirRelatorioCargasResumidoService = emitirRelatorioCargasResumidoService;
	}
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public void setLocalizacaoMercadoriaService(LocalizacaoMercadoriaService localizacaoMercadoriaService) {
		this.localizacaoMercadoriaService = localizacaoMercadoriaService;
	}
	public void setRotaColetaEntregaService(RotaColetaEntregaService rotaColetaEntregaService) {
		this.rotaColetaEntregaService = rotaColetaEntregaService;
	}
	public void setServicoService(ServicoService servicoService) {
		this.servicoService = servicoService;
	}
	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}

	/**
	 * Busca a filial do usuário e verifica se a filial do usuário é a Matriz
	 * 
	 * @return TypedFlatMap com dados de filial e a informação se a filial é ou não a Matriz
	 */
	public TypedFlatMap getDataUsuario() {
    	Filial filialUsuario = SessionUtils.getFilialSessao();
    	boolean blFilialMatriz = SessionUtils.isFilialSessaoMatriz();

    	TypedFlatMap map = new TypedFlatMap();
   		map.put("blFilialIsMatriz", blFilialMatriz);
    	map.put("moeda.idMoeda", SessionUtils.getMoedaSessao().getIdMoeda());
    	map.put("moeda.siglaSimbolo", SessionUtils.getMoedaSessao().getSiglaSimbolo());
    	map.put("filial.idFilial", filialUsuario.getIdFilial());
    	map.put("filial.sgFilial", filialUsuario.getSgFilial());
    	map.put("filial.pessoa.nmFantasia", filialUsuario.getPessoa().getNmFantasia());
		return map;
    }
	
	/**
	 * 
	 * @param criteria
	 * @return
	 */
    public List findLookupRotaColetaEntrega(Map criteria) {
    	List list = rotaColetaEntregaService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		RotaColetaEntrega rotaColetaEntrega = (RotaColetaEntrega)iter.next();
    		TypedFlatMap typedFlatMap = new TypedFlatMap();
    		typedFlatMap.put("idRotaColetaEntrega", rotaColetaEntrega.getIdRotaColetaEntrega());
    		typedFlatMap.put("nrRota", rotaColetaEntrega.getNrRota());
    		typedFlatMap.put("dsRota", rotaColetaEntrega.getDsRota());
    		retorno.add(typedFlatMap);
    	}
    	return retorno;
    }

    /**
     * 
     * @param criteria
     * @return
     */
	public List findLookupFilial(Map criteria) {
    	List list = filialService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		Filial filial = (Filial)iter.next();
    		TypedFlatMap typedFlatMap = new TypedFlatMap();
    		typedFlatMap.put("idFilial", filial.getIdFilial());
    		typedFlatMap.put("sgFilial", filial.getSgFilial());
    		typedFlatMap.put("pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
    		retorno.add(typedFlatMap);
    	}
    	return retorno;
    }

	/**
	 * 
	 * @param criteria
	 * @return
	 */
    public List findLookupCliente(Map criteria) {
    	List list = clienteService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		Cliente cliente = (Cliente)iter.next();
    		TypedFlatMap typedFlatMap = new TypedFlatMap();
    		typedFlatMap.put("idCliente", cliente.getIdCliente());
    		typedFlatMap.put("pessoa.nrIdentificacao", cliente.getPessoa().getNrIdentificacao());
    		typedFlatMap.put("pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(cliente.getPessoa()));
    		typedFlatMap.put("pessoa.nmPessoa", cliente.getPessoa().getNmPessoa());
    		retorno.add(typedFlatMap);
    	}
    	return retorno;

    }
    
    /**
     * 
     * @param criteria
     * @return
     */
    public List findLocalizacaoMercadoria(Map criteria) {
    	String tpSituacao = "A";

    	List codigos = new ArrayList();
    	codigos.add("24");
    	codigos.add("5");
    	codigos.add("7");
    	codigos.add("4");
    	codigos.add("6");
    	
        List lista = localizacaoMercadoriaService.findByCodigosLocalizacaoMercadoria(codigos, tpSituacao);
        return lista;
    }

   	public List findServico(Map criteria) {
		List retorno = new ArrayList();
		List listServicos = servicoService.find(criteria);
		for (Iterator iter = listServicos.iterator(); iter.hasNext();) {
			TypedFlatMap map = new TypedFlatMap();
			Servico servico = (Servico) iter.next();
			map.put("idServico", servico.getIdServico());
			map.put("dsServico", servico.getDsServico());
			map.put("tpSituacao.value", servico.getTpSituacao().getValue());
			retorno.add(map);
		}
		return retorno;
	}

	public List findMoeda(Map criteria) {
		List retorno = new ArrayList();
		List listMoedas = moedaService.find(criteria);
		for (Iterator iter = listMoedas.iterator(); iter.hasNext();) {
			TypedFlatMap map = new TypedFlatMap();
			Moeda moeda = (Moeda) iter.next();
			map.put("idMoeda", moeda.getIdMoeda());
			map.put("siglaSimbolo", moeda.getSiglaSimbolo());
			map.put("sgMoeda", moeda.getSgMoeda());
			map.put("tpSituacao.value", moeda.getTpSituacao().getValue());
			retorno.add(map);
		}
		return retorno;
	}
    
	public List findTpFormatoRelatorio(Map criteria){
		List tpFormatos = domainValueService.findByDomainNameAndValues("DM_FORMATO_RELATORIO", Arrays.asList(new String[]{"pdf","xls"}));
		return tpFormatos;
	}
    
	public List findTpAgrupadoPor(){
		List tpAgrupamento = domainValueService.findByDomainNameAndValues("DM_FORMA_AGRUPAMENTO", Arrays.asList(new String[]{"FD","FL"}));
		return tpAgrupamento;
	}
	
    public File executeRelatorioResumido(TypedFlatMap parameters) throws Exception {
    	reportServiceSupport = emitirRelatorioCargasResumidoService; 
    	return reportServiceSupport.executeReport(parameters); 
    }

    public File executeRelatorioDetalhado(TypedFlatMap parameters) throws Exception {
    	reportServiceSupport = emitirRelatorioCargasDetalhadoService; 
    	return reportServiceSupport.executeReport(parameters); 
    }
}