package com.mercurio.lms.carregamento.action;

import java.io.Serializable;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.PrestadorServico;
import com.mercurio.lms.carregamento.model.service.PrestadorServicoService;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.PessoaUtils;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.carregamento.manterPrestadoresServicoAction"
 */

public class ManterPrestadoresServicoAction extends CrudAction {

	public void setPrestadorServico(PrestadorServicoService prestadorServicoService) {
		this.defaultService = prestadorServicoService;
	}
	public PrestadorServicoService getPrestadorServicoService() {
		return (PrestadorServicoService)defaultService;
	}

	
	public void removeById(java.lang.Long id) {
		getPrestadorServicoService().removePrestadorServicoById(id);
    }

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	getPrestadorServicoService().removePrestadorServicoByIds(ids);
    }

    public PrestadorServico findById(java.lang.Long id) {
    	return getPrestadorServicoService().findById(id);
    }

    /**
	 * Verifica se já existe um Prestador de Serviço com o Número e Tipo de Identificação informado.
	 * @param map deve conter o numero e tipo de identificação; 
	 */
	public Map validateExistenciaPrestadorServico(TypedFlatMap criteria){
		Map map = new HashMap();
		Pessoa pessoa = getPrestadorServicoService().validatePrestadorServico(criteria);
		if (pessoa!=null){
			map.put("tpIdentificacao", pessoa.getTpIdentificacao().getValue());
			map.put("nrIdentificacao", FormatUtils.formatIdentificacao(pessoa));
			map.put("idPessoa", pessoa.getIdPessoa());
			map.put("nmPessoa", pessoa.getNmPessoa());
			map.put("dsEmail", pessoa.getDsEmail());
		}
		return map;
	}
	
	public Pessoa validateIdentificacao(Map map) {
		return getPrestadorServicoService().validateIdentificacao(map);
	}

    public Serializable store(PrestadorServico bean) {
        return getPrestadorServicoService().store(bean);
    }
    
	public Integer getRowCount(Map criteria) {
		Map mapPessoa = (Map)criteria.get("pessoa");
		mapPessoa.put("nrIdentificacao", PessoaUtils.clearIdentificacao((String)mapPessoa.get("nrIdentificacao")));
		return getPrestadorServicoService().getRowCount(criteria);
	}

	public ResultSetPage findPaginated(Map criteria) {
		Map mapPessoa = (Map)criteria.get("pessoa");
		mapPessoa.put("nrIdentificacao", PessoaUtils.clearIdentificacao((String)mapPessoa.get("nrIdentificacao")));
		return getPrestadorServicoService().findPaginated(criteria);
	}
}