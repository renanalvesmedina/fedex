package com.mercurio.lms.carregamento.action;

import java.io.File;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.report.ReportExecutionManager;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.ControleCarga;
import com.mercurio.lms.carregamento.model.ReciboPostoPassagem;
import com.mercurio.lms.carregamento.model.service.CarregamentoDescargaService;
import com.mercurio.lms.carregamento.model.service.ControleCargaService;
import com.mercurio.lms.carregamento.model.service.EventoControleCargaService;
import com.mercurio.lms.carregamento.model.service.ManifestoService;
import com.mercurio.lms.carregamento.model.service.MotoristaControleCargaService;
import com.mercurio.lms.carregamento.model.service.ReciboPostoPassagemService;
import com.mercurio.lms.carregamento.report.EmitirControleCargasService;
import com.mercurio.lms.carregamento.report.EmitirReciboPostoPassagemService;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.contratacaoveiculos.model.service.EventoMeioTransporteService;
import com.mercurio.lms.contratacaoveiculos.model.service.LiberacaoReguladoraService;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteService;
import com.mercurio.lms.expedicao.model.ManifestoEletronico;
import com.mercurio.lms.expedicao.model.service.ManifestoEletronicoService;
import com.mercurio.lms.fretecarreteiroviagem.action.ManterRecibosAction;
import com.mercurio.lms.fretecarreteiroviagem.model.ReciboFreteCarreteiro;
import com.mercurio.lms.fretecarreteiroviagem.model.service.ReciboFreteCarreteiroService;
import com.mercurio.lms.fretecarreteiroviagem.report.EmitirReciboService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.sgr.model.service.PlanoGerenciamentoRiscoService;
import com.mercurio.lms.util.BigDecimalUtils;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.carregamento.emitirControleCargasAction"
 */
public class EmitirControleCargasAction {
	private FilialService filialService;
	private ControleCargaService controleCargaService;
	private EventoControleCargaService eventoControleCargaService;
	private ManifestoService manifestoService;
	private MeioTransporteService meioTransporteService;
	private EventoMeioTransporteService eventoMeioTransporteService;
	private EmitirReciboPostoPassagemService emitirReciboPostoPassagemService;
	private ReciboPostoPassagemService reciboPostoPassagemService;
	private ReciboFreteCarreteiroService reciboFreteCarreteiroService;
	private EmitirReciboService emitirReciboService;
	private MotoristaControleCargaService motoristaControleCargaService;
	private LiberacaoReguladoraService liberacaoReguladoraService;
	private EmitirControleCargasService emitirControleCargasService;
	private ReportExecutionManager reportExecutionManager;
	private ManterRecibosAction manterRecibosAction;
	private ManifestoEletronicoService manifestoEletronicoService;
	private ConfiguracoesFacade configuracoesFacade;
	private PlanoGerenciamentoRiscoService planoGerenciamentoRiscoService;
	private CarregamentoDescargaService carregamentoDescargaService; 

	public void setCarregamentoDescargaService(CarregamentoDescargaService carregamentoDescargaService) {
		this.carregamentoDescargaService = carregamentoDescargaService;
	}
	public void setManterRecibosAction(ManterRecibosAction manterRecibosAction) {
		this.manterRecibosAction = manterRecibosAction;
	}
	public ControleCargaService getControleCargaService() {
		return controleCargaService;
	}
	public void setControleCargaService(ControleCargaService controleCargaService) {
		this.controleCargaService = controleCargaService;
	}
	public EmitirReciboPostoPassagemService getEmitirReciboPostoPassagemService() {
		return emitirReciboPostoPassagemService;
	}
	public void setEmitirReciboPostoPassagemService(EmitirReciboPostoPassagemService emitirReciboPostoPassagemService) {
		this.emitirReciboPostoPassagemService = emitirReciboPostoPassagemService;
	}
	public EmitirReciboService getEmitirReciboService() {
		return emitirReciboService;
	}
	public void setEmitirReciboService(EmitirReciboService emitirReciboService) {
		this.emitirReciboService = emitirReciboService;
	}
	public EventoControleCargaService getEventoControleCargaService() {
		return eventoControleCargaService;
	}
	public void setEventoControleCargaService(EventoControleCargaService eventoControleCargaService) {
		this.eventoControleCargaService = eventoControleCargaService;
	}
	public EventoMeioTransporteService getEventoMeioTransporteService() {
		return eventoMeioTransporteService;
	}
	public void setEventoMeioTransporteService(EventoMeioTransporteService eventoMeioTransporteService) {
		this.eventoMeioTransporteService = eventoMeioTransporteService;
	}
	public FilialService getFilialService() {
		return filialService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public ManifestoService getManifestoService() {
		return manifestoService;
	}
	public void setManifestoService(ManifestoService manifestoService) {
		this.manifestoService = manifestoService;
	}
	public MeioTransporteService getMeioTransporteService() {
		return meioTransporteService;
	}
	public void setMeioTransporteService(MeioTransporteService meioTransporteService) {
		this.meioTransporteService = meioTransporteService;
	}
	public ReciboFreteCarreteiroService getReciboFreteCarreteiroService() {
		return reciboFreteCarreteiroService;
	}
	public void setReciboFreteCarreteiroService(ReciboFreteCarreteiroService reciboFreteCarreteiroService) {
		this.reciboFreteCarreteiroService = reciboFreteCarreteiroService;
	}
	public ReciboPostoPassagemService getReciboPostoPassagemService() {
		return reciboPostoPassagemService;
	}
	public void setReciboPostoPassagemService(ReciboPostoPassagemService reciboPostoPassagemService) {
		this.reciboPostoPassagemService = reciboPostoPassagemService;
	}
	public MotoristaControleCargaService getMotoristaControleCargaService() {
		return motoristaControleCargaService;
	}
	public void setMotoristaControleCargaService(
			MotoristaControleCargaService motoristaControleCargaService) {
		this.motoristaControleCargaService = motoristaControleCargaService;
	}
	public LiberacaoReguladoraService getLiberacaoReguladoraService() {
		return liberacaoReguladoraService;
	}
	public void setLiberacaoReguladoraService(
			LiberacaoReguladoraService liberacaoReguladoraService) {
		this.liberacaoReguladoraService = liberacaoReguladoraService;
	}
	/**
	 * Declaração serviço principal da Action.
	 */
	public void setEmitirControleCargasService(EmitirControleCargasService emitirControleCargasService) {
		this.emitirControleCargasService = emitirControleCargasService;
	}	
	
	public List findLookupFilialByControleCarga(Map criteria) {
    	List list = filialService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		Filial filial = (Filial)iter.next();
    		TypedFlatMap typedFlatMap = new TypedFlatMap();
    		typedFlatMap.put("idFilial", filial.getIdFilial());
    		typedFlatMap.put("sgFilial", filial.getSgFilial());
    		typedFlatMap.put("pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
    		retorno.add(typedFlatMap);
    	}
    	return retorno;
    }

    public ResultSetPage<TypedFlatMap> findPaginatedExigenciasGerRisco(TypedFlatMap criteria) {
    	Long idControleCarga = criteria.getLong("idControleCarga");
    	return carregamentoDescargaService.findPaginatedExigenciasGerRisco(idControleCarga);
    	
    }
	
	public TypedFlatMap findByIdControleCarga(TypedFlatMap criteria) {
		return findDadosByIdControleCarga(criteria.getLong("idControleCarga"));
	}		

	
	public List findLookupControleCarga(Map criteria) {
		criteria.remove("tpControleCarga");
    	List list = this.getControleCargaService().findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		ControleCarga controleCarga = (ControleCarga)iter.next();
    		retorno.add( findDadosByIdControleCarga(controleCarga.getIdControleCarga()) );
    	}
    	return retorno;
	}	

	/**
	 * 
	 * @param idControleCarga
	 * @return
	 */
	private TypedFlatMap findDadosByIdControleCarga(Long idControleCarga) {		
		ControleCarga controleCarga = this.getControleCargaService().findByIdControleCarga(idControleCarga);
		if (!controleCarga.getTpControleCarga().getValue().equals("V")) {
			//Controle de Carga informado não é de Viagem.
			throw new BusinessException("LMS-05027");
		}		

		TypedFlatMap mapControleCarga = new TypedFlatMap();

		mapControleCarga.put("controleCarga.idControleCarga", idControleCarga);
		mapControleCarga.put("controleCarga.nrControleCarga", controleCarga.getNrControleCarga());
		mapControleCarga.put("controleCarga.tpControleCarga", controleCarga.getTpControleCarga().getValue());
		
		mapControleCarga.put("filialByIdFilialOrigem.idFilial", controleCarga.getFilialByIdFilialOrigem().getIdFilial());    		
		mapControleCarga.put("filialByIdFilialOrigem.sgFilial", controleCarga.getFilialByIdFilialOrigem().getSgFilial());
		mapControleCarga.put("filialByIdFilialOrigem.pessoa.nmFantasia", controleCarga.getFilialByIdFilialOrigem().getPessoa().getNmFantasia());
		mapControleCarga.put("filialByIdFilialAtualizaStatus.idFilial", controleCarga.getFilialByIdFilialAtualizaStatus().getIdFilial());
		
		mapControleCarga.put("tpStatusControleCarga.value", controleCarga.getTpStatusControleCarga().getValue());
		mapControleCarga.put("tpStatusControleCarga.description", controleCarga.getTpStatusControleCarga().getDescription());
		mapControleCarga.put("tpStatusControleCarga.status", controleCarga.getTpStatusControleCarga().getStatus());
		    		
		if (controleCarga.getRotaIdaVolta() != null) {				
			mapControleCarga.put("rota.idRota", controleCarga.getRotaIdaVolta().getRota().getIdRota());
			mapControleCarga.put("rota.dsRota", controleCarga.getRotaIdaVolta().getRota().getDsRota());
		}
		else 
		if (controleCarga.getRota() != null) {				
			mapControleCarga.put("rota.idRota", controleCarga.getRota().getIdRota());
			mapControleCarga.put("rota.dsRota", controleCarga.getRota().getDsRota());
		}

		if (controleCarga.getMotorista() !=null) {
			mapControleCarga.put("motorista.idMotorista", controleCarga.getMotorista().getIdMotorista());
		}
		
 		if (controleCarga.getMeioTransporteByIdTransportado() != null) {
 			mapControleCarga.put("meioTransporteByIdTransportado.idMeioTransporte", 
					controleCarga.getMeioTransporteByIdTransportado().getIdMeioTransporte());
 			mapControleCarga.put("meioTransporteByIdTransportado.nrFrota",
					controleCarga.getMeioTransporteByIdTransportado().getNrFrota());
 			mapControleCarga.put("meioTransporteByIdTransportado.nrIdentificador",
					controleCarga.getMeioTransporteByIdTransportado().getNrIdentificador());
		}
		
 		if (controleCarga.getMeioTransporteByIdSemiRebocado() != null) {
 			mapControleCarga.put("meioTransporteByIdSemiRebocado.idMeioTransporte",
					controleCarga.getMeioTransporteByIdSemiRebocado().getIdMeioTransporte());
 			mapControleCarga.put("meioTransporteByIdSemiRebocado.nrFrota",
					controleCarga.getMeioTransporteByIdSemiRebocado().getNrFrota());
 			mapControleCarga.put("meioTransporteByIdSemiRebocado.nrIdentificador",
					controleCarga.getMeioTransporteByIdSemiRebocado().getNrIdentificador());
		}
	
 		if (controleCarga.getPcOcupacaoInformado() != null) {
 	 		BigDecimal percent = BigDecimalUtils.HUNDRED;
 			percent = percent.subtract(controleCarga.getPcOcupacaoInformado());
 	 		mapControleCarga.put("pcOcupacaoInformado", percent);
		} else {
			mapControleCarga.put("pcOcupacaoInformado", "");
		}

 		List<ManifestoEletronico> manifestoEletronicos = manifestoEletronicoService.findManifestoEletronicoByControleCargaAndTpSituacao(
 				controleCarga.getIdControleCarga(), null, null); 
 		if(manifestoEletronicos != null && !manifestoEletronicos.isEmpty()){
 			mapControleCarga.put("btnMdfe", "true");
 		}else{
 			mapControleCarga.put("btnMdfe", "false");
 		}

 		mapControleCarga.putAll( getCampoAcao(idControleCarga, SessionUtils.getFilialSessao().getIdFilial()) );
    	return mapControleCarga;		
	}		

	
	/**
	 * Busca algums dos dados do usuario logado, que está na sessão.
	 */
	public TypedFlatMap getBasicData() {
		TypedFlatMap tfm = new TypedFlatMap();
		tfm.put("filial.idFilial", SessionUtils.getFilialSessao().getIdFilial());
		tfm.put("filial.sgFilial", SessionUtils.getFilialSessao().getSgFilial());
		tfm.put("filial.pessoa.nmFantasia", SessionUtils.getFilialSessao().getPessoa().getNmFantasia());
		return tfm;
	}	
	
	/**
	 * Verifica se existe registro na tabela de Evento de Controle de Carga e retorna o campo Ação.
	 */
	private TypedFlatMap getCampoAcao(Long idControleCarga, Long idFilial) {
		TypedFlatMap tfm = new TypedFlatMap(); 
		Long idFilialUsuario = SessionUtils.getFilialSessao().getIdFilial();

		List listaEventosEM = eventoControleCargaService.
				findEventoControleCargaByIdFilialByIdControleCargaByTpEvento(idFilialUsuario, idControleCarga, "EM");

		List listaEventosEC = eventoControleCargaService.
				findEventoControleCargaByIdFilialByIdControleCargaByTpEvento(idFilialUsuario, idControleCarga, "EC");

		if (!listaEventosEM.isEmpty() && listaEventosEM.size() > listaEventosEC.size()) {
			tfm.put("sgAcao", "RE");
			tfm.put("dsAcao", "Reemissão");
		} else {
			tfm.put("sgAcao", "EM");
			tfm.put("dsAcao", "Emissão");
		}
		return tfm;
	}
	
	/**
	 * Realiza a geracao do workflow. 
	 * 
	 * @param parameters
	 */
	public TypedFlatMap generateValidateEmissaoControleCarga(TypedFlatMap parameters) {
		return getControleCargaService().generateValidateEmissaoControleCarga(
				parameters.getLong("controleCarga.idControleCarga"), 
				parameters.getString("tpStatusControleCarga.value"), 
				parameters.getString("sgAcao"), 
				parameters.getBoolean("blRegistroAuditoria"),
				parameters.getLong("meioTransporteByIdTransportado.idMeioTransporte"), 
				parameters.getLong("motorista.idMotorista"), 
				parameters.getLong("filialByIdFilialAtualizaStatus.idFilial"), 
				parameters.getBigDecimal("pcOcupacaoInformado"),
				parameters.getLong("idFilial"),
				parameters.getString("tpControleCarga"),
				Boolean.TRUE.equals(parameters.getBoolean("contingenciaConfirmada")));
	}
	
	public TypedFlatMap encerrarMdfesAutorizados(TypedFlatMap parameters) {
        return getControleCargaService().executeEncerrarMdfesAutorizados(parameters.getLong("controleCarga.idControleCarga"));
    }
	
	public TypedFlatMap cancelarMdfe(TypedFlatMap parameters) {
	    return getControleCargaService().cancelarMdfe(parameters.getLong("idManifestoEletronico"));
	}
	
	public TypedFlatMap verificaAutorizacaoMdfe(TypedFlatMap parameters) {
	    return getControleCargaService().executeVerificaAutorizacaoMdfe(parameters);
	}
	
	public TypedFlatMap verificaEncerramentoMdfe(TypedFlatMap parameters) {
	    return getControleCargaService().executeVerificaEncerramentoMdfe(parameters.getLong("idManifestoEletronicoEncerrado"), parameters.getDateTime("dhEncerramento"));
	}
	
	public TypedFlatMap verificaCancelamentoMdfe(TypedFlatMap parameters) {
	    return getControleCargaService().executeVerificaCancelamentoMdfe(parameters.getLong("idManifestoEletronicoCancelado"), parameters.getDateTime("dhEncerramento"));
	}
	
	/**
	 * Método q executa o relátorio, mas testa alguns casos antes.
	 */
	public String execute(TypedFlatMap parameters) throws Exception {
		String generateReport = this.reportExecutionManager.generateReportLocator(this.emitirControleCargasService, parameters);
		return generateReport;
	}

	/**
	 * Método que retorna o ID do Recibo de Posto de Passagem.
	 * @param parameters
	 * @throws Exception
	 */
	public TypedFlatMap getIdReciboPostoPassagem(TypedFlatMap parameters) {
		TypedFlatMap tfm = new TypedFlatMap();
		if (parameters.getLong("idFilialOrigem").equals(SessionUtils.getFilialSessao().getIdFilial()) ) {
		    Map mapControleCarga = new HashMap();
			mapControleCarga.put("idControleCarga", parameters.getLong("idControleCarga"));

			Map mapRecibo = new HashMap();
			mapRecibo.put("controleCarga", mapControleCarga);
			mapRecibo.put("tpStatusRecibo", "GE");

			List lista = this.getReciboPostoPassagemService().find(mapRecibo);
			if (!lista.isEmpty())
				tfm.put("idReciboPostoPassagem", ((ReciboPostoPassagem)lista.get(0)).getIdReciboPostoPassagem());
		}
		return tfm;
	}
	

	/**
	 * @param parameters
	 * @return
	 */
	public TypedFlatMap generatePreEmissaoRelatorio(TypedFlatMap parameters) {
		Long idControleCarga = parameters.getLong("idControleCarga");
		Long idFilial = parameters.getLong("idFilial");
		String sgAcao = parameters.getString("sgAcao");

		//LMS-05331 Existem manifestos ainda não finalizados.
		//Se existem manifestos vinculados ao Controle de Carga onde a filial de destino 
		//seja a filial logada e a situação seja diferente de Fechado, então não permitir Emitir o Controle de Carga
			if (Boolean.TRUE.equals(manifestoService.validateExisteManifestoNaoFinalizado(idControleCarga,idFilial))) {
				throw new BusinessException("LMS-05331");
			}
		
		ControleCarga controleCarga = controleCargaService.findById(idControleCarga);
		
		//LMS-05412 Problema na geração do CIOT, favor verificar monitoramento CIOT
		//Verificar se filial logada está parametrizada para bloquear emissão do controle de carga quando não há CIOT (VL_CONTEUDO_PARAMETRO_FILIAL = 'S' onde NM_PARAMETRO_FILIAL = 'BLOQUEIA_CIOT') 
		//e que exija CIOT neste controle de carga (BL_EXIGE_CIOT = 'S') 
		//Se não tenha CIOT gerado(CIOT.TP_SITUACAO <> 'G' onde cc.id_controle_carga = ciot.id_controle_carga e cc.id_transportado = ciot.id_meio_transporte
		if(!"RE".equals(sgAcao)){
			controleCargaService.validateGeracaoCiot(idFilial, controleCarga);
		}
		
		// LMS - 2646 -- verificar se eh esta a posicao
		if (controleCarga.getMeioTransporteByIdTransportado() != null) {
			//LMS-4136 - Deve ser passado o tbém idCC para que este seja comparado a uma lista de possíveis CC vinculados ao veículo
			controleCargaService.validateVeiculoControleCarga(controleCarga.getMeioTransporteByIdTransportado().getIdMeioTransporte(), idControleCarga, false);
		}
		if (controleCarga.getTpControleCarga() != null && "C".equals(controleCarga.getTpControleCarga().getValue())) {
			controleCargaService.validateParcelaColetaEntrega(controleCarga.getIdControleCarga());
		}
		
		//Regra 1.11 - Emitir Controle de Cargas Viagem
		//FIXME É necessário um refactoring nessa tela. Muitos xmit e códigos na Action, alem de não utilizar apenas uma transação para o processo.
		TypedFlatMap tfm = new TypedFlatMap();
		tfm.putAll(getCampoAcao(idControleCarga, idFilial) );
		return tfm;
	}

	/**
	 * Método que grava Evento de Controle Carga, chama a rotina 'Gerar Evento de Rastreabilidade',
	 * chama evento 'Gerar e Enviar SMP para CEMOP-MZ e gerenciadora de Risco'.
	 * 
	 * @param parameters
	 */
	public void generateDataControleCargaByEmissao(TypedFlatMap parameters) {
		getControleCargaService().generateDataControleCargaByEmissao(parameters.getLong("idControleCarga"));
	}
	
	
	/**
	 * 
	 * @param parameters
	 */
	public void generateAtualizacaoPostoPassagem(TypedFlatMap criteria) {
		Long idReciboPostoPassagem = criteria.getLong("idReciboPostoPassagem");
		// Método que atualiza o status do Recibo do Posto de Passagem.
		if (idReciboPostoPassagem != null) {
			reciboPostoPassagemService.updateReciboPostoPassagem(idReciboPostoPassagem);
		}
	}


	public TypedFlatMap findReciboFreteCarreteiro(TypedFlatMap criteria) throws Exception {
		Long idControleCarga = criteria.getLong("idControleCarga");
		List lista = reciboFreteCarreteiroService.findReciboFreteCarreteiroByEmissaoControleCarga(idControleCarga, Boolean.TRUE);
		List listaRetorno = new ArrayList();
		for (Iterator iter = lista.iterator(); iter.hasNext();) {
			TypedFlatMap mapRelatorio = new TypedFlatMap();
			mapRelatorio.put("idReciboFreteCarreteiro", ((ReciboFreteCarreteiro)iter.next()).getIdReciboFreteCarreteiro());
			listaRetorno.add(manterRecibosAction.execute(mapRelatorio));
		}
		TypedFlatMap mapRetorno = new TypedFlatMap();
		mapRetorno.put("dadosRelatorio", listaRetorno);
		return mapRetorno;
	}

	@SuppressWarnings("rawtypes")
	public List findManifestoEletronicoByControleCarga(TypedFlatMap parameters){
		Long idControleCarga = Long.parseLong(parameters.getString("idControleTemp"));
		return manifestoEletronicoService.findManifestoEletronicoByControleCargaAndTpSituacao(idControleCarga, null, null);
	}

	/**
	 * 
	 * @param parameters
	 * @return
	 */
	public File imprimirMDFe(TypedFlatMap parameters) {
		
		List list = parameters.getList("idsManifestoEletronico");

		List<Long> idsManifestoEletronico = new ArrayList<Long>();
		for (Object o: list) {
			if (o instanceof String) {
				idsManifestoEletronico.add(Long.valueOf(o.toString()));
			} else if (o instanceof Long) {
				idsManifestoEletronico.add((Long)o);
			} else {
				throw new IllegalArgumentException("idsManifestoEletronico");
	}
		}
		

		List<ManifestoEletronico> manifestos = new ArrayList<ManifestoEletronico>();

		for(Long idManifestoEletronico : idsManifestoEletronico){
			manifestos.add((ManifestoEletronico) manifestoEletronicoService.findById(idManifestoEletronico));
		}

		Object oObsContingMdfe1 = configuracoesFacade.getValorParametro("OBS_CONTING_MDFE1");
		String obsContingMdfe1 = oObsContingMdfe1 == null ? "" : oObsContingMdfe1.toString();
		Object oObsContingMdfe2 = configuracoesFacade.getValorParametro("OBS_CONTING_MDFE2");
		String obsContingMdfe2 = oObsContingMdfe2 == null ? "" : oObsContingMdfe2.toString();

		return MdfeActionUtils.imprimirMDFe(manifestos, obsContingMdfe1, obsContingMdfe2);

	}
	
	public void generatePendenciaWorkflow(TypedFlatMap parameters) {
		Long idControleCarga = parameters.getLong("idControleCarga");
		String mensagens = parameters.getString("dsMotivos");
		String justificativa = parameters.getString("dsJustificativa");
		planoGerenciamentoRiscoService.generatePendenciaWorkflowEmissaoControleCarga(idControleCarga, mensagens, justificativa);
	}
	
	public ResultSetPage<ManifestoEletronico> findPaginatedManifestoEletronicoByControleCarga(TypedFlatMap criteria) {
		return manifestoEletronicoService.findPaginatedManifestoEletronicoByControleCarga(criteria);
    }
	
	public Integer verificaSituacao(TypedFlatMap criteria){
		String tpSituacao = criteria.getString("tpSituacao");
		Long idFilial = criteria.getLong("idFilial");
		return manifestoEletronicoService.verificaSituacao(tpSituacao, idFilial);
	}


	public void setReportExecutionManager(ReportExecutionManager reportExecutionManager) {
		this.reportExecutionManager = reportExecutionManager;
	}
	
	public void setManifestoEletronicoService(ManifestoEletronicoService manifestoEletronicoService) {
		this.manifestoEletronicoService = manifestoEletronicoService;
	}
	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}
	public void setPlanoGerenciamentoRiscoService(PlanoGerenciamentoRiscoService planoGerenciamentoRiscoService) {
		this.planoGerenciamentoRiscoService = planoGerenciamentoRiscoService;
	}
	
}