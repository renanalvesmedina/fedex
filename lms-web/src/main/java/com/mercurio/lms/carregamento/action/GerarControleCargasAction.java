package com.mercurio.lms.carregamento.action;

import java.io.Serializable;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.joda.time.DateTime;
import org.joda.time.TimeOfDay;
import org.joda.time.YearMonthDay;
import org.springframework.context.i18n.LocaleContextHolder;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.masterdetail.ItemList;
import com.mercurio.adsm.framework.model.masterdetail.ItemListConfig;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailFactory;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntry;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntryConfig;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.ControleCarga;
import com.mercurio.lms.carregamento.model.ControleTrecho;
import com.mercurio.lms.carregamento.model.EquipeOperacao;
import com.mercurio.lms.carregamento.model.IntegranteEqOperac;
import com.mercurio.lms.carregamento.model.PagtoPedagioCc;
import com.mercurio.lms.carregamento.model.PostoPassagemCc;
import com.mercurio.lms.carregamento.model.service.ControleTrechoService;
import com.mercurio.lms.carregamento.model.service.IntegranteEqOperacService;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.contratacaoveiculos.model.MeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.Motorista;
import com.mercurio.lms.contratacaoveiculos.model.SolicitacaoContratacao;
import com.mercurio.lms.contratacaoveiculos.model.TipoMeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.service.BeneficiarioProprietarioService;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteService;
import com.mercurio.lms.contratacaoveiculos.model.service.ProprietarioService;
import com.mercurio.lms.contratacaoveiculos.model.service.SolicitacaoContratacaoService;
import com.mercurio.lms.contratacaoveiculos.model.service.TipoMeioTransporteService;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.service.TipoTabelaColetaEntregaService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.MotoristaRotaViagem;
import com.mercurio.lms.municipios.model.RotaColetaEntrega;
import com.mercurio.lms.municipios.model.RotaIdaVolta;
import com.mercurio.lms.municipios.model.TrechoRotaIdaVolta;
import com.mercurio.lms.municipios.model.service.FilialRotaService;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.MeioTransporteRotaViagemService;
import com.mercurio.lms.municipios.model.service.MotoristaRotaViagemService;
import com.mercurio.lms.municipios.model.service.PontoParadaTrechoService;
import com.mercurio.lms.municipios.model.service.RotaColetaEntregaService;
import com.mercurio.lms.municipios.model.service.RotaIdaVoltaService;
import com.mercurio.lms.municipios.model.service.TrechoRotaIdaVoltaService;
import com.mercurio.lms.util.BigDecimalUtils;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.JTFormatUtils;
import com.mercurio.lms.util.session.SessionUtils;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.carregamento.gerarControleCargasAction"
 */

public class GerarControleCargasAction extends ControleCargaAction {
	
	private BeneficiarioProprietarioService beneficiarioProprietarioService;
	private ControleTrechoService controleTrechoService;
	private FilialRotaService filialRotaService;
	private FilialService filialService;
	private IntegranteEqOperacService integranteEqOperacService;
	private MeioTransporteRotaViagemService meioTransporteRotaViagemService;
	private MeioTransporteService meioTransporteService;
	private MotoristaRotaViagemService motoristaRotaViagemService;
	private PontoParadaTrechoService pontoParadaTrechoService;
	private ProprietarioService proprietarioService;
	private RotaColetaEntregaService rotaColetaEntregaService;
	private RotaIdaVoltaService rotaIdaVoltaService;
	private SolicitacaoContratacaoService solicitacaoContratacaoService;
	private TipoMeioTransporteService tipoMeioTransporteService;
	private TipoTabelaColetaEntregaService tipoTabelaColetaEntregaService;
	private TrechoRotaIdaVoltaService trechoRotaIdaVoltaService;
	private ConfiguracoesFacade configuracoesFacade;

	public TypedFlatMap findDadosVeiculoColeta(TypedFlatMap criteria) {
		Long idMeioTransporte = criteria.getLong("idMeioTransporte");
		Long idRotaColetaEntrega = criteria.getLong("idRotaColetaEntrega");
		
		TypedFlatMap typedFlatMap = findDadosVeiculo(idMeioTransporte);
		try {
			typedFlatMap.put("tabelas",tipoTabelaColetaEntregaService.findTipoTabelaColetaEntregaWithTabelaColetaEntrega(
					SessionUtils.getFilialSessao().getIdFilial(), idMeioTransporte, idRotaColetaEntrega));
		} catch (BusinessException be) {
			Boolean blEntregaDireta = criteria.getBoolean("blEntregaDireta");
			if ( !(be.getMessageKey().equals("LMS-25006") && blEntregaDireta != null && blEntregaDireta) )
				throw be;
		}
		return typedFlatMap;
	}

	public TypedFlatMap findDadosVeiculoViagem(Long idMeioTransporte) {
		return findDadosVeiculo(idMeioTransporte);
	}


    private TypedFlatMap findDadosVeiculo(Long idMeioTransporte) {
    	getControleCargaService().validateVeiculoControleCarga(idMeioTransporte, false);

    	TypedFlatMap tfm = new TypedFlatMap();
    	tfm.putAll( findProprietarioVeiculo(idMeioTransporte) );

		// Busca dados do beneficiário
    	Long idProprietario = tfm.getLong("proprietario.idProprietario");
		if (idProprietario != null) {
			tfm.putAll( findBeneficiario(idProprietario) );
		}

    	//Verifica se o meio de transporte possui um semi-reboque cadastrado
    	TipoMeioTransporte tipoMeioTransporte = tipoMeioTransporteService.findTipoMeioTransporteCompostoByIdMeioTransporte(idMeioTransporte);
    	if (tipoMeioTransporte != null) {
    		tfm.put("idTipoMeioTransporte", tipoMeioTransporte.getIdTipoMeioTransporte());
    	}
    	return tfm;
    }


	public void validateMeioTransporteSemiRebocado(Long idMeioTransporte) {
   		getControleCargaService().validateSemiReboqueControleCarga(idMeioTransporte);
	}

    @SuppressWarnings({ "unchecked", "rawtypes" })
    public List findLookupMeioTransporteTransportado(Map criteria) {
    	criteria.put("tipoMeioTransporte", "transportado");
    	return findLookupMeioTransporte(criteria);
    }

    @SuppressWarnings({ "unchecked", "rawtypes" })
    public List findLookupMeioTransporteSemiRebocado(Map criteria) {
    	criteria.put("tipoMeioTransporte", "semiRebocado");
    	return findLookupMeioTransporte(criteria);
    }

	@SuppressWarnings({ "unchecked", "rawtypes" })
    private List findLookupMeioTransporte(Map criteria) {
    	List list = meioTransporteService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		MeioTransporte meioTransporte = (MeioTransporte)iter.next();
    		TypedFlatMap tfm = new TypedFlatMap();
    		tfm.put("idMeioTransporte", meioTransporte.getIdMeioTransporte());
    		tfm.put("nrIdentificador", meioTransporte.getNrIdentificador());
    		tfm.put("nrFrota", meioTransporte.getNrFrota());
    		tfm.put("tpVinculo.value", meioTransporte.getTpVinculo().getValue());
    		tfm.put("modeloMeioTransporte.tipoMeioTransporte.tpMeioTransporte.value", 
    				meioTransporte.getModeloMeioTransporte().getTipoMeioTransporte().getTpMeioTransporte().getValue());
    		tfm.put("modeloMeioTransporte.tipoMeioTransporte.idTipoMeioTransporte", 
    				meioTransporte.getModeloMeioTransporte().getTipoMeioTransporte().getIdTipoMeioTransporte());
    		tfm.put("meioTransporteRodoviario.nrRastreador", meioTransporte.getMeioTransporteRodoviario().getNrRastreador());
    		retorno.add(tfm);
    	}
    	return retorno;
    }


	@SuppressWarnings({ "unchecked", "rawtypes" })
    public List findLookupFilialBySolicitacaoContratacao(Map criteria) {
    	List list = filialService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		Filial filial = (Filial)iter.next();
    		TypedFlatMap typedFlatMap = new TypedFlatMap();
    		typedFlatMap.put("idFilial", filial.getIdFilial());
    		typedFlatMap.put("sgFilial", filial.getSgFilial());
    		typedFlatMap.put("pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
    		retorno.add(typedFlatMap);
    	}
    	return retorno;
    }


	@SuppressWarnings({ "unchecked", "rawtypes" })
    public List findLookupSolicitacaoContratacao(Map criteria) {
    	List list = solicitacaoContratacaoService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		SolicitacaoContratacao solicitacaoContratacao = (SolicitacaoContratacao)iter.next();
    		TypedFlatMap tfm = new TypedFlatMap();
    		tfm.put("idSolicitacaoContratacao", solicitacaoContratacao.getIdSolicitacaoContratacao());
    		tfm.put("nrSolicitacaoContratacao", solicitacaoContratacao.getNrSolicitacaoContratacao());
    		tfm.put("vlFreteNegociado", solicitacaoContratacao.getVlFreteNegociado());
    		tfm.put("nrIdentificacaoMeioTransp", solicitacaoContratacao.getNrIdentificacaoMeioTransp());
    		tfm.put("nrIdentificacaoSemiReboque", solicitacaoContratacao.getNrIdentificacaoSemiReboque());
    		if (solicitacaoContratacao.getRota() != null) {
	    		tfm.put("rota.idRota", solicitacaoContratacao.getRota().getIdRota());
	    		tfm.put("rota.dsRota", solicitacaoContratacao.getRota().getDsRota());
    		}
    		tfm.put("filial.idFilial", solicitacaoContratacao.getFilial().getIdFilial());
    		tfm.put("filial.sgFilial", solicitacaoContratacao.getFilial().getSgFilial());
    		tfm.put("filial.pessoa.nmFantasia", solicitacaoContratacao.getFilial().getPessoa().getNmFantasia());
    		tfm.put("moedaPais.moeda.siglaSimbolo", solicitacaoContratacao.getMoedaPais().getMoeda().getSiglaSimbolo());
    		retorno.add(tfm);
    	}
    	return retorno;
    }


    @SuppressWarnings({ "rawtypes", "unchecked" })
    public List findLookupRotaColetaEntrega(Map criteria) {
    	List list = rotaColetaEntregaService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		RotaColetaEntrega rotaColetaEntrega = (RotaColetaEntrega)iter.next();
    		TypedFlatMap typedFlatMap = new TypedFlatMap();
    		typedFlatMap.put("idRotaColetaEntrega", rotaColetaEntrega.getIdRotaColetaEntrega());
    		typedFlatMap.put("nrRota", rotaColetaEntrega.getNrRota());
    		typedFlatMap.put("dsRota", rotaColetaEntrega.getDsRota());
    		retorno.add(typedFlatMap);
    	}
    	return retorno;
    }


    @SuppressWarnings({ "rawtypes", "unchecked" })
    public List findLookupRotaIdaVolta(TypedFlatMap criteria) {
    	List list = rotaIdaVoltaService.findLookupRotaIdaVolta(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		RotaIdaVolta rotaIdaVolta = (RotaIdaVolta)iter.next();
    		TypedFlatMap tfm = new TypedFlatMap();
    		tfm.put("idRotaIdaVolta", rotaIdaVolta.getIdRotaIdaVolta());
    		tfm.put("nrRota", rotaIdaVolta.getNrRota());
    		tfm.put("rota.idRota", rotaIdaVolta.getRota().getIdRota());
    		tfm.put("rota.dsRota", rotaIdaVolta.getRota().getDsRota());
    		tfm.put("vlFreteKm", rotaIdaVolta.getVlFreteKm());
    		tfm.put("nrDistancia", rotaIdaVolta.getNrDistancia());
    		tfm.put("moedaPais.moeda.sgMoeda", rotaIdaVolta.getMoedaPais().getMoeda().getSgMoeda());
    		tfm.put("moedaPais.moeda.dsSimbolo", rotaIdaVolta.getMoedaPais().getMoeda().getDsSimbolo());
    		tfm.put("rotaViagem.idRotaViagem", rotaIdaVolta.getRotaViagem().getIdRotaViagem());
    		tfm.put("rotaViagem.tipoMeioTransporte.idTipoMeioTransporte", rotaIdaVolta.getRotaViagem().getTipoMeioTransporte().getIdTipoMeioTransporte());
    		retorno.add(tfm);
    	}
    	return retorno;
    }


    public TypedFlatMap getDataUsuario() {
    	Filial filialUsuario = SessionUtils.getFilialSessao();
    	TypedFlatMap tfm = new TypedFlatMap();
    	tfm.put("filial.idFilial", filialUsuario.getIdFilial());
    	tfm.put("filial.sgFilial", filialUsuario.getSgFilial());
    	tfm.put("filial.pessoa.nmFantasia", filialUsuario.getPessoa().getNmFantasia());
		return tfm;
    }


	public TypedFlatMap getVlAdiantamento(TypedFlatMap map) {
		BigDecimal pc = map.getBigDecimal("pcAdiantamentoFrete");
		BigDecimal vl = map.getBigDecimal("vlFreteCarreteiro");
		
		if (vl == null)
			throw new BusinessException("LMS-05094");

		Filial filial = SessionUtils.getFilialSessao();
		BigDecimal pcMaximo = filial.getPcFreteCarreteiro();
		if (pc.compareTo(pcMaximo) > 0) {
    		NumberFormat nf = DecimalFormat.getInstance(LocaleContextHolder.getLocale());
    		String strVlPercMaximo = nf.format(pcMaximo.doubleValue());
			throw new BusinessException("LMS-05131", new Object[]{strVlPercMaximo});
		}

		TypedFlatMap tfm = new TypedFlatMap();
		BigDecimal vlAdiantamento = null;
		if (pc != null && pc.compareTo(new BigDecimal(100)) <= 0 && pc.compareTo(BigDecimalUtils.ZERO) > 0) { 
			vlAdiantamento = pc.divide(new BigDecimal(100)).multiply(vl);
			vlAdiantamento = vlAdiantamento.divide(new BigDecimal(1), 2, BigDecimal.ROUND_HALF_UP);
		}
		tfm.put("vlAdiantamento", vlAdiantamento);
		return tfm;
	}
    
    
    @SuppressWarnings("rawtypes")
    private TypedFlatMap findBeneficiario(Long idProprietario) {
    	TypedFlatMap tfm = new TypedFlatMap();
    	List retorno = beneficiarioProprietarioService.findBeneficiarioByIdProprietario(idProprietario);
    	if (!retorno.isEmpty()) {
    		populateDadosBeneficiario(tfm, (Map)retorno.get(0));
    	}
    	else {
    		retorno = proprietarioService.findDadosBancariosByIdProprietario(idProprietario);
    		if (!retorno.isEmpty())
    			populateDadosBeneficiario(tfm, (Map)retorno.get(0));
    	}
    	return tfm;
    }


	@SuppressWarnings("rawtypes")
    private void populateDadosBeneficiario(TypedFlatMap tfm, Map map) {
		tfm.put("nrIdentificacaoBeneficiario", map.get("tpIdentificacaoBeneficiario") == null ? "" :
			FormatUtils.formatIdentificacao((DomainValue)map.get("tpIdentificacaoBeneficiario"), (String)map.get("nrIdentificacaoBeneficiario")) );
		tfm.put("nmPessoaBeneficiario", map.get("nmPessoaBeneficiario") == null ? "" : map.get("nmPessoaBeneficiario"));
		tfm.put("nrContaBancaria", map.get("nrContaBancaria") == null ? "" : map.get("nrContaBancaria"));
		tfm.put("dvContaBancaria", map.get("dvContaBancaria") == null ? "" : map.get("dvContaBancaria"));
		tfm.put("nrAgenciaBancaria", map.get("nrAgenciaBancaria") == null ? "" : map.get("nrAgenciaBancaria"));
		tfm.put("nmAgenciaBancaria", map.get("nmAgenciaBancaria") == null ? "" : map.get("nmAgenciaBancaria"));
		tfm.put("nrBanco", map.get("nrBanco") == null ? "" : map.get("nrBanco"));
		tfm.put("nmBanco", map.get("nmBanco") == null ? "" : map.get("nmBanco"));
	}
    
	
    private TypedFlatMap findNrTempoViagemBySolicitacaoContratacao(Long idRota, Long idSolicitacaoContratacao) {
    	TypedFlatMap tfm = new TypedFlatMap();
    	if (idRota != null && idSolicitacaoContratacao != null) {
	    	Integer nrTempoViagem = Integer.valueOf(
	    			getControleCargaService().findNrTempoViagemBySolicitacaoContratacao(idRota, idSolicitacaoContratacao).intValue());
			tfm.put("nrTempoViagem", nrTempoViagem);
			long minutos = nrTempoViagem.longValue();
			tfm.put("hrTempoViagem", nrTempoViagem == null ? null : new TimeOfDay((int)minutos / 60, (int)minutos % 60));
    	}
    	return tfm;
    }

    /**
     * 
     * @param criteria
     * @return
     */
	@SuppressWarnings({ "unchecked", "rawtypes" })
    public TypedFlatMap findDadosSolicitacaoContratacao(TypedFlatMap criteria) {
		Long idSolicitacaoContratacao = criteria.getLong("idSolicitacaoContratacao");
		String tpRotaViagem = criteria.getString("tpRotaViagem");

		solicitacaoContratacaoService.validateExistSolicitacaoContratacao(SessionUtils.getFilialSessao().getIdFilial(), idSolicitacaoContratacao);
		SolicitacaoContratacao sc = solicitacaoContratacaoService.findById(idSolicitacaoContratacao);
		
		TypedFlatMap tfm = new TypedFlatMap();
		if (sc.getRotaIdaVolta() != null) {
			if (!tpRotaViagem.equals(sc.getRotaIdaVolta().getRotaViagem().getTpRota().getValue())) {
				String tipoRota = domainValueService.findDomainValueDescription(
						"DM_TIPO_ROTA_VIAGEM_CC", sc.getRotaIdaVolta().getRotaViagem().getTpRota().getValue()); 
				throw new BusinessException("LMS-05128", new Object[]{tipoRota});
			}

			// Busca os dados da rotaIdaVolta
	    	filialRotaService.validatePermissaoFilialUsuarioParaGerarControleCarga(sc.getRotaIdaVolta().getRota().getIdRota());

	    	tfm.put("rotaIdaVolta.idRotaIdaVolta", sc.getRotaIdaVolta().getIdRotaIdaVolta());
	    	tfm.put("rotaIdaVolta.nrRota", sc.getRotaIdaVolta().getNrRota());
	    	tfm.put("rota.dsRota", sc.getRotaIdaVolta().getRota().getDsRota());
	    	tfm.put("rota.idRota", sc.getRotaIdaVolta().getRota().getIdRota());
	    	tfm.put("rotaIdaVolta.rotaViagem.idRotaViagem", sc.getRotaIdaVolta().getRotaViagem().getIdRotaViagem());
	    	tfm.putAll( getTrechoRotaCompleta(sc.getRotaIdaVolta().getIdRotaIdaVolta()) );
	    	tfm.putAll( getMotoristaByRotaViagem(sc.getRotaIdaVolta().getIdRotaIdaVolta()) );
		}
		else
		if (sc.getRota() != null) {
			if (!tpRotaViagem.equals("EV")) {
				String tipoRota = domainValueService.findDomainValueDescription("DM_TIPO_ROTA_VIAGEM_CC", "EV"); 
				throw new BusinessException("LMS-05128", new Object[]{tipoRota});
			}
			filialRotaService.validatePermissaoFilialUsuarioParaGerarControleCarga(sc.getRota().getIdRota());
			tfm.put("rota.idRota", sc.getRota().getIdRota());
			tfm.put("rota.dsRota", sc.getRota().getDsRota());
		}

		if (sc.getVlFreteNegociado() != null) {
			tfm.put("moedaPais.moeda.siglaSimbolo", sc.getMoedaPais().getMoeda().getSiglaSimbolo());
		}
		
		if ( !StringUtils.isBlank(sc.getNrIdentificacaoMeioTransp()) ) {
			Map mapTransportado = new HashMap();
			mapTransportado.put("nrIdentificador", sc.getNrIdentificacaoMeioTransp());
			tfm.putAll( findMeioTransporte(mapTransportado, "Transportado") );
			tfm.putAll( findDadosVeiculo(tfm.getLong("idMeioTransporteTransportado")) );
		}

		if ( !StringUtils.isBlank(sc.getNrIdentificacaoSemiReboque()) ) {
			Map mapSemiRebocado = new HashMap();
			mapSemiRebocado.put("nrIdentificador", sc.getNrIdentificacaoSemiReboque());
			tfm.putAll( findMeioTransporte(mapSemiRebocado, "SemiRebocado") );
		}

		Long idRota = criteria.getLong("idRota");
		tfm.putAll( findNrTempoViagemBySolicitacaoContratacao(idRota, idSolicitacaoContratacao) );
		return tfm;
	}

	/**
	 * 
	 * @param criteria
	 * @param tipo
	 */
	@SuppressWarnings("rawtypes")
    private TypedFlatMap findMeioTransporte(Map criteria, String tipo) {
    	List list = meioTransporteService.find(criteria);
    	if (list.isEmpty())
    		return new TypedFlatMap();

    	MeioTransporte meioTransporte = (MeioTransporte)list.get(0);
    	TypedFlatMap tfm = new TypedFlatMap();
		tfm.put("idMeioTransporte" + tipo, meioTransporte.getIdMeioTransporte());
		tfm.put("nrIdentificador" + tipo, meioTransporte.getNrIdentificador());
		tfm.put("nrFrota" + tipo, meioTransporte.getNrFrota());
		tfm.put("tpVinculo" + tipo, meioTransporte.getTpVinculo().getValue());
		tfm.put("nrRastreador" + tipo, meioTransporte.getMeioTransporteRodoviario().getNrRastreador());
		return tfm;
    }

	/**
	 * 
	 * @param vlFreteKm
	 * @param nrDistancia
	 * @param sgMoeda
	 * @param dsSimbolo
	 */
    private TypedFlatMap getVlFreteCarreteiro(BigDecimal vlFreteKm, BigDecimal nrDistancia, String sgMoeda, String dsSimbolo) {
    	TypedFlatMap tfm = new TypedFlatMap();
    	
    	tfm.put("moedaVlFreteCarreteiro", sgMoeda + " " + dsSimbolo);
    	if (vlFreteKm != null && nrDistancia != null)
    		tfm.put("vlFreteCarreteiro", vlFreteKm.multiply(nrDistancia));
    	else
    		tfm.put("vlFreteCarreteiro", new BigDecimal(0));

    	return tfm;
    }

	
    /**
     * Consulta trecho correspondente a rota completa
     * 
     * @param idRotaIdaVolta
     * @return
     */
    private TypedFlatMap getTrechoRotaCompleta(Long idRotaIdaVolta) {
    	TypedFlatMap tfm = new TypedFlatMap();
    	TrechoRotaIdaVolta triv = trechoRotaIdaVoltaService.findByTrechoRotaCompleta(idRotaIdaVolta);
		tfm.put("hrPrevisaoSaida", triv.getHrSaida());
		tfm.put("nrTempoViagem", triv.getNrTempoViagem());
		Long valorHrTempoViagem = triv.getNrTempoViagem() == null ? null : Long.valueOf(triv.getNrTempoViagem());
		tfm.put("hrTempoViagem", FormatUtils.converteMinutosParaHorasMinutos(valorHrTempoViagem, FormatUtils.ESCALA_HHH));

		final int horasTempoLimite = ((BigDecimal)configuracoesFacade.getValorParametro("TEMPO_LIMITE_ROTA_DO_DIA")).intValue();
		YearMonthDay dtSaidaRota = getControleCargaService().validateRotaControleCarga(idRotaIdaVolta, horasTempoLimite);
		DateTime dhPrevisaoSaida = triv.getHrSaida() == null ? 
				null : dtSaidaRota.toDateTime(triv.getHrSaida(), JTDateTimeUtils.getUserDtz());

		tfm.put("dhPrevisaoSaida", dhPrevisaoSaida);
    	return tfm;
    }
    
    /**
     * 
     * @param map
     * @return
     */
    public TypedFlatMap findDadosRotaIdaVolta(TypedFlatMap criteria) {
    	Long idRotaIdaVolta = criteria.getLong("idRotaIdaVolta");
    	
    	Boolean isFilialOrigemDaRota = filialRotaService.validatePermissaoFilialUsuarioParaGerarControleCarga(criteria.getLong("idRota"));

    	TypedFlatMap tfm = new TypedFlatMap();

    	if (isFilialOrigemDaRota){
    		tfm.put("blPermiteInformarVeiculo", Boolean.TRUE);
    		
    	} else {
    		tfm.put("blPermiteInformarVeiculo", Boolean.FALSE);
    	}

    	tfm.putAll( getTrechoRotaCompleta(idRotaIdaVolta) );
    	tfm.putAll( getMotoristaByRotaViagem(idRotaIdaVolta) );
    	tfm.putAll( getVlFreteCarreteiro(criteria.getBigDecimal("vlFreteKm"), 
    			criteria.getBigDecimal("nrDistancia"), criteria.getString("sgMoeda"), criteria.getString("dsSimbolo")) );
    	return tfm;
    }

    @SuppressWarnings("rawtypes")
    private TypedFlatMap getMotoristaByRotaViagem(Long idRotaIdaVolta) {
    	TypedFlatMap tfm = new TypedFlatMap();
    	List lista = motoristaRotaViagemService.findByIdRotaIdaVolta(idRotaIdaVolta);
    	if (lista.size() == 1) {
    		Motorista motorista = ((MotoristaRotaViagem)lista.get(0)).getMotorista();
    		tfm.put("motorista.idMotorista", motorista.getIdMotorista());
    		tfm.put("motorista.pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(motorista.getPessoa()));
    		tfm.put("motorista.pessoa.nmPessoa", motorista.getPessoa().getNmPessoa());
    	}
    	return tfm;
    }

    /**
     * 
     * @param criteria
     * @return
     */
    @SuppressWarnings({ "rawtypes", "unchecked" })
    public ResultSetPage findPaginatedPontosParada(TypedFlatMap criteria) {
    	Long idRotaIdaVolta = criteria.getLong("_rotaIdaVolta_idRotaIdaVolta");
    	List lista = pontoParadaTrechoService.findToGerarControleCarga(idRotaIdaVolta);
    	
    	List retorno = new ArrayList();
    	TypedFlatMap mapRetorno = null;
    	for (Iterator iter = lista.iterator(); iter.hasNext();) {
    		TypedFlatMap map = (TypedFlatMap)iter.next();
    		mapRetorno = new TypedFlatMap();
    		mapRetorno.put("trecho", map.getString("sgFilialOrigem") + " - " + map.getString("sgFilialDestino"));
    		mapRetorno.put("rodovia", (map.getString("sgRodovia") == null ? "" : map.getString("sgRodovia")) + 
    				(map.getString("dsRodovia") == null ? "" : (" - " + map.getString("dsRodovia"))) );
    		mapRetorno.put("nrKm", map.getInteger("nrKm"));
    		mapRetorno.put("nmMunicipio", map.getString("nmMunicipio"));
    		mapRetorno.put("sgUf", map.getString("sgUf"));
    		mapRetorno.put("hrTempoParada", 
    				map.getInteger("nrTempoParada") == null ? null : JTFormatUtils.formatTime((map.getInteger("nrTempoParada").longValue() * 60), 2, 1));
    		mapRetorno.put("nrLatitude", map.getBigDecimal("nrLatitude"));
    		mapRetorno.put("nrLongitude", map.getBigDecimal("nrLongitude"));
    		mapRetorno.put("idPontoParadaTrecho", map.getLong("idPontoParadaTrecho"));
    		retorno.add(mapRetorno);
    	}
    	return new ResultSetPage(Integer.valueOf(1), retorno);
    }

	/**
     * Verifica se existe um veículo cadastrado para a rota de viagem.
     * 
     * @param criteria
     * @return True se encontrar, caso contrário, False.
     */
    public TypedFlatMap validateMeioTransporteWithRotaViagem(TypedFlatMap criteria) {
    	Boolean retorno = meioTransporteRotaViagemService.
    		validateMeioTransporteWithRotaViagem(criteria.getLong("idRotaViagem"), criteria.getLong("idMeioTransporte"));

    	TypedFlatMap tfm = new TypedFlatMap();
    	tfm.put("blRetorno", retorno);
    	return tfm;
    }

    
    /**
     * 
     * @param parameters
     */
    public void resetDataTab(TypedFlatMap parameters) {
    	super.resetDataTab(parameters);
	}
    
    
    
    /************************************************************************************
								INICIO - EQUIPE OPERACAO
	************************************************************************************/

	/**
	 * Faz a pesquisa da grid para o filho.
	 * 
	 * @param parameters
	 * @return
	 */
	@SuppressWarnings("rawtypes")
    public List findPaginatedIntegranteEqOperac(TypedFlatMap parameters) {
		Long idControleCarga = parameters.getLong("idControleCarga");
		Long idEquipe = parameters.getLong("idEquipe");
		if (idEquipe == null)
			return Collections.EMPTY_LIST;

		MasterEntry masterEntry = getMasterFromSession(idControleCarga, false);
		ItemList itemList = masterEntry.getItems("integrantes");
		ItemListConfig itemListConfig = getMasterConfig().getItemListConfig("integrantes");

		// Na primeira passada ele se obriga a carregar a tela...
		if (!itemList.isInitialized()) {
			inicializaItemListIntegranteEqOperac(idEquipe, idControleCarga, itemList);
		}
		return getListaIntegrantesOrdenada(itemList.iterator(null, itemListConfig));
	}

	/**
	 * Remove uma lista de registros items.
	 *  
	 * @param ids ids dos registros item a serem removidos.
	 *
	 */
	@SuppressWarnings("rawtypes")
    @ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIdsIntegranteEquipe(List ids) {
		super.removeItemByIds(ids, "integrantes");
	}

	/**
	 * 
	 * @param parameters
	 */
    @SuppressWarnings("rawtypes")
    public void inicializaGridIntegranteEqOperac(TypedFlatMap parameters) {
    	Long idControleCarga = parameters.getLong("idControleCarga");
    	Long idEquipe = parameters.getLong("idEquipe");

    	MasterEntry masterEntry = getMasterFromSession(idControleCarga, false);
		ItemList itemList = masterEntry.getItems("integrantes");

		if (!itemList.isInitialized()) {
			inicializaItemListIntegranteEqOperac(idEquipe, idControleCarga, itemList);
		} 
		else {
			List lista = integranteEqOperacService.findIntegranteEqOperacao(idEquipe);
	    	ItemListConfig itemListConfig = getMasterConfig().getItemListConfig("integrantes");
	    	resetaAtualizaItemList(idControleCarga, masterEntry, itemList, itemListConfig, lista);
		}
    }

    /**
     * 
     * @param idEquipe
     * @param masterId
     * @param itemList
     */
	@SuppressWarnings("rawtypes")
    private void inicializaItemListIntegranteEqOperac(Long idEquipe, Long masterId, ItemList itemList) {
		List listaIntegrantes = integranteEqOperacService.findIntegranteEqOperacao(idEquipe);
		itemList.initialize(Collections.EMPTY_LIST);
		for (Iterator iter = listaIntegrantes.iterator(); iter.hasNext();) {
			IntegranteEqOperac integranteEqOperac = (IntegranteEqOperac)iter.next();
			integranteEqOperac.setIdIntegranteEqOperac(null);
			super.saveItemInstanceOnSession(masterId, integranteEqOperac, "integrantes");
		}
	}

	/************************************************************************************
									FIM - EQUIPE OPERACAO
	************************************************************************************/

    
    /************************************************************************************
     							INICIO - PagtoPedagioCc
	************************************************************************************/
	/**
	 * 
	 * @param parameters
	 */
	@SuppressWarnings("rawtypes")
    public void generatePagtoPedagioCcByPostosPassagem(TypedFlatMap parameters) {
		Long idControleCarga = parameters.getLong("idControleCarga");
    	MasterEntry masterEntry = getMasterFromSession(idControleCarga, false);

    	ItemList itemListPagtoPedagioCc = getItemsFromSession(masterEntry, "pagamentos");
    	ItemList itemListPostoPassagemCc = getItemsFromSession(masterEntry, "postos");
    	ItemListConfig itemListConfigPagtoPedagioCc = getMasterConfig().getItemListConfig("pagamentos");
    	ItemListConfig itemListConfigPostoPassagemCc = getMasterConfig().getItemListConfig("postos");
    	
		atualizaDadosPostosNaSessao(idControleCarga, parameters, masterEntry, itemListPostoPassagemCc, itemListConfigPostoPassagemCc);
		atualizaDadosPagtosNaSessao(idControleCarga, null, masterEntry, 
				itemListPagtoPedagioCc, itemListConfigPagtoPedagioCc, itemListPostoPassagemCc, itemListConfigPostoPassagemCc);

		List listaPagtos = pagtoPedagioCcService.findPagtoPedagioCc(getValorIdControleCarga(idControleCarga), 
				itemListPostoPassagemCc.iterator(idControleCarga, itemListConfigPostoPassagemCc), Boolean.FALSE);

		resetaAtualizaItemList(idControleCarga, masterEntry, itemListPagtoPedagioCc, itemListConfigPagtoPedagioCc, listaPagtos);
	}

    /**
     * 
     * @param idControleCarga
     * @param parameters
     * @param masterEntry
     * @param itemListPagtoPedagioCc
     * @param itemListConfigPagtoPedagioCc
     * @param itemListPostoPassagemCc
     * @param itemListConfigPostoPassagemCc
     */
    @SuppressWarnings("rawtypes")
    private void atualizaDadosPagtosNaSessao(	Long idControleCarga, List listaPagamentosGrid, MasterEntry masterEntry, 
    											ItemList itemListPagtoPedagioCc, ItemListConfig itemListConfigPagtoPedagioCc, 
    											ItemList itemListPostoPassagemCc, ItemListConfig itemListConfigPostoPassagemCc) 
    {
		// Recebe a lista com os valores da grid pagamentos
		if (listaPagamentosGrid != null) {
			atualizaDadosPagtosNaSessao(idControleCarga, 
					listaPagamentosGrid, masterEntry, itemListPagtoPedagioCc, itemListConfigPagtoPedagioCc); 
		}
		else {
			List listaPagtos = pagtoPedagioCcService.findPagtoPedagioCc(getValorIdControleCarga(idControleCarga), 
					itemListPostoPassagemCc.iterator(idControleCarga, itemListConfigPostoPassagemCc), Boolean.TRUE);
			
			populateItemList(listaPagtos, masterEntry, itemListPagtoPedagioCc, itemListConfigPagtoPedagioCc);
		}
	}
	
    /************************************************************************************
     							FIM - PagtoPedagioCc
	************************************************************************************/

	/***************************************************************************
	 							INICIO - PostoPassagemCc
	 **************************************************************************/
	/**
	 * 
	 * @param parameters
	 */
	public void resetDataByPostos(TypedFlatMap parameters) {
		Long idControleCarga = parameters.getLong("idControleCarga"); 
		
		TypedFlatMap mapPostos = new TypedFlatMap();
		mapPostos.put("idControleCarga", idControleCarga);
		mapPostos.put("alias", "postos"); 
		resetDataTab(mapPostos);

		TypedFlatMap mapPgtos = new TypedFlatMap();
		mapPgtos.put("idControleCarga", idControleCarga);
		mapPgtos.put("alias", "pagamentos"); 
		resetDataTab(mapPgtos);
	}

	/************************************************************************************
	 							FIM - PostoPassagemCc
	 ************************************************************************************/

    
	/************************************************************************************
							INICIO - ControleTrecho
	************************************************************************************/
    /**
     * Salva um item na sessão.
     * 
     * @param bean
     * @return
     */
    public Serializable saveControleTrecho(TypedFlatMap criteria) {
    	return saveItemInstance(criteria, "trechos");
    }


    /**
     * Faz o findPaginated do filho
     * Possui uma chamada 'interna' para o findPaginated(initialize) contido dentro do 'createMasterConfig'
     * 
     * @param parameters
     * @return
     */
    @SuppressWarnings({ "unchecked", "rawtypes" })
    public List findPaginatedControleTrecho(TypedFlatMap parameters) {
    	Long idControleCarga = parameters.getLong("idControleCarga");
		Long idRotaIdaVolta = parameters.getLong("_rotaIdaVolta_idRotaIdaVolta");
		Long idRota = parameters.getLong("_rota_idRota");
		DateTime dhPrevisaoSaida = parameters.getDateTime("_dhPrevisaoSaida");

    	inicializaDadosControleTrecho(Boolean.TRUE, idControleCarga, idRotaIdaVolta, idRota, dhPrevisaoSaida);

		MasterEntry masterEntry = getMasterFromSession(idControleCarga, false);
		ItemList itemList = masterEntry.getItems("trechos");
		ItemListConfig itemListConfig = getMasterConfig().getItemListConfig("trechos");

		TypedFlatMap map = null;
		List listRetorno = new ArrayList();
    	for (Iterator iter = itemList.iterator(null, itemListConfig); iter.hasNext();) {
    		ControleTrecho controleTrecho = (ControleTrecho)iter.next();
			map = new TypedFlatMap();
			map.put("idControleTrecho", controleTrecho.getIdControleTrecho());
			map.put("filialByIdFilialOrigem.sgFilial", controleTrecho.getFilialByIdFilialOrigem().getSgFilial());
			map.put("filialByIdFilialDestino.sgFilial", controleTrecho.getFilialByIdFilialDestino().getSgFilial());
			map.put("dhPrevisaoSaida", controleTrecho.getDhPrevisaoSaida());
			map.put("nrDistancia", controleTrecho.getNrDistancia());
			map.put("hrTempoViagem", controleTrecho.getNrTempoViagem() == null ? null : JTFormatUtils.formatTime((controleTrecho.getNrTempoViagem().longValue() * 60), 2, 1));
			map.put("hrTempoOperacao", controleTrecho.getNrTempoOperacao() == null ? null : JTFormatUtils.formatTime((controleTrecho.getNrTempoOperacao().longValue() * 60), 2, 1));
			listRetorno.add(map);
    	}
    	return listRetorno;
    }

    
    /**
     * Faz o getRowCount do filho
     * Possui uma chamada 'interna' para o getRowCount contido dentro do 'createMasterConfig'
     * 
     * @param parameters
     * @return
     */
    @SuppressWarnings("rawtypes")
    public Integer getRowCountControleTrecho(Map parameters){
    	return getRowCountItemList(parameters, "trechos");
    }

    /**
     * 
     * @param validaInicializacao
     * @param idControleCarga
     * @param idRotaIdaVolta
     * @param idRota
     * @param dhPrevisaoSaida
     */
	@SuppressWarnings("rawtypes")
    private void inicializaDadosControleTrecho(Boolean validaInicializacao, Long idControleCarga, Long idRotaIdaVolta, Long idRota, DateTime dhPrevisaoSaida) {
		MasterEntry masterEntry = getMasterFromSession(idControleCarga, false);
		ItemList itemList = masterEntry.getItems("trechos");
		ItemListConfig itemListConfig = getMasterConfig().getItemListConfig("trechos");

    	if (!validaInicializacao.booleanValue() || !itemList.isInitialized()) {
    		List lista = controleTrechoService.findTrechosByTrechosRota(getValorIdControleCarga(idControleCarga), idRotaIdaVolta, idRota, dhPrevisaoSaida, null, null, null);
    		populateItemList(lista, masterEntry, itemList, itemListConfig);
    	}
	}

	/**
	 * 
	 * @param parameters
	 */
	public void resetDataByTrechosByViagem(TypedFlatMap parameters) {
		Long idControleCarga = parameters.getLong("idControleCarga"); 
		
		TypedFlatMap map = new TypedFlatMap();
		map.put("idControleCarga", idControleCarga);
		map.put("alias", "trechos"); 
		resetDataTab(map);

		Long idRotaIdaVolta = parameters.getLong("idRotaIdaVolta");
		Long idRota = parameters.getLong("idRota");
		DateTime dhPrevisaoSaida = parameters.getDateTime("dhPrevisaoSaida");
		inicializaDadosControleTrecho(Boolean.FALSE, idControleCarga, idRotaIdaVolta, idRota, dhPrevisaoSaida);
	}

	/************************************************************************************
	 							FIM - ControleTrecho
	************************************************************************************/

	public Serializable store(TypedFlatMap parameters) {
		Long idControleCarga = parameters.getLong("idControleCarga");
    	MasterEntry masterEntry = getMasterFromSession(idControleCarga, false);
    	ControleCarga controleCarga = (ControleCarga) masterEntry.getMaster();

    	ItemList itemListIntegranteEqOperac = getItemsFromSession(masterEntry, "integrantes");
    	ItemList itemListPagtoPedagioCc = getItemsFromSession(masterEntry, "pagamentos");
    	ItemList itemListPostoPassagemCc = getItemsFromSession(masterEntry, "postos");
    	ItemList itemListTrechos = getItemsFromSession(masterEntry, "trechos");
    	ItemListConfig itemListConfigIntegranteEqOperac = getMasterConfig().getItemListConfig("integrantes");
    	ItemListConfig itemListConfigPagtoPedagioCc = getMasterConfig().getItemListConfig("pagamentos");
    	ItemListConfig itemListConfigPostoPassagemCc = getMasterConfig().getItemListConfig("postos");
    	ItemListConfig itemListConfigTrechos = getMasterConfig().getItemListConfig("trechos");

    	inicializaItemLists(idControleCarga, parameters, masterEntry, 
							itemListIntegranteEqOperac, itemListConfigIntegranteEqOperac, 
							itemListPagtoPedagioCc, itemListConfigPagtoPedagioCc,
							itemListPostoPassagemCc, itemListConfigPostoPassagemCc, 
							itemListTrechos, itemListConfigTrechos);

    	updateMasterInSession(masterEntry);
    	
    	ControleCarga newControleCarga = new ControleCarga();
    	
    	try {
	    	newControleCarga = (ControleCarga) getControleCargaService()
					.storeGerarControleCarga(parameters, controleCarga,
							itemListIntegranteEqOperac, itemListConfigIntegranteEqOperac,
							itemListPagtoPedagioCc, itemListConfigPagtoPedagioCc,
							itemListPostoPassagemCc, itemListConfigPostoPassagemCc,
							itemListTrechos, itemListConfigTrechos, parameters.getString("tpBeneficiarioAdiantamento"), 
							null, null,
							null, null
							// LMSA-6520: LMSA-6534
							, false, null 
							);
    	} catch (BusinessException e) {
    		if ("LMS-26044".equals(e.getMessageKey()) && e.getMessageArguments() != null) {
    			Object[] args = e.getMessageArguments();
    			getControleCargaService().storeBloqueioViagemEventual(Long.parseLong(args[0].toString()), Long.parseLong(args[1].toString()), Boolean.parseBoolean(args[2].toString()));
    		}
    		throw e;
    	}

    	itemListIntegranteEqOperac.resetItemsState(); 
    	itemListPagtoPedagioCc.resetItemsState(); 
    	itemListPostoPassagemCc.resetItemsState(); 
    	itemListTrechos.resetItemsState(); 
    	updateMasterInSession(masterEntry);
    	
    	TypedFlatMap mapRetorno = new TypedFlatMap();
    	mapRetorno.put("idControleCarga", newControleCarga.getIdControleCarga());
    	mapRetorno.put("nrControleCarga", newControleCarga.getNrControleCarga());
    	mapRetorno.put("filialByIdFilialOrigem.idFilial", newControleCarga.getFilialByIdFilialOrigem().getIdFilial());
    	mapRetorno.put("filialByIdFilialOrigem.sgFilial", newControleCarga.getFilialByIdFilialOrigem().getSgFilial());
    	return mapRetorno;
	}

    /**
     * 
     * @param idControleCarga
     * @param parameters
     * @param itemListIntegranteEqOperac
     * @param itemListPagtoPedagioCc
     * @param itemListPostoPassagemCc
     */
    @SuppressWarnings("rawtypes")
    private void inicializaItemLists(Long idControleCarga, 
    								 TypedFlatMap parameters,
    								 MasterEntry masterEntry,
    								 ItemList itemListIntegranteEqOperac, 
    								 ItemListConfig itemListConfigIntegranteEqOperac, 
    								 ItemList itemListPagtoPedagioCc, 
    								 ItemListConfig itemListConfigPagtoPedagioCc, 
    								 ItemList itemListPostoPassagemCc,
    								 ItemListConfig itemListConfigPostoPassagemCc,
    								 ItemList itemListTrechos,
    								 ItemListConfig itemListConfigTrechos) 
 
    {
    	Long idSolicitacaoContratacao = parameters.getLong("solicitacaoContratacao.idSolicitacaoContratacao");
    	Long idRotaIdaVolta = parameters.getLong("rotaIdaVolta.idRotaIdaVolta");
    	Long idRota = parameters.getLong("rota.idRota");
    	Long idRotaColetaEntrega = parameters.getLong("rotaColetaEntrega.idRotaColetaEntrega");
    	Long idMeioTransporteTransportado = parameters.getLong("meioTransporteByIdTransportado.idMeioTransporte");
    	Long idMeioTransporteSemiRebocado = parameters.getLong("meioTransporteByIdSemiRebocado.idMeioTransporte");
    	DomainValue tpControleCarga = parameters.getDomainValue("tpControleCarga");
    	DateTime dhPrevisaoSaida = parameters.getDateTime("dhPrevisaoSaida");
    	
    	// Se a rota de viagem foi informada ou a solicitação de contratação
    	if (idRotaIdaVolta != null || idRota != null) {
    		if (!itemListTrechos.isInitialized()) {
	    		DomainValue tpRotaViagem = parameters.getDomainValue("tpRotaViagem");
	    		List listTrechos = null;
	    		if (idSolicitacaoContratacao != null || tpRotaViagem.getValue().equals("EV")) {
	    			listTrechos = controleTrechoService.findTrechosByTrechosRota(
	    					getValorIdControleCarga(idControleCarga), null, idRota, null, null, null, null);
	    		}
	    		else
	    		if (tpRotaViagem.getValue().equals("EX") || tpRotaViagem.getValue().equals("EC")) {
	    			listTrechos = controleTrechoService.findTrechosByTrechosRota(
	    					getValorIdControleCarga(idControleCarga), idRotaIdaVolta, null, dhPrevisaoSaida, null, null, null);
	    		}

	    		populateItemList(listTrechos, masterEntry, itemListTrechos, itemListConfigTrechos);
    		}
    	}

    	if ((idRotaIdaVolta != null || idRotaColetaEntrega != null || idRota != null) && idMeioTransporteTransportado != null) {
			if (!itemListPagtoPedagioCc.isInitialized()) {
				itemListPagtoPedagioCc.initialize(Collections.EMPTY_LIST);
			}

			if (!itemListPostoPassagemCc.isInitialized()) {
				List listaPostoPassagemCc = null;
				if (tpControleCarga.getValue().equals("C")) {
					listaPostoPassagemCc = postoPassagemCcService.findPostoPassagemCcByColetaEntrega(
							getValorIdControleCarga(idControleCarga), idMeioTransporteTransportado, idMeioTransporteSemiRebocado, idRotaColetaEntrega, null);
				}
				else
				if (tpControleCarga.getValue().equals("V")) {
					List filiaisRota = filialRotaService.findFiliaisRota(idRotaIdaVolta, idRota);
					listaPostoPassagemCc = postoPassagemCcService.findPostoPassagemCcByViagem(getValorIdControleCarga(idControleCarga), 
							idMeioTransporteTransportado, idMeioTransporteSemiRebocado, filiaisRota, Boolean.TRUE, null);
				}
				populateItemList(listaPostoPassagemCc, masterEntry, itemListPostoPassagemCc, itemListConfigPostoPassagemCc);

				if (listaPostoPassagemCc != null && !listaPostoPassagemCc.isEmpty()) {
					atualizaDadosPostosNaSessao(idControleCarga, parameters, masterEntry, itemListPostoPassagemCc, itemListConfigPostoPassagemCc);
					atualizaDadosPagtosNaSessao(idControleCarga, null, masterEntry, 
						itemListPagtoPedagioCc, itemListConfigPagtoPedagioCc, itemListPostoPassagemCc, itemListConfigPostoPassagemCc);
				}
			}
			else {
				atualizaDadosPostosNaSessao(idControleCarga, parameters, masterEntry, itemListPostoPassagemCc, itemListConfigPostoPassagemCc);
				if (!itemListPagtoPedagioCc.isEmpty() || !itemListPostoPassagemCc.isEmpty()) {
					atualizaDadosPagtosNaSessao(idControleCarga, parameters.getList("pagamentos"), masterEntry, 
						itemListPagtoPedagioCc, itemListConfigPagtoPedagioCc, itemListPostoPassagemCc, itemListConfigPostoPassagemCc);
				}
			}
    	}
    }

    public void newMaster() {
    	super.newMaster();
    	ControleCarga controleCarga = new ControleCarga();
    	controleCarga.setIdControleCarga(Long.valueOf(-1));
    	putMasterInSession(controleCarga);
    }


    @SuppressWarnings("rawtypes")
    public void findPostosPagamentosByVeiculo(TypedFlatMap criteria) {
    	Long idControleCarga = criteria.getLong("idControleCarga");
    	Boolean blInicializaPostos = criteria.getBoolean("blInicializaPostos");
    	resetTabPostos(criteria);

    	if (blInicializaPostos != null && blInicializaPostos) {     	
	    	MasterEntry masterEntry = getMasterFromSession(idControleCarga, false);
	    	ItemList itemListPagtoPedagioCc = getItemsFromSession(masterEntry, "pagamentos");
	    	ItemList itemListPostoPassagemCc = getItemsFromSession(masterEntry, "postos");
	    	ItemListConfig itemListConfigPagtoPedagioCc = getMasterConfig().getItemListConfig("pagamentos");
	    	ItemListConfig itemListConfigPostoPassagemCc = getMasterConfig().getItemListConfig("postos");
	    	if (!itemListPagtoPedagioCc.isInitialized())
	    		return;
	
	    	Long idRotaIdaVolta = criteria.getLong("idRotaIdaVolta");
	    	Long idRota = criteria.getLong("idRota");
	    	Long idRotaColetaEntrega = criteria.getLong("idRotaColetaEntrega");
	    	Long idMeioTransporteTransportado = criteria.getLong("idMeioTransporteTransportado");
	    	Long idMeioTransporteSemiRebocado = criteria.getLong("idMeioTransporteSemiRebocado");
	    	String tpControleCarga = criteria.getString("tpControleCarga");
	    	
	    	List listaPostoPassagemCc = null;
			if (tpControleCarga.equals("C"))
				listaPostoPassagemCc = postoPassagemCcService.findPostoPassagemCcByColetaEntrega(
						idControleCarga,idMeioTransporteTransportado,idMeioTransporteSemiRebocado, idRotaColetaEntrega, null);
			else 
			if (tpControleCarga.equals("V")) {
				List filiaisRota = filialRotaService.findFiliaisRota(idRotaIdaVolta, idRota);
				listaPostoPassagemCc = postoPassagemCcService.findPostoPassagemCcByViagem(
						idControleCarga, idMeioTransporteTransportado, idMeioTransporteSemiRebocado, filiaisRota, Boolean.TRUE, null);
			}
			populateListaPostoPassagemCc(listaPostoPassagemCc, masterEntry, itemListPostoPassagemCc, itemListConfigPostoPassagemCc);
	
			if (listaPostoPassagemCc != null && !listaPostoPassagemCc.isEmpty() && itemListPagtoPedagioCc.isEmpty()) {
				atualizaDadosPagtosNaSessao(idControleCarga, null, masterEntry, 
						itemListPagtoPedagioCc, itemListConfigPagtoPedagioCc, itemListPostoPassagemCc, itemListConfigPostoPassagemCc);
			}
		}
	}
    
	@SuppressWarnings({ "rawtypes", "serial" })
    protected MasterEntryConfig createMasterConfig(MasterDetailFactory masterFactory) { 
		//Declaracao da classe pai
		MasterEntryConfig config = masterFactory.createMasterEntryConfig(ControleCarga.class, true);

		// Esta classe e reponsavel por ordenar a List dos filhos que estão em memoria de acordo com as regras de negocio
    	Comparator comparatorIntegrantes = new Comparator() {
			public int compare(Object obj1, Object obj2) {
				IntegranteEqOperac integranteEqOperac1 = (IntegranteEqOperac)obj1;
				IntegranteEqOperac integranteEqOperac2 = (IntegranteEqOperac)obj2;
        		return integranteEqOperac1.getNmIntegranteEquipe().compareTo(integranteEqOperac2.getNmIntegranteEquipe());
			}    		
    	};

    	Comparator comparatorGeneric = new Comparator() {
			public int compare(Object obj1, Object obj2) {
				return 1;
			}    		
    	};

    	Comparator comparatorControleTrecho = new Comparator() {
    		public int compare(Object obj1, Object obj2) {
    			ControleTrecho ct1 = (ControleTrecho)obj1;
    			ControleTrecho ct2 = (ControleTrecho)obj2;
    			if (ct1.getDhPrevisaoSaida() != null && ct2.getDhPrevisaoSaida() != null) {
    				int valor = Long.valueOf(ct1.getDhPrevisaoSaida().getMillis()).compareTo( Long.valueOf(ct2.getDhPrevisaoSaida().getMillis()) );
    				if (valor == 0) {
    					if (ct1.getDhPrevisaoChegada() != null && ct2.getDhPrevisaoChegada() != null)
    						valor = Long.valueOf(ct1.getDhPrevisaoChegada().getMillis()).compareTo( ct2.getDhPrevisaoChegada().getMillis() );
    				}
    				return valor;
    			}
   				return -1;
    		}
    	};

    	// Aba Equipe
    	// Esta instancia é responsavel por carregar os items filhos na sessão a partir do banco de dados.
    	ItemListConfig itemEquipeInit = new ItemListConfig() {

    		/**
    		 * Find paginated do filho
    		 * Passa por este ponto apenas na primeira vez em que a list filha e chamada.
    		 * Apos a primeira vez ela e carregada da memoria
    		 * 
    		 *  @param masterId id do pai
    		 *  @param parameters todos os parametros vindo da tela pai
    		 */
			public List initialize(Long masterId, Map parameters) {
				return null;
			}

			/**
			 * Busca rowCount da grid da tela filha
			 * Passa por este ponto apenas na primeira vez em que a list filha e chamada.
    		 * Apos a primeira vez ela e carregada da memoria
			 * 
			 * @param masterId id do pai
			 */
			public Integer getRowCount(Long masterId, Map parameters) {
				return Integer.valueOf(1);
			}			

			/**
			 * Seta um pai para o itemConfig de Integrante
			 */
			public void setMasterOnItem(Object master, Object itemBean) {
				((IntegranteEqOperac) itemBean).setEquipeOperacao(new EquipeOperacao());
			}			
			
			/**
			 * Todos os dados a serem carregados na grid pelo form passam antes por este
			 * metodo. Para se fazer uma validacao...
			 * Recomenda-se que o bean em questao seja gerado nesta classe a partir dos
			 * parametros enviados da tela para se evitar um 'ReflectionUtils'
			 * 
			 * @param parameters 
			 * @param bean a ser istanciado
			 * @return Object bean instanciado
			 */
			public Object populateNewItemInstance(Map parameters, Object object) {
				return populateNewItemInstanceIntegranteEqOperac(parameters, object);
			}
			
			/**
			 * Chama esta funcao depois de editar um item da grid filho
			 * E retira atributos desnecessarios para o filho
			 * 
			 * @param newBean 
			 * @param oldBean 
			 */
			public void modifyItemValues(Object newBean, Object oldBean) {
				modifyItemValuesEquipeOperacao(newBean, oldBean);
			}

			/**
			 * Mapeia atributos de dominio do pojo filho
			 */
			public Map configItemDomainProperties() {
				return null;
			}
    	};

    	// Aba - 1a grid
    	// Esta instancia é responsavel por carregar os items filhos na sessão a partir do banco de dados.
    	ItemListConfig itemPagamentoInit = new ItemListConfig() {

    		/**
    		 * Esse método é chamado somente na primeira vez em que o método findPaginatedItemList for executado.
    		 * Após a primeira vez ela é carregada na memória, e o item list fica inicializado.
    		 * Nesse caso está retornando uma lista vazia, porque a grid de pagto é povoada a partir da grid postos.
    		 * 
    		 *  @param masterId id do pai
    		 *  @param parameters
    		 */
			public List initialize(Long masterId, Map parameters) {
				return Collections.EMPTY_LIST;
			}

			/**
			 * Busca rowCount da grid pagto.
			 * Passa por este ponto apenas na primeira vez em que a list filha é chamada.
    		 * Após a primeira vez ela é carregada da memória. 
    		 * Está retornando um valor qualquer, porque neste caso não teremos paginação e o getRowCount não será usado.
			 * 
			 * @param masterId id do pai
			 */
			public Integer getRowCount(Long masterId, Map parameters) {
				return Integer.valueOf(1);
			}			

			/**
			 * Todos os dados a serem carregados na grid pelo form passam antes por este método.
			 * Recomenda-se que o bean em questão seja gerado nesta classe a partir dos parâetros enviados da tela para se 
			 * evitar um 'ReflectionUtils'.
			 * 
			 * @param parameters 
			 * @param bean a ser istanciado
			 * @return Object bean instanciado
			 */
			public Object populateNewItemInstance(Map parameters, Object object) {
				return populateNewItemInstancePagtoPedagioCc(parameters, object);
			}

			/**
			 * Método chamado quando um item da grid for alterado. Os atributos desnecessários para o filho são removidos.
			 * 
			 * @param newBean 
			 * @param oldBean 
			 */
			public void modifyItemValues(Object newBean, Object oldBean) {
				modifyItemValuesPagtoPedagioCc(newBean, oldBean);
			}

			/**
			 * Mapeia atributos de dominio do pojo filho
			 */
			public Map configItemDomainProperties() {
				return null;
			}
    	};

    	// Aba - 2a grid
    	// Esta instancia é responsavel por carregar os items filhos na sessão a partir do banco de dados.
    	ItemListConfig itemPostoPassagemInit = new ItemListConfig() {

    		/**
    		 * Esse método é chamado somente na primeira vez em que o método findPaginatedItemList for executado.
    		 * Após a primeira vez ela é carregada na memória, e o item list fica inicializado.
    		 * 
    		 *  @param masterId id do pai
    		 *  @param parameters todos os parametros vindo da tela pai
    		 */
			public List initialize(Long masterId, Map parameters) {
				if (parameters.isEmpty())
					return Collections.EMPTY_LIST;

				TypedFlatMap map = (TypedFlatMap)parameters;
				Long idControleCarga = map.getLong("idControleCarga");
				Long idMeioTransporteTransportado = map.getLong("_meioTransporteByIdTransportado_idMeioTransporte");
				Long idMeioTransporteSemiRebocado = map.getLong("_meioTransporteByIdSemiRebocado_idMeioTransporte");
				Long idRotaColetaEntrega = map.getLong("_rotaColetaEntrega_idRotaColetaEntrega");
				Long idRotaIdaVolta = map.getLong("_rotaIdaVolta_idRotaIdaVolta");
				Long idRota = map.getLong("_rota_idRota");
				String tpControleCarga = map.getString("_tpControleCargaValor");

				if (idRotaIdaVolta == null && idRotaColetaEntrega == null && idRota == null)
					return Collections.EMPTY_LIST;
				
				List result = Collections.EMPTY_LIST;
				if (tpControleCarga.equals("C"))
					result =  postoPassagemCcService.findPostoPassagemCcByColetaEntrega(getValorIdControleCarga(idControleCarga), 
							idMeioTransporteTransportado, idMeioTransporteSemiRebocado, idRotaColetaEntrega, null);
				else {
					List filiaisRota = filialRotaService.findFiliaisRota(idRotaIdaVolta, idRota);
					result = postoPassagemCcService.findPostoPassagemCcByViagem(getValorIdControleCarga(idControleCarga), 
							idMeioTransporteTransportado, idMeioTransporteSemiRebocado, filiaisRota, Boolean.TRUE, null);
				}

				int id = -1;
				for (Iterator iter = result.iterator(); iter.hasNext();) {
					PostoPassagemCc ppCC = (PostoPassagemCc)iter.next();
					if (ppCC.getIdPostoPassagemCc() == null) {
						ppCC.setIdPostoPassagemCc(Long.valueOf(id--));
					}
				}
				return result;
			}

			/**
			 * Busca rowCount da grid postos.
			 * Passa por este ponto apenas na primeira vez em que a list filha é chamada.
    		 * Após a primeira vez ela é carregada da memória. 
    		 * Está retornando um valor qualquer, porque neste caso não teremos paginação e o getRowCount não será usado.
			 * 
			 * @param masterId id do pai
			 */
			public Integer getRowCount(Long masterId, Map parameters) {
				return Integer.valueOf(1);
			}			

			/**
			 * Todos os dados a serem carregados na grid pelo form passam antes por este método.
			 * Recomenda-se que o bean em questão seja gerado nesta classe a partir dos parâetros enviados da tela para se 
			 * evitar um 'ReflectionUtils'.
			 * 
			 * @param parameters 
			 * @param bean a ser istanciado
			 * @return Object bean instanciado
			 */
			public Object populateNewItemInstance(Map parameters, Object object) {
				return populateNewItemInstancePostoPassagemCc(parameters, object);
			}

			/**
			 * Método chamado quando um item da grid for alterado. Os atributos desnecessários para o filho são removidos.
			 * 
			 * @param newBean 
			 * @param oldBean 
			 */
			public void modifyItemValues(Object newBean, Object oldBean) {
				modifyItemValuesPostoPassagemCc(newBean, oldBean);
			}

			/**
			 * Mapeia atributos de dominio do pojo filho
			 */
			public Map configItemDomainProperties() {
				return null;
			}
    	};
   	
    	// Aba Trechos
    	// Esta instancia é responsavel por carregar os items filhos na sessão a partir do banco de dados.
    	ItemListConfig itemTrechoInit = new ItemListConfig() {

    		/**
    		 * Find paginated do filho
    		 * Passa por este ponto apenas na primeira vez em que a list filha e chamada.
    		 * Apos a primeira vez ela e carregada da memoria
    		 * 
    		 *  @param masterId id do pai
    		 *  @param parameters todos os parametros vindo da tela pai
    		 */
			public List initialize(Long masterId, Map parameters) {
				TypedFlatMap map = (TypedFlatMap)parameters;
				Long idRotaIdaVolta = map.getLong("_idRotaIdaVolta");
				Long idRota = map.getLong("_idRota");
				DateTime dhPrevisaoSaida = map.getDateTime("_dhPrevisaoSaida");
				List listTrechos = controleTrechoService.findTrechosByTrechosRota(null, idRotaIdaVolta, idRota, dhPrevisaoSaida, null, null, null);
				return listTrechos;
			}

			/**
			 * Busca rowCount da grid da tela filha
			 * Passa por este ponto apenas na primeira vez em que a list filha e chamada.
    		 * Apos a primeira vez ela e carregada da memoria
			 * 
			 * @param masterId id do pai
			 */
			public Integer getRowCount(Long masterId, Map parameters) {
				return Integer.valueOf(1);
			}			

			/**
			 * Todos os dados a serem carregados na grid pelo form passam antes por este
			 * metodo. Para se fazer uma validacao...
			 * Recomenda-se que o bean em questao seja gerado nesta classe a partir dos
			 * parametros enviados da tela para se evitar um 'ReflectionUtils'
			 * 
			 * @param parameters 
			 * @param bean a ser istanciado
			 * @return Object bean instanciado
			 */
			public Object populateNewItemInstance(Map parameters, Object object) {
				return null;
			}

			/**
			 * Chama esta funcao depois de editar um item da grid filho
			 * E retira atributos desnecessarios para o filho
			 * 
			 * @param newBean 
			 * @param oldBean 
			 */
			public void modifyItemValues(Object newBean, Object oldBean) {
			}

			/**
			 * Mapeia atributos de dominio do pojo filho
			 */
			public Map configItemDomainProperties() {
				return null;
			}
    	};

    	//Seta as configuracoes do filho...
		config.addItemConfig("integrantes", IntegranteEqOperac.class, itemEquipeInit, comparatorIntegrantes);
		config.addItemConfig("pagamentos", PagtoPedagioCc.class, itemPagamentoInit, comparatorGeneric);
		config.addItemConfig("postos", PostoPassagemCc.class, itemPostoPassagemInit, comparatorGeneric);
		config.addItemConfig("trechos", ControleTrecho.class, itemTrechoInit, comparatorControleTrecho);
		return config;
	}

	public void setMeioTransporteRotaViagemService(MeioTransporteRotaViagemService meioTransporteRotaViagemService) {
		this.meioTransporteRotaViagemService = meioTransporteRotaViagemService;
	}
	public void setMotoristaRotaViagemService(MotoristaRotaViagemService motoristaRotaViagemService) {
		this.motoristaRotaViagemService = motoristaRotaViagemService;
	}
	public void setFilialRotaService(FilialRotaService filialRotaService) {
		this.filialRotaService = filialRotaService;
	}
	public void setBeneficiarioProprietarioService(BeneficiarioProprietarioService beneficiarioProprietarioService) {
		this.beneficiarioProprietarioService = beneficiarioProprietarioService;
	}
	public void setControleTrechoService(ControleTrechoService controleTrechoService) {
		this.controleTrechoService = controleTrechoService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public void setIntegranteEqOperacService(IntegranteEqOperacService integranteEqOperacService) {
		this.integranteEqOperacService = integranteEqOperacService;
	}
	public void setMeioTransporteService(MeioTransporteService meioTransporteService) {
		this.meioTransporteService = meioTransporteService;
	}
	public void setPontoParadaTrechoService(PontoParadaTrechoService pontoParadaTrechoService) {
		this.pontoParadaTrechoService = pontoParadaTrechoService;
	}
	public void setProprietarioService(ProprietarioService proprietarioService) {
		this.proprietarioService = proprietarioService;
	}
	public void setRotaColetaEntregaService(RotaColetaEntregaService rotaColetaEntregaService) {
		this.rotaColetaEntregaService = rotaColetaEntregaService;
	}
	public void setRotaIdaVoltaService(RotaIdaVoltaService rotaIdaVoltaService) {
		this.rotaIdaVoltaService = rotaIdaVoltaService;
	}
	public void setSolicitacaoContratacaoService(SolicitacaoContratacaoService solicitacaoContratacaoService) {
		this.solicitacaoContratacaoService = solicitacaoContratacaoService;
	}
	public void setTipoMeioTransporteService(TipoMeioTransporteService tipoMeioTransporteService) {
		this.tipoMeioTransporteService = tipoMeioTransporteService;
	}
	public void setTipoTabelaColetaEntregaService(TipoTabelaColetaEntregaService tipoTabelaColetaEntregaService) {
		this.tipoTabelaColetaEntregaService = tipoTabelaColetaEntregaService;
	}
	public void setTrechoRotaIdaVoltaService(TrechoRotaIdaVoltaService trechoRotaIdaVoltaService) {
		this.trechoRotaIdaVoltaService = trechoRotaIdaVoltaService;
	}
	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}
}