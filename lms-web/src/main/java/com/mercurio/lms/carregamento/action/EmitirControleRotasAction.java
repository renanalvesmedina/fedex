package com.mercurio.lms.carregamento.action;

import java.io.File;
import java.util.List;
import java.util.Map;

import org.joda.time.YearMonthDay;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.report.ReportActionSupport;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.report.EmitirControleRotasService;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.RotaIdaVoltaService;
import com.mercurio.lms.util.JTDateTimeUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.carregamento.emitirControleRotasAction"
 */

public class EmitirControleRotasAction extends ReportActionSupport {
	
	private EmitirControleRotasService emitirControleRotasService;
	private FilialService filialService;
	private RotaIdaVoltaService rotaIdaVoltaService;
	

	public EmitirControleRotasService getEmitirControleRotasService() {
		return emitirControleRotasService;
	}

	public void setEmitirControleRotasService(EmitirControleRotasService emitirControleRotasService) {
		super.reportServiceSupport = emitirControleRotasService;
	}

	public FilialService getFilialService() {
		return filialService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	
	public RotaIdaVoltaService getRotaIdaVoltaService() {
		return rotaIdaVoltaService;
	}

	public void setRotaIdaVoltaService(RotaIdaVoltaService rotaIdaVoltaService) {
		this.rotaIdaVoltaService = rotaIdaVoltaService;
	}
	
	/*
	 * Regras de negocio da tela...
	 */
	
	/**
	 * Execute do relatorio
	 * 
	 * @param TypedFlatMap parameters
	 * @return String
	 */
	public File execute(TypedFlatMap parameters) throws Exception {
		
		if (!this.isSmaller(parameters.getYearMonthDay("dataInicial"), parameters.getYearMonthDay("dataFinal"))) {
			throw new BusinessException("LMS-05063");
		}
		
		return super.execute(parameters);
	}
	
	/**
     * Método para verificar a diferenca entre os dois periodos da tela.
     * 
     * @param smallerDate
     * @param biggerDate
     * @return Uma string formatada hh:mmm
     */
    public boolean isSmaller(YearMonthDay dataInicial, YearMonthDay dataFinal) {

    	if (JTDateTimeUtils.comparaData(dataInicial, dataFinal)<=0) return true;
    	
    	return false;
    }

	/*
	 * Controles referentes aos objetos da tela...
	 */
	public List findLookupFilial(Map criteria) {
		return this.getFilialService().findLookup(criteria);
	}
	
	public List findLookupRotaIdaVolta(Map criteria) {
		return this.getRotaIdaVoltaService().findLookup(criteria);
	}

}
