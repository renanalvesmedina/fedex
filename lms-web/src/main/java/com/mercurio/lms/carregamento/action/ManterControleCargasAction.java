package com.mercurio.lms.carregamento.action;

import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.joda.time.DateTime;
import org.joda.time.YearMonthDay;
import org.springframework.context.i18n.LocaleContextHolder;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.FindDefinition;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.CartaoPedagio;
import com.mercurio.lms.carregamento.model.ControleCarga;
import com.mercurio.lms.carregamento.model.ControleTrecho;
import com.mercurio.lms.carregamento.model.EventoControleCarga;
import com.mercurio.lms.carregamento.model.FilialRotaCc;
import com.mercurio.lms.carregamento.model.LocalTroca;
import com.mercurio.lms.carregamento.model.PagtoPedagioCc;
import com.mercurio.lms.carregamento.model.PostoPassagemCc;
import com.mercurio.lms.carregamento.model.service.CartaoPedagioService;
import com.mercurio.lms.carregamento.model.service.ControleCargaService;
import com.mercurio.lms.carregamento.model.service.ControleTrechoService;
import com.mercurio.lms.carregamento.model.service.EventoControleCargaService;
import com.mercurio.lms.carregamento.model.service.FilialRotaCcService;
import com.mercurio.lms.carregamento.model.service.LocalTrocaService;
import com.mercurio.lms.carregamento.model.service.PagtoPedagioCcService;
import com.mercurio.lms.carregamento.model.service.PostoPassagemCcService;
import com.mercurio.lms.configuracoes.model.service.ParametroGeralService;
import com.mercurio.lms.contratacaoveiculos.model.MeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.Motorista;
import com.mercurio.lms.contratacaoveiculos.model.Proprietario;
import com.mercurio.lms.contratacaoveiculos.model.SolicitacaoContratacao;
import com.mercurio.lms.contratacaoveiculos.model.TipoMeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.service.BeneficiarioProprietarioService;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTranspProprietarioService;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteService;
import com.mercurio.lms.contratacaoveiculos.model.service.MotoristaService;
import com.mercurio.lms.contratacaoveiculos.model.service.ProprietarioService;
import com.mercurio.lms.contratacaoveiculos.model.service.SolicitacaoContratacaoService;
import com.mercurio.lms.contratacaoveiculos.model.service.TipoMeioTransporteService;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.TipoTabelaColetaEntrega;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.service.TipoTabelaColetaEntregaService;
import com.mercurio.lms.fretecarreteiroviagem.model.ReciboFreteCarreteiro;
import com.mercurio.lms.fretecarreteiroviagem.model.service.ReciboFreteCarreteiroService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.Rota;
import com.mercurio.lms.municipios.model.RotaColetaEntrega;
import com.mercurio.lms.municipios.model.RotaIdaVolta;
import com.mercurio.lms.municipios.model.TipoPagamPostoPassagem;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.MeioTransporteRotaViagemService;
import com.mercurio.lms.municipios.model.service.MotoristaRotaViagemService;
import com.mercurio.lms.municipios.model.service.PontoParadaTrechoService;
import com.mercurio.lms.municipios.model.service.RotaColetaEntregaService;
import com.mercurio.lms.municipios.model.service.RotaIdaVoltaService;
import com.mercurio.lms.municipios.model.service.RotaService;
import com.mercurio.lms.municipios.model.service.TipoPagamPostoPassagemService;
import com.mercurio.lms.portaria.model.ControleQuilometragem;
import com.mercurio.lms.portaria.model.service.ControleQuilometragemService;
import com.mercurio.lms.sgr.model.service.SolicitacaoSinalService;
import com.mercurio.lms.util.BigDecimalUtils;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.JTFormatUtils;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.carregamento.manterControleCargasAction"
 */

public class ManterControleCargasAction {

	private BeneficiarioProprietarioService beneficiarioProprietarioService;
	private CartaoPedagioService cartaoPedagioService;
	private ControleCargaService controleCargaService;
	private ControleQuilometragemService controleQuilometragemService;
	private ControleTrechoService controleTrechoService;
	private EventoControleCargaService eventoControleCargaService;
	private FilialRotaCcService filialRotaCcService;
	private FilialService filialService;
	private LocalTrocaService localTrocaService;
	private MeioTransporteRotaViagemService meioTransporteRotaViagemService;
	private MeioTransporteService meioTransporteService;
	private MeioTranspProprietarioService meioTranspProprietarioService;
	private MotoristaService motoristaService;
	private MotoristaRotaViagemService motoristaRotaViagemService;
	private PagtoPedagioCcService pagtoPedagioCcService;
	private ParametroGeralService parametroGeralService;
	private PontoParadaTrechoService pontoParadaTrechoService;
	private PostoPassagemCcService postoPassagemCcService;
	private ProprietarioService proprietarioService;
	private ReciboFreteCarreteiroService reciboFreteCarreteiroService;
	private RotaColetaEntregaService rotaColetaEntregaService;
	private RotaIdaVoltaService rotaIdaVoltaService;
	private RotaService rotaService;
	private SolicitacaoContratacaoService solicitacaoContratacaoService;
	private SolicitacaoSinalService solicitacaoSinalService;
	private TipoMeioTransporteService tipoMeioTransporteService;
	private TipoPagamPostoPassagemService tipoPagamPostoPassagemService;
	private TipoTabelaColetaEntregaService tipoTabelaColetaEntregaService;


	public void setMotoristaService(MotoristaService motoristaService) {
		this.motoristaService = motoristaService;
	}
	public void setSolicitacaoSinalService(SolicitacaoSinalService solicitacaoSinalService) {
		this.solicitacaoSinalService = solicitacaoSinalService;
	}
	public void setTipoPagamPostoPassagemService(TipoPagamPostoPassagemService tipoPagamPostoPassagemService) {
		this.tipoPagamPostoPassagemService = tipoPagamPostoPassagemService;
	}
	public void setCartaoPedagioService(CartaoPedagioService cartaoPedagioService) {
		this.cartaoPedagioService = cartaoPedagioService;
	}
	public void setMeioTranspProprietarioService(MeioTranspProprietarioService meioTranspProprietarioService) {
		this.meioTranspProprietarioService = meioTranspProprietarioService;
	}
	public void setPagtoPedagioCcService(PagtoPedagioCcService pagtoPedagioCcService) {
		this.pagtoPedagioCcService = pagtoPedagioCcService;
	}
	public void setPostoPassagemCcService(PostoPassagemCcService postoPassagemCcService) {
		this.postoPassagemCcService = postoPassagemCcService;
	}
	public void setControleCargaService(ControleCargaService controleCargaService) {
		this.controleCargaService = controleCargaService;
	}
	public void setParametroGeralService(ParametroGeralService parametroGeralService) {
		this.parametroGeralService = parametroGeralService;
	}
	public void setBeneficiarioProprietarioService(BeneficiarioProprietarioService beneficiarioProprietarioService) {
		this.beneficiarioProprietarioService = beneficiarioProprietarioService;
	}
	public void setControleQuilometragemService(ControleQuilometragemService controleQuilometragemService) {
		this.controleQuilometragemService = controleQuilometragemService;
	}
	public void setControleTrechoService(ControleTrechoService controleTrechoService) {
		this.controleTrechoService = controleTrechoService;
	}
	public void setEventoControleCargaService(EventoControleCargaService eventoControleCargaService) {
		this.eventoControleCargaService = eventoControleCargaService;
	}
	public void setFilialRotaCcService(FilialRotaCcService filialRotaCcService) {
		this.filialRotaCcService = filialRotaCcService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public void setLocalTrocaService(LocalTrocaService localTrocaService) {
		this.localTrocaService = localTrocaService;
	}
	public void setMeioTransporteRotaViagemService(MeioTransporteRotaViagemService meioTransporteRotaViagemService) {
		this.meioTransporteRotaViagemService = meioTransporteRotaViagemService;
	}
	public void setMeioTransporteService(MeioTransporteService meioTransporteService) {
		this.meioTransporteService = meioTransporteService;
	}
	public void setMotoristaRotaViagemService(MotoristaRotaViagemService motoristaRotaViagemService) {
		this.motoristaRotaViagemService = motoristaRotaViagemService;
	}
	public void setPontoParadaTrechoService(PontoParadaTrechoService pontoParadaTrechoService) {
		this.pontoParadaTrechoService = pontoParadaTrechoService;
	}
	public void setProprietarioService(ProprietarioService proprietarioService) {
		this.proprietarioService = proprietarioService;
	}
	public void setReciboFreteCarreteiroService(ReciboFreteCarreteiroService reciboFreteCarreteiroService) {
		this.reciboFreteCarreteiroService = reciboFreteCarreteiroService;
	}
	public void setRotaColetaEntregaService(RotaColetaEntregaService rotaColetaEntregaService) {
		this.rotaColetaEntregaService = rotaColetaEntregaService;
	}
	public void setRotaIdaVoltaService(RotaIdaVoltaService rotaIdaVoltaService) {
		this.rotaIdaVoltaService = rotaIdaVoltaService;
	}
	public void setRotaService(RotaService rotaService) {
		this.rotaService = rotaService;
	}
	public void setSolicitacaoContratacaoService(SolicitacaoContratacaoService solicitacaoContratacaoService) {
		this.solicitacaoContratacaoService = solicitacaoContratacaoService;
	}
	public void setTipoMeioTransporteService(TipoMeioTransporteService tipoMeioTransporteService) {
		this.tipoMeioTransporteService = tipoMeioTransporteService;
	}
	public void setTipoTabelaColetaEntregaService(TipoTabelaColetaEntregaService tipoTabelaColetaEntregaService) {
		this.tipoTabelaColetaEntregaService = tipoTabelaColetaEntregaService;
	}


	public TypedFlatMap getDataUsuario() {
    	Filial filialUsuario = SessionUtils.getFilialSessao();
    	TypedFlatMap map = new TypedFlatMap();
    	map.put("filial.idFilial", filialUsuario.getIdFilial());
    	map.put("filial.sgFilial", filialUsuario.getSgFilial());
    	map.put("filial.pessoa.nmFantasia", filialUsuario.getPessoa().getNmFantasia());
    	
    	YearMonthDay dataAtual = JTDateTimeUtils.getDataAtual();
    	map.put("dtAtual", dataAtual);
    	map.put("dtInicial", dataAtual.minusDays(15));
		return map;
    }


    public List findLookupFilial(Map criteria) {
    	List list = filialService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		Filial filial = (Filial)iter.next();
    		TypedFlatMap typedFlatMap = new TypedFlatMap();
    		typedFlatMap.put("idFilial", filial.getIdFilial());
    		typedFlatMap.put("sgFilial", filial.getSgFilial());
    		typedFlatMap.put("pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
    		retorno.add(typedFlatMap);
    	}
    	return retorno;
    }

    
	public List findLookupSolicitacaoContratacao(Map criteria) {
    	List list = solicitacaoContratacaoService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		SolicitacaoContratacao solicitacaoContratacao = (SolicitacaoContratacao)iter.next();
    		TypedFlatMap tfm = new TypedFlatMap();
    		tfm.put("idSolicitacaoContratacao", solicitacaoContratacao.getIdSolicitacaoContratacao());
    		tfm.put("nrSolicitacaoContratacao", solicitacaoContratacao.getNrSolicitacaoContratacao());
    		tfm.put("filial.idFilial", solicitacaoContratacao.getFilial().getIdFilial());
    		tfm.put("filial.sgFilial", solicitacaoContratacao.getFilial().getSgFilial());
    		tfm.put("filial.pessoa.nmFantasia", solicitacaoContratacao.getFilial().getPessoa().getNmFantasia());
    		tfm.put("nrIdentificacaoMeioTransp", solicitacaoContratacao.getNrIdentificacaoMeioTransp());
    		tfm.put("nrIdentificacaoSemiReboque", solicitacaoContratacao.getNrIdentificacaoSemiReboque());
    		if (solicitacaoContratacao.getRota() != null) {
    			tfm.put("rota.idRota", solicitacaoContratacao.getRota().getIdRota());
    		}
    		retorno.add(tfm);
    	}
    	return retorno;
    }

	
    public List findLookupRotaColetaEntrega(Map criteria) {
    	List list = rotaColetaEntregaService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		RotaColetaEntrega rotaColetaEntrega = (RotaColetaEntrega)iter.next();
    		TypedFlatMap tfm = new TypedFlatMap();
    		tfm.put("idRotaColetaEntrega", rotaColetaEntrega.getIdRotaColetaEntrega());
    		tfm.put("nrRota", rotaColetaEntrega.getNrRota());
    		tfm.put("dsRota", rotaColetaEntrega.getDsRota());
    		retorno.add(tfm);
    	}
    	return retorno;
    }
    

    public List findLookupMeioTransporteTransportado(Map criteria) {
    	criteria.put("tipoMeioTransporte", "transportado");
    	return findLookupMeioTransporte(criteria);
    }
    
    public List findLookupMeioTransporteSemiRebocado(Map criteria) {
    	criteria.put("tipoMeioTransporte", "semiRebocado");
    	return findLookupMeioTransporte(criteria);
    }

	private List findLookupMeioTransporte(Map criteria) {
    	List list = meioTransporteService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		MeioTransporte meioTransporte = (MeioTransporte)iter.next();
    		TypedFlatMap tfm = new TypedFlatMap();
    		tfm.put("idMeioTransporte", meioTransporte.getIdMeioTransporte());
    		tfm.put("nrIdentificador", meioTransporte.getNrIdentificador());
    		tfm.put("nrFrota", meioTransporte.getNrFrota());
    		tfm.put("tpVinculo", meioTransporte.getTpVinculo().getValue());
    		tfm.put("modeloMeioTransporte.tipoMeioTransporte.tpMeioTransporte.value", 
    				meioTransporte.getModeloMeioTransporte().getTipoMeioTransporte().getTpMeioTransporte().getValue());
    		tfm.put("modeloMeioTransporte.tipoMeioTransporte.idTipoMeioTransporte", 
    				meioTransporte.getModeloMeioTransporte().getTipoMeioTransporte().getIdTipoMeioTransporte());
    		tfm.put("meioTransporteRodoviario.nrRastreador", meioTransporte.getMeioTransporteRodoviario().getNrRastreador());
    		retorno.add(tfm);
    	}
    	return retorno;
    }

	
    public List findLookupProprietario(Map criteria) {
    	Map mapPessoa = (Map)criteria.get("pessoa");
    	if (mapPessoa != null) {
    		mapPessoa.remove("nmPessoa");
    	}
    	List list = proprietarioService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		Proprietario proprietario = (Proprietario)iter.next();
    		TypedFlatMap typedFlatMap = new TypedFlatMap();
    		typedFlatMap.put("idProprietario", proprietario.getIdProprietario());
    		typedFlatMap.put("pessoa.nrIdentificacao", proprietario.getPessoa().getNrIdentificacao());
    		typedFlatMap.put("pessoa.tpIdentificacao", proprietario.getPessoa().getTpIdentificacao());
    		typedFlatMap.put("pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(proprietario.getPessoa()));
    		typedFlatMap.put("pessoa.nmPessoa", proprietario.getPessoa().getNmPessoa());
    		retorno.add(typedFlatMap);
    	}
    	return retorno;
    }


    public List findLookupRotaIdaVolta(TypedFlatMap criteria) {
    	List list = rotaIdaVoltaService.findLookupRotaIdaVolta(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		RotaIdaVolta rotaIdaVolta = (RotaIdaVolta)iter.next();
    		TypedFlatMap tfm = new TypedFlatMap();
    		tfm.put("idRotaIdaVolta", rotaIdaVolta.getIdRotaIdaVolta());
    		tfm.put("nrRota", rotaIdaVolta.getNrRota());
    		tfm.put("rota.dsRota", rotaIdaVolta.getRota().getDsRota());
    		tfm.put("vlFreteKm", rotaIdaVolta.getVlFreteKm());
    		tfm.put("nrDistancia", rotaIdaVolta.getNrDistancia());
    		tfm.put("moedaPais.moeda.sgMoeda", rotaIdaVolta.getMoedaPais().getMoeda().getSgMoeda());
    		tfm.put("moedaPais.moeda.dsSimbolo", rotaIdaVolta.getMoedaPais().getMoeda().getDsSimbolo());
    		retorno.add(tfm);
    	}
    	return retorno;
    }

    
    public List findLookupRota(TypedFlatMap criteria) {
    	List list = rotaService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		Rota rota = (Rota)iter.next();
    		TypedFlatMap tfm = new TypedFlatMap();
    		tfm.put("idRota", rota.getIdRota());
    		tfm.put("dsRota", rota.getDsRota());
    		retorno.add(tfm);
    	}
    	return retorno;
    }


    private List findTipoTabelaColetaEntrega(MeioTransporte meioTransporte, TipoTabelaColetaEntrega tipoTabelaColetaEntrega, RotaColetaEntrega rotaColetaEntrega) {
    	if (meioTransporte == null)
    		return Collections.EMPTY_LIST;
 
    	if (tipoTabelaColetaEntrega != null) {
    		TipoTabelaColetaEntrega ttce = tipoTabelaColetaEntregaService.findById(tipoTabelaColetaEntrega.getIdTipoTabelaColetaEntrega());
    		
    		TypedFlatMap tfm = new TypedFlatMap();
    		tfm.put("idTipoTabelaColetaEntrega", ttce.getIdTipoTabelaColetaEntrega());
    		tfm.put("dsTipoTabelaColetaEntrega", ttce.getDsTipoTabelaColetaEntrega().toString());
    		tfm.put("blNormal", ttce.getBlNormal());

    		List lista = new ArrayList();
    		lista.add(tfm);
    		return lista;
    	}
    	try {
    		return tipoTabelaColetaEntregaService.findTipoTabelaColetaEntregaWithTabelaColetaEntrega(
    			SessionUtils.getFilialSessao().getIdFilial(), meioTransporte.getIdMeioTransporte(), rotaColetaEntrega.getIdRotaColetaEntrega());
    	} catch (BusinessException be) {
    		return Collections.EMPTY_LIST;
    	}
    }

    
    public List findLookupMotorista(TypedFlatMap criteria) {
   		criteria.remove("pessoa.nmPessoa");
   		criteria.remove("rotaIdaVolta");

    	List list = motoristaService.findLookupMotorista(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		Motorista motorista = (Motorista)iter.next();
    		TypedFlatMap typedFlatMap = new TypedFlatMap();
    		typedFlatMap.put("idMotorista", motorista.getIdMotorista());
    		typedFlatMap.put("pessoa.tpIdentificacao", motorista.getPessoa().getTpIdentificacao());
    		typedFlatMap.put("pessoa.nrIdentificacao", motorista.getPessoa().getNrIdentificacao());
    		typedFlatMap.put("pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(motorista.getPessoa()));
    		typedFlatMap.put("pessoa.nmPessoa", motorista.getPessoa().getNmPessoa());
    		retorno.add(typedFlatMap);
    	}
    	return retorno;
    }

    
    /**
     * 
     * @param criteria
     * @return
     */
    public void validatePaginatedControleCarga(TypedFlatMap criteria) {
    	controleCargaService.validatePaginatedControleCarga(criteria);
    }


    /**
     * 
     * @param criteria
     * @return
     */
    public ResultSetPage findPaginatedControleCarga(TypedFlatMap criteria) {
    	ResultSetPage rsp = controleCargaService.findPaginatedControleCarga(criteria, FindDefinition.createFindDefinition(criteria));
    	for (Iterator iter = rsp.getList().iterator(); iter.hasNext(); ){
    		TypedFlatMap tfm = (TypedFlatMap)iter.next();

    		String tpControleCargaValue = tfm.getDomainValue("tpControleCarga").getValue();
    		if (tpControleCargaValue.equals("C")) {
    			tfm.put("dsRota", tfm.getString("dsRotaColeta"));
    			tfm.put("tpRotaViagem", tfm.getDomainValue("tpControleCarga").getDescription().toString());
    		}
    		else {
    			if (tfm.getDomainValue("tpRotaViagemDominio") != null) {
    				tfm.put("tpRotaViagem", tfm.getDomainValue("tpRotaViagemDominio").getDescription().toString());
    			}
    			tfm.put("dsRota", tfm.getString("dsRotaViagem"));
    		}

    		DateTime dhPrevisaoSaida = tfm.getDateTime("dhPrevisaoSaida");
    		if (dhPrevisaoSaida != null) {
    			tfm.put("hrPrevisaoSaida", JTFormatUtils.format(dhPrevisaoSaida, JTFormatUtils.SHORT, JTFormatUtils.TIMEOFDAY));
    		}
    		tfm.remove("tpRotaViagemDominio");

    		if (tfm.get("motorista.pessoa.nrIdentificacao") != null){
    			tfm.put("motorista.idMotorista", tfm.get("motorista.pessoa.idPessoa"));
    			tfm.put("motorista.pessoa.nmPessoa", tfm.get("motorista.pessoa.nmPessoa"));
    			tfm.put("motorista.pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao((String)tfm.get("motorista.pessoa.tpIdentificacao.value"),(String)tfm.get("motorista.pessoa.nrIdentificacao")));
    		}
    	}
    	return rsp;
    }

    
    /**
     * 
     * @param criteria
     * @return
     */
    public Integer getRowCountControleCarga(TypedFlatMap criteria) {
    	return controleCargaService.getRowCountControleCarga(criteria);
    }

    
    
    public ResultSetPage findPaginatedPontosParada(TypedFlatMap criteria) {
    	Long idRotaIdaVolta = criteria.getLong("rotaIdaVolta.idRotaIdaVolta");
    	if (idRotaIdaVolta == null)
    		return ResultSetPage.EMPTY_RESULTSET;

    	List lista = pontoParadaTrechoService.findToGerarControleCarga(idRotaIdaVolta);
    	List retorno = new ArrayList();
    	TypedFlatMap mapRetorno = null;
    	for (Iterator iter = lista.iterator(); iter.hasNext();) {
    		TypedFlatMap map = (TypedFlatMap)iter.next();
    		mapRetorno = new TypedFlatMap();
    		mapRetorno.put("trecho", map.getString("sgFilialOrigem") + " - " + map.getString("sgFilialDestino"));
    		mapRetorno.put("rodovia", map.getString("sgRodovia") + " - " + map.getString("dsRodovia"));
    		mapRetorno.put("nrKm", map.getInteger("nrKm"));
    		mapRetorno.put("nmMunicipio", map.getString("nmMunicipio"));
    		mapRetorno.put("sgUf", map.getString("sgUf"));
    		mapRetorno.put("hrTempoParada", map.getInteger("nrTempoParada") == null ? null : JTFormatUtils.formatTime((map.getInteger("nrTempoParada").longValue() * 60), 2, 1));
    		mapRetorno.put("nrLatitude", map.getBigDecimal("nrLatitude"));
    		mapRetorno.put("nrLongitude", map.getBigDecimal("nrLongitude"));
    		mapRetorno.put("idPontoParadaTrecho", map.getLong("idPontoParadaTrecho"));
    		retorno.add(mapRetorno);
    	}
    	return new ResultSetPage(Integer.valueOf(1), retorno);
    }


    public ResultSetPage findPaginatedAdiantamentos(TypedFlatMap parameters) {
    	ResultSetPage rsp = reciboFreteCarreteiroService.
    		findPaginatedByIdControleCarga(parameters.getLong("idControleCarga"), FindDefinition.createFindDefinition(parameters));
    	return rsp;
    }
    
    
    public Integer getRowCountAdiantamentos(TypedFlatMap parameters) {
    	return reciboFreteCarreteiroService.getRowCountFindPaginatedByIdControleCarga(parameters.getLong("idControleCarga"));
    }


    public TypedFlatMap findById(Long idControleCarga) {
    	ControleCarga cc = controleCargaService.findByIdControleCarga(idControleCarga);
    	TypedFlatMap tfm = new TypedFlatMap();
    	tfm.put("idControleCarga", cc.getIdControleCarga());
    	tfm.put("nrControleCarga", cc.getNrControleCarga());
    	tfm.put("filialByIdFilialOrigem.idFilial", cc.getFilialByIdFilialOrigem().getIdFilial());
    	tfm.put("filialByIdFilialOrigem.sgFilial", cc.getFilialByIdFilialOrigem().getSgFilial());
    	tfm.put("tpControleCargaValor", cc.getTpControleCarga().getValue());
    	tfm.put("tpControleCarga.description", cc.getTpControleCarga().getDescription().toString());
    	tfm.put("tpStatusControleCarga.value", cc.getTpStatusControleCarga().getValue());
    	tfm.put("tpStatusControleCarga.description", cc.getTpStatusControleCarga().getDescription().toString());
    	tfm.put("blEntregaDireta", cc.getBlEntregaDireta());
    	
    	if (!cc.getTpStatusControleCarga().getValue().equals("EV"))
    		tfm.put("filialAtualizaStatus.sgFilial", cc.getFilialByIdFilialAtualizaStatus().getSgFilial());
    	
    	if (cc.getTpRotaViagem() != null) {
    		tfm.put("tpRotaViagem.value", cc.getTpRotaViagem().getValue());
    		tfm.put("tpRotaViagem.description", cc.getTpRotaViagem().getDescription().toString());
    	}
    	tfm.put("vlFreteCarreteiro", cc.getVlFreteCarreteiro());
    	Long valorHrTempoViagem = cc.getNrTempoViagem() == null ? null : Long.valueOf(cc.getNrTempoViagem());
    	tfm.put("hrTempoViagem", FormatUtils.converteMinutosParaHorasMinutos(valorHrTempoViagem, FormatUtils.ESCALA_HHH));
    	tfm.put("dhPrevisaoSaida", cc.getDhPrevisaoSaida());

    	if (cc.getRotaColetaEntrega() != null) {
        	tfm.put("rotaColetaEntrega.idRotaColetaEntrega", cc.getRotaColetaEntrega().getIdRotaColetaEntrega());
        	tfm.put("rotaColetaEntrega.nrRota", cc.getRotaColetaEntrega().getNrRota());
        	tfm.put("rotaColetaEntrega.dsRota", cc.getRotaColetaEntrega().getDsRota());
    	}
    	if (cc.getRotaIdaVolta() != null) {
        	tfm.put("rotaIdaVolta.idRotaIdaVolta", cc.getRotaIdaVolta().getIdRotaIdaVolta());
        	tfm.put("rotaIdaVolta.nrRota", cc.getRotaIdaVolta().getNrRota());
        	tfm.put("rotaIdaVolta.rota.dsRota", cc.getRotaIdaVolta().getRota().getDsRota());
        	tfm.put("idRotaViagem", cc.getRotaIdaVolta().getRotaViagem().getIdRotaViagem());
        	if (cc.getRotaIdaVolta().getRotaViagem().getTipoMeioTransporte() != null) {
        		tfm.put("idTipoMeioTransporteByRotaIdaVolta", cc.getRotaIdaVolta().getRotaViagem().getTipoMeioTransporte().getIdTipoMeioTransporte());
        	}
        	List listaRotaViagem = motoristaRotaViagemService.findByIdRotaIdaVolta(cc.getRotaIdaVolta().getIdRotaIdaVolta());
        	if (!listaRotaViagem.isEmpty()) {
        		tfm.put("blFiltrarMotorista", Boolean.TRUE);
        	}
    	}
    	if (cc.getSolicitacaoContratacao() != null) {
    		tfm.put("solicitacaoContratacao.idSolicitacaoContratacao", cc.getSolicitacaoContratacao().getIdSolicitacaoContratacao());
        	tfm.put("solicitacaoContratacao.nrSolicitacaoContratacao", cc.getSolicitacaoContratacao().getNrSolicitacaoContratacao());
        	tfm.put("solicitacaoContratacao.filial.idFilial", cc.getSolicitacaoContratacao().getFilial().getIdFilial());
        	tfm.put("solicitacaoContratacao.filial.sgFilial", cc.getSolicitacaoContratacao().getFilial().getSgFilial());
        	tfm.put("solicitacaoContratacao.filial.pessoa.nmFantasia", cc.getSolicitacaoContratacao().getFilial().getPessoa().getNmFantasia());
    	}
    	if (cc.getTabelaColetaEntrega() != null) {
    		tfm.put("tabelaColetaEntrega.idTabelaColetaEntrega", cc.getTabelaColetaEntrega().getIdTabelaColetaEntrega());
    	}
		if (cc.getTipoTabelaColetaEntrega() != null) {
	    	tfm.put("idTipoTabelaColetaEntrega", cc.getTipoTabelaColetaEntrega().getIdTipoTabelaColetaEntrega());
    	}
    	if (cc.getVlFreteCarreteiro() != null && cc.getMoeda() != null) {
    		tfm.put("moedaVlFreteCarreteiro", cc.getMoeda().getSgMoeda() + " " + cc.getMoeda().getDsSimbolo());
    	}

    	// VIAGEM
    	if (cc.getTpControleCarga().getValue().equals("V")) {
    		if (cc.getMeioTransporteByIdTransportado() != null) {
    			tfm.put("meioTransporteByIdTransportado.idMeioTransporte", cc.getMeioTransporteByIdTransportado().getIdMeioTransporte());
    			tfm.put("meioTransporteByIdTransportadoViagem2.idMeioTransporte", cc.getMeioTransporteByIdTransportado().getIdMeioTransporte());
    			tfm.put("meioTransporteByIdTransportadoViagem2.nrFrota", cc.getMeioTransporteByIdTransportado().getNrFrota());
    			tfm.put("meioTransporteByIdTransportadoViagem.idMeioTransporte", cc.getMeioTransporteByIdTransportado().getIdMeioTransporte());
    			tfm.put("meioTransporteByIdTransportadoViagem.nrIdentificador", cc.getMeioTransporteByIdTransportado().getNrIdentificador());
    			tfm.put("tpVinculo", cc.getMeioTransporteByIdTransportado().getTpVinculo().getValue());
    			if (cc.getMeioTransporteByIdTransportado().getMeioTransporteRodoviario() != null) {
    				tfm.put("meioTransporteRodoviario.nrRastreador", 
    						cc.getMeioTransporteByIdTransportado().getMeioTransporteRodoviario().getNrRastreador());
    			}
    			tfm.put("idTipoMeioTransporteTransportado", cc.getMeioTransporteByIdTransportado().getModeloMeioTransporte().getTipoMeioTransporte().getIdTipoMeioTransporte());
    			
    	    	TipoMeioTransporte tipoMeioTransporte = tipoMeioTransporteService.
    	    			findTipoMeioTransporteCompostoByIdMeioTransporte(cc.getMeioTransporteByIdTransportado().getIdMeioTransporte());
    	    	if (tipoMeioTransporte != null) {
    	    		tfm.put("blDesabilitaSemiReboque", Boolean.FALSE);
    	    	}

    			Map mapControleCarga = new HashMap();
    			mapControleCarga.put("idControleCarga", idControleCarga);

    			Map mapMeioTransporte = new HashMap();
    			mapMeioTransporte.put("idMeioTransporte", cc.getMeioTransporteByIdTransportado().getIdMeioTransporte());
    			
    			Map mapSolicitacaoSinal = new HashMap();
    			mapSolicitacaoSinal.put("controleCarga", mapControleCarga);
    			mapSolicitacaoSinal.put("meioTransporte", mapMeioTransporte);
    			mapSolicitacaoSinal.put("tpStatusSolicitacao", "GE");
    			if (!solicitacaoSinalService.find(mapSolicitacaoSinal).isEmpty()) {
    				tfm.put("blDesabilitaSolicSinal", Boolean.TRUE);
    			}
    		}
    		if (cc.getMeioTransporteByIdSemiRebocado() != null) {
    			tfm.put("meioTransporteByIdSemiRebocado.idMeioTransporte", cc.getMeioTransporteByIdSemiRebocado().getIdMeioTransporte());
    			tfm.put("meioTransporteByIdSemiRebocadoViagem2.idMeioTransporte", cc.getMeioTransporteByIdSemiRebocado().getIdMeioTransporte());
    			tfm.put("meioTransporteByIdSemiRebocadoViagem2.nrFrota", cc.getMeioTransporteByIdSemiRebocado().getNrFrota());
    			tfm.put("meioTransporteByIdSemiRebocadoViagem.idMeioTransporte", cc.getMeioTransporteByIdSemiRebocado().getIdMeioTransporte());
    			tfm.put("meioTransporteByIdSemiRebocadoViagem.nrIdentificador", cc.getMeioTransporteByIdSemiRebocado().getNrIdentificador());
    		}
    		if (cc.getProprietario() != null) {
    			String tpIdentificacao = FormatUtils.formatIdentificacao(cc.getProprietario().getPessoa().getTpIdentificacao(), cc.getProprietario().getPessoa().getNrIdentificacao());
    			tfm.put("proprietario.idProprietario", cc.getProprietario().getIdProprietario());
    			tfm.put("proprietarioViagem.pessoa.nrIdentificacaoFormatado", tpIdentificacao);
    			tfm.put("proprietarioViagem.pessoa.nmPessoa", cc.getProprietario().getPessoa().getNmPessoa());
    		}
    		if (cc.getMotorista() != null) {
    			String tpIdentificacao = FormatUtils.formatIdentificacao(cc.getMotorista().getPessoa().getTpIdentificacao(), cc.getMotorista().getPessoa().getNrIdentificacao());
    			tfm.put("motorista.idMotorista", cc.getMotorista().getIdMotorista());
    			tfm.put("motoristaViagem.idMotorista", cc.getMotorista().getIdMotorista());
    			tfm.put("motoristaViagem.pessoa.nrIdentificacao", cc.getMotorista().getPessoa().getNrIdentificacao());
    			tfm.put("motoristaViagem.pessoa.nrIdentificacaoFormatado", tpIdentificacao);
    			tfm.put("motoristaViagem.pessoa.nmPessoa", cc.getMotorista().getPessoa().getNmPessoa());
    		}
    		if (cc.getRota() != null) {
    			tfm.put("rotaIdaVolta.rota.dsRota", cc.getRota().getDsRota());
    			tfm.put("rota.idRota", cc.getRota().getIdRota());
    		}
    	}
    	// COLETA
    	else {
    		if (cc.getMeioTransporteByIdTransportado() != null) {
    			tfm.put("meioTransporteByIdTransportado.idMeioTransporte", cc.getMeioTransporteByIdTransportado().getIdMeioTransporte());
    			tfm.put("meioTransporteByIdTransportadoColeta2.idMeioTransporte", cc.getMeioTransporteByIdTransportado().getIdMeioTransporte());
    			tfm.put("meioTransporteByIdTransportadoColeta2.nrFrota", cc.getMeioTransporteByIdTransportado().getNrFrota());
    			tfm.put("meioTransporteByIdTransportadoColeta.idMeioTransporte", cc.getMeioTransporteByIdTransportado().getIdMeioTransporte());
    			tfm.put("meioTransporteByIdTransportadoColeta.nrIdentificador", cc.getMeioTransporteByIdTransportado().getNrIdentificador());
    			tfm.put("idTipoMeioTransporteTransportado", cc.getMeioTransporteByIdTransportado().getModeloMeioTransporte().getTipoMeioTransporte().getIdTipoMeioTransporte());

    	    	TipoMeioTransporte tipoMeioTransporte = tipoMeioTransporteService.
		    			findTipoMeioTransporteCompostoByIdMeioTransporte(cc.getMeioTransporteByIdTransportado().getIdMeioTransporte());
		    	if (tipoMeioTransporte != null) {
		    		tfm.put("blDesabilitaSemiReboque", Boolean.FALSE);
		    	}
    		}
    		if (cc.getMeioTransporteByIdSemiRebocado() != null) {
    			tfm.put("meioTransporteByIdSemiRebocado.idMeioTransporte", cc.getMeioTransporteByIdSemiRebocado().getIdMeioTransporte());
    			tfm.put("meioTransporteByIdSemiRebocadoColeta2.idMeioTransporte", cc.getMeioTransporteByIdSemiRebocado().getIdMeioTransporte());
    			tfm.put("meioTransporteByIdSemiRebocadoColeta2.nrFrota", cc.getMeioTransporteByIdSemiRebocado().getNrFrota());
    			tfm.put("meioTransporteByIdSemiRebocadoColeta.idMeioTransporte", cc.getMeioTransporteByIdSemiRebocado().getIdMeioTransporte());
    			tfm.put("meioTransporteByIdSemiRebocadoColeta.nrIdentificador", cc.getMeioTransporteByIdSemiRebocado().getNrIdentificador());
    		}
    		if (cc.getProprietario() != null) {
    			String tpIdentificacao = FormatUtils.formatIdentificacao(cc.getProprietario().getPessoa().getTpIdentificacao(), cc.getProprietario().getPessoa().getNrIdentificacao());
    			tfm.put("proprietario.idProprietario", cc.getProprietario().getIdProprietario());
    			tfm.put("proprietarioColeta.pessoa.nrIdentificacaoFormatado", tpIdentificacao);
    			tfm.put("proprietarioColeta.pessoa.nmPessoa", cc.getProprietario().getPessoa().getNmPessoa());
    		}
    		
    		if (cc.getMotorista() != null) {
    			String tpIdentificacao = FormatUtils.formatIdentificacao(cc.getMotorista().getPessoa().getTpIdentificacao(), cc.getMotorista().getPessoa().getNrIdentificacao());
    			tfm.put("motorista.idMotorista", cc.getMotorista().getIdMotorista());
    			tfm.put("motoristaColeta.idMotorista", cc.getMotorista().getIdMotorista());
    			tfm.put("motoristaColeta.pessoa.nrIdentificacao", cc.getMotorista().getPessoa().getNrIdentificacao());
    			tfm.put("motoristaColeta.pessoa.nrIdentificacaoFormatado", tpIdentificacao);
    			tfm.put("motoristaColeta.pessoa.nmPessoa", cc.getMotorista().getPessoa().getNmPessoa());
    		}

     		ControleQuilometragem controleQuilometragemSaida  = controleQuilometragemService.findControleQuilometragemByIdControleCargaByIdFilial(cc.getIdControleCarga(), cc.getFilialByIdFilialOrigem().getIdFilial(), Boolean.TRUE);
    		if (controleQuilometragemSaida != null)
    			tfm.put("nrQuilometragemSaida", controleQuilometragemSaida.getNrQuilometragem());
    		
    		ControleQuilometragem controleQuilometragemRetorno  = controleQuilometragemService.findControleQuilometragemByIdControleCargaByIdFilial(cc.getIdControleCarga(), cc.getFilialByIdFilialOrigem().getIdFilial(), Boolean.FALSE);
    		if (controleQuilometragemRetorno != null)
    			tfm.put("nrQuilometragemRetorno", controleQuilometragemRetorno.getNrQuilometragem());
    		
    		
    		tfm.put("tabelas", findTipoTabelaColetaEntrega(cc.getMeioTransporteByIdTransportado(), cc.getTipoTabelaColetaEntrega(), cc.getRotaColetaEntrega()));    		
    	}
    	
    	Filial filialUsuario = SessionUtils.getFilialSessao();
    	tfm.put("filialUsuario.idFilial", filialUsuario.getIdFilial());
    	tfm.put("filialUsuario.sgFilial", filialUsuario.getSgFilial());
    	tfm.put("filialUsuario.pessoa.nmFantasia", filialUsuario.getPessoa().getNmFantasia());

    	tfm.put("blPermiteAlterar", validatePermissaoAlteracaoCc(cc));
    	tfm.put("blPermiteAlterarPgtoProprietario", validatePermissaoAlteracaoPagtoProprietario(cc.getMeioTransporteByIdTransportado()));
    	return tfm;
    }


    /**
     * O perfil DIVOP não tem acesso ao método validatePermiteAlteracaoCcByPerfilUsuario.
     * 
     * @param meioTransporte
     * @return True se tem a permissão, caso contrário, False.
     */
	private Boolean validatePermissaoAlteracaoPagtoProprietario(MeioTransporte meioTransporte) {
		if (meioTransporte != null && meioTransporte.getTpVinculo().getValue().equals("P")) {
			return controleCargaService.validateManutencaoEspecialCC(SessionUtils.getUsuarioLogado());
			}
		return Boolean.FALSE;
	}

	
	
	private Boolean validatePermissaoAlteracaoCc(ControleCarga cc) {
		String tpStatusCcValue = cc.getTpStatusControleCarga().getValue();
		if (tpStatusCcValue.equals("FE") || tpStatusCcValue.equals("EV")) {
			return controleCargaService.validateManutencaoEspecialCC(SessionUtils.getUsuarioLogado());										
			}

    	Long idFilialDestino = null;
    	if (cc.getFilialByIdFilialDestino() != null) {
    		idFilialDestino = cc.getFilialByIdFilialDestino().getIdFilial();
    	}
		return controleCargaService.validatePermissaoAlteracaoCc(cc.getIdControleCarga(),
													    		 cc.getFilialByIdFilialOrigem().getIdFilial(), 
													    		 idFilialDestino,
													    		 cc.getFilialByIdFilialAtualizaStatus().getIdFilial(),
													    		 cc.getTpControleCarga().getValue(), 
													    		 tpStatusCcValue);
	}
	
	

	/**
	 * 
	 * @param parameters
	 * @return
	 */
	public TypedFlatMap getVlAdiantamento(TypedFlatMap parameters) {
		BigDecimal pc = parameters.getBigDecimal("pcAdiantamentoFrete");
		BigDecimal vl = parameters.getBigDecimal("vlFreteCarreteiro");
		Long idControleCarga = parameters.getLong("idControleCarga");
		Long idFilialOrigem = parameters.getLong("idFilialOrigem");

		Filial filial = filialService.findById(idFilialOrigem);
		BigDecimal pcMaximo = filial.getPcFreteCarreteiro();
		BigDecimal pcTotalAdiantamentos = getPcTotalAdiantamentos(idControleCarga);
		if (pc.add(pcTotalAdiantamentos).compareTo(pcMaximo) > 0) {
    		NumberFormat nf = DecimalFormat.getInstance(LocaleContextHolder.getLocale());
    		String strVlPercMaximo = nf.format(pcMaximo.doubleValue());
			throw new BusinessException("LMS-05131", new Object[]{strVlPercMaximo});
		}

		TypedFlatMap tfm = new TypedFlatMap();
		BigDecimal vlAdiantamento = null;
		if (pc != null && pc.compareTo(new BigDecimal(100)) <= 0 && pc.compareTo(BigDecimalUtils.ZERO) > 0) { 
			vlAdiantamento = pc.divide(new BigDecimal(100)).multiply(vl);
			vlAdiantamento = vlAdiantamento.divide(new BigDecimal(1), 2, BigDecimal.ROUND_HALF_UP);
		}
		tfm.put("vlAdiantamento", vlAdiantamento);
		return tfm;
	}
	
	
	private BigDecimal getPcTotalAdiantamentos(Long idControleCarga) {
		Map mapControleCarga = new HashMap();
		mapControleCarga.put("idControleCarga", idControleCarga);

		Map map = new HashMap();
		map.put("controleCarga", mapControleCarga);

		BigDecimal vlSoma = BigDecimalUtils.ZERO;
		List lista = reciboFreteCarreteiroService.find(map);
		for (Iterator iter = lista.iterator(); iter.hasNext();) {
			ReciboFreteCarreteiro rfc = (ReciboFreteCarreteiro)iter.next();
			if (rfc.getPcAdiantamentoFrete() != null) {
				vlSoma = vlSoma.add(rfc.getPcAdiantamentoFrete());
			}
		}
		return vlSoma;
	}
	
	
    public TypedFlatMap findBeneficiario(Long idProprietario) {
    	TypedFlatMap tfm = new TypedFlatMap();
    	List retorno = beneficiarioProprietarioService.findBeneficiarioByIdProprietario(idProprietario);
    	if (!retorno.isEmpty()) {
    		tfm.putAll( populateDadosBeneficiario((Map)retorno.get(0)) );
    	}
    	else {
    		retorno = proprietarioService.findDadosBancariosByIdProprietario(idProprietario);
    		if (!retorno.isEmpty())
    			tfm.putAll( populateDadosBeneficiario((Map)retorno.get(0)) );
    	}
    	return tfm;
    }

    
	private TypedFlatMap populateDadosBeneficiario(Map map) {
		TypedFlatMap tfm = new TypedFlatMap();
		tfm.put("nrIdentificacaoBeneficiario", map.get("tpIdentificacaoBeneficiario") == null ? "" :
			FormatUtils.formatIdentificacao( ((DomainValue)map.get("tpIdentificacaoBeneficiario")).getValue(), (String)map.get("nrIdentificacaoBeneficiario")) );
		tfm.put("nmPessoaBeneficiario", map.get("nmPessoaBeneficiario") == null ? "" : map.get("nmPessoaBeneficiario"));
		tfm.put("nrContaBancaria", map.get("nrContaBancaria") == null ? "" : map.get("nrContaBancaria"));
		tfm.put("dvContaBancaria", map.get("dvContaBancaria") == null ? "" : map.get("dvContaBancaria"));
		tfm.put("nrAgenciaBancaria", map.get("nrAgenciaBancaria") == null ? "" : map.get("nrAgenciaBancaria"));
		tfm.put("nmAgenciaBancaria", map.get("nmAgenciaBancaria") == null ? "" : map.get("nmAgenciaBancaria"));
		tfm.put("nrBanco", map.get("nrBanco") == null ? "" : map.get("nrBanco"));
		tfm.put("nmBanco", map.get("nmBanco") == null ? "" : map.get("nmBanco"));
		return tfm;
	}


    public TypedFlatMap findByIdAdiantamento(Long idReciboFreteCarreteiro) {
    	ReciboFreteCarreteiro bean = reciboFreteCarreteiroService.findByIdReciboFreteCarreteiro(idReciboFreteCarreteiro);
    	TypedFlatMap tfm = new TypedFlatMap();
    	tfm.put("idReciboFreteCarreteiro", bean.getIdReciboFreteCarreteiro());
    	tfm.put("pcAdiantamentoFrete", bean.getPcAdiantamentoFrete());
    	tfm.put("vlBruto", bean.getVlBruto());
    	tfm.put("obReciboFreteCarreteiro", bean.getObReciboFreteCarreteiro());
    	if (bean.getMoedaPais() != null) {
    		tfm.put("moedaPais.moeda.siglaSimbolo", bean.getMoedaPais().getMoeda().getSiglaSimbolo());
    	}
    	if (bean.getBeneficiario() != null) {
    		tfm.put("beneficiario.pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(bean.getBeneficiario().getPessoa()) );
    		tfm.put("beneficiario.pessoa.nmPessoa", bean.getBeneficiario().getPessoa().getNmPessoa());
    	}
    	if (bean.getProprietario() != null) {
    		tfm.put("proprietario.pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(bean.getProprietario().getPessoa()) );
    		tfm.put("proprietario.pessoa.nmPessoa", bean.getProprietario().getPessoa().getNmPessoa());
    	}
    	if (bean.getContaBancaria() != null) {
        	tfm.put("contaBancaria.nrContaBancaria", bean.getContaBancaria().getNrContaBancaria());
        	tfm.put("contaBancaria.dvContaBancaria", bean.getContaBancaria().getDvContaBancaria());
        	if (bean.getContaBancaria().getAgenciaBancaria() != null) {
            	tfm.put("contaBancaria.agenciaBancaria.nrAgenciaBancaria", bean.getContaBancaria().getAgenciaBancaria().getNrAgenciaBancaria());
            	tfm.put("contaBancaria.agenciaBancaria.nmAgenciaBancaria", bean.getContaBancaria().getAgenciaBancaria().getNmAgenciaBancaria());
            	if (bean.getContaBancaria().getAgenciaBancaria().getBanco() != null) {
                	tfm.put("contaBancaria.agenciaBancaria.banco.nrBanco", bean.getContaBancaria().getAgenciaBancaria().getBanco().getNrBanco());
                	tfm.put("contaBancaria.agenciaBancaria.banco.nmBanco", bean.getContaBancaria().getAgenciaBancaria().getBanco().getNmBanco());
            	}
        	}
    	}
    	return tfm;
    }
    
    public Long storeAdiantamento(TypedFlatMap criteria) {
    	Long idMeioTransporte = criteria.getLong("idMeioTransporte");
    	if (idMeioTransporte == null)
    		throw new BusinessException("LMS-05064");

    	Long idFilial = null;
    	if(!controleCargaService.validateManutencaoEspecialCC(SessionUtils.getUsuarioLogado())){
			idFilial = criteria.getLong("filialByIdFilialOrigem.idFilial");
		}

    	return reciboFreteCarreteiroService.storeReciboFreteCarreteiroByControleCarga(	
				criteria.getLong("idControleCarga"),
				idMeioTransporte,
				criteria.getLong("idMotorista"), 
				criteria.getLong("idProprietario"),
				idFilial,
				criteria.getBigDecimal("pcAdiantamentoFrete"),
				criteria.getBigDecimal("vlBruto"),
				criteria.getString("obReciboFreteCarreteiro"),
				Boolean.TRUE,
				null,
				null);
    }


    public Map findDescricaoLocalTroca(Long idLocalTroca) {
    	LocalTroca localTroca = localTrocaService.findById(idLocalTroca);
    	Map map = new HashMap();
    	map.put("dsTroca", localTroca.getDsTroca());
    	return map;
    }

    
	public TypedFlatMap findDadosVeiculoColeta(TypedFlatMap criteria) {
		Long idMeioTransporte = criteria.getLong("idMeioTransporte");
		Long idRotaColetaEntrega = criteria.getLong("idRotaColetaEntrega");
		
		TypedFlatMap tfm = findDadosVeiculo(idMeioTransporte);
		tfm.put("tabelas", tipoTabelaColetaEntregaService.findTipoTabelaColetaEntregaWithTabelaColetaEntrega(
				SessionUtils.getFilialSessao().getIdFilial(), idMeioTransporte, idMeioTransporte));
		return tfm;
	}

	
	public TypedFlatMap findDadosVeiculoViagem(Long idMeioTransporte) {
		return findDadosVeiculo(idMeioTransporte);
	}

	
    private TypedFlatMap findDadosVeiculo(Long idMeioTransporte) {
    	controleCargaService.validateVeiculoControleCarga(idMeioTransporte, false);

    	TypedFlatMap tfm = new TypedFlatMap();
    	tfm.putAll( findProprietarioVeiculo(idMeioTransporte) );

    	TipoMeioTransporte tipoMeioTransporte = tipoMeioTransporteService.findTipoMeioTransporteCompostoByIdMeioTransporte(idMeioTransporte);
    	if (tipoMeioTransporte != null) {
    		tfm.put("idTipoMeioTransporte", tipoMeioTransporte.getIdTipoMeioTransporte());
    	}
    	return tfm;
    }

    
    /**
     * 
     * @param idMeioTransporte
     * @param mapRetorno
     */
    private TypedFlatMap findProprietarioVeiculo(Long idMeioTransporte) {
    	TypedFlatMap tfm = new TypedFlatMap();

    	Map mapResultado = meioTranspProprietarioService.findProprietarioByMeioTransporte(idMeioTransporte);
    	if (mapResultado != null) {
	    	Map mapProprietario = (Map)mapResultado.get("proprietario");
	    	if (mapProprietario != null) {
	    		tfm.put("proprietario.idProprietario", mapProprietario.get("idProprietario"));
	    		Map mapPessoa = (Map)mapProprietario.get("pessoa");
	    		if (mapPessoa != null) {
	    			tfm.put("proprietario.pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(
		    			(String)((Map)mapPessoa.get("tpIdentificacao")).get("value"), (String)mapPessoa.get("nrIdentificacao"))); 
		    		tfm.put("proprietario.pessoa.nmPessoa", mapPessoa.get("nmPessoa"));
		    	}
		    }
    	}
    	return tfm;
    }

    
    /**
     * 
     * @param criteria
     * @return
     */
	public TypedFlatMap findDadosSolicitacaoContratacao(TypedFlatMap criteria) {
		Long idSolicitacaoContratacao = criteria.getLong("idSolicitacaoContratacao");
		Long idControleCarga = criteria.getLong("idControleCarga");
		Long idRota = criteria.getLong("idRota");
		String nrIdentificacaoMeioTransp = criteria.getString("nrIdentificacaoMeioTransp");
		String nrIdentificacaoSemiReboque = criteria.getString("nrIdentificacaoSemiReboque");

		solicitacaoContratacaoService.validateExistSolicitacaoContratacao(
				SessionUtils.getFilialSessao().getIdFilial(), idSolicitacaoContratacao);
		
		ControleCarga cc = controleCargaService.findById(idControleCarga);
		
		if (idRota != null && cc.getRota() != null && idRota.compareTo(cc.getRota().getIdRota()) != 0) {
			throw new BusinessException("LMS-05120");
		}

		TypedFlatMap tfm = new TypedFlatMap();

		if ( !StringUtils.isBlank(nrIdentificacaoMeioTransp) ) {
			Map mapTransportado = new HashMap();
			mapTransportado.put("nrIdentificador", nrIdentificacaoMeioTransp);
			tfm.putAll( findMeioTransporte(mapTransportado, "Transportado") );
			tfm.putAll( findDadosVeiculo(tfm.getLong("idMeioTransporteTransportado")) );

			if (cc.getMeioTransporteByIdTransportado() != null) {
				if ( !cc.getMeioTransporteByIdTransportado().getNrIdentificador().equals(nrIdentificacaoMeioTransp) ) {
					String meioTransporteSC = tfm.getString("nrFrotaTransportado") + " " + nrIdentificacaoMeioTransp;
					String meioTransporteCC = cc.getMeioTransporteByIdTransportado().getNrFrota() + " " + cc.getMeioTransporteByIdTransportado().getNrIdentificador();
					throw new BusinessException("LMS-05121", new Object[] {meioTransporteCC, meioTransporteSC});
				}
			}
		}

		if ( !StringUtils.isBlank(nrIdentificacaoSemiReboque) ) {
			Map mapSemiRebocado = new HashMap();
			mapSemiRebocado.put("nrIdentificador", nrIdentificacaoSemiReboque);
			tfm.putAll( findMeioTransporte(mapSemiRebocado, "SemiRebocado") );

			if (cc.getMeioTransporteByIdSemiRebocado() != null) {
				if ( !cc.getMeioTransporteByIdSemiRebocado().getNrIdentificador().equals(nrIdentificacaoSemiReboque) ) {
					String meioTransporteSC = tfm.getString("nrFrotaSemiRebocado") + " " + nrIdentificacaoSemiReboque;
					String meioTransporteCC = cc.getMeioTransporteByIdSemiRebocado().getNrFrota() + " " + cc.getMeioTransporteByIdSemiRebocado().getNrIdentificador();
					throw new BusinessException("LMS-05122", new Object[] {meioTransporteCC, meioTransporteSC});
				}
			}
		}
		
		SolicitacaoContratacao sc = solicitacaoContratacaoService.findById(idSolicitacaoContratacao);
		if (sc.getVlFreteNegociado() != null) {
			tfm.put("moedaVlFreteCarreteiro", sc.getMoedaPais().getMoeda().getSiglaSimbolo());
			tfm.put("vlFreteCarreteiro", sc.getVlFreteNegociado());
		}
		return tfm;
	}
	
	
	
	/**
	 * 
	 * @param criteria
	 * @param tipo
	 */
	private TypedFlatMap findMeioTransporte(Map criteria, String tipo) {
    	List list = meioTransporteService.find(criteria);
    	if (list.isEmpty())
    		return new TypedFlatMap();

    	MeioTransporte meioTransporte = (MeioTransporte)list.get(0);
    	TypedFlatMap tfm = new TypedFlatMap();
		tfm.put("idMeioTransporte" + tipo, meioTransporte.getIdMeioTransporte());
		tfm.put("nrIdentificador" + tipo, meioTransporte.getNrIdentificador());
		tfm.put("nrFrota" + tipo, meioTransporte.getNrFrota());
		tfm.put("tpVinculo" + tipo, meioTransporte.getTpVinculo().getValue());
		tfm.put("nrRastreador" + tipo, meioTransporte.getMeioTransporteRodoviario().getNrRastreador());
		return tfm;
    }

	
	public void validateMeioTransporteSemiRebocado(Long idMeioTransporte) {
   		controleCargaService.validateSemiReboqueControleCarga(idMeioTransporte);
	}
	
		
	public Map findEventoControleCarga(TypedFlatMap criteria) {
		Map mapControleCarga = new HashMap();
		mapControleCarga.put("idControleCarga", criteria.getLong("idControleCarga"));
		
		Map map = new HashMap();
		map.put("controleCarga", mapControleCarga);
		map.put("tpEventoControleCarga", "EM");
		
		Boolean blPermiteAlteracao = Boolean.FALSE;
		
		List result = eventoControleCargaService.find(map);
		if (result.isEmpty())
			blPermiteAlteracao = Boolean.TRUE;
		
		Map mapRetorno = new HashMap();
		mapRetorno.put("blPermiteAlteracao", blPermiteAlteracao);
		
		return mapRetorno;
	}
	
	
	
	/**
     * Verifica se existe um veículo cadastrado para a rota de viagem.
     * 
     * @param criteria
     * @return True se encontrar, caso contrário, False.
     */
    public TypedFlatMap validateMeioTransporteWithRotaViagem(TypedFlatMap criteria) {
    	Boolean retorno = meioTransporteRotaViagemService.
    		validateMeioTransporteWithRotaViagem(criteria.getLong("idRotaViagem"), criteria.getLong("idMeioTransporte"));

    	TypedFlatMap tfm = new TypedFlatMap();
    	tfm.put("blRetorno", retorno);
    	return tfm;
    }
    
    
	public TypedFlatMap findFilialById(Long idFilial) {
		Filial filial = filialService.findById(idFilial);
		TypedFlatMap result = new TypedFlatMap();		
		result.put("filial.sgFilial", filial.getSgFilial());
		result.put("filial.pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
		return result;
	}
	
	
	
    /**
     * 
     * @param parameters
     */
	public TypedFlatMap store(TypedFlatMap parameters) {
		try {
			controleCargaService.storeManterControleCarga(parameters);
		} catch (BusinessException e) {
			if ("LMS-26044".equals(e.getMessageKey()) && e.getMessageArguments() != null) {
				Object[] args = e.getMessageArguments();
				controleCargaService.storeBloqueioViagemEventual(Long.parseLong(args[0].toString()), Long.parseLong(args[1].toString()), Boolean.parseBoolean(args[2].toString()));
			}
			throw e;
		}
    	
    	TypedFlatMap tfm = new TypedFlatMap();
    	if (pagtoPedagioCcService.validateExisteCartaoPedagioNaoPreenchidoByIdControleCarga(parameters.getLong("idControleCarga"))) {
    		tfm.put("blNecessitaCartaoPedagio", Boolean.TRUE);
    	}
    	return tfm;
	}


    
	
	
	
	
	/************************************************************************************
									INICIO - ControleTrecho
    ************************************************************************************/
	public List findPaginatedControleTrecho(TypedFlatMap parameters) {
		Long idControleCarga = parameters.getLong("idControleCarga");
    	ControleCarga cc = controleCargaService.findByIdInitLazyProperties(idControleCarga, false);
    	List lista = controleTrechoService.findControleTrechoByControleCarga(idControleCarga, Boolean.TRUE, null, null);

		List listRetorno = new ArrayList();
		for (Iterator iter = lista.iterator(); iter.hasNext();) {
			ControleTrecho ct = (ControleTrecho) iter.next();
			if (!ct.getBlTrechoDireto())
				continue;

			TypedFlatMap tfm = new TypedFlatMap();
			tfm.put("idControleTrecho", ct.getIdControleTrecho());
			tfm.put("filialByIdFilialOrigem.idFilial", ct.getFilialByIdFilialOrigem().getIdFilial());
			tfm.put("filialByIdFilialOrigem.sgFilial", ct.getFilialByIdFilialOrigem().getSgFilial());
			tfm.put("filialByIdFilialDestino.idFilial", ct.getFilialByIdFilialDestino().getIdFilial());
			tfm.put("filialByIdFilialDestino.sgFilial", ct.getFilialByIdFilialDestino().getSgFilial());
			tfm.put("dhSaida", ct.getDhSaida());
			tfm.put("dhChegada", ct.getDhChegada());
			tfm.put("dhPrevisaoSaida", ct.getDhPrevisaoSaida());
			tfm.put("nrDistancia", ct.getNrDistancia());
			tfm.put("hrTempoViagem", ct.getNrTempoViagem() == null ? null : JTFormatUtils.formatTime((ct.getNrTempoViagem().longValue() * 60), 2, 1));
			tfm.put("hrTempoOperacao", ct.getNrTempoOperacao() == null ? null : JTFormatUtils.formatTime((ct.getNrTempoOperacao().longValue() * 60), 2, 1));

			List listControleTrecho = controleTrechoService.findControleTrechoByControleCarga(
					idControleCarga, Boolean.TRUE, ct.getFilialByIdFilialDestino().getIdFilial(), null);

			if (!listControleTrecho.isEmpty()) {
				ControleTrecho controleTrecho = (ControleTrecho) listControleTrecho.get(0);
				if (controleTrecho.getDhSaida() != null && controleTrecho.getDhChegada() != null) {
					tfm.put("hrTempoOperacaoRealizado", JTFormatUtils.formatTime(
							(controleTrecho.getDhSaida().getMillis() - ct.getDhChegada().getMillis()) / 1000, 2, 1));
				}
			} else
				tfm.put("hrTempoOperacaoRealizado", getHrTempoOperacaoRealizado(idControleCarga, 
						ct.getDhChegada(), cc.getFilialByIdFilialDestino().getIdFilial()));

			listRetorno.add(tfm);
		}
		return listRetorno;
	}


	/**
	 * 
	 * @param idControleCarga
	 * @param dhChegada
	 * @return
	 */
	private String getHrTempoOperacaoRealizado(Long idControleCarga,
			DateTime dhChegada, Long idFilialDestino) {
		List listaEventos = eventoControleCargaService
				.findEventoControleCargaByIdFilialByIdControleCargaByTpEvento(idFilialDestino, idControleCarga, "FD");

		if (!listaEventos.isEmpty()) {
			EventoControleCarga ecc = (EventoControleCarga) listaEventos.get(0);
			if (ecc.getDhEvento() != null && dhChegada != null) {
				return JTFormatUtils.formatTime((ecc.getDhEvento().getMillis() - dhChegada.getMillis()) / 1000, 2, 1);
			}
		}
		return null;
	}

	
	public void validateExistenciaInsercaoManualTrecho(TypedFlatMap parameters) {
		filialRotaCcService.validateExistenciaInsercaoManualByControleCarga(parameters.getLong("idControleCarga"));
	}


	public TypedFlatMap findDadosFilialRotaCc(TypedFlatMap criteria) {
		Long idFilialNova = criteria.getLong("idFilialNova");
		Long idFilialAnterior = criteria.getLong("idFilialAnterior");
		Long idControleCarga = criteria.getLong("idControleCarga");
		Long idFilialRotaCcAnterior = criteria.getLong("idFilialRotaCcAnterior");
		BigDecimal vlNrTempoDistanciaPadrao = (BigDecimal)parametroGeralService.findConteudoByNomeParametro("RELACAO_TEMPO_DISTANCIA_PADRAO", false);

		Filial filialAnterior = filialService.findById(idFilialAnterior);
		Filial filialNova = filialService.findById(idFilialNova);

		TypedFlatMap mapRetorno = new TypedFlatMap();
		FilialRotaCc filialRotaCcPosterior = filialRotaCcService.findFilialPosteriorByIdFilialRotaCc(idFilialRotaCcAnterior);
		if (filialRotaCcPosterior != null) {
			mapRetorno.put("filialPosteriorRota.idFilial", filialRotaCcPosterior.getFilial().getIdFilial());
			mapRetorno.put("filialPosteriorRota.sgFilial", filialRotaCcPosterior.getFilial().getSgFilial());
			mapRetorno.put("filialPosteriorRota.pessoa.nmFantasia", filialRotaCcPosterior.getFilial().getPessoa().getNmFantasia());
			mapRetorno.put("filialPosteriorRota.nrOrdem", filialRotaCcPosterior.getNrOrdem());
			mapRetorno.put("nrTempoViagem2", findNrDistancia(vlNrTempoDistanciaPadrao, filialNova, filialRotaCcPosterior.getFilial()));
		}

		List listControleTrecho = controleTrechoService.
				findControleTrechoByControleCarga(idControleCarga, Boolean.TRUE, idFilialAnterior, null);

		if (!listControleTrecho.isEmpty()) {
			mapRetorno.put("dhPrevisaoSaida", ((ControleTrecho)listControleTrecho.get(0)).getDhPrevisaoSaida());
		}

		mapRetorno.put("nrTempoViagem1", findNrDistancia(vlNrTempoDistanciaPadrao, filialAnterior, filialNova));
		return mapRetorno;
	}


	/**
	 * 
	 * @param idFilialAnterior
	 * @param idFilialDestino
	 * @return
	 */
	private String findNrDistancia(BigDecimal vlNrTempoDistanciaPadrao, Filial filialAnterior, Filial filialDestino) {
		TypedFlatMap tfm = controleTrechoService.findNrDistanciaAndNrTempoViagem(
				filialAnterior, filialDestino, vlNrTempoDistanciaPadrao);

		Long nrTempoViagem = Long.valueOf(tfm.getInteger("nrTempoViagem").intValue());
		return FormatUtils.converteMinutosParaHorasMinutos(nrTempoViagem, FormatUtils.ESCALA_HHH);
	}


	/**
	 * 
	 * @param criteria
	 */
	public void validateDadosDhSaida1(TypedFlatMap criteria) {
		List listControleTrecho = controleTrechoService.findControleTrechoByControleCarga(
				criteria.getLong("idControleCarga"), Boolean.TRUE, null, criteria.getLong("idFilialAnterior"));

		if (!listControleTrecho.isEmpty()) {
			DateTime dhPrevisaoSaida =  ((ControleTrecho)listControleTrecho.get(0)).getDhPrevisaoSaida();
			DateTime dhSaida1 = criteria.getDateTime("dhSaida1");
			if (dhSaida1.compareTo(dhPrevisaoSaida) <= 0)
				throw new BusinessException("LMS-05136");
		}
	}

	
	/**
	 * 
	 * @param criteria
	 */
	public void validateDadosDhSaida2(TypedFlatMap criteria) {
		DateTime dhSaida1 = criteria.getDateTime("dhSaida1");
		DateTime dhSaida2 = criteria.getDateTime("dhSaida2");
		if (dhSaida2.compareTo(dhSaida1) <= 0)
			throw new BusinessException("LMS-05133");
		
		List listControleTrecho = controleTrechoService.findControleTrechoByControleCarga(
				criteria.getLong("idControleCarga"), Boolean.TRUE, criteria.getLong("idFilialPosterior"), null);

		if (!listControleTrecho.isEmpty()) {
			DateTime dhPrevisaoSaida =  ((ControleTrecho)listControleTrecho.get(0)).getDhPrevisaoSaida();
			if (dhSaida2.compareTo(dhPrevisaoSaida) >= 0)
				throw new BusinessException("LMS-05134");
		}
	}
	/************************************************************************************
									FIM - ControleTrecho
	************************************************************************************/

	

	
	/************************************************************************************
								INICIO - FILIAL ROTA CC
    ************************************************************************************/
	public List findFilialRotaCc(TypedFlatMap parameters) {
		Boolean blInseridoManualmente = parameters.getBoolean("blInseridoManualmente");
		Boolean blInclusaoTrecho = parameters.getBoolean("flagInclusaoTrecho");
		Long idControleCarga = parameters.getLong("idControleCarga");
		List lista = filialRotaCcService.findFilialRotaByIdControleCarga(idControleCarga, blInseridoManualmente, null);

		List retorno = new ArrayList();
		for (Iterator iter = lista.iterator(); iter.hasNext();) {
			FilialRotaCc filialRotaCc = (FilialRotaCc)iter.next();
			if (blInseridoManualmente != null && filialRotaCc.getBlInseridoManualmente().compareTo(blInseridoManualmente) != 0)
				continue;
			
			if (blInclusaoTrecho != null && blInclusaoTrecho && !iter.hasNext())
				continue;

			TypedFlatMap mapRetorno = new TypedFlatMap();
			mapRetorno.put("idFilialRotaCc", filialRotaCc.getIdFilialRotaCc());
			mapRetorno.put("filial.idFilial", filialRotaCc.getFilial().getIdFilial());
			mapRetorno.put("filial.sgFilial", filialRotaCc.getFilial().getSgFilial());
			mapRetorno.put("filial.sgFilialConcatenado", filialRotaCc.getFilial().getSgFilial() + " - " + filialRotaCc.getFilial().getPessoa().getNmFantasia());
			mapRetorno.put("nrOrdem", filialRotaCc.getNrOrdem());
			retorno.add(mapRetorno);
		}
		return retorno;
	}
	
	/**
	 * 
	 * @param parameters
	 * @return
	 */
	public TypedFlatMap storeIncluirTrecho(TypedFlatMap parameters) {
		Integer nrTempoViagem1 = Integer.valueOf(
			FormatUtils.converteHorasMinutosParaMinutos(parameters.getString("nrTempoViagem1"),FormatUtils.ESCALA_HHH).intValue());
		DateTime dhPrevisaoSaida1 = parameters.getDateTime("dhSaida1");
		DateTime dhPrevisaoChegada1 = dhPrevisaoSaida1.plusMinutes(nrTempoViagem1.intValue());

		DateTime dhPrevisaoSaida2 = parameters.getDateTime("dhSaida2");
		Integer nrTempoViagem2 = null;
		DateTime dhPrevisaoChegada2 = null;
		if (dhPrevisaoSaida2 != null) {
			nrTempoViagem2 = Integer.valueOf(
				FormatUtils.converteHorasMinutosParaMinutos(parameters.getString("nrTempoViagem2"),FormatUtils.ESCALA_HHH).intValue());
			dhPrevisaoChegada2 = dhPrevisaoSaida2.plusMinutes(nrTempoViagem2.intValue());
		}

		Long idControleCarga = parameters.getLong("idControleCarga");
		
		filialRotaCcService.storeInclusaoFilialRota(idControleCarga,
													parameters.getLong("filialAnteriorRota.idFilial"),
													parameters.getLong("filial.idFilial"),
													parameters.getLong("filialPosteriorRota.idFilial"),
													parameters.getInteger("filialAnteriorRota.nrOrdem"),
													dhPrevisaoSaida1, dhPrevisaoChegada1, nrTempoViagem1, 
										    		dhPrevisaoSaida2, dhPrevisaoChegada2, nrTempoViagem2);
		
		TypedFlatMap tfm = new TypedFlatMap();
    	if (pagtoPedagioCcService.validateExisteCartaoPedagioNaoPreenchidoByIdControleCarga(parameters.getLong("idControleCarga"))) {
    		tfm.put("blNecessitaCartaoPedagio", Boolean.TRUE);
    	}
    	
    	ControleCarga cc = controleCargaService.findById(idControleCarga);
    	tfm.put("hrTempoViagem", FormatUtils.converteMinutosParaHorasMinutos(Long.valueOf(cc.getNrTempoViagem()), FormatUtils.ESCALA_HHH));
    	return tfm;
    }

	/**
	 * 
	 * @param parameters
	 * @return
	 */
	public TypedFlatMap removeFilialRota(TypedFlatMap parameters) {
		Long idControleCarga = parameters.getLong("idControleCarga");
		Long idFilial = parameters.getLong("filial.idFilial");
		filialRotaCcService.removeFilialRota(idControleCarga, idFilial);
		
		TypedFlatMap tfm = new TypedFlatMap();
    	if (pagtoPedagioCcService.validateExisteCartaoPedagioNaoPreenchidoByIdControleCarga(parameters.getLong("idControleCarga"))) {
    		tfm.put("blNecessitaCartaoPedagio", Boolean.TRUE);
    	}
    	
    	ControleCarga cc = controleCargaService.findByIdInitLazyProperties(idControleCarga, false);
    	tfm.put("hrTempoViagem", FormatUtils.converteMinutosParaHorasMinutos(Long.valueOf(cc.getNrTempoViagem()), FormatUtils.ESCALA_HHH));
    	return tfm;
	}

	
    /**
     * 
     * @param criteria
     */
    public void validateFilialNaRota(TypedFlatMap criteria) {
    	Long idControleCarga = criteria.getLong("idControleCarga");
    	Long idFilial = criteria.getLong("idFilial");
    	List lista = filialRotaCcService.findFilialRotaByIdControleCarga(idControleCarga, null, idFilial);
		if (!lista.isEmpty())
			throw new BusinessException("LMS-05116");
    }
    
    
    
	public List findPaginatedControleTrechoByFilialRotaCc(TypedFlatMap parameters) {
		Byte nrOrdemPosterior = parameters.getByte("nrOrdemPosterior");
		if (nrOrdemPosterior == null)
			return Collections.EMPTY_LIST;

		// O número da ordem está sendo incrementado, pois o número recebido por parâmetro se refere a ordem 
		// antes da inclusão do novo trecho.
		nrOrdemPosterior = Byte.valueOf( Long.toString(nrOrdemPosterior.longValue()) );
		
		Long idControleCarga = parameters.getLong("idControleCarga");
		List listaIdFiliais = getFiliaisRotaByIdControleCargaByNrOrdem(idControleCarga, nrOrdemPosterior);
		List listaControleTrecho = controleTrechoService.findControleTrechoByControleCarga(idControleCarga, Boolean.TRUE, null, null);
		
		List listRetorno = new ArrayList();
		for (Iterator iter = listaControleTrecho.iterator(); iter.hasNext();) {
			ControleTrecho ct = (ControleTrecho) iter.next();
			if (!listaIdFiliais.contains(ct.getFilialByIdFilialOrigem().getIdFilial()))
				continue;

			TypedFlatMap tfm = new TypedFlatMap();
			tfm.put("idControleTrecho", ct.getIdControleTrecho());
			tfm.put("filialByIdFilialOrigem.idFilial", ct.getFilialByIdFilialOrigem().getIdFilial());
			tfm.put("filialByIdFilialOrigem.sgFilial", ct.getFilialByIdFilialOrigem().getSgFilial());
			tfm.put("filialByIdFilialDestino.idFilial", ct.getFilialByIdFilialDestino().getIdFilial());
			tfm.put("filialByIdFilialDestino.sgFilial", ct.getFilialByIdFilialDestino().getSgFilial());
			tfm.put("dhPrevisaoSaida", ct.getDhPrevisaoSaida());
			tfm.put("hrTempoViagem", ct.getNrTempoViagem() == null ? null : JTFormatUtils.formatTime((ct.getNrTempoViagem().longValue() * 60), 2, 1));
			listRetorno.add(tfm);
		}
		return listRetorno;
	}

	
	/**
	 * 
	 * @param idControleCarga
	 * @param nrOrdemPosterior
	 * @return
	 */
	private List getFiliaisRotaByIdControleCargaByNrOrdem(Long idControleCarga, Byte nrOrdemPosterior) {
		List listaIdFiliais = new ArrayList();
		List result = filialRotaCcService.
				findFilialRotaCcWithNrOrdem(idControleCarga, Integer.valueOf(nrOrdemPosterior.intValue()), null, Boolean.TRUE);

    	for (Iterator iter = result.iterator(); iter.hasNext();) {
    		FilialRotaCc frCc = (FilialRotaCc)iter.next();
   			listaIdFiliais.add(frCc.getFilial().getIdFilial());
    	}
		return listaIdFiliais;
	}
	
	
	
	public void storeControleTrechoByFilialRotaCc(TypedFlatMap parameters) {
    	List listaTrechos = parameters.getList("controleTrechos");
		if (listaTrechos != null) {
			for (Iterator iterTrechos = listaTrechos.iterator(); iterTrechos.hasNext();) {
				TypedFlatMap map = (TypedFlatMap)iterTrechos.next();

				Long newIdControleTrecho = map.getLong("id");
				DateTime newDhPrevisaoSaida = map.getDateTime("dhPrevisaoSaida");

				ControleTrecho ct = controleTrechoService.findById(newIdControleTrecho);
				if (ct.getDhPrevisaoSaida().compareTo(newDhPrevisaoSaida) != 0) {
					ct.setDhPrevisaoSaida(newDhPrevisaoSaida);
					controleTrechoService.store(ct);
				}
			}
		}
	}
    /************************************************************************************
	 								FIM - FILIAL ROTA CC
	************************************************************************************/


	
	public List findPaginatedPagtoPedagioCc(TypedFlatMap parameters) {
    	Map mapValoresOperadora = pagtoPedagioCcService.findOperadoraCartaoPedagio();
    	List listaValor = (List)mapValoresOperadora.get("listaValor");
    	List listaDescricao = (List)mapValoresOperadora.get("listaDescricao");

    	List result = pagtoPedagioCcService.findPagtoPedagioCcByIdControleCarga(parameters.getLong("idControleCarga"));
    	return populateListaPagtoPedagioCc(result, listaValor, listaDescricao);
    }


	private List populateListaPagtoPedagioCc(List listaPagtoPedagioCc, List listaValor, List listaDescricao) {
		List listaRetorno = new ArrayList();
		for (Iterator iter = listaPagtoPedagioCc.iterator(); iter.hasNext();) {
    		PagtoPedagioCc pagtoPedagioCc = (PagtoPedagioCc) iter.next();
    		
			TypedFlatMap map = new TypedFlatMap();
			map.put("idPagtoPedagioCc", pagtoPedagioCc.getIdPagtoPedagioCc());
			map.put("vlPedagio", pagtoPedagioCc.getVlPedagio());

			map.put("controleCarga.idControleCarga", pagtoPedagioCc.getControleCarga().getIdControleCarga());

			map.put("moeda.idMoeda", pagtoPedagioCc.getMoeda().getIdMoeda());
			map.put("moeda.sgMoeda", pagtoPedagioCc.getMoeda().getSgMoeda());
			map.put("moeda.dsSimbolo", pagtoPedagioCc.getMoeda().getDsSimbolo());
			map.put("tipoPagamPostoPassagem_idTipoPagamPostoPassagem", pagtoPedagioCc.getTipoPagamPostoPassagem().getIdTipoPagamPostoPassagem());
			map.put("tipoPagamPostoPassagem.idTipoPagamPostoPassagem", pagtoPedagioCc.getTipoPagamPostoPassagem().getIdTipoPagamPostoPassagem());
			map.put("tipoPagamPostoPassagem.dsTipoPagamPostoPassagem", pagtoPedagioCc.getTipoPagamPostoPassagem().getDsTipoPagamPostoPassagem());
			
			if (pagtoPedagioCc.getOperadoraCartaoPedagio() != null) {
				map.put("operadoraCartaoPedagio_idOperadoraCartaoPedagio", pagtoPedagioCc.getOperadoraCartaoPedagio().getIdOperadoraCartaoPedagio());
			}
			if (pagtoPedagioCc.getCartaoPedagio() != null) {
				map.put("cartaoPedagio_idCartaoPedagio", pagtoPedagioCc.getCartaoPedagio().getIdCartaoPedagio());
				map.put("cartaoPedagio_nrCartao", pagtoPedagioCc.getCartaoPedagio().getNrCartao());
			}
			map.put("pagtoPedagioCc_idPagtoPedagioCc", pagtoPedagioCc.getIdPagtoPedagioCc());
			map.put("tipoPagamPostoPassagem_blCartaoPedagio", pagtoPedagioCc.getTipoPagamPostoPassagem().getBlCartaoPedagio());

			map.put("valores", listaValor);
			map.put("descricoes", listaDescricao);
			listaRetorno.add(map);
    	}
		return listaRetorno;
	}


	public List findPaginatedPostoPassagemCc(TypedFlatMap parameters) {
		Long idControleCarga = parameters.getLong("idControleCarga");
		String tpControleCarga = parameters.getString("tpControleCarga");
    	List result = postoPassagemCcService.findPostoPassagemCcByIdControleCarga(idControleCarga);
    	List retorno = new ArrayList();
		for (Iterator iter = result.iterator(); iter.hasNext();) {
			PostoPassagemCc postoPassagemCc = (PostoPassagemCc) iter.next();

			TypedFlatMap map = new TypedFlatMap();
			map.put("idPostoPassagemCc", postoPassagemCc.getIdPostoPassagemCc());
			map.put("vlPagar", postoPassagemCc.getVlPagar());
			map.put("controleCarga.idControleCarga", idControleCarga);
			map.put("postoPassagem.idPostoPassagem", postoPassagemCc.getPostoPassagem().getIdPostoPassagem());
			map.put("postoPassagem.nrKm", postoPassagemCc.getPostoPassagem().getNrKm());
			map.put("postoPassagem.tpPostoPassagem", postoPassagemCc.getPostoPassagem().getTpPostoPassagem());
			map.put("postoPassagem.municipio.nmMunicipio", postoPassagemCc.getPostoPassagem().getMunicipio().getNmMunicipio());
			if (postoPassagemCc.getPostoPassagem().getRodovia() != null) {
				map.put("postoPassagem.rodovia.sgRodovia", postoPassagemCc.getPostoPassagem().getRodovia().getSgRodovia());
			}
			map.put("moeda.idMoeda", postoPassagemCc.getMoeda().getIdMoeda());
			map.put("moeda.sgMoeda", postoPassagemCc.getMoeda().getSgMoeda());
			map.put("moeda.dsSimbolo", postoPassagemCc.getMoeda().getDsSimbolo());
			map.put("tipoPagamPostoPassagem_idTipoPagamPostoPassagem", postoPassagemCc.getTipoPagamPostoPassagem().getIdTipoPagamPostoPassagem());
			map.put("tipoPagamPostoPassagem_dsTipoPagamPostoPassagem", postoPassagemCc.getTipoPagamPostoPassagem().getDsTipoPagamPostoPassagem());
			map.put("tipoPagamPostoPassagem_blCartaoPedagio", postoPassagemCc.getTipoPagamPostoPassagem().getBlCartaoPedagio());
			map.put("postoPassagemCc_idPostoPassagemCc", postoPassagemCc.getIdPostoPassagemCc());

	    	Map mapValoresTipoPagamento = postoPassagemCcService.
	    			findFormasPagamentoPostoPassagemCc(postoPassagemCc.getPostoPassagem().getIdPostoPassagem(), tpControleCarga);

	    	map.put("valores", mapValoresTipoPagamento.get("listaValor"));
	    	map.put("descricoes", mapValoresTipoPagamento.get("listaDescricao"));

	    	retorno.add(map);
		}
		return retorno;
    }


    public Map findCartaoPedagio(TypedFlatMap criteria) {
    	Map retorno = new HashMap();
    	List resultado = cartaoPedagioService.findCartaoPedagioByOperadora(
    			criteria.getLong("idOperadoraCartaoPedagio"), criteria.getLong("nrCartao"), Boolean.FALSE);

    	if (!resultado.isEmpty()) {
    		CartaoPedagio cartaoPedagio = (CartaoPedagio)resultado.get(0);
    		cartaoPedagioService.validateDtValidadeByIdCartaoPedagio(cartaoPedagio.getIdCartaoPedagio());
    		retorno.put("idCartaoPedagio", cartaoPedagio.getIdCartaoPedagio());
    	}
		return retorno;
    }


    public void storePostosPassagem(TypedFlatMap map) {
		controleCargaService.storePostosPassagem(map.getLong("idControleCarga"), map.getList("pagamentos"), map.getList("postos"));
	}


	/**
	 * Método responsável por alterar os dados da grid pagtoPedagio de acordo com a grid postosPassagem. É chamado quando algum
	 * valor da combo forma de pagamento da grid postosPassagem for alterado.
	 * 
	 * @param parameters
	 */
	public List generatePagtoPedagioCcByPostosPassagem(TypedFlatMap parameters) {
		ControleCarga controleCarga = new ControleCarga();
		controleCarga.setIdControleCarga(parameters.getLong("idControleCarga"));

		List listaPostos = parameters.getList("postos");
		Map mapVerificaPostoPassagem = new HashMap();

    	List result = new ArrayList();
    	for (Iterator iter = listaPostos.iterator(); iter.hasNext();) {
			TypedFlatMap mapPostoPassagem = (TypedFlatMap) iter.next();
			PostoPassagemCc ppCc = postoPassagemCcService.findById( mapPostoPassagem.getLong("postoPassagemCc_idPostoPassagemCc") );
			Long idTipoPagamPostoPassagem = mapPostoPassagem.getLong("tipoPagamPostoPassagem_idTipoPagamPostoPassagem");
			String key = idTipoPagamPostoPassagem.toString() + ppCc.getMoeda().getIdMoeda().toString();

			if (!mapVerificaPostoPassagem.containsKey(key)) {
				TipoPagamPostoPassagem tppp = tipoPagamPostoPassagemService.findById(idTipoPagamPostoPassagem);
				PagtoPedagioCc pagtoPedagioCc = new PagtoPedagioCc();
				pagtoPedagioCc.setIdPagtoPedagioCc(null);
				pagtoPedagioCc.setControleCarga(controleCarga);
				pagtoPedagioCc.setCartaoPedagio(null);
				pagtoPedagioCc.setMoeda(ppCc.getMoeda());
				pagtoPedagioCc.setOperadoraCartaoPedagio(null);
				pagtoPedagioCc.setTipoPagamPostoPassagem(tppp);
				pagtoPedagioCc.setVersao(null);
				pagtoPedagioCc.setVlPedagio(ppCc.getVlPagar());
				mapVerificaPostoPassagem.put(key, pagtoPedagioCc);
				result.add(pagtoPedagioCc);
			}
			else {
				PagtoPedagioCc pagtoPedagioCc = (PagtoPedagioCc)mapVerificaPostoPassagem.get(key);
				pagtoPedagioCc.setVlPedagio( pagtoPedagioCc.getVlPedagio().add(ppCc.getVlPagar()) );
			}
    	}
    	
    	List listaValor = Collections.EMPTY_LIST;
    	List listaDescricao = Collections.EMPTY_LIST;
    	if (!result.isEmpty()) {
        	Map mapValoresOperadora = pagtoPedagioCcService.findOperadoraCartaoPedagio();
        	listaValor = (List)mapValoresOperadora.get("listaValor");
        	listaDescricao = (List)mapValoresOperadora.get("listaDescricao");
        	Collections.sort(result, new Comparator() {
        		public int compare(Object obj1, Object obj2) {
        			PagtoPedagioCc ppCc1 = (PagtoPedagioCc)obj1;
        			PagtoPedagioCc ppCc2 = (PagtoPedagioCc)obj2;
        			return ppCc1.getTipoPagamPostoPassagem().getDsTipoPagamPostoPassagem().toString().compareTo(ppCc2.getTipoPagamPostoPassagem().getDsTipoPagamPostoPassagem().toString());
        		}
        	});
        	return populateListaPagtoPedagioCc(result, listaValor, listaDescricao);
    	}
    	return Collections.EMPTY_LIST;
	}
}