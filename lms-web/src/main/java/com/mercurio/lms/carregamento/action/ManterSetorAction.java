package com.mercurio.lms.carregamento.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Setor;
import com.mercurio.lms.configuracoes.model.service.SetorService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.carregamento.manterSetorAction"
 */

public class ManterSetorAction {

	private SetorService setorService;
	
	public void removeById(java.lang.Long id) {
		setorService.removeById(id);
    }

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	setorService.removeByIds(ids);
    }

    public TypedFlatMap findByIdCustom(java.lang.Long id) {
    	Setor setor = setorService.findById(id);
    	TypedFlatMap tfm = new TypedFlatMap();
    	tfm.put("idSetor", setor.getIdSetor());    	
    	tfm.put("dsSetor", setor.getDsSetor());
    	tfm.put("cdSetorRh", setor.getCdSetorRh());
    	tfm.put("tpSituacao", setor.getTpSituacao().getValue());
    	return tfm;
    }

    public Serializable storeCustom(TypedFlatMap tfm) {
    	Setor setor = new Setor();
    	setor.setIdSetor(tfm.getLong("idSetor"));    	
    	setor.setDsSetor(tfm.getVarcharI18n("dsSetor"));
    	setor.setCdSetorRh(tfm.getShort("cdSetorRh"));
    	setor.setTpSituacao(tfm.getDomainValue("tpSituacao"));
        return setorService.store(setor);
    }
    
	public Integer getRowCountCustom(Map criteria) {		
		return setorService.getRowCount(criteria);
	}

	public ResultSetPage findPaginatedCustom(Map criteria) {		
		List list = new ArrayList();
		criteria.put("_order", "dsSetor");
		ResultSetPage rsp = setorService.findPaginated(criteria);
		for (Iterator it = rsp.getList().iterator(); it.hasNext(); ) {
			Setor setor = (Setor)it.next();
			Map map = new HashMap(4);
			map.put("idSetor", setor.getIdSetor());			
			map.put("dsSetor", setor.getDsSetor());
			map.put("cdSetorRh", setor.getCdSetorRh());
			map.put("tpSituacao", setor.getTpSituacao().getDescription().getValue());
			list.add(map);	
		}
		rsp.setList(list);
		return rsp;
	}

	public void setSetorService(SetorService setorService) {
		this.setorService = setorService;
	}
}