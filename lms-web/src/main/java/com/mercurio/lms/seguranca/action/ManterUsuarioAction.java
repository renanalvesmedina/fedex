package com.mercurio.lms.seguranca.action;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.service.UsuarioLMSService;
import com.mercurio.lms.configuracoes.model.service.UsuarioService;
import com.mercurio.lms.vendas.model.service.ClienteService;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.seguranca.manterUsuarioAction"
 */
public class ManterUsuarioAction extends CrudAction {
	
	private UsuarioService usuarioService;
	private ClienteService clienteService;
	
	public void setService(UsuarioLMSService usuarioLMSService) {
		this.defaultService = usuarioLMSService; 
	}
	
	
	public Object findById(Long id) {
		return super.findById(id);
	}

	public ResultSetPage findPaginated(Map criteria) {
		return super.findPaginated(criteria);
	}
	
	public Integer getRowCount(Map criteria) {
		return super.getRowCount(criteria);
	}

	public void removeById(Long id) {
		super.removeById(id);
	}

	/**
	*
	**/
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		super.removeByIds(ids);
	}
	
	public Serializable store(TypedFlatMap map) {
		return super.store(null);
	}

	
	public List findLookupUsuarioADSM(Map map) {
		return null;
	}

	
	public List findLookupCliente(Map clienteServ) {
		return this.clienteService.findLookup(clienteServ); 
	}



	
	
	public ClienteService getClienteService() {
		return clienteService;
	}
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}

	/**
	 * Retorna os dados do usuário logado para atualizar o topo da página do LMS.
	 * 
	 * @return Map com as chaves: nomeEmpresa, nomeUsuario, nomeFilial
	 */
	public Map findDadosUsuarioLogado() {

		return this.usuarioService.findDadosUsuarioLogado();
	}
	
	/**
	 * Retorna os dados do usuário logado para serem utilizados no SWT.
	 * 
	 * @return Map com dados da: empresa, usuario e filial logada
	 */
	public Map findDadosUsuarioLogadoSWT() {
		return this.usuarioService.findDadosUsuarioLogadoSWT();
	}
	
	// metodo obrigatório, nao remover
	public void setUsuarioCliente(UsuarioService usuarioService) {
		this.usuarioService = usuarioService;
	}
	
}