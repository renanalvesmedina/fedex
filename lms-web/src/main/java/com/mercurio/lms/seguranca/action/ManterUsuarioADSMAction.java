package com.mercurio.lms.seguranca.action;

import java.io.Serializable;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.pojo.UsuarioADSM;
import com.mercurio.adsm.framework.model.service.UsuarioADSMService;
import com.mercurio.adsm.framework.session.SessionContext;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.service.UsuarioLMSService;
import com.mercurio.lms.util.JTDateTimeUtils;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;

/**
 * Generated by: ADSM ActionGenerator
 * 
 * Não inserir documentação após ou remover a tag do XDoclet a seguir. O valor
 * do <code>id</code> informado abaixo deve ser utilizado para referenciar
 * este serviço.
 * 
 * @spring.bean id="lms.seguranca.manterUsuarioADSMAction"
 */
public class ManterUsuarioADSMAction extends CrudAction {

	private UsuarioADSMService usuarioADSMService;

	private UsuarioLMSService usuarioLMSService;
	
	private UsuarioADSMService getService() {
		return usuarioADSMService;
	}

	public void setService(UsuarioADSMService usuario) {
		this.usuarioADSMService = usuario;
	}

	public Map findById(java.lang.Long id) {
		Map result = getService().findById(id);

		if (result == null || result.size() == 0)
			return null;
		else {

			HashMap newMap = new HashMap();
			newMap.put("idUsuario", result.get("idUsuario"));
			newMap.put("nrMatricula", result.get("nrMatricula") );
			newMap.put("blAtivo", result.get("blAtivo"));
			newMap.put("blAtivoVerify", result.get("blAtivo"));			
			newMap.put("blAdministrador", result.get("blAdministrador"));
			newMap.put("login", result.get("login"));
			newMap.put("nmUsuario", result.get("nmUsuario"));
			newMap.put("tpCategoriaUsuario", ((DomainValue) result
					.get("tpCategoriaUsuario")).getValue());
			newMap.put("dsEmail", result.get("dsEmail"));
			newMap.put("nrDdd", result.get("nrDdd"));
			newMap.put("nrFone", result.get("nrFone"));
			newMap.put( "locale", ((Locale)result.get("locale")).toString() );				
			newMap.put("dsSenhaTemporaria", result.get("dsSenhaTemporaria"));
			newMap.put("dsSenhaVerify", result.get("dsSenhaTemporaria"));
			newMap.put("dsSenha", result.get("dsSenha"));
			newMap.put("dtUltimaTrocaSenha", result.get("dtUltimaTrocaSenha"));
			newMap.put("dhCadastro", result.get("dhCadastro"));				
			
			return newMap;
		}
	}

	public ResultSetPage findPaginatedUsuarioAdsm(TypedFlatMap criteria) {

		return getUsuarioLMSService().findPaginatedUsuarioADSM(normalizeFindPaginated(criteria));

	}

	public Integer getRowCountUsuarioAdsm(TypedFlatMap criteria) {
		return getUsuarioLMSService().getRowCountUsuarioADSM(normalizeFindPaginated(criteria));
	}

	private TypedFlatMap normalizeFindPaginated(TypedFlatMap criteria) {
		TypedFlatMap newCriteria = new TypedFlatMap();

		newCriteria.put("nrMatricula", criteria.get("nrMatricula"));
		newCriteria.put("blAtivo", criteria.getBoolean("blAtivo", null));
		newCriteria.put("login", criteria.getString("login"));
		newCriteria.put("nmUsuario", criteria.getString("nmUsuario"));
		newCriteria.put("tpCategoriaUsuario", criteria.getString("tpCategoriaUsuario"));
		newCriteria.put("locale", criteria.getLocale("locale"));		
		newCriteria.put("_pageSize", criteria.getString("_pageSize"));
		newCriteria.put("_currentPage", criteria.getString("_currentPage"));
		newCriteria.put("_order", criteria.getString("_order"));
		return newCriteria;
	}

	/**
	 * Remove o objeto correspondente ao id recebido por parametro.
	 * 
	 * @author juliosce
	 * @param id
	 */
	public void removeById(Long id) {
		getService().removeById(id);
	}

	/**
	 * Remove um ou mais objetos ao mesmo tempo.
	 * 
	 * @author juliosce
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		getService().removeByIds(ids);
	}

	/**
	 * Persite o objeto na base de dados, este método faz insert ou update, conforme o estado do objeto.
	 * 
	 * @author juliosce
	 * @param map
	 * @return Serializable
	 */
	public Serializable store(TypedFlatMap map) {

		/* Cria o usuario. */
		UsuarioADSM ua = new UsuarioADSM();

		ua.setIdUsuario(map.getLong("idUsuario") );
		ua.setNrMatricula( map.getString("nrMatricula") );
		ua.setNmUsuario( map.getString("nmUsuario") );
		ua.setBlAtivo( map.getBoolean("blAtivo") );
		ua.setAdminSistema( map.getBoolean("blAdministrador") );
		ua.setLogin(map.getString("login") );
		ua.setNmUsuario( map.getString("nmUsuario") );
		ua.setTpCategoriaUsuario( new DomainValue(
				map.getString("tpCategoriaUsuario")) );
		ua.setDsEmail( map.getString("dsEmail") );
		ua.setNrDdd( map.getString("nrDdd") );
		ua.setNrFone( map.getString("nrFone") );
		ua.setLocale( new Locale(map.getString("locale")) );
		ua.setDsSenhaTemporaria( map.getString("dsSenhaTemporaria") );
		ua.setDsSenhaVerify( map.getString("dsSenhaVerify") );
		ua.setDtUltimaTrocaSenha( map.getYearMonthDay("dtUltimaTrocaSenha") );
		ua.setDhCadastro( JTDateTimeUtils.getDataHoraAtual() );		
		ua.setDsSenha( map.getString("dsSenha") );
		ua.setUrlSistema( map.getString("urlSistema") );
		ua.setUsuarioCadastro((UsuarioADSM) SessionContext.getUser() );
		
		
		/* Persiste o usuario adsm */
		return getService().store(ua);
	}

	/**
	 * Carrega da sessão o login e nome do usuário logado. Retorna um objeto
	 * TypedFlatMap com as informações setadas à interface.
	 * 
	 * @author juliosce
	 * @return TypedFlatMap
	 */
	public TypedFlatMap carregaDadosSessao( TypedFlatMap map) {
		return getService().findCarregaDadosSessao( map );
	}

	/**
	 * @return Returns the usuarioLMSService.
	 */
	public UsuarioLMSService getUsuarioLMSService() {
		return usuarioLMSService;
	}

	/**
	 * @param usuarioLMSService The usuarioLMSService to set.
	 */
	public void setUsuarioLMSService(UsuarioLMSService usuarioLMSService) {
		this.usuarioLMSService = usuarioLMSService;
	}

}