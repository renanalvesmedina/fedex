
package com.mercurio.lms.seguranca.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.session.SessionContext;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.EmpresaUsuario;
import com.mercurio.lms.configuracoes.model.FilialUsuario;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.configuracoes.model.RegionalUsuario;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.configuracoes.model.service.EmpresaUsuarioService;
import com.mercurio.lms.configuracoes.model.service.FilialUsuarioService;
import com.mercurio.lms.configuracoes.model.service.RegionalUsuarioService;
import com.mercurio.lms.configuracoes.model.service.UsuarioLMSService;
import com.mercurio.lms.configuracoes.util.MapUtilsPlus;
import com.mercurio.lms.municipios.model.Empresa;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.Regional;
import com.mercurio.lms.municipios.model.service.EmpresaService;
import com.mercurio.lms.municipios.model.service.RegionalService;
import com.mercurio.lms.util.FormatUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.seguranca.manterUsuarioLMSEmpresaAction"
 */
public class ManterUsuarioLMSEmpresaAction extends CrudAction {
	
	private EmpresaService  empresaService;
	private RegionalService regionalService;
	private RegionalUsuarioService regionalUsuarioService;
	private FilialUsuarioService   filialUsuarioService;
	private UsuarioLMSService usuarioLMSService;
	

	public void setUsuarioLMSService(UsuarioLMSService usuarioLMSService) {
		this.usuarioLMSService = usuarioLMSService;
	}

	public void setService(EmpresaUsuarioService empresaUsuarioService)
	{
		this.defaultService = empresaUsuarioService;
	}
	
	public EmpresaUsuarioService getEmpresaUsuarioService()
	{
		return (EmpresaUsuarioService)this.defaultService;
	}
	
	public void setFilialUsuarioService(FilialUsuarioService filialUsuarioService) {
		this.filialUsuarioService = filialUsuarioService;
	}

	public void setRegionalUsuarioService(
			RegionalUsuarioService regionalUsuarioService) {
		this.regionalUsuarioService = regionalUsuarioService;
	}

	public void setRegionalService(RegionalService regionalService) {
		this.regionalService = regionalService;
	}
	
	public void setEmpresaService(EmpresaService empresaService) {
		this.empresaService = empresaService;
	}

	public List findLookupEmpresa(Map criteria) {	
		return empresaService.findLookup(criteria);
	}	
	
	public List findLookupRegional(Map criteria) 
	{		
		return regionalService.findLookup(criteria);	
	}
	
	public List findLookupFilial(TypedFlatMap criteria) {
		return usuarioLMSService.findLookupFilial(criteria);
	}
	
	/**
	 * 
	 * @param criteria
	 * @return
	 */
	public Integer getRowCountFilial(TypedFlatMap criteria) {
		return usuarioLMSService.getRowCountFilial( criteria );
	}
		
	/**
	 * 
	 * @param criteria
	 * @param findDef
	 * @return
	 */
	public ResultSetPage findPaginatedFilial( TypedFlatMap criteria) {
		return usuarioLMSService.findPaginatedFilial( criteria );
	}
	
	
	/**
	 * 
	 * @param criteria
	 * @param findDef
	 * @return
	 */
	public ResultSetPage findPaginatedEmpresa( Map criteria) {
		return usuarioLMSService.findPaginatedEmpresa( criteria );
	}
	
	/**
	 * 
	 * @param criteria
	 * @return
	 */
	public Integer getRowCountEmpresa( Map criteria) {
		return usuarioLMSService.getRowCountEmpresa( criteria );
	}
	
	public Serializable store(TypedFlatMap mapTela) {
		Empresa empresa = new Empresa();
	 	empresa.setIdEmpresa(MapUtilsPlus.getLong(mapTela, "empresaByIdEmpresaCadastrada.idEmpresa", null));
	 	
	 	Usuario usuario = new Usuario();
	 	usuario.setIdUsuario(MapUtilsPlus.getLong(mapTela, "idUsuarioLMS", null));
	 		 	
	 	EmpresaUsuario empresaUsuario = new EmpresaUsuario();
	 	empresaUsuario.setUsuario(usuario);
	 	empresaUsuario.setEmpresa(empresa);
	 	empresaUsuario.setIdEmpresaUsuario(MapUtilsPlus.getLong(mapTela, "idUsuarioEmpresa", null));
	 	empresaUsuario.setBlIrrestritoFilial(mapTela.getBoolean("blIrrestritoFilial", Boolean.FALSE));	 	
	 	
	 	final Long idFilial = MapUtilsPlus.getLong(mapTela, "filial.idFilial", null);
		/* Verifica se foi passada a Filial Padrão. Se for ele setá.  */
	 	if ( idFilial != null )	{
	 		Filial f = new Filial();
	 		f.setIdFilial(idFilial);
	 		empresaUsuario.setFilialPadrao( f );
	 	}	 	
	 	
	 	/* Verifica se foi passadas as regionais e se o usuário NÃO tem acesso irrestrito a filiais. Se for o caso setá. */
	 	List regionaisList = MapUtilsPlus.getList(mapTela,"regionalUsuario", Collections.EMPTY_LIST);
	 	if ( empresaUsuario.getBlIrrestritoFilial() == false ) {
	 		getRegionaisUsuario(regionaisList,empresaUsuario);	 	
	 	} 		 	

	 	/* Verifica se foi passadas as filiais e se o usuário NÃO tem acesso irrestrito a filiais. Se for o caso setá. */
	 	List filiaisList = MapUtilsPlus.getList(mapTela,"filiaisUsuario", Collections.EMPTY_LIST);
	 	if ( empresaUsuario.getBlIrrestritoFilial() == false ) {
	 		getFiliaisUsuario(filiaisList, usuario, empresaUsuario);		 		
	 	}
	 	
	 	/* Persiste a empresa usuario. */ 	
	 	Serializable retorno = getEmpresaUsuarioService().store(empresaUsuario, 
	 											  mapTela.getBoolean("empresaPadrao", Boolean.FALSE));
	 	
	 	return retorno;
	 }
	 
	 private void getRegionaisUsuario(List<Map> regionaisList, EmpresaUsuario empresaUsuario ){
	 		List<RegionalUsuario> regionais = new ArrayList<RegionalUsuario>();
	 		
	 		ListIterator<Map> lit = regionaisList.listIterator();
	 		while(lit.hasNext()){
	 			
	 			Map mapDados  = lit.next();
	 			RegionalUsuario rg = new RegionalUsuario();
	 			Regional r = new Regional();
	 			
	 			final Long idRegional = MapUtilsPlus.getLong(mapDados, "idRegional", null);
				if( empresaUsuario.getIdEmpresaUsuario() != null ){
		 			RegionalUsuario rgu = regionalUsuarioService.findByIdRegionalEmpresaUsuario(empresaUsuario.getIdEmpresaUsuario(), idRegional );
		 			if( rgu != null ) {
		 				rg = rgu;
		 			} else {
			 			r.setIdRegional(idRegional);
			 			rg.setRegional(r);
			 			rg.setEmpresaUsuario(empresaUsuario);
			 			rg.setBlAprovaWorkflow(Boolean.TRUE);						
		 			}
	 			} else {
		 			r.setIdRegional(idRegional);
		 			rg.setRegional(r);
		 			rg.setEmpresaUsuario(empresaUsuario);
		 			rg.setBlAprovaWorkflow(Boolean.TRUE);
	 			}
	 			
	 			regionais.add(rg);
	 			
	 		}
	 		
	 		empresaUsuario.setRegionalUsuario(regionais);
	 }
	 
	 private void getFiliaisUsuario(List<Map> filiaisList, Usuario usuarioLMS, EmpresaUsuario empresaUsuario){
		 	
	 		/* Lista de todas as filiais usuario. */
	 		List<FilialUsuario> filiaisUsuario = new ArrayList<FilialUsuario>();
	 		
	 		ListIterator<Map> lit = filiaisList.listIterator();
	 		while ( lit.hasNext() ){
	 			
	 			Map mapDados = lit.next();
	 			FilialUsuario fu = new FilialUsuario();
	 			Filial f = new Filial();
	 			
	 			final Long idFilial = MapUtilsPlus.getLong(mapDados,"idFilial",null);
				if ( empresaUsuario.getIdEmpresaUsuario() != null ){
		 			FilialUsuario fuRetorno = filialUsuarioService.findByIdFilialEmpresaUsuario( empresaUsuario.getIdEmpresaUsuario(), idFilial );
		 			if ( fuRetorno != null ){
		 				fu = fuRetorno;
		 			} else {
			 			f.setIdFilial( idFilial );
			 			fu.setFilial( f );	 			
			 			fu.setEmpresaUsuario( empresaUsuario );
			 			fu.setBlAprovaWorkflow( Boolean.TRUE );		 			
			 			fu.setEmpresaUsuario( empresaUsuario );
		 			}
	 			} else {
	 				f.setIdFilial( idFilial );
		 			fu.setFilial( f );	 			
		 			fu.setEmpresaUsuario( empresaUsuario );
		 			fu.setBlAprovaWorkflow( Boolean.TRUE );		 			
		 			fu.setEmpresaUsuario( empresaUsuario );	 				
	 			}
	 			
	 			filiaisUsuario.add( fu ); 			
	 			
	 		}	 		
	 		empresaUsuario.setFiliaisUsuario( filiaisUsuario );		
	 }

	 
	public ResultSetPage findPaginated(TypedFlatMap criteria) {
		ResultSetPage rsp = getEmpresaUsuarioService().findPaginated(criteria);
		List list =  rsp.getList();
		for (Iterator iter = list.iterator(); iter.hasNext();) {
			Map element = (HashMap) iter.next();
			element.put("nmPessoa", FormatUtils.formatIdentificacao( (DomainValue)element.get("tpIdentificacao"),
					element.get("nrIdentificacao").toString() ) + " - " + element.get("nmPessoa") );
			element.remove("nrIdentificacao");
		}
		return rsp;
	}

	public Integer getRowCount(TypedFlatMap criteria) {
			return getEmpresaUsuarioService().getRowCount(criteria);
	}

	public void removeById(java.lang.Long id) {	
		getEmpresaUsuarioService().removeById(id);
	}

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {		 
		getEmpresaUsuarioService().removeByIds(ids);
	}

	public Map findById(java.lang.Long id) {		
		
		final EmpresaUsuario empresaUsuario = getEmpresaUsuarioService().findById(id);		
		final Empresa empresa = empresaUsuario.getEmpresa();
		final Pessoa pessoa = empresa.getPessoa();
		final Usuario usuarioDaEmpresa = empresaUsuario.getUsuario();
		final Empresa empresaPadrao = usuarioDaEmpresa.getEmpresaPadrao();
		TypedFlatMap result = new TypedFlatMap();
		
		result.put("idUsuarioEmpresa",empresaUsuario.getIdEmpresaUsuario());		
		result.put("empresaByIdEmpresaCadastrada.idEmpresa",empresa.getIdEmpresa());
		result.put("empresaByIdEmpresaCadastrada.pessoa.nrIdentificacao",FormatUtils.formatIdentificacao( 
					pessoa.getTpIdentificacao(),
					pessoa.getNrIdentificacao() ) );
		result.put("empresaByIdEmpresaCadastrada.pessoa.nmPessoa",pessoa.getNmPessoa());
				
		if ((empresaPadrao!=null) && 
			(empresa!=null) &&
			(empresaPadrao.getIdEmpresa().equals(empresa.getIdEmpresa())) 
		)
		result.put("empresaPadrao",Boolean.TRUE);		
		result.put("blIrrestritoFilial",empresaUsuario.getBlIrrestritoFilial());
		
		final Filial filialPadraoDaEmpresa = empresaUsuario.getFilialPadrao();
		if (filialPadraoDaEmpresa!=null){
			result.put("filial_idFilial",filialPadraoDaEmpresa.getIdFilial());
			result.put("filial_sgFilial",filialPadraoDaEmpresa.getSgFilial());			
			result.put("filial_pessoa_nmFantasia",filialPadraoDaEmpresa.getPessoa().getNmFantasia());			
		}		
		
		if (usuarioDaEmpresa!=null){
			List regionaisUsuario = regionalUsuarioService.findByIdEmpresaUsuario(empresaUsuario.getIdEmpresaUsuario());
			if (regionaisUsuario!=null && regionaisUsuario.size()>=1){
		
				/* Manipula os dados das Regionais. */
				List regionaisList = (List)new ArrayList();		
				ListIterator lit   = regionaisUsuario.listIterator();
				while(lit.hasNext()){
					Map dadosRegionais = new HashMap();
					RegionalUsuario regionalUsuario = (RegionalUsuario)lit.next();
					dadosRegionais.put("idRegional",regionalUsuario.getRegional().getIdRegional());
					dadosRegionais.put("sgRegional",regionalUsuario.getRegional().getSiglaDescricao());
					regionaisList.add(dadosRegionais);
				}
				result.put("regionais",regionaisList);
			}			
			
			List filiaisUsuario = filialUsuarioService.findByIdEmpresaUsuario(empresaUsuario.getIdEmpresaUsuario());
			if (filiaisUsuario!=null && filiaisUsuario.size()>=1){
				
				/* Manipula os dados das Filiais. */
				List filiaisList 	= (List)new ArrayList();		
				ListIterator lit2   = filiaisUsuario.listIterator();
				while(lit2.hasNext()){
					Map dadosFiliais = new HashMap();
					FilialUsuario filial = (FilialUsuario)lit2.next();
					dadosFiliais.put("idFilial",filial.getFilial().getIdFilial());
					dadosFiliais.put("sgFilial",filial.getFilial().getSgFilial());
					filiaisList.add(dadosFiliais);
				}
				result.put("filiais",filiaisList);					
			}
			
		}		
		
		return result;
	}
	
	/**
	 * 
	 * @param criteria
	 * @return TypedFlatMap
	 */
	public TypedFlatMap temAcessoIrrestritoFilial( TypedFlatMap criteria){
		if( criteria.get("idEmpresa") != null && criteria.get("idEmpresa") != "" ){
			Usuario usuarioSessao = (Usuario) SessionContext.getUser();
			Empresa empresa = new Empresa();
			empresa.setIdEmpresa( Long.valueOf(criteria.get("idEmpresa").toString() ) );
			boolean irrestritoFilial = getEmpresaUsuarioService().findAcessoIrrestritoFilial( usuarioSessao, empresa );
			TypedFlatMap retorno = new TypedFlatMap();
			retorno.put( "acessoIrestrito", irrestritoFilial );
			
			return retorno;
		}
		return null;
	}
	
	public int findEmpresaPadrao( TypedFlatMap mapTela ){ 
		return getEmpresaUsuarioService().findEmpresaPadrao( MapUtilsPlus.getLong(mapTela, "idUsuario", null) );
		
	}
	
	/**
	 * Retorna Empresa Padrão para Usuário informado
	 *
	 */	
	public Empresa getEmpresaPadrao(TypedFlatMap mapTela) {
		
	 	return getEmpresaUsuarioService().findByIdUsuarioEmpresaPadrao( MapUtilsPlus.getLong(mapTela, "idUsuarioLMS", null) );
	 	
	}
	
	/**
	 * 
	 * @param mapTela
	 * @return
	 */
	public String findIdEmpresaUsuario(TypedFlatMap mapTela) {
		Empresa empresa = new Empresa();
		empresa.setIdEmpresa( Long.valueOf(mapTela.getString("idEmpresa") ) );
		Usuario usuario = new Usuario();
		usuario.setIdUsuario( Long.valueOf( mapTela.getString("idUsuario") ) );
		
		EmpresaUsuario empresaUsuario = getEmpresaUsuarioService().findByEmpresaUsuario( empresa, usuario );
		if( empresaUsuario != null && empresaUsuario.getIdEmpresaUsuario() != null ){
			return empresaUsuario.getIdEmpresaUsuario().toString();
		}
		return null;
	}
}