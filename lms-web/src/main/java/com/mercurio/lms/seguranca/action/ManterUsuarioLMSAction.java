package com.mercurio.lms.seguranca.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.pojo.UsuarioADSM;
import com.mercurio.adsm.framework.session.SessionContext;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.ClienteUsuario;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.configuracoes.model.UsuarioLMS;
import com.mercurio.lms.configuracoes.model.service.ClienteUsuarioService;
import com.mercurio.lms.configuracoes.model.service.UsuarioLMSService;
import com.mercurio.lms.configuracoes.util.MapUtilsPlus;
import com.mercurio.lms.municipios.model.Empresa;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.vendas.model.Cliente;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.seguranca.manterUsuarioLMSAction"
 */
public class ManterUsuarioLMSAction extends CrudAction {
	
	private ClienteUsuarioService clienteService;	
	
	private UsuarioLMSService getService(){
		return (UsuarioLMSService)defaultService;
	}
		
	public List findLookupUsuarioAdsm(TypedFlatMap criteria) {		
		
		List result = getService().findLookup(criteria);		
		
		List newList = null;		
		if ( (result != null ) && ( result.size() > 0 )){
			
			ListIterator lit = result.listIterator();
			newList = new ArrayList();
			while(lit.hasNext()){
				Usuario usuarioSessao = (Usuario) SessionContext.getUser();
				Map newMap = new HashMap();				
				if (usuarioSessao.getBlAdminFilial() != null
						&& usuarioSessao.getBlAdminFilial() == true) {
					Usuario usuarioAdsm = (Usuario)lit.next();
					newMap.put("login",usuarioAdsm.getLogin());
					newMap.put("idUsuario",usuarioAdsm.getIdUsuario());
					newMap.put("nmUsuario",usuarioAdsm.getNmUsuario());
					newMap.put("tpCategoriaUsuario",usuarioAdsm.getTpCategoriaUsuario());
				}else{
					UsuarioADSM usuarioAdsm = (UsuarioADSM)lit.next();
					newMap.put("login",usuarioAdsm.getLogin());
					newMap.put("idUsuario",usuarioAdsm.getIdUsuario());
					newMap.put("nmUsuario",usuarioAdsm.getNmUsuario());
					newMap.put("tpCategoriaUsuario",usuarioAdsm.getTpCategoriaUsuario());
				}
				
				newList.add(newMap);				
			}
		}
		return newList;
		
	}
	
	public void setService(UsuarioLMSService usuarioLMSService) {
		this.defaultService = usuarioLMSService; 
	}

	public TypedFlatMap findByIdJaExiste(TypedFlatMap map ) {
		List retorno =  MapUtilsPlus.getList(map,"item", null); 
		TypedFlatMap mapInterno = null ;
		if( retorno != null ){
			mapInterno = ((TypedFlatMap)retorno.get(0));
			if( getService().findJaExisteUsuarioLMS( mapInterno.getLong("idUsuario") ) ) {
				mapInterno.put("existe", true );
			}
		}
		return mapInterno ;
	}
	
	public TypedFlatMap findById(java.lang.Long id) {
		
		final UsuarioLMS usuarioLMS = getService().findById(id);
		final UsuarioADSM usuarioADSM = usuarioLMS.getUsuarioADSM();
		final Long idUsuario = usuarioLMS.getIdUsuario();
				
		TypedFlatMap retorno = new TypedFlatMap();
		retorno.put("tpCategoriaUsuario",usuarioADSM.getTpCategoriaUsuario().getValue());
		retorno.put("idUsuarioLMS", idUsuario);
		final Empresa empresaPadrao = usuarioLMS.getEmpresaPadrao();
		if (empresaPadrao != null) {
			retorno.put("idEmpresaPadrao", empresaPadrao.getIdEmpresa());
		}
		
		TypedFlatMap nrMatricula = new TypedFlatMap();
		nrMatricula.put("idUsuario", idUsuario);
		nrMatricula.put("login", usuarioADSM.getLogin());
		nrMatricula.put("nmUsuario", usuarioADSM.getNmUsuario());
		retorno.put("usuarioADSM",nrMatricula);
		
		List<ClienteUsuario> listClientes = getService().findClientesUsuario(idUsuario);
		List<Map> novaLista = new ArrayList<Map>(listClientes.size());		
		for(ClienteUsuario clienteUsuario : listClientes) {
			Map mapa = new HashMap();		
			final Cliente cliente = clienteUsuario.getCliente();
			final Pessoa cliPessoa = cliente.getPessoa();
			mapa.put("cliente.idCliente", cliente.getIdCliente());
			
			mapa.put("pessoa.nmPessoa", cliPessoa.getNmPessoa());	
			final String formatIdentificacao = FormatUtils.formatIdentificacao( cliPessoa.getTpIdentificacao(),
																 cliPessoa.getNrIdentificacao());
			mapa.put("cnpjClienteUsuario.pessoa.nrIdentificacao", formatIdentificacao);
			mapa.put("cliente.pessoa.nrIdentificacao", formatIdentificacao);
			
			mapa.put("remetente.remetente", clienteUsuario.getBlRemetente());
			mapa.put("destinatario.destinatario", clienteUsuario.getBlDestinatario());
			mapa.put("responsavelFrete.responsavelFrete", clienteUsuario.getBlRespFrete());
			
			novaLista.add(mapa);
		}		
		retorno.put("clienteUsuario", novaLista);
		
		final Cliente cliente = usuarioLMS.getCliente();
		if (cliente != null) {
			final Pessoa cliPessoa = cliente.getPessoa();

			retorno.put("clienteDoUsuario.idCliente", cliente.getIdCliente());
			retorno.put("clienteDoUsuario.pessoa.nmPessoa", cliPessoa.getNmPessoa());
			final String formatIdentificacao = FormatUtils.formatIdentificacao( cliPessoa.getTpIdentificacao(),
					 cliPessoa.getNrIdentificacao());
			retorno.put("clienteDoUsuario.pessoa.nrIdentificacao", formatIdentificacao);
			retorno.put("jaExisteAdminProCliente", getService().findExisteUmUsuarioAdminDoCliente(cliente.getIdCliente(), idUsuario));
		}
		
		retorno.put("blIrrestritoCliente", usuarioLMS.getBlIrrestritoCliente());			
		retorno.put("blAdminCliente", usuarioLMS.getBlAdminCliente()); 
		retorno.put("blAdminFilial", usuarioLMS.getBlAdminFilial());
		
		final Filial filial = usuarioLMS.getFilial();
		if (filial != null) {
			retorno.put("filial.idFilial", filial.getIdFilial());
			retorno.put("filial.pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
			retorno.put("filial.sgFilial", filial.getSgFilial());
		}
		
		return  retorno;		
	}

	public ResultSetPage findPaginatedADSM(Map criteria) {
		return getService().findPaginatedADSM( criteria );
	}
	
	public ResultSetPage findPaginatedPesquisaLogin(Map criteria) {
		return getService().findPaginatedPesquisaLogin( criteria );
	}
	
	public ResultSetPage findpaginated(Map criteria) {
		return super.findPaginated(criteria);
	}
	
	public Integer getRowCountADSM(Map criteria) {
		return getService().getRowCountADSM( criteria );
	}
	
	public Integer getRowCountPesquisaLogin(Map criteria) {
		return getService().getRowCountPesquisaLogin( criteria );
	}
	
	public Integer getRowCount(Map criteria) {		
		return super.getRowCount(criteria);
	}

	public void removeById(Long id) {		
		getService().removeById(id);
	}

	/**
	*
	**/
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		getService().removeByIds(ids);
	}
	
	public Serializable store(TypedFlatMap map) {
		
		UsuarioLMS usuarioLMS = new UsuarioLMS();
		usuarioLMS.setIdUsuario(map.getLong("usuarioADSM.idUsuario"));
		usuarioLMS.setBlIrrestritoCliente( map.getBoolean("blIrrestritoCliente", Boolean.FALSE));
		usuarioLMS.setBlAdminFilial( map.getBoolean("blAdminFilial", Boolean.FALSE) );		
		usuarioLMS.setBlAdminCliente( map.getBoolean("blAdminCliente", Boolean.FALSE) );
		usuarioLMS.setBlTermoComp(Boolean.FALSE);
		final Long idCliente = map.getLong("clienteDoUsuario.idCliente");
		if (idCliente != null) {
			Cliente cliente = new Cliente();
			cliente.setIdCliente(idCliente);
			usuarioLMS.setCliente(cliente);
		}
		final Long idFilial = map.getLong("filial.idFilial");
		if (idFilial != null) {
			Filial filial = new Filial();
			filial.setIdFilial(idFilial);
			usuarioLMS.setFilial(filial);
		}
		Boolean excluirAdminProCliente = map.getBoolean("excluirAdminProCliente", Boolean.FALSE);
		
		Long idEmpresaPadrao = map.getLong("idEmpresaPadrao");
		if (idEmpresaPadrao != null) {
			Empresa empPadrao = new Empresa();
			empPadrao.setIdEmpresa(idEmpresaPadrao);
			usuarioLMS.setEmpresaPadrao(empPadrao);
		}

		// referencia o UsuarioADSM que contem a relação one-to-one, ambos pojos tem que ter o mesmo ID
		UsuarioADSM usuarioADSM = new UsuarioADSM();
		usuarioADSM.setIdUsuario(usuarioLMS.getIdUsuario());		
		usuarioLMS.setUsuarioADSM(usuarioADSM);
		
		final List clientesUsuario = ManterUsuarioLMSAction.getClientesUsuario((List<TypedFlatMap>) map.get("clienteUsuario"));
		Serializable retorno =  getService().store(usuarioLMS, clientesUsuario, excluirAdminProCliente );

		return  retorno;
	}

	// ATENCAO método usado pela classe ManterUsuarioLMSClienteAction
	// cuidado ao modificar o nome dos atributos
	public static List<ClienteUsuario> getClientesUsuario(List<TypedFlatMap> clientesUsuarioTela) {

		// monata lista de ClienteUsuario
		List<ClienteUsuario> clientesUsuario = new ArrayList<ClienteUsuario>();
		if (clientesUsuarioTela != null) {
			for (Iterator<TypedFlatMap> it = clientesUsuarioTela.iterator(); it.hasNext(); ) {
				TypedFlatMap mapDados = it.next();
				Cliente cliente = new Cliente();
				cliente.setIdCliente(mapDados.getLong("cliente.idCliente"));
				
				ClienteUsuario clienteUsuario = new ClienteUsuario();
				clienteUsuario.setCliente(cliente);
				clienteUsuario.setBlRemetente( mapDados.getBoolean("remetente.remetente", Boolean.FALSE));
				clienteUsuario.setBlRespFrete( mapDados.getBoolean("responsavelFrete.responsavelFrete", Boolean.FALSE) );
				clienteUsuario.setBlDestinatario( mapDados.getBoolean("destinatario.destinatario", Boolean.FALSE) );
				clientesUsuario.add(clienteUsuario);
			}
		}

		return clientesUsuario;
	}
	
	public List findLookupCliente(Map clienteServ) {
		return this.clienteService.findLookup(clienteServ); 
	}	
	
	public ClienteUsuarioService getClienteUsuarioService() {
		return clienteService;
	}
	
	public void setClienteUsuarioService(ClienteUsuarioService clienteService) {
		this.clienteService = clienteService;
	}
	
	/**
	 * Verifica se o usuário corrente da sessão é administrador da filial
	 * @return boolean
	 */
	public boolean findEhAdminFilial(){
		return getService().findEhAdminFilial();
	}
	
}