package com.mercurio.lms.seguranca.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.pojo.Perfil;
import com.mercurio.adsm.framework.model.pojo.PerfilHerdado;
import com.mercurio.adsm.framework.model.service.PerfilService;
import com.mercurio.adsm.framework.session.SessionContext;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Usuario;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.seguranca.manterPerfilAction"
 */
public class ManterPerfilAction extends CrudAction {	
	public void setService(PerfilService permissaoService) {
		this.defaultService = permissaoService;
	}

	public void removeById(java.lang.Long id) {
	  ((PerfilService)defaultService).removeById(id);
	}

	/**
	*
	**/
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		((PerfilService)defaultService).removeByIds(ids);
	}	
	
	
	public List findLookup(Map criteria) {
		
		// Faço pesquisa primeiro com parâmetro extato
		List list = ((PerfilService)defaultService).findLookup(criteria);
		
		if (list != null) {
			if (list.size() <= 0 ) {
				
				// Se não encontrou algo com parâmetro exato informado, adiciono %				
				criteria.put("dsPerfil",criteria.get("dsPerfil")+"%");
				return ((PerfilService)defaultService).findLookup(criteria);
				
			} else {
				
				// Se Encontrou algo com parâmetro exato informado, retorna o próprio
				return list;
				
			}
		}
		return list;
	}

	public TypedFlatMap findById(java.lang.Long id) {
		TypedFlatMap map = new TypedFlatMap();
		List perfilpai   = new ArrayList();
		Perfil perfil 	 = ((PerfilService)defaultService).findById(id);
		
		map.put("idPerfil",  perfil.getIdPerfil());
		map.put("dsPerfil",  perfil.getDsPerfil());
		map.put("perfilPai", perfilpai);
		
		if (perfil.getPerfisHerdados() != null) {
			for (Iterator it = perfil.getPerfisHerdados().iterator(); it.hasNext();) {				
				TypedFlatMap mapPai = new TypedFlatMap();
				PerfilHerdado pai 	= (PerfilHerdado)it.next();
				
				mapPai.put("idPerfil", pai.getPerfilPai().getIdPerfil());
				mapPai.put("dsPerfil", pai.getPerfilPai().getDsPerfil());
				perfilpai.add(mapPai);
			}
		}
		
		return map;
	}

	public ResultSetPage findPaginatedExplained(Map criteria) {
		Usuario usuarioSessao = (Usuario) SessionContext.getUser();
		if( !usuarioSessao.isBlAdminCliente() ){
			ResultSetPage paginated = super.findPaginated(criteria);	
			return paginated;
		}
		return ((PerfilService)defaultService).findPaginatedExplainedAdminCliente( criteria );
	}

	public Integer getRowCount( Map criteria ){
		Usuario usuarioSessao = (Usuario) SessionContext.getUser();
		if( !usuarioSessao.isBlAdminCliente() ){
			return super.getRowCount( criteria );
		}
		return ((PerfilService)defaultService).getRowCountAdminCliente( criteria ); 
	}
	
	public Serializable store(TypedFlatMap map) {
		Perfil bean = new Perfil();
		bean.setIdPerfil( map.getLong("idPerfil") );
		bean.setDsPerfil( map.getString("dsPerfil") );
		bean.setPerfisHerdados(new ArrayList());
		
		List perfisHerdados = (List)map.get("perfilPai");
		
		if (perfisHerdados != null) {
			for (Iterator it = perfisHerdados.iterator(); it.hasNext(); ) {
				TypedFlatMap mapPerfisHerdados = (TypedFlatMap)it.next();
				
				if ( ((Long)mapPerfisHerdados.getLong("idPerfil")).equals(bean.getIdPerfil())) throw new BusinessException("ADSM_PERFIL_INVALIDO");
				
				Perfil perfilPai = new Perfil();
				perfilPai.setIdPerfil( mapPerfisHerdados.getLong("idPerfil") );				
				
				PerfilHerdado perfilHerdado = new PerfilHerdado();
				perfilHerdado.setIdPerfilHerdado(null);
				perfilHerdado.setPerfilPai( perfilPai );
				perfilHerdado.setPerfilFilho( bean );
				
				bean.getPerfisHerdados().add( perfilHerdado );
			}
		}
		
		return ((PerfilService)defaultService).store(bean);
	}
	
	
}