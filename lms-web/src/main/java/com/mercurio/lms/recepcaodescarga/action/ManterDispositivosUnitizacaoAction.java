package com.mercurio.lms.recepcaodescarga.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.DispositivoUnitizacao;
import com.mercurio.lms.carregamento.model.TipoDispositivoUnitizacao;
import com.mercurio.lms.carregamento.model.service.DispositivoUnitizacaoService;
import com.mercurio.lms.municipios.model.Empresa;
import com.mercurio.lms.util.FormatUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.recepcaodescarga.manterDispositivosUnitizacaoAction"
 */

public class ManterDispositivosUnitizacaoAction extends CrudAction {
	private DispositivoUnitizacaoService dispositivoUnitizacaoService;

    public void removeById(java.lang.Long id) {
        dispositivoUnitizacaoService.removeById(id);
    }
    
    public ResultSetPage  findPaginatedDispositivosUnitizacao(final Map<String, Object> criteria) {
		ResultSetPage rsp = dispositivoUnitizacaoService.findPaginated(criteria);
		List listDispositivos = rsp.getList();
		List listRetorno = new ArrayList();
		Map map = null;
		for (Iterator iter = listDispositivos.iterator(); iter.hasNext();) {
			map = new TypedFlatMap();
			DispositivoUnitizacao dispositivoUnitizacao = (DispositivoUnitizacao) iter.next();
			map.put("idDispositivoUnitizacao", dispositivoUnitizacao.getIdDispositivoUnitizacao());
			map.put("tipoDispositivoUnitizacao.dsTipoDispositivoUnitizacao", dispositivoUnitizacao.getTipoDispositivoUnitizacao().getDsTipoDispositivoUnitizacao());
			map.put("nrIdentificacao", dispositivoUnitizacao.getNrIdentificacao());
			map.put("empresa.pessoa.nmPessoa", dispositivoUnitizacao.getEmpresa().getPessoa().getNmPessoa());
			map.put("tpSituacao", dispositivoUnitizacao.getTpSituacao());
			listRetorno.add(map);
		}
		rsp.setList(listRetorno);
		return rsp;
	}
    
    public Integer getRowCount(Map criteria) {
		return dispositivoUnitizacaoService.getRowCount(criteria);
	}
    
    public Map<String, Object> findDispUnitizacaoByIdentificacao(Map criteria) {
    	if(!criteria.containsKey("nrIdentificacao")){
    		throw new BusinessException("LMS-26106");	// TODO rever esta mensagem
    	}
    	
		final List listDispositivos = dispositivoUnitizacaoService.findDispositivoUnitizacaoByIdentificacao(criteria.get("nrIdentificacao").toString());
		if(!listDispositivos.isEmpty()){
			final Map<String, Object> retorno = new HashMap<String, Object>();
			
			// Nunca haverá duplicatas
			final DispositivoUnitizacao du = (DispositivoUnitizacao) listDispositivos.get(0);
			
			retorno.put("idDispositivoUnitizacao", du.getIdDispositivoUnitizacao());
			retorno.put("nrIdentificacao", du.getNrIdentificacao());
			retorno.put("txtTpDispositivo", du.getTipoDispositivoUnitizacao().getDsTipoDispositivoUnitizacao());
			
			return retorno;
		}
		
		return null;    	
    }
    
	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	dispositivoUnitizacaoService.removeByIds(ids);
    }

    public Map findById(java.lang.Long id) {
    	DispositivoUnitizacao dispositivo = dispositivoUnitizacaoService.findById(id);
    	Map<String,Object> dispositivoMapped = new HashMap<String, Object>();    	
    	dispositivoMapped.put("idDispositivoUnitizacao", dispositivo.getIdDispositivoUnitizacao());
    	dispositivoMapped.put("nrIdentificacao", dispositivo.getNrIdentificacao());
    	dispositivoMapped.put("tpSituacao", dispositivo.getTpSituacao().getValue());
    	
    	/* Seta os dados referentes ao tipo de dispositivo de unitização */
    	Map<String,Object> tipoDispositivoUnitizacao = new HashMap<String, Object>();
    	tipoDispositivoUnitizacao.put("idTipoDispositivoUnitizacao", dispositivo.getTipoDispositivoUnitizacao().getIdTipoDispositivoUnitizacao());
    	tipoDispositivoUnitizacao.put("dsTipoDispositivoUnitizacao", dispositivo.getTipoDispositivoUnitizacao().getDsTipoDispositivoUnitizacao());
    	dispositivoMapped.put("tipoDispositivoUnitizacao", tipoDispositivoUnitizacao);
    	
    	/* Seta a empresa do dispositivo */
    	Map<String,Object> empresa = new HashMap<String, Object>();
    	empresa.put("idEmpresa", dispositivo.getEmpresa().getIdEmpresa());
    	Map<String,Object> pessoa = new HashMap<String, Object>();
    	pessoa.put("nrIdentificacao", dispositivo.getEmpresa().getPessoa().getNrIdentificacao());
    	pessoa.put("nrIdentificacaoFormatado",  FormatUtils.formatIdentificacao(dispositivo.getEmpresa().getPessoa()));
    	pessoa.put("nmPessoa", dispositivo.getEmpresa().getPessoa().getNmPessoa());    	
    	empresa.put("pessoa", pessoa);
    	dispositivoMapped.put("empresa", empresa);    	
    	 
    	return dispositivoMapped;
    }

    public Serializable store(TypedFlatMap bean) {    	    	    	
    	DispositivoUnitizacao dispositivo = new DispositivoUnitizacao();    	
    	dispositivo.setIdDispositivoUnitizacao(bean.getLong("idDispositivoUnitizacao"));	    	
    	dispositivo.setNrIdentificacao(bean.getString("nrIdentificacao"));    	
    	dispositivo.setTpSituacao(new DomainValue(bean.getString("tpSituacao")));
    	
    	/* Seta o id do tipo de dispositivo */
    	TipoDispositivoUnitizacao tipoDispositivo = new TipoDispositivoUnitizacao();
    	tipoDispositivo.setIdTipoDispositivoUnitizacao(bean.getLong("tipoDispositivoUnitizacao.idTipoDispositivoUnitizacao"));
    	dispositivo.setTipoDispositivoUnitizacao(tipoDispositivo);
    	
    	/* Seta o id da empresa */
    	Empresa empresa = new Empresa();
    	empresa.setIdEmpresa(bean.getLong("empresa.idEmpresa"));
    	dispositivo.setEmpresa(empresa);    	    
    	
    	return dispositivoUnitizacaoService.store(dispositivo);
}
    
	public void setDispositivoUnitizacaoService(
			DispositivoUnitizacaoService dispositivoUnitizacaoService) {
		this.dispositivoUnitizacaoService = dispositivoUnitizacaoService;
	}
}
