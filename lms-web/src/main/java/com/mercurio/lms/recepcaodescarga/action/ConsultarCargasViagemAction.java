package com.mercurio.lms.recepcaodescarga.action;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.FindDefinition;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.report.ReportActionSupport;
import com.mercurio.adsm.framework.util.FilterList;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.ControleCarga;
import com.mercurio.lms.carregamento.model.Manifesto;
import com.mercurio.lms.carregamento.model.service.ControleCargaService;
import com.mercurio.lms.carregamento.model.service.ManifestoService;
import com.mercurio.lms.configuracoes.model.service.ServicoService;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteService;
import com.mercurio.lms.expedicao.model.service.ManifestoInternacionalService;
import com.mercurio.lms.expedicao.model.service.ManifestoViagemNacionalService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.recepcaodescarga.report.RelatorioCargasViagemDetalhadoService;
import com.mercurio.lms.recepcaodescarga.report.RelatorioCargasViagemResumidoService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.recepcaodescarga.consultarCargasViagemAction"
 */

public class ConsultarCargasViagemAction extends ReportActionSupport {
    
    private FilialService filialService;
    private ServicoService servicoService;
    private ControleCargaService controleCargaService;
    private DomainValueService domainValueService;
    private ManifestoService manifestoService;
    private RelatorioCargasViagemResumidoService relatorioCargasViagemResumidoService;
    private RelatorioCargasViagemDetalhadoService relatorioCargasViagemDetalhadoService;
    private MeioTransporteService meioTransporteService;
	private ManifestoViagemNacionalService manifestoViagemNacionalService;
	private ManifestoInternacionalService manifestoInternacionalService;

    public List findLookupMeioTransporte(Map map) {
    	return this.getMeioTransporteService().findLookup(map);
    }
    
    /**
     * 
     * @param tfm
     * @return
     */
    public TypedFlatMap findDadosPopupDetalhes(TypedFlatMap tfm) {
    	Long idManifesto = tfm.getLong("idManifesto");
    	return getManifestoService().findDadosControleCargaDoManifesto(idManifesto);
    }
    
    /**
     * carrega os dados da popup de Documentos 
     * @param dados
     * @return
     */
    public TypedFlatMap findDadosPopupDocumentos(TypedFlatMap dados) {
    	Long idManifesto = dados.getLong("idManifesto");
    	Manifesto manifesto = this.getManifestoService().findById(idManifesto);
    	 
    	TypedFlatMap tfm = new TypedFlatMap();
    	
    	if(manifesto!=null) {
        	if (manifesto.getControleCarga()!=null) {
            	if (manifesto.getControleCarga().getFilialByIdFilialOrigem()!=null) {
            		tfm.put("manifesto.controleCarga.filialByIdFilialOrigem.sgFilial", manifesto.getControleCarga().getFilialByIdFilialOrigem().getSgFilial());
            	} else {
            		tfm.put("manifesto.controleCarga.filialByIdFilialOrigem.sgFilial", "");
            	}
            	tfm.put("manifesto.controleCarga.nrControleCarga", manifesto.getControleCarga().getNrControleCarga());
        	}
        	
        	if ("E".equals( manifesto.getTpManifesto().getValue()) ) {
        		tfm.put("manifesto.tpManifesto", manifesto.getTpManifesto().getDescription().getValue());
        	} else if ("V".equals( manifesto.getTpManifesto().getValue()) ) {
        		String abrangencia = manifesto.getTpAbrangencia()!=null?manifesto.getTpAbrangencia().getDescription().getValue():null;
        		if (abrangencia!=null) {
        			tfm.put("manifesto.tpManifesto", manifesto.getTpManifesto().getDescription().getValue() +" " + abrangencia.toLowerCase());
        		} else {
        			// não é para entrar nesse if, pois se tpManifesto==V obrigatoriamente terá uma abrangencia
        			tfm.put("manifesto.tpManifesto", manifesto.getTpManifesto().getDescription().getValue());
        		}
        	}
        	
        	tfm.put("manifesto.filialByIdFilialOrigem.sgFilial", manifesto.getFilialByIdFilialOrigem().getSgFilial());
    		tfm.put("manifesto.nrManifesto", this.getManifestoService().getNumeroManifesto(manifesto));
    	}

    	return tfm;
    }
    
    /**
     * 
     * @param tfm
     * @return
     */
    public ResultSetPage findCargasEmViagem(TypedFlatMap tfm) {
        return this.getManifestoService().findCargasEmViagem(FindDefinition.createFindDefinition(tfm), tfm);
    }
    
    public Integer getRowCountCargasEmViagem(TypedFlatMap tfm) {
        return this.getManifestoService().getRowCountCargasEmViagem(tfm);
    }
    
    public Integer getRowCountDocumentosConsultarCargasViagem(TypedFlatMap tfm) {
        return this.getManifestoService().getRowCountDocumentosConsultarCargasViagem(tfm);
    }

    public ResultSetPage findDocumentosConsultarCargasViagem(TypedFlatMap tfm) {
    	Long idManifesto = tfm.getLong("idManifesto");
    	return this.getManifestoService().findDocumentosConsultarCargasViagem(idManifesto, FindDefinition.createFindDefinition(tfm));
    }
    
    /**
     * Método usado para definir os tipos de manifestos usados
     * @param criteria
     * @return
     */
    public List findTipoManifesto(Map criteria) {
        List dominiosValidos = new ArrayList();
        dominiosValidos.add("VN");
        dominiosValidos.add("VI");
        List retorno = getDomainValueService().findByDomainNameAndValues("DM_TAG_MANIFESTO", dominiosValidos);
        return retorno;
    }
    
    public List findLookupManifestoDocumentFilialVN(Map criteria) {
    	return findLookupFilialByManifesto(criteria);
    }

    public List findLookupManifestoDocumentFilialVI(Map criteria) {
    	return findLookupFilialByManifesto(criteria);
    }
    
    public List findLookupFilialByManifesto(Map criteria) {
    	List list = filialService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		Filial filial = (Filial)iter.next();
    		TypedFlatMap typedFlatMap = new TypedFlatMap();
    		typedFlatMap.put("idFilial", filial.getIdFilial());
    		typedFlatMap.put("sgFilial", filial.getSgFilial());
    		typedFlatMap.put("pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
    		retorno.add(typedFlatMap);
    	}
    	return retorno;
    }
    public List findLookupManifestoDocumentNumberVN(Map criteria) {
    	List list = manifestoViagemNacionalService.findLookup(criteria);
    	return list;
    }

    public List findLookupManifestoDocumentNumberVI(Map criteria) {
    	List list = manifestoInternacionalService.findLookup(criteria);
    	return list;
    }
    
    /**
     * Consulta a filial pela sigla informada 
     * @param map
     * @return
     */
    public List findLookupFilial(Map map) {
    	FilterList filter = new FilterList(getFilialService().findLookup(map)) {
			public Map filterItem(Object item) {
				Filial filial = (Filial)item;
    			TypedFlatMap typedFlatMap = new TypedFlatMap();
	    		typedFlatMap.put("idFilial", filial.getIdFilial());
		    	typedFlatMap.put("sgFilial",  filial.getSgFilial());
		    	typedFlatMap.put("pessoa.nmFantasia",  filial.getPessoa().getNmFantasia());
				return typedFlatMap;
			}
    	};
    	return (List)filter.doFilter();
    }    

    /**
     * Método que popula a combo de servico
     * @param map
     * @return list
     */
    public List findComboServico(Map map) {
        return getServicoService().find(map);
    }
    
    /**
     * lookup de controle de carga 
     * @param criteria
     * @return
     */
    public List findControleCarga(Map criteria) {
    	List list = this.getControleCargaService().findLookup(criteria);
    	
    	if (list.size()==1){
    		if (list.iterator().hasNext()) {
    			ControleCarga cc = (ControleCarga) list.iterator().next();
    			
    			if( "FE".equalsIgnoreCase(cc.getTpStatusControleCarga().getValue()) || "CA".equalsIgnoreCase(cc.getTpStatusControleCarga().getValue())) {
    				throw new BusinessException("LMS-03007");
    			}
    		}
    	}
    	
    	
    	FilterList filter = new FilterList(list) {
			public Map filterItem(Object item) {
				ControleCarga controleCarga = (ControleCarga)item;
    			TypedFlatMap typedFlatMap = new TypedFlatMap();
		    	
	    		typedFlatMap.put("idControleCarga", controleCarga.getIdControleCarga());
	    		typedFlatMap.put("nrControleCarga", controleCarga.getNrControleCarga());
	    		typedFlatMap.put("filialByIdFilialOrigem.idFilial", controleCarga.getFilialByIdFilialOrigem().getIdFilial());
	    		typedFlatMap.put("filialByIdFilialOrigem.sgFilial", controleCarga.getFilialByIdFilialOrigem().getSgFilial());		    	
		    	
				return typedFlatMap;
			}
    	};
    	return (List)filter.doFilter();
    }
    
    /**
     * Relatório de cargas em viagem resumido 
     * @param parameters
     * @return
     * @throws Exception
     */
    public java.io.File executeRelatorioResumido(TypedFlatMap parameters) throws Exception {
    	this.reportServiceSupport = getRelatorioCargasViagemResumidoService(); 
    	return this.reportServiceSupport.executeReport(parameters); 
    }

    /**
     * Relatório de cargas em viagem detalhado
     * @param parameters
     * @return
     * @throws Exception
     */
    public java.io.File executeRelatorioDetalhado(TypedFlatMap parameters) throws Exception {
    	this.reportServiceSupport = getRelatorioCargasViagemDetalhadoService(); 
    	return this.reportServiceSupport.executeReport(parameters); 
    }    
    
    
    private FilialService getFilialService() {
        return filialService;
    }

    public void setFilialService(FilialService filialService) {
        this.filialService = filialService;
    }

    private ServicoService getServicoService() {
        return servicoService;
    }

    public void setServicoService(ServicoService servicoService) {
        this.servicoService = servicoService;
    }

    private ControleCargaService getControleCargaService() {
        return controleCargaService;
    }

    public void setControleCargaService(ControleCargaService controleCargaService) {
        this.controleCargaService = controleCargaService;
    }


    private DomainValueService getDomainValueService() {
        return domainValueService;
    }


    public void setDomainValueService(DomainValueService domainValueService) {
        this.domainValueService = domainValueService;
    }

    private ManifestoService getManifestoService() {
        return manifestoService;
    }

    public void setManifestoService(ManifestoService manifestoService) {
        this.manifestoService = manifestoService;
    }


	private RelatorioCargasViagemResumidoService getRelatorioCargasViagemResumidoService() {
		return relatorioCargasViagemResumidoService;
	}


	public void setRelatorioCargasViagemResumidoService(
			RelatorioCargasViagemResumidoService relatorioCargasViagemResumidoService) {
		this.relatorioCargasViagemResumidoService = relatorioCargasViagemResumidoService;
	}


	private RelatorioCargasViagemDetalhadoService getRelatorioCargasViagemDetalhadoService() {
		return relatorioCargasViagemDetalhadoService;
	}


	public void setRelatorioCargasViagemDetalhadoService(
			RelatorioCargasViagemDetalhadoService relatorioCargasViagemDetalhadoService) {
		this.relatorioCargasViagemDetalhadoService = relatorioCargasViagemDetalhadoService;
	}

	private MeioTransporteService getMeioTransporteService() {
		return meioTransporteService;
	}

	public void setMeioTransporteService(MeioTransporteService meioTransporteService) {
		this.meioTransporteService = meioTransporteService;
	}

	public void setManifestoInternacionalService(
			ManifestoInternacionalService manifestoInternacionalService) {
		this.manifestoInternacionalService = manifestoInternacionalService;
	}

	public void setManifestoViagemNacionalService(
			ManifestoViagemNacionalService manifestoViagemNacionalService) {
		this.manifestoViagemNacionalService = manifestoViagemNacionalService;
	}
}
