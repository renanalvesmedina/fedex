package com.mercurio.lms.recepcaodescarga.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.CarregamentoDescarga;
import com.mercurio.lms.carregamento.model.ControleCarga;
import com.mercurio.lms.carregamento.model.EventoControleCarga;
import com.mercurio.lms.carregamento.model.service.CarregamentoDescargaService;
import com.mercurio.lms.carregamento.model.service.ControleCargaService;
import com.mercurio.lms.carregamento.model.service.EventoControleCargaService;
import com.mercurio.lms.carregamento.model.service.MotivoCancelDescargaService;
import com.mercurio.lms.municipios.model.service.FilialService;

/**
 * Generated by: ADSM ActionGenerator
 * 
 * Não inserir documentação após ou remover a tag do XDoclet a seguir. O valor
 * do <code>id</code> informado abaixo deve ser utilizado para referenciar
 * este serviço.
 * 
 * @spring.bean id="lms.recepcaodescarga.cancelarInicioDescargaAction"
 */

public class CancelarInicioDescargaAction extends CrudAction {

	private MotivoCancelDescargaService motivoCancelDescargaService;

	private FilialService filialService;

	private ControleCargaService controleCargaService;

	private EventoControleCargaService eventoControleCargaService;

	private CarregamentoDescargaService carregamentoDescargaService;

	private static final String TP_STATUS_CONTROLE_CARGA_EM_DESCARGA = "ED";

	private static final String TP_CONTROLE_CARGA_COLETA_ENTREGA = "C";

	/**
	 * Método que busca os dados para a combo de motivo de cancelamento
	 * 
	 * @param map
	 * @return
	 */
	public List findComboMotivoCancelamentoDescarga(Map map) {
		return getMotivoCancelDescargaService().findMotivoCancelDescargaOrderByDsMotivo(map);
	}

	/**
	 * Método para buscar a filial na lookup de controle de carga e verifica se
	 * o usuario logado tem acesso a filial selecionada.
	 */
	public List findLookupFilial(Map map) {
		return this.getFilialService().findLookupBySgFilial((String)map.get("sgFilial"), (String)map.get("tpAcesso"));
	}

	/**
	 * Busca os campos da tela de carregamento a partir de um controle de carga
	 * 
	 * @param criteria
	 * @return
	 */
	public List findControleCarga(Map criteria) {
		if (criteria == null) {
			criteria = new HashMap();
		}

		List list = this.getControleCargaService().find(criteria);

		if (list.size() == 1) {
			ControleCarga controleCarga = (ControleCarga) list.get(0);

			if (!controleCarga.getTpControleCarga().getValue().equals(
					TP_CONTROLE_CARGA_COLETA_ENTREGA)
					|| !controleCarga.getTpStatusControleCarga().getValue()
							.equals(TP_STATUS_CONTROLE_CARGA_EM_DESCARGA)) {
				throw new BusinessException("LMS-03001");
			}
			ControleCarga ccRetorno = new ControleCarga();

			ccRetorno.setIdControleCarga(controleCarga.getIdControleCarga());
			ccRetorno.setNrControleCarga(controleCarga.getNrControleCarga());
			ccRetorno.setTpControleCarga(controleCarga.getTpControleCarga());
			ccRetorno.setTpStatusControleCarga(controleCarga
					.getTpStatusControleCarga());

			List retorno = new ArrayList();
			retorno.add(ccRetorno);
			list = retorno;

		}

		return list;
	}

	/**
	 * Carrega os campos necessarios para a tela.
	 * 
	 * @param idControleCarga
	 * @return
	 */
	public TypedFlatMap findControleCargaById(Long idControleCarga) {
		ControleCarga controleCarga = getControleCargaService().findById(
				idControleCarga);

		TypedFlatMap tfm = new TypedFlatMap();

		tfm.put("tpControleCarga", controleCarga.getTpControleCarga().getDescription());
		tfm.put("tpStatusControleCarga", controleCarga.getTpStatusControleCarga().getDescription());

		if (controleCarga.getMeioTransporteByIdTransportado() != null) {
			tfm.put("nrFrotaTransporte", controleCarga.getMeioTransporteByIdTransportado().getNrFrota());
			tfm.put("nrIdentificadorTransporte", controleCarga.getMeioTransporteByIdTransportado().getNrIdentificador());
		}

		if (controleCarga.getMeioTransporteByIdSemiRebocado() != null) {
			tfm.put("nrFrotaSemiReboque", controleCarga.getMeioTransporteByIdSemiRebocado().getNrFrota());
			tfm.put("nrIdentificadorSemiReboque", controleCarga.getMeioTransporteByIdSemiRebocado().getNrIdentificador());
		}
		// código para buscar a data e hora de chegada na portaria
		Map criteriaEventoControleCarga = new HashMap();
		criteriaEventoControleCarga.put("tpEventoControleCarga", "CP");

		Map filialMap = new HashMap();
		filialMap.put("idFilial", controleCarga.getFilialByIdFilialOrigem().getIdFilial());
		criteriaEventoControleCarga.put("filial", filialMap);

		Map controleCargaMap = new HashMap();
		controleCargaMap.put("idControleCarga", controleCarga.getIdControleCarga());

		criteriaEventoControleCarga.put("controleCarga", controleCargaMap);

		List eventoControleCargas = this.getEventoControleCargaService().find(criteriaEventoControleCarga);

		if (!eventoControleCargas.isEmpty() && eventoControleCargas.size() == 1) {
			EventoControleCarga eventoControleCarga = (EventoControleCarga) eventoControleCargas.get(0);
			tfm.put("chegadaPortaria", eventoControleCarga.getDhEvento());
		} else {
			tfm.put("chegadaPortaria", "");
		}

		// código para buscar a data e hora de inicio descarga
		Map carregamentoDescargaMap = new HashMap();
		carregamentoDescargaMap.put("tpOperacao", "D");
		carregamentoDescargaMap.put("tpStatusOperacao", "I");
		carregamentoDescargaMap.put("controleCarga", controleCargaMap);
		carregamentoDescargaMap.put("filial", filialMap);

		List carregamentoDescargaList = this.getCarregamentoDescargaService().find(carregamentoDescargaMap);

		if (!carregamentoDescargaList.isEmpty() && carregamentoDescargaList.size() == 1) {
			CarregamentoDescarga carregamentoDescarga = (CarregamentoDescarga) carregamentoDescargaList.get(0);
			tfm.put("inicioDescarga", carregamentoDescarga.getDhInicioOperacao());
		} else {
			tfm.put("inicioDescarga", "");
		}

		return tfm;
	}

	/**
	 * Chama o método de cancelar inicio de descarga 
	 * @param tfm
	 * @return
	 */
	public String executeCancelarInicioDescarga(TypedFlatMap tfm) {
		Long idControleCarga = tfm.getLong("controleCarga.idControleCarga");
		Long idMotivoCancelamento = tfm.getLong("motivoCancelDescarga.idMotivoCancelDescarga");
		String obMotivoCancelamentoDescarga = tfm.getString("obMotivoCancelamentoDescarga");
		this.getCarregamentoDescargaService().executeCancelarInicioDescarga(idControleCarga, idMotivoCancelamento,obMotivoCancelamentoDescarga);
		
        ControleCarga cc = this.getControleCargaService().findByIdInitLazyProperties(idControleCarga, false);
        return cc.getTpStatusControleCarga().getDescription().getValue();

	}

	public FilialService getFilialService() {
		return filialService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public MotivoCancelDescargaService getMotivoCancelDescargaService() {
		return motivoCancelDescargaService;
	}

	public void setMotivoCancelDescargaService(
			MotivoCancelDescargaService motivoCancelDescargaService) {
		this.motivoCancelDescargaService = motivoCancelDescargaService;
	}

	public ControleCargaService getControleCargaService() {
		return controleCargaService;
	}

	public void setControleCargaService(
			ControleCargaService controleCargaService) {
		this.controleCargaService = controleCargaService;
	}

	public EventoControleCargaService getEventoControleCargaService() {
		return eventoControleCargaService;
	}

	public void setEventoControleCargaService(
			EventoControleCargaService eventoControleCargaService) {
		this.eventoControleCargaService = eventoControleCargaService;
	}

	public CarregamentoDescargaService getCarregamentoDescargaService() {
		return carregamentoDescargaService;
	}

	public void setCarregamentoDescargaService(
			CarregamentoDescargaService carregamentoDescargaService) {
		this.carregamentoDescargaService = carregamentoDescargaService;
	}

}
