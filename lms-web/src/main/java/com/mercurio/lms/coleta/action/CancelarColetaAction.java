package com.mercurio.lms.coleta.action;

import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.FilterResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.coleta.model.AwbColeta;
import com.mercurio.lms.coleta.model.DetalheColeta;
import com.mercurio.lms.coleta.model.service.AwbColetaService;
import com.mercurio.lms.coleta.model.service.DetalheColetaService;
import com.mercurio.lms.coleta.model.service.PedidoColetaService;
import com.mercurio.lms.expedicao.model.Awb;
import com.mercurio.lms.expedicao.model.CtoInternacional;
import com.mercurio.lms.expedicao.model.service.AwbService;
import com.mercurio.lms.expedicao.model.service.CtoInternacionalService;
import com.mercurio.lms.expedicao.model.service.DoctoServicoService;
import com.mercurio.lms.expedicao.util.AwbUtils;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.Cotacao;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.coleta.cancelarColetaAction"
 */

public class CancelarColetaAction extends CrudAction {
    
    private DetalheColetaService detalheColetaService;
    private FilialService filialService;
    private CtoInternacionalService ctoInternacionalService;
    private AwbColetaService awbColetaService;
    private AwbService awbService;
    private DoctoServicoService doctoServicoService;
        
	public void setDoctoServicoService(DoctoServicoService doctoServicoService) {
		this.doctoServicoService = doctoServicoService;
	}

	public void setAwbService(AwbService awbService) {
		this.awbService = awbService;
	}

	public void setAwbColetaService(AwbColetaService awbColetaService) {
		this.awbColetaService = awbColetaService;
	}

	public void setCtoInternacionalService(
			CtoInternacionalService ctoInternacionalService) {
		this.ctoInternacionalService = ctoInternacionalService;
	}

	public DetalheColetaService getDetalheColetaService() {
        return detalheColetaService;
    }

    public void setDetalheColetaService(DetalheColetaService detalheColetaService) {
        this.detalheColetaService = detalheColetaService;
    }

    public void setService(PedidoColetaService pedidoColetaService) {
		this.defaultService = pedidoColetaService;
	}

    /**
     * Método que cancela uma coleta. 
     * @param map
     */
    public String executeCancelarColeta(Map map) {
        
        Map tmp = (Map)map.get("pedidoColeta");
        String strIdPedidoColeta = (String) tmp.get("idPedidoColeta");
        
        String strObservacao = (String)map.get("observacao");
        
        Long idPedidoColeta = Long.valueOf(0);
        Long idOcorrenciaColeta = Long.valueOf(0);
        
        if (!strIdPedidoColeta.trim().equals("")) {
            idPedidoColeta = Long.valueOf(strIdPedidoColeta);
            tmp = (Map)map.get("ocorrenciaColeta");
            String strIdOcorrenciaColeta = (String) tmp.get("idOcorrenciaColeta");

            if (!strIdOcorrenciaColeta.trim().equals("")) {
                idOcorrenciaColeta = Long.valueOf(strIdOcorrenciaColeta);
            }
        }
        
        return ((PedidoColetaService)defaultService).executeCancelarColeta(idPedidoColeta, idOcorrenciaColeta, strObservacao);
    }

    /**
     * Método que faz o findLookup e adiciona no map
     * um campo enderecoCompleto contendo as informações de endereço 
     * da tabela pedidoColeta 
     * @param criteria
     * @return Map
     */
    public List findLookupComEnderecoCompleto(TypedFlatMap criteria) {
    	Long idFilial = criteria.getLong("filialByIdFilialResponsavel.idFilial");
    	Long nrColeta = criteria.getLong("nrColeta");
    	Long idPedidoColeta = criteria.getLong("idPedidoColeta");

    	return ((PedidoColetaService)defaultService).findLookupComEnderecoCompleto(nrColeta, idPedidoColeta, idFilial);
    }    

    /**
     * Busca o findPaginated de DetalheColetaService mas monta o retorno
     * apenas com os dados necessários. 
     * @param map
     * @return ResultSetPage
     */
    public ResultSetPage findPaginatedDetalheColeta(Map map) {
        ResultSetPage rsp =  getDetalheColetaService().findPaginated(map);
        FilterResultSetPage filterRs = new FilterResultSetPage(rsp) {
        	
			public Map filterItem(Object item) {
    			DetalheColeta dc = (DetalheColeta)item; 
            	TypedFlatMap typedFlatMap = new TypedFlatMap();

            	typedFlatMap.put("idDetalheColeta", dc.getIdDetalheColeta());
            	typedFlatMap.put("servico.dsServico", dc.getServico().getDsServico());
            	typedFlatMap.put("tpFrete.description", dc.getTpFrete().getDescription());
                typedFlatMap.put("naturezaProduto.dsNaturezaProduto", dc.getNaturezaProduto().getDsNaturezaProduto());
                typedFlatMap.put("notaFiscalColetas", "");
                typedFlatMap.put("awbColetas", "");
                typedFlatMap.put("blEntregaDireta", dc.getBlEntregaDireta());
                
                typedFlatMap.put("moeda.dsSimbolo", dc.getMoeda().getDsSimbolo());
                typedFlatMap.put("moeda.sgMoeda", dc.getMoeda().getSgMoeda());
                typedFlatMap.put("vlMercadoria", dc.getVlMercadoria());
                typedFlatMap.put("psMercadoria", dc.getPsMercadoria());
                typedFlatMap.put("psAforado", dc.getPsAforado());
                typedFlatMap.put("cliente.pessoa.nmPessoa", dc.getCliente()!=null?dc.getCliente().getPessoa().getNmPessoa():null);
                if (dc.getMunicipio()!=null){
                	typedFlatMap.put("municipio.nmMunicipio", dc.getMunicipio().getNmMunicipio());	
                }
                if (dc.getLocalidadeEspecial()!=null){
                	typedFlatMap.put("localidadeEspecial.dsLocalidade", dc.getLocalidadeEspecial().getDsLocalidade());
                	if (dc.getLocalidadeEspecial().getFilial()!=null){
                		typedFlatMap.put("localidadeEspecial.filial.sgFilial", dc.getLocalidadeEspecial()!=null?dc.getLocalidadeEspecial().getFilial().getSgFilial():null);
                	}
                }
                
                Cotacao cotacao = dc.getCotacao();
                
                if(cotacao!=null) {

                	String strCotacao = cotacao.getFilialByIdFilialOrigem().getSgFilial();
                	strCotacao +=" "+FormatUtils.formatIntegerWithZeros(cotacao.getNrCotacao(), "00000000");
                	typedFlatMap.put("cotacao", strCotacao);
                }
                
                if(dc.getCtoInternacional()!=null) {
                	CtoInternacional ctoInternacional = ctoInternacionalService.findByIdDocServico( dc.getCtoInternacional().getIdDoctoServico() );
                	
                	String strCtr = ctoInternacional.getSgPais();
                	strCtr += " "+FormatUtils.formataNrDocumento(ctoInternacional.getNrDoctoServico().toString(), "CRT");
                	typedFlatMap.put("ctr", strCtr);
                }

                getPreAwbAwb(dc, typedFlatMap);
        		getDoctoServicoByDetalheColeta(dc, typedFlatMap);
                
		    	return typedFlatMap;
			}
		};
			
		return (ResultSetPage)filterRs.doFilter();	
    }
    
    /**
     * Row count de DetalheColetaService
     * @param map
     * @return Integer
     */
    public Integer getRowCountDetalheColeta(Map map) {
        return getDetalheColetaService().getRowCount(map);
    }

    /**
     * Método para verificar  se o usuario logado tem acesso a filial selecionada 
     */
    public List findFilialBySgFilial(Map map) {
    	String sgFilial = (String)map.get("sgFilial");
    	String tpAcesso = (String)map.get("tpAcesso");
        return this.filialService.findLookupBySgFilial(sgFilial, tpAcesso);
    }

	public FilialService getFilialService() {
		return filialService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	
	/**
	 * Busca os dados da sessão para realizar a pesquisa de filial (lookup) 
	 * @return
	 */
	public TypedFlatMap getDadosUsuarioLogado() {
		TypedFlatMap tfm = new TypedFlatMap();
		tfm.put("filial.idFilial", SessionUtils.getFilialSessao().getIdFilial());
		tfm.put("filial.sgFilial", SessionUtils.getFilialSessao().getSgFilial());
		tfm.put("filial.pessoa.nmFantasia", SessionUtils.getFilialSessao().getPessoa().getNmFantasia());
		return tfm;
	}

	private void getPreAwbAwb(DetalheColeta dc, TypedFlatMap typedFlatMap) {
		List<AwbColeta> listAwbColetas = awbColetaService.findAwbColetaByIdDetalheColeta(dc.getIdDetalheColeta());
		if (!listAwbColetas.isEmpty()) {

			AwbColeta awbColeta = (AwbColeta) listAwbColetas.get(0);
			
			Awb awb = awbService.findById(awbColeta.getAwb().getIdAwb());
			
			String strAwb;
			
			if (awb.getNrAwb() != null &&  awb.getNrAwb() > 0) {
				String nrAwbFormatado = AwbUtils.formatNrAwb(awb.getNrAwb(), 
						 awb.getDvAwb());
				strAwb = nrAwbFormatado + " - " + (awb.getCiaFilialMercurio() == null ? "" 
						: (awb.getCiaFilialMercurio().getEmpresa() == null ? ""
								: (awb.getCiaFilialMercurio().getEmpresa().getPessoa() == null ? "" 
										: awb.getCiaFilialMercurio().getEmpresa().getPessoa().getNmPessoa())));
			}else{
				strAwb = awb.getIdAwb().toString();
			}

			typedFlatMap.put("awb", strAwb);
		}
	}

	private void getDoctoServicoByDetalheColeta(DetalheColeta dc, TypedFlatMap typedFlatMap) {
		if(dc.getDoctoServico() != null) {
			dc.setDoctoServico(doctoServicoService.findDoctoServicoById(dc.getDoctoServico().getIdDoctoServico()));
			
			if(dc.getDoctoServico()!=null) {
				typedFlatMap.put("doctoServico.idDoctoServico", dc.getDoctoServico().getIdDoctoServico());    			
				typedFlatMap.put("doctoServico.tpDoctoSgFilial", dc.getDoctoServico().getTpDocumentoServico().getValue() 
															 + " " + dc.getDoctoServico().getFilialByIdFilialOrigem().getSgFilial());
				typedFlatMap.put("doctoServico.nrDoctoServico", dc.getDoctoServico().getNrDoctoServico());
				
				typedFlatMap.put("awb", awbService.findPreAwbAwbByIdDoctoServico(dc.getDoctoServico().getIdDoctoServico()));
			}
		}
	}

}
