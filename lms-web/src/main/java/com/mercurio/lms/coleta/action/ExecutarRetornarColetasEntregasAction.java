package com.mercurio.lms.coleta.action;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.joda.time.DateTime;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.FindDefinition;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.ControleCarga;
import com.mercurio.lms.carregamento.model.service.ControleCargaService;
import com.mercurio.lms.coleta.model.ManifestoColeta;
import com.mercurio.lms.coleta.model.PedidoColeta;
import com.mercurio.lms.coleta.model.service.ManifestoColetaService;
import com.mercurio.lms.coleta.model.service.PedidoColetaService;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.contratacaoveiculos.model.MeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteService;
import com.mercurio.lms.entrega.model.ManifestoEntrega;
import com.mercurio.lms.entrega.model.ManifestoEntregaVolume;
import com.mercurio.lms.entrega.model.service.ManifestoEntregaDocumentoService;
import com.mercurio.lms.entrega.model.service.ManifestoEntregaService;
import com.mercurio.lms.entrega.model.service.ManifestoEntregaVolumeService;
import com.mercurio.lms.expedicao.model.Conhecimento;
import com.mercurio.lms.expedicao.model.DoctoServico;
import com.mercurio.lms.expedicao.model.VolumeNotaFiscal;
import com.mercurio.lms.expedicao.model.service.DoctoServicoService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTFormatUtils;
import com.mercurio.lms.util.session.SessionUtils;


/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.coleta.executarRetornarColetasEntregasAction"
 */

public class ExecutarRetornarColetasEntregasAction {
	
	private DoctoServicoService doctoServicoService;
	private DomainValueService domainValueService;
	private ManifestoColetaService manifestoColetaService;
	private ManifestoEntregaDocumentoService manifestoEntregaDocumentoService;
	private PedidoColetaService pedidoColetaService;
	private MeioTransporteService meioTransporteService;
	private FilialService filialService;
	private ControleCargaService controleCargaService;
	private ManifestoEntregaService manifestoEntregaService;
	private ConfiguracoesFacade configuracoesFacade;
	private ManifestoEntregaVolumeService manifestoEntregaVolumeService;


	public void setManifestoEntregaVolumeService(
			ManifestoEntregaVolumeService manifestoEntregaVolumeService) {
		this.manifestoEntregaVolumeService = manifestoEntregaVolumeService;
	}
	public void setDoctoServicoService(DoctoServicoService doctoServicoService) {
		this.doctoServicoService = doctoServicoService;
	}
	public ConfiguracoesFacade getConfiguracoesFacade() {
		return configuracoesFacade;
	}
	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}
	public ControleCargaService getControleCargaService() {
		return controleCargaService;
	}
	public void setControleCargaService(ControleCargaService controleCargaService) {
		this.controleCargaService = controleCargaService;
	}
	public DomainValueService getDomainValueService() {
		return domainValueService;
	}
	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}
	public FilialService getFilialService() {
		return filialService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public ManifestoColetaService getManifestoColetaService() {
		return manifestoColetaService;
	}
	public void setManifestoColetaService(ManifestoColetaService manifestoColetaService) {
		this.manifestoColetaService = manifestoColetaService;
	}
	public ManifestoEntregaDocumentoService getManifestoEntregaDocumentoService() {
		return manifestoEntregaDocumentoService;
	}
	public void setManifestoEntregaDocumentoService(ManifestoEntregaDocumentoService manifestoEntregaDocumentoService) {
		this.manifestoEntregaDocumentoService = manifestoEntregaDocumentoService;
	}
	public ManifestoEntregaService getManifestoEntregaService() {
		return manifestoEntregaService;
	}
	public void setManifestoEntregaService(ManifestoEntregaService manifestoEntregaService) {
		this.manifestoEntregaService = manifestoEntregaService;
	}
	public MeioTransporteService getMeioTransporteService() {
		return meioTransporteService;
	}
	public void setMeioTransporteService(MeioTransporteService meioTransporteService) {
		this.meioTransporteService = meioTransporteService;
	}
	public PedidoColetaService getPedidoColetaService() {
		return pedidoColetaService;
	}
	public void setPedidoColetaService(PedidoColetaService pedidoColetaService) {
		this.pedidoColetaService = pedidoColetaService;
	}

	public TypedFlatMap findDadosSessao(){
		Filial fil = SessionUtils.getFilialSessao();
		Usuario usuario = SessionUtils.getUsuarioLogado();
		TypedFlatMap retorno = new TypedFlatMap(); 
	
		retorno.put("idFilial", fil.getIdFilial());
		retorno.put("sgFilial", fil.getSgFilial());
		retorno.put("nmFantasia", fil.getPessoa().getNmFantasia());
		retorno.put("idUsuario", usuario.getIdUsuario());
		retorno.put("nrMatricula", usuario.getNrMatricula());
		retorno.put("nome", usuario.getNmUsuario());
		
		return retorno;
	}
	
	public List findLookupFilialByControleCarga(Map criteria) {
    	List list = filialService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		Filial filial = (Filial)iter.next();
    		TypedFlatMap typedFlatMap = new TypedFlatMap();
    		typedFlatMap.put("idFilial", filial.getIdFilial());
    		typedFlatMap.put("sgFilial", filial.getSgFilial());
    		typedFlatMap.put("pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
    		retorno.add(typedFlatMap);
    	}
    	return retorno;
    }

    public List findLookupControleCarga(Map criteria) {
    	List list = controleCargaService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		ControleCarga controleCarga = (ControleCarga)iter.next();
    		retorno.add(populateMapControleCarga(controleCarga));
    	}
    	return retorno;
    }

    
    public void validateControleCarga(TypedFlatMap criteria) {
    	validaTpStatusControleCarga(criteria.getString("tpStatusControleCarga"));
    }
    
    private void validaTpStatusControleCarga(String status) {
    	if ( !(status.equals("AE") || status.equals("TC") || status.equals("AD")) ) {
    		throw new BusinessException("LMS-02044");
    	}
    }
    
    private TypedFlatMap populateMapControleCarga(ControleCarga controleCarga) {
    	validaTpStatusControleCarga(controleCarga.getTpStatusControleCarga().getValue());

		TypedFlatMap typedFlatMap = new TypedFlatMap();
		typedFlatMap.put("idControleCarga", controleCarga.getIdControleCarga());
		typedFlatMap.put("nrControleCarga", controleCarga.getNrControleCarga());
		if (controleCarga.getMeioTransporteByIdTransportado() != null) {
	 		typedFlatMap.put("meioTransporteByIdTransportado.idMeioTransporte", controleCarga.getMeioTransporteByIdTransportado().getIdMeioTransporte()); 
			typedFlatMap.put("meioTransporteByIdTransportado.nrFrota", controleCarga.getMeioTransporteByIdTransportado().getNrFrota());
			typedFlatMap.put("meioTransporteByIdTransportado.nrIdentificador", controleCarga.getMeioTransporteByIdTransportado().getNrIdentificador());
		}
		typedFlatMap.put("filialByIdFilialOrigem.idFilial", controleCarga.getFilialByIdFilialOrigem().getIdFilial());
		typedFlatMap.put("filialByIdFilialOrigem.sgFilial", controleCarga.getFilialByIdFilialOrigem().getSgFilial());
		return typedFlatMap;
	}
	

    public List findLookupManifestoDocumentFilialEN(Map criteria) {
    	return findLookupFilialByManifesto(criteria);
    }

    public List findLookupManifestoDocumentFilialCO(Map criteria) {
    	return findLookupFilialByManifesto(criteria);
    }
    

    private List findLookupFilialByManifesto(Map criteria) {
    	List list = filialService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		Filial filial = (Filial)iter.next();
    		TypedFlatMap tfm = new TypedFlatMap();
    		tfm.put("idFilial", filial.getIdFilial());
    		tfm.put("sgFilial", filial.getSgFilial());
    		tfm.put("pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
    		retorno.add(tfm);
    	}
    	return retorno;
    }
    
    public List findLookupManifestoDocumentNumberEN(TypedFlatMap criteria) {
    	criteria.put("manifesto.tpManifesto", "E");
    	List list = manifestoEntregaService.findLookupByTagManifesto(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		ManifestoEntrega manifestoEntrega = (ManifestoEntrega)iter.next();
    		TypedFlatMap typedFlatMap = new TypedFlatMap();
    		typedFlatMap.put("idManifestoEntrega", manifestoEntrega.getIdManifestoEntrega());
    		typedFlatMap.put("nrManifestoEntrega", manifestoEntrega.getNrManifestoEntrega());
    		typedFlatMap.put("idFilialManifesto", manifestoEntrega.getManifesto().getFilialByIdFilialOrigem().getIdFilial());
    		typedFlatMap.put("sgFilialManifesto", manifestoEntrega.getManifesto().getFilialByIdFilialOrigem().getSgFilial());
    		typedFlatMap.put("nmFantasiaFilialManifesto", manifestoEntrega.getManifesto().getFilialByIdFilialOrigem().getPessoa().getNmFantasia());
    		retorno.add(typedFlatMap);
    	}
    	return retorno;
    }
    
    public List findLookupManifestoDocumentNumberCO(Map criteria) {
    	List list = manifestoColetaService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		ManifestoColeta mc = (ManifestoColeta)iter.next();
    		TypedFlatMap tfm = new TypedFlatMap();
    		tfm.put("idManifestoColeta", mc.getIdManifestoColeta());
    		tfm.put("nrManifesto", mc.getNrManifesto());
    		tfm.put("filial.idFilial", mc.getFilial().getIdFilial());
    		tfm.put("filial.sgFilial", mc.getFilial().getSgFilial());
    		tfm.put("filial.pessoa.nmFantasia", mc.getFilial().getPessoa().getNmFantasia());
    		retorno.add(tfm);
    	}
    	return retorno;
    }


    public TypedFlatMap findControleCargaByMeioTransporte(Long idMeioTransporte) {
    	TypedFlatMap typedFlatMap = new TypedFlatMap();
    	typedFlatMap.putAll(getControleCargaMeioTransporte(idMeioTransporte));
    	return typedFlatMap;
    }


    private TypedFlatMap getControleCargaMeioTransporte(Long idMeioTransporte) {
    	List listControleCarga = controleCargaService.findControleCargaByTransmitirColeta(null, "C", idMeioTransporte);
    	if (!listControleCarga.isEmpty()) {
    		ControleCarga controleCarga = (ControleCarga)listControleCarga.get(0);
    		TypedFlatMap typedFlatMap = new TypedFlatMap();
    		typedFlatMap.put("controleCarga.idControleCarga", controleCarga.getIdControleCarga());
    		typedFlatMap.put("controleCarga.nrControleCarga", controleCarga.getNrControleCarga());
    		typedFlatMap.put("controleCarga.filialByIdFilialOrigem.idFilial", controleCarga.getFilialByIdFilialOrigem().getIdFilial());
    		typedFlatMap.put("controleCarga.filialByIdFilialOrigem.sgFilial", controleCarga.getFilialByIdFilialOrigem().getSgFilial());
    		return typedFlatMap;
    	}
   		throw new BusinessException("LMS-02044");
    }


    public List findLookupMeioTransporte(Map criteria) {
    	List list = meioTransporteService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		MeioTransporte meioTransporte = (MeioTransporte)iter.next();
    		TypedFlatMap typedFlatMap = new TypedFlatMap();
    		typedFlatMap.put("idMeioTransporte", meioTransporte.getIdMeioTransporte());
    		typedFlatMap.put("nrIdentificador", meioTransporte.getNrIdentificador());
    		typedFlatMap.put("nrFrota", meioTransporte.getNrFrota());
    		typedFlatMap.putAll(getControleCargaMeioTransporte(meioTransporte.getIdMeioTransporte()));
    		retorno.add(typedFlatMap);
    	}
    	return retorno;
    }

    public TypedFlatMap validatePCEExecutarColetasEntregas(TypedFlatMap criteria) {
    	List<String> listIds = criteria.getList("ids");
    	List<Long> listId = new ArrayList<Long>();
    	if(listIds != null){
    		for (String ids : listIds) {
    			listId.add(Long.valueOf(ids));
			}
    	}
    	
    	TypedFlatMap mapRetorno = new TypedFlatMap();
		mapRetorno.put("codigos", pedidoColetaService.validatePCEExecutarColetasEntregas(listId));
		mapRetorno.put("dtHoraOcorrencia",criteria.get("dtHoraOcorrencia"));
		return mapRetorno;
    }
    
    @ParametrizedAttribute(type = java.lang.Long.class)
    public TypedFlatMap validatePCERetornarColetasEntregas(List<Long> criteria) {
    	List listIds = criteria;
    	TypedFlatMap mapRetorno = new TypedFlatMap();
		mapRetorno.put("codigos", pedidoColetaService.validatePCERetornarColetasEntregas(listIds));
		return mapRetorno;
    }
    
    /**
	 * @param ids lista com as entidades que deverão ser executadas.
	 *
	 *
	 */
	
    public void generateExecutarColetasPendentes(TypedFlatMap map) {
    	
    	List<String> listIds = map.getList("ids");
    	List<Long> listId = new ArrayList<Long>();
    	if(listIds != null){
    		for (String ids : listIds) {
    			listId.add(Long.valueOf(ids));
			}
    	}
    	
    	DateTimeFormatter format = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
    	DateTime data = new DateTime(format.parseDateTime(map.get("dtHoraOcorrencia").toString()));
    	
		String retorno = pedidoColetaService.generateExecutarColetasPendentes(listId, data);
    	if (retorno.length() > 0)
    		throw new BusinessException("LMS-02022", new Object[] {retorno});
    }
    

    public List findTipoManifesto(Map criteria) {
    	List dominiosValidos = new ArrayList();
    	dominiosValidos.add("EN");
    	dominiosValidos.add("CO");
    	List retorno = domainValueService.findByDomainNameAndValues("DM_TAG_MANIFESTO", dominiosValidos);
    	return retorno;
    }

    
    public TypedFlatMap findControleCargaByManifesto(TypedFlatMap criteria) {
    	List lista = controleCargaService.findControleCargaByManifesto(criteria.getLong("idManifesto"), criteria.getLong("idManifestoColeta"));
    	if (lista.isEmpty()) {
    		throw new BusinessException("LMS-02044");
    	}
    	TypedFlatMap typedFlatMap = populateMapControleCarga((ControleCarga)lista.get(0));
    	return typedFlatMap;
    }
    

    public TypedFlatMap getDataUsuario() {
    	TypedFlatMap map = new TypedFlatMap();
    	Filial filialUsuario = SessionUtils.getFilialSessao();
    	map.put("filial.idFilial", filialUsuario.getIdFilial());
    	map.put("filial.sgFilial", filialUsuario.getSgFilial());
    	map.put("filial.pessoa.nmFantasia", filialUsuario.getPessoa().getNmFantasia());
    	return map;
    }
    
    
    
    public ResultSetPage findPaginatedColetasVeiculosEntregasRealizar(Map criteria) {
    	Long idControleCarga = Long.valueOf( (String)criteria.get("idControleCarga") );
    	ResultSetPage rsp = manifestoEntregaDocumentoService.
    			findPaginatedEntregasRealizar(idControleCarga, SessionUtils.getFilialSessao().getIdFilial(), FindDefinition.createFindDefinition(criteria));

    	List list = rsp.getList();
 		for (Iterator iter = list.iterator(); iter.hasNext();) {
 			TypedFlatMap map = (TypedFlatMap)iter.next();

    		if (map.get("doctoServico.clienteByIdClienteDestinatario.pessoa.nrIdentificacao") != null) {
    			map.put("doctoServico.clienteByIdClienteDestinatario.pessoa.nrIdentificacaoFormatado", 
    					FormatUtils.formatIdentificacao(map.getString("doctoServico.clienteByIdClienteDestinatario.pessoa.tpIdentificacao.value"), 
    							map.getString("doctoServico.clienteByIdClienteDestinatario.pessoa.nrIdentificacao")));
    		}

	    	Long idDoctoServico = (Long)map.getLong("doctoServico.idDoctoServico");
    		TypedFlatMap mapDataDoctoServico = doctoServicoService.findDoctoServicoByTpDocumento(idDoctoServico);
    		map.put("nrDoctoServico", mapDataDoctoServico.get("nrDoctoServico"));
    		map.put("situacaoDoctoServico", mapDataDoctoServico.getString("tpSituacaoDoctoServico") );
    		map.put("psDoctoServico", mapDataDoctoServico.getBigDecimal("psDoctoServico") );
    		map.put("vlTotalDocServico", mapDataDoctoServico.getBigDecimal("vlTotalDocServico") );
    		map.put("qtVolumes", mapDataDoctoServico.getInteger("qtVolumes") );
	    	map.put("idControleCarga", idControleCarga);
 		}
        rsp.setList(list);
    	return rsp;
    }

    public Integer getRowCountColetasVeiculosEntregasRealizar(TypedFlatMap criteria) {
    	return manifestoEntregaDocumentoService.getRowCountEntregasRealizar(criteria.getLong("idControleCarga"), SessionUtils.getFilialSessao().getIdFilial());
    }
    
    
    public ResultSetPage findPaginatedColetasPendentes(Map criteria) {
    	Long idControleCarga = Long.valueOf( (String)criteria.get("idControleCarga") );
    	ResultSetPage rsp = pedidoColetaService.
    			findPaginatedColetasPendentes(idControleCarga, FindDefinition.createFindDefinition(criteria));

    	String labelAte = " " + configuracoesFacade.getMensagem("ate") + " ";
    	List list = rsp.getList(); 
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		PedidoColeta pedidoColeta = (PedidoColeta)iter.next();
    		TypedFlatMap typedFlatMap = new TypedFlatMap();
    		typedFlatMap.put("idPedidoColeta", pedidoColeta.getIdPedidoColeta());
    		typedFlatMap.put("filialByIdFilialResponsavel.sgFilial", pedidoColeta.getFilialByIdFilialResponsavel().getSgFilial());
    		typedFlatMap.put("nrColeta", pedidoColeta.getNrColeta());
    		typedFlatMap.put("cliente.pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(pedidoColeta.getCliente().getPessoa()));
    		typedFlatMap.put("cliente.pessoa.nmPessoa", pedidoColeta.getCliente().getPessoa().getNmPessoa());
    		typedFlatMap.put("enderecoComComplemento", pedidoColeta.getEnderecoComComplemento());
    		typedFlatMap.put("qtTotalVolumesVerificado", pedidoColeta.getQtTotalVolumesVerificado());
    		typedFlatMap.put("psTotalVerificado", pedidoColeta.getPsTotalVerificado());
    		typedFlatMap.put("moeda.siglaSimbolo", pedidoColeta.getMoeda().getSiglaSimbolo());
    		typedFlatMap.put("vlTotalVerificado", pedidoColeta.getVlTotalVerificado());
    		typedFlatMap.put("dhColetaDisponivel", pedidoColeta.getDhColetaDisponivel());
    		typedFlatMap.put("hrLimiteColeta", pedidoColeta.getHrLimiteColeta());

    		String strHorarioColeta = 
    			JTFormatUtils.format(pedidoColeta.getDhColetaDisponivel(), JTFormatUtils.SHORT, JTFormatUtils.TIMEOFDAY) 
			   + labelAte + JTFormatUtils.format(pedidoColeta.getHrLimiteColeta(), JTFormatUtils.SHORT);
			
			typedFlatMap.put("strHorarioColeta", strHorarioColeta);
			typedFlatMap.put("idControleCarga", idControleCarga);
    		retorno.add(typedFlatMap);
    	}
        rsp.setList(retorno);
    	return rsp;
    }


    public Integer getRowCountColetasPendentes(TypedFlatMap criteria) {
    	return pedidoColetaService.getRowCountColetasPendentes(criteria.getLong("idControleCarga"));
    }
    
    public ResultSetPage findPaginatedColetasVeiculosEntregasParciaisPendentes(TypedFlatMap criteria){
    	Long idControleCarga = Long.valueOf( (String)criteria.get("idControleCarga") );
    	ResultSetPage rsp = manifestoEntregaVolumeService.findPaginatedEntregasVolumesPendentes(idControleCarga, FindDefinition.createFindDefinition(criteria));
    	
 		List<Map<String,Object>> retorno = new ArrayList<Map<String,Object>>();
 		for (ManifestoEntregaVolume manifestoVolume : (List<ManifestoEntregaVolume>)rsp.getList()) { 			 			
 			TypedFlatMap mapRetorno = new TypedFlatMap();
 			
 			mapRetorno.put("idControleCarga", idControleCarga);

 			VolumeNotaFiscal volume = manifestoVolume.getVolumeNotaFiscal();
 			DoctoServico doctoServico = volume.getNotaFiscalConhecimento().getConhecimento();
 			Conhecimento conhecimento = volume.getNotaFiscalConhecimento().getConhecimento();
 			
 			String tpIdentificacaoValue = doctoServico.getClienteByIdClienteDestinatario().getPessoa().getTpIdentificacao().getValue();
	    	if (tpIdentificacaoValue != null) { 
	    		mapRetorno.put("nrIdentificacaoFormatado", 
		    			FormatUtils.formatIdentificacao(tpIdentificacaoValue,
		    					doctoServico.getClienteByIdClienteDestinatario().getPessoa().getNrIdentificacao()) );
	    	}
	    	    	
	    	mapRetorno.put("tpDocumentoServico", doctoServico.getTpDocumentoServico().getDescription());
	    	mapRetorno.put("sgFilialOrigem", doctoServico.getFilialByIdFilialOrigem().getSgFilial());
	    	mapRetorno.put("nrDoctoServico", doctoServico.getNrDoctoServico());
	    	mapRetorno.put("dtPrevEntrega", doctoServico.getDtPrevEntrega());
	    	mapRetorno.put("nmPessoaDestinatario", doctoServico.getClienteByIdClienteDestinatario().getPessoa().getNmPessoa());
	    	mapRetorno.put("dsEnderecoEntregaReal", doctoServico.getDsEnderecoEntregaReal());
	    	mapRetorno.put("nrVolume", volume.getNrSequencia() + "/" +  doctoServico.getQtVolumes() );
	    	mapRetorno.put("psDoctoServico", doctoServico.getPsReal());
	    	mapRetorno.put("siglaSimbolo", doctoServico.getMoeda().getSiglaSimbolo());
	    	mapRetorno.put("vlTotalDocServico", doctoServico.getVlTotalDocServico());
	    	mapRetorno.put("situacaoDoctoServico", conhecimento.getTpSituacaoConhecimento().getDescription());
	    	
	    	retorno.add(mapRetorno);
 		}
        
 		rsp.setList(retorno);
    	return rsp;

    }
    
    public Integer getRowCountColetasVeiculosEntregasParciaisPendentes(TypedFlatMap criteria){
    	Long idControleCarga = Long.valueOf( (String)criteria.get("idControleCarga") );
    	return manifestoEntregaVolumeService.getRowCountEntregasVolumesPendentes( idControleCarga );
    }
}