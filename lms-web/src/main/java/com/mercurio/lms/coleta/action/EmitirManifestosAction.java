package com.mercurio.lms.coleta.action;

import java.io.File;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.report.MultiReportCommand;
import com.mercurio.adsm.framework.report.ReportExecutionManager;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.coleta.model.service.ManifestoColetaService;
import com.mercurio.lms.coleta.report.EmitirManifestosService;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.RotaColetaEntregaService;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.coleta.emitirManifestosAction"
 */

public class EmitirManifestosAction {

    private ManifestoColetaService manifestoColetaService;
    private RotaColetaEntregaService rotaColetaEntregaService;
	private EmitirManifestosService emitirManifestosService;
	private ReportExecutionManager reportExecutionManager;    
    
	public String execute(TypedFlatMap reportParams) throws Exception {
		File reportFile;
		MultiReportCommand mrc = new MultiReportCommand("relatorioManifestoColeta");
		
		mrc.addCommand("lms.coleta.emitirManifestosService", reportParams);
		mrc.addCommand("lms.coleta.emitirManifestosAwbService", reportParams);
		
		reportFile = this.reportExecutionManager.executeMultiReport(mrc);
		
		return reportExecutionManager.generateReportLocator(reportFile);
	}
    
    private RotaColetaEntregaService getRotaColetaEntregaService() {
		return rotaColetaEntregaService;
	}

	public void setRotaColetaEntregaService(
			RotaColetaEntregaService rotaColetaEntregaService) {
		this.rotaColetaEntregaService = rotaColetaEntregaService;
	}

	/**
     * Método que busca a rota de coleta/entrega
     * 
     * @param map
     * @return list
     */
    public List findLookupRotaColetaEntrega(Map map) {
        ((Map)map.get("filial")).remove("sgFilial");
        ((Map)map.get("filial")).remove("pessoa");
        
        return getRotaColetaEntregaService().findLookup(map);
    }
    
    /**
     * Busca a filial do usuario logado.
     * @return Retorna apenas o id da filial, a sigla e o nome
     */
    public Filial getFilialUsuarioLogado(Map map) {
        Filial filial = new Filial();
        filial.setIdFilial(SessionUtils.getFilialSessao().getIdFilial());
        filial.setSgFilial(SessionUtils.getFilialSessao().getSgFilial());
        
        Pessoa pessoa = new Pessoa();
        pessoa.setNmFantasia(SessionUtils.getFilialSessao().getPessoa().getNmFantasia());
        filial.setPessoa(pessoa);
        
        return filial;
    }

    /**
     * Faz a pesquisa da lookup de manifestoColeta
     * 
     * @param TypedFlatMap criteria
     * @return List
     */
    public List findLookupManifestoColeta(Map criteria) {
    	return this.getManifestoColetaService().findLookup(criteria);
    }
    
    public void setEmitirManifestosService(EmitirManifestosService emitirManifestosService) {
        this.emitirManifestosService = emitirManifestosService;
    }
    
    /**
     * Método que faz a chamada da RN registrar emissão do manifesto de coleta 
     * @param map
     */
    public void executeRegistrarEmissaoManifestoColeta(TypedFlatMap map) {
        List list = emitirManifestosService.findManifestosParaRegistrar(map);
        this.getManifestoColetaService().executeRegistrarEmissaoManifestoColeta(list);
        
    }

    public ManifestoColetaService getManifestoColetaService() {
        return manifestoColetaService;
    }


    public void setManifestoColetaService(ManifestoColetaService manifestoColetaService) {
        this.manifestoColetaService = manifestoColetaService;
    }

	public void setReportExecutionManager(
			ReportExecutionManager reportExecutionManager) {
		this.reportExecutionManager = reportExecutionManager;
	}
}