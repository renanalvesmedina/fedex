package com.mercurio.lms.coleta.action;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.report.ReportActionSupport;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.coleta.report.EmitirResumoColetasDiaPeriodoService;
import com.mercurio.lms.configuracoes.model.Servico;
import com.mercurio.lms.configuracoes.model.service.ServicoService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * 
 * @spring.bean id="lms.coleta.emitirResumoColetasDiaPeriodoAction"
 */
public class EmitirResumoColetasDiaPeriodoAction extends ReportActionSupport {
	private FilialService filialService;
	private ServicoService servicoService;
	
	/**
	 * Declaração serviço principal da Action.
	 */
	public void setEmitirResumoColetasDiaPeriodoService(EmitirResumoColetasDiaPeriodoService emitirResumoColetasDiaPeriodoService) {
		this.reportServiceSupport = emitirResumoColetasDiaPeriodoService;
	}
	
	/**
	 * Método que executa o relátorio.
	 */
	@Override
	public java.io.File execute(TypedFlatMap parameters) throws Exception {	
		return super.execute(parameters);
	}
	
	public List findLookupFilial(TypedFlatMap criteria) {
        return this.getFilialService().findLookupBySgFilial((String)criteria.get("sgFilial"), (String)criteria.get("tpAcesso"));
	}
	
	public List findServico(Map criteria) {
		List retorno = new ArrayList();
		List listServicos = this.getServicoService().find(criteria);
		for (Iterator iter = listServicos.iterator(); iter.hasNext();) {
			TypedFlatMap map = new TypedFlatMap();
			Servico servico = (Servico) iter.next();
			map.put("idServico", servico.getIdServico());
			map.put("dsServico", servico.getDsServico());
			map.put("tpSituacao.value", servico.getTpSituacao().getValue());
			retorno.add(map);
		}
		return retorno;
	} 

	/**
	 * Pega o usuario logado na sessão com sua respectiva filial. 
	 */
	public TypedFlatMap getDadosSessao() {
		TypedFlatMap map = new TypedFlatMap();
	
		Filial filial = SessionUtils.getFilialSessao();
		map.put("idFilialSessao", filial.getIdFilial());
		map.put("sgFilialSessao", filial.getSgFilial());
		map.put("nmFilialSessao", filial.getPessoa().getNmFantasia());
		map.put("dataAtual", JTDateTimeUtils.getDataAtual());
		map.put("dataPrimeiroDiaMes", JTDateTimeUtils.getFirstDayOfYearMonthDay(JTDateTimeUtils.getDataAtual()));
						
		return map;
	}	
	
    /**
     * Método para verificar  se o usuario logado tem acesso a filial selecionada 
     */
    public List findLookupFiliaisPorUsuario(Map map) {
        List listFilialLookup = getFilialService().findLookup(map);
        List result = new ArrayList();
        if (listFilialLookup.size() == 1) {
            Filial filial = (Filial)listFilialLookup.get(0); 
            if (SessionUtils.isFilialAllowedByUsuario(filial)) {
                result.add(filial);
            } else {
                throw new BusinessException("LMS-00050");
            }
        }else {
            result = listFilialLookup; 
        }
        return result;
    }

	public FilialService getFilialService() {
		return filialService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public ServicoService getServicoService() {
		return servicoService;
	}
	public void setServicoService(ServicoService servicoService) {
		this.servicoService = servicoService;
	}

}
