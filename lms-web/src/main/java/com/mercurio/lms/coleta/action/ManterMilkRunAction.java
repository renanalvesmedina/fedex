package com.mercurio.lms.coleta.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.joda.time.TimeOfDay;

import com.mercurio.adsm.core.util.ReflectionUtils;
import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.masterdetail.ItemList;
import com.mercurio.adsm.framework.model.masterdetail.ItemListConfig;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailAction;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailFactory;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailKey;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntry;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntryConfig;
import com.mercurio.adsm.framework.util.FilterList;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.coleta.model.MilkRemetente;
import com.mercurio.lms.coleta.model.MilkRun;
import com.mercurio.lms.coleta.model.SemanaRemetMrun;
import com.mercurio.lms.coleta.model.service.MilkRemetenteService;
import com.mercurio.lms.coleta.model.service.MilkRunService;
import com.mercurio.lms.coleta.model.service.PedidoColetaService;
import com.mercurio.lms.coleta.model.service.SemanaRemetMrunService;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.EnderecoPessoa;
import com.mercurio.lms.configuracoes.model.Servico;
import com.mercurio.lms.configuracoes.model.service.EnderecoPessoaService;
import com.mercurio.lms.configuracoes.model.service.PessoaService;
import com.mercurio.lms.configuracoes.model.service.ServicoService;
import com.mercurio.lms.configuracoes.model.service.UsuarioService;
import com.mercurio.lms.expedicao.model.NaturezaProduto;
import com.mercurio.lms.expedicao.model.service.NaturezaProdutoService;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.JTFormatUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.service.ClienteService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.coleta.manterMilkRunAction"
 */

public class ManterMilkRunAction extends MasterDetailAction {
	private MilkRemetenteService milkRemetenteService;
	private SemanaRemetMrunService semanaRemetMrunService;
	private UsuarioService usuarioService;
	private ClienteService clienteService;
	private FilialService filialService;
	private PedidoColetaService pedidoColetaService;
	private EnderecoPessoaService enderecoPessoaService;
	private ServicoService servicoService;
	private NaturezaProdutoService naturezaProdutoService;
	private PessoaService pessoaService;
	private ConfiguracoesFacade configuracoesFacade;
	
	public ConfiguracoesFacade getConfiguracoesFacade() {
		return configuracoesFacade;
	}
	
	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}
	
	/**
	 * Declaração serviço principal da Action.
	 * 
	 * @param milkRunService
	 */
	public void setMilkRunService(MilkRunService milkRunService) {
		super.setMasterService(milkRunService);
	}
	 
	public MilkRunService getMilkRunService() {
		return (MilkRunService) super.getMasterService();
	}

	
    /**
     * FindPaginated para consulta Milk Run.
     * utiliza o método MilkRunService.findPaginated()
     */
    public ResultSetPage findPaginatedMilkRun(TypedFlatMap tfm) {
        ResultSetPage rsp = this.getMilkRunService().findPaginated(tfm);
        List dadosRetorno = new ArrayList();
        List list = rsp.getList();
        Iterator iterator = list.iterator();
        
        while (iterator.hasNext()) {
            MilkRun milkRun = (MilkRun) iterator.next();
            
            DomainValue tpIdentificacao = (DomainValue) milkRun.getCliente().getPessoa().getTpIdentificacao();
            milkRun.getCliente().getPessoa().setNrIdentificacao(FormatUtils.formatIdentificacao(tpIdentificacao.getValue(), milkRun.getCliente().getPessoa().getNrIdentificacao()));

            dadosRetorno.add(milkRun);
        }
        
        rsp.setList(dadosRetorno);
        return rsp; 
    }
    
    /**
     * Row count para o findPaginatedMilkRun
     */
    public Integer getRowCountMilkRun(TypedFlatMap tfm) {
        return this.getMilkRunService().getRowCount(tfm);
    }
    
	public List findLookupCliente(Map criteria) {		
		return this.getClienteService().findLookup(criteria);
	}
	
    public List findLookupBySgFilial(Map criteria) {
    	return this.getFilialService().findLookupBySgFilial((String)criteria.get("sgFilial"), (String)criteria.get("tpAcesso"));
    }	
    //FIXME: Verificar aonde é usado esse método
    public List findLookupComEnderecoCompleto(TypedFlatMap criteria) {
    	//TODO Verificar se IdFilial é necessário.
    	Long idFilial = criteria.getLong("filialByIdFilialResponsavel.idFilial");
    	Long nrColeta = criteria.getLong("nrColeta");
    	Long idPedidoColeta = criteria.getLong("idPedidoColeta");

    	return this.getPedidoColetaService().findLookupComEnderecoCompleto(nrColeta, idPedidoColeta, idFilial);
    }
    
	public List findLookupEnderecoPessoa(Map criteria) {		
		return this.getEnderecoPessoaService().findLookup(criteria);
	}
	
	public List findServico(Map criteria) {		
		List retornoPesquisa = this.getServicoService().find(criteria);
		FilterList filter = new FilterList(retornoPesquisa) {
			public Map filterItem(Object item) {
				Servico sv = (Servico)item;
				TypedFlatMap typedFlatMap = new TypedFlatMap();
				typedFlatMap.put("idServico", sv.getIdServico());
				typedFlatMap.put("dsServico", sv.getDsServico());
				return typedFlatMap;
	}	
		};
		return (List)filter.doFilter();
	}	
	
	public List findNaturezaProduto(Map criteria) {		
		List retornoPesquisa = this.getNaturezaProdutoService().find(criteria);
		FilterList filter = new FilterList(retornoPesquisa) {
			public Map filterItem(Object item) {
				NaturezaProduto np = (NaturezaProduto)item;
				TypedFlatMap typedFlatMap = new TypedFlatMap();
				typedFlatMap.put("idNaturezaProduto", np.getIdNaturezaProduto());
				typedFlatMap.put("dsNaturezaProduto", np.getDsNaturezaProduto());
				return typedFlatMap;
	}	
		};
		return (List)filter.doFilter();
	}	
	
	/**
	 * Retorna o EnderecoPessoa referente ao ID do Cliente
	 */
	public Map getEnderecoPessoa(TypedFlatMap criteria) {
		TypedFlatMap tfm = new TypedFlatMap();		
		Long idCliente = criteria.getLong("idCliente");
		
		List filtros = new ArrayList();
		filtros.add("idEnderecoPessoa");
		filtros.add("dsEndereco");
		filtros.add("nrEndereco");
		filtros.add("dsComplemento");
		filtros.add("dsBairro");
		filtros.add("nrCep");
		filtros.add("municipio.idMunicipio");
		filtros.add("municipio.nmMunicipio");
		filtros.add("municipio.unidadeFederativa.sgUnidadeFederativa");							

		List listEnderecoPessoa = this.getEnderecoPessoaService()
										.findEnderecoPessoaByIdPessoaByTipoEnderecoPessoa(idCliente, "COL", JTDateTimeUtils.getDataAtual());		
				
		if(listEnderecoPessoa.size() == 1) {			
			EnderecoPessoa enderecoPessoa = (EnderecoPessoa) listEnderecoPessoa.get(0);
			
			tfm.put("idEnderecoPessoa", enderecoPessoa.getIdEnderecoPessoa());
			tfm.put("dsEndereco", enderecoPessoa.getDsEndereco());
			tfm.put("nrEndereco", enderecoPessoa.getNrEndereco());
			tfm.put("dsComplemento", enderecoPessoa.getDsComplemento());
			tfm.put("dsBairro", enderecoPessoa.getDsBairro());
			tfm.put("nrCep", enderecoPessoa.getNrCep());
			tfm.put("municipio.idMunicipio", enderecoPessoa.getMunicipio().getIdMunicipio());
			tfm.put("municipio.nmMunicipio", enderecoPessoa.getMunicipio().getNmMunicipio());
			tfm.put("municipio.unidadeFederativa.sgUnidadeFederativa", enderecoPessoa.getMunicipio().getUnidadeFederativa().getSgUnidadeFederativa());
			
			return tfm;			
		} else if(listEnderecoPessoa.size() == 0) {			
			EnderecoPessoa enderecoPessoa = this.getEnderecoPessoaService().findEnderecoPessoaPadrao(idCliente);
			
			tfm.put("idEnderecoPessoa", enderecoPessoa.getIdEnderecoPessoa());
			tfm.put("dsEndereco", enderecoPessoa.getDsEndereco());
			tfm.put("nrEndereco", enderecoPessoa.getNrEndereco());
			tfm.put("dsComplemento", enderecoPessoa.getDsComplemento());
			tfm.put("dsBairro", enderecoPessoa.getDsBairro());
			tfm.put("nrCep", enderecoPessoa.getNrCep());
			tfm.put("municipio.idMunicipio", enderecoPessoa.getMunicipio().getIdMunicipio());
			tfm.put("municipio.nmMunicipio", enderecoPessoa.getMunicipio().getNmMunicipio());
			tfm.put("municipio.unidadeFederativa.sgUnidadeFederativa", enderecoPessoa.getMunicipio().getUnidadeFederativa().getSgUnidadeFederativa());
			
			return tfm;
		} else {	
			return null;
		}
	}
	

	/**
	 * Método que busca os dias da semana para preencher as listbox
	 * @param criteria
	 * @return
	 */
	public Map findRemetenteByIdMilkRun(TypedFlatMap criteria) {
		Long idMilkRun = criteria.getLong("milkRun.idMilkRun");
		
		if(idMilkRun != null) {		
	        List result = this.getSemanaRemetMrunService().findSemanaRemetMRunByIdMilkRun(idMilkRun);
	       
			// busca a lista de exigências
			// Objeto que irá retornar
			Map map = new HashMap();
			
			// Adiciona a list aninhada dentro do map (ficará como um map dentro de outro)
	    	// exibe uma lista com: Empresa - Hora Inicial a Hora Final		
			List semana1 = new ArrayList();
	    	List semana2 = new ArrayList();
	    	List semana3 = new ArrayList();
	    	List semana4 = new ArrayList();
		        	
	    	// Ordena Domingo
	    	ordenaSemanas(result, "domingo");
			for(Iterator itSemana=result.iterator();itSemana.hasNext();) {    			
	    		SemanaRemetMrun semanaRemetMrun = (SemanaRemetMrun)itSemana.next();
				if(semanaRemetMrun.getHrInicialDomingo() != null && semanaRemetMrun.getHrFinalDomingo() != null) {
		    		MilkRemetente milkRemetente = semanaRemetMrun.getMilkRemetente();
					Map mapDiaSemana = new HashMap();
					setDiaSemana(mapDiaSemana, milkRemetente.getCliente().getPessoa().getNmPessoa(), semanaRemetMrun.getIdSemanaRemetMrun(), 
							 semanaRemetMrun.getHrInicialDomingo(), semanaRemetMrun.getHrFinalDomingo(), "domingo", semanaRemetMrun.getNrDomingo());
					
					setMapSemana(semana1, semana2, semana3, semana4, semanaRemetMrun, mapDiaSemana);
				}
			}
			
			// Ordena Segunda Feira
			ordenaSemanas(result, "segundaFeira");
			for(Iterator itSemana=result.iterator();itSemana.hasNext();) {    			
	    		SemanaRemetMrun semanaRemetMrun = (SemanaRemetMrun)itSemana.next();
				if(semanaRemetMrun.getHrInicialSegundaFeira() != null && semanaRemetMrun.getHrFinalSegundaFeira() != null) {
		    		MilkRemetente milkRemetente = semanaRemetMrun.getMilkRemetente();
					Map mapDiaSemana = new HashMap();
					setDiaSemana(mapDiaSemana, milkRemetente.getCliente().getPessoa().getNmPessoa(), semanaRemetMrun.getIdSemanaRemetMrun(), 
								 semanaRemetMrun.getHrInicialSegundaFeira(), semanaRemetMrun.getHrFinalSegundaFeira(), "segundaFeira", semanaRemetMrun.getNrSegundaFeira());
					
					setMapSemana(semana1, semana2, semana3, semana4, semanaRemetMrun, mapDiaSemana);
				}
			}
			
			// Ordena Terça Feira
			ordenaSemanas(result, "tercaFeira");
			for(Iterator itSemana=result.iterator();itSemana.hasNext();) {    			
	    		SemanaRemetMrun semanaRemetMrun = (SemanaRemetMrun)itSemana.next();
				if(semanaRemetMrun.getHrInicialTercaFeira() != null && semanaRemetMrun.getHrFinalTercaFeira() != null) {
		    		MilkRemetente milkRemetente = semanaRemetMrun.getMilkRemetente();
					Map mapDiaSemana = new HashMap();
					setDiaSemana(mapDiaSemana, milkRemetente.getCliente().getPessoa().getNmPessoa(), semanaRemetMrun.getIdSemanaRemetMrun(), 
							 semanaRemetMrun.getHrInicialTercaFeira(), semanaRemetMrun.getHrFinalTercaFeira(), "tercaFeira", semanaRemetMrun.getNrTercaFeira());
					
					setMapSemana(semana1, semana2, semana3, semana4, semanaRemetMrun, mapDiaSemana);	
				}
			}
	
			// Ordena Quarta Feira
			ordenaSemanas(result, "quartaFeira");
			for(Iterator itSemana=result.iterator();itSemana.hasNext();) {    			
	    		SemanaRemetMrun semanaRemetMrun = (SemanaRemetMrun)itSemana.next();
				if(semanaRemetMrun.getHrInicialQuartaFeira() != null && semanaRemetMrun.getHrFinalQuartaFeira() != null) {
		    		MilkRemetente milkRemetente = semanaRemetMrun.getMilkRemetente();
					Map mapDiaSemana = new HashMap();
					setDiaSemana(mapDiaSemana, milkRemetente.getCliente().getPessoa().getNmPessoa(), semanaRemetMrun.getIdSemanaRemetMrun(), 
							 semanaRemetMrun.getHrInicialQuartaFeira(), semanaRemetMrun.getHrFinalQuartaFeira(), "quartaFeira", semanaRemetMrun.getNrQuartaFeira());
					
					setMapSemana(semana1, semana2, semana3, semana4, semanaRemetMrun, mapDiaSemana);	
				}
			}
			
			// Ordena Quinta Feira
			ordenaSemanas(result, "quintaFeira");
			for(Iterator itSemana=result.iterator();itSemana.hasNext();) {    			
	    		SemanaRemetMrun semanaRemetMrun = (SemanaRemetMrun)itSemana.next();
				if(semanaRemetMrun.getHrInicialQuintaFeira() != null && semanaRemetMrun.getHrFinalQuintaFeira() != null) {
		    		MilkRemetente milkRemetente = semanaRemetMrun.getMilkRemetente();
					Map mapDiaSemana = new HashMap();
					setDiaSemana(mapDiaSemana, milkRemetente.getCliente().getPessoa().getNmPessoa(), semanaRemetMrun.getIdSemanaRemetMrun(), 
							 semanaRemetMrun.getHrInicialQuintaFeira(), semanaRemetMrun.getHrFinalQuintaFeira(), "quintaFeira", semanaRemetMrun.getNrQuintaFeira());
					
					setMapSemana(semana1, semana2, semana3, semana4, semanaRemetMrun, mapDiaSemana);
				}
			}
			
			// Ordena Sexta Feira
			ordenaSemanas(result, "sextaFeira");
			for(Iterator itSemana=result.iterator();itSemana.hasNext();) {    			
	    		SemanaRemetMrun semanaRemetMrun = (SemanaRemetMrun)itSemana.next();
				if(semanaRemetMrun.getHrInicialSextaFeira() != null && semanaRemetMrun.getHrFinalSextaFeira() != null) {
		    		MilkRemetente milkRemetente = semanaRemetMrun.getMilkRemetente();
					Map mapDiaSemana = new HashMap();
					setDiaSemana(mapDiaSemana, milkRemetente.getCliente().getPessoa().getNmPessoa(), semanaRemetMrun.getIdSemanaRemetMrun(), 
							 semanaRemetMrun.getHrInicialSextaFeira(), semanaRemetMrun.getHrFinalSextaFeira(), "sextaFeira", semanaRemetMrun.getNrSextaFeira());
					
					setMapSemana(semana1, semana2, semana3, semana4, semanaRemetMrun, mapDiaSemana);
				}
			}
			
			// Ordena Sábado
			ordenaSemanas(result, "sabado");
			for(Iterator itSemana=result.iterator();itSemana.hasNext();) {    			
	    		SemanaRemetMrun semanaRemetMrun = (SemanaRemetMrun)itSemana.next();
				if(semanaRemetMrun.getHrInicialSabado() != null && semanaRemetMrun.getHrFinalSabado() != null) {
		    		MilkRemetente milkRemetente = semanaRemetMrun.getMilkRemetente();
					Map mapDiaSemana = new HashMap();
					setDiaSemana(mapDiaSemana, milkRemetente.getCliente().getPessoa().getNmPessoa(), semanaRemetMrun.getIdSemanaRemetMrun(), 
							 semanaRemetMrun.getHrInicialSabado(), semanaRemetMrun.getHrFinalSabado(), "sabado", semanaRemetMrun.getNrSabado());
					
					setMapSemana(semana1, semana2, semana3, semana4, semanaRemetMrun, mapDiaSemana);
				}
			}
	
	    		
	   		//Deve-se aninhar a list como um map
	   		//pois assim se torna um tipo de aninhamento esperado.		
	    	map.put("semana1", semana1);
	    	map.put("semana2", semana2);
	    	map.put("semana3", semana3);
	    	map.put("semana4", semana4);
	
	    	return map;
		} else {
			return null;
		}
	}

	/**
	 * Seta para as lists de semana o objeto semana referente ao tpSemanaDoMes 
	 * 
	 * @param semana1
	 * @param semana2
	 * @param semana3
	 * @param semana4
	 * @param semanaRemetMrun
	 * @param mapDiaSemana
	 */
	private void setMapSemana(List semana1, List semana2, List semana3, List semana4, 
							  SemanaRemetMrun semanaRemetMrun, Map mapDiaSemana) {
		if (semanaRemetMrun.getTpSemanaDoMes().getValue().equals("P")) {           			
			semana1.add(mapDiaSemana);
		} else if (semanaRemetMrun.getTpSemanaDoMes().getValue().equals("S")) {
			semana2.add(mapDiaSemana);        			
		} else if (semanaRemetMrun.getTpSemanaDoMes().getValue().equals("T")) {
			semana3.add(mapDiaSemana);        			
		} else if (semanaRemetMrun.getTpSemanaDoMes().getValue().equals("Q")) {
			semana4.add(mapDiaSemana);        			
		}
	}

	/**
	 * Método que coloca a descricao e o id do dia da semana do registro da tabela SEMANA_REMET_MRUN
	 * em um map para passar para a tela.
	 * 
	 * @param mapDiaSemana
	 * @param pessoa
	 * @param idSemanaRemetMrun
	 * @param horaInicial
	 * @param horaFinal
	 * @param diaSemana
	 */
	private void setDiaSemana(Map mapDiaSemana, String nmPessoa, Long idSemanaRemetMrun, 
							  TimeOfDay horaInicial, TimeOfDay horaFinal, String diaSemana, Short nrOrdem) {		
		List listDiaSemana = new ArrayList();
		String labelAte = " " + configuracoesFacade.getMensagem("ate") + " ";
		String entrega = nmPessoa + " - " + JTFormatUtils.format(horaInicial, JTFormatUtils.SHORT) + labelAte + 
											JTFormatUtils.format(horaFinal, JTFormatUtils.SHORT);
		Map mapDia = new HashMap();		
		mapDia.put("id", idSemanaRemetMrun);
		mapDia.put("descricao", entrega);
		Integer ordem = Integer.valueOf(nrOrdem.toString());
		mapDia.put("ordem", Integer.valueOf(ordem.intValue() - 1).toString());
		
		listDiaSemana.add(mapDia);
		mapDiaSemana.put(diaSemana, listDiaSemana);				
	}
	
	/**
	 * Concatena os dados do endereço de pessoa.
	 * 
	 * @param enderecoPessoa
	 * @return
	 */
	public String concatenaEndereco(EnderecoPessoa enderecoPessoa) {
		String strEndereco = enderecoPessoa.getDsEndereco() + ", nº: " + enderecoPessoa.getNrEndereco();
		if(enderecoPessoa.getDsComplemento() != null) {
			strEndereco = strEndereco + " / compl.: " + enderecoPessoa.getDsComplemento();
		}
		strEndereco = strEndereco + "\nBairro: " + enderecoPessoa.getDsBairro() + "\nCEP: " + enderecoPessoa.getNrCep();
		
		return strEndereco;				
	}	
	
	/**
	 * Ordena a list de acordo com o dia.
	 * @param result
	 */
	private void ordenaSemanas(List result, String diaSemana) {
		if(diaSemana.equals("domingo")) {
			Collections.sort( result, new Comparator() {
	    		public int compare(Object obj1, Object obj2) {
	    			SemanaRemetMrun semanaRemetMrun1 = (SemanaRemetMrun)obj1;
	    			SemanaRemetMrun semanaRemetMrun2 = (SemanaRemetMrun)obj2;
	    			return semanaRemetMrun1.getNrDomingo().compareTo(semanaRemetMrun2.getNrDomingo());
	    		}}
	    	);
		}
		if(diaSemana.equals("segundaFeira")) {
			Collections.sort( result, new Comparator() {
	    		public int compare(Object obj1, Object obj2) {
	    			SemanaRemetMrun semanaRemetMrun1 = (SemanaRemetMrun)obj1;
	    			SemanaRemetMrun semanaRemetMrun2 = (SemanaRemetMrun)obj2;
	    			return semanaRemetMrun1.getNrSegundaFeira().compareTo(semanaRemetMrun2.getNrSegundaFeira());
	    		}}
	    	);
		}
		if(diaSemana.equals("tercaFeira")) {
			Collections.sort( result, new Comparator() {
	    		public int compare(Object obj1, Object obj2) {
	    			SemanaRemetMrun semanaRemetMrun1 = (SemanaRemetMrun)obj1;
	    			SemanaRemetMrun semanaRemetMrun2 = (SemanaRemetMrun)obj2;
	    			return semanaRemetMrun1.getNrTercaFeira().compareTo(semanaRemetMrun2.getNrTercaFeira());
	    		}}
	    	);
		}
		if(diaSemana.equals("quartaFeira")) {
			Collections.sort( result, new Comparator() {
	    		public int compare(Object obj1, Object obj2) {
	    			SemanaRemetMrun semanaRemetMrun1 = (SemanaRemetMrun)obj1;
	    			SemanaRemetMrun semanaRemetMrun2 = (SemanaRemetMrun)obj2;
	    			return semanaRemetMrun1.getNrQuartaFeira().compareTo(semanaRemetMrun2.getNrQuartaFeira());
	    		}}
	    	);
		}
		if(diaSemana.equals("quintaFeira")) {
			Collections.sort( result, new Comparator() {
	    		public int compare(Object obj1, Object obj2) {
	    			SemanaRemetMrun semanaRemetMrun1 = (SemanaRemetMrun)obj1;
	    			SemanaRemetMrun semanaRemetMrun2 = (SemanaRemetMrun)obj2;
	    			return semanaRemetMrun1.getNrQuintaFeira().compareTo(semanaRemetMrun2.getNrQuintaFeira());
	    		}}
	    	);
		}
		if(diaSemana.equals("sextaFeira")) {
			Collections.sort( result, new Comparator() {
	    		public int compare(Object obj1, Object obj2) {
	    			SemanaRemetMrun semanaRemetMrun1 = (SemanaRemetMrun)obj1;
	    			SemanaRemetMrun semanaRemetMrun2 = (SemanaRemetMrun)obj2;
	    			return semanaRemetMrun1.getNrSextaFeira().compareTo(semanaRemetMrun2.getNrSextaFeira());
	    		}}
	    	);
		}
		if(diaSemana.equals("sabado")) {
			Collections.sort( result, new Comparator() {
	    		public int compare(Object obj1, Object obj2) {
	    			SemanaRemetMrun semanaRemetMrun1 = (SemanaRemetMrun)obj1;
	    			SemanaRemetMrun semanaRemetMrun2 = (SemanaRemetMrun)obj2;
	    			return semanaRemetMrun1.getNrSabado().compareTo(semanaRemetMrun2.getNrSabado());
	    		}}
	    	);
		}
	}
	
	
	/**
	 * #######################################
	 * # Inicio dos métodos para tela de DF2 #
	 * #######################################
	 */
    
	public Serializable store(TypedFlatMap mapBean) {
		// Pega o pai da sessão
    	MasterEntry entry = getMasterFromSession(mapBean.getLong("milkRun.idMilkRun"), true);    	
    	MilkRun milkRun = (MilkRun) entry.getMaster();

    	// Seta os dados no pai
		milkRun.setIdMilkRun(mapBean.getLong("milkRun.idMilkRun"));
		milkRun.setBlColetasInterdependentes(mapBean.getBoolean("milkRun.blColetasInterdependentes"));		
		Cliente cliente = this.getClienteService().findByIdInitLazyProperties(mapBean.getLong("milkRun.cliente.idCliente"), false);
		milkRun.setCliente(cliente);
		
		// Pega os filho(s) da sessão
		ItemList items = getItemsFromSession(entry, "remetentes");
		
		// Chama o método store da service de milkrun
		ItemListConfig itemConfig = getMasterConfig().getItemListConfig("remetentes");
    	Serializable id = getMilkRunService().store(milkRun, items, itemConfig, mapBean);		
    	items.resetItemsState(); 
    	updateMasterInSession(entry);
    	
    	return id;
    }


	/**
	 * Salva a referencia do objeto Master na sessão.
	 * não devem ser inicializadas as coleções que representam os filhos
	 * já que o usuário pode vir a não utilizar a aba de filhos, evitando assim
	 * a carga desnecessária de objetos na sessão e a partir do banco de dados.
	 */
    public Object findById(java.lang.Long id) {
		Object masterObj = getMilkRunService().findById(id);
		putMasterInSession(masterObj); 
		
		return masterObj;
    }
    
    
    /***
     * Remoção de um conjunto de registros Master.
     * 
     * @param ids
	 *
     */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	getMilkRunService().removeByIds(ids);
    }

    /**
     * Remoção de um registro Master.
     * @param id
     */
    public void removeById(Long id) {
    	getMilkRunService().removeById(id);
		newMaster(); 
    }
    
    /**
     * Salva um item Descrição Padrão na sessão.
     * 
     * @param bean
     * @return
     */
    public Serializable saveMilkRemetente(TypedFlatMap parameters) {
    	// verificar se o item ja foi cadastrado
    	Long masterId = (Long) getMasterId(parameters);
    	
    	// Guarda o id do registro, caso ele esteja sendo editado 
    	Long idMilkRemetente = parameters.getLong("idMilkRemetente");

    	MasterEntry entry = getMasterFromSession(masterId, true);
    	ItemList items = getItemsFromSession(entry, "remetentes");
    	if (items != null) {
    		ItemListConfig itemConfig = getMasterConfig().getItemListConfig("remetentes"); 
	    	for (Iterator iter = items.iterator(getMasterId(parameters), itemConfig); iter.hasNext();) {
	    		MilkRemetente milkRemetente = (MilkRemetente) iter.next();
	    		// Se já tem um remetente cadastrado lança uma exception
	    		if (milkRemetente.getCliente() != null && 
	    			milkRemetente.getCliente().getIdCliente().compareTo(parameters.getLong("cliente.idCliente")) == 0){

	    			if (idMilkRemetente == null || milkRemetente.getIdMilkRemetente().compareTo(idMilkRemetente) != 0)
	    				throw new BusinessException("LMS-02023");
	    		}
			}
    	}
    	
    	return saveItemInstance(parameters, "remetentes");
    }

    
    public ResultSetPage findPaginatedMilkRemetente(Map parameters) {
    	ResultSetPage rspMilkRemetente = findPaginatedItemList(parameters, "remetentes");
    	
    	List listMilkRemetente = new ArrayList();
    	for(int i=0; i< rspMilkRemetente.getList().size(); i++) {
    		MilkRemetente milkRemetente = (MilkRemetente) rspMilkRemetente.getList().get(i);    		    		
    		TypedFlatMap mapMilkRemetente = new TypedFlatMap();
    		
    		mapMilkRemetente.put("idMilkRemetente", milkRemetente.getIdMilkRemetente());
    		
    		mapMilkRemetente.put("cliente.idCliente", milkRemetente.getCliente().getIdCliente());
    		mapMilkRemetente.put("cliente.pessoa.tpIdentificacao", milkRemetente.getCliente().getPessoa().getTpIdentificacao());    		  
            DomainValue tpIdentificacao = (DomainValue) milkRemetente.getCliente().getPessoa().getTpIdentificacao();
    		mapMilkRemetente.put("cliente.pessoa.nrIdentificacao", FormatUtils.formatIdentificacao(tpIdentificacao.getValue(), milkRemetente.getCliente().getPessoa().getNrIdentificacao()));
    		mapMilkRemetente.put("cliente.pessoa.nmPessoa", milkRemetente.getCliente().getPessoa().getNmPessoa());
    		
    		mapMilkRemetente.put("enderecoPessoa.idEnderecoPessoa", milkRemetente.getEnderecoPessoa().getIdEnderecoPessoa());
    		mapMilkRemetente.put("enderecoPessoa.dsEndereco", milkRemetente.getEnderecoPessoa().getDsEndereco());
    		mapMilkRemetente.put("enderecoPessoa.nrEndereco", milkRemetente.getEnderecoPessoa().getNrEndereco());
    		mapMilkRemetente.put("enderecoPessoa.dsComplemento", milkRemetente.getEnderecoPessoa().getDsComplemento());
    		mapMilkRemetente.put("enderecoPessoa.dsBairro", milkRemetente.getEnderecoPessoa().getDsBairro());
    		mapMilkRemetente.put("enderecoPessoa.nrCep", milkRemetente.getEnderecoPessoa().getNrCep());
    		mapMilkRemetente.put("enderecoPessoa.municipio.idMunicipio", milkRemetente.getEnderecoPessoa().getMunicipio().getIdMunicipio());
    		mapMilkRemetente.put("enderecoPessoa.municipio.nmMunicipio", milkRemetente.getEnderecoPessoa().getMunicipio().getNmMunicipio());
    		mapMilkRemetente.put("enderecoPessoa.municipio.unidadeFederativa.sgUnidadeFederativa", milkRemetente.getEnderecoPessoa().getMunicipio().getUnidadeFederativa().getSgUnidadeFederativa());
    		
    		mapMilkRemetente.put("servico.idServico", milkRemetente.getServico().getIdServico());    		
    		mapMilkRemetente.put("servico.dsServico", milkRemetente.getServico().getDsServico());

    		mapMilkRemetente.put("naturezaProduto.idNaturezaProduto", milkRemetente.getNaturezaProduto().getIdNaturezaProduto());
    		mapMilkRemetente.put("naturezaProduto.dsNaturezaProduto", milkRemetente.getNaturezaProduto().getDsNaturezaProduto());

    		for(int j=0; j<milkRemetente.getSemanaRemetMruns().size(); j++) {
    			SemanaRemetMrun semanaRemetMrun = (SemanaRemetMrun) milkRemetente.getSemanaRemetMruns().get(j);
    			
        		mapMilkRemetente.put("nrSegSemana" + (j + 1), semanaRemetMrun.getNrSegundaFeira());
        		mapMilkRemetente.put("segInicioSemana" + (j + 1), semanaRemetMrun.getHrInicialSegundaFeira());
        		mapMilkRemetente.put("segFinalSemana" + (j + 1), semanaRemetMrun.getHrFinalSegundaFeira());
        		
        		mapMilkRemetente.put("nrTerSemana" + (j + 1), semanaRemetMrun.getNrTercaFeira());
        		mapMilkRemetente.put("terInicioSemana" + (j + 1), semanaRemetMrun.getHrInicialTercaFeira());
        		mapMilkRemetente.put("terFinalSemana" + (j + 1), semanaRemetMrun.getHrFinalTercaFeira());
        		
        		mapMilkRemetente.put("nrQuaSemana" + (j + 1), semanaRemetMrun.getNrQuartaFeira());
        		mapMilkRemetente.put("quaInicioSemana" + (j + 1), semanaRemetMrun.getHrInicialQuartaFeira());
        		mapMilkRemetente.put("quaFinalSemana" + (j + 1), semanaRemetMrun.getHrFinalQuartaFeira());
        		
        		mapMilkRemetente.put("nrQuiSemana" + (j + 1), semanaRemetMrun.getNrQuintaFeira());
        		mapMilkRemetente.put("quiInicioSemana" + (j + 1), semanaRemetMrun.getHrInicialQuintaFeira());
        		mapMilkRemetente.put("quiFinalSemana" + (j + 1), semanaRemetMrun.getHrFinalQuintaFeira());
        		
        		mapMilkRemetente.put("nrSexSemana" + (j + 1), semanaRemetMrun.getNrSextaFeira());
        		mapMilkRemetente.put("sexInicioSemana" + (j + 1), semanaRemetMrun.getHrInicialSextaFeira());
        		mapMilkRemetente.put("sexFinalSemana" + (j + 1), semanaRemetMrun.getHrFinalSextaFeira());
        		
        		mapMilkRemetente.put("nrSabSemana" + (j + 1), semanaRemetMrun.getNrSabado());
        		mapMilkRemetente.put("sabInicioSemana" + (j + 1), semanaRemetMrun.getHrInicialSabado());
        		mapMilkRemetente.put("sabFinalSemana" + (j + 1), semanaRemetMrun.getHrFinalSabado());
        		
        		mapMilkRemetente.put("nrDomSemana" + (j + 1), semanaRemetMrun.getNrDomingo());
        		mapMilkRemetente.put("domInicioSemana" + (j + 1), semanaRemetMrun.getHrInicialDomingo());
        		mapMilkRemetente.put("domFinalSemana" + (j + 1), semanaRemetMrun.getHrFinalDomingo());
    		}  		
    		
    		listMilkRemetente.add(mapMilkRemetente);
    	}
    	
    	rspMilkRemetente.setList(listMilkRemetente);
    	
    	return rspMilkRemetente;   
    }
    
    public Integer getRowCountMilkRemetente(Map parameters){
    	return getRowCountItemList(parameters, "remetentes");
    }
    
    public Object findByIdMilkRemetente(MasterDetailKey key) {
    	MilkRemetente milkRemetente = (MilkRemetente)findItemById(key, "remetentes");    	
		TypedFlatMap mapMilkRemetente = new TypedFlatMap();
		
		mapMilkRemetente.put("idMilkRemetente", milkRemetente.getIdMilkRemetente());
		
		mapMilkRemetente.put("cliente.idCliente", milkRemetente.getCliente().getIdCliente());
		mapMilkRemetente.put("cliente.pessoa.tpIdentificacao", milkRemetente.getCliente().getPessoa().getTpIdentificacao());
		mapMilkRemetente.put("cliente.pessoa.nrIdentificacao", milkRemetente.getCliente().getPessoa().getNrIdentificacao());				
		mapMilkRemetente.put("cliente.pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(milkRemetente.getCliente().getPessoa()));
		mapMilkRemetente.put("cliente.pessoa.nmPessoa", milkRemetente.getCliente().getPessoa().getNmPessoa());
		
		mapMilkRemetente.put("endereco", concatenaEndereco(milkRemetente.getEnderecoPessoa()));
		
		mapMilkRemetente.put("enderecoPessoa.idEnderecoPessoa", milkRemetente.getEnderecoPessoa().getIdEnderecoPessoa());
		mapMilkRemetente.put("enderecoPessoa.dsEndereco", milkRemetente.getEnderecoPessoa().getDsEndereco());
		mapMilkRemetente.put("enderecoPessoa.nrEndereco", milkRemetente.getEnderecoPessoa().getNrEndereco());
		mapMilkRemetente.put("enderecoPessoa.dsComplemento", milkRemetente.getEnderecoPessoa().getDsComplemento());
		mapMilkRemetente.put("enderecoPessoa.dsBairro", milkRemetente.getEnderecoPessoa().getDsBairro());
		mapMilkRemetente.put("enderecoPessoa.nrCep", milkRemetente.getEnderecoPessoa().getNrCep());
		mapMilkRemetente.put("enderecoPessoa.municipio.idMunicipio", milkRemetente.getEnderecoPessoa().getMunicipio().getIdMunicipio());
		mapMilkRemetente.put("enderecoPessoa.municipio.nmMunicipio", milkRemetente.getEnderecoPessoa().getMunicipio().getNmMunicipio());
		mapMilkRemetente.put("enderecoPessoa.municipio.unidadeFederativa.sgUnidadeFederativa", milkRemetente.getEnderecoPessoa().getMunicipio().getUnidadeFederativa().getSgUnidadeFederativa());
		
		mapMilkRemetente.put("servico.idServico", milkRemetente.getServico().getIdServico());    		
		mapMilkRemetente.put("servico.dsServico", milkRemetente.getServico().getDsServico());

		mapMilkRemetente.put("naturezaProduto.idNaturezaProduto", milkRemetente.getNaturezaProduto().getIdNaturezaProduto());
		mapMilkRemetente.put("naturezaProduto.dsNaturezaProduto", milkRemetente.getNaturezaProduto().getDsNaturezaProduto());
		
		for(int j=0; j<milkRemetente.getSemanaRemetMruns().size(); j++) {
			SemanaRemetMrun semanaRemetMrun = (SemanaRemetMrun) milkRemetente.getSemanaRemetMruns().get(j);
			
    		mapMilkRemetente.put("nrSegSemana" + (j + 1), semanaRemetMrun.getNrSegundaFeira());
    		mapMilkRemetente.put("segInicioSemana" + (j + 1), semanaRemetMrun.getHrInicialSegundaFeira());
    		mapMilkRemetente.put("segFinalSemana" + (j + 1), semanaRemetMrun.getHrFinalSegundaFeira());
    		
    		mapMilkRemetente.put("nrTerSemana" + (j + 1), semanaRemetMrun.getNrTercaFeira());
    		mapMilkRemetente.put("terInicioSemana" + (j + 1), semanaRemetMrun.getHrInicialTercaFeira());
    		mapMilkRemetente.put("terFinalSemana" + (j + 1), semanaRemetMrun.getHrFinalTercaFeira());
    		
    		mapMilkRemetente.put("nrQuaSemana" + (j + 1), semanaRemetMrun.getNrQuartaFeira());
    		mapMilkRemetente.put("quaInicioSemana" + (j + 1), semanaRemetMrun.getHrInicialQuartaFeira());
    		mapMilkRemetente.put("quaFinalSemana" + (j + 1), semanaRemetMrun.getHrFinalQuartaFeira());
    		
    		mapMilkRemetente.put("nrQuiSemana" + (j + 1), semanaRemetMrun.getNrQuintaFeira());
    		mapMilkRemetente.put("quiInicioSemana" + (j + 1), semanaRemetMrun.getHrInicialQuintaFeira());
    		mapMilkRemetente.put("quiFinalSemana" + (j + 1), semanaRemetMrun.getHrFinalQuintaFeira());
    		
    		mapMilkRemetente.put("nrSexSemana" + (j + 1), semanaRemetMrun.getNrSextaFeira());
    		mapMilkRemetente.put("sexInicioSemana" + (j + 1), semanaRemetMrun.getHrInicialSextaFeira());
    		mapMilkRemetente.put("sexFinalSemana" + (j + 1), semanaRemetMrun.getHrFinalSextaFeira());
    		
    		mapMilkRemetente.put("nrSabSemana" + (j + 1), semanaRemetMrun.getNrSabado());
    		mapMilkRemetente.put("sabInicioSemana" + (j + 1), semanaRemetMrun.getHrInicialSabado());
    		mapMilkRemetente.put("sabFinalSemana" + (j + 1), semanaRemetMrun.getHrFinalSabado());
    		
    		mapMilkRemetente.put("nrDomSemana" + (j + 1), semanaRemetMrun.getNrDomingo());
    		mapMilkRemetente.put("domInicioSemana" + (j + 1), semanaRemetMrun.getHrInicialDomingo());
    		mapMilkRemetente.put("domFinalSemana" + (j + 1), semanaRemetMrun.getHrFinalDomingo());
		}  			
		
		return mapMilkRemetente;    	
    	
    }
    
	public void modifyItemValues(Object newBean, Object bean) {
        Set ignore = new HashSet();
        ignore.add("idIntegranteEquipe"); // id do detalhe
        ignore.add("versao");
        ignore.add("equipe"); // mestre
        ReflectionUtils.syncObjectProperties(bean, newBean, ignore);
    }

    
    /***
     * Remove uma lista de registros items.
     *  
     * @param ids ids dos registros item a serem removidos.
     * 
	 *
     */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIdsMilkRemetente(List ids) {
    	super.removeItemByIds(ids, "remetentes");
    }

	protected MasterEntryConfig createMasterConfig(MasterDetailFactory masterFactory) { 
		
		MasterEntryConfig config = masterFactory.createMasterEntryConfig(MilkRun.class);

		// Comparador para realizar a ordenação dos items filhos de acordo com a regra de negócio.
    	Comparator descComparator = new Comparator() {
			public int compare(Object obj1, Object obj2) {
				MilkRemetente milkRemetente1 = (MilkRemetente)obj1;
				MilkRemetente milkRemetente2 = (MilkRemetente)obj2;
        		return milkRemetente1.getCliente().getPessoa().getNmPessoa().compareTo(
        					milkRemetente2.getCliente().getPessoa().getNmPessoa()); 		
			} 		
    	};
    	
    	
    	// Esta instancia será responsavel por carregar os items filhos na sessão a partir do banco de dados.
    	ItemListConfig itemInit = new ItemListConfig() {
 
			public List initialize(Long masterId) { 
				return getMilkRemetenteService().findMilkRemetente(masterId);
			}

			public Integer getRowCount(Long masterId) {
				Integer count = getMilkRemetenteService().getRowCountMilkRemetente(masterId);
				return count;
			}

			public void modifyItemValues(Object newBean, Object bean) {
				MilkRemetente newRemetente = (MilkRemetente) newBean;
				MilkRemetente oldRemetente = (MilkRemetente) bean;
				
				for (int i = 0; i < newRemetente.getSemanaRemetMruns().size(); i++) {
					SemanaRemetMrun newSemana = (SemanaRemetMrun) newRemetente.getSemanaRemetMruns().get(i);
					SemanaRemetMrun oldSemana = (SemanaRemetMrun) oldRemetente.getSemanaRemetMruns().get(i);
					
					oldSemana.setNrSegundaFeira(newSemana.getNrSegundaFeira());
					oldSemana.setHrInicialSegundaFeira(newSemana.getHrInicialSegundaFeira());
					oldSemana.setHrFinalSegundaFeira(newSemana.getHrFinalSegundaFeira());
					oldSemana.setNrTercaFeira(newSemana.getNrTercaFeira());
					oldSemana.setHrInicialTercaFeira(newSemana.getHrInicialTercaFeira());
					oldSemana.setHrFinalTercaFeira(newSemana.getHrFinalTercaFeira());
					oldSemana.setNrQuartaFeira(newSemana.getNrQuartaFeira());
					oldSemana.setHrInicialQuartaFeira(newSemana.getHrInicialQuartaFeira());
					oldSemana.setHrFinalQuartaFeira(newSemana.getHrFinalQuartaFeira());
					oldSemana.setNrQuintaFeira(newSemana.getNrQuintaFeira());
					oldSemana.setHrInicialQuintaFeira(newSemana.getHrInicialQuintaFeira());
					oldSemana.setHrFinalQuintaFeira(newSemana.getHrFinalQuintaFeira());
					oldSemana.setNrSextaFeira(newSemana.getNrSextaFeira());
					oldSemana.setHrInicialSextaFeira(newSemana.getHrInicialSextaFeira());
					oldSemana.setHrFinalSextaFeira(newSemana.getHrFinalSextaFeira());
					oldSemana.setNrSabado(newSemana.getNrSabado());
					oldSemana.setHrInicialSabado(newSemana.getHrInicialSabado());
					oldSemana.setHrFinalSabado(newSemana.getHrFinalSabado());
					oldSemana.setNrDomingo(newSemana.getNrDomingo());
					oldSemana.setHrInicialDomingo(newSemana.getHrInicialDomingo());
					oldSemana.setHrFinalDomingo(newSemana.getHrFinalDomingo());					
				}
			
			}

			public List filterItems(List items, Map parameters) {
				List lista = super.filterItems(items, parameters);
				return lista;
			}

			public Integer rowCountFilteredItems(List items, Map parameters) {
				return super.rowCountFilteredItems(items, parameters);
			}

			public Map configItemDomainProperties() {
				return null;
			}

			public Object populateNewItemInstance(Map parameters, Object bean) {
				MilkRemetente milkRemetente = (MilkRemetente)bean;
				
				TypedFlatMap param = (TypedFlatMap) parameters;
								
				milkRemetente.setIdMilkRemetente(param.getLong("idMilkRemetente"));				
				milkRemetente.setEnderecoPessoa(getEnderecoPessoaService().findById(param.getLong("enderecoPessoa.idEnderecoPessoa")));
				if(param.getLong("masterId") != null) {
					milkRemetente.setMilkRun(getMilkRunService().findById(param.getLong("masterId")));
				}
				milkRemetente.setNaturezaProduto(getNaturezaProdutoService().findById(param.getLong("naturezaProduto.idNaturezaProduto")));
				milkRemetente.setServico(getServicoService().findById(param.getLong("servico.idServico")));
				milkRemetente.setCliente(getClienteService().findById(param.getLong("cliente.idCliente")));
				
				List listSemanaRemetMruns = new ArrayList();
								
				// Insere registro para a 'PRIMEIRA' semana.
				SemanaRemetMrun semana1 = new SemanaRemetMrun();				
				if(param.getLong("idSemanaRemetMrun") != null) {
					semana1.setIdSemanaRemetMrun(param.getLong("idSemanaRemetMrun"));	
				} else {
					semana1.setIdSemanaRemetMrun(null);
				}
				
				setDiasNasSemanas(param, semana1, "1");				
	
				DomainValue primeiraSemana = new DomainValue("P");
				semana1.setTpSemanaDoMes(primeiraSemana);

				semana1.setMilkRemetente(milkRemetente);					
				listSemanaRemetMruns.add(semana1);
				
				// ====================================================================================================
				
				// Insere registro para a 'SEGUNDA' semana.
				SemanaRemetMrun semana2 = new SemanaRemetMrun();				
				if(param.getLong("idSemanaRemetMrun") != null) {
					semana2.setIdSemanaRemetMrun(param.getLong("idSemanaRemetMrun"));	
				} else {
					semana2.setIdSemanaRemetMrun(null);
				}
				
				setDiasNasSemanas(param, semana2, "2");
						
				DomainValue segundaSemana = new DomainValue("S");
				semana2.setTpSemanaDoMes(segundaSemana);

				semana2.setMilkRemetente(milkRemetente);					
				listSemanaRemetMruns.add(semana2);				
				
				// ====================================================================================================
				
				// Insere registro para a 'TERCEIRA' semana.
				SemanaRemetMrun semana3 = new SemanaRemetMrun();				
				if(param.getLong("idSemanaRemetMrun") != null) {
					semana3.setIdSemanaRemetMrun(param.getLong("idSemanaRemetMrun"));	
				} else {
					semana3.setIdSemanaRemetMrun(null);
				}
				
				setDiasNasSemanas(param, semana3, "3");
				
				DomainValue terceiraSemana = new DomainValue("T");
				semana3.setTpSemanaDoMes(terceiraSemana);

				semana3.setMilkRemetente(milkRemetente);					
				listSemanaRemetMruns.add(semana3);
				
				// ====================================================================================================
								
				// Insere registro para a 'QUARTA' semana.
				SemanaRemetMrun semana4 = new SemanaRemetMrun();				
				if(param.getLong("idSemanaRemetMrun") != null) {
					semana4.setIdSemanaRemetMrun(param.getLong("idSemanaRemetMrun"));	
				} else {
					semana4.setIdSemanaRemetMrun(null);
				}
				
				setDiasNasSemanas(param, semana4, "4");
				
				DomainValue quartaSemana = new DomainValue("Q");
				semana4.setTpSemanaDoMes(quartaSemana);

				semana4.setMilkRemetente(milkRemetente);					
				listSemanaRemetMruns.add(semana4);							
				
				// ====================================================================================================				
				
				milkRemetente.setSemanaRemetMruns(listSemanaRemetMruns);
				
				return milkRemetente;
			}
			
			private void setDiasNasSemanas(TypedFlatMap parameters, SemanaRemetMrun semanaRemetMrun, String nrSemana) {
				// Seta Numero Domingo, Domingo Inicio e Domingo Final				
				if(parameters.getTimeOfDay("domInicioSemana" + nrSemana) != null || parameters.getTimeOfDay("domFinalSemana" + nrSemana) != null) {
					if(parameters.getShort("nrDomSemana" + nrSemana) != null) {
						semanaRemetMrun.setNrDomingo(parameters.getShort("nrDomSemana" + nrSemana));
					} else {
						semanaRemetMrun.setNrDomingo(null);
					}
					
					if(parameters.getTimeOfDay("domInicioSemana" + nrSemana) != null && parameters.getTimeOfDay("domFinalSemana" + nrSemana) != null) {
						semanaRemetMrun.setHrInicialDomingo(parameters.getTimeOfDay("domInicioSemana" + nrSemana));
						semanaRemetMrun.setHrFinalDomingo(parameters.getTimeOfDay("domFinalSemana" + nrSemana));
					} else {
						throw new BusinessException("LMS-02019");
					}
				} else {					
					semanaRemetMrun.setNrDomingo(Short.valueOf("0"));
				}				
				
				// Seta Numero Segunda-Feira, Segunda Inicio e Segunda Final
				if(parameters.getTimeOfDay("segInicioSemana" + nrSemana) != null || parameters.getTimeOfDay("segFinalSemana" + nrSemana) != null) {
					if(parameters.getShort("nrSegSemana" + nrSemana) != null) {
						semanaRemetMrun.setNrSegundaFeira(parameters.getShort("nrSegSemana" + nrSemana));
					} else {
						semanaRemetMrun.setNrSegundaFeira(null);
					}
					
					if(parameters.getTimeOfDay("segInicioSemana" + nrSemana) != null && parameters.getTimeOfDay("segFinalSemana" + nrSemana) != null) {
						semanaRemetMrun.setHrInicialSegundaFeira(parameters.getTimeOfDay("segInicioSemana" + nrSemana));
						semanaRemetMrun.setHrFinalSegundaFeira(parameters.getTimeOfDay("segFinalSemana" + nrSemana));
					} else {
						throw new BusinessException("LMS-02019");
					}
				} else {
					semanaRemetMrun.setNrSegundaFeira(Short.valueOf("0"));				
				}
				
				// Seta Numero Terça-Feira, Terça Inicio e Terça Final
				if(parameters.getTimeOfDay("terInicioSemana" + nrSemana) != null || parameters.getTimeOfDay("terFinalSemana" + nrSemana) != null) {					
					if(parameters.getShort("nrTerSemana" + nrSemana) != null) {
						semanaRemetMrun.setNrTercaFeira(parameters.getShort("nrTerSemana" + nrSemana));
					} else {
						semanaRemetMrun.setNrTercaFeira(null);
					}
					
					if(parameters.getTimeOfDay("terInicioSemana" + nrSemana) != null && parameters.getTimeOfDay("terFinalSemana" + nrSemana) != null) {
						semanaRemetMrun.setHrInicialTercaFeira(parameters.getTimeOfDay("terInicioSemana" + nrSemana));
						semanaRemetMrun.setHrFinalTercaFeira(parameters.getTimeOfDay("terFinalSemana" + nrSemana));						
					} else {
						throw new BusinessException("LMS-02019");
					}
				} else {					
					semanaRemetMrun.setNrTercaFeira(Short.valueOf("0"));
				}
				
				// Seta Numero Quarta-Feira, Quarta Inicio e Quarta Final				
				if(parameters.getTimeOfDay("quaInicioSemana" + nrSemana) != null || parameters.getTimeOfDay("quaFinalSemana" + nrSemana) != null) {
					if(parameters.getShort("nrQuaSemana" + nrSemana) != null) {
						semanaRemetMrun.setNrQuartaFeira(parameters.getShort("nrQuaSemana" + nrSemana));
					} else {		
						semanaRemetMrun.setNrQuartaFeira(null);
					}
					
					if(parameters.getTimeOfDay("quaInicioSemana" + nrSemana) != null && parameters.getTimeOfDay("quaFinalSemana" + nrSemana) != null) {
						semanaRemetMrun.setHrInicialQuartaFeira(parameters.getTimeOfDay("quaInicioSemana" + nrSemana));
						semanaRemetMrun.setHrFinalQuartaFeira(parameters.getTimeOfDay("quaFinalSemana" + nrSemana));
					} else {
						throw new BusinessException("LMS-02019");
					}
				} else {					
					semanaRemetMrun.setNrQuartaFeira(Short.valueOf("0"));
				}
				
				// Seta Numero Quinta-Feira, Quinta Inicio e Quinta Final				
				if(parameters.getTimeOfDay("quiInicioSemana" + nrSemana) != null || parameters.getTimeOfDay("quiFinalSemana" + nrSemana) != null) {
					if(parameters.getShort("nrQuiSemana" + nrSemana) != null) {
						semanaRemetMrun.setNrQuintaFeira(parameters.getShort("nrQuiSemana" + nrSemana));
					} else {
						semanaRemetMrun.setNrQuintaFeira(null);
					}
					
					if(parameters.getTimeOfDay("quiInicioSemana" + nrSemana) != null && parameters.getTimeOfDay("quiFinalSemana" + nrSemana) != null) {						
						semanaRemetMrun.setHrInicialQuintaFeira(parameters.getTimeOfDay("quiInicioSemana" + nrSemana));
						semanaRemetMrun.setHrFinalQuintaFeira(parameters.getTimeOfDay("quiFinalSemana" + nrSemana));
					} else {
						throw new BusinessException("LMS-02019");
					}					
				} else {					
					semanaRemetMrun.setNrQuintaFeira(Short.valueOf("0"));
				}
				
				// Seta Numero Sexta-Feira, Sexta Inicio e Sexta Final				
				if(parameters.getTimeOfDay("sexInicioSemana" + nrSemana) != null || parameters.getTimeOfDay("sexFinalSemana" + nrSemana) != null) {
					if(parameters.getShort("nrSexSemana" + nrSemana) != null) {
						semanaRemetMrun.setNrSextaFeira(parameters.getShort("nrSexSemana" + nrSemana));
					} else {
						semanaRemetMrun.setNrSextaFeira(null);
					}
					
					if(parameters.getTimeOfDay("sexInicioSemana" + nrSemana) != null && parameters.getTimeOfDay("sexFinalSemana" + nrSemana) != null) {
						semanaRemetMrun.setHrInicialSextaFeira(parameters.getTimeOfDay("sexInicioSemana" + nrSemana));
						semanaRemetMrun.setHrFinalSextaFeira(parameters.getTimeOfDay("sexFinalSemana" + nrSemana));
					} else {
						throw new BusinessException("LMS-02019");
					}
				} else {					
					semanaRemetMrun.setNrSextaFeira(Short.valueOf("0"));
				}
				
				// Seta Numero Sábado, Sábado Inicio e Sábado Final				
				if(parameters.getTimeOfDay("sabInicioSemana" + nrSemana) != null || parameters.getTimeOfDay("sabFinalSemana" + nrSemana) != null) {
					if(parameters.getShort("nrSabSemana" + nrSemana) != null) {
						semanaRemetMrun.setNrSabado(parameters.getShort("nrSabSemana" + nrSemana));
					} else {
						semanaRemetMrun.setNrSabado(null);
					}
					
					if(parameters.getTimeOfDay("sabInicioSemana" + nrSemana) != null && parameters.getTimeOfDay("sabFinalSemana" + nrSemana) != null) {						
						semanaRemetMrun.setHrInicialSabado(parameters.getTimeOfDay("sabInicioSemana" + nrSemana));
						semanaRemetMrun.setHrFinalSabado(parameters.getTimeOfDay("sabFinalSemana" + nrSemana));
					} else {
						throw new BusinessException("LMS-02019");
					}
				} else {					
					semanaRemetMrun.setNrSabado(Short.valueOf("0"));
				}

			}

    	};
    	
		config.addItemConfig("remetentes", MilkRemetente.class, itemInit, descComparator);
		return config;
	}
	
	/**
	 * ####################################
	 * # Fim dos métodos para tela de DF2 #
	 * ####################################
	 */
	
	

	public MilkRemetenteService getMilkRemetenteService() {
		return milkRemetenteService;
	}
	public void setMilkRemetenteService(MilkRemetenteService milkRemetenteService) {
		this.milkRemetenteService = milkRemetenteService;
	}
    public UsuarioService getUsuarioService() {
		return usuarioService;
	}
	public void setUsuarioService(UsuarioService usuarioService) {
		this.usuarioService = usuarioService;
	}	
	public ClienteService getClienteService() {
		return clienteService;
	}
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}
	public FilialService getFilialService() {
		return filialService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public PedidoColetaService getPedidoColetaService() {
		return pedidoColetaService;
	}
	public void setPedidoColetaService(PedidoColetaService pedidoColetaService) {
		this.pedidoColetaService = pedidoColetaService;
	}
	public EnderecoPessoaService getEnderecoPessoaService() {
		return enderecoPessoaService;
	}
	public void setEnderecoPessoaService(EnderecoPessoaService enderecoPessoaService) {
		this.enderecoPessoaService = enderecoPessoaService;
	}
	public NaturezaProdutoService getNaturezaProdutoService() {
		return naturezaProdutoService;
	}
	public void setNaturezaProdutoService(NaturezaProdutoService naturezaProdutoService) {
		this.naturezaProdutoService = naturezaProdutoService;
	}
	public ServicoService getServicoService() {
		return servicoService;
	}
	public void setServicoService(ServicoService servicoService) {
		this.servicoService = servicoService;
	}
	public SemanaRemetMrunService getSemanaRemetMrunService() {
		return semanaRemetMrunService;
	}
	public void setSemanaRemetMrunService(SemanaRemetMrunService semanaRemetMrunService) {
		this.semanaRemetMrunService = semanaRemetMrunService;
	}
	public PessoaService getPessoaService() {
		return pessoaService;
	}
	public void setPessoaService(PessoaService pessoaService) {
		this.pessoaService = pessoaService;
	}    
	
}
