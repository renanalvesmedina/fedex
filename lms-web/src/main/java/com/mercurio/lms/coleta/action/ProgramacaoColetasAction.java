package com.mercurio.lms.coleta.action;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.FindDefinition;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.coleta.model.PedidoColeta;
import com.mercurio.lms.coleta.model.ServicoAdicionalColeta;
import com.mercurio.lms.coleta.model.service.PedidoColetaService;
import com.mercurio.lms.coleta.model.service.ServicoAdicionalColetaService;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.JTFormatUtils;
import com.mercurio.lms.util.session.SessionUtils;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.coleta.programacaoColetasAction"
 */

public class ProgramacaoColetasAction {
	
	private PedidoColetaService pedidoColetaService;
	private ServicoAdicionalColetaService servicoAdicionalColetaService;
	private ConfiguracoesFacade configuracoesFacade;
	
	public ConfiguracoesFacade getConfiguracoesFacade() {
		return configuracoesFacade;
	}
	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}
	public void setPedidoColetaService(PedidoColetaService pedidoColetaService) {
		this.pedidoColetaService = pedidoColetaService;
	}
	public void setServicoAdicionalColetaService(ServicoAdicionalColetaService servicoAdicionalColetaService) {
		this.servicoAdicionalColetaService = servicoAdicionalColetaService;
	}
	
	/**
	 * @param id
	 * @return
	 */
    public PedidoColeta findById(java.lang.Long id) {
    	return pedidoColetaService.findById(id);
    }
    
    /**
     * 
     * @param criteria
     * @return
     */
    private Map getCriteriosColetasNaoProgramadas(Map criteria) {
    	Filial filialUsuario = SessionUtils.getFilialSessao();
    	criteria.put("tpStatusColeta", "AB");
    	criteria.put("dhPedidoColeta", JTDateTimeUtils.getDataHoraAtual());
    	criteria.put("tpModoPedidoColeta", "AU");
    	criteria.put("filialByIdFilialResponsavel.idFilial", filialUsuario.getIdFilial());
    	return criteria;
    }
    
    
    
    public List findPaginatedColetasNaoProgramadas(Map criteria) {
    	Usuario usuario = SessionUtils.getUsuarioLogado();
   		criteria.put("idUsuario", usuario.getIdUsuario());
    	List list = pedidoColetaService.findPaginatedByColetasNaoProgramadas(getCriteriosColetasNaoProgramadas(criteria));
    	for (Iterator iter=list.iterator(); iter.hasNext();) {
    		Map map = (Map)iter.next();
    		map.put("nrIdentificacaoFormatado", FormatUtils.formatIdentificacao((String)map.get("tpIdentificacao"), (String)map.get("nrIdentificacao")) );
    		map.remove("tpIdentificacao");
    		map.remove("nrIdentificacao");
    	}
    	return list;
    }

    
    public List findPaginatedServicosAdicionais(Map criteria) {
    	List list = servicoAdicionalColetaService.find(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		ServicoAdicionalColeta servicoAdicionalColeta = (ServicoAdicionalColeta)iter.next();
    		TypedFlatMap map = new TypedFlatMap();
        	map.put("servicoAdicional.dsServicoAdicional", servicoAdicionalColeta.getServicoAdicional().getDsServicoAdicional());
        	retorno.add(map);
    	}
    	return retorno;
    }
    
    public Integer getRowCountServicosAdicionais(Map criteria) {
    	return servicoAdicionalColetaService.getRowCount(criteria);
    }


    /**
     * 
     * @param criteria
     * @return
     */
    public ResultSetPage findPaginatedColetasProgramadas(Map criteria) {
    	String labelAte = new StringBuffer(" ").append(configuracoesFacade.getMensagem("ate")).append(" ").toString();
    	ResultSetPage rsp = pedidoColetaService.findPaginatedByColetasProgramadas(FindDefinition.createFindDefinition(criteria), Boolean.TRUE);
    	List lista = rsp.getList();
    	for (Iterator iter = lista.iterator(); iter.hasNext();) {
    		TypedFlatMap tfm = (TypedFlatMap)iter.next();

    		if (tfm.get("nrIdentificacaoCliente") != null) {
	    		String nrIdentificacao = FormatUtils.formatIdentificacao(
	    				tfm.getString("tpIdentificacaoCliente.value"), tfm.getString("nrIdentificacaoCliente"));
	    		tfm.put("nrIdentificacaoFormatadoCliente", nrIdentificacao);
    		}

    		tfm.put("enderecoComComplemento", PedidoColeta.getEnderecoComComplemento(tfm.getString("edColeta"), 
    				tfm.getString("nrEndereco"), tfm.getString("dsComplementoEndereco"), tfm.getString("dsBairro")));

    		String strHorarioColeta = 
    			JTFormatUtils.format(tfm.getDateTime("dhColetaDisponivel"), JTFormatUtils.SHORT, JTFormatUtils.TIMEOFDAY) 
				+ labelAte + JTFormatUtils.format(tfm.getTimeOfDay("hrLimiteColeta"), JTFormatUtils.SHORT);

    		tfm.put("strHorarioColeta", strHorarioColeta);
    		tfm.remove("tpIdentificacaoCliente.value");
    		tfm.remove("tpIdentificacaoCliente.description");
    		tfm.remove("tpIdentificacaoCliente.status");
    		tfm.remove("edColeta");
    		tfm.remove("nrEndereco");
    		tfm.remove("dsComplementoEndereco");
    		tfm.remove("dsBairro");
    		tfm.remove("dhColetaDisponivel");
    		tfm.remove("hrLimiteColeta");
    	}
    	rsp.setList(lista);
    	return rsp;
    }

    
    public Integer getRowCountColetasProgramadas(Map criteria) {
    	return pedidoColetaService.getRowCountByColetasProgramadas(Boolean.TRUE);
    }


	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIdsColetasProgramadas(List ids) {
   		pedidoColetaService.removeByIdsColetasProgramadas(ids);
    }
}