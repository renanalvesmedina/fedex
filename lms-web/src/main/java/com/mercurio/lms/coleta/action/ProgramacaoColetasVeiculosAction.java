package com.mercurio.lms.coleta.action;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.joda.time.DateTime;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.FindDefinition;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.ControleCarga;
import com.mercurio.lms.carregamento.model.service.ControleCargaService;
import com.mercurio.lms.coleta.model.PedidoColeta;
import com.mercurio.lms.coleta.model.service.PedidoColetaService;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.contratacaoveiculos.model.MeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteService;
import com.mercurio.lms.entrega.model.ManifestoEntregaVolume;
import com.mercurio.lms.entrega.model.service.ManifestoEntregaDocumentoService;
import com.mercurio.lms.entrega.model.service.ManifestoEntregaVolumeService;
import com.mercurio.lms.expedicao.model.Conhecimento;
import com.mercurio.lms.expedicao.model.DoctoServico;
import com.mercurio.lms.expedicao.model.VolumeNotaFiscal;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.RotaColetaEntrega;
import com.mercurio.lms.municipios.model.service.RotaColetaEntregaService;
import com.mercurio.lms.sgr.model.ExigenciaGerRisco;
import com.mercurio.lms.sgr.model.service.ExigenciaGerRiscoService;
import com.mercurio.lms.sgr.model.service.ProcedimentoGerRiscoService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTFormatUtils;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.coleta.programacaoColetasVeiculosAction"
 */

public class ProgramacaoColetasVeiculosAction {

	private ExigenciaGerRiscoService exigenciaGerRiscoService;
	private ProcedimentoGerRiscoService procedimentoGerRiscoService;
	private PedidoColetaService pedidoColetaService;
	private ManifestoEntregaDocumentoService manifestoEntregaDocumentoService;
	private ManifestoEntregaVolumeService manifestoEntregaVolumeService;
	private ControleCargaService controleCargaService;
	private RotaColetaEntregaService rotaColetaEntregaService;
	private MeioTransporteService meioTransporteService;
	private ConfiguracoesFacade configuracoesFacade;
	
	
	public void setExigenciaGerRiscoService(ExigenciaGerRiscoService exigenciaGerRiscoService) {
		this.exigenciaGerRiscoService = exigenciaGerRiscoService;
	}
	public void setProcedimentoGerRiscoService(ProcedimentoGerRiscoService procedimentoGerRiscoService) {
		this.procedimentoGerRiscoService = procedimentoGerRiscoService;
	}
	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}
	public void setPedidoColetaService(PedidoColetaService pedidoColetaService) {
		this.pedidoColetaService = pedidoColetaService;
	}
	public void setManifestoEntregaDocumentoService(ManifestoEntregaDocumentoService manifestoEntregaDocumentoService) {
		this.manifestoEntregaDocumentoService = manifestoEntregaDocumentoService;
	}
	public void setManifestoEntregaVolumeService(
			ManifestoEntregaVolumeService manifestoEntregaVolumeService) {
		this.manifestoEntregaVolumeService = manifestoEntregaVolumeService;
	}
	public void setControleCargaService(ControleCargaService controleCargaService) {
		this.controleCargaService = controleCargaService;
	}
	public void setRotaColetaEntregaService(RotaColetaEntregaService rotaColetaEntregaService) {
		this.rotaColetaEntregaService = rotaColetaEntregaService;
	}
	public void setMeioTransporteService(MeioTransporteService meioTransporteService) {
		this.meioTransporteService = meioTransporteService;
	}

	
    public TypedFlatMap findById(java.lang.Long id) {
    	TypedFlatMap map = new TypedFlatMap();
    	Filial filialUsuario = SessionUtils.getFilialSessao();
        map.put("idFilialUsuario", filialUsuario.getIdFilial());
        map.put("sgFilialUsuario", filialUsuario.getSgFilial());
        map.put("nmFantasiaFilialUsuario", filialUsuario.getPessoa().getNmFantasia());

    	if (id == null)
    		return map;

    	PedidoColeta pedidoColeta = pedidoColetaService.findById(id);
    	map.put("idPedidoColeta", pedidoColeta.getIdPedidoColeta());
    	map.put("filialByIdFilialResponsavel.sgFilial", pedidoColeta.getFilialByIdFilialResponsavel().getSgFilial());
    	map.put("nrColeta", pedidoColeta.getNrColeta());
    	if (pedidoColeta.getCliente() != null) {
	    	map.put("cliente.pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(pedidoColeta.getCliente().getPessoa()));
	    	map.put("cliente.pessoa.nmPessoa", pedidoColeta.getCliente().getPessoa().getNmPessoa());
    	}
    	if (pedidoColeta.getMoeda() != null) {
    		map.put("moeda.siglaSimbolo", pedidoColeta.getMoeda().getSiglaSimbolo());
    	}
    	if (pedidoColeta.getRotaColetaEntrega() != null) {
	    	map.put("rotaColetaEntrega.idRotaColetaEntrega", pedidoColeta.getRotaColetaEntrega().getIdRotaColetaEntrega());
	    	map.put("rotaColetaEntrega.nrRota", pedidoColeta.getRotaColetaEntrega().getNrRota());
	    	map.put("rotaColetaEntrega.dsRota", pedidoColeta.getRotaColetaEntrega().getDsRota());
    	}
    	map.put("psTotalVerificado", pedidoColeta.getPsTotalVerificado());
    	map.put("psTotalAforadoVerificado", pedidoColeta.getPsTotalAforadoVerificado());
    	map.put("qtTotalVolumesVerificado", pedidoColeta.getQtTotalVolumesVerificado());
    	map.put("vlTotalVerificado", pedidoColeta.getVlTotalVerificado());
    	map.put("enderecoComComplemento", pedidoColeta.getEnderecoComComplemento());
        return map;
    }
    
    
    public TypedFlatMap findByIdControleCarga(java.lang.Long id) {
    	ControleCarga controleCarga = controleCargaService.findById(id);
		TypedFlatMap tfm = new TypedFlatMap();
		tfm.put("idControleCarga", controleCarga.getIdControleCarga());
		tfm.put("nrControleCarga", controleCarga.getNrControleCarga());
		tfm.put("filialByIdFilialOrigem.idFilial", controleCarga.getFilialByIdFilialOrigem().getIdFilial());
		tfm.put("filialByIdFilialOrigem.sgFilial", controleCarga.getFilialByIdFilialOrigem().getSgFilial());
		if (controleCarga.getMeioTransporteByIdTransportado() != null) {
			tfm.put("meioTransporteByIdTransportado.idMeioTransporte", controleCarga.getMeioTransporteByIdTransportado().getIdMeioTransporte());
			tfm.put("meioTransporteByIdTransportado.nrFrota", controleCarga.getMeioTransporteByIdTransportado().getNrFrota());
			tfm.put("meioTransporteByIdTransportado.nrIdentificador", controleCarga.getMeioTransporteByIdTransportado().getNrIdentificador());
		}
		tfm.put("vlColetado", controleCarga.getVlColetado());
		tfm.put("vlAColetar", controleCarga.getVlAColetar());
		tfm.put("vlTotalFrota", controleCarga.getVlTotalFrota());
		tfm.put("siglaSimbolo", controleCarga.getMoeda().getSiglaSimbolo());
        return tfm;
    }

    
    public List findPaginatedColetasVeiculosRealizadas(Map criteria) {
    	Long idControleCarga = Long.valueOf( (String)criteria.get("idControleCarga") );
    	List list = pedidoColetaService.findPaginatedByColetasVeiculosRealizadas(idControleCarga);

    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		PedidoColeta pedidoColeta = (PedidoColeta)iter.next();
    		TypedFlatMap map = new TypedFlatMap();
        	map.put("idPedidoColeta", pedidoColeta.getIdPedidoColeta());
        	map.put("filialByIdFilialResponsavel.sgFilial", pedidoColeta.getFilialByIdFilialResponsavel().getSgFilial());
        	map.put("nrColeta", pedidoColeta.getNrColeta());
        	if (pedidoColeta.getCliente() != null) {
	        	map.put("cliente.pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(pedidoColeta.getCliente().getPessoa()));
	        	map.put("cliente.pessoa.nmPessoa", pedidoColeta.getCliente().getPessoa().getNmPessoa());
        	}
        	map.put("enderecoComComplemento", pedidoColeta.getEnderecoComComplemento());
        	map.put("psTotalVerificado", pedidoColeta.getPsTotalVerificado());
        	if (pedidoColeta.getMoeda() != null) {
        		map.put("moeda.dsSimbolo", pedidoColeta.getMoeda().getDsSimbolo());
        		map.put("moeda.sgMoeda", pedidoColeta.getMoeda().getSgMoeda());
        	}
        	map.put("vlTotalVerificado", pedidoColeta.getVlTotalVerificado());
        	map.put("qtTotalVolumesVerificado", pedidoColeta.getQtTotalVolumesVerificado());
        	map.put("idControleCarga", idControleCarga);
        	retorno.add(map);
    	}
    	return retorno;
    }


    public Integer getRowCountColetasVeiculosRealizadas(Map criteria) {
    	Long idControleCarga = Long.valueOf( (String)criteria.get("idControleCarga") );
    	return pedidoColetaService.getRowCountByColetasVeiculosRealizadas(idControleCarga);
    }
    

    public ResultSetPage findPaginatedColetasVeiculosEntregasRealizar(Map criteria) {
    	Long idControleCarga = Long.valueOf( (String)criteria.get("idControleCarga") );
    	ResultSetPage rsp = manifestoEntregaDocumentoService.
    			findPaginatedEntregasRealizar(idControleCarga, SessionUtils.getFilialSessao().getIdFilial(), FindDefinition.createFindDefinition(criteria));

 		List retorno = new ArrayList();
 		for (Iterator iter = rsp.getList().iterator(); iter.hasNext();) {
 			TypedFlatMap tfm = (TypedFlatMap)iter.next();
 			
 			TypedFlatMap mapRetorno = new TypedFlatMap();
 			mapRetorno.put("idControleCarga", idControleCarga);

 			String tpIdentificacaoValue = tfm.getString("doctoServico.clienteByIdClienteDestinatario.pessoa.tpIdentificacao.value");
	    	if (tpIdentificacaoValue != null) { 
	    		mapRetorno.put("nrIdentificacaoFormatado", 
		    			FormatUtils.formatIdentificacao(tpIdentificacaoValue,
		    					tfm.getString("doctoServico.clienteByIdClienteDestinatario.pessoa.nrIdentificacao")) );
	    	}
	    	mapRetorno.put("tpDocumentoServico", tfm.get("doctoServico.tpDocumentoServico.description"));
	    	mapRetorno.put("sgFilialOrigem", tfm.get("doctoServico.filialByIdFilialOrigem.sgFilial"));
	    	mapRetorno.put("nrDoctoServico", tfm.get("nrDoctoServico"));
	    	mapRetorno.put("dtPrevEntrega", tfm.get("doctoServico.dtPrevEntrega"));
	    	mapRetorno.put("nmPessoaDestinatario", tfm.get("doctoServico.clienteByIdClienteDestinatario.pessoa.nmPessoa"));
	    	mapRetorno.put("dsEnderecoEntregaReal", tfm.get("doctoServico.dsEnderecoEntregaReal"));
	    	mapRetorno.put("qtVolumes", tfm.get("qtVolumes"));
	    	mapRetorno.put("psDoctoServico", tfm.get("psDoctoServico"));
	    	mapRetorno.put("siglaSimbolo", tfm.get("moeda.siglaSimbolo"));
	    	mapRetorno.put("vlTotalDocServico", tfm.get("vlTotalDocServico"));
	    	mapRetorno.put("situacaoDoctoServico", tfm.get("situacaoDoctoServico"));
	    	retorno.add(mapRetorno);
 		}
        rsp.setList(retorno);
    	return rsp;
    }


    public Integer getRowCountColetasVeiculosEntregasRealizar(TypedFlatMap criteria) {
    	return manifestoEntregaDocumentoService.getRowCountEntregasRealizar(criteria.getLong("idControleCarga"), SessionUtils.getFilialSessao().getIdFilial());
    }

    public ResultSetPage findPaginatedColetasVeiculosEntregasParciaisRealizar(Map criteria) {
    	Long idControleCarga = Long.valueOf( (String)criteria.get("idControleCarga") );
    	ResultSetPage rsp = manifestoEntregaVolumeService.findPaginatedEntregasVolumesPendentes(
    			idControleCarga, FindDefinition.createFindDefinition(criteria));    	

 		List<Map<String,Object>> retorno = new ArrayList<Map<String,Object>>();
 		for (ManifestoEntregaVolume manifestoVolume : (List<ManifestoEntregaVolume>)rsp.getList()) { 			 			
 			TypedFlatMap mapRetorno = new TypedFlatMap();
 			
 			mapRetorno.put("idControleCarga", idControleCarga);

 			VolumeNotaFiscal volume = manifestoVolume.getVolumeNotaFiscal();
 			DoctoServico doctoServico = volume.getNotaFiscalConhecimento().getConhecimento();
 			Conhecimento conhecimento = volume.getNotaFiscalConhecimento().getConhecimento();
 			
 			String tpIdentificacaoValue = doctoServico.getClienteByIdClienteDestinatario().getPessoa().getTpIdentificacao().getValue();
	    	if (tpIdentificacaoValue != null) { 
	    		mapRetorno.put("nrIdentificacaoFormatado", 
		    			FormatUtils.formatIdentificacao(tpIdentificacaoValue,
		    					doctoServico.getClienteByIdClienteDestinatario().getPessoa().getNrIdentificacao()) );
	    	}
	    	    	
	    	mapRetorno.put("tpDocumentoServico", doctoServico.getTpDocumentoServico().getDescription());
	    	mapRetorno.put("sgFilialOrigem", doctoServico.getFilialByIdFilialOrigem().getSgFilial());
	    	mapRetorno.put("nrDoctoServico", doctoServico.getNrDoctoServico());
	    	mapRetorno.put("dtPrevEntrega", doctoServico.getDtPrevEntrega());
	    	mapRetorno.put("nmPessoaDestinatario", doctoServico.getClienteByIdClienteDestinatario().getPessoa().getNmPessoa());
	    	mapRetorno.put("dsEnderecoEntregaReal", doctoServico.getDsEnderecoEntregaReal());
	    	mapRetorno.put("nrVolume", volume.getNrSequencia() + "/" +  doctoServico.getQtVolumes() );
	    	mapRetorno.put("psDoctoServico", doctoServico.getPsReal());
	    	mapRetorno.put("siglaSimbolo", doctoServico.getMoeda().getSiglaSimbolo());
	    	mapRetorno.put("vlTotalDocServico", doctoServico.getVlTotalDocServico());
	    	mapRetorno.put("situacaoDoctoServico", conhecimento.getTpSituacaoConhecimento().getDescription());
	    	
	    	retorno.add(mapRetorno);
 		}
        
 		rsp.setList(retorno);
    	return rsp;
    }


    public Integer getRowCountColetasVeiculosEntregasParciaisRealizar(TypedFlatMap criteria) {
    	return manifestoEntregaDocumentoService.getRowCountEntregasRealizar(criteria.getLong("idControleCarga"), SessionUtils.getFilialSessao().getIdFilial());
    }


    /**
     * 
     * @param criteria
     * @return
     */
    public ResultSetPage findPaginatedProgramacaoColetasVeiculos(TypedFlatMap criteria) {
    	ResultSetPage rsp = controleCargaService.findPaginatedByProgramacaoColetasVeiculos(
								    							criteria.getLong("rotaColetaEntrega.idRotaColetaEntrega"), 
												    			criteria.getLong("meioTransporte.idMeioTransporte"), 
												    			FindDefinition.createFindDefinition(criteria));

    	List list = rsp.getList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		TypedFlatMap tfm = (TypedFlatMap)iter.next();
			if (tfm.get("vlTotalFrota") != null)
				tfm.put("siglaSimbolo1", tfm.getString("moeda.sgMoeda") + " " + tfm.getString("moeda.dsSimbolo"));
	    	if (tfm.get("vlAColetar") != null)
	    		tfm.put("siglaSimbolo2", tfm.getString("moeda.sgMoeda") + " " + tfm.getString("moeda.dsSimbolo"));
    	}
    	return rsp;
    }


    /**
     * 
     * @param criteria
     * @return
     */
    public Integer getRowCountProgramacaoColetasVeiculos(TypedFlatMap criteria) {
    	return controleCargaService.getRowCountByProgramacaoColetasVeiculos(
    			criteria.getLong("rotaColetaEntrega.idRotaColetaEntrega"), criteria.getLong("meioTransporte.idMeioTransporte"));
    }


    public List findLookupRotaColetaEntrega(Map criteria) {
    	List list = rotaColetaEntregaService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		RotaColetaEntrega rotaColetaEntrega = (RotaColetaEntrega)iter.next();
    		TypedFlatMap typedFlatMap = new TypedFlatMap();
    		typedFlatMap.put("idRotaColetaEntrega", rotaColetaEntrega.getIdRotaColetaEntrega());
    		typedFlatMap.put("nrRota", rotaColetaEntrega.getNrRota());
    		typedFlatMap.put("dsRota", rotaColetaEntrega.getDsRota());
    		retorno.add(typedFlatMap);
    	}
    	return retorno;
    }

    public List findLookupMeioTransporte(Map criteria) {
    	List list = meioTransporteService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		MeioTransporte meioTransporte = (MeioTransporte)iter.next();
    		TypedFlatMap typedFlatMap = new TypedFlatMap();
    		typedFlatMap.put("idMeioTransporte", meioTransporte.getIdMeioTransporte());
    		typedFlatMap.put("nrIdentificador", meioTransporte.getNrIdentificador());
    		typedFlatMap.put("nrFrota", meioTransporte.getNrFrota());
    		retorno.add(typedFlatMap);
    	}
    	return retorno;
    }


    public ResultSetPage findPaginatedExigenciasConteudoAtual(TypedFlatMap criteria) {
    	List lista = procedimentoGerRiscoService.generateExigenciasGerRiscoParaColetaEntrega(
    			criteria.getLong("idControleCarga"), 
    			SessionUtils.getMoedaSessao().getIdMoeda(), 
    			SessionUtils.getPaisSessao().getIdPais(), 
    			"A");
    	ResultSetPage rsp = new ResultSetPage(Integer.valueOf(1), lista);
    	return rsp;
    }

    public ResultSetPage findPaginatedExigenciasPrevistas(TypedFlatMap criteria) {
    	List lista = procedimentoGerRiscoService.generateExigenciasGerRiscoParaColetaEntrega(
    			criteria.getLong("idControleCarga"), 
    			SessionUtils.getMoedaSessao().getIdMoeda(), 
    			SessionUtils.getPaisSessao().getIdPais(), 
    			"P");
    	ResultSetPage rsp = new ResultSetPage(Integer.valueOf(1), lista);
    	return rsp;
    }

    
    public List findPaginatedColetasSerRealizadas(TypedFlatMap criteria) {
    	List list = (pedidoColetaService.findPaginatedColetasPendentes(criteria.getLong("idControleCarga"), null)).getList();

    	String labelAte = " " + configuracoesFacade.getMensagem("ate") + " ";
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		PedidoColeta pedidoColeta = (PedidoColeta)iter.next();
    		TypedFlatMap map = new TypedFlatMap();
	    	map.put("idPedidoColeta", pedidoColeta.getIdPedidoColeta());
	    	map.put("filialByIdFilialResponsavel.sgFilial", pedidoColeta.getFilialByIdFilialResponsavel().getSgFilial());
	    	map.put("nrColeta", pedidoColeta.getNrColeta());
	    	if (pedidoColeta.getCliente() != null) {
	    		map.put("cliente.pessoa.nmPessoa", pedidoColeta.getCliente().getPessoa().getNmPessoa());
	    		map.put("cliente.pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(pedidoColeta.getCliente().getPessoa()));
	    	}
	    	map.put("enderecoComComplemento", pedidoColeta.getEnderecoComComplemento());
	    	map.put("qtTotalVolumesVerificado", pedidoColeta.getQtTotalVolumesVerificado());
	    	map.put("psTotalVerificado", pedidoColeta.getPsTotalVerificado());
	    	if (pedidoColeta.getMoeda() != null) {
	    		map.put("moeda.dsSimbolo", pedidoColeta.getMoeda().getDsSimbolo());
	    		map.put("moeda.sgMoeda", pedidoColeta.getMoeda().getSgMoeda());
	    	}
	    	map.put("vlTotalVerificado", pedidoColeta.getVlTotalVerificado());
			
    		String strHorarioColeta = 
    			JTFormatUtils.format(pedidoColeta.getDhColetaDisponivel(), JTFormatUtils.SHORT, JTFormatUtils.TIMEOFDAY) 
			   + labelAte + JTFormatUtils.format(pedidoColeta.getHrLimiteColeta(), JTFormatUtils.SHORT);

	    	map.put("strHorarioColeta", strHorarioColeta);
			retorno.add(map);
    	}
    	return retorno;
    }

    
    public Integer getRowCountColetasSerRealizadas(TypedFlatMap criteria) {
    	return pedidoColetaService.getRowCountColetasPendentes(criteria.getLong("idControleCarga"));
    }

   
    /**
	 * @param ids lista com as entidades que deverão ser executadas.
	 *
	 *
	 */
    public void generateExecutarColetasPendentes(TypedFlatMap map) {
		List<String> listIds = map.getList("ids");
    	List<Long> listId = new ArrayList<Long>();
    	if(listIds != null){
    		for (String ids : listIds) {
    			listId.add(Long.valueOf(ids));
			}
    	}
    	
    	DateTimeFormatter format = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
    	DateTime data = new DateTime(format.parseDateTime(map.get("dtHoraOcorrencia").toString()));
    	
		String retorno = pedidoColetaService.generateExecutarColetasPendentes(listId, data);
    	if (retorno.length() > 0)
    		throw new BusinessException("LMS-02022", new Object[] {retorno});
    	
    }
    
    
    
	public TypedFlatMap findByIdExigenciaGerRisco(java.lang.Long id) {
		ExigenciaGerRisco exigenciaGerRisco = exigenciaGerRiscoService.findById(id);
    	TypedFlatMap map = new TypedFlatMap();
    	map.put("idExigenciaGerRisco", exigenciaGerRisco.getIdExigenciaGerRisco());
    	map.put("dsCompleta", exigenciaGerRisco.getDsCompleta());
    	return map;
    }
	
	
    public ResultSetPage findPaginatedColetasVeiculosEntregasRealizadas(Map criteria) {
    	Long idControleCarga = Long.valueOf( (String)criteria.get("idControleCarga") );
    	ResultSetPage rsp = manifestoEntregaDocumentoService.findPaginatedEntregasRealizadasByProgramacaoColetas(idControleCarga, 
        		FindDefinition.createFindDefinition(criteria));
 		
    	List retorno = new ArrayList();
 		for (Iterator iter = rsp.getList().iterator(); iter.hasNext();) {
 			TypedFlatMap tfm = (TypedFlatMap)iter.next();
 			
 			TypedFlatMap mapRetorno = new TypedFlatMap();
 			mapRetorno.put("idControleCarga", idControleCarga);
 			String tpIdentificacaoValue = tfm.getString("doctoServico.clienteByIdClienteDestinatario.pessoa.tpIdentificacao.value");
	    	if (tpIdentificacaoValue != null) { 
	    		mapRetorno.put("nrIdentificacaoFormatado", 
		    			FormatUtils.formatIdentificacao(tpIdentificacaoValue,
		    					tfm.getString("doctoServico.clienteByIdClienteDestinatario.pessoa.nrIdentificacao")) );
	    	}

	    	mapRetorno.put("tpDocumentoServico", tfm.get("doctoServico.tpDocumentoServico.description")); 
	    	mapRetorno.put("sgFilialOrigem", tfm.get("doctoServico.filialByIdFilialOrigem.sgFilial"));
	    	mapRetorno.put("nrDoctoServico", tfm.get("nrDoctoServico"));
	    	mapRetorno.put("dtPrevEntrega", tfm.get("doctoServico.dtPrevEntrega"));
	    	mapRetorno.put("nmPessoaDestinatario", tfm.get("doctoServico.clienteByIdClienteDestinatario.pessoa.nmPessoa"));
	    	mapRetorno.put("dsEnderecoEntregaReal", tfm.get("doctoServico.dsEnderecoEntregaReal"));
	    	mapRetorno.put("qtVolumes", tfm.get("qtVolumes"));
			mapRetorno.put("psDoctoServico", tfm.get("psDoctoServico"));
			mapRetorno.put("sgMoeda", tfm.get("doctoServico.moeda.sgMoeda"));
			mapRetorno.put("dsSimbolo", tfm.get("doctoServico.moeda.dsSimbolo"));
			mapRetorno.put("vlTotalDocServico", tfm.get("vlTotalDocServico"));
			mapRetorno.put("situacaoDoctoServico", tfm.get("situacaoDoctoServico"));
			mapRetorno.put("dhEvento", tfm.get("doctoServico.eventoDocumentoServico.dhEvento"));
	    	retorno.add(mapRetorno);
 		}
        rsp.setList(retorno);
    	return rsp;
    }

    public Integer getRowCountColetasVeiculosEntregasRealizadas(Map criteria) {
    	Long idControleCarga = Long.valueOf( (String)criteria.get("idControleCarga") );
    	return manifestoEntregaDocumentoService.getRowCountEntregasRealizadasByProgramacaoColetas(idControleCarga);
    }
}