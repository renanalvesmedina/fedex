package com.mercurio.lms.coleta.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.joda.time.YearMonthDay;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.FindDefinition;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.CargoOperacional;
import com.mercurio.lms.carregamento.model.EventoControleCarga;
import com.mercurio.lms.carregamento.model.IntegranteEqOperac;
import com.mercurio.lms.carregamento.model.service.EventoControleCargaService;
import com.mercurio.lms.carregamento.model.service.IntegranteEqOperacService;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.contratacaoveiculos.model.MeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteService;
import com.mercurio.lms.util.FormatUtils;

/**
 * Generated by: ADSM ActionGenerator
 * 
 * Não inserir documentação após ou remover a tag do XDoclet a seguir. O valor
 * do <code>id</code> informado abaixo deve ser utilizado para referenciar
 * este serviço.
 * 
 * @spring.bean id="lms.coleta.consultaLiberacaoRiscoAction"
 */

public class ConsultaLiberacaoRiscoAction extends CrudAction {

    private static final String TP_INTEGRANTE_FUNCIONARIO = "F";
    private static final String TP_INTEGRANTE_TERCEIRO = "T";
    
    private MeioTransporteService meioTransporteService;
    private IntegranteEqOperacService integranteEqOperacService;
    
    /**
     * Seta a service default a ser utilizada pela action
     * 
     * @param eventoControleCargaService
     */
    public void setService(EventoControleCargaService eventoControleCargaService) {
        this.defaultService = eventoControleCargaService;
    }

	private List findLookupMeioTransporte(Map criteria) {
    	List list = meioTransporteService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		MeioTransporte meioTransporte = (MeioTransporte)iter.next();
    		TypedFlatMap tfm = new TypedFlatMap();
    		tfm.put("idMeioTransporte", meioTransporte.getIdMeioTransporte());
    		tfm.put("nrIdentificador", meioTransporte.getNrIdentificador());
    		tfm.put("nrFrota", meioTransporte.getNrFrota());
    		tfm.put("tpVinculo", meioTransporte.getTpVinculo().getValue());
    		tfm.put("modeloMeioTransporte.tipoMeioTransporte.tpMeioTransporte.value", 
    				meioTransporte.getModeloMeioTransporte().getTipoMeioTransporte().getTpMeioTransporte().getValue());
    		tfm.put("modeloMeioTransporte.tipoMeioTransporte.idTipoMeioTransporte", 
    				meioTransporte.getModeloMeioTransporte().getTipoMeioTransporte().getIdTipoMeioTransporte());
    		tfm.put("meioTransporteRodoviario.nrRastreador", meioTransporte.getMeioTransporteRodoviario().getNrRastreador());
    		retorno.add(tfm);
    	}
    	return retorno;
    }
    
    public List findLookupMeioTransporteTransportado(Map criteria) {
    	criteria.put("tipoMeioTransporte", "transportado");
    	return findLookupMeioTransporte(criteria);
    }

    public MeioTransporteService getMeioTransporteService() {
        return meioTransporteService;
    }

    public void setMeioTransporteService(MeioTransporteService meioTransporteService) {
        this.meioTransporteService = meioTransporteService;
    }
    
    public EventoControleCarga findById(Long id) {
        return ((EventoControleCargaService) defaultService).findById(id);
    }

    /**
     * findPaginated sobreescrito para que a busca utilize um intervalo de datas
     * e retorne apenas os campos necessários para a grid.
     */
    public ResultSetPage findPaginated(TypedFlatMap criteria) {
		Long idMeioTransporte = criteria.getLong("meioTransporteByIdTransportado.idMeioTransporte");
    	
		YearMonthDay dataInicial = criteria.getYearMonthDay("dataInicial");
		YearMonthDay dataFinal =  criteria.getYearMonthDay("dataFinal");
    	
        ResultSetPage rsp = ((EventoControleCargaService) defaultService).
        					findPaginatedConsultaLiberacaoRisco(idMeioTransporte, dataInicial, dataFinal, FindDefinition.createFindDefinition(criteria));
        
        List listEventosControleCarga = rsp.getList();
        List listRetorno = new ArrayList();
        TypedFlatMap tfm = null;

        for (Iterator iter = listEventosControleCarga.iterator(); iter.hasNext();) {
			EventoControleCarga eventoControleCarga = (EventoControleCarga) iter.next();
			tfm = new TypedFlatMap();
			tfm.put("idEventoControleCarga", eventoControleCarga.getIdEventoControleCarga());
			if (eventoControleCarga.getMeioTransporte()!=null){
				tfm.put("meioTransporteByIdTransportado.nrFrota", eventoControleCarga.getMeioTransporte().getNrFrota());
				tfm.put("meioTransporteByIdTransportado.nrIdentificador", eventoControleCarga.getMeioTransporte().getNrIdentificador());
			}
			tfm.put("dhEvento", eventoControleCarga.getDhEvento());
			
			if (eventoControleCarga.getMoeda()!=null){
				tfm.put("siglaSimbolo", eventoControleCarga.getMoeda().getSiglaSimbolo());
			}
			tfm.put("vlLiberacao", eventoControleCarga.getVlLiberacao());
			
			if (eventoControleCarga.getUsuario()!=null){
	        	tfm.put("usuario.nmUsuario", eventoControleCarga.getUsuario().getNmUsuario());	
	        }
	        tfm.put("dsEvento", eventoControleCarga.getDsEvento());
	        listRetorno.add(tfm);
		}
        rsp.setList(listRetorno);
        return rsp;
    }

    /**
     * row count especializado para consulta liberação de risco 
     * @param map
     * @return
     */
    public Integer getRowCount(TypedFlatMap map) {
        Long idMeioTransporte = map.getLong("meioTransporteByIdTransportado.idMeioTransporte"); 
		YearMonthDay dataInicial = map.getYearMonthDay("dataInicial");
		YearMonthDay dataFinal =  map.getYearMonthDay("dataFinal");
        
        return ((EventoControleCargaService) defaultService).getRowCountConsultaLiberacaoRisco(
                idMeioTransporte, dataInicial, dataFinal, 
                FindDefinition.createFindDefinition(map));        
    }

    /**
     * Busca os dados da equipe baseado no idEquipeOperacao.
     * Caso TP_INTEGRANTE == 'F'(funcionario) buscar os dados de Usuario().
     * Senão se TP_INTEGRANTE == 'T'(terceiro) buscar os dados de Pessoa 
     * 
     * @param map
     * @return
     */
    public ResultSetPage findPaginatedDadosEquipe(Map map) {
        
        Map tmp = (Map)map.get("equipeOperacao");
        String strIdEquipeOperacao = (String)tmp.get("idEquipeOperacao");
        Long idEquipeOperacao = Long.valueOf(strIdEquipeOperacao); 
        ResultSetPage rsp = getIntegranteEqOperacService().findPaginatedLiberacaoRiscoDadosEquipe(idEquipeOperacao, FindDefinition.createFindDefinition(map));
        
        Map dados = null;
        IntegranteEqOperac bean = null;
        List retorno = new ArrayList();
        
        Iterator iterator = rsp.getList().iterator();
        
        while (iterator.hasNext()) {
            dados = new HashMap();
            bean = (IntegranteEqOperac) iterator.next();
            
            dados.put("tpIntegrante",bean.getTpIntegrante());
            // Dados especificos quando é funcionário
            if(bean.getTpIntegrante().getValue().equalsIgnoreCase(TP_INTEGRANTE_FUNCIONARIO)) {
                Usuario usuario = bean.getUsuario();
                if(usuario!=null) {
                    dados.put("nomeIntegrante", usuario.getNmUsuario());
                        
                    if(usuario.getVfuncionario()!=null) {
                        dados.put("matricula", usuario.getVfuncionario().getNrMatricula());
                    } else {
                        dados.put("matricula","");
                    }
                    
                } else {
                    dados.put("nomeIntegrante","");
                    dados.put("matricula","");
                }
                
            } else if(bean.getTpIntegrante().getValue().equalsIgnoreCase(TP_INTEGRANTE_TERCEIRO)) {
                // Dados especificos quando é terceiro
                Pessoa terceiro = bean.getPessoa();
                if(terceiro!=null) {
                    dados.put("nomeIntegrante", terceiro.getNmPessoa());
                    dados.put("cpf", FormatUtils.formatIdentificacao(terceiro.getTpIdentificacao().getValue(),
                    		terceiro.getNrIdentificacao()));
                }else {
                    dados.put("nomeIntegrante", "");
                    dados.put("cpf", "");
                }
                
                if(bean.getEmpresa()!=null) {
                    if(bean.getEmpresa().getPessoa()!=null) {
                        dados.put("cooperativa", bean.getEmpresa().getPessoa().getNmPessoa());
                    }
                } else{
                    dados.put("cooperativa", "");
                }
            }
            // Dados independente do tipo do integrante
            CargoOperacional cargo = bean.getCargoOperacional();
            if(cargo!=null) {
                dados.put("dsCargo", cargo.getDsCargo());
            } else {
                dados.put("dsCargo", "");
            }
            
            dados.put("idIntegranteEqOperac", bean.getIdIntegranteEqOperac());
            retorno.add(dados);
        }
        
        rsp.setList(retorno);
        return rsp;
    }

    /**
     * Row count para os dados da equipe
     * 
     * @param map
     * @return
     */
    public Integer getRowCountDadosEquipe(Map map) {
        Map tmp = (Map)map.get("equipeOperacao");
        String strIdEquipeOperacao = (String)tmp.get("idEquipeOperacao");
        Long idEquipeOperacao = Long.valueOf(strIdEquipeOperacao);
        
        return getIntegranteEqOperacService().getRowCountLiberacaoRiscoDadosEquipe(idEquipeOperacao);
    }

    public IntegranteEqOperacService getIntegranteEqOperacService() {
        return integranteEqOperacService;
    }

    public void setIntegranteEqOperacService(IntegranteEqOperacService integranteEqOperacService) {
        this.integranteEqOperacService = integranteEqOperacService;
    }

}
