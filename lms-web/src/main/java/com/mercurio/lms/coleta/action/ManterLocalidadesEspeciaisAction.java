package com.mercurio.lms.coleta.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.FilterList;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.coleta.model.LocalidadeEspecial;
import com.mercurio.lms.coleta.model.service.LocalidadeEspecialService;
import com.mercurio.lms.configuracoes.model.EnderecoPessoa;
import com.mercurio.lms.configuracoes.model.service.EnderecoPessoaService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.Pais;
import com.mercurio.lms.municipios.model.UnidadeFederativa;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.PaisService;
import com.mercurio.lms.municipios.model.service.UnidadeFederativaService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.coleta.manterLocalidadesEspeciaisAction"
 */

public class ManterLocalidadesEspeciaisAction extends CrudAction {

	private UnidadeFederativaService unidadeFederativaService;
	private FilialService filialService;
	private EnderecoPessoaService enderecoPessoaService;
	private PaisService paisService;
	
	public void setLocalidadeEspecial(LocalidadeEspecialService localidadeEspecialService) {
		this.defaultService = localidadeEspecialService;
	}
    
	public UnidadeFederativaService getUnidadeFederativaService() {
		return unidadeFederativaService;
	}

	public void setUnidadeFederativaService(UnidadeFederativaService unidadeFederativaService) {
		this.unidadeFederativaService = unidadeFederativaService;
	}

	public FilialService getFilialService() {
		return filialService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public EnderecoPessoaService getEnderecoPessoaService() {
		return enderecoPessoaService;
	}

	public void setEnderecoPessoaService(EnderecoPessoaService enderecoPessoaService) {
		this.enderecoPessoaService = enderecoPessoaService;
	}

	public PaisService getPaisService() {
		return paisService;
	}

	public void setPaisService(PaisService paisService) {
		this.paisService = paisService;
	}
	
	public void removeById(java.lang.Long id) {
        ((LocalidadeEspecialService)defaultService).removeById(id);
    }

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	((LocalidadeEspecialService)defaultService).removeByIds(ids);
    }

    public Object findById(java.lang.Long id) {
    	TypedFlatMap mapResult = new TypedFlatMap();
    	LocalidadeEspecial localidadeEspecial = ((LocalidadeEspecialService)defaultService).findById(id);
    	
		mapResult.put("idLocalidadeEspecial", localidadeEspecial.getIdLocalidadeEspecial());
		mapResult.put("dsLocalidade", localidadeEspecial.getDsLocalidade());
		mapResult.put("tpSituacao.value", localidadeEspecial.getTpSituacao().getValue());
		mapResult.put("tpSituacao.description", localidadeEspecial.getTpSituacao().getDescription());
		mapResult.put("tpSituacao.status", localidadeEspecial.getTpSituacao().getStatus());
		if (localidadeEspecial.getFilial() != null) {
			Filial filial = localidadeEspecial.getFilial();
			mapResult.put("filial.idFilial", filial.getIdFilial());
			mapResult.put("filial.sgFilial", filial.getSgFilial());
			mapResult.put("filial.pessoa.nmFantasia", filial.getPessoa().getNmFantasia());				
		}
		
		if (localidadeEspecial.getUnidadeFederativa() != null) {
			UnidadeFederativa unidadeFederativa = localidadeEspecial.getUnidadeFederativa();
			mapResult.put("unidadeFederativa.idUnidadeFederativa", unidadeFederativa.getIdUnidadeFederativa());
			mapResult.put("unidadeFederativa.sgUnidadeFederativa", unidadeFederativa.getSgUnidadeFederativa());
			
			if (unidadeFederativa.getPais() != null) {
				Pais pais = unidadeFederativa.getPais();
				
				mapResult.put("pais.idPais", pais.getIdPais());
				mapResult.put("pais.nmPais", pais.getNmPais());
				
				List ufs = findUfsByPais(pais.getIdPais());
				mapResult.put("unidadesFederativas", ufs);
		}
		}
    	
    	return mapResult;
    }
    
    /**
     * Método findPaginated com filtros
     */
	public ResultSetPage findPaginated(Map criteria) {
		ResultSetPage resultSetPage = ((LocalidadeEspecialService)defaultService).findPaginated(criteria); 
		
		List listResult = new ArrayList();
		for (Iterator iter = resultSetPage.getList().iterator(); iter.hasNext();) {
			LocalidadeEspecial localidadeEspecial = (LocalidadeEspecial) iter.next();
			TypedFlatMap mapResult = new TypedFlatMap();
			
			mapResult.put("idLocalidadeEspecial", localidadeEspecial.getIdLocalidadeEspecial());
			mapResult.put("dsLocalidade", localidadeEspecial.getDsLocalidade());
			mapResult.put("tpSituacao.value", localidadeEspecial.getTpSituacao().getValue());
			mapResult.put("tpSituacao.description", localidadeEspecial.getTpSituacao().getDescription());
			mapResult.put("tpSituacao.status", localidadeEspecial.getTpSituacao().getStatus());
			if (localidadeEspecial.getFilial() != null) {
				Filial filial = localidadeEspecial.getFilial();
				mapResult.put("filial.idFilial", filial.getIdFilial());
				mapResult.put("filial.sgFilial", filial.getSgFilial());
				mapResult.put("filial.pessoa.nmFantasia", filial.getPessoa().getNmFantasia());				
			}
			
			if (localidadeEspecial.getUnidadeFederativa() != null) {
				UnidadeFederativa unidadeFederativa = localidadeEspecial.getUnidadeFederativa();
				mapResult.put("unidadeFederativa.idUnidadeFederativa", unidadeFederativa.getIdUnidadeFederativa());
				mapResult.put("unidadeFederativa.sgUnidadeFederativa", unidadeFederativa.getSgUnidadeFederativa());
				if (unidadeFederativa.getPais() != null) {
					Pais pais = unidadeFederativa.getPais();
					mapResult.put("pais.idPais", pais.getIdPais());
					mapResult.put("pais.nmPais", pais.getNmPais());
			}
			}
			
			listResult.add(mapResult);
		}
		
		resultSetPage.setList(listResult);
		
		return resultSetPage;
	}

    /**
     * Método getRowCount.
     */
	public Integer getRowCount(Map criteria) {
		return ((LocalidadeEspecialService)defaultService).getRowCount(criteria);
	}    

    public List findFilialLookup(TypedFlatMap map) {
    	FilterList filter = new FilterList(getFilialService().findLookup(map)) {
			public Map filterItem(Object item) {
				Filial filial = (Filial) item;
    			TypedFlatMap typedFlatMap = new TypedFlatMap();
	    		typedFlatMap.put("idFilial", filial.getIdFilial());
	    		typedFlatMap.put("sgFilial", filial.getSgFilial());
	    		typedFlatMap.put("pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
				return typedFlatMap;
			}
    	};
    	return (List)filter.doFilter();    	
    }

    public TypedFlatMap findEnderecoPessoa(Long idPessoa) {
    	
    	EnderecoPessoa enderecoPessoa = getEnderecoPessoaService().findEnderecoPessoaPadrao(idPessoa); 
    	TypedFlatMap map = new TypedFlatMap();
    	if (enderecoPessoa != null){
    		UnidadeFederativa unidadeFederativa = enderecoPessoa.getMunicipio().getUnidadeFederativa();
    		map.put("unidadeFederativa.idUnidadeFederativa", unidadeFederativa.getIdUnidadeFederativa());
    		map.put("unidadeFederativa.sgUnidadeFederativa", unidadeFederativa.getSgUnidadeFederativa());
    		map.put("unidadeFederativa.pais.idPais", unidadeFederativa.getPais().getIdPais());
    		map.put("unidadeFederativa.pais.nmPais", unidadeFederativa.getPais().getNmPais());
    	}
    	return map; 
    }
    
    public List findUfsByPais(Long idPais) {
    	
    	FilterList filter = new FilterList(getUnidadeFederativaService().findUfsByPais(idPais, null)) {
			public Map filterItem(Object item) {
				UnidadeFederativa uf = (UnidadeFederativa)item;
    			TypedFlatMap typedFlatMap = new TypedFlatMap();
	    		typedFlatMap.put("idUnidadeFederativa", uf.getIdUnidadeFederativa());
		    	typedFlatMap.put("sgUnidadeFederativa", uf.getSgUnidadeFederativa());
				return typedFlatMap;
			}
    	};
    	return (List)filter.doFilter();
    }
    
    public Serializable store(LocalidadeEspecial bean) {
   		Map mapCriteria = new TypedFlatMap();
   		mapCriteria.put("dsLocalidade", bean.getDsLocalidade());
   		if (bean.getIdLocalidadeEspecial() == null) {
	   		List listLocalidadesComMesmaDescricao = defaultService.find(mapCriteria);
	   		if (!listLocalidadesComMesmaDescricao.isEmpty()){
	   			// Já existe uma Localidade Especial com a mesma descrição.
	   			throw new BusinessException("LMS-02089");
    }
    }
    	return ((LocalidadeEspecialService)defaultService).store(bean);
    }
    
}