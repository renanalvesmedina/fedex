package com.mercurio.lms.coleta.action;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.FindDefinition;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.ControleCarga;
import com.mercurio.lms.carregamento.model.service.ControleCargaService;
import com.mercurio.lms.carregamento.model.service.ManifestoService;
import com.mercurio.lms.coleta.model.ManifestoColeta;
import com.mercurio.lms.coleta.model.PedidoColeta;
import com.mercurio.lms.coleta.model.service.ManifestoColetaService;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTFormatUtils;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.carregamento.excluirManifestoColetaAction"
 */

public class ExcluirManifestoColetaAction extends CrudAction {
	
	private ManifestoService manifestoService;
	private ManifestoColetaService manifestoColetaService;
	private ControleCargaService controleCargaService;
	private DomainValueService domainValueService;
	private ConfiguracoesFacade configuracoesFacade;
	private FilialService filialService;
	
	public ManifestoService getManifestoService() {
		return manifestoService;
	}

	public void setManifestoService(ManifestoService manifestoService) {
		this.defaultService = manifestoService;
		this.manifestoService = manifestoService;
	}
	
	public ManifestoColetaService getManifestoColetaService() {
		return manifestoColetaService;
	}

	public void setManifestoColetaService(ManifestoColetaService manifestoColetaService) {
		this.manifestoColetaService = manifestoColetaService;
	}

	public DomainValueService getDomainValueService() {
		return domainValueService;
	}

	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}

	public ConfiguracoesFacade getConfiguracoesFacade() {
		return configuracoesFacade;
	}

	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}

	public FilialService getFilialService() {
		return filialService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public ControleCargaService getControleCargaService() {
		return controleCargaService;
	}

	public void setControleCargaService(ControleCargaService controleCargaService) {
		this.controleCargaService = controleCargaService;
	}

	/**
	 * Busca o controle de carga.
	 * 
	 * @param idManifestoColeta
	 * @return
	 */
	public TypedFlatMap findControleCarga(TypedFlatMap criteria) {
		//Reaprove
		ManifestoColeta manifestoColeta = this.getManifestoColetaService().findById(criteria.getLong("idManifestoColeta"));
		TypedFlatMap tfm = new TypedFlatMap(); 
		if(manifestoColeta.getControleCarga() != null){
			ControleCarga cc = controleCargaService.findById(manifestoColeta.getControleCarga().getIdControleCarga());	
			
			tfm.put("controleCarga.idControleCarga", cc.getIdControleCarga());
			tfm.put("controleCarga.nrControleCarga", cc.getNrControleCarga());
			tfm.put("controleCarga.tpStatusControleCarga", cc.getTpStatusControleCarga().getValue());
			tfm.put("controleCarga.filialByIdFilialOrigem.sgFilial", cc.getFilialByIdFilialOrigem().getSgFilial());
		}
		return tfm; 
	}

	/**
	 * FindPaginated.  
	 * 
	 * @param criteria
	 * @return
	 */
	public ResultSetPage findPaginated(TypedFlatMap criteria) {
		FindDefinition findDefinition = FindDefinition.createFindDefinition(criteria);
		Long idManifestoColeta = criteria.getLong("idManifestoColeta");
		
		ResultSetPage resultSetPage = this.getManifestoColetaService()
			.findPaginatedManifestoColeta(idManifestoColeta, findDefinition); 
		
		// Busca a lista da grid para insercao de campos...
		List result = resultSetPage.getList();
		List newResult = new ArrayList();
		
		for (Iterator iter = result.iterator(); iter.hasNext();) {
			Map map = (Map) iter.next();
			
			TypedFlatMap row = new TypedFlatMap();
			row.putAll(map);
			
			//Insere campo endereco...
			row.put("enderecoComplemento", PedidoColeta.getEnderecoComComplemento(
    				row.getString("edColeta"), 
    				row.getString("nrEndereco"), 
    				row.getString("dsComplementoEndereco"), 
    				row.getString("dsBairro")));
			
			//Insere campo de identificacao...
    		row.put("nrIdentificacaoFormatado", 
    			FormatUtils.formatIdentificacao(
    				row.getDomainValue("tpIdentificacao").getValue(), 
    				row.getString("nrIdentificacao")));
    		
    		//Insere campo de horarioColetaFormatado...
    		StringBuffer strHorarioColeta = new StringBuffer();
    		strHorarioColeta.append(JTFormatUtils.format(row.getDateTime("dhColetaDisponivel"), JTFormatUtils.SHORT, JTFormatUtils.TIMEOFDAY));
    		strHorarioColeta.append(configuracoesFacade.getMensagem("ate"));
    		strHorarioColeta.append(JTFormatUtils.format(row.getTimeOfDay("hrLimiteColeta"), JTFormatUtils.SHORT));
    		row.put("horarioColetaFormatado", strHorarioColeta.toString());
    		
    		this.removeCampoDesnecessarios(row);
    		newResult.add(row);
		}
			
		resultSetPage.setList(newResult);
		return resultSetPage;
	}
	
	/**
	 * GetRowCount. 
	 * 
	 * @param criteria
	 * @return
	 */
	public Integer getRowCount(TypedFlatMap criteria) {
		Long idManifestoColeta = criteria.getLong("idManifestoColeta");
		return this.getManifestoColetaService().getRowCountManifestoColeta(idManifestoColeta);
	}
	
	/**
	 * Retorna a filial do usuaario logado para a tag de manifesto.
	 * 
	 * @param criteria
	 * @return
	 */
	public TypedFlatMap findFilialUsuarioLogado(TypedFlatMap criteria) {
		criteria = new TypedFlatMap();
		criteria.put("idFilial", SessionUtils.getFilialSessao().getIdFilial());
		criteria.put("sgFilial", SessionUtils.getFilialSessao().getSgFilial());
		return criteria;
	}
	
	public void removeManifestoColeta(TypedFlatMap criteria){
		Long idManifestoColeta = criteria.getLong("idManifestoColeta");
		this.getManifestoColetaService().removeManifestoColeta(idManifestoColeta);
	}
	
	/*
	 * Metodos da lookup de manifesto
	 */
	public List findTipoManifesto(Map criteria) {
     	List<String>dominiosValidos = new ArrayList<String>();
     	dominiosValidos.add("CO");
     	List retorno = this.getDomainValueService().findByDomainNameAndValues("DM_TAG_MANIFESTO", dominiosValidos);
     	return retorno;
     }
     
     private List findLookupFilialByManifesto(TypedFlatMap criteria) {
     	return this.filialService.findLookupFilial(criteria);
     }
     
     public List findLookupManifestoDocumentFilialCO(TypedFlatMap criteria) {
     	return findLookupFilialByManifesto(criteria);
     }

     public List findLookupManifestoDocumentNumberCO(Map criteria) {
     	return this.manifestoColetaService.findLookup(criteria);
     }
     
     /**
 	 * Remove os campos que sao desnecessarios do row da grid de excluirManifestoColeta.
 	 * 
 	 * @param row
 	 */
 	private void removeCampoDesnecessarios(Map row) {
 		row.remove("edColeta");
 		row.remove("nrEndereco");
 		row.remove("dsComplementoEndereco");
 		row.remove("dsBairro");
 		row.remove("tpIdentificacao");
 		row.remove("nrIdentificacao");
 		row.remove("dhColetaDisponivel");
 		row.remove("hrLimiteColeta");
 	}
}
