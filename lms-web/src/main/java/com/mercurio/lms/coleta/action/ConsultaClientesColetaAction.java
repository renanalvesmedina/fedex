package com.mercurio.lms.coleta.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.joda.time.YearMonthDay;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.FindDefinition;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.coleta.model.service.EventoColetaService;
import com.mercurio.lms.coleta.model.service.PedidoColetaService;
import com.mercurio.lms.configuracoes.model.EnderecoPessoa;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.configuracoes.model.service.EnderecoPessoaService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.RotaColetaEntrega;
import com.mercurio.lms.municipios.model.RotaIntervaloCep;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.MunicipioService;
import com.mercurio.lms.municipios.model.service.RegiaoColetaEntregaFilService;
import com.mercurio.lms.municipios.model.service.RotaColetaEntregaService;
import com.mercurio.lms.municipios.model.service.RotaIntervaloCepService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.ColetaAutomaticaCliente;
import com.mercurio.lms.vendas.model.service.ClienteService;
import com.mercurio.lms.vendas.model.service.ColetaAutomaticaClienteService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.coleta.consultaClientesColetaAction"
 */

public class ConsultaClientesColetaAction extends CrudAction {
	private ClienteService clienteService;
    private RotaColetaEntregaService rotaColetaEntregaService;
    private RegiaoColetaEntregaFilService regiaoColetaEntregaFilService;
    private EventoColetaService eventoColetaService;
    private RotaIntervaloCepService rotaIntervaloCepService;
    private PedidoColetaService pedidoColetaService;
    private DomainValueService domainValueService;
    private EnderecoPessoaService enderecoPessoaService;
    private ColetaAutomaticaClienteService coletaAutomaticaClienteService;
    private MunicipioService municipioService;
    private FilialService filialService; 

    private static final String TP_ENDERECO_COLETA = "COL"; 
    
    public List findLookupFiliais(Map map) {
        return  getFilialService().findLookup(map);
    }
    
    /**
     * Verifica se o usuario tem acesso a uma única filial e retorna essa filial
     * para preencher a lookup de filiais
     */
    public Filial verificaAcessoFilial(Map map) {
        Filial f = null;

        if (SessionUtils.getFiliaisUsuarioLogado().size() == 1) {
            f = (Filial) SessionUtils.getFiliaisUsuarioLogado().get(0);
        }
        return f;
    }
    
    /**
     * Busca a filial do usuario logado.
     * @return Retorna apenas o id da filial, a sigla e o nome
     */
    public Filial getFilialUsuarioLogado(Map map) {
        Filial filial = new Filial();
        filial.setIdFilial(SessionUtils.getFilialSessao().getIdFilial());
        filial.setSgFilial(SessionUtils.getFilialSessao().getSgFilial());
        Pessoa pessoa = new Pessoa();
        pessoa.setNmFantasia(SessionUtils.getFilialSessao().getPessoa().getNmFantasia());
        filial.setPessoa(pessoa);
        return filial;
    }
    
    /**
     * find lookup para cliente 
     */
    public List findLookupCliente(Map criteria){
    	List clientes = this.getClienteService().findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = clientes.iterator(); iter.hasNext();) {
			Cliente cliente = (Cliente) iter.next();
			TypedFlatMap typedFlatMap = new TypedFlatMap();
			typedFlatMap.put("idCliente", cliente.getIdCliente());
			typedFlatMap.put("pessoa.nmPessoa", cliente.getPessoa().getNmPessoa());
			typedFlatMap.put("pessoa.nrIdentificacao", cliente.getPessoa().getNrIdentificacao());
			typedFlatMap.put("pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(cliente.getPessoa()));
			retorno.add(typedFlatMap);
		}
    	return retorno;
    }


    /**
     * find lookup para rota coleta entrega 
     */
    public List findLookupRotaColetaEntrega(Map map) {
        Map tmp = new HashMap();
        Map idFilial = new HashMap();
        idFilial.put("idFilial", ((Map) map.get("filial")).get("idFilial"));
        Map filial = new HashMap();
        filial.putAll(idFilial);
        tmp.put("nrRota",map.get("nrRota"));
        tmp.put("filial", filial);

    	List rotas = this.getRotaColetaEntregaService().findLookup(tmp);
    	List retorno = new ArrayList();
    	for (Iterator iter = rotas.iterator(); iter.hasNext();) {
			RotaColetaEntrega rotaColetaEntrega = (RotaColetaEntrega) iter.next();
			TypedFlatMap typedFlatMap = new TypedFlatMap();
			typedFlatMap.put("idRotaColetaEntrega", rotaColetaEntrega.getIdRotaColetaEntrega());
			typedFlatMap.put("nrRota", rotaColetaEntrega.getNrRota());
			typedFlatMap.put("dsRota", rotaColetaEntrega.getDsRota());
			retorno.add(typedFlatMap);
		}
    	return retorno;
        
    }
    
    /**
     * find para combo de região 
     */
    public List findComboRegiao(TypedFlatMap criteria){
        return getRegiaoColetaEntregaFilService().findListRegiaoVigente(criteria);
    }
    
    /**
     * Busca as coletas automaticas 
     * @param map
     * @return
     */
    public ResultSetPage findPaginatedColetasAutomatica(Map map) {
    	map.put("_currentPage", "1");
    	map.put("_pageSize", "10");
        ResultSetPage rsp = getColetaAutomaticaClienteService().findPaginated(map);
        Iterator iter = rsp.getList().iterator();
        List retorno = new ArrayList();
        Map dados = null;

        while (iter.hasNext()) {
            dados = new HashMap();
            ColetaAutomaticaCliente cac = (ColetaAutomaticaCliente)iter.next();
            
            dados.put("tpDiaSemana", cac.getTpDiaSemana());
            dados.put("hrChegada", cac.getHrChegada());
            dados.put("hrSaida", cac.getHrSaida());
            retorno.add(dados);
        }
        
        rsp.setList(retorno);
        return rsp;
    }
    
    /**
     * row count para findPaginatedColetasAutomatica
     * @param map
     * @return
     */
    public Integer getRowCountColetasAutomatica(Map map) {
        return getColetaAutomaticaClienteService().getRowCount(map);
    }

    /**
     * FindPaginated para consulta clientes coleta.
     * utiliza o método pedidoColetaService.findPaginatedClientesColeta()
     */
    public ResultSetPage findPaginatedClientesColeta(TypedFlatMap tfm) {
        Long idCliente = tfm.getLong("cliente.idCliente");
        Long idFilial = tfm.getLong("filial.idFilial");
        YearMonthDay dtInicial = tfm.getYearMonthDay("dataInicial");
        YearMonthDay dtFinal = tfm.getYearMonthDay("dataFinal");
        Long idRotaColetaEntrega = tfm.getLong("rotaColetaEntrega.idRotaColetaEntrega");
        Long idRegiaoColetaEntregaFil = tfm.getLong("regiaoColetaEntregaFil.idRegiaoColetaEntregaFil");
        
        ResultSetPage rsp = getPedidoColetaService().findPaginatedClientesColeta(idFilial, idCliente, dtInicial, dtFinal, idRotaColetaEntrega, idRegiaoColetaEntregaFil, tfm);
        List dadosRetorno = new ArrayList();
        List list = rsp.getList();
        Iterator iterator = list.iterator();
        
        while (iterator.hasNext()) {
            Map map = (Map) iterator.next();
            DomainValue tpIdentificacao = (DomainValue) map.get("tpIdentificacaoCliente");
            map.put("nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(tpIdentificacao.getValue(), (String)map.get("nrIdentificacaoCliente")) );
            dadosRetorno.add(map);
        }
        
        rsp.setList(dadosRetorno);
        return rsp; 
    }
    
    /**
     * row count para o findPaginatedClientesColeta
     */
    public Integer getRowCountClientesColeta(TypedFlatMap tfm) {
        Long idFilial = tfm.getLong("filial.idFilial");
        Long idCliente = tfm.getLong("cliente.idCliente");
        YearMonthDay dtInicial = tfm.getYearMonthDay("dataInicial");
        YearMonthDay dtFinal = tfm.getYearMonthDay("dataFinal");
        Long idRotaColetaEntrega = tfm.getLong("rotaColetaEntrega.idRotaColetaEntrega");
        Long idRegiaoColetaEntregaFil = tfm.getLong("regiaoColetaEntregaFil.idRegiaoColetaEntregaFil");
        
        return getPedidoColetaService().getRowCountClientesColeta(idFilial, idCliente, dtInicial, dtFinal, idRotaColetaEntrega, idRegiaoColetaEntregaFil);
    }
    
    /**
     * Busca o Cliente. Usado para carregar os clientes nas popup's 
     * @param idCliente
     * @return Cliente
     */
    public Cliente findCliente(Long idCliente) {
        Cliente clientePesquisa = getClienteService().findById(idCliente);
        Cliente clienteRetorno = new Cliente();
        Pessoa p = clientePesquisa.getPessoa();
        Pessoa r = new Pessoa();
        r.setNmPessoa(p.getNmPessoa());
        r.setNrIdentificacao(FormatUtils.formatIdentificacao(p.getTpIdentificacao().getValue(), p.getNrIdentificacao()));
        clienteRetorno.setIdCliente(clientePesquisa.getIdCliente());
        clienteRetorno.setPessoa(r);
        
        return clienteRetorno; 
    }
    
    /**
     * Busca os pedidos coleta do cliente especifico.
     * @param tfm
     * @return
     */
    public ResultSetPage findPaginatedPedidosColetaByCliente(TypedFlatMap tfm) {
        Long idCliente = tfm.getLong("cliente.idCliente");
        YearMonthDay dtInicial = tfm.getYearMonthDay("dataInicial");
        YearMonthDay dtFinal = tfm.getYearMonthDay("dataFinal");
        List tpStatusColeta = new ArrayList();
        DomainValue tpPedidoColeta = tfm.getDomainValue("tpPedidoColeta");
        String strTpPedidoColeta = null;

        if(tpPedidoColeta != null) {
            strTpPedidoColeta = tpPedidoColeta.getValue(); 
        }

		if (((String)tfm.get("tpStatusColetaAberta")).equals("true")) tpStatusColeta.add("AB");
		if (((String)tfm.get("tpStatusColetaTransmitida")).equals("true")) tpStatusColeta.add("TR");
		if (((String)tfm.get("tpStatusColetaManifestada")).equals("true")) tpStatusColeta.add("MA");
		if (((String)tfm.get("tpStatusColetaExecutada")).equals("true")) tpStatusColeta.add("EX");
		if (((String)tfm.get("tpStatusColetaCancelada")).equals("true")) tpStatusColeta.add("CA");
		if (tpStatusColeta.size()==0) tpStatusColeta = null;

       return getPedidoColetaService().findPaginatedPedidosColetaByCliente(idCliente, dtInicial, dtFinal, tpStatusColeta, strTpPedidoColeta, FindDefinition.createFindDefinition(tfm));
    }
    
    /**
     * Row count para findPaginatedPedidosColetaByCliente().
     * @param tfm
     * @return
     */
    public Integer getRowCountPedidosColetaByCliente(TypedFlatMap tfm){
        Long idCliente = null;
        YearMonthDay dtInicial = null;
        YearMonthDay dtFinal = null;
        List tpStatusColetaList = new ArrayList();
        DomainValue tpPedidoColeta = null;
        // busca os filtros da pesquisa
        idCliente = tfm.getLong("cliente.idCliente");
        dtInicial = tfm.getYearMonthDay("dataIniclial");
        dtFinal = tfm.getYearMonthDay("dataFinal");
        tpPedidoColeta = tfm.getDomainValue("tpPedidoColeta");
        
        String strTpPedidoColeta = null;
        
        if(tpPedidoColeta!=null) {
            strTpPedidoColeta = tpPedidoColeta.getValue(); 
        }
        
        if (tfm.getBoolean("tpStatusColetaAberta").booleanValue()) tpStatusColetaList.add("AB");
        if (tfm.getBoolean("tpStatusColetaTransmitida").booleanValue()) tpStatusColetaList.add("TR");
        if (tfm.getBoolean("tpStatusColetaManifestada").booleanValue()) tpStatusColetaList.add("MA");
        if (tfm.getBoolean("tpStatusColetaExecutada").booleanValue()) tpStatusColetaList.add("EX");
        if (tfm.getBoolean("tpStatusColetaCancelada").booleanValue()) tpStatusColetaList.add("CA");
        return getPedidoColetaService().getRowCountPedidosColetaByCliente(idCliente, dtInicial, dtFinal, tpStatusColetaList, strTpPedidoColeta);
    }

    /**
     * Busca os enderecos de coleta do cliente.
     * @param tfm
     * @return
     */
    public ResultSetPage findPaginatedEnderecosColeta(Map map) {
        
        map.put("pessoa.idPessoa",map.get("idCliente"));
        map.put("tpEndereco", TP_ENDERECO_COLETA);
        
        ResultSetPage rsp = getEnderecoPessoaService().findPaginated(map);
        
        Iterator iter = rsp.getList().iterator();
        List retorno = new ArrayList();
        Map dadosRetorno = null;
        
        while (iter.hasNext()) {
            EnderecoPessoa ep = (EnderecoPessoa) iter.next();
            dadosRetorno = new HashMap();
            
            dadosRetorno.put("idEnderecoPessoa", ep.getIdEnderecoPessoa());
            dadosRetorno.put("dsEndereco", ep.getDsEndereco());
            dadosRetorno.put("nrEndereco", ep.getNrEndereco());
            dadosRetorno.put("dsComplemento", ep.getDsComplemento());
            dadosRetorno.put("dsBairro", ep.getDsBairro());
            dadosRetorno.put("nrCep", ep.getNrCep());
            dadosRetorno.put("nmMunicipio", ep.getMunicipio().getNmMunicipio());
            dadosRetorno.put("sgUnidadeFederativa", ep.getMunicipio().getUnidadeFederativa().getSgUnidadeFederativa());

//          foi falado com o analista de negocio e ele disse que retornaria apenas um registro
            List rotaIntervaloList = getRotaIntervaloCepService().findRotaIntervaloCepByCep(ep.getMunicipio().getIdMunicipio(), ep.getNrCep());
            if( rotaIntervaloList.size() > 0 ) {
                RotaIntervaloCep ric = (RotaIntervaloCep)rotaIntervaloList.get(0);
                dadosRetorno.put("dsRota", ric.getRotaColetaEntrega().getDsRota());
            } else {
                dadosRetorno.put("dsRota","");
            }
            
            dadosRetorno.put("dsRegiao", ep.getMunicipio().getUnidadeFederativa().getRegiaoGeografica().getDsRegiaoGeografica());
            retorno.add(dadosRetorno);
        }
        
        rsp.setList(retorno);
        return rsp;
    }
    /**
     * Row count para findPaginatedEnderecosColeta()
     * @param tfm
     * @return
     */
    public Integer getRowCountEnderecosColeta(Map map){
        map.put("pessoa.idPessoa",map.get("idCliente"));
        map.put("tpEndereco", TP_ENDERECO_COLETA);

        return getEnderecoPessoaService().getRowCount(map);
    }
    
    /**
     * Seta a service principal a ser utilizada nos jsp's 
     * @param pedidoColetaService
	 */
    public void setService(PedidoColetaService pedidoColetaService) {
		this.defaultService = pedidoColetaService;
	}
    
    public ClienteService getClienteService() {
        return clienteService;
    }
    
    public void setClienteService(ClienteService clienteService) {
        this.clienteService = clienteService;
    }
    
    public EventoColetaService getEventoColetaService() {
        return eventoColetaService;
    }
    
    public void setEventoColetaService(EventoColetaService eventoColetaService) {
        this.eventoColetaService = eventoColetaService;
    }
    
    public RegiaoColetaEntregaFilService getRegiaoColetaEntregaFilService() {
        return regiaoColetaEntregaFilService;
    }
    
    public void setRegiaoColetaEntregaFilService(RegiaoColetaEntregaFilService regiaoColetaEntregaFilService) {
        this.regiaoColetaEntregaFilService = regiaoColetaEntregaFilService;
    }
    
    public RotaColetaEntregaService getRotaColetaEntregaService() {
        return rotaColetaEntregaService;
    }
    
    public void setRotaColetaEntregaService(RotaColetaEntregaService rotaColetaEntregaService) {
        this.rotaColetaEntregaService = rotaColetaEntregaService;
    }

    public RotaIntervaloCepService getRotaIntervaloCepService() {
        return rotaIntervaloCepService;
    }

    public void setRotaIntervaloCepService(
            RotaIntervaloCepService rotaIntervaloCepService) {
        this.rotaIntervaloCepService = rotaIntervaloCepService;
    }

    public PedidoColetaService getPedidoColetaService() {
        return pedidoColetaService;
    }

    public void setPedidoColetaService(PedidoColetaService pedidoColetaService) {
        this.pedidoColetaService = pedidoColetaService;
    }

    public DomainValueService getDomainValueService() {
        return domainValueService;
    }

    public void setDomainValueService(DomainValueService domainValueService) {
        this.domainValueService = domainValueService;
    }

    public EnderecoPessoaService getEnderecoPessoaService() {
        return enderecoPessoaService;
    }

    public void setEnderecoPessoaService(EnderecoPessoaService enderecoPessoaService) {
        this.enderecoPessoaService = enderecoPessoaService;
    }

    public ColetaAutomaticaClienteService getColetaAutomaticaClienteService() {
        return coletaAutomaticaClienteService;
    }

    public void setColetaAutomaticaClienteService(ColetaAutomaticaClienteService coletaAutomaticaClienteService) {
        this.coletaAutomaticaClienteService = coletaAutomaticaClienteService;
    }

    public MunicipioService getMunicipioService() {
        return municipioService;
    }

    public void setMunicipioService(MunicipioService municipioService) {
        this.municipioService = municipioService;
    }

    public FilialService getFilialService() {
        return filialService;
    }

    public void setFilialService(FilialService filialService) {
        this.filialService = filialService;
    }
}
