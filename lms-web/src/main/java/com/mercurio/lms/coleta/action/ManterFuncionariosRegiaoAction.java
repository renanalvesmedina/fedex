package com.mercurio.lms.coleta.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.coleta.model.FuncionarioRegiao;
import com.mercurio.lms.coleta.model.service.FuncionarioRegiaoService;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.configuracoes.model.service.UsuarioService;
import com.mercurio.lms.municipios.model.RegiaoColetaEntregaFil;
import com.mercurio.lms.municipios.model.service.RegiaoColetaEntregaFilService;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.coleta.manterFuncionariosRegiaoAction"
 */

public class ManterFuncionariosRegiaoAction extends CrudAction {
	
	private FuncionarioRegiaoService funcionarioRegiaoService;
	private RegiaoColetaEntregaFilService regiaoColetaEntregaFilService;
	private UsuarioService usuarioService;

	public FuncionarioRegiaoService getFuncionarioRegiaoService() {
		return funcionarioRegiaoService;
	}
	
	public void setFuncionarioRegiaoService(FuncionarioRegiaoService funcionarioRegiaoService) {
		this.funcionarioRegiaoService = funcionarioRegiaoService;
	}

	public RegiaoColetaEntregaFilService getRegiaoColetaEntregaFilService() {
		return regiaoColetaEntregaFilService;
	}

	public void setRegiaoColetaEntregaFilService(
			RegiaoColetaEntregaFilService regiaoColetaEntregaFilService) {
		this.regiaoColetaEntregaFilService = regiaoColetaEntregaFilService;
	}
	
	public UsuarioService getUsuarioService() {
		return usuarioService;
	}

	public void setUsuarioService(UsuarioService usuarioService) {
		this.usuarioService = usuarioService;
	}

	public Serializable store(TypedFlatMap tfm) {
		
		FuncionarioRegiao funcionarioRegiao = new FuncionarioRegiao();
		funcionarioRegiao.setIdFuncionarioRegiao(tfm.getLong("idFuncionarioRegiao"));
	
		Usuario usuario = new Usuario();
		usuario.setIdUsuario(tfm.getLong("usuario.idUsuario"));
		funcionarioRegiao.setUsuario(usuario);
		
		RegiaoColetaEntregaFil regiaoColetaEntregaFil = new RegiaoColetaEntregaFil();
		regiaoColetaEntregaFil.setIdRegiaoColetaEntregaFil(tfm.getLong("regiaoColetaEntregaFil.idRegiaoColetaEntregaFil"));
		funcionarioRegiao.setRegiaoColetaEntregaFil(regiaoColetaEntregaFil);
		
		return getFuncionarioRegiaoService().store(funcionarioRegiao);
	}
	
	/**
	 * Apaga uma entidade através do Id.
	 *
	 * @param id indica a entidade que deverá ser removida.
	 */
    public void removeById(java.lang.Long id) {
    	this.getFuncionarioRegiaoService().removeById(id);
    }

	/**
	 * Apaga várias entidades através do Id.
	 *
	 * @param ids lista com as entidades que deverão ser removida.
	 *
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	this.getFuncionarioRegiaoService().removeByIds(ids);
    }
    
    public FuncionarioRegiao findById(java.lang.Long id) {
    	return this.getFuncionarioRegiaoService().findById(id);
    }
    
    public List findLookupUsuarioFuncionario(TypedFlatMap tfm){
    	String nrMatricula = tfm.getString("nrMatricula");
    	nrMatricula = StringUtils.leftPad(nrMatricula, 9, "0");
    	tfm.put("nrMatricula", nrMatricula);
    	return usuarioService.findLookupUsuarioFuncionario(tfm.getLong("idUsuario"), tfm.getString("nrMatricula"), null, null, null, null, true);
    }
    
    public ResultSetPage findPaginatedFuncionariosRegiao(Map criteria) {
        ResultSetPage rsp = getFuncionarioRegiaoService().findPaginated(criteria);
        List dadosRetorno = new ArrayList();
        List list = rsp.getList();
        TypedFlatMap mapRetorno;
        FuncionarioRegiao funcionarioRegiao;
        for (Iterator iter = list.iterator(); iter.hasNext();) {
        	funcionarioRegiao = (FuncionarioRegiao)iter.next();
			mapRetorno = new TypedFlatMap();
			mapRetorno.put("idFuncionarioRegiao", funcionarioRegiao.getIdFuncionarioRegiao());
			mapRetorno.put("usuario.nrMatricula", funcionarioRegiao.getUsuario().getNrMatricula());
			mapRetorno.put("usuario.nmUsuario", funcionarioRegiao.getUsuario().getNmUsuario());
			mapRetorno.put("regiaoColetaEntregaFil.dsRegiaoColetaEntregaFil", funcionarioRegiao.getRegiaoColetaEntregaFil().getDsRegiaoColetaEntregaFil());
			dadosRetorno.add(mapRetorno);
		}
        rsp.setList(dadosRetorno);
        return rsp; 
    }
    
    public Integer getRowCountFuncionariosRegiao(Map criteria){
    	return getFuncionarioRegiaoService().getRowCount(criteria);
    }
    
    /**
     * Busca a filial do usuario logado
     * 
     * @return
     */
    public Map findFilialUsuarioLogado(){
    	return this.getFuncionarioRegiaoService().findFilialUsuarioLogado();
    }
    
    /**
     * Chama a service de Regiao coleta entrega filial para acessar ao seu metodo de 
     * find 
     *  
     * @param criteria
     * @return
     */
    public List findRegiaoColetaEntregaFil(TypedFlatMap criteria){
    	return this.getFuncionarioRegiaoService().findRegiaoColetaEntregaByFilial(criteria);
    }
    
    /**
     * Chama a service de Usuario para acessar ao seu metodo de 'findLookup'
     * 
     * @param criteria
     * @return
     */    
    public List findLookupUsuario(Map criteria) {
    	return this.getUsuarioService().findLookup(criteria);
    }

}
