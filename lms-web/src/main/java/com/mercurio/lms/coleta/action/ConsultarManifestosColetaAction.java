package com.mercurio.lms.coleta.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.ControleCarga;
import com.mercurio.lms.coleta.model.ManifestoColeta;
import com.mercurio.lms.coleta.model.service.ManifestoColetaService;
import com.mercurio.lms.configuracoes.model.Moeda;
import com.mercurio.lms.contratacaoveiculos.model.MeioTransporte;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.RotaColetaEntrega;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.RotaColetaEntregaService;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.coleta.consultarManifestosColetaAction"
 */

public class ConsultarManifestosColetaAction { 
    
	private ManifestoColetaService manifestoColetaService;
	private FilialService filialService;
	private RotaColetaEntregaService rotaColetaEntregaService;

	public ManifestoColetaService getManifestoColetaService() {
		return manifestoColetaService;
	}

	public void setManifestoColetaService(
			ManifestoColetaService manifestoColetaService) {
		this.manifestoColetaService = manifestoColetaService;
	}

	public FilialService getFilialService() {
		return filialService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	
	public RotaColetaEntregaService getRotaColetaEntregaService() {
		return rotaColetaEntregaService;
	}

	public void setRotaColetaEntregaService(
			RotaColetaEntregaService rotaColetaEntregaService) {
		this.rotaColetaEntregaService = rotaColetaEntregaService;
	}

	public Integer getRowCount(Map criteria) {
		return this.getManifestoColetaService().getRowCount(criteria);
	}

	public ResultSetPage findPaginated(Map criteria) {
		ResultSetPage resultSetPage = this.getManifestoColetaService().findPaginated(criteria);
		List listManifestosColeta = resultSetPage.getList();
		List listRetorno = new ArrayList();
		TypedFlatMap row = null;
		for (Iterator iter = listManifestosColeta.iterator(); iter.hasNext();) {
			ManifestoColeta manifestoColeta = (ManifestoColeta) iter.next();
			ControleCarga cc = manifestoColeta.getControleCarga();
			MeioTransporte meioTransporteTransportado = cc.getMeioTransporteByIdTransportado();
			MeioTransporte meioTransporteSemiRebocado = cc.getMeioTransporteByIdSemiRebocado();
			Moeda moeda = cc.getMoeda();
			row = new TypedFlatMap();
			row.put("idManifestoColeta", manifestoColeta.getIdManifestoColeta());
			row.put("nrManifesto",manifestoColeta.getNrManifesto());
			row.put("dhGeracao", manifestoColeta.getDhGeracao());
			row.put("filial.idFilial", manifestoColeta.getFilial().getIdFilial());
			row.put("filial.sgFilial", manifestoColeta.getFilial().getSgFilial());			
			row.put("controleCarga.filialByIdFilialOrigem.sgFilial", cc.getFilialByIdFilialOrigem().getSgFilial());
			row.put("controleCarga.nrControleCarga", cc.getNrControleCarga());
			row.put("controleCarga.psTotalFrota", cc.getPsTotalFrota());
			row.put("controleCarga.vlTotalFrota", cc.getVlTotalFrota());
			if(moeda!=null){
				row.put("controleCarga.moeda.dsSimbolo", cc.getMoeda().getDsSimbolo());
				row.put("controleCarga.moeda.sgMoeda", cc.getMoeda().getSgMoeda());
			}
			if (meioTransporteTransportado!=null){
				row.put("controleCarga.meioTransporteByIdTransportado.nrFrota", meioTransporteTransportado.getNrFrota());
				row.put("controleCarga.meioTransporteByIdTransportado.nrIdentificador", meioTransporteTransportado.getNrIdentificador());
				row.put("controleCarga.meioTransporteByIdTransportado.nrCapacidadeKg",meioTransporteTransportado.getNrCapacidadeKg());
			}
			if (meioTransporteSemiRebocado!=null){
				row.put("controleCarga.meioTransporteByIdSemiRebocado.nrFrota", meioTransporteSemiRebocado.getNrFrota());
				row.put("controleCarga.meioTransporteByIdSemiRebocado.nrIdentificador", meioTransporteSemiRebocado.getNrIdentificador());
			}
			listRetorno.add(row);
			
		}
		resultSetPage.setList(listRetorno);
		return resultSetPage;
	}

	/**
	 * Busca algums dos dados do usuario logado, que está na sessão.
	 * 
	 * @return map
	 */
	public Map getDataUsuario() {

		Map pessoa = new HashMap();
		pessoa.put("nmPessoa", SessionUtils.getFilialSessao().getPessoa().getNmFantasia());

		Map filial = new HashMap();
        filial.put("idFilial", SessionUtils.getFilialSessao().getIdFilial());
		filial.put("sgFilial", SessionUtils.getFilialSessao().getSgFilial());
		filial.put("pessoa", pessoa);

		Map dadosUsuario = new HashMap();
		dadosUsuario.put("filial", filial);

		return dadosUsuario;
	}
    
	/**
	 * Busca uma list de rota coleta/entrega. 
	 * 
	 * @param criteria
	 * @return
	 */
	public List findLookupRotaColetaEntregaByFilial(Map criteria) {
		List listRetorno = new ArrayList();
		Map map = null;
		List listRotaColetaEntrega = this.getRotaColetaEntregaService().findLookupByFilialUsuario(criteria);
		for (Iterator iter = listRotaColetaEntrega.iterator(); iter.hasNext();) {
			RotaColetaEntrega rotaColetaEntrega = (RotaColetaEntrega) iter.next();
			map = new HashMap();
			map.put("idRotaColetaEntrega", rotaColetaEntrega.getIdRotaColetaEntrega());
			map.put("nrRota", rotaColetaEntrega.getNrRota());
			map.put("dsRota", rotaColetaEntrega.getDsRota());
			listRetorno.add(map);
		}
		return listRetorno;

	}
	
	/**
	 * Faz a pesquisa da lookup de filial, levando em consideracao buscar apenas as filiais 
	 * que o usuario logado tem acesso
	 * 
	 * @param TypedFlatMap criteria
	 * @return List
	 */
	public List findLookupFilialByUsuario(Map criteria) {
		
		List listFilialLookup = getFilialService().findLookup(criteria);
        List result = new ArrayList();
        if (listFilialLookup.size() == 1) {
            Filial filial = (Filial)listFilialLookup.get(0); 
            if (SessionUtils.isFilialAllowedByUsuario(filial)) {
                result.add(filial);
            } else {
                throw new BusinessException("LMS-00050");
            }
        }else {
            result = listFilialLookup; 
        }
        return result;
	}
	
	public TypedFlatMap findFilialById(Long idFilial) {
		Filial filial = filialService.findById(idFilial);
		TypedFlatMap result = new TypedFlatMap();		
		result.put("filial.sgFilial", filial.getSgFilial());
		result.put("filial.pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
		return result;
	}

}
