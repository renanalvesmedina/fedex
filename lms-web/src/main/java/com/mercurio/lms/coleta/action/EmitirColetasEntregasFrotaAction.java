package com.mercurio.lms.coleta.action;

import java.io.File;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.ControleCarga;
import com.mercurio.lms.carregamento.model.service.ControleCargaService;
import com.mercurio.lms.coleta.report.RelatorioColetasEntregasFrotaService;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.Servico;
import com.mercurio.lms.configuracoes.model.service.ServicoService;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteService;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.sgr.model.service.GerarEnviarSMPService;
import com.mercurio.lms.util.JTDateTimeUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.coleta.emitirColetasEntregasFrotaAction"
 */

public class EmitirColetasEntregasFrotaAction extends CrudAction {

	private FilialService filialService;
	private ControleCargaService controleCargaService;
	private MeioTransporteService meioTransporteService;
	private RelatorioColetasEntregasFrotaService relatorioColetasEntregasFrotaService;
	private ConfiguracoesFacade configuracoesFacade;
	private GerarEnviarSMPService gerarEnviarSMPService;
	private ServicoService servicoService;
	
	/**********************************************************************************************************
	 * Business methods 
	 **********************************************************************************************************/
	
	public Integer getRowCount(TypedFlatMap tfm) {
		return this.relatorioColetasEntregasFrotaService.getRowCount(tfm);
	}
	
	public ResultSetPage findPaginated(TypedFlatMap tfm) {
		tfm.put("stringEntrega", configuracoesFacade.getMensagem("entrega"));
		tfm.put("stringColeta", configuracoesFacade.getMensagem("coleta"));
		tfm.put("stringEntregaAeroporto", configuracoesFacade.getMensagem("entregaAeroporto"));
		return this.relatorioColetasEntregasFrotaService.findPaginated(tfm);
	}
	
	public File execute(TypedFlatMap parameters) throws Exception {
		parameters.put("stringEntrega", configuracoesFacade.getMensagem("entrega"));
		parameters.put("stringColeta", configuracoesFacade.getMensagem("coleta"));
		parameters.put("stringEntregaAeroporto", configuracoesFacade.getMensagem("entregaAeroporto"));
		return this.relatorioColetasEntregasFrotaService.executeReport(parameters);
	}
	
	public void testarProcesso() {
		gerarEnviarSMPService.generateAlterarSMP(Long.valueOf(85));
	}
	
	/**********************************************************************************************************
	 * Finders 
	 **********************************************************************************************************/
	public List findLookupMeioTransporte(Map map) {		
		return this.meioTransporteService.findLookup(map);
	}
	
	public List findLookupControleCarga(Map map) {
		return this.controleCargaService.findLookup(map);
	}
	
	public List findLookupFilial(Map map) {
		return this.filialService.findLookupFilial(map);
	}

	/**
	 * Busca o controle de carga pelo id e o devolve à tela.
	 * @param tfm
	 * @return
	 */
	public Map findControleCargaById(TypedFlatMap tfm) {
		TypedFlatMap result = new TypedFlatMap();
		List list = this.controleCargaService.findLookup(tfm);
		if (list.size()==1) {
			ControleCarga controleCarga = (ControleCarga) list.get(0);
			result.put("controleCarga.idControleCarga", controleCarga.getIdControleCarga());
			result.put("controleCarga.nrControleCarga", new DecimalFormat("00000000").format(controleCarga.getNrControleCarga()));
			result.put("controleCarga.filialByIdFilialOrigem.idFilial", controleCarga.getFilialByIdFilialOrigem().getIdFilial());
			result.put("controleCarga.filialByIdFilialOrigem.sgFilial", controleCarga.getFilialByIdFilialOrigem().getSgFilial());
			result.put("controleCarga.filialByIdFilialOrigem.pessoa.nmFantasia", controleCarga.getFilialByIdFilialOrigem().getPessoa().getNmFantasia());
			result.put("controleCarga.meioTransporteByIdTransportado.idMeioTransporte", controleCarga.getMeioTransporteByIdTransportado().getIdMeioTransporte());
			result.put("controleCarga.meioTransporteByIdTransportado.nrIdentificador", controleCarga.getMeioTransporteByIdTransportado().getNrIdentificador());
			result.put("controleCarga.meioTransporteByIdTransportado.nrFrota", controleCarga.getMeioTransporteByIdTransportado().getNrFrota());
			
		}
		return result;
	}
	
	public List findServico(Map criteria) {
		List retorno = new ArrayList();
		List servicos = servicoService.find(criteria);
		for (Iterator iter = servicos.iterator(); iter.hasNext();) {
			TypedFlatMap map = new TypedFlatMap();
			Servico servico = (Servico) iter.next();
			map.put("idServico", servico.getIdServico());
			map.put("dsServico", servico.getDsServico());
			retorno.add(map);
		}
		return retorno;
	} 
	
	/**********************************************************************************************************
	 * Getters and setters 
	 **********************************************************************************************************/
	public TypedFlatMap getDate() {
		TypedFlatMap retorno = new TypedFlatMap();
		retorno.put("dtConsulta", JTDateTimeUtils.getDataAtual());
		return retorno;
	}
	
	public void setRelatorioColetasEntregasFrotaService(RelatorioColetasEntregasFrotaService relatorioColetasEntregasFrotaService) {
		this.relatorioColetasEntregasFrotaService = relatorioColetasEntregasFrotaService;
	}
	
	public void setMeioTransporteService(
			MeioTransporteService meioTransporteService) {
		this.meioTransporteService = meioTransporteService;
	}

	public void setControleCargaService(ControleCargaService controleCargaService) {
		this.controleCargaService = controleCargaService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}

	public void setGerarEnviarSMPService(GerarEnviarSMPService gerarEnviarSMPService) {
		this.gerarEnviarSMPService = gerarEnviarSMPService;
	}
	
	public void setServicoService(ServicoService servicoService) {
		this.servicoService = servicoService;
	}

}
