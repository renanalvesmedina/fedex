package com.mercurio.lms.coleta.action;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.report.ReportActionSupport;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.coleta.model.service.ManifestoColetaService;
import com.mercurio.lms.coleta.report.ManifestosColetaSemBaixaService;
import com.mercurio.lms.configuracoes.model.Servico;
import com.mercurio.lms.configuracoes.model.service.ServicoService;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.RotaColetaEntregaService;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.coleta.emitirManifestosColetaSemBaixaAction"
 */

public class EmitirManifestosColetaSemBaixaAction extends ReportActionSupport {
	
	private RotaColetaEntregaService rotaColetaEntregaService;
	private ManifestoColetaService manifestoColetaService;
	private MeioTransporteService meioTransporteService;
	private FilialService filialService;
	private ServicoService servicoService;
	
	public void setManifestosColetaSemBaixaService(ManifestosColetaSemBaixaService manifestosColetaSemBaixaService) {
		this.reportServiceSupport = manifestosColetaSemBaixaService;
	}
	
	public RotaColetaEntregaService getRotaColetaEntregaService() {
		return rotaColetaEntregaService;
	}
	
	public void setRotaColetaEntregaService(RotaColetaEntregaService rotaColetaEntregaService) {
		this.rotaColetaEntregaService = rotaColetaEntregaService;
	}
	
	public MeioTransporteService getMeioTransporteService() {
		return meioTransporteService;
	}
	
	public void setMeioTransporteService(MeioTransporteService meioTransporteService) {
		this.meioTransporteService = meioTransporteService;
	}
	
	public FilialService getFilialService() {
		return filialService;
	}
	
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	
	public ManifestoColetaService getManifestoColetaService() {
		return manifestoColetaService;
	}
	
	public void setManifestoColetaService(ManifestoColetaService manifestoColetaService) {
		this.manifestoColetaService = manifestoColetaService;
	}
		
	/*
	 * Metodos de pesquisa para os objetos da tela 
	 */
	
	/**
	 * Faz a pesquisa da lookup de filial, levando em consideracao buscar apenas as filiais 
	 * que o usuario logado tem acesso
	 * 
	 * @param TypedFlatMap criteria
	 * @return List
	 */
	public List findLookupFilialByUsuario(Map criteria) {
		
		List listFilialLookup = getFilialService().findLookup(criteria);
        List result = new ArrayList();
        if (listFilialLookup.size() == 1) {
            Filial filial = (Filial)listFilialLookup.get(0); 
            if (SessionUtils.isFilialAllowedByUsuario(filial)) {
                result.add(filial);
            } else {
                throw new BusinessException("LMS-00050");
            }
        }else {
            result = listFilialLookup; 
        }
        return result;
	}
	
	/**
	 * Faz a pesquisa de rotaColetaEntrega 
	 * 
	 * @param TypedFlatMap criteria
	 * @return List 
	 */
    public List findLookupRotaColetaEntrega(Map criteria){
       	((Map)criteria.get("filial")).remove("sgFilial");
       	((Map)criteria.get("filial")).remove("pessoa");
       	return this.getRotaColetaEntregaService().findLookup(criteria);
    }
    
    /**
     * Faz a pesquisa da lookup de manifestoColeta
     * 
     * @param TypedFlatMap criteria
     * @return List
     */
    public List findLookupManifestoColeta(Map criteria) {
    	return this.getManifestoColetaService().findLookup(criteria);
    }

    /**
     * Faz a pesquisa da lookup de meioTransporte
     * 
     * @param TypedFlatMap criteria
     * @return List
     */
    public List findLookupMeioTransporte(TypedFlatMap criteria) {
    	return this.getMeioTransporteService().findLookup(criteria);
    }
    
    /**
     * Busca os tipos de servico
     * 
     * @param TypedFlatMap criteria
     * @return List
     */
    public List findServico(Map criteria) {
		List retorno = new ArrayList();
		List listServico = servicoService.find(criteria);
		for (Iterator iter = listServico.iterator(); iter.hasNext();) {
			TypedFlatMap map = new TypedFlatMap();
			Servico servico = (Servico) iter.next();
			map.put("idServico", servico.getIdServico());
			map.put("dsServico", servico.getDsServico());
			retorno.add(map);
		}
		return retorno;
	} 
	
	public void setServicoService(ServicoService servicoService) {
		this.servicoService = servicoService;
	}
}
