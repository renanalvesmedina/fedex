package com.mercurio.lms.coleta.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.FilterList;
import com.mercurio.adsm.framework.util.FilterResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.service.ControleCargaService;
import com.mercurio.lms.coleta.model.ManifestoColeta;
import com.mercurio.lms.coleta.model.PedidoColeta;
import com.mercurio.lms.coleta.model.service.ManifestoColetaService;
import com.mercurio.lms.coleta.model.service.PedidoColetaService;
import com.mercurio.lms.municipios.model.RotaColetaEntrega;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.RotaColetaEntregaService;
import com.mercurio.lms.util.session.SessionUtils;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;

/**
 * Generated by: ADSM ActionGenerator
 * 
 * Não inserir documentação após ou remover a tag do XDoclet a seguir. O valor
 * do <code>id</code> informado abaixo deve ser utilizado para referenciar
 * este serviço.
 * 
 * @spring.bean id="lms.coleta.manterManifestosColetaAction"
 */

public class ManterManifestosColetaAction extends CrudAction {

	private ManifestoColetaService manifestoColetaService;
	private PedidoColetaService pedidoColetaService;
	private RotaColetaEntregaService rotaColetaEntregaService;
	private FilialService filialService;
	private ControleCargaService controleCargaService;

	public ManifestoColetaService getManifestoColetaService() {
		return manifestoColetaService;
	}

	public void setManifestoColetaService(
			ManifestoColetaService manifestoColetaService) {
		this.manifestoColetaService = manifestoColetaService;
	}

	public PedidoColetaService getPedidoColetaService() {
		return pedidoColetaService;
	}

	public void setPedidoColetaService(PedidoColetaService pedidoColetaService) {
		this.pedidoColetaService = pedidoColetaService;
	}

	public RotaColetaEntregaService getRotaColetaEntregaService() {
		return rotaColetaEntregaService;
	}

	public void setRotaColetaEntregaService(
			RotaColetaEntregaService rotaColetaEntregaService) {
		this.rotaColetaEntregaService = rotaColetaEntregaService;
	}

	public FilialService getFilialService() {
		return filialService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public ControleCargaService getControleCargaService() {
		return controleCargaService;
	}

	public void setControleCargaService(ControleCargaService controleCargaService) {
		this.controleCargaService = controleCargaService;
	}

	/**
	 * Busca a instância de um <code>Manifesto de Coleta</code> a partir do
	 * ID.
	 * 
	 * @param id representa a entidade que deve ser localizada.
	 * @return Instância que possui o id informado.
	 * @throws
	 */
	public TypedFlatMap findById(java.lang.Long id) {
		ManifestoColeta manifestoColeta = this.getManifestoColetaService().findById(id);
		
		TypedFlatMap tfm = new TypedFlatMap();

		tfm.put("idManifestoColeta", manifestoColeta.getIdManifestoColeta());
		tfm.put("dhGeracao", manifestoColeta.getDhGeracao());
		tfm.put("nrManifesto", manifestoColeta.getNrManifesto());
		
		tfm.put("filial.idFilial", manifestoColeta.getFilial().getIdFilial());
		tfm.put("filial.sgFilial", manifestoColeta.getFilial().getSgFilial());
		
		if (manifestoColeta.getRotaColetaEntrega() != null) {
			tfm.put("rotaColetaEntrega.idRotaColetaEntrega", manifestoColeta.getRotaColetaEntrega().getIdRotaColetaEntrega());
			tfm.put("rotaColetaEntrega.nrRota", manifestoColeta.getRotaColetaEntrega().getNrRota());
			tfm.put("rotaColetaEntrega.dsRota", manifestoColeta.getRotaColetaEntrega().getDsRota());			
		}
		if (manifestoColeta.getControleCarga() != null) {
			tfm.put("controleCarga.idControleCarga", manifestoColeta.getControleCarga().getIdControleCarga());
			tfm.put("controleCarga.nrControleCarga", manifestoColeta.getControleCarga().getNrControleCarga());
			
			tfm.put("controleCarga.filialByIdFilialOrigem.idFilial", manifestoColeta.getControleCarga().getFilialByIdFilialOrigem().getIdFilial());
			tfm.put("controleCarga.filialByIdFilialOrigem.sgFilial", manifestoColeta.getControleCarga().getFilialByIdFilialOrigem().getSgFilial());		
			if (manifestoColeta.getControleCarga().getMoeda() != null) {
				tfm.put("controleCarga.moeda.idMoeda", manifestoColeta.getControleCarga().getMoeda().getIdMoeda());
				tfm.put("controleCarga.moeda.dsSimbolo", manifestoColeta.getControleCarga().getMoeda().getDsSimbolo());				
				tfm.put("controleCarga.moeda.sgMoeda", manifestoColeta.getControleCarga().getMoeda().getSgMoeda());
			}		
			if (manifestoColeta.getControleCarga().getMeioTransporteByIdTransportado() != null) {
				tfm.put("controleCarga.meioTransporteByIdTransportado.nrFrota", manifestoColeta.getControleCarga().getMeioTransporteByIdTransportado().getNrFrota());
				tfm.put("controleCarga.meioTransporteByIdTransportado.idMeioTransporte", manifestoColeta.getControleCarga().getMeioTransporteByIdTransportado().getIdMeioTransporte());
				tfm.put("controleCarga.meioTransporteByIdTransportado.nrIdentificador", manifestoColeta.getControleCarga().getMeioTransporteByIdTransportado().getNrIdentificador());
				tfm.put("controleCarga.meioTransporteByIdTransportado.nrCapacidadeKg", manifestoColeta.getControleCarga().getMeioTransporteByIdTransportado().getNrCapacidadeKg());
			}
			if (manifestoColeta.getControleCarga().getMeioTransporteByIdSemiRebocado() != null) {
				tfm.put("controleCarga.meioTransporteByIdSemiRebocado.nrFrota", manifestoColeta.getControleCarga().getMeioTransporteByIdSemiRebocado().getNrFrota());
				tfm.put("controleCarga.meioTransporteByIdSemiRebocado.idMeioTransporte", manifestoColeta.getControleCarga().getMeioTransporteByIdSemiRebocado().getIdMeioTransporte());
				tfm.put("controleCarga.meioTransporteByIdSemiRebocado.nrIdentificador", manifestoColeta.getControleCarga().getMeioTransporteByIdSemiRebocado().getNrIdentificador());
			}
		}
		
		TypedFlatMap mapTotais = pedidoColetaService.findSumValoresByMoedaByManifestoColeta(manifestoColeta.getIdManifestoColeta());
		tfm.put("controleCarga.psTotalFrota", mapTotais.get("psTotalVerificado"));
		tfm.put("controleCarga.vlTotalFrota", mapTotais.get("vlTotalVerificado"));
		return tfm;
	}

	/**
	 * Busca a instância de um <code>Pedido de Coleta</code> a partir do ID.
	 * 
	 * @param id representa a entidade que deve ser localizada.
	 * @return Instância que possui o id informado.
	 * @throws 
	 */
	public Map findByIdPedidoColeta(java.lang.Long id) {
		PedidoColeta pedidoColeta = this.getPedidoColetaService().findById(id);
		
		TypedFlatMap tfmPedidoColeta = new TypedFlatMap();
		if(pedidoColeta.getManifestoColeta() != null) {					
			tfmPedidoColeta.put("idManifestoColeta", pedidoColeta.getManifestoColeta().getIdManifestoColeta());
		}

		return tfmPedidoColeta;
	}

	/**
	 * Apaga uma Manifesto de Coleta através do Id.
	 * 
	 * @param TypedFlatMap indica a entidade que deverá ser removida.
	 */
	public void removeById(TypedFlatMap criteria) {
		if (criteria.getLong("idManifestoColeta")!=null){
			this.getManifestoColetaService().removeById(criteria.getLong("idManifestoColeta"));
		}
	}
	
	/**
	 * Apaga um Controle de Carga através do Id.
	 * 
	 * @param criteria
	 */
	public void removeByIdControleCarga(TypedFlatMap criteria) {
		if (criteria.getLong("idControleCarga")!=null) {
			this.getControleCargaService().removeById(criteria.getLong("idControleCarga"));
		}
	}

	/**
	 * Apaga uma Pedido de Coleta através do Id.
	 * 
	 * @param id indica a entidade que deverá ser removida.
	 */
	public void removeByIdPedidoColeta(java.lang.Long id) {
		this.getPedidoColetaService().removeById(id);
	}

	/**
	 * Apaga vários Manifestos de Coleta através do Id.
	 * 
	 * @param ids lista com as entidades que deverão ser removida.
	 */
	public void removeByIds(TypedFlatMap criteria) {
		TypedFlatMap row = null; 
		List idsManifestoColeta = new ArrayList(); 
		List idsControleCarga = new ArrayList();
		
		for (Iterator iter = criteria.getList("ids").iterator(); iter.hasNext();) {
			row = (TypedFlatMap) iter.next();

			if (row.getLong("idManifestoColeta")!=null) {
				idsManifestoColeta.add(row.getLong("idManifestoColeta"));
			}
			
			if (row.getLong("idControleCarga")!=null) {
				idsControleCarga.add(row.getLong("idControleCarga"));
			}
		}
		manifestoColetaService.removeManifestoColetaByIds(idsManifestoColeta, idsControleCarga);
	}

	/**
	 * Apaga vários Pedidos de Coleta através do Id.
	 * 
	 * @param ids lista com as entidades que deverão ser removida.
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIdsPedidoColeta(List ids) {
		this.getManifestoColetaService().removePedidoColetaByManifestoColeta(ids);
		
	}

	/**
	 * Insere, caso o id seja <code>null</code> ou atualiza o Manifesto de
	 * Coleta, caso contrário.
	 * 
	 * @param bean entidade a ser armazenada.
	 * @return entidade que foi armazenada.
	 */
	public TypedFlatMap store(ManifestoColeta bean) {
		// Salva o objeto...
		Long idManifestoColeta = (Long) this.getManifestoColetaService().store(bean);

		// Realiza uma consulta sobre o objeto que foi gerado...
		return this.findById(idManifestoColeta);
	}

	/**
	 * Insere, caso o id seja <code>null</code> ou atualiza o Pedido de
	 * Coleta, caso contrário.
	 * 
	 * @param bean entidade a ser armazenada.
	 * @return entidade que foi armazenada.
	 */
	public void storePedidoColeta(TypedFlatMap criteria) {
		this.getManifestoColetaService().storeControleCargaSumPedidoColeta(criteria);
	}

	public Integer getRowCount(Map criteria) {
		return this.getManifestoColetaService().getRowCountByRotaColetaEntregaGE(criteria);
	}

	public ResultSetPage findPaginated(Map criteria) {
		return this.getManifestoColetaService().findPaginatedByRotaColetaEntregaGE(criteria);
	}

	public List findLookupByFilialUsuario(Map criteria) {
		FilterList filter = new FilterList(this.getRotaColetaEntregaService().findLookupByFilialUsuario(criteria)) {
			public Map filterItem(Object item) {
				RotaColetaEntrega rotaColetaEntrega = (RotaColetaEntrega) item;
				TypedFlatMap typedFlatMap = new TypedFlatMap();
				typedFlatMap.put("idRotaColetaEntrega", rotaColetaEntrega.getIdRotaColetaEntrega());
				typedFlatMap.put("nrRota", rotaColetaEntrega.getNrRota());
				typedFlatMap.put("dsRota", rotaColetaEntrega.getDsRota());
				return typedFlatMap;
			}
		};

		return (List) filter.doFilter();
	}

	public Integer getRowCountPedidosColeta(Map criteria) {
		return this.getManifestoColetaService().getRowCountPedidosColeta(criteria);
	}

	public ResultSetPage findPaginatedPedidosColeta(Map criteria) {
		FilterResultSetPage filterRs = new FilterResultSetPage(this.getManifestoColetaService().findPaginatedPedidosColeta(criteria)) {
			public Map filterItem(Object item) {
				PedidoColeta pedidoColeta = (PedidoColeta) item;
				TypedFlatMap typedFlatMap = new TypedFlatMap();
				typedFlatMap.put("idPedidoColeta", pedidoColeta.getIdPedidoColeta());
				typedFlatMap.put("filialByIdFilialResponsavel.sgFilial", pedidoColeta.getFilialByIdFilialResponsavel().getSgFilial());
				typedFlatMap.put("nrColeta", pedidoColeta.getNrColeta());
				typedFlatMap.put("cliente.pessoa.nmPessoa", pedidoColeta.getCliente().getPessoa().getNmPessoa());
				typedFlatMap.put("rotaColetaEntrega.dsRota", pedidoColeta.getRotaColetaEntrega().getDsRota());
				typedFlatMap.put("enderecoComComplemento", pedidoColeta.getEnderecoComComplemento());
				typedFlatMap.put("qtTotalVolumesVerificado", pedidoColeta.getQtTotalVolumesVerificado());
				typedFlatMap.put("psTotalVerificado", pedidoColeta.getPsTotalVerificado());
				typedFlatMap.put("vlTotalVerificado", pedidoColeta.getVlTotalVerificado());
				typedFlatMap.put("dtPrevisaoColeta", pedidoColeta.getDtPrevisaoColeta());
				typedFlatMap.put("hrLimiteColeta", pedidoColeta.getHrLimiteColeta());
				typedFlatMap.put("moeda.dsSimbolo", pedidoColeta.getMoeda().getDsSimbolo());
				typedFlatMap.put("moeda.sgMoeda", pedidoColeta.getMoeda().getSgMoeda());
				return typedFlatMap;
			}
		};
		
		return (ResultSetPage) filterRs.doFilter();
	}

	public Integer getRowCountAdicionarColeta(TypedFlatMap criteria) {
		return this.getManifestoColetaService().getRowCountAdicionarColeta(criteria);
	}

	public ResultSetPage findAdicionarColetaPaginated(TypedFlatMap criteria) {
		return this.getManifestoColetaService().findPaginatedAdicionarColeta(criteria);
	}

	/**
	 * Faz a atualizacao de na tabela de coletas para a atualizacao dos
	 * registros tpStatusColeta para 'AB' ou 'NM'.
	 */
	public void updateAdicionarColeta(Map criteria) {
		this.getManifestoColetaService().updateAdicionarColeta(criteria);
	}

	public List findLookupPedidoColeta(Map criteria) {
		List result = this.getPedidoColetaService().findLookup(criteria);
		
		return result;
	}

	public List findLookupBySgFilial(Map criteria) {
		return this.getFilialService().findLookupBySgFilial((String)criteria.get("sgFilial"), (String)criteria.get("tpAcesso"));
	}

	/**
	 * Busca algums dos dados do usuario logado, que está na sessão.
	 * 
	 * @return map
	 */
	public Map getDataUsuario() {

		Map pessoa = new HashMap();
		pessoa.put("nmFantasia", SessionUtils.getFilialSessao().getPessoa().getNmFantasia());

		Map filial = new HashMap();
        filial.put("idFilial", SessionUtils.getFilialSessao().getIdFilial());
		filial.put("sgFilial", SessionUtils.getFilialSessao().getSgFilial());
		filial.put("pessoa", pessoa);

		Map dadosUsuario = new HashMap();
		dadosUsuario.put("filial", filial);

		return dadosUsuario;
	}
	
	/**
	 * Busca os dados da pagina de detalhamento
	 * 
	 * @param criteria
	 * @return
	 */
	public TypedFlatMap findDataFromPage(TypedFlatMap criteria) {
		if (criteria.getString("beanName").equals("controleCarga")) {	
			return this.getManifestoColetaService().findControleCarga(criteria.getLong("id"));
		}
		return this.findById(criteria.getLong("id"));
	}
}
