package com.mercurio.lms.coleta.action;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.FindDefinition;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.FilterList;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.coleta.model.service.ManifestoColetaService;
import com.mercurio.lms.municipios.model.RotaColetaEntrega;
import com.mercurio.lms.municipios.model.service.RotaColetaEntregaService;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 * 
 * Não inserir documentação após ou remover a tag do XDoclet a seguir. O valor
 * do <code>id</code> informado abaixo deve ser utilizado para referenciar
 * este serviço.
 * 
 * @spring.bean id="lms.coleta.manterManifestosColetaPopUpAction"
 */

public class ManterManifestosColetaPopUpAction {

	private ManifestoColetaService manifestoColetaService;
	private RotaColetaEntregaService rotaColetaEntregaService;

	public ManifestoColetaService getManifestoColetaService() {
		return manifestoColetaService;
	}

	public void setManifestoColetaService(
			ManifestoColetaService manifestoColetaService) {
		this.manifestoColetaService = manifestoColetaService;
	}

	public RotaColetaEntregaService getRotaColetaEntregaService() {
		return rotaColetaEntregaService;
	}

	public void setRotaColetaEntregaService(
			RotaColetaEntregaService rotaColetaEntregaService) {
		this.rotaColetaEntregaService = rotaColetaEntregaService;
	}

	public Integer getRowCount(TypedFlatMap criteria) {
		Long idRotaColetaEntrega = criteria.getLong("rotaColetaEntrega.idRotaColetaEntrega");
		return this.getManifestoColetaService().getRowCountPopUpByRotaColetaEntregaGE(idRotaColetaEntrega);
	}

	public ResultSetPage findPaginated(TypedFlatMap criteria) {
		Long idRotaColetaEntrega = criteria.getLong("rotaColetaEntrega.idRotaColetaEntrega");
		FindDefinition findDefinition = FindDefinition.createFindDefinition(criteria);
		return this.getManifestoColetaService().findPaginatedPopUpByRotaColetaEntregaGE(idRotaColetaEntrega, findDefinition);
	}
	
	public List findLookupByFilialUsuario(Map criteria) {
		FilterList filter = new FilterList(this.getRotaColetaEntregaService().findLookupByFilialUsuario(criteria)) {
			public Map filterItem(Object item) {
				RotaColetaEntrega rotaColetaEntrega = (RotaColetaEntrega) item;
				TypedFlatMap typedFlatMap = new TypedFlatMap();
				typedFlatMap.put("idRotaColetaEntrega", rotaColetaEntrega.getIdRotaColetaEntrega());
				typedFlatMap.put("nrRota", rotaColetaEntrega.getNrRota());
				typedFlatMap.put("dsRota", rotaColetaEntrega.getDsRota());
				return typedFlatMap;
			}
		};

		return (List) filter.doFilter();
	}

	/**
	 * Busca algums dos dados do usuario logado, que está na sessão.
	 * 
	 * @return map
	 */
	public Map getDataUsuario() {

		Map pessoa = new HashMap();
		pessoa.put("nmFantasia", SessionUtils.getFilialSessao().getPessoa().getNmFantasia());

		Map filial = new HashMap();
        filial.put("idFilial", SessionUtils.getFilialSessao().getIdFilial());
		filial.put("sgFilial", SessionUtils.getFilialSessao().getSgFilial());
		filial.put("pessoa", pessoa);

		Map dadosUsuario = new HashMap();
		dadosUsuario.put("filial", filial);

		return dadosUsuario;
	}
}
