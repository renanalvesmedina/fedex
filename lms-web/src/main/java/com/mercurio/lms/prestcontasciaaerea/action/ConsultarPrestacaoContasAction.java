package com.mercurio.lms.prestcontasciaaerea.action;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.joda.time.YearMonthDay;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.Moeda;
import com.mercurio.lms.configuracoes.model.service.MoedaService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.EmpresaService;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.prestcontasciaaerea.model.PrestacaoConta;
import com.mercurio.lms.prestcontasciaaerea.model.service.AwbCanceladoService;
import com.mercurio.lms.prestcontasciaaerea.model.service.FaturamentoCiaAereaService;
import com.mercurio.lms.prestcontasciaaerea.model.service.IcmsPrestacaoService;
import com.mercurio.lms.prestcontasciaaerea.model.service.IntervaloAwbService;
import com.mercurio.lms.prestcontasciaaerea.model.service.PrestacaoContaService;
import com.mercurio.lms.prestcontasciaaerea.model.service.ValorPrestacaoContaService;
import com.mercurio.lms.prestcontasciaaerea.util.PrestContasCiaAereaUtil;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.service.CiaAereaClienteService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.prestcontasciaaerea.consultarPrestacaoContasAction"
 * @author Robson Edemar Gehl
 */

public class ConsultarPrestacaoContasAction extends CrudAction {
	
	private IntervaloAwbService intervaloAwbService;
	private PrestacaoContaService prestacaoContaService;
	private IcmsPrestacaoService icmsPrestacaoService;
	private ValorPrestacaoContaService valorPrestacaoContaService;
	private AwbCanceladoService awbCanceladoService;
	private FilialService filialService;
	private EmpresaService empresaService;
	private CiaAereaClienteService ciaAereaClienteService;
	private MoedaService moedaService;
	private ConfiguracoesFacade configuracoesFacade;
	private FaturamentoCiaAereaService faturamentoCiaAereaService; 
	
	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}


	/**
	 * Busca a moeda padrão do Brasil
	 * e os ids das cias aereas
	 * @param tfm Critérios de pesquisa
	 * @return TypedFlatMap
	 */
	public TypedFlatMap findDadosPadrao(TypedFlatMap tfm){
		
		Moeda m = moedaService.findMoedaPadraoBySiglaPais("BRA");
		
		TypedFlatMap ret = new TypedFlatMap(); 
		
		ret.put("moeda", m.getSiglaSimbolo());
		ret.put("idGol", configuracoesFacade.getValorParametro("ID_GOL"));
		
		return ret;
		
	}
	
	public Filial findFilialByUserLogado(){		
		return SessionUtils.getFilialSessao();
	}
	
	public TypedFlatMap findDtFinalByFilialAndCiaAerea(TypedFlatMap map){
		TypedFlatMap mMap = new TypedFlatMap();		
		mMap.put("dtFinal", (getPrestacaoContaService().findDtFinalPeriodo(map.getLong("id_cia_filial_mercurio"),map.getLong("id_filial"), map.getYearMonthDay("dtInicial"), "M")).toString("dd/MM/yyyy"));
		return mMap;		
	}	
	
	/**
	 * Busca Prestacao de Contas
	 * @param criterions
	 * @return
	 */
	public TypedFlatMap findPrestacaoConta(TypedFlatMap criterions){

		YearMonthDay dtInicial = null;
		if (criterions.containsKey("dtInicial") && !criterions.getString("dtInicial").equals("") ){
			dtInicial = criterions.getYearMonthDay("dtInicial");
		}
		
		List list = getPrestacaoContaService().findPrestacaoContaByUnique(
				(criterions.containsKey("empresa.idEmpresa")) ? criterions.getLong("empresa.idEmpresa") : null, 
				(criterions.containsKey("filial.idFilial")) ? criterions.getLong("filial.idFilial") : null, 
				(criterions.containsKey("nrPrestacaoConta")) ? criterions.getLong("nrPrestacaoConta") : null,
				dtInicial, 
				(criterions.containsKey("dtFinal")) ? criterions.getYearMonthDay("dtFinal") : null );
		
		if (!list.isEmpty()){
			PrestacaoConta prestacaoConta = (PrestacaoConta) list.get(0);
		
			TypedFlatMap ret = new TypedFlatMap();
			
			ret.put("idPrestacaoConta", prestacaoConta.getIdPrestacaoConta());
		
			return ret;
		}
		
		return null;
	}
	
	
	/**
	 * Busca o somatório do Valor do Tipo de Prestacao de Conta pelo Tipo Valor informado.<BR>
	 * Utilizado na Tab Demonstrativo prestação de contas, para popular o text Total do Frete.<BR>
	 *@author Robson Edemar Gehl
	 * @param map
	 * @return
	 */
	public BigDecimal findVlTipoPrestacaoContaByTpValor(TypedFlatMap map){
		return getValorPrestacaoContaService().findVlTipoPrestacaoConta(map.getString("tpValor"), map.getLong("idPrestacaoConta"));
	}
	
	/**
	 * Utilizado na Tab Demonstrativo prestação de contas, para popular o text IRRF/ISS sobre comissão.<BR>
	 *@author Robson Edemar Gehl
	 * @param map
	 */
	public BigDecimal findIRRFSobreComissao(TypedFlatMap map){
		return getPrestacaoContaService().findIRRFSobreComissao(map.getLong("prestacaoConta.idPrestacaoConta"));
	}
	
	/**
	 * Utilizado na Tab Demonstrativo prestação de contas, para popular o text Comissões sobre frete.<BR>
	 *@author Robson Edemar Gehl
	 * @param map
	 * @return
	 */
	public BigDecimal findComissaoSobreFrete(TypedFlatMap map){
		return getPrestacaoContaService().findComissaoSobreFrete(
				map.getLong("prestacaoConta.idPrestacaoConta"), 
				map.getLong("filial.idFilial"), 
				map.getLong("empresa.idEmpresa"));
	}
	
	/**
	 * Utilizado na Tab Demonstrativo prestação de contas, para popular o text Valor a pagar pelo agente.<BR>
	 *@author Robson Edemar Gehl
	 * @param map
	 * @return
	 */
	public BigDecimal findValorPagarAgente(TypedFlatMap map){
		return getPrestacaoContaService().findValorPagarAgente(
				map.getBigDecimal("vlFrete"), 
				map.getBigDecimal("vlIrrfIssComissao"), 
				map.getBigDecimal("vlComissaoFrete")
			);
	}

	/**
	 * Utilizada na Tab de Demonstrativo de Vendas.<BR>
	 *@author Robson Edemar Gehl
	 * @param map
	 * @return
	 */
	public List findVlTipoPrestacaoConta(TypedFlatMap map){
		return getValorPrestacaoContaService().findVlTipoPrestacaoConta(map.getLong("idPrestacaoConta"));
	}
	
	/**
	 * Utilizada na Tab de Demonstrativo de Vendas, para totalizar as linhas.<BR>
	 *@author Robson Edemar Gehl
	 * @param map
	 * @return
	 */
	public List findTotaisByTpValor(TypedFlatMap map){
		return getValorPrestacaoContaService().findTotaisByTpValor(map.getLong("prestacaoConta.idPrestacaoConta"));
	}
	
	/**
	 * Utilizada na Tab de Demonstrativo de Vendas, para totalizar as colunas.<BR>
	 *@author Robson Edemar Gehl
	 * @param map
	 * @return
	 */
	public List findTotaisByTpFormaPagamento(TypedFlatMap map){
		return getValorPrestacaoContaService().findTotaisByTpFormaPagamento(map.getLong("prestacaoConta.idPrestacaoConta"));
	}
	
	/**
	 * Define a Data Final do Periodo de vendas, conforme data inicial.<BR>
	 * @param map
	 * @return
	 */
	public String findDataFinal(TypedFlatMap map){		
		return PrestContasCiaAereaUtil.findDataFinal(map.getYearMonthDay("dtInicial"),map.getString("diaPeriodoVendas"));
	}

	/**
	 * Combo dos dias para o Periodo de Vendas.<BR>
	 * Esta combo é montada com os dias especificados na análise (valores default)-- muita atenção ao utilizá-la sem passar criterions.<BR>
	 * Caso não queira os valores <i>default</i>, utilize o critério <strong>dias</strong> no parametro do método. 
	 * Passando os dias separados por virgula<BR>.
	 * @author Robson Edemar Gehl
	 * @param map (opcional) Chave: 'dias'; valor: dias para montar a combo, separados por vírgula.
	 * @return Colecao de Map {dsPeriodo}
	 */
	public List findComboPeriodoVendas(TypedFlatMap map){
		
		//Dias para montar o Combo
		String[] dias = {"01", "11", "21"};
		
		if (map != null && map.containsKey("dias")){
			dias = map.getString("dias").split("[,]");
		}

		List periodos = new ArrayList(dias.length);
		
		for (int i = 0; i < dias.length; i++){
			Map p = new HashMap();
			p.put("dsPeriodo", dias[i]);
			periodos.add(p);
		}

		return periodos;
	}
	
	/**
	 * Lookup de Filial
	 * @param map
	 * @return
	 */
    public List findLookupBySgFilial(Map map){
    	return getFilialService().findLookupBySgFilial(map);
    }
    
    /**
     * Combo de Companhia Aerea 
     * @param map
     * @return
     */
    public List findComboCompanhiaAerea(Map map){
    	if (map == null) map = new HashMap();
    	map.put("tpEmpresa", "C");
    	return getEmpresaService().findComboEmpresa(map);
    }

	
	/** findPaginated **/
	
	public List findPaginatedIcmsPrestacao(Map criteria) {
		return getIcmsPrestacaoService().find(criteria);
	}
	
	public Integer getRowCountIcmsPrestacao(Map criteria) {
		return getIcmsPrestacaoService().getRowCount(criteria);
	}
	
	public List findPaginatedIntervalosAwb(Map criteria) {
		return getIntervaloAwbService().find(criteria);
	}
	
	public Integer getRowCountIntervalosAwb(Map criteria) {
		return getIntervaloAwbService().getRowCount(criteria);
	}

	public List findPaginatedAwbsCanceladas(Map criteria) {
		return getAwbCanceladoService().find(criteria);
	}
	public Integer getRowCountAwbsCanceladas(Map criteria) {
		return getAwbCanceladoService().getRowCount(criteria);
	}
	
	/** getters e setter **/
	
	
	public IntervaloAwbService getIntervaloAwbService() {
		return intervaloAwbService;
	}

	public void setIntervaloAwbService(IntervaloAwbService intervaloAwbService) {
		this.intervaloAwbService = intervaloAwbService;
	}

	public PrestacaoContaService getPrestacaoContaService() {
		return prestacaoContaService;
	}

	public void setPrestacaoContaService(PrestacaoContaService prestacaoContaService) {
		this.prestacaoContaService = prestacaoContaService;
	}

	public IcmsPrestacaoService getIcmsPrestacaoService() {
		return icmsPrestacaoService;
	}

	public void setIcmsPrestacaoService(IcmsPrestacaoService icmsPrestacaoService) {
		this.icmsPrestacaoService = icmsPrestacaoService;
	}

	public ValorPrestacaoContaService getValorPrestacaoContaService() {
		return valorPrestacaoContaService;
	}

	public void setValorPrestacaoContaService(
			ValorPrestacaoContaService valorPrestacaoContaService) {
		this.valorPrestacaoContaService = valorPrestacaoContaService;
	}

	public AwbCanceladoService getAwbCanceladoService() {
		return awbCanceladoService;
	}

	public void setAwbCanceladoService(AwbCanceladoService awbCanceladoService) {
		this.awbCanceladoService = awbCanceladoService;
	}


	public FilialService getFilialService() {
		return filialService;
	}


	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}


	public CiaAereaClienteService getCiaAereaClienteService() {
		return ciaAereaClienteService;
	}


	public void setCiaAereaClienteService(
			CiaAereaClienteService ciaAereaClienteService) {
		this.ciaAereaClienteService = ciaAereaClienteService;
	}


	public EmpresaService getEmpresaService() {
		return empresaService;
	}


	public void setEmpresaService(EmpresaService empresaService) {
		this.empresaService = empresaService;
	}
	

	public MoedaService getMoedaService() {
		return moedaService;
	}


	public void setMoedaService(MoedaService moedaService) {
		this.moedaService = moedaService;
	}
	
	
	public void setFaturamentoCiaAereaService(FaturamentoCiaAereaService faturamentoCiaAereaService) {
		this.faturamentoCiaAereaService = faturamentoCiaAereaService;
	}


	public FaturamentoCiaAereaService getFaturamentoCiaAereaService() {
		return faturamentoCiaAereaService;
}
	
	

}
