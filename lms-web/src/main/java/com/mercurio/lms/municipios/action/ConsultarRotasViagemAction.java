package com.mercurio.lms.municipios.action;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.FilterResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.contratacaoveiculos.model.Proprietario;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTranspProprietarioService;
import com.mercurio.lms.contratacaoveiculos.model.service.TipoMeioTransporteService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.RotaIdaVolta;
import com.mercurio.lms.municipios.model.RotaViagem;
import com.mercurio.lms.municipios.model.TrechoRotaIdaVolta;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.MeioTransporteRotaViagemService;
import com.mercurio.lms.municipios.model.service.MotivoParadaPontoTrechoService;
import com.mercurio.lms.municipios.model.service.MotoristaRotaViagemService;
import com.mercurio.lms.municipios.model.service.PontoParadaTrechoService;
import com.mercurio.lms.municipios.model.service.RotaIdaVoltaService;
import com.mercurio.lms.municipios.model.service.RotaService;
import com.mercurio.lms.municipios.model.service.RotaViagemService;
import com.mercurio.lms.municipios.model.service.TrechoRotaIdaVoltaService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.JTFormatUtils;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.municipios.consultarRotasViagemAction"
 */
public class ConsultarRotasViagemAction extends CrudAction {
    
    private RotaService rotaService;
    private RotaIdaVoltaService rotaIdaVoltaService;
    private MeioTransporteRotaViagemService meioTransporteRotaViagemService;
    private MotoristaRotaViagemService motoristaRotaViagemService;
    private TrechoRotaIdaVoltaService trechoRotaIdaVoltaService;
    private PontoParadaTrechoService pontoParadaTrechoService;
    private MotivoParadaPontoTrechoService motivoParadaPontoTrechoService;
    private FilialService filialService;
    private RotaViagemService rotaViagemService;
    private MeioTranspProprietarioService meioTranspProprietarioService;
    private TipoMeioTransporteService tipoMeioTransporteService;
	
    /*
     * Find da aba rotaIda
     * Retorna tpRota para manipular comporamento a partir do tipo de rota EXPRESSA ou EVENTUAL.
     */
    public Map findByIdRotaIda(Long id) {
    	Map map = rotaIdaVoltaService.findByIdToConsultarRotas(id,true);
    	DomainValue tpRota = (DomainValue)map.get("tpRotaDominio"); 
    	DomainValue tpSistema = (DomainValue)map.get("tpSistemaRotaDominio");
    	map.put("tpRota",tpRota.getValue());
    	map.put("dsTpRota",tpRota.getDescription());
    	map.put("tpSistemaRota",tpSistema.getDescription());
    	map.put("hiddenTpSistemaRota",tpSistema.getValue());
    	
    	BigDecimal vlPedagio = null;
		if (map.get("idTipoMeioTransporte") != null) {
			Long idMoedaPais = (Long)map.get("idMoedaPais");
			Long idRotaIdaVolta = (Long)map.get("idRotaIdaVolta");
			if (idMoedaPais != null && idRotaIdaVolta != null) {
		    	vlPedagio = findVlPedagio(idMoedaPais, (Long)map.get("idTipoMeioTransporte"),idRotaIdaVolta);
				map.put("vlPedagio",vlPedagio);
			}
		}	
		String dsMoeda = (String)map.get("sgMoeda") + " " + (String)map.get("dsSimbolo");
		
		map.put("nrTempoViagem",findTempoViagem((Long)map.get("idRotaIdaVolta")));
		map.put("dsMoeda",dsMoeda);
		
    	return map;
    }
    
    /*
     * Find da aba rotaVolta.
     */
    public Map findByIdRotaVolta(Map criteria) {
    	Long id = Long.valueOf((String)criteria.get("idRotaViagem"));
    	Map map = rotaIdaVoltaService.findByIdToConsultarRotas(id,false);
    	DomainValue tpRota = (DomainValue)map.get("tpRotaDominio"); 
    	DomainValue tpSistema = (DomainValue)map.get("tpSistemaRotaDominio");
    	map.put("tpRota",tpRota.getValue());
    	map.put("dsTpRota",tpRota.getDescription());
    	map.put("tpSistemaRota",tpSistema.getDescription());
    	
    	BigDecimal vlPedagio = null;
		if (map.get("idTipoMeioTransporte") != null) {
			Long idMoedaPais = (Long)map.get("idMoedaPais");
			Long idRotaIdaVolta = (Long)map.get("idRotaIdaVolta");
			if (idMoedaPais != null && idRotaIdaVolta != null) {
		    	vlPedagio = findVlPedagio(idMoedaPais, (Long)map.get("idTipoMeioTransporte"),idRotaIdaVolta);
				map.put("vlPedagio",FormatUtils.formatDecimal("#,##0.00",vlPedagio));
			}
		}	
		
		String dsMoeda = (String)map.get("sgMoeda") + " " + (String)map.get("dsSimbolo");
		
		map.put("nrTempoViagem",findTempoViagem((Long)map.get("idRotaIdaVolta")));
		map.put("dsMoeda",dsMoeda);
				
    	return map;
    }
    
    /**
     * Método private para simplificar as chamadas do valor do pedágio tanto para rota de ida quanto de volta
     * @param idMoedaPais
     * @param idTipoMeioTransporte
     * @param idRota
     * @return
     */
    private BigDecimal findVlPedagio(Long idMoedaPais, Long idTipoMeioTransporte, Long idRotaIdaVolta){
    	BigDecimal vlPedagio = null;
    	vlPedagio = rotaViagemService.findVlPedagio(idMoedaPais, idTipoMeioTransporte, null, idRotaIdaVolta);
    	return vlPedagio;
    }
    
    /**
     * Método private para simplificar as chamadas do tempo de viagem para rota de ida quanto de volta
     * @param idRota
     * @return
     */
    private String findTempoViagem(Long idRota){
    	String nrTempoViagem = "";
		Integer nrTempo = rotaViagemService.findMaiorTempoViagemOfRota(idRota);
		nrTempoViagem = FormatUtils.converteMinutosParaHorasMinutos(Long.valueOf(nrTempo.longValue()),FormatUtils.ESCALA_HHH);
		return nrTempoViagem;
    }
    
    public TypedFlatMap findFilialUsuarioLogado(){
    	TypedFlatMap retorno = new TypedFlatMap();		
		Filial filial = SessionUtils.getFilialSessao();
		retorno.put("idFilial", filial.getIdFilial());
		retorno.put("sgFilial", filial.getSgFilial());
		retorno.put("nmFantasia", filial.getPessoa().getNmFantasia());
		return retorno;
	}
    
	public ResultSetPage findPaginated(TypedFlatMap filtros) {
		return rotaViagemService.findPaginatedToConsultarRotas(filtros);
	}

	/*
	 * GetRowCount da consulta principal.
	 * @see com.mercurio.adsm.framework.model.CrudAction#getRowCount(java.util.Map)
	 */
	public Integer getRowCount(TypedFlatMap criteria) {
		return rotaViagemService.getRowCountToConsultarRotas(criteria);
	}
	 
	/*
	 * Find da aba Meio de Tranporte Expressa.
	 */
	public List findMeioTranspExpressa(Map criteria) {
		Object idObj = criteria.get("idRotaViagem");
		Long id = Long.valueOf((idObj != null && !"".equals((String)idObj)) ? (String)idObj : "0");
		List list = meioTransporteRotaViagemService.findToConsultarRotas(id);
		List retorno = new ArrayList(list.size());
		
		Iterator i = list.iterator();
		while (i.hasNext()){
			Map m = (Map)i.next();
			Long idMeioTransporte = (Long)m.get("meioTransporte_idMeioTransporte");
			
			Proprietario proprietario = new Proprietario();
			
			proprietario = meioTranspProprietarioService.findProprietarioByIdMeioTransporte(idMeioTransporte,JTDateTimeUtils.getDataAtual());
			
			TypedFlatMap r = new TypedFlatMap();
			
			r.put("meioTransporte_nrFrota",m.get("meioTransporte_nrFrota"));
			r.put("meioTransporte_nrIdentificador",m.get("meioTransporte_nrIdentificador"));
			r.put("dsTipoMeioTransporte",m.get("dsTipoMeioTransporte"));
			r.put("dsMarcaMeioTransporte",m.get("dsMarcaMeioTransporte"));
			r.put("dsModeloMeioTransporte",m.get("dsModeloMeioTransporte"));
			r.put("meioTransporte_nrAnoFabricao",m.get("meioTransporte_nrAnoFabricao"));
			 
			r.put("dtVigenciaInicial",m.get("dtVigenciaInicial"));
			r.put("dtVigenciaFinal",m.get("dtVigenciaFinal"));
			
			if (proprietario != null){
				r.put("nmProprietario",proprietario.getPessoa().getNmPessoa());
				r.put("tpIdentificacao",proprietario.getPessoa().getTpIdentificacao());
				r.put("nrIdentificacaoFormatado",FormatUtils.formatIdentificacao(proprietario.getPessoa().getTpIdentificacao(),
															proprietario.getPessoa().getNrIdentificacao()));
			}
			retorno.add(r);
		}
		
		return retorno;
	}
	
	/*
	 * Find da aba Motoristas.
	 * Se pessoa possui nrIdentificacao e tpIdentificacao, formata a identificacao.
	 */
	public List findMotoristas(Map criteria) {
		Object idObj = criteria.get("idRotaViagem");
		Long id = Long.valueOf((idObj != null && !"".equals((String)idObj)) ? (String)idObj : "0");
		if (id.intValue() == 0) 
			return null;
		
		List l = motoristaRotaViagemService.findToConsultarRotas(id);
		
		Iterator i = l.iterator();
		while (i.hasNext()) {
			Map map = (Map)i.next();
			Object tpIdentificacao = map.get("motorista_pessoa_tpIdentificacao");
			Object nrIdentificacao = map.get("motorista_pessoa_nrIdentificacao");
			if (tpIdentificacao != null && nrIdentificacao != null)
				map.put("motorista_pessoa_nrIdentificacaoFormatado",
						FormatUtils.formatIdentificacao(
								((DomainValue)tpIdentificacao).getValue(),
								(String)nrIdentificacao
								));
			else if (nrIdentificacao != null)
				map.put("motorista_pessoa_nrIdentificacaoFormatado",(String)nrIdentificacao);
		}
		
		return l;
	}
	
	/*
	 * Encontra trechos da rota. Primeira grid das abas Rota ida e Rota volta.
	 * Transforma nrOperacao e nrTempoViagem em horas (String) pois estão salvos no banco como minutos (String).
	 */
	public List findTrechosRota(Map criteria) {
		Object idObj = criteria.get("idRotaIdaVolta");
		Long id = Long.valueOf((idObj != null && !"".equals((String)idObj)) ? (String)idObj : "0");
		if (id.intValue() == 0) 
			return null;
		 
		List l = trechoRotaIdaVoltaService.findToConsultarRotas(id);
		Iterator i = l.iterator();
		while (i.hasNext()) {
			Map map = (Map)i.next();
			Integer nrTempoOperacao = (Integer)map.get("nrTempoOperacao");
			if (nrTempoOperacao != null)
				map.put("nrTempoOperacao",JTFormatUtils.formatTime((nrTempoOperacao.longValue() * 60), 2, 1));
			
			Integer nrTempoViagem = (Integer)map.get("nrTempoViagem");
			if (nrTempoViagem != null)
				map.put("nrTempoViagem",JTFormatUtils.formatTime((nrTempoViagem.longValue() * 60), 2, 1));
		}
		return l;
	}
	
	/*
	 * Encontra Pontos de parada do trecho. Segunda grid das abas Rota ida e Rota volta.
	 * Transforma nrTempoParada em horas (String) pois está salvo no banco como minutos (String).
	 */
	public List findPontosParadaTrecho(Map criteria) {
		Object idObj = criteria.get("idTrechoRotaIdaVolta");
		Long id = Long.valueOf((idObj != null && !"".equals((String)idObj)) ? (String)idObj : "0");
		if (id.intValue() == 0) 
			return null;
		
		List l = pontoParadaTrechoService.findToConsultarRotas(id);
		Iterator i = l.iterator();
		while (i.hasNext()) {
			Map map = (Map)i.next();
			if (map.get("nrTempoParada")!=null){
				Integer nrTempoParada = (Integer)map.get("nrTempoParada");
				if (nrTempoParada != null)
					map.put("nrTempoParada",JTFormatUtils.formatTime((nrTempoParada.longValue() * 60), 2, 1));
			}
		}
		return l;
	}
	
	/**
	 * Retorna dados para uma lookup de filial a partir de uma sigla.
	 * 
	 * @author Felipe Ferreira
	 * @param criteria
	 * @return
	 */
	public List findLookupFilial(TypedFlatMap criteria) {
		return filialService.findLookupAsPaginated(criteria);
	}
	
	public ResultSetPage findPaginatedRotaIdaVolta(TypedFlatMap criteria) {
		ResultSetPage rsp = rotaIdaVoltaService.findPaginatedCustom(criteria);
		
		FilterResultSetPage frsp = new FilterResultSetPage(rsp) {

			public Map filterItem(Object item) {
				RotaIdaVolta riv = (RotaIdaVolta)item;
				TypedFlatMap row = new TypedFlatMap();
				 
				row.put("idRotaIdaVolta",riv.getIdRotaIdaVolta());
				row.put("nrRota",riv.getNrRota());
				row.put("versao",riv.getVersao());
				row.put("rota.idRota",riv.getRota().getIdRota());
				row.put("rota.dsRota",riv.getRota().getDsRota());
				row.put("rotaViagem.idRotaViagem",riv.getRotaViagem().getIdRotaViagem());
				row.put("rotaViagem.versao",riv.getRotaViagem().getVersao());
				
				
				TrechoRotaIdaVolta triv = trechoRotaIdaVoltaService.findTrechoByIdRotaAndFilialOrigem(riv.getIdRotaIdaVolta());
				if (triv != null)
					row.put("hrSaida",triv.getHrSaida());
				
				RotaViagem rotaViagem = riv.getRotaViagem();
				row.put("dtVigenciaInicial",rotaViagem.getDtVigenciaInicial());
				row.put("dtVigenciaFinal",rotaViagem.getDtVigenciaFinal());
				
				row.put("tpRotaIdaVolta", riv.getTpRotaIdaVolta());
				row.put("vlFreteKm", riv.getVlFreteKm());
				row.put("nrDistancia", riv.getNrDistancia());
				row.put("moedaPais.moeda.idMoeda", riv.getMoedaPais().getMoeda().getIdMoeda());
				row.put("moedaPais.moeda.sgMoeda", riv.getMoedaPais().getMoeda().getSgMoeda());
				row.put("moedaPais.moeda.dsSimbolo", riv.getMoedaPais().getMoeda().getDsSimbolo());
				if (rotaViagem.getTipoMeioTransporte() != null) {
					row.put("rotaViagem.tipoMeioTransporte.idTipoMeioTransporte", rotaViagem.getTipoMeioTransporte().getIdTipoMeioTransporte());
				}
				return row;
			}
			
		};
		
		return (ResultSetPage)frsp.doFilter();
	}
	
	public Integer getRowCountRotaIdaVolta(TypedFlatMap criteria) {
		return rotaIdaVoltaService.getRowCountCustom(criteria);
	}
	
	/*
	 * Encontra Motivos do ponto de parada do trecho. Terceira grid das abas Rota ida e Rota volta.
	 */
	public List findMotivosPontosParadaTrecho(Map criteria) {
		Object idObj = criteria.get("idPontoParadaTrecho");
		Long id = Long.valueOf((idObj != null && !"".equals((String)idObj)) ? (String)idObj : "0");
		return (id.intValue() == 0) ? null : motivoParadaPontoTrechoService.findToConsultarRotas(id);
	}
		
    /**
	 * Retorna dados para uma lookup de filial a partir de uma sigla.
	 * 
	 * @author Felipe Ferreira
	 * @param criteria
	 * @return
	 */
	public List findRotaLookup(Map criteria) {
		return rotaService.findLookup(criteria);
	}

	public void setRotaService(RotaService rotaService) {
		this.rotaService = rotaService;
	}
	public void setRotaIdaVoltaService(RotaIdaVoltaService rotaIdaVoltaService) {
		this.rotaIdaVoltaService = rotaIdaVoltaService;
	}
	public void setMeioTransporteRotaViagemService(
			MeioTransporteRotaViagemService meioTransporteRotaViagemService) {
		this.meioTransporteRotaViagemService = meioTransporteRotaViagemService;
	}
	public void setMotoristaRotaViagemService(
			MotoristaRotaViagemService motoristaRotaViagemService) {
		this.motoristaRotaViagemService = motoristaRotaViagemService;
	}
	public void setMotivoParadaPontoTrechoService(
			MotivoParadaPontoTrechoService motivoParadaPontoTrechoService) {
		this.motivoParadaPontoTrechoService = motivoParadaPontoTrechoService;
	}
	public void setPontoParadaTrechoService(
			PontoParadaTrechoService pontoParadaTrechoService) {
		this.pontoParadaTrechoService = pontoParadaTrechoService;
	}
	public void setTrechoRotaIdaVoltaService(
			TrechoRotaIdaVoltaService trechoRotaIdaVoltaService) {
		this.trechoRotaIdaVoltaService = trechoRotaIdaVoltaService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	
    public void setRotaViagemService(RotaViagemService rotaViagemService) {
		this.rotaViagemService = rotaViagemService;
	}

	public void setMeioTranspProprietarioService(
			MeioTranspProprietarioService meioTranspProprietarioService) {
		this.meioTranspProprietarioService = meioTranspProprietarioService;
	}
	
	public List findTipoMeioTransporte(Map criteria) {
		 return getTipoMeioTransporteService().findCombo(criteria);
	 }
	
	public TipoMeioTransporteService getTipoMeioTransporteService() {
		return tipoMeioTransporteService;
	}
	public void setTipoMeioTransporteService(
			TipoMeioTransporteService tipoMeioTransporteService) {
		this.tipoMeioTransporteService = tipoMeioTransporteService;
	}
}
