package com.mercurio.lms.municipios.action;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.core.util.ReflectionUtils;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Servico;
import com.mercurio.lms.configuracoes.model.service.ServicoService;
import com.mercurio.lms.municipios.model.ServicoRotaViagem;
import com.mercurio.lms.municipios.model.service.ServicoRotaViagemService;
import com.mercurio.lms.util.JTVigenciaUtils;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;


/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.municipios.manterServicosRotaViagemAction"
 */

public class ManterServicosRotaViagemAction extends CrudAction {
	public void setServicoRotaViagemService(ServicoRotaViagemService servicoRotaViagemService) {
		this.defaultService = servicoRotaViagemService;
	}
	
	public ServicoRotaViagemService getServicoRotaViagemService() {
		return (ServicoRotaViagemService)defaultService;
	}	
	
	private ServicoService servicoService;
	
	
	public void removeById(java.lang.Long id) {
    	getServicoRotaViagemService().removeById(id);
    }

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	getServicoRotaViagemService().removeByIds(ids);
    }

    public Map findById(java.lang.Long id) {
    	ServicoRotaViagem servicoRotaViagem = (ServicoRotaViagem)getServicoRotaViagemService().findById(id);
    	Servico servico = servicoRotaViagem.getServico();
    	
    	TypedFlatMap retorno = new TypedFlatMap();
        retorno.put("idServicoRotaViagem",servicoRotaViagem.getIdServicoRotaViagem());
        retorno.put("servico.idServico",servico.getIdServico());
        retorno.put("dtVigenciaInicial",servicoRotaViagem.getDtVigenciaInicial());
        retorno.put("dtVigenciaFinal",servicoRotaViagem.getDtVigenciaFinal());
        
        retorno.put("acaoVigenciaAtual",JTVigenciaUtils.getIntegerAcaoVigencia(servicoRotaViagem));

        return retorno;
    }

    /**
	 * Insere, caso o id seja <code>null</code> ou atualiza uma entidade, caso contrário.
	 *
	 * @param bean entidade a ser armazenada.
	 * @return entidade que foi armazenada.
	 */
    public Serializable store(Map bean) {
    	ServicoRotaViagem servicoRotaViagem = new ServicoRotaViagem();

        ReflectionUtils.copyNestedBean(servicoRotaViagem,bean);

        getServicoRotaViagemService().store(servicoRotaViagem);
        
        TypedFlatMap retorno = new TypedFlatMap();
        retorno.put("idServicoRotaViagem",servicoRotaViagem.getIdServicoRotaViagem());
        retorno.put("acaoVigenciaAtual",JTVigenciaUtils.getIntegerAcaoVigencia(servicoRotaViagem));
        
        return retorno;
    }
    
    public List findServicoCombo(Map criteria) {
    	return getServicoService().find(criteria);
    }

	public ServicoService getServicoService() {
		return servicoService;
	}

	public void setServicoService(ServicoService servicoService) {
		this.servicoService = servicoService;
	}

}
