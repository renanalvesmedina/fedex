package com.mercurio.lms.municipios.action;

import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.FilterResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.service.EnderecoPessoaService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.RotaIntervaloCep;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.MunicipioFilialService;
import com.mercurio.lms.municipios.model.service.OperacaoServicoLocalizaService;
import com.mercurio.lms.municipios.model.service.RotaColetaEntregaService;
import com.mercurio.lms.municipios.model.service.RotaIntervaloCepService;
import com.mercurio.lms.municipios.model.service.TipoDificuldadeAcessoService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.service.ClienteService;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;

/**
 * Generated by: ADSM ActionGenerator
 * 
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.municipios.manterRotaIntervaloCEPAction"
 */
public class ManterRotaIntervaloCEPAction extends CrudAction {
	private TipoDificuldadeAcessoService tipoDificuldadeAcessoService;
	private MunicipioFilialService municipioFilialService;
	private OperacaoServicoLocalizaService operacaoServicoLocalizaService;
	private FilialService filialService;	
	private RotaColetaEntregaService rotaColetaEntregaService;
	private ClienteService clienteService;
	private EnderecoPessoaService enderecoPessoaService;

	public Map store(TypedFlatMap bean) {
		return getRotaIntervaloCepService().storeMap(bean); 
	}

	public Map findById(Long id) {
		return getRotaIntervaloCepService().findByIdDetalhamento(id); 
	}

	public void removeById(Long id) {
		getRotaIntervaloCepService().removeById(id); 
	}

	public List findTipoDificuldadeAcesso(Map criteria){
		return tipoDificuldadeAcessoService.find(criteria);
	}

	public List findOperacaoServicoLocalizacao(TypedFlatMap criteria){
		return operacaoServicoLocalizaService.findOperacaoServicoPorMunicipio(criteria);
	}

	public List findMunicipioAtendido(Map criteria){ 
		Long idFilial = Long.valueOf((String)criteria.get("idFilial"));
		return municipioFilialService.findMunicipioFilialVigenteByFilial(idFilial);
	}

	public ResultSetPage findPaginatedCustom(TypedFlatMap criteria) {
		ResultSetPage rsp = getRotaIntervaloCepService().findPaginatedCustom(criteria);

		FilterResultSetPage frsp = new FilterResultSetPage(rsp) {

			public Map filterItem(Object item) {
				RotaIntervaloCep rotaIntervaloCep = (RotaIntervaloCep) item;
				TypedFlatMap row = new TypedFlatMap();

				row.put("idRotaIntervaloCep", rotaIntervaloCep.getIdRotaIntervaloCep()); 
				row.put("nrOrdemOperacao", rotaIntervaloCep.getNrOrdemOperacao()); 
				row.put("municipio.nmMunicipio", rotaIntervaloCep.getMunicipio().getNmMunicipio());
				row.put("nrCepFinal", rotaIntervaloCep.getNrCepFinal());
				row.put("nrCepInicial", rotaIntervaloCep.getNrCepInicial());
				row.put("tpGrauRisco", rotaIntervaloCep.getTpGrauRisco());

				if (rotaIntervaloCep.getRotaColetaEntrega() != null) {
					row.put("rotaColetaEntrega.nrRota",rotaIntervaloCep.getRotaColetaEntrega().getNrRota());
					row.put("rotaColetaEntrega.dsRota",rotaIntervaloCep.getRotaColetaEntrega().getDsRota());
				}

				if (rotaIntervaloCep.getTipoDificuldadeAcesso() != null) {
					row.put("tipoDificuldadeAcesso.dsTipoDificuldadeAcesso", 
							rotaIntervaloCep.getTipoDificuldadeAcesso().getDsTipoDificuldadeAcesso());
				}

				row.put("hrCorteExecucao", rotaIntervaloCep.getHrCorteExecucao());
				row.put("hrCorteSolicitacao", rotaIntervaloCep.getHrCorteSolicitacao());

				if (rotaIntervaloCep.getEnderecoPessoa() != null) {
					row.put("enderecoCliente", enderecoPessoaService.getEnderecoCompleto(rotaIntervaloCep.getEnderecoPessoa().getIdEnderecoPessoa()));
				}

				if (rotaIntervaloCep.getCliente() != null) { 
					row.put("tpIdentificacaoCliente", rotaIntervaloCep.getCliente().getPessoa().getTpIdentificacao());
					row.put("nrIdentificacaoCliente", FormatUtils.formatIdentificacao(rotaIntervaloCep.getCliente().getPessoa()));
					row.put("cliente", rotaIntervaloCep.getCliente().getPessoa().getNmPessoa());
				}
				return row;
			}
		};
		return (ResultSetPage)frsp.doFilter();
	}

	public Integer getRowCountCustom(TypedFlatMap criteria) {
		return getRotaIntervaloCepService().getRowCountCustom(criteria);
	}

	/**
	 * Apaga várias entidades através do Id.
	 *
	 * @param ids lista com as entidades que deverão ser removida.
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		getRotaIntervaloCepService().removeByIds(ids); 
	}

	public List findLookupFilial(Map criteria) {		
		return filialService.findLookup(criteria);	
	}

	public List findLookupRotaColetaEntrega(Map criteria) {
		List list = rotaColetaEntregaService.findLookup(criteria);
		return list;
	}

	public List findLookupCliente(Map criteria) {		
		return clienteService.findLookup(criteria);	
	}

	public List findEnderecoByIdCliente(Map criteria) {
		return enderecoPessoaService.find(criteria);
	}

	public TypedFlatMap findDataSession() {
		Filial bean = SessionUtils.getFilialSessao();
		TypedFlatMap result = new TypedFlatMap();
		result.put("filial.idFilial",bean.getIdFilial());
		result.put("filial.sgFilial",bean.getSgFilial());
		result.put("filial.pessoa.nmFantasia",bean.getPessoa().getNmFantasia());
		return result;
	}

	public void setRotaIntervaloCepService(RotaIntervaloCepService rotaIntervaloCepService) {
		this.defaultService = rotaIntervaloCepService; 
	}

	public RotaIntervaloCepService getRotaIntervaloCepService() {
		return (RotaIntervaloCepService)this.defaultService; 
	}

	public void setEnderecoPessoaService(EnderecoPessoaService enderecoPessoaService) {
		this.enderecoPessoaService = enderecoPessoaService;
	}

	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}

	public void setRotaColetaEntregaService(RotaColetaEntregaService rotaColetaEntregaService) {
		this.rotaColetaEntregaService = rotaColetaEntregaService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	/**
	 * @param tipoDificuldadeAcessoService The tipoDificuldadeAcessoService to set.
	 */
	public void setTipoDificuldadeAcessoService(TipoDificuldadeAcessoService tipoDificuldadeAcessoService) {
		this.tipoDificuldadeAcessoService = tipoDificuldadeAcessoService;
	}

	/**
	 * @param operacaoServicoLocalizaService The operacaoServicoLocalizaService to set.
	 */
	public void setOperacaoServicoLocalizaService(OperacaoServicoLocalizaService operacaoServicoLocalizaService) {
		this.operacaoServicoLocalizaService = operacaoServicoLocalizaService;
	}

	public void setMunicipioFilialService(MunicipioFilialService municipioFilialService) {
		this.municipioFilialService = municipioFilialService;
	}
}
