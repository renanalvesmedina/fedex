package com.mercurio.lms.municipios.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.FilterResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.EnderecoPessoa;
import com.mercurio.lms.municipios.model.Municipio;
import com.mercurio.lms.municipios.model.Pais;
import com.mercurio.lms.municipios.model.PontoParada;
import com.mercurio.lms.municipios.model.PontoParadaTrecho;
import com.mercurio.lms.municipios.model.Rodovia;
import com.mercurio.lms.municipios.model.TrechoRotaIdaVolta;
import com.mercurio.lms.municipios.model.UnidadeFederativa;
import com.mercurio.lms.municipios.model.service.PontoParadaService;
import com.mercurio.lms.municipios.model.service.PontoParadaTrechoService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTFormatUtils;
import com.mercurio.lms.util.JTVigenciaUtils;

/**
 * Generated by: ADSM ActionGenerator
 *
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.municipios.manterPontosParadaTrechoAction"
 */

public class ManterPontosParadaTrechoAction extends CrudAction {
	private PontoParadaService pontoParadaService;

	public TypedFlatMap findById(java.lang.Long id) {
		PontoParadaTrecho pontoParadaTrecho = (PontoParadaTrecho)getPontoParadaTrechoService().findById(id);
		PontoParada pontoParada = pontoParadaTrecho.getPontoParada();
		Municipio municipio = pontoParada.getMunicipio();
		UnidadeFederativa unidadeFederativa = municipio.getUnidadeFederativa();
		Pais pais = unidadeFederativa.getPais();
		Rodovia rodovia = pontoParada.getRodovia();
		
		TypedFlatMap retorno = new TypedFlatMap();
		retorno.put("idPontoParadaTrecho",pontoParadaTrecho.getIdPontoParadaTrecho());
		retorno.put("pontoParada.idPontoParada",pontoParada.getIdPontoParada());
		retorno.put("pontoParada.nmPontoParada",pontoParada.getNmPontoParada());
		retorno.put("pontoParada.municipio.nmMunicipio",municipio.getNmMunicipio());
		retorno.put("pontoParada.municipio.unidadeFederativa.sgUnidadeFederativa",unidadeFederativa.getSgUnidadeFederativa());
		retorno.put("pontoParada.municipio.unidadeFederativa.pais.nmPais",pais.getNmPais());
		
		if (rodovia != null)
			retorno.put("pontoParada.rodovia.sgDsRodovia",rodovia.getSgDsRodovia());

		retorno.put("pontoParada.nrKm",pontoParada.getNrKm());
		retorno.put("pontoParada.blAduana",pontoParada.getBlAduana());

		EnderecoPessoa enderecoPessoa = pontoParadaService.findUltimoEnderecoPontoParada(pontoParada.getIdPontoParada());
		if (enderecoPessoa != null){
			retorno.put("nrLatitude",enderecoPessoa.getNrLatitude());
			retorno.put("nrLongitude",enderecoPessoa.getNrLongitude());
		}
			
		retorno.put("nrTempoParada",FormatUtils.converteMinutosParaHorasMinutos(
									Long.valueOf(pontoParadaTrecho.getNrTempoParada().longValue()),FormatUtils.ESCALA_HHH));
		retorno.put("nrOrdem",pontoParadaTrecho.getNrOrdem());
		retorno.put("dtVigenciaInicial",pontoParadaTrecho.getDtVigenciaInicial());
		retorno.put("dtVigenciaFinal",pontoParadaTrecho.getDtVigenciaFinal());

		retorno.put("acaoVigenciaAtual",JTVigenciaUtils.getIntegerAcaoVigencia(pontoParadaTrecho));		

		Map<String, Object> outrasInfo = getPontoParadaTrechoService().findByIdExtra(id);
		Set<String> set = outrasInfo.keySet();
		for(Iterator<String> i = set.iterator(); i.hasNext();) {
			String key = ((String)i.next());
			retorno.put(key.replace('_', '.'), outrasInfo.get(key));
		}

		return retorno;
	}

	public ResultSetPage findPaginated(TypedFlatMap filtros) {
		ResultSetPage rsp = getPontoParadaTrechoService().findPaginatedWithLocalInformation(filtros);
		
		FilterResultSetPage frsp = new FilterResultSetPage(rsp) {

			public Map filterItem(Object item) {
				PontoParadaTrecho ppt = (PontoParadaTrecho)item;
				PontoParada pp = ppt.getPontoParada();
				Municipio municipio = pp.getMunicipio();
				UnidadeFederativa uf = municipio.getUnidadeFederativa();
				Pais pais = uf.getPais();
				Rodovia rodovia = pp.getRodovia();
				
				Map map = new HashMap();
				map.put("idPontoParadaTrecho",ppt.getIdPontoParadaTrecho());
				
				map.put("pontoParada_nmPontoParada",pp.getNmPontoParada());
				map.put("pontoParada_municipio_nmMunicipio",municipio.getNmMunicipio());
				map.put("pontoParada_municipio_unidadeFederativa_sgUnidadeFederativa",uf.getSgUnidadeFederativa());
				map.put("pontoParada_municipio_unidadeFederativa_pais_nmPais",pais.getNmPais());
				map.put("pontoParada_nrKm",pp.getNrKm());
				
				map.put("nrTempoParada",JTFormatUtils.formatTime((ppt.getNrTempoParada().longValue() * 60), 2, 1));
				map.put("nrOrdem",ppt.getNrOrdem());
				map.put("dtVigenciaInicial",ppt.getDtVigenciaInicial());
				map.put("dtVigenciaFinal",ppt.getDtVigenciaFinal());
				
				if (rodovia != null) {
					map.put("pontoParada_rodovia_sgRodovia",rodovia.getSgRodovia());
				}
				
				return map;
			}
			
		};
		
		return (ResultSetPage)frsp.doFilter();
	}
	
	public Integer getRowCount(TypedFlatMap criteria) {
		return getPontoParadaTrechoService().getRowCountCustom(criteria);
	}
	
	/**
	 * Insere, caso o id seja <code>null</code> ou atualiza uma entidade, caso contrário.
	 *
	 * @param bean entidade a ser armazenada.
	 * @return entidade que foi armazenada.
	 */
	public Serializable store(TypedFlatMap beanMap) {
		if (beanMap.getBoolean("pontoParada.blAduana").booleanValue())
			getPontoParadaTrechoService().validateTrechoFromWholeRota(beanMap.getLong("trechoRotaIdaVolta.idTrechoRotaIdaVolta"));

		PontoParadaTrecho pontoParadaTrecho = new PontoParadaTrecho();
		pontoParadaTrecho.setIdPontoParadaTrecho(beanMap.getLong("idPontoParadaTrecho"));
		pontoParadaTrecho.setNrOrdem(beanMap.getShort("nrOrdem"));

		Long nrTempoParada = FormatUtils.converteHorasMinutosParaMinutos(beanMap.getString("nrTempoParada"),FormatUtils.ESCALA_HHH);

		pontoParadaTrecho.setNrTempoParada(Integer.valueOf(nrTempoParada.intValue()));
		pontoParadaTrecho.setDtVigenciaInicial(beanMap.getYearMonthDay("dtVigenciaInicial"));
		pontoParadaTrecho.setDtVigenciaFinal(beanMap.getYearMonthDay("dtVigenciaFinal"));

		PontoParada pp = new PontoParada();
		pp.setIdPontoParada(beanMap.getLong("pontoParada.idPontoParada"));
		pontoParadaTrecho.setPontoParada(pp);

		TrechoRotaIdaVolta triv = new TrechoRotaIdaVolta();
		triv.setIdTrechoRotaIdaVolta(beanMap.getLong("trechoRotaIdaVolta.idTrechoRotaIdaVolta"));
		triv.setVersao(beanMap.getInteger("trechoRotaIdaVolta.versao"));
		pontoParadaTrecho.setTrechoRotaIdaVolta(triv);

		pontoParadaTrecho.setEventoMeioTransportes(null);
		pontoParadaTrecho.setMotivoParadaPontoTrechos(null);

		getPontoParadaTrechoService().store(pontoParadaTrecho);

		TypedFlatMap retorno = new TypedFlatMap();
		retorno.put("idPontoParadaTrecho",pontoParadaTrecho.getIdPontoParadaTrecho());
		retorno.put("acaoVigenciaAtual",JTVigenciaUtils.getIntegerAcaoVigencia(pontoParadaTrecho));
		return retorno;
	}
	
	public void removeById(Long id) {
		getPontoParadaTrechoService().removeById((Long)id);
	}

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		getPontoParadaTrechoService().removeByIds(ids);
	}

	public List findLookupPontoParada(Map criteria) {
		List l = pontoParadaService.findLookupPontoParada(criteria);		
		List retorno = null;
		if (l.size() == 1) {
			PontoParada pontoParada = (PontoParada)l.get(0);
			EnderecoPessoa enderecoPessoa = pontoParadaService.findUltimoEnderecoPontoParada((Long)pontoParada.getIdPontoParada());
			Map pp = new HashMap();
			Map mun = new HashMap();
			Map uf = new HashMap();
			Map pais = new HashMap();

			pp.put("idPontoParada",pontoParada.getIdPontoParada());
			pp.put("nmPontoParada",pontoParada.getNmPontoParada());
			mun.put("nmMunicipio",pontoParada.getMunicipio().getNmMunicipio());
			pp.put("municipio",mun);
			uf.put("sgUnidadeFederativa",pontoParada.getMunicipio().getUnidadeFederativa().getSgUnidadeFederativa());
			mun.put("unidadeFederativa",uf);
			pais.put("nmPais",pontoParada.getMunicipio().getUnidadeFederativa().getPais().getNmPais().getValue());
			uf.put("pais",pais);

			Rodovia rodovia = pontoParada.getRodovia();
			if (rodovia != null) {
				Map rodo = new HashMap();
				rodo.put("sgDsRodovia",rodovia.getSgDsRodovia());
				pp.put("rodovia",rodo);
			}

			pp.put("nrKm",pontoParada.getNrKm());
			pp.put("blAduana",pontoParada.getBlAduana());
			if (enderecoPessoa != null) {
				pp.put("nrLatitudePessoa",enderecoPessoa.getNrLatitude());
				pp.put("nrLongitudePessoa",enderecoPessoa.getNrLongitude());
			}

			retorno = new ArrayList(1);
			retorno.add(pp);
		} else
			retorno = l;
		return retorno;
	}

	/**
	 * Seta o service para ManterPontosParadaTrecho
	 * @param rota Service do ManterPontosParadaTrecho
	 */
	public void setPontoParadaTrechoService(PontoParadaTrechoService rota) {
		this.defaultService = rota;
	}

	private PontoParadaTrechoService getPontoParadaTrechoService() {
		return (PontoParadaTrechoService)this.defaultService;
	}

	public void setPontoParada(PontoParadaService pontoParadaService) {
		this.pontoParadaService = pontoParadaService;
	}

}
