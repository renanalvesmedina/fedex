package com.mercurio.lms.municipios.action;

import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.municipios.model.Concessionaria;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.Municipio;
import com.mercurio.lms.municipios.model.PostoPassagem;
import com.mercurio.lms.municipios.model.PostoPassagemTrecho;
import com.mercurio.lms.municipios.model.UnidadeFederativa;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.PostoPassagemService;
import com.mercurio.lms.municipios.model.service.PostoPassagemTrechoService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTVigenciaUtils;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.municipios.manterPostoPassagemTrechoAction"
 */

public class ManterPostoPassagemTrechoAction extends CrudAction {
	private PostoPassagemService postoPassagemService;
	private FilialService filialService;

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		getPostoPassagemTrechoService().removeByIds(ids);
	}

	public void removeById(java.lang.Long id) {
		getPostoPassagemTrechoService().removeById(id);
	}

	public PostoPassagemTrecho findById(java.lang.Long id) {
		return getPostoPassagemTrechoService().findById(id);
	}

	public List findLookupFilial(TypedFlatMap parameters) {
		return filialService.findLookupBySgFilial(parameters.getString("sgFilial"), parameters.getString("tpAcesso"));
	}

	//metodo chamado na lookup de postos de passagem
	public List findLookupPostoPassagem(Map criteria){
		return postoPassagemService.findLookup(criteria);
	}

	public TypedFlatMap findFilialUsuarioLogado(){
		TypedFlatMap typedFlatMap = new TypedFlatMap();
		Filial filial = SessionUtils.getFilialSessao();
					
		typedFlatMap.put("filialOrigem.sgFilial", filial.getSgFilial());
		typedFlatMap.put("filialOrigem.pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
		typedFlatMap.put("filialOrigem.idFilial", filial.getIdFilial());
		
		return typedFlatMap;
	}

	//metodo chamado ao detalhar um registro, verifica se as vigencias estao vigentes e passa um flag para o javascript
	public Map findByIdEValidaDtVigencia(java.lang.Long id) {

		PostoPassagemTrecho postoPassagemTrecho = (PostoPassagemTrecho)findById(id);

		TypedFlatMap mapRetorno = new TypedFlatMap();

		mapRetorno.put("idPostoPassagemTrecho", postoPassagemTrecho.getIdPostoPassagemTrecho());
		mapRetorno.put("dtVigenciaInicial", postoPassagemTrecho.getDtVigenciaInicial());
		mapRetorno.put("dtVigenciaFinal", postoPassagemTrecho.getDtVigenciaFinal());
		mapRetorno.put("acaoVigenciaAtual", JTVigenciaUtils.getIntegerAcaoVigencia(postoPassagemTrecho.getDtVigenciaInicial(), postoPassagemTrecho.getDtVigenciaFinal()));

		//filial origem
		final Filial filialOrigem = postoPassagemTrecho.getFilialOrigem();
		mapRetorno.put("filialOrigem.sgFilial", filialOrigem.getSgFilial());
		mapRetorno.put("filialOrigem.idFilial", filialOrigem.getIdFilial());
		mapRetorno.put("filialOrigem.pessoa.nmFantasia", filialOrigem.getPessoa().getNmFantasia());

		//filial destino
		final Filial filialDestino = postoPassagemTrecho.getFilialDestino();
		mapRetorno.put("filialDestino.sgFilial", filialDestino.getSgFilial());
		mapRetorno.put("filialDestino.idFilial", filialDestino.getIdFilial());
		mapRetorno.put("filialDestino.pessoa.nmFantasia", filialDestino.getPessoa().getNmFantasia());

		// dados de posto de passagem
		final PostoPassagem postoPassagem = postoPassagemTrecho.getPostoPassagem();
		mapRetorno.put("postoPassagem.idPostoPassagem", postoPassagem.getIdPostoPassagem());

		mapRetorno.put("postoPassagem.tpPostoPassagem.description", postoPassagem.getTpPostoPassagem().getDescription());

		final Municipio municipio = postoPassagem.getMunicipio();
		mapRetorno.put("postoPassagem.municipio.nmMunicipio",municipio.getNmMunicipio());

		final UnidadeFederativa unidadeFederativa = municipio.getUnidadeFederativa();
		mapRetorno.put("postoPassagem.municipio.unidadeFederativa.sgUnidadeFederativa",unidadeFederativa.getSgUnidadeFederativa()); 
		mapRetorno.put("postoPassagem.municipio.unidadeFederativa.nmUnidadeFederativa" ,unidadeFederativa.getNmUnidadeFederativa()); 
		mapRetorno.put("postoPassagem.municipio.unidadeFederativa.pais.nmPais" , unidadeFederativa.getPais().getNmPais());

		mapRetorno.put("postoPassagem.tpSentidoCobranca.description" ,postoPassagem.getTpSentidoCobranca().getDescription());

		final Concessionaria concessionaria = postoPassagem.getConcessionaria();
		mapRetorno.put("postoPassagem.concessionaria.pessoa.nmPessoa",concessionaria.getPessoa().getNmPessoa());
		mapRetorno.put("postoPassagem.concessionaria.pessoa.nrIdentificacaoFormatado" ,FormatUtils.formatIdentificacao(concessionaria.getPessoa()));

		mapRetorno.put("postoPassagem.nrKm",postoPassagem.getNrKm()); 
		if(postoPassagem.getRodovia() != null)
			mapRetorno.put("postoPassagem.rodovia.sgRodovia",postoPassagem.getRodovia().getSgRodovia()); 

		return mapRetorno;
	}

	public ResultSetPage findPaginated(TypedFlatMap criteria) {
		return getPostoPassagemTrechoService().findPaginated(criteria);
	}

	public Integer getRowCount(TypedFlatMap criteria) {
		return getPostoPassagemTrechoService().getRowCount(criteria);
	}

	 /**
	 * Método sobrescrito para mudar o parâmetro de Object para PostoPassagemRotaViagem
	 * Salva o objeto passado por parâmetro
	 * @param flatMap PostoPassagemRotaViagem a ser salvo.
	 * @return PostoPassagemRotaViagem salvo
	 */
	public TypedFlatMap store(TypedFlatMap flatMap) {
		PostoPassagemTrecho postoPassagemTrecho = new PostoPassagemTrecho();
		if (flatMap.getLong("idPostoPassagemTrecho") != null )
			postoPassagemTrecho.setIdPostoPassagemTrecho(flatMap.getLong("idPostoPassagemTrecho"));

		Filial filialOrigem = new Filial();
		filialOrigem.setIdFilial(flatMap.getLong("filialOrigem.idFilial"));
		postoPassagemTrecho.setFilialOrigem(filialOrigem);

		Filial filialDestino = new Filial();
		filialDestino.setIdFilial(flatMap.getLong("filialDestino.idFilial"));
		postoPassagemTrecho.setFilialDestino(filialDestino);

		PostoPassagem postoPassagem = new PostoPassagem();
		postoPassagem.setIdPostoPassagem(flatMap.getLong("postoPassagem.idPostoPassagem"));
		postoPassagemTrecho.setPostoPassagem(postoPassagem);

		postoPassagemTrecho.setDtVigenciaInicial(flatMap.getYearMonthDay("dtVigenciaInicial"));
		postoPassagemTrecho.setDtVigenciaFinal(flatMap.getYearMonthDay("dtVigenciaFinal"));

		getPostoPassagemTrechoService().store(postoPassagemTrecho);

		TypedFlatMap map = new TypedFlatMap();
		map.put("idPostoPassagemTrecho",postoPassagemTrecho.getIdPostoPassagemTrecho());
		map.put("dtVigenciaInicial",postoPassagemTrecho.getDtVigenciaInicial());
		Integer acaoVigencia = JTVigenciaUtils.getIntegerAcaoVigencia(postoPassagemTrecho);
		map.put("acaoVigenciaAtual", acaoVigencia);

		return map;
	}

	public List findLookupByFormaCobranca(Map criteria) {
		return postoPassagemService.findLookupByFormaCobranca(criteria);
	}

	public List findValoresPostosPassagemList(Map map) {
		return postoPassagemService.findValoresPostosPassagemList(map);
	}

	private PostoPassagemTrechoService getPostoPassagemTrechoService() {
		return (PostoPassagemTrechoService)defaultService;
	}

	public void setPostoPassagemTrechoService(PostoPassagemTrechoService postoPassagemTrechoService) {
		this.defaultService = postoPassagemTrechoService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public void setPostoPassagemService(PostoPassagemService postoPassagemService) {
		this.postoPassagemService = postoPassagemService;
	}

}
