package com.mercurio.lms.municipios.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mercurio.adsm.core.util.ReflectionUtils;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Contato;
import com.mercurio.lms.configuracoes.model.service.ContatoService;
import com.mercurio.lms.contratacaoveiculos.model.MeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.TipoMeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTranspProprietarioService;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteRodoviarioService;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteService;
import com.mercurio.lms.municipios.model.MeioTransporteRotaViagem;
import com.mercurio.lms.municipios.model.service.MeioTransporteRotaViagemService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTVigenciaUtils;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;


/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.municipios.manterMeiosTransporteRotaExpressaAction"
 */

public class ManterMeiosTransporteRotaExpressaAction extends CrudAction {
	
	
	private MeioTransporteRodoviarioService meioTransporteRodoviarioService;
	private MeioTransporteService meioTransporteService;
	private MeioTranspProprietarioService meioTranspProprietarioService;	
	private ContatoService contatoService;

	public void removeById(java.lang.Long id) {
    	getMeioTransporteRotaViagemService().removeById(id);
    }

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	getMeioTransporteRotaViagemService().removeByIds(ids);
    }

    public Map findById(java.lang.Long id) {
    	MeioTransporteRotaViagem meioTransporteRotaViagem = (MeioTransporteRotaViagem)getMeioTransporteRotaViagemService().findById(id);
    	
    	TypedFlatMap retorno = new TypedFlatMap();

    	retorno.put("idMeioTransporteRotaViagem",meioTransporteRotaViagem.getIdMeioTransporteRotaViagem());
    	retorno.put("dtVigenciaInicial",meioTransporteRotaViagem.getDtVigenciaInicial());
    	retorno.put("dtVigenciaFinal",meioTransporteRotaViagem.getDtVigenciaFinal());
    	MeioTransporte mt = meioTransporteRotaViagem.getMeioTransporteRodoviario().getMeioTransporte();
    	retorno.put("meioTransporteRodoviario2.meioTransporte.nrFrota",mt.getNrFrota());
    	retorno.put("meioTransporteRodoviario.meioTransporte.nrIdentificador",mt.getNrIdentificador());
    	retorno.put("meioTransporteRodoviario.idMeioTransporte",mt.getIdMeioTransporte());
        retorno.put("acaoVigenciaAtual",JTVigenciaUtils.getIntegerAcaoVigencia(meioTransporteRotaViagem));
            	
    	TypedFlatMap info = findInfoMeioTransporte(meioTransporteRotaViagem.getMeioTransporteRodoviario().getIdMeioTransporte());

    	if (info != null) {
	    	retorno.putAll(info);
    		if (info.get("outrasInfo.tpIdentificacaoPessoa") != null && 
    				info.get("outrasInfo.nrIdentificacaoPessoa") != null) {
    			retorno.put("outrasInfo.nrIdentificacaoFormatado",
		    			FormatUtils.formatIdentificacao(
		    					((DomainValue)info.get("outrasInfo.tpIdentificacaoPessoa")).getValue(),
		    					(String)info.get("outrasInfo.nrIdentificacaoPessoa")));
	    	}
    	}
    	
    	return retorno;
    }

    public ResultSetPage findPaginatedDefault(TypedFlatMap criteria) {
    	return getMeioTransporteRotaViagemService().findPaginatedDefault(criteria);
    }
    
    public Integer findRowCountDefault(TypedFlatMap criteria) {
    	return getMeioTransporteRotaViagemService().findRowCountDefault(criteria);
    }
    
    /**
	 * Insere, caso o id seja <code>null</code> ou atualiza uma entidade, caso contrário.
	 *
	 * @param bean entidade a ser armazenada.
	 * @return entidade que foi armazenada.
	 */
    public Serializable store(Map bean) {
    	MeioTransporteRotaViagem pojo = new MeioTransporteRotaViagem();

        ReflectionUtils.copyNestedBean(pojo,bean);

        getMeioTransporteRotaViagemService().store(pojo);
        
        TypedFlatMap retorno = new TypedFlatMap();
        retorno.put("idMeioTransporteRotaViagem",pojo.getIdMeioTransporteRotaViagem());
        retorno.put("acaoVigenciaAtual",JTVigenciaUtils.getIntegerAcaoVigencia(pojo));
        
        TypedFlatMap info = findInfoMeioTransporte(pojo.getMeioTransporteRodoviario().getIdMeioTransporte());
        retorno.put("outrasInfo.idProprietario",info.get("outrasInfo.idProprietario"));
        return retorno;
    }

    private TypedFlatMap findInfoMeioTransporte(Long id) {
    	TypedFlatMap retorno = new TypedFlatMap();
		
		Map map1 = getMeioTransporteService().findInfoMeioTransporte(id);
		retorno.putAll(map1);
		
		Map map2 = getMeioTranspProprietarioService().findInfoMeioTransporte(id);
		if (map2 != null){
			Set set = map2.keySet();
			Iterator it = set.iterator();
			while (it.hasNext()) {
				String key = (String)it.next();
				retorno.put("outrasInfo."+key,map2.get(key));
			}
			
			retorno.put("outrasInfo.nrIdentificacaoFormatado",FormatUtils.formatIdentificacao(
					((DomainValue)map2.get("tpIdentificacaoPessoa")).getValue(),
					(String)map2.get("nrIdentificacaoPessoa")));
			
			if (map2.get("dsEndereco") != null) {
				String dsEndereco = (String)map2.get("dsEndereco");
				if (map2.get("nrEndereco") != null) {
					dsEndereco = dsEndereco.concat(", " + map2.get("nrEndereco"));
				}
				if (map2.get("dsComplemento") != null) {
					dsEndereco = dsEndereco.concat(" - " + map2.get("dsComplemento"));
				}
				retorno.put("outrasInfo.dsEndereco",dsEndereco);
			} 
			
			List contatos = contatoService.findContatosByIdPessoa((Long)map2.get("idProprietario"));
    		if (!contatos.isEmpty()){
    			retorno.put("outrasInfo.nmContato",((Contato)contatos.get(0)).getNmContato());
    		}
		}
		
		retorno.put("idMeioTransporte",id);
		retorno.put("meioTransporte.meioTransporteRodoviario.operadoraMct.pessoa.nmPessoa", map1.get("nmOperadora"));
		retorno.put("meioTransporte.modeloMeioTransporte.tipoMeioTransporte.dsTipoMeioTransporte", map1.get("dsTipo"));
		retorno.put("meioTransporte.modeloMeioTransporte.marcaMeioTransporte.dsMarcaMeioTransporte", map1.get("dsMarca"));
		retorno.put("meioTransporte.modeloMeioTransporte.dsModeloMeioTransporte",map1.get("dsModelo"));
		
		return retorno;
    }
    
    public List findLookupMeioTransporteRodoviario(TypedFlatMap criteria) {
    	List result = new ArrayList(2);
    	List lista1 = getMeioTransporteRodoviarioService().findLookup(criteria);
    	
    	if (lista1.isEmpty()) {
    		Long idTipo = criteria.getLong("meioTransporte.modeloMeioTransporte.tipoMeioTransporte.idTipoMeioTransporte");
    		TipoMeioTransporte tmt = getMeioTransporteRotaViagemService().findTipoMeioTransporteAndLoadComposto(idTipo);
    		
    		if (tmt.getTipoMeioTransporte() != null) { // Tratado com if getTipoMeioTransporte, 
    											       // pois esse método refere-se a um atributo idTipoMeioTransporteCompo 
    											       // conf. mapeamento e esse atributo não é obrigatório no banco 
        		criteria.put("meioTransporte.modeloMeioTransporte.tipoMeioTransporte.idTipoMeioTransporte",
        				tmt.getTipoMeioTransporte().getIdTipoMeioTransporte());
    		}
    		
    		lista1 = getMeioTransporteRodoviarioService().findLookup(criteria);
    	}
    	
    	if (lista1.size() == 1) {    		
    		Long id = ((TypedFlatMap)lista1.get(0)).getLong("idMeioTransporte");
    		
    		if (id!= null)
    			result.add(findInfoMeioTransporte(id));
    	}
    	return result;
    }
    
	public MeioTransporteRodoviarioService getMeioTransporteRodoviarioService() {
		return meioTransporteRodoviarioService;
	}

	public void setMeioTransporteRodoviarioService(
			MeioTransporteRodoviarioService meioTransporteRodoviarioService) {
		this.meioTransporteRodoviarioService = meioTransporteRodoviarioService;
	}

	public MeioTransporteService getMeioTransporteService() {
		return meioTransporteService;
	}

	public void setMeioTransporteService(MeioTransporteService meioTransporteService) {
		this.meioTransporteService = meioTransporteService;
	}

	public MeioTranspProprietarioService getMeioTranspProprietarioService() {
		return meioTranspProprietarioService;
	}

	public void setMeioTranspProprietarioService(
			MeioTranspProprietarioService meioTranspProprietarioService) {
		this.meioTranspProprietarioService = meioTranspProprietarioService;
	}
	
	public void setMeioTransporteRotaViagemService(MeioTransporteRotaViagemService meioTransporteRotaViagemService) {
		this.defaultService = meioTransporteRotaViagemService;
	}
	
	public MeioTransporteRotaViagemService getMeioTransporteRotaViagemService() {
		return (MeioTransporteRotaViagemService)defaultService;
	}
	
	public void setContatoService(ContatoService contatoService) {
		this.contatoService = contatoService;
	}
}
