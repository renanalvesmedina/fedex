package com.mercurio.lms.municipios.action;

import java.io.Serializable;
import java.util.List;

import org.joda.time.YearMonthDay;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.FindDefinition;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.configuracoes.model.service.UsuarioService;
import com.mercurio.lms.contasreceber.model.service.ReceberTransferenciaDebitoService;
import com.mercurio.lms.municipios.model.Regional;
import com.mercurio.lms.municipios.model.service.RegionalService;
import com.mercurio.lms.util.JTVigenciaUtils;

/**
 * Generated by: ADSM ActionGenerator
 *
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.municipios.manterRegionaisAction"
 */

public class ManterRegionaisAction extends CrudAction {
	private UsuarioService usuarioService;
	
	//TODO: REMOVER
	private ReceberTransferenciaDebitoService receberTransferenciaDebitoService;
	
	public void removeById(java.lang.Long id) {
		getRegionalService().removeById(id);
	}

	public List findRegionaisVigentes( TypedFlatMap criteria ) {
		return getRegionalService().findRegionaisVigentesByEmpresa( criteria );
	}

	
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		getRegionalService().removeByIds(ids);
	}

	public Serializable findById(java.lang.Long id) {
		return getRegionalService().findById(id);
	}

	public List findLookupUsuarioFuncionario(TypedFlatMap tfm){
		return usuarioService.findLookupUsuarioFuncionario(tfm.getLong("idUsuario"), tfm.getString("nrMatricula"), null, null, null, null, true);
	}
	public List findLookupUsuario(TypedFlatMap tfm){
		return usuarioService.findLookupUsuario(tfm);
	}

	
	public TypedFlatMap store(TypedFlatMap parameters) {
		
		Regional regional = new Regional();
		if ( parameters.getLong("idRegional") != null ){
			regional = getRegionalService().findById(parameters.getLong("idRegional"));
		}
		regional.setSgRegional(parameters.getString("sgRegional"));
		regional.setDsRegional(parameters.getString("dsRegional"));
		
		Usuario usuario = new Usuario();
		usuario.setIdUsuario(parameters.getLong("usuario.idUsuario"));
		regional.setUsuario(usuario);
		
		if(parameters.getLong("usuarioFaturamento.idUsuario") != null){
		Usuario usuarioFaturamento = new Usuario();
		usuarioFaturamento.setIdUsuario(parameters.getLong("usuarioFaturamento.idUsuario"));
		regional.setUsuarioFaturamento(usuarioFaturamento);
		}
		
		regional.setNrTelefone(parameters.getString("nrTelefone"));
		regional.setNrDdd(parameters.getString("nrDdd"));
		regional.setDsEmailFaturamento(parameters.getString("dsEmailFaturamento"));

		regional.setDtVigenciaInicial(parameters.getYearMonthDay("dtVigenciaInicial"));
		regional.setDtVigenciaFinal(parameters.getYearMonthDay("dtVigenciaFinal"));

		getRegionalService().store(regional);

		Integer acaoVigencia = JTVigenciaUtils.getIntegerAcaoVigencia(regional);
		TypedFlatMap tfp = new TypedFlatMap();

		tfp.put("acaoVigenciaAtual", acaoVigencia);
		tfp.put("idRegional", regional.getIdRegional());

		return tfp;
	}

	
	public ResultSetPage findPaginatedCustom(TypedFlatMap criteria) {
		String sgRegional = criteria.getString("sgRegional");
		String dsRegional = criteria.getString("dsRegional");
		Long idUsuario = criteria.getLong("usuario.idUsuario");
		YearMonthDay dtVigenciaInicial = criteria.getYearMonthDay("dtVigenciaInicial");
		YearMonthDay dtVigenciaFinal = criteria.getYearMonthDay("dtVigenciaFinal");

		return getRegionalService().findPaginatedCustom(sgRegional, dsRegional, idUsuario, dtVigenciaInicial, dtVigenciaFinal, FindDefinition.createFindDefinition(criteria));
	} 

	public Integer getRowCountCustom(TypedFlatMap criteria) {
		String sgRegional = criteria.getString("sgRegional");
		String dsRegional = criteria.getString("dsRegional");
		Long idUsuario = criteria.getLong("usuario.idUsuario");
		YearMonthDay dtVigenciaInicial = criteria.getYearMonthDay("dtVigenciaInicial");
		YearMonthDay dtVigenciaFinal = criteria.getYearMonthDay("dtVigenciaFinal");

		return getRegionalService().getRowCountCustom(sgRegional, dsRegional, idUsuario, dtVigenciaInicial, dtVigenciaFinal);
	}

	public UsuarioService getUsuarioService() {
		return usuarioService;
	}
	public void setUsuarioService(UsuarioService usuarioService) {
		this.usuarioService = usuarioService;
	}
	public void setRegionalService(RegionalService regionalService) {
		this.defaultService = regionalService;		
	}
	public RegionalService getRegionalService() {
		return (RegionalService)this.defaultService;		
	}
	public ReceberTransferenciaDebitoService getReceberTransferenciaDebitoService() {
		return receberTransferenciaDebitoService;
	}
	public void setReceberTransferenciaDebitoService(ReceberTransferenciaDebitoService receberTransferenciaDebitoService) {
		this.receberTransferenciaDebitoService = receberTransferenciaDebitoService;
	}

}
