package com.mercurio.lms.municipios.action;

import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.municipios.model.Concessionaria;
import com.mercurio.lms.municipios.model.service.ConcessionariaService;
import com.mercurio.lms.util.FormatUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.municipios.manterConcessionariaTaxasPassagemAction"
 */

public class ManterConcessionariaTaxasPassagemAction extends CrudAction {

	@Override
	public ResultSetPage findPaginated(Map criteria) {
		return super.findPaginated(criteria);
	}

	@Override
	public Integer getRowCount(Map criteria) {
		return super.getRowCount(criteria);
	}

	public Concessionaria findById(Long id) {
		return getConcessionariaService().findById(id);
	}

	public TypedFlatMap store(TypedFlatMap typedFlatMap) {
		Concessionaria concessionaria = new Concessionaria();
		concessionaria.setIdConcessionaria(typedFlatMap.getLong("idConcessionaria"));
		concessionaria.setDsHomePage(typedFlatMap.getString("dsHomePage"));
		concessionaria.setTpSituacao(typedFlatMap.getDomainValue("tpSituacao"));

		Pessoa pessoa = new Pessoa();
		pessoa.setIdPessoa(typedFlatMap.getLong("pessoa.idPessoa"));
		pessoa.setNmPessoa(typedFlatMap.getString("pessoa.nmPessoa"));
		pessoa.setTpPessoa(typedFlatMap.getDomainValue("pessoa.tpPessoa"));
		pessoa.setTpIdentificacao(typedFlatMap.getDomainValue("pessoa.tpIdentificacao"));
		pessoa.setNrIdentificacao(typedFlatMap.getString("pessoa.nrIdentificacao"));
		pessoa.setDsEmail(typedFlatMap.getString("pessoa.dsEmail"));

		concessionaria.setPessoa(pessoa);

		getConcessionariaService().store(concessionaria);

		typedFlatMap.put("pessoa.idPessoa", concessionaria.getPessoa().getIdPessoa());
		typedFlatMap.put("pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(concessionaria.getPessoa()));
		return typedFlatMap;
	}

	public void removeById(Long id) {
		getConcessionariaService().removeConcessionariaById(id);
	}

	@Override
	public void removeByIds(List ids) {
		super.removeByIds(ids);
	}

	private ConcessionariaService getConcessionariaService() {
		return (ConcessionariaService) super.defaultService;
	}

	public void setConcessionariaService(ConcessionariaService concessionariaService) {
		super.defaultService = concessionariaService;
	}
}
