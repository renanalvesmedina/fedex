package com.mercurio.lms.municipios.action;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.report.ReportActionSupport;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.Moeda;
import com.mercurio.lms.configuracoes.model.MoedaPais;
import com.mercurio.lms.configuracoes.model.service.MoedaPaisService;
import com.mercurio.lms.municipios.model.Pais;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.RotaIdaVoltaService;
import com.mercurio.lms.municipios.report.EmitirOciosidadeRotaViagemService;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.municipios.emitirOciosidadeRotaViagemAction"
 */
public class EmitirOciosidadeRotaViagemAction extends ReportActionSupport{
	
	private RotaIdaVoltaService rotaIdaVoltaService;
	private ConfiguracoesFacade configuracoesFacade;
	private MoedaPaisService moedaPaisService;
	private FilialService filialService;
	
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	@Override
	public java.io.File execute(TypedFlatMap parameters) throws Exception {
		reportServiceSupport = getEmitirOciosidadeRotaViagemService(); 
		return super.execute(parameters);
	}

	public EmitirOciosidadeRotaViagemService getEmitirOciosidadeRotaViagemService() {
		return (EmitirOciosidadeRotaViagemService)this.getReportServiceSupport();		
	}
	
	public void setEmitirOciosidadeRotaViagemService(EmitirOciosidadeRotaViagemService emitirOciosidadeRotaViagemService) {
		this.reportServiceSupport = emitirOciosidadeRotaViagemService;
	}

	public List findLookupRotasViagem(TypedFlatMap tfm) {
		return rotaIdaVoltaService.findLookupRotaIdaVolta(tfm);
	}

	public RotaIdaVoltaService getRotaIdaVoltaService() { 
		return rotaIdaVoltaService;
	}

	public void setRotaIdaVoltaService(RotaIdaVoltaService rotaIdaVoltaService) {
		this.rotaIdaVoltaService = rotaIdaVoltaService;
	}
	
	/**
	 * Retorna valores da combo de moeda a partir do país do usuário logado.
	 * @return
	 */
	public List findMoedaByPais() {
		Pais p = SessionUtils.getPaisSessao();
		List moedaPaises =  configuracoesFacade.getMoedasPais(p.getIdPais(),Boolean.TRUE);
		
		List retorno = new ArrayList(moedaPaises.size()); 
		
		Iterator iMoedaPaises = moedaPaises.iterator();
		while (iMoedaPaises.hasNext()) {
			MoedaPais mp = (MoedaPais)iMoedaPaises.next();
			Moeda m = mp.getMoeda();
			TypedFlatMap map = new TypedFlatMap();
			map.put("idMoedaPais",mp.getIdMoedaPais());
			map.put("moeda.siglaSimbolo",m.getSiglaSimbolo());
			map.put("moeda.dsSimbolo",m.getDsSimbolo());
			map.put("moeda.idMoeda",m.getIdMoeda());
			map.put("pais.idPais",mp.getPais().getIdPais());
			retorno.add(map);
		}
		
		return retorno;
	}

	/**
	 * Retorna moeda do paiso mais utilizada.
	 * @return Map com o idMoedaPais
	 */
	public Map findMoedaPadrao() {
		Pais p = SessionUtils.getPaisSessao();
		MoedaPais mp = moedaPaisService.findMoedaPaisMaisUtilizada(p.getIdPais());	
		Map m = new HashMap();
		m.put("idMoedaPais",mp.getIdMoedaPais());
		return m; 
	}
	
	
	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}

	public void setMoedaPaisService(MoedaPaisService moedaPaisService) {
		this.moedaPaisService = moedaPaisService;
	}
	 
	public List findLookupFilial(TypedFlatMap criteria) {
		return filialService.findLookupBySgFilial(criteria.getString("sgFilial"), criteria.getString("tpAcesso"));
	}
	
}
