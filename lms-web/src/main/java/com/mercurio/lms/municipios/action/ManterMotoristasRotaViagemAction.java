package com.mercurio.lms.municipios.action;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.core.util.ReflectionUtils;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.contratacaoveiculos.model.Motorista;
import com.mercurio.lms.contratacaoveiculos.model.service.MotoristaService;
import com.mercurio.lms.municipios.model.MotoristaRotaViagem;
import com.mercurio.lms.municipios.model.service.MotoristaRotaViagemService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTVigenciaUtils;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;


/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.municipios.manterMotoristasRotaViagemAction"
 */

public class ManterMotoristasRotaViagemAction extends CrudAction {
	public void setMotoristaRotaViagemService(MotoristaRotaViagemService motoristaRotaViagemService) {
		this.defaultService = motoristaRotaViagemService;
	}
	
	public MotoristaRotaViagemService getMotoristaRotaViagemService() {
		return (MotoristaRotaViagemService)defaultService;
	}
	
	private MotoristaService motoristaService;
	
	
    public void removeById(java.lang.Long id) {
    	getMotoristaRotaViagemService().removeById(id);
    }

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	getMotoristaRotaViagemService().removeByIds(ids);
    }

    public Map findById(java.lang.Long id) {
    	MotoristaRotaViagem motoristaRotaViagem = (MotoristaRotaViagem)getMotoristaRotaViagemService().findById(id);
    	Motorista motorista = motoristaRotaViagem.getMotorista();
    	Pessoa pessoa = motorista.getPessoa();
    	
    	TypedFlatMap retorno = new TypedFlatMap();
    	retorno.put("idMotoristaRotaViagem",motoristaRotaViagem.getIdMotoristaRotaViagem());
    	retorno.put("motorista.idMotorista",motorista.getIdMotorista());
    	
    	String nrIdentificacao = pessoa.getNrIdentificacao();
    	retorno.put("motorista.pessoa.nrIdentificacao",nrIdentificacao);
    	retorno.put("motorista.pessoa.nrIdentificacaoFormatado",
    			FormatUtils.formatIdentificacao(pessoa.getTpIdentificacao(),nrIdentificacao));
    	
    	retorno.put("motorista.pessoa.nmPessoa",pessoa.getNmPessoa());
    	retorno.put("dtVigenciaInicial",motoristaRotaViagem.getDtVigenciaInicial());
    	retorno.put("dtVigenciaFinal",motoristaRotaViagem.getDtVigenciaFinal());
    	
    	retorno.put("acaoVigenciaAtual",JTVigenciaUtils.getIntegerAcaoVigencia(motoristaRotaViagem));
    	
    	return retorno;
    }

    /**
	 * Insere, caso o id seja <code>null</code> ou atualiza uma entidade, caso contrário.
	 *
	 * @param bean entidade a ser armazenada.
	 * @return entidade que foi armazenada.
	 */
    public Serializable store(Map bean) {
    	MotoristaRotaViagem motoristaRotaViagem = new MotoristaRotaViagem();

        ReflectionUtils.copyNestedBean(motoristaRotaViagem,bean);

        getMotoristaRotaViagemService().store(motoristaRotaViagem);
        
        TypedFlatMap retorno = new TypedFlatMap();
        retorno.put("idMotoristaRotaViagem",motoristaRotaViagem.getIdMotoristaRotaViagem());
        retorno.put("acaoVigenciaAtual",JTVigenciaUtils.getIntegerAcaoVigencia(motoristaRotaViagem));
        return retorno;
    }
    
	public List findMotoristaLookup(Map criteria) {
		return getMotoristaService().findLookup(criteria);
	}

	public MotoristaService getMotoristaService() {
		return motoristaService;
	}

	public void setMotoristaService(MotoristaService motoristaService) {
		this.motoristaService = motoristaService;
	}

}
