package com.mercurio.lms.municipios.action;

import java.util.Collections;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.service.UsuarioService;
import com.mercurio.lms.municipios.model.Empresa;
import com.mercurio.lms.municipios.model.service.DivisaoGrupoClassificacaoService;
import com.mercurio.lms.municipios.model.service.EmpresaService;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.GrupoClassificacaoService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.municipios.manterFiliaisAction"
 */

public class ManterFiliaisAction extends CrudAction {
	private UsuarioService usuarioService;
	private GrupoClassificacaoService grupoClassificacaoService;
	private DivisaoGrupoClassificacaoService divisaoGrupoClassificacaoService;
	private EmpresaService empresaService;

	public void removeById(java.lang.Long id) {
		getService().removeById(id);
	}

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		getService().removeByIds(ids);
	}

	public List findTimeZones() {
		return JTDateTimeUtils.getTimeZones();
	}

	public Map store(Map bean) {
		return getService().store(bean);
	}

	public Map<String, Object> findById(Long id) {
		return getService().findForUpdate(id);
	}

	public List findLookupBySgFilial(TypedFlatMap criteria){
		return getService().findLookupBySgFilial(criteria.getString("sgFilial"), criteria.getString("tpAcesso"));
	}

	public Map<String, Object> reabrirFilial(TypedFlatMap parameters) {
		Long idFilial = parameters.getLong("idFilial");
		getService().executeReabrirFilial(idFilial,parameters.getDomainValue("tpFilial"),
				parameters.getYearMonthDay("dtPrevisaoOperacaoInicial"));

		return findById(idFilial);
	}

	public List findLookupUsuarioFuncionario(TypedFlatMap criteria) {
		Long idUsuario = criteria.getLong("idUsuario");
		String nrMatricula = criteria.getString("nrMatricula");
		Long idFilial = criteria.getLong("filial.idFilial");

		String cdSetor = criteria.getString("codSetor.codigo");
		if (StringUtils.isBlank(cdSetor))
			cdSetor = null;

		return usuarioService.findLookupUsuarioFuncionario(idUsuario,nrMatricula,idFilial,null,null,cdSetor,true);
	}

	/**
	 * Método que seta a dataAtual no campo de vigência na tela de listagem
	 * @return
	 */
	public TypedFlatMap findDataSession() {
		TypedFlatMap result = new TypedFlatMap();
		result.put("dataAtual",JTDateTimeUtils.getDataAtual());
		return result;
	}

	/**
	 * Método que busca os dados da empresa do usuário logado para a tela de listagem
	 * @return
	 */
	public TypedFlatMap findEmpresaUsuarioLogado(){
		TypedFlatMap result = new TypedFlatMap();
		Empresa empresa = SessionUtils.getEmpresaSessao();
		result.put("empresa.idEmpresa", empresa.getIdEmpresa());
		result.put("empresa.pessoa.nmPessoa", empresa.getPessoa().getNmPessoa());
		result.put("empresa.tpEmpresa", empresa.getTpEmpresa().getValue());
		result.put("empresa.pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(empresa.getPessoa()));

		return result;
	}

	/**
	 * Método que busca os dados da empresa Mércuio para a tela de listagem
	 * @return
	 */
	public TypedFlatMap findEmpresaMercurio() {
		TypedFlatMap result = new TypedFlatMap();

		Empresa empresa = empresaService.findEmpresaMercurio();
		result.put("empresa.idEmpresa", empresa.getIdEmpresa());
		result.put("empresa.pessoa.nmPessoa", empresa.getPessoa().getNmPessoa());
		result.put("empresa.tpEmpresa", empresa.getTpEmpresa().getValue());
		result.put("empresa.pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(empresa.getPessoa()));

		return result;
	}

	/**
	 * Find da combo de Grupo de Classificação.
	 * @param criteria
	 * @return resultado do find padrão do framework.
	 */
	public List findComboGrupoClassificacao(Map criteria) {
		return this.grupoClassificacaoService.find(criteria);
	}

	/**
	 * Find da combo de Divisão do Grupo de Classificação.
	 * @param criteria
	 * @return resultado do find padrão do framework se receber no map a chave 'grupoClassificacao.idGrupoClassificacao'.
	 * 		NOTA: está usando maps aninhados.
	 */
	public List findComboDivisaoGrupoClassificacao(Map criteria) {
		Map grupoClassificacao = (Map)criteria.get("grupoClassificacao");
		if (grupoClassificacao != null) {
			if (grupoClassificacao.get("idGrupoClassificacao") != null) {
				// se encontrar idGrupoClassificacao, realiza a consulta.
				return this.divisaoGrupoClassificacaoService.find(criteria);				
			}
		}
		return Collections.EMPTY_LIST;		
	}

	private FilialService getService() {
		return (FilialService) this.defaultService;
	}
	public void setFilial(FilialService filialService) {
		this.defaultService = filialService;
	}
	public void setUsuarioService(UsuarioService usuarioService) {
		this.usuarioService = usuarioService;
	}
	public void setGrupoClassificacaoService(GrupoClassificacaoService grupoClassificacaoService) {
		this.grupoClassificacaoService = grupoClassificacaoService;
	}
	public void setDivisaoGrupoClassificacaoService(DivisaoGrupoClassificacaoService divisaoGrupoClassificacaoService) {
		this.divisaoGrupoClassificacaoService = divisaoGrupoClassificacaoService;
	}
	public void setEmpresaService(EmpresaService empresaService) {
		this.empresaService = empresaService;
	}
	
}
