package com.mercurio.lms.workflow.action;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.pojo.Perfil;
import com.mercurio.adsm.framework.model.service.PerfilService;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.configuracoes.model.param.ConsultarUsuarioLMSParam;
import com.mercurio.lms.configuracoes.model.service.UsuarioLMSService;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.workflow.model.Substituto;
import com.mercurio.lms.workflow.model.service.SubstitutoService;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;


/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.workflow.manterSubstitutosAction"
 */

public class ManterSubstitutosAction extends CrudAction {
    
    private PerfilService perfilService;

    private UsuarioLMSService usuarioLMSService;
	
	/**
	 * Busca os usuários para a lookup de funcionário
	 * @param tfm Critérios de pesquisa como usuario.idUsuario e outros dados como usuario.nmUsuario
	 * @return Lista de funcionários
	 */
	public List findLookupUsuarioFuncionario(TypedFlatMap tfm){
		ConsultarUsuarioLMSParam cup = new ConsultarUsuarioLMSParam();
		
		cup.setNrMatricula(tfm.getString("nrMatricula"));
		cup.setNmUsuario(tfm.getString("nmUsuario"));
		cup.setTpCategoriaUsuario(tfm.getString("tpCategoriaUsuario"));

        return usuarioLMSService.findLookupSistema(cup);
	}

    /**
     * @return Returns the perfilService.
     */
    public PerfilService getPerfilService() {
        return perfilService;
    }

    /**
     * @param perfilService The perfilService to set.
     */
    public void setPerfilService(PerfilService perfilService) {
        this.perfilService = perfilService;
    }

    /**
     * Seta o service para o manter Substitutos
     * @param SubstitutoService
     */
    public void setSubstitutoService(SubstitutoService SubstitutoService) {
		this.defaultService = SubstitutoService;
	}
    
    /**
     * Remove um Substituto através do identificador dele
     * @param id Identificador do Substituto a ser removido.
     */
    public void removeById(java.lang.Long id) {
        ((SubstitutoService)defaultService).removeById(id);
    }

	/**
     * Remove vários Substitutos através da lista de identificadores
     * @param ids Lista de identificadores dos Substitutos a serem removidos
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	((SubstitutoService)defaultService).removeByIds(ids);
    }

    /**
     * Busca um Substituto pelo identificador informado
     * @param id Identificador do Substituto que se deseja buscar
     * @return Substituto encontrado
     */
    public Map findById(java.lang.Long id) {
    	
    	Substituto substituto = ((SubstitutoService)defaultService).findById(id);
    	
    	TypedFlatMap mapRetorno = new TypedFlatMap();
    	
    	mapRetorno.put("idSubstituto", substituto.getIdSubstituto());
    	
    	final Perfil perfilSubstituido = substituto.getPerfilSubstituido();
		if (perfilSubstituido != null) {
    		mapRetorno.put("perfilSubstituido.idPerfil", perfilSubstituido.getIdPerfil());
    		mapRetorno.put("perfilSubstituido.dsPerfil", perfilSubstituido.getDsPerfil());
    	}
    	
    	final Usuario usuarioByIdUsuarioSubstituido = substituto.getUsuarioByIdUsuarioSubstituido();
		if (usuarioByIdUsuarioSubstituido != null){
	    	mapRetorno.put("usuarioByIdUsuarioSubstituido.idUsuario", usuarioByIdUsuarioSubstituido.getIdUsuario());
	    	mapRetorno.put("usuarioByIdUsuarioSubstituido.nrMatricula", usuarioByIdUsuarioSubstituido.getNrMatricula());
	    	mapRetorno.put("usuarioByIdUsuarioSubstituido.nmUsuario", usuarioByIdUsuarioSubstituido.getNmUsuario());
    	}
    	
    	final Usuario usuarioByIdUsuarioSubstituto = substituto.getUsuarioByIdUsuarioSubstituto();
		if (usuarioByIdUsuarioSubstituto != null){
    		mapRetorno.put("usuarioByIdUsuarioSubstituto.idUsuario", usuarioByIdUsuarioSubstituto.getIdUsuario());
    		mapRetorno.put("usuarioByIdUsuarioSubstituto.nrMatricula", usuarioByIdUsuarioSubstituto.getNrMatricula());
    		mapRetorno.put("usuarioByIdUsuarioSubstituto.nmUsuario", usuarioByIdUsuarioSubstituto.getNmUsuario());
    	}
    	
    	mapRetorno.put("dtSubstituicaoInicial", substituto.getDtSubstituicaoInicial());
    	mapRetorno.put("dtSubstituicaoFinal", substituto.getDtSubstituicaoFinal());

    	return mapRetorno;
    }
    
    /**
     * Método utilizado para salvar ou alterar um Substituto
     * @param bean Substituto que será salvo ou atualizado.
     * @return Substituto salvo/atualizado
     */
    public Serializable store(Substituto bean) {
    	if (bean.getUsuarioByIdUsuarioSubstituido() != null && 
    			bean.getUsuarioByIdUsuarioSubstituido().getIdUsuario() == null) {
    		// workaround para resolver problema gerado pela ReflectionUtils 
    		// na presença de um atributo na associação q não o id 
    		bean.setUsuarioByIdUsuarioSubstituido(null);
    	}
        return ((SubstitutoService)defaultService).store(bean);
    }
    
    /**
     * Busca os perfis através da lookup de Perfis
     * @param criterios Critérios de pesquisa
     * @return Lista contendo os perfis encontrados na pesquisa
     */
    public List findPerfilByLookup(Map criterios){
        return getPerfilService().findLookup(criterios);
    }
    
    /**
     * Busca os dados necessarios(matricula e nome) para o usuarioByIdUsuarioSubstituido
     * @param idUsuario
     * @return List 
     */
    public Map getUsuarioSession(){
    	Usuario usuario = SessionUtils.getUsuarioLogado();
    	
    	TypedFlatMap mapRetorno = new TypedFlatMap();
    	
    	mapRetorno.put("idUsuario", usuario.getIdUsuario());
    	mapRetorno.put("nmUsuario", usuario.getNmUsuario());
    	mapRetorno.put("nrMatricula", usuario.getNrMatricula());
		
    	return mapRetorno;
    }
    
    /**
     * Método responsável por buscar os substitutos de acordo com os filtros
     * @param criteria
     * @return ResultSetPage
     */
    public ResultSetPage findPaginated(TypedFlatMap criteria){
    	return ((SubstitutoService)defaultService).findPaginated(criteria);
    }

    /**
     * Método responsável por buscar os substitutos de acordo com os filtros
     * @param criteria
     * @return ResultSetPage
     */
    public Integer getRowCount(TypedFlatMap criteria){
    	return ((SubstitutoService)defaultService).getRowCount(criteria);
    }    
    
	public void setUsuarioLMSService(UsuarioLMSService usuarioLMSService) {
		this.usuarioLMSService = usuarioLMSService;
	}

	

}
