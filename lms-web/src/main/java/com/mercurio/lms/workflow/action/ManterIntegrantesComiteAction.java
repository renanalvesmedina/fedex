package com.mercurio.lms.workflow.action;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.param.ConsultarUsuarioLMSParam;
import com.mercurio.lms.configuracoes.model.service.UsuarioLMSService;
import com.mercurio.lms.workflow.model.Integrante;
import com.mercurio.lms.workflow.model.service.IntegranteService;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;


/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.workflow.manterIntegrantesComiteAction"
 */

public class ManterIntegrantesComiteAction extends CrudAction {
	
	private UsuarioLMSService usuarioLMSService;
	
	/**
	 * Busca os usuários para a lookup de funcionário
	 * @param tfm Critérios de pesquisa como usuario.idUsuario e outros dados como usuario.nmUsuario
	 * @return Lista de funcionários
	 */
	public List findLookupUsuarioFuncionario(TypedFlatMap tfm) {
		ConsultarUsuarioLMSParam cup = new ConsultarUsuarioLMSParam();
		
		cup.setNrMatricula(tfm.getString("nrMatricula"));
		cup.setNmUsuario(tfm.getString("nmUsuario"));
		cup.setTpCategoriaUsuario(tfm.getString("tpCategoriaUsuario"));

        return usuarioLMSService.findLookupSistema(cup);
	}
	
	public void setService(IntegranteService serviceService) {
		this.defaultService = serviceService;
	}
    public void removeById(java.lang.Long id) {
        ((IntegranteService)defaultService).removeById(id);
    }
    
	public Serializable store(Integrante bean) {
		return ((IntegranteService)defaultService).store(bean);
	}

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	((IntegranteService)defaultService).removeByIds(ids);
    }

    public Map findById(java.lang.Long id) {
    	Integrante integrante = ((IntegranteService)defaultService).findById(id);
    	
    	TypedFlatMap mapRetorno = new TypedFlatMap();
    	
    	mapRetorno.put("idIntegrante", integrante.getIdIntegrante());
    	mapRetorno.put("comite.idComite", integrante.getComite().getIdComite());
    	mapRetorno.put("comite.nmComite", integrante.getComite().getNmComite());
    	
    	if (integrante.getPerfil() != null) {
	    	mapRetorno.put("perfil.dsPerfil", integrante.getPerfil().getDsPerfil());
	    	mapRetorno.put("perfil.idPerfil", integrante.getPerfil().getIdPerfil());
    	}
    	
    	if (integrante.getUsuario() != null) {
			mapRetorno.put("usuario.idUsuario", integrante.getUsuario().getIdUsuario());
			mapRetorno.put("usuario.nrMatricula", integrante.getUsuario().getNrMatricula());
			mapRetorno.put("usuario.nmUsuario", integrante.getUsuario().getNmUsuario());
    	}
    	
    	mapRetorno.put("nrOrdemAprovacao", integrante.getNrOrdemAprovacao());
    	mapRetorno.put("tpSituacao", integrante.getTpSituacao().getValue());
    	
    	return mapRetorno;
    }

	public void setUsuarioLMSService(UsuarioLMSService usuarioLMSService) {
		this.usuarioLMSService = usuarioLMSService;
	}

}
