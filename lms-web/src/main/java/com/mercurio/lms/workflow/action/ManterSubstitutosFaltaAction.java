package com.mercurio.lms.workflow.action;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.service.PerfilService;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.param.ConsultarUsuarioLMSParam;
import com.mercurio.lms.configuracoes.model.service.UsuarioLMSService;
import com.mercurio.lms.workflow.model.SubstitutoFalta;
import com.mercurio.lms.workflow.model.service.SubstitutoFaltaService;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;


/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.workflow.manterSubstitutosFaltaAction"
 */

public class ManterSubstitutosFaltaAction extends CrudAction {
    
	// TODO remover ou alterar esta dependencia é usada apenas para
	// o metodo de lookup, após ser revisto o procedimento de 
	// construcao das lookups
    private PerfilService perfilService;
    
    private UsuarioLMSService usuarioLMSService;
	
	/**
	 * Busca os usuários para a lookup de funcionário
	 * @param tfm Critérios de pesquisa como usuario.idUsuario e outros dados como usuario.nmUsuario
	 * @return Lista de funcionários
	 */
	public List findLookupUsuarioFuncionario(TypedFlatMap tfm){
		ConsultarUsuarioLMSParam cup = new ConsultarUsuarioLMSParam();
		
		cup.setNrMatricula(tfm.getString("nrMatricula"));
		cup.setNmUsuario(tfm.getString("nmUsuario"));
		cup.setTpCategoriaUsuario(tfm.getString("tpCategoriaUsuario"));

        return usuarioLMSService.findLookupSistema(cup);
	}

    public void setSubstitutosFaltaService(SubstitutoFaltaService faltaService) {
		this.defaultService = faltaService;
	}
    
    public void removeById(java.lang.Long id) {
        ((SubstitutoFaltaService)defaultService).removeById(id);
    }

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	((SubstitutoFaltaService)defaultService).removeByIds(ids);
    }

    public Map findById(java.lang.Long id) {
    	SubstitutoFalta substitutoFalta = ((SubstitutoFaltaService)defaultService).findById(id);
    	
    	TypedFlatMap mapRetorno = new TypedFlatMap();
    	
    	mapRetorno.put("idSubstitutoFalta", substitutoFalta.getIdSubstitutoFalta());
    	
    	if (substitutoFalta.getUsuario() != null){
	    	mapRetorno.put("usuario.idUsuario", substitutoFalta.getUsuario().getIdUsuario());
	    	mapRetorno.put("usuario.nrMatricula", substitutoFalta.getUsuario().getNrMatricula());
	    	mapRetorno.put("usuario.nmUsuario", substitutoFalta.getUsuario().getNmUsuario());
    	}
    	
    	if (substitutoFalta.getPerfil() != null){
	    	mapRetorno.put("perfil.idPerfil", substitutoFalta.getPerfil().getIdPerfil());
	    	mapRetorno.put("perfil.dsPerfil", substitutoFalta.getPerfil().getDsPerfil());
    	}
    	
    	mapRetorno.put("tpSituacao", substitutoFalta.getTpSituacao().getValue());

    	return mapRetorno;
    }
    
    public Serializable store(SubstitutoFalta substitutoFalta) {     
        return ((SubstitutoFaltaService)defaultService).store(substitutoFalta);
    }
    
    /**
     * @return Returns the perfilService.
     */
    public PerfilService getPerfilService() {
        return perfilService;
    }
    /**
     * @param perfilService The perfilService to set.
     */
    public void setPerfilService(PerfilService perfilService) {
        this.perfilService = perfilService;
    }    
    
    /**
     * Busca os perfis através da lookup de Perfis
     * @param criterios Critérios de pesquisa
     * @return Lista contendo os perfis encontrados na pesquisa
     */
    public List findPerfilByLookup(Map criterios){
        return getPerfilService().findLookup(criterios);
    }
    
	public void setUsuarioLMSService(UsuarioLMSService usuarioLMSService) {
		this.usuarioLMSService = usuarioLMSService;
	}
	
    /**
     * Método responsável por buscar os substitutos de acordo com os filtros
     * @param criteria
     * @return ResultSetPage
     */
    public ResultSetPage findPaginated(TypedFlatMap criteria){
    	return ((SubstitutoFaltaService)defaultService).findPaginated(criteria);
    }

    /**
     * Método responsável por buscar os substitutos de acordo com os filtros
     * @param criteria
     * @return ResultSetPage
     */
    public Integer getRowCount(TypedFlatMap criteria){
    	return ((SubstitutoFaltaService)defaultService).getRowCount(criteria);
    }    
    	

}
