package com.mercurio.lms.vendas.action;

import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.batch.annotations.Assynchronous;
import com.mercurio.adsm.framework.report.ReportActionSupport;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Funcionario;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.configuracoes.model.service.FuncionarioService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.Regional;
import com.mercurio.lms.municipios.model.service.RegionalFilialService;
import com.mercurio.lms.municipios.model.service.RegionalService;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.service.ClienteService;
import com.mercurio.lms.vendas.model.service.SegmentoMercadoService;
import com.mercurio.lms.vendas.report.EmitirPipelineClienteExcelService;
import com.mercurio.lms.vendas.report.EmitirPipelineClienteService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.vendas.emitirPipelineClienteAction"
 */
@Assynchronous
public class EmitirPipelineClienteAction  extends ReportActionSupport{
	private RegionalFilialService regionalFilialService;
	private ClienteService clienteService;
	private RegionalService regionalService;
	private FuncionarioService funcionarioService;
	private SegmentoMercadoService segmentoMercadoService;
	private EmitirPipelineClienteService emitirPipelineClienteService;
	private EmitirPipelineClienteExcelService pipelineClienteExcelService;

	

	public void setEmitirPipelineClienteService(
			EmitirPipelineClienteService emitirPipelineClienteService) {
		this.emitirPipelineClienteService = emitirPipelineClienteService;
	}

	public void setPipelineClienteExcelService(
			EmitirPipelineClienteExcelService pipelineClienteExcelService) {
		this.pipelineClienteExcelService = pipelineClienteExcelService;
	}

	/**
	 * Lookup Funcionário
	 */
	public List findLookupFuncionario(Map criteria) {
		List listRes = funcionarioService.findLookup(criteria);

		if(listRes != null && !listRes.isEmpty()) {
			Funcionario vfuncionario = (Funcionario)listRes.get(0);
			Usuario usuario = vfuncionario.getUsuario();

			Map tfm = new HashMap();
			tfm.put("idUsuario", usuario.getIdUsuario());
	   	 	tfm.put("nrMatricula", usuario.getNrMatricula());
			tfm.put("nmUsuario", usuario.getNmUsuario());
			tfm.put("login", usuario.getLogin());
			if (vfuncionario != null){
				tfm.put("nmFuncionario", vfuncionario.getNmFuncionario());
				
			}

			listRes.clear();
			listRes.add(tfm);
		}
		return listRes;
	}
	
/////////////////////
	// DADOS DA SESSÃO //
	/////////////////////
	public Map getBasicData() {
		TypedFlatMap filial = new TypedFlatMap();
		Filial filialUsuario = SessionUtils.getFilialSessao();
		Long idFilial = filialUsuario.getIdFilial();
		filial.put("idFilial", idFilial);
		filial.put("sgFilial", filialUsuario.getSgFilial());
		
		TypedFlatMap pessoa = new TypedFlatMap();
		pessoa.put("nmFantasia", filialUsuario.getPessoa().getNmFantasia());
		filial.put("pessoa", pessoa);
		
		TypedFlatMap regional = new TypedFlatMap();
		Regional reg = regionalFilialService.findLastRegionalVigente(idFilial);
		regional.put("idRegional", reg.getIdRegional());
		regional.put("siglaDescricao", reg.getSiglaDescricao());
		
		TypedFlatMap dados = new TypedFlatMap();
		dados.put("filial", filial);
		dados.put("regional", regional);		
				
		return dados;
	}	

	public List findLookupFilial(TypedFlatMap criteria) {
		return this.regionalFilialService.findLookupRegionalFilial(criteria);
	}

	public List findLookupCliente(TypedFlatMap criteria) {
		return clienteService.findLookupCliente(criteria.getString("pessoa.nrIdentificacao"));
	}

	public List findSegmentoMercado(TypedFlatMap map) {
		return this.segmentoMercadoService.find(map);
	}

	@Override
	public File execute(TypedFlatMap parameters) throws Exception {
		String tpFormatoRelatorio = ((TypedFlatMap) parameters).getString("tpFormatoRelatorio.valor");
		if(tpFormatoRelatorio.equalsIgnoreCase("xls")){
			this.reportServiceSupport = pipelineClienteExcelService;
		}else{
			this.reportServiceSupport = emitirPipelineClienteService;	
		}
		
		return super.execute(parameters);
	}

	public List montaComboRegional() {
		return this.regionalService.findRegionaisVigentes();
	}

	public void setSegmentoMercadoService(
			SegmentoMercadoService segmentoMercadoService) {
		this.segmentoMercadoService = segmentoMercadoService;
	}

	public void setFuncionarioService(FuncionarioService funcionarioService) {
		this.funcionarioService = funcionarioService;
	}

	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}
	
	public void setRegionalService(RegionalService regionalService) {
		this.regionalService = regionalService;
	}
	
	
	public void setRegionalFilialService(RegionalFilialService regionalFilialService) {
		this.regionalFilialService = regionalFilialService;
	}
}