package com.mercurio.lms.vendas.action;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.BooleanUtils;
import org.apache.commons.lang.StringUtils;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.ParametroGeral;
import com.mercurio.lms.configuracoes.model.service.ParametroGeralService;
import com.mercurio.lms.expedicao.util.ConstantesExpedicao;
import com.mercurio.lms.municipios.model.Pais;
import com.mercurio.lms.municipios.model.TipoLocalizacaoMunicipio;
import com.mercurio.lms.municipios.model.UnidadeFederativa;
import com.mercurio.lms.municipios.model.service.PaisService;
import com.mercurio.lms.municipios.model.service.TipoLocalizacaoMunicipioService;
import com.mercurio.lms.municipios.model.service.UnidadeFederativaService;
import com.mercurio.lms.tabelaprecos.model.TabelaPreco;
import com.mercurio.lms.util.BigDecimalUtils;
import com.mercurio.lms.util.LongUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.DestinoProposta;
import com.mercurio.lms.vendas.model.Proposta;
import com.mercurio.lms.vendas.model.Simulacao;
import com.mercurio.lms.vendas.model.service.DestinoPropostaService;
import com.mercurio.lms.vendas.model.service.PropostaService;
import com.mercurio.lms.vendas.model.service.SimulacaoService;

/**
 * Generated by: ADSM ActionGenerator
 *
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.vendas.gerarParametrosPropostaAction"
 * 
 * @author Andre Valadas
 */
public class GerarParametrosPropostaAction extends CrudAction {

	private PropostaService propostaService;
	private SimulacaoService simulacaoService;
	private DestinoPropostaService destinoPropostaService;
	private UnidadeFederativaService unidadeFederativaService;
	private TipoLocalizacaoMunicipioService tipoLocalizacaoMunicipioService;
	private PaisService paisService;
	private ParametroGeralService parametroGeralService;

	/**
	 * Busca a UF do Usuario em Sessao, para setar como default
	 * @author Andre Valadas
	 * @return
	 */
	public TypedFlatMap findSessionData() {
		TypedFlatMap result = new TypedFlatMap();
		UnidadeFederativa uf = unidadeFederativaService.findByIdPessoa(SessionUtils.getFilialSessao().getPessoa().getIdPessoa());
		result.put("idUFUsuarioSessao", uf.getIdUnidadeFederativa());
		result.put("pcDiferencaFretePesoParametro", BigDecimal.ZERO);
		return result;
	}

	/**
	 * Busca Todas UFs no Brasil atendidas pela Matriz 
	 * @author Andre Valadas
	 * @param criteria
	 * @return
	 */
	public List findUnidadeFederativaFromBrasil(TypedFlatMap criteria) {
    	return unidadeFederativaService.findUnidadeFederativa("BRA", ConstantesExpedicao.TP_EMPRESA_MERCURIO);
	}

	/**
	 * Busca Localização dos municipio Operacionais
	 * @author Andre Valadas
	 * @param criteria
	 * @return
	 */
	public List findTipoLocalizacaoOperacional(Map criteria){
		List retorno = null;
		if("MTZ".equals(SessionUtils.getFilialSessao().getSgFilial())){
		criteria.put("tpLocalizacao", "P");
			retorno=tipoLocalizacaoMunicipioService.find(criteria);
		}else{
			ParametroGeral parametroGeral = parametroGeralService.findByNomeParametro("TIPO_PROPOSTA_FILIAL", false);
			String [] sTipos=parametroGeral.getDsConteudo().split(";");
			Long[] lTipos = new Long[sTipos.length];
			for (int i = 0; i < sTipos.length; i++) {
				lTipos[i] = Long.parseLong(sTipos[i]);
	}
			retorno=tipoLocalizacaoMunicipioService.findByTipoPropostaFilial(lTipos);
		}
		return retorno;
	}

	/**
	 * Busca Localização dos municipio Comerciais
	 * @author Andre Valadas
	 * @param criteria
	 * @return
	 */
	public List findTipoLocalizacaoComercial(Map criteria){
		criteria.put("tpLocalizacao", "C");
		return tipoLocalizacaoMunicipioService.find(criteria);
	}

	/**
	 * Busca Proposta pelo ID Simulação
	 * @author Andre Valadas
	 * @param idSimulacao
	 * @return
	 */
	public Proposta findById(Long idSimulacao) {
		return propostaService.findByIdSimulacao(idSimulacao);
	}

	/**
	 * Gera a grid da tela Resumo da proposta
	 * 
	 * @param criteria
	 * @return List
	 */
	public List generateDestinosPropostaResumo(TypedFlatMap criteria) {
		
		String tpGeracaoProposta = criteria.getString("tpGeracaoProposta");
		if(StringUtils.isBlank(tpGeracaoProposta) || "T".equals(tpGeracaoProposta)){
			return new ArrayList();
		}

		Long idSimulacao = criteria.getLong("simulacao.idSimulacao");
		
		/*Lista com retorno de dados da grid*/
		List<Map<String, Object>> toReturn = new ArrayList<Map<String, Object>>();
		
		/*Lista de DestinoProposta por Simulação */
		List<DestinoProposta> destinosPropostas = new ArrayList<DestinoProposta>();
		if(idSimulacao != null) {
			 destinosPropostas = destinoPropostaService.findDestinosPropostaByIdSimulacao(idSimulacao);
			 
			 if(CollectionUtils.isNotEmpty(destinosPropostas)){

				 String descricaoDestino = null;
				 for (DestinoProposta destinoProposta : destinosPropostas) {

					 Map<String, Object> field = destinoPropostaService.populateDestinoProposta(destinoProposta);

					 if(destinoProposta.getGrupoRegiao() != null){
						 descricaoDestino = destinoProposta.getGrupoRegiao().getDsGrupoRegiao();
					 }else{
						 descricaoDestino = destinoProposta.getTipoLocalizacaoMunicipio().getDsTipoLocalizacaoMunicipio().getValue();
					 }

					 field.put("siglaDescricao", destinoProposta.getUnidadeFederativa().getSgUnidadeFederativa().concat(" - ").concat(descricaoDestino));

					 toReturn.add(field);
				 }				 
			 }
		}		
		
		return toReturn;
		
		}

	/**
	 * Monta a linha da grid Percentual
	 * 
	 * @param descricao
	 * @param unidadeFederativa
	 * @param tipoLocalizacaoMunicipio
	 * @return Map
	 */
	private Map<String, Object> populatePercentualSimulacao(String descricao, UnidadeFederativa unidadeFederativa, TipoLocalizacaoMunicipio tipoLocalizacaoMunicipio, TypedFlatMap criteria){
		
		Map<String, Object> field = new HashMap<String, Object>();
		field.put("siglaDescricao", unidadeFederativa.getSgUnidadeFederativa().concat(" - ").concat(descricao));
		field.put("pcFretePercentual", BigDecimalUtils.defaultBigDecimal(criteria.getBigDecimal("pcFretePercentual")));					
		field.put("vlMinimoFretePercentual", BigDecimalUtils.defaultBigDecimal(criteria.getBigDecimal("vlMinimoFretePercentual")));						
		field.put("vlToneladaFretePercentual", BigDecimalUtils.defaultBigDecimal(criteria.getBigDecimal("vlToneladaFretePercentual")));						
		field.put("psFretePercentual", BigDecimalUtils.defaultBigDecimal(criteria.getBigDecimal("psFretePercentual")));		
		field.put("idTipoLocalizacaoMunicipioDestino", tipoLocalizacaoMunicipio.getIdTipoLocalizacaoMunicipio());
		field.put("idUnidadeFederativaDestino", unidadeFederativa.getIdUnidadeFederativa());
		
		return field;		
	}
	
	
	
	/**
	 * Gerar os dados para aba percentual
	 * 
	 * @param criteria
	 * @return List
	 */
	public List generatePercentualProposta(TypedFlatMap criteria) {
		
		List<Map<String, Object>> toReturn = new ArrayList<Map<String, Object>>();
		
		TipoLocalizacaoMunicipio local = tipoLocalizacaoMunicipioService.findById(criteria.getLong("tipoLocalizacaoMunicipioByIdTipoLocalizacaoOrigem.idTipoLocalizacaoMunicipio"));
		
		Pais pais = paisService.findPaisBySgPais("BRA");
		List<UnidadeFederativa> unidadesFederativas = unidadeFederativaService.findUfsByPais(pais.getIdPais(), "A");
		
		Simulacao simulacao = simulacaoService.findById(criteria.getLong("simulacao.idSimulacao"));
		
		TabelaPreco tabelaPreco = simulacao.getTabelaPreco();
		
		Map<String, Object> field = null;
		
		/*Lista de DestinoProposta por Simulação */
		List<DestinoProposta> destinosPropostas = new ArrayList<DestinoProposta>();
		
		Long idSimulacao = criteria.getLong("simulacao.idSimulacao");
		if(idSimulacao != null) {
			 destinosPropostas = destinoPropostaService.findDestinosPropostaByIdSimulacao(idSimulacao);
		}

		Boolean isGenerate = criteria.getBoolean("isGenerate");
		if(BooleanUtils.isFalse(isGenerate) && CollectionUtils.isNotEmpty(destinosPropostas)){

			for (DestinoProposta destinoProposta : destinosPropostas) {
				toReturn.add(this.findPercentualProposta(destinoProposta));
			}/*if*/

		}else{
		
			/*Parametros para montagem da grid*/
			TipoLocalizacaoMunicipio tipoLocalizacaoMunicipioCapital = tipoLocalizacaoMunicipioService.findTipoLocalizacaoMunicipio("Capital", "O");
			TipoLocalizacaoMunicipio tipoLocalizacaoMunicipioGrandeCapital = tipoLocalizacaoMunicipioService.findTipoLocalizacaoMunicipio("Grande Capital", "O");
			TipoLocalizacaoMunicipio tipoLocalizacaoMunicipioInterior = tipoLocalizacaoMunicipioService.findTipoLocalizacaoMunicipio("Interior", "O");
			
			for (UnidadeFederativa uf : unidadesFederativas) {
				if("Capital/Interior".equals(local.getDsTipoLocalizacaoMunicipio().getValue())){

					toReturn.add(populatePercentualSimulacao("Capital",uf,tipoLocalizacaoMunicipioCapital,criteria));

					toReturn.add(populatePercentualSimulacao("Interior",uf,tipoLocalizacaoMunicipioInterior,criteria));

				}else if("Grande Capital/Interior".equals(local.getDsTipoLocalizacaoMunicipio().getValue())){

					toReturn.add(populatePercentualSimulacao("Grande Capital",uf,tipoLocalizacaoMunicipioGrandeCapital,criteria));

					toReturn.add(populatePercentualSimulacao("Interior",uf,tipoLocalizacaoMunicipioInterior,criteria));

				}else if("Interior".equals(local.getDsTipoLocalizacaoMunicipio().getValue())){

					toReturn.add(populatePercentualSimulacao("Interior",uf,tipoLocalizacaoMunicipioInterior,criteria));

				}else if("Capital/Interiores".equals(local.getDsTipoLocalizacaoMunicipio().getValue())){

					toReturn.add(populatePercentualSimulacao("Capital",uf,tipoLocalizacaoMunicipioCapital,criteria));				

					/*Grupo regiões*/
					toReturn.addAll(destinoPropostaService.populateGruporegiao(tabelaPreco,uf,criteria));
					
				}else if("Grande Capital/Interiores".equals(local.getDsTipoLocalizacaoMunicipio().getValue())){

					toReturn.add(populatePercentualSimulacao("Grande Capital",uf,tipoLocalizacaoMunicipioGrandeCapital,criteria));

					/*Grupo regiões*/
					toReturn.addAll(destinoPropostaService.populateGruporegiao(tabelaPreco,uf,criteria));						

				}else if("Interiores".equals(local.getDsTipoLocalizacaoMunicipio().getValue())){				

					/*Grupo regiões*/
					toReturn.addAll(destinoPropostaService.populateGruporegiao(tabelaPreco,uf,criteria));				
				}
			}
			
		}/*else*/
		
			return toReturn;
		}

	/**
	 * Monta todos destinos pelas UFs atendidas pela empresa, carregando os dados das mesmas quando já salvas 
	 * @author Andre Valadas
	 * @param criteria
	 * @return
	 */
	public List generateDestinosProposta(TypedFlatMap criteria) {
		
		List<Map<String, Object>> toReturn = destinoPropostaService.generateDestinosProposta(criteria);
		
		return toReturn;
	}
	
	/**
	 * Obtem os registros da linha para proposta percentual 
	 * 
	 * @param destinoProposta
	 * @return
	 */
	private Map<String, Object> findPercentualProposta(DestinoProposta destinoProposta) {
		
		String descricao = null;
		
		Map<String, Object> field = new HashMap<String, Object>();
		
		field.put("idDestinoProposta", destinoProposta.getIdDestinoProposta());
		
		if(destinoProposta.getGrupoRegiao() != null){
			descricao = destinoProposta.getGrupoRegiao().getDsGrupoRegiao();
			
			field.put("siglaDescricao", destinoProposta.getUnidadeFederativa().getSgUnidadeFederativa().concat(" - ").concat(descricao));
			field.put("idGrupoRegiao", destinoProposta.getGrupoRegiao().getIdGrupoRegiao());
		}
		
		if(destinoProposta.getTipoLocalizacaoMunicipio() != null){
			descricao = destinoProposta.getTipoLocalizacaoMunicipio().getDsTipoLocalizacaoMunicipio().getValue();
			
			field.put("siglaDescricao", destinoProposta.getUnidadeFederativa().getSgUnidadeFederativa().concat(" - ").concat(descricao));				
			field.put("idTipoLocalizacaoMunicipioDestino", destinoProposta.getTipoLocalizacaoMunicipio().getIdTipoLocalizacaoMunicipio());
		}
		
		field.put("idUnidadeFederativaDestino", destinoProposta.getUnidadeFederativa().getIdUnidadeFederativa());
		
		field.put("pcFretePercentual", destinoProposta.getPcFretePercentual());
		field.put("vlMinimoFretePercentual", destinoProposta.getVlMinimoFretePercentual());
		field.put("vlToneladaFretePercentual", destinoProposta.getVlToneladaFretePercentual());
		field.put("psFretePercentual", destinoProposta.getPsFretePercentual());
		field.put("isSelected", Boolean.TRUE);
		
		return field;
	}	
	
	/**
	 * Salva os grupos regiões da aba percentual
	 * 
	 * @param criteria
	 * @return
	 */
	public Serializable storePercentualProposta(TypedFlatMap criteria) {
		
		Proposta proposta = new Proposta();
		Long idProposta = criteria.getLong("idProposta");
		if(LongUtils.hasValue(idProposta)) {
			proposta = propostaService.findById(idProposta);
		}
		
		proposta.setTpIndicadorMinFretePeso(criteria.getDomainValue("tpIndicadorMinFretePeso"));
		proposta.setVlMinFretePeso(criteria.getBigDecimal("vlMinFretePeso"));
		proposta.setTpIndicadorFreteMinimo(criteria.getDomainValue("tpIndicadorFreteMinimo"));
		proposta.setVlFreteMinimo(criteria.getBigDecimal("vlFreteMinimo"));
		proposta.setTpIndicadorFretePeso(criteria.getDomainValue("tpIndicadorFretePeso"));
		proposta.setVlFretePeso(criteria.getBigDecimal("vlFretePeso"));
		proposta.setTpIndicadorAdvalorem(criteria.getDomainValue("tpIndicadorAdvalorem"));
		proposta.setVlAdvalorem(criteria.getBigDecimal("vlAdvalorem"));
		proposta.setPcDiferencaFretePeso(criteria.getBigDecimal("pcDiferencaFretePeso"));
		proposta.setPcDiferencaAdvalorem(criteria.getBigDecimal("pcDiferencaAdvalorem"));
		proposta.setBlPagaPesoExcedente(criteria.getBoolean("blPagaPesoExcedente"));
		proposta.setBlFreteExpedido(criteria.getBoolean("blFreteExpedido"));
		proposta.setBlFreteRecebido(criteria.getBoolean("blFreteRecebido"));		
		
		proposta.setBlPagaCubagem(Boolean.TRUE);
		proposta.setPcPagaCubagem(BigDecimalUtils.HUNDRED);	
		
		UnidadeFederativa unidadeFederativa = new UnidadeFederativa();
		unidadeFederativa.setIdUnidadeFederativa(criteria.getLong("unidadeFederativaByIdUfOrigem.idUnidadeFederativa"));
		proposta.setUnidadeFederativaByIdUfOrigem(unidadeFederativa);

		TipoLocalizacaoMunicipio tipoLocalizacaoMunicipio = new TipoLocalizacaoMunicipio();
		tipoLocalizacaoMunicipio.setIdTipoLocalizacaoMunicipio(criteria.getLong("tipoLocalizacaoMunicipioByIdTipoLocalizacaoOrigem.idTipoLocalizacaoMunicipio"));
		proposta.setTipoLocalizacaoMunicipioByIdTipoLocalizacaoOrigem(tipoLocalizacaoMunicipio);

		Simulacao simulacao = simulacaoService.findById(criteria.getLong("simulacao.idSimulacao"));
		if(criteria.getDomainValue("tpDiferencaAdvalorem") != null){
			simulacao.setTpDiferencaAdvalorem(criteria.getDomainValue("tpDiferencaAdvalorem"));
			simulacaoService.store(simulacao);
		}		
		
		proposta.setSimulacao(simulacao);		
			
		/** Gera percentuais */
		List<TypedFlatMap> destinosProposta = criteria.getList("destinoProposta");
		destinoPropostaService.storePercentualProposta(proposta, destinosProposta);		
		
		return proposta.getIdProposta();
	}
	
	/**
	 * Salva proposta e DestinosProposta
	 * @author Andre Valadas
	 * @param criteria
	 * @return
	 */
	public Serializable storeDestinosProposta(TypedFlatMap criteria) {
		
		Proposta proposta = new Proposta();
		Long idProposta = criteria.getLong("idProposta");
		if(LongUtils.hasValue(idProposta)) {
			proposta = propostaService.findById(idProposta);
		}

		proposta.setTpIndicadorMinFretePeso(criteria.getDomainValue("tpIndicadorMinFretePeso"));
		proposta.setVlMinFretePeso(criteria.getBigDecimal("vlMinFretePeso"));
		proposta.setTpIndicadorFreteMinimo(criteria.getDomainValue("tpIndicadorFreteMinimo"));
		proposta.setVlFreteMinimo(criteria.getBigDecimal("vlFreteMinimo"));
		proposta.setTpIndicadorFretePeso(criteria.getDomainValue("tpIndicadorFretePeso"));
		proposta.setVlFretePeso(criteria.getBigDecimal("vlFretePeso"));
		proposta.setTpIndicadorAdvalorem(criteria.getDomainValue("tpIndicadorAdvalorem"));
		proposta.setVlAdvalorem(criteria.getBigDecimal("vlAdvalorem"));
		proposta.setPcDiferencaFretePeso(criteria.getBigDecimal("pcDiferencaFretePeso"));
		proposta.setPcDiferencaAdvalorem(criteria.getBigDecimal("pcDiferencaAdvalorem"));
		proposta.setBlPagaPesoExcedente(criteria.getBoolean("blPagaPesoExcedente"));
		proposta.setBlFreteExpedido(criteria.getBoolean("blFreteExpedido"));
		proposta.setBlFreteRecebido(criteria.getBoolean("blFreteRecebido"));

		/*Solicitacao para o branch RPP - 01.04.01.07*/
		proposta.setBlPagaCubagem(Boolean.TRUE);
		proposta.setPcPagaCubagem(BigDecimalUtils.HUNDRED);						
		
		UnidadeFederativa unidadeFederativa = new UnidadeFederativa();
		unidadeFederativa.setIdUnidadeFederativa(criteria.getLong("unidadeFederativaByIdUfOrigem.idUnidadeFederativa"));
		proposta.setUnidadeFederativaByIdUfOrigem(unidadeFederativa);

		TipoLocalizacaoMunicipio tipoLocalizacaoMunicipio = new TipoLocalizacaoMunicipio();
		tipoLocalizacaoMunicipio.setIdTipoLocalizacaoMunicipio(criteria.getLong("tipoLocalizacaoMunicipioByIdTipoLocalizacaoOrigem.idTipoLocalizacaoMunicipio"));
		proposta.setTipoLocalizacaoMunicipioByIdTipoLocalizacaoOrigem(tipoLocalizacaoMunicipio);

		Simulacao simulacao = simulacaoService.findById(criteria.getLong("simulacao.idSimulacao"));
		if(criteria.getDomainValue("tpDiferencaAdvalorem") != null){
			simulacao.setTpDiferencaAdvalorem(criteria.getDomainValue("tpDiferencaAdvalorem"));
			simulacaoService.store(simulacao);
		}		
		
		proposta.setSimulacao(simulacao);

		/** Gera destinos */
		List<TypedFlatMap> destinosProposta = criteria.getList("destinoProposta");
		destinoPropostaService.storeDestinosProposta(proposta, destinosProposta);

		return proposta.getIdProposta();
	}

	public void setPropostaService(PropostaService propostaService) {
		this.propostaService = propostaService;
		this.defaultService = propostaService;
	}

	public void setDestinoPropostaService(DestinoPropostaService destinoPropostaService) {
		this.destinoPropostaService = destinoPropostaService;
	}

	public void setUnidadeFederativaService(UnidadeFederativaService unidadeFederativaService) {
		this.unidadeFederativaService = unidadeFederativaService;
	}

	public void setTipoLocalizacaoMunicipioService(TipoLocalizacaoMunicipioService tipoLocalizacaoMunicipioService) {
		this.tipoLocalizacaoMunicipioService = tipoLocalizacaoMunicipioService;
	}

	public SimulacaoService getSimulacaoService() {
		return simulacaoService;
	}

	public void setSimulacaoService(SimulacaoService simulacaoService) {
		this.simulacaoService = simulacaoService;
	}

	public PaisService getPaisService() {
		return paisService;
	}

	public void setPaisService(PaisService paisService) {
		this.paisService = paisService;
	}

	public ParametroGeralService getParametroGeralService() {
		return parametroGeralService;
	}

	public void setParametroGeralService(ParametroGeralService parametroGeralService) {
		this.parametroGeralService = parametroGeralService;
	}
}
