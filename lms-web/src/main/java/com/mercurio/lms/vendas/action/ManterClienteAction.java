package com.mercurio.lms.vendas.action;

import java.io.Serializable;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.joda.time.YearMonthDay;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.hibernate.VarcharI18n;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.configuracoes.model.service.ConteudoParametroFilialService;
import com.mercurio.lms.configuracoes.model.service.RamoAtividadeService;
import com.mercurio.lms.configuracoes.model.service.UsuarioService;
import com.mercurio.lms.contasreceber.model.service.CedenteService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.Regional;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.RegionalFilialService;
import com.mercurio.lms.municipios.model.service.RegionalService;
import com.mercurio.lms.util.CompareUtils;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.WarningCollectorUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.GrupoEconomico;
import com.mercurio.lms.vendas.model.UsuarioClienteResponsavel;
import com.mercurio.lms.vendas.model.service.ClienteService;
import com.mercurio.lms.vendas.model.service.GrupoEconomicoService;
import com.mercurio.lms.vendas.model.service.ManterClienteService;
import com.mercurio.lms.vendas.model.service.ObservacaoConhecimentoService;
import com.mercurio.lms.vendas.model.service.SegmentoMercadoService;
import com.mercurio.lms.vendas.model.service.UsuarioClienteResponsavelService;
import com.mercurio.lms.vendas.util.ConstantesVendas;
import com.mercurio.lms.workflow.model.dto.PendenciaHistoricoDTO.CampoHistoricoWorkflow;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.vendas.manterClienteAction"
 */

public class ManterClienteAction extends CrudAction {
	private ConfiguracoesFacade configuracoesFacade;
	private RegionalFilialService regionalFilialService;
	private CedenteService cedenteService;
	private RegionalService regionalService;
	private ConteudoParametroFilialService conteudoParametroFilialService;
	private GrupoEconomicoService grupoEconomicoService;
	private RamoAtividadeService ramoAtividadeService;
	private SegmentoMercadoService segmentoMercadoService;
	private FilialService filialService;
	private ObservacaoConhecimentoService observacaoConhecimentoService;
	private ClienteService clienteService;
	private UsuarioService usuarioService;
	private UsuarioClienteResponsavelService usuarioClienteResponsavelService;
	
	
	public ResultSetPage findPaginated(TypedFlatMap criteria) {
		ResultSetPage rsp = getManterClienteService().findPaginated(criteria);

		List list = rsp.getList();
		if (list != null && !list.isEmpty()) {
			for (Iterator it = list.iterator();  it.hasNext();) {
				
				TypedFlatMap pessoa = (TypedFlatMap) it.next();
				String nrIdentificacao = pessoa.getString("pessoa.nrIdentificacao");
				String nrIdentificacaoFormatado = "";
				if(!StringUtils.isBlank(nrIdentificacao)) {
					String tpIdentificacao = pessoa.getString("pessoa.tpIdentificacao.value");
					nrIdentificacaoFormatado = FormatUtils.formatIdentificacao(tpIdentificacao, nrIdentificacao);
				} else {
					nrIdentificacaoFormatado = "";
				}
				pessoa.put("pessoa.nrIdentificacaoFormatado", nrIdentificacaoFormatado);
				
				String dsEndereco = pessoa.getString("enderecoPessoa.dsEndereco");
				String nrEndereco = pessoa.getString("enderecoPessoa.nrEndereco");
				String dsComplemento = pessoa.getString("enderecoPessoa.dsComplemento");
				VarcharI18n dsTipoLogradouroI18n = pessoa.getVarcharI18n("enderecoPessoa.tipoLogradouro.dsTipoLogradouro");
				String dsTipoLogradouro = null;
				if (dsTipoLogradouroI18n != null) {
					dsTipoLogradouro = dsTipoLogradouroI18n.getValue();
				}
				String nmMunicipio = pessoa.getString("enderecoPessoa.municipio.nmMunicipio");
				String sgUnidadeFederativa = pessoa.getString("enderecoPessoa.municipio.unidadeFederativa.sgUnidadeFederativa");
				
				if (StringUtils.isNotBlank(dsTipoLogradouro) &&
						StringUtils.isNotBlank(dsEndereco) &&
						StringUtils.isNotBlank(nrEndereco)) {
					String enderecoFormatado = FormatUtils.formatEnderecoPessoa(
							dsTipoLogradouro, dsEndereco, nrEndereco,
							dsComplemento, null, nmMunicipio, sgUnidadeFederativa);
					
					pessoa.put("enderecoFormatado", enderecoFormatado);
				}
			} // fim do for iterator
		} // fim do if list
		return rsp;
	}
	
	public Integer getRowCount(TypedFlatMap criteria) {
		return getManterClienteService().getRowCount(criteria);
	}
	
	public TypedFlatMap findDadosSessao() {
		TypedFlatMap retorno = new TypedFlatMap();
		
		Filial filial = SessionUtils.getFilialSessao();
		retorno.put("filial.idFilial", filial.getIdFilial());
		retorno.put("filial.pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
		retorno.put("filial.sgFilial", filial.getSgFilial());
		
		Regional regional = regionalFilialService.findLastRegionalVigente(filial.getIdFilial());
		if(regional != null) {
			retorno.put("regional.idRegional", regional.getIdRegional());
			retorno.put("regional.sgRegional", regional.getSgRegional());
			retorno.put("regional.dsRegional", regional.getDsRegional());
		}
		retorno.put("nrCasasDecimaisPeso", configuracoesFacade.getValorParametro(ConstantesVendas.NR_CASAS_DECIMAIS_PESO));
		
		String tpIdentificacaoPadrao = (String) conteudoParametroFilialService.findConteudoByNomeParametro(filial.getIdFilial(), "TP_PADRAO_IDENTIFICACAO", false);
		if (StringUtils.isBlank(tpIdentificacaoPadrao)) {
			tpIdentificacaoPadrao = "CNPJ";
		}
		retorno.put("pessoa.tpIdentificacao", tpIdentificacaoPadrao);
		
		return retorno;
	}
	
	public void removeById(Long id) {
		getManterClienteService().removeById(id);
	}
	
	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		super.removeByIds(ids);
	}
	
	/**
	 * Popula a combo Cedente com os Cedentes Ativos 
	 * @param criteria
	 * @return List 
	 */
	public List findActiveCedentes(TypedFlatMap criteria){
		return cedenteService.findComboByActiveValues(criteria);
	}

	public List findMoedaPaisCombo(TypedFlatMap map) {
		return configuracoesFacade.getMoeda(SessionUtils.getPaisSessao().getIdPais(), Boolean.TRUE);
	}

	public List findRegional() {
		return regionalService.findRegional();
	}
	
	public List findLookupRegional(TypedFlatMap criteria) {
		return regionalService.findLookup(criteria);
	}
	
	public List findLookupFilial(TypedFlatMap criteria) {
		return filialService.findLookup(criteria);
	}
	
	public TypedFlatMap findPessoa(TypedFlatMap parameters) {
		String nrIdentificacao = parameters.getString("nrIdentificacao");
		String tpIdentificacao = parameters.getString("tpIdentificacao");
		Pessoa pessoa = getManterClienteService().findPessoa(nrIdentificacao, tpIdentificacao);
		if (pessoa != null) {
			TypedFlatMap result = new TypedFlatMap();
			result.put("idPessoa", pessoa.getIdPessoa());
			result.put("tpIdentificacao", pessoa.getTpIdentificacao().getValue());
			result.put("nrIdentifcacao", pessoa.getNrIdentificacao());
			result.put("tpPessoa", pessoa.getTpPessoa().getValue());
			result.put("nmPessoa", pessoa.getNmPessoa());
			result.put("dsEmail", pessoa.getDsEmail());
			result.put("nrRg", pessoa.getNrRg());
			result.put("dsOrgaoEmissorRg", pessoa.getDsOrgaoEmissorRg());
			result.put("dtEmissaoRg", pessoa.getDtEmissaoRg());
			return result;
		}
		return null;
	}
	
	/* (non-Javadoc)
	 * @see com.mercurio.adsm.framework.model.CrudAction#findById(java.io.Serializable)
	 */
	public Map findById(Long id) {
		TypedFlatMap cliente = (TypedFlatMap) getManterClienteService().findDadosIdentificacao(id);
		String nrIdentificacao = cliente.getString("cliente.pessoa.nrIdentificacao");
		if(!StringUtils.isBlank(nrIdentificacao)) {
			String tpIdentificacao = cliente.getString("cliente.pessoa.tpIdentificacao.value");
			nrIdentificacao = FormatUtils.formatIdentificacao(tpIdentificacao, nrIdentificacao);
		}
		cliente.put("cliente.pessoa.nrIdentificacao", nrIdentificacao);

		nrIdentificacao = cliente.getString("clienteMatriz.pessoa.nrIdentificacao");
		if(!StringUtils.isBlank(nrIdentificacao)) {
			String tpIdentificacao = cliente.getString("clienteMatriz.pessoa.tpIdentificacao.value");
			nrIdentificacao = FormatUtils.formatIdentificacao(tpIdentificacao, nrIdentificacao);
		}
		cliente.put("clienteMatriz.pessoa.nrIdentificacao", nrIdentificacao);
		cliente.put("nomeFantasia.inativo", filialService.findIsClienteFilial(id));
		
		GrupoEconomico ge = grupoEconomicoService.findGrupoEconomicoByIdGrupoIdCliente(null, id);
		if(ge != null){
			cliente.put("grupoEconomico.idGrupoEconomico", grupoEconomicoService.findGrupoEconomicoByIdGrupoIdCliente(null, id).getIdGrupoEconomico());
		}
				
		if (cliente.getLong("divisaoClienteResponsavel.idDivisaoCliente") != null){
			cliente.put("hidden.idDivisaoCliente", cliente.getLong("divisaoClienteResponsavel.idDivisaoCliente").toString());
		}
		
		findPendenciasWK(cliente);
		executePreencherCamposWK(cliente);		
		return cliente;
	}

	private void findPendenciasWK(TypedFlatMap clienteMap){
		Map<String, Boolean> camposPendenciaCliente = getManterClienteService().validateWorkflowPendenciaAprovacaoCliente(clienteMap.getLong("idCliente"));
		clienteMap.put("temPendenciaWKTpCliente", camposPendenciaCliente.get(CampoHistoricoWorkflow.TPCL.name()));
		clienteMap.put("temPendenciaWKFilialCom", camposPendenciaCliente.get(CampoHistoricoWorkflow.FCOM.name()));
		clienteMap.put("temPendenciaWKFilialOpe", camposPendenciaCliente.get(CampoHistoricoWorkflow.FOPE.name()));
		clienteMap.put("temPendenciaWKFilialCob", camposPendenciaCliente.get(CampoHistoricoWorkflow.FCOB.name()));
	}

	private void executePreencherCamposWK(TypedFlatMap clienteMap) {
		if(clienteMap.get("tpClienteSolicitado.value") == null){
			clienteMap.put("tpClienteSolicitado.value", clienteMap.get("tpCliente.value"));
			clienteMap.put("tpClienteSolicitado.status", clienteMap.get("tpCliente.status"));
			clienteMap.put("tpClienteSolicitado.description", clienteMap.get("tpCliente.description"));
		}
		
		if(clienteMap.get("filialByIdFilialComercialSolicitada.idFilial") == null){
			clienteMap.put("filialByIdFilialComercialSolicitada.idFilial", clienteMap.get("filialByIdFilialAtendeComercial.idFilial"));
			clienteMap.put("filialByIdFilialComercialSolicitada.sgFilial", clienteMap.get("filialByIdFilialAtendeComercial.sgFilial"));
			clienteMap.put("filialByIdFilialComercialSolicitada.pessoa.nmFantasia", clienteMap.get("filialByIdFilialAtendeComercial.pessoa.nmFantasia"));
		}
		
		if(clienteMap.get("filialByIdFilialOperacionalSolicitada.idFilial") == null){
			clienteMap.put("filialByIdFilialOperacionalSolicitada.idFilial", clienteMap.get("filialByIdFilialAtendeOperacional.idFilial"));
			clienteMap.put("filialByIdFilialOperacionalSolicitada.sgFilial", clienteMap.get("filialByIdFilialAtendeOperacional.sgFilial"));
			clienteMap.put("filialByIdFilialOperacionalSolicitada.pessoa.nmFantasia", clienteMap.get("filialByIdFilialAtendeOperacional.pessoa.nmFantasia"));
		}
		
		if(clienteMap.get("filialByIdFilialCobrancaSolicitada.idFilial") == null){
			clienteMap.put("filialByIdFilialCobrancaSolicitada.idFilial", clienteMap.get("filialByIdFilialCobranca.idFilial"));
			clienteMap.put("filialByIdFilialCobrancaSolicitada.sgFilial", clienteMap.get("filialByIdFilialCobranca.sgFilial"));
			clienteMap.put("filialByIdFilialCobrancaSolicitada.pessoa.nmFantasia", clienteMap.get("filialByIdFilialCobranca.pessoa.nmFantasia"));
		}
	}
	
    public void validateUsuariosResponsaveisByCliente(TypedFlatMap parameters){
    	List<UsuarioClienteResponsavel> list = usuarioClienteResponsavelService.findUsuariosResponsaveisByCliente(parameters);
    	
    	Boolean permissaoSalvar = list.isEmpty();
    	//Testa se exiti usuario responsavel para o cliente
    	
    	//Testa se o usuário logado é um usuário reposanvel pelo cliente
    	for (UsuarioClienteResponsavel usuarioResponsavel : list) {
			if(usuarioResponsavel.getUsuario().getIdUsuario().
					equals(SessionUtils.getUsuarioLogado().getIdUsuario())) {
				permissaoSalvar = Boolean.TRUE;
				break;
			}
		}
    	
    	if(!permissaoSalvar) {
    		throw new BusinessException("LMS-01227");
    	}
    	
    }	
	
	/**
	 * Validacao necessária antes de salvar o cliente
	 * CQPRO00025535
	 * 
	 * @param cliente
	 */
	public void validaCliente(Cliente cliente) {		
		getManterClienteService().validaCliente(cliente);		
	}		
	
	/**
	 * Salva dados do cliente
	 * @param cliente
	 * @return
	 */
	public Serializable store(Cliente cliente) {
		if(cliente.getBlNfeConjulgada() == null) {
			cliente.setBlNfeConjulgada(false);
		}

		TypedFlatMap parameters = new TypedFlatMap();
		parameters.put("idCliente", cliente.getIdCliente());
		validateUsuariosResponsaveisByCliente(parameters);
		
		try {
			if (cliente.getPessoa().getIdPessoa() != null && cliente.getCliente() != null) {
				if ("S".equals(cliente.getTpCliente().getValue()) && 
					!cliente.getPessoa().getIdPessoa().equals(cliente.getCliente().getIdCliente()) &&
					cliente.getDivisaoClienteResponsavel() == null) {
					throw new BusinessException("LMS-01201");
				}
			}
			WarningCollectorUtils.remove();
			getManterClienteService().store(cliente);
		} catch(BusinessException be) {
			validateAlteracoesCamposWK(cliente);
			
			if(WarningCollectorUtils.existWarnings()) {
				return validateWarnings(cliente, be.getMessageKey());
			}
			/** Grava os dados da tela do cliente, mesmo que ocorra alguma exceção de pendencia */
			if(validateStoreOnException(be.getMessageKey())) {
				cliente = getManterClienteService().findPessoaOriginalbyCliente(cliente);
				clienteService.store(cliente);
			}
			throw be;
		}
		return copyResultFromCliente(cliente);
	}

	/**
	 * Caso seja realizado rollback, devido a execução de alguma exceção,
	 * fazendo com que os possíveis Workflows gerados deixem de existir, os
	 * campos que geram Workflow devem voltar a serem iguais aos seus
	 * respectivos campos originais, exceto os casos em que tenham Workflow em
	 * aprovação.
	 * 
	 * @param cliente
	 */
	private void validateAlteracoesCamposWK(Cliente cliente){
		Map<String, Boolean> camposPendenciaCliente = getManterClienteService().validateWorkflowPendenciaAprovacaoCliente(cliente.getIdCliente());
		
		if(!cliente.getTpCliente().equals(cliente.getTpClienteSolicitado()) && camposPendenciaCliente.get(CampoHistoricoWorkflow.TPCL.name()).equals(Boolean.FALSE)){
			cliente.setTpClienteSolicitado(cliente.getTpCliente());
		}
		
		if(!cliente.getFilialByIdFilialAtendeComercial().equals(cliente.getFilialByIdFilialComercialSolicitada()) && camposPendenciaCliente.get(CampoHistoricoWorkflow.FCOM.name()).equals(Boolean.FALSE)){
			cliente.setFilialByIdFilialComercialSolicitada(cliente.getFilialByIdFilialAtendeComercial());
		}

		if(!cliente.getFilialByIdFilialAtendeOperacional().equals(cliente.getFilialByIdFilialOperacionalSolicitada()) && camposPendenciaCliente.get(CampoHistoricoWorkflow.FOPE.name()).equals(Boolean.FALSE)) {
			cliente.setFilialByIdFilialOperacionalSolicitada(cliente.getFilialByIdFilialAtendeOperacional());
		}

		if(!cliente.getFilialByIdFilialCobranca().equals(cliente.getFilialByIdFilialCobrancaSolicitada()) && camposPendenciaCliente.get(CampoHistoricoWorkflow.FCOB.name()).equals(Boolean.FALSE)){
			cliente.setFilialByIdFilialCobrancaSolicitada(cliente.getFilialByIdFilialCobranca());
		}
	}
	
	/**
	 * Conclui cadastro do cliente, validando regras de negócio
	 * @param cliente
	 * @return
	 */
	public Serializable storeConcluirCadastro(Cliente cliente) {
		if(cliente.getBlNfeConjulgada() == null) {
			cliente.setBlNfeConjulgada(false);
		}
		try {
			WarningCollectorUtils.remove();
			getManterClienteService().storeConcluirCadastro(cliente);
		} catch (BusinessException be) {
			validateAlteracoesCamposWK(cliente);
			
			if(WarningCollectorUtils.existWarnings()) {
				return validateWarnings(cliente, be.getMessageKey());
			}
			/** Grava os dados da tela do cliente, mesmo que ocorra alguma exceção de pendencia */
			if(validateStoreOnException(be.getMessageKey())) {
				clienteService.store(cliente);
			}
			throw be;
		}
		return copyResultFromCliente(cliente);
	}

	/**
	 * Valida Warnings do cadastro de Clientes
	 */
	private Serializable validateWarnings(Cliente cliente, String errorKey) {
		/** Grava os dados da tela do cliente, e seta o mesmo para INCOMPLETO até se concluir as validações */
		cliente.setTpSituacao(new DomainValue(ConstantesVendas.SITUACAO_INCOMPLETO));
		clienteService.store(cliente);
		TypedFlatMap clienteMapped = copyResultFromCliente(cliente);
		/** Valida se alerta eh de Geracao de Analise de Credito, retornando assim a permissao */
		if("LMS-01039".equals(errorKey) && cliente.getFilialByIdFilialAtendeComercial() != null) {
			clienteMapped.putAll(this.verifyFilialAnaliseCredito(cliente.getFilialByIdFilialAtendeComercial().getIdFilial()));
		}
		return clienteMapped;
	}

	private boolean validateStoreOnException(String errorKey) {
		return !Arrays.asList(new String[]{"LMS-01170","LMS-01156","LMS-01201"}).contains(errorKey);
	}

	/**
	 * Cria mapa de dados para atualizar os campos na tela
	 * E atualiza campos da Aba Financeiro de acordo com os dados do clienteMatriz 
	 * quando o cliente alterado for do tipo Filial de Cliente Especial 
	 * Rotina ReplicaDadosFinanceirosMatriz
	 * @param cliente
	 * @return
	 */
	private TypedFlatMap copyResultFromCliente(Cliente cliente) {
		TypedFlatMap result = new TypedFlatMap();
		result.put("dtGeracao", cliente.getDtGeracao());
		result.put("nrConta", cliente.getNrConta());
		result.put("tpSituacao", cliente.getTpSituacao().getValue());
		result.put("tpCliente", cliente.getTpCliente().getValue());
		result.put("idCliente", cliente.getIdCliente());
		result.put("usuarioByIdUsuarioAlteracao.idUsuario", cliente.getUsuarioByIdUsuarioAlteracao().getIdUsuario());
		result.put("usuarioByIdUsuarioInclusao.idUsuario", cliente.getUsuarioByIdUsuarioInclusao().getIdUsuario());
		result.put("atualizacaoDbi", cliente.getBlNaoAtualizaDBI());
		result.put("blEtiquetaPorVolume", cliente.getBlEtiquetaPorVolume());
		result.put("dsMotivoSolicitacao", "");
		result.put("idInformacaoDoctoCliente", cliente.getInformacaoDoctoCliente() != null ? cliente.getInformacaoDoctoCliente().getIdInformacaoDoctoCliente() : null);
		result.put("informacaoDoctoClienteEDI.idInformacaoDoctoClienteEDI", cliente.getInformacaoDoctoClienteEDI() != null ? cliente.getInformacaoDoctoClienteEDI().getIdInformacaoDoctoCliente() : null);
		result.put("pessoa.idPessoa", cliente.getPessoa().getIdPessoa());

		if(cliente.getTpFormaArredondamento() != null && cliente.getTpFormaArredondamento().getValue() != null){
			result.put("tpFormaArredondamento", cliente.getTpFormaArredondamento().getValue());
		}
		
		if(cliente.getTpFrequenciaVisita() != null && cliente.getTpFrequenciaVisita().getValue() != null){
			result.put("tpFrequenciaVisita", cliente.getTpFrequenciaVisita().getValue());
		}
		
		if(cliente.getBlCobraReentrega() != null){
			result.put("blCobraReentrega", cliente.getBlCobraReentrega() ? "S" : "N");
		}
		
		if(cliente.getBlCobraDevolucao() != null){
			result.put("blCobraDevolucao", cliente.getBlCobraDevolucao() ? "S" : "N");
		}
		
		if(cliente.getBlDivulgaLocalizacao() != null){
			result.put("blDivulgaLocalizacao", cliente.getBlDivulgaLocalizacao() ? "S" : "N");
		}
		
		if(cliente.getNrReentregasCobranca() != null){
			result.put("nrReentregasCobranca", cliente.getNrReentregasCobranca());
		}

		CopiadoraDeDadosDoClienteMatriz copiadora = new CopiadoraDeDadosDoClienteMatriz(clienteService);
		result.putAll(copiadora.copiarSomenteSeForUmClienteFilial(cliente));

		findPendenciasWK(result);
		
		WarningCollectorUtils.putAll(result);
		return result;
	}

	public TypedFlatMap verifyFilialAnaliseCredito(Long idFilialComercial) {
		/** Valida se o usuário tem permissão de acesso a filial comercial */
	    Boolean hasAccess = usuarioService.validateAcessoFilialRegionalUsuario(idFilialComercial);
		if(Boolean.TRUE.equals(hasAccess)) {
			/** Verifica Análise de Crédito se:
			 *  - A filial responsável comercial do cliente já estiver com o processo de análise de crédito implantando; 
			 *  - E se a data atual do sistema é maior ou igual dtImpAnaliseCreditoFilial. */
			YearMonthDay dtImpAnaliseCreditoFilial = (YearMonthDay) conteudoParametroFilialService.findConteudoByNomeParametro(idFilialComercial, "DT_IMP_ANA_CREDITO", false);
			if(dtImpAnaliseCreditoFilial == null || !CompareUtils.ge(JTDateTimeUtils.getDataAtual(), dtImpAnaliseCreditoFilial)) {
				hasAccess = Boolean.FALSE;
			};
	    }

		TypedFlatMap toReturn = new TypedFlatMap();
		toReturn.put("hasAccess", hasAccess);
		return toReturn;
	}

	public List findGrupoEconomico(TypedFlatMap criteria) {
		List retorno = grupoEconomicoService.find(criteria);
		for (Object object : retorno) {
			GrupoEconomico ge = (GrupoEconomico) object;
			ge.setDsGrupoEconomico(ge.getDsCodigo() + " - " + ge.getDsGrupoEconomico());
		}
		return retorno;
	}

	public List findSegmentoMercado(TypedFlatMap criteria) {
		return segmentoMercadoService.find(criteria);
	}

	public List findRamoAtividade(TypedFlatMap criteria) {
		return ramoAtividadeService.find(criteria);
	}

	public List findObservacaoConhecimento(TypedFlatMap criteria) {
		return observacaoConhecimentoService.find(criteria);
	}

	/**
	 * Busca os cliente de acordo com o número de identificação informado
	 * @param criteria cliente.pessoa.nrIdentificacao Número de identificação do cliente
	 * @return Lista de clientes
	 */
	public List findLookupCliente(TypedFlatMap criteria){
		return clienteService.findLookupSimplificadoAbaCad(
				criteria.getString("pessoa.nrIdentificacao"),
				null,
				criteria.getString("tpSituacao"),
				criteria.getString("tpCliente"));
	}

	/*
	 * Getters e setters
	 */
	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}
	public void setRegionalFilialService(RegionalFilialService regionalFilialService) {
		this.regionalFilialService = regionalFilialService;
	}
	public void setCedenteService(CedenteService cedenteService) {
		this.cedenteService = cedenteService;
	}
	public void setRegionalService(RegionalService regionalService) {
		this.regionalService = regionalService;
	}
	public void setManterClienteService(ManterClienteService manterClienteService) {
		super.defaultService = manterClienteService;
	}
	public ManterClienteService getManterClienteService() {
		return (ManterClienteService) super.defaultService;
	}
	public void setConteudoParametroFilialService(ConteudoParametroFilialService conteudoParametroFilialService) {
		this.conteudoParametroFilialService = conteudoParametroFilialService;
	}
	public void setGrupoEconomicoService(GrupoEconomicoService grupoEconomicoService) {
		this.grupoEconomicoService = grupoEconomicoService;
	}
	public void setRamoAtividadeService(RamoAtividadeService ramoAtividadeService) {
		this.ramoAtividadeService = ramoAtividadeService;
	}
	public void setSegmentoMercadoService(SegmentoMercadoService segmentoMercadoService) {
		this.segmentoMercadoService = segmentoMercadoService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public void setObservacaoConhecimentoService(ObservacaoConhecimentoService observacaoConhecimentoService) {
		this.observacaoConhecimentoService = observacaoConhecimentoService;
	}
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}

	public void setUsuarioService(UsuarioService usuarioService) {
		this.usuarioService = usuarioService;
	}

	public void setUsuarioClienteResponsavelService(
			UsuarioClienteResponsavelService usuarioClienteResponsavelService) {
		this.usuarioClienteResponsavelService = usuarioClienteResponsavelService;
	}
	
}
