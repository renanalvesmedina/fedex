package com.mercurio.lms.vendas.action;

import java.io.Serializable;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.core.util.ReflectionUtils;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.lms.vendas.model.OcorrenciaPce;
import com.mercurio.lms.vendas.model.service.EventoPceService;
import com.mercurio.lms.vendas.model.service.OcorrenciaPceService;
import com.mercurio.lms.vendas.model.service.ProcessoPceService;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;


/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.vendas.manterOcorrenciasAction"
 */

public class ManterOcorrenciasAction extends CrudAction {
	
	ProcessoPceService processoPceService;
	EventoPceService eventoPceService;

	public EventoPceService getEventoPceService() {
		return eventoPceService;
	}
	public void setEventoPceService(EventoPceService eventoPceService) {
		this.eventoPceService = eventoPceService;
	}
	public ProcessoPceService getProcessoPceService() {
		return processoPceService;
	}
	public void setProcessoPceService(ProcessoPceService processoPceService) {
		this.processoPceService = processoPceService;
	}
	public void setService(OcorrenciaPceService ocorrenciaPceService) {
		this.defaultService = ocorrenciaPceService;
	}
	
    public void removeById(java.lang.Long id) {
        ((OcorrenciaPceService)defaultService).removeById(id);
    }
    
    public Serializable store(OcorrenciaPce bean) {
        return ((OcorrenciaPceService)defaultService).store(bean);
    }

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	((OcorrenciaPceService)defaultService).removeByIds(ids);
    }

    public OcorrenciaPce findById(java.lang.Long id) {
    	return ((OcorrenciaPceService)defaultService).findById(id);
    }
    
    //busca os processosPce da empresa do usuario logado
    public List findProcessoPceByUsuarioLogado(){
    	Map criteria = new HashMap();
    	return getProcessoPceService().find(criteria);
    }
    
    //busca os processosPce da empresa do usuario logado
    public List findProcessoPceAtivoByUsuarioLogado(){
    	Map criteria = new HashMap();
    	ReflectionUtils.setNestedBeanPropertyValue(criteria,"tpSituacao","A");
    	return getProcessoPceService().find(criteria);
    }
    
	public List find(Map criteria) {
		return getEventoPceService().findCombo(criteria);
	}


}
