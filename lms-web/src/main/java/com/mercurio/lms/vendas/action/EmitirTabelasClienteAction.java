package com.mercurio.lms.vendas.action;

import java.io.File;
import java.io.Serializable;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.joda.time.DateTime;
import org.joda.time.MutableDateTime;

import com.mercurio.adsm.batch.annotations.Assynchronous;
import com.mercurio.adsm.batch.annotations.AssynchronousMethod;
import com.mercurio.adsm.batch.annotations.BatchType;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.configuracoes.model.service.ContatoService;
import com.mercurio.lms.configuracoes.model.service.JobInterfaceService;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.RegionalService;
import com.mercurio.lms.tabelaprecos.model.service.ProdutoEspecificoService;
import com.mercurio.lms.tabelaprecos.model.service.TabelaPrecoService;
import com.mercurio.lms.tabelaprecos.report.EmitirTabelaFreteAereaService;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.service.ClienteService;
import com.mercurio.lms.vendas.model.service.DivisaoClienteService;
import com.mercurio.lms.vendas.model.service.EmitirTabelasClientesService;
import com.mercurio.lms.vendas.report.EmitirTabelaFobService;
import com.mercurio.lms.vendas.report.EmitirTabelaFreteAereoPadraoService;
import com.mercurio.lms.vendas.report.TabelaFreteAereoPercentualService;
import com.mercurio.lms.vendas.report.TabelaFreteAereoProgressivaPesoExcedenteService;
import com.mercurio.lms.vendas.report.TabelaFreteAereoProgressivoService;
import com.mercurio.lms.vendas.report.TabelaFreteAereoTarifaEspecificaService;
import com.mercurio.lms.vendas.report.TabelaFreteAereoTaxaMinimaPesoExcedenteProgressivoService;
import com.mercurio.lms.vendas.report.TabelaFreteAereoTaxaMinimaPesoExcedenteService;
import com.mercurio.lms.vendas.report.TabelaFreteAereoVolumeService;
import com.mercurio.lms.vendas.report.TabelaFreteDiferenciadaService;
import com.mercurio.lms.vendas.report.TabelaFreteMinimoPesoExcedenteService;
import com.mercurio.lms.vendas.report.TabelaFreteMinimoProgressivoPesoExcedenteService;
import com.mercurio.lms.vendas.report.TabelaFreteMinimoProgressivoRotaService;
import com.mercurio.lms.vendas.report.TabelaFreteMinimoProgressivoTarifaService;
import com.mercurio.lms.vendas.report.TabelaFreteMinimoProgressivoTaxaEmbutidaService;
import com.mercurio.lms.vendas.report.TabelaFreteMinimoRotaService;
import com.mercurio.lms.vendas.report.TabelaFreteMinimoTarifaService;
import com.mercurio.lms.vendas.report.TabelaFreteMinimoValorService;
import com.mercurio.lms.vendas.report.TabelaFretePercentualService;
import com.mercurio.lms.vendas.report.TabelaFretePesoCargaCompletaTarifaService;
import com.mercurio.lms.vendas.report.TabelaFreteVolumeService;
import com.mercurio.lms.vendas.util.ClienteMergerPDF;
import com.mercurio.lms.vendas.util.TemplatePdf;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir. O valor
 * do <code>id</code> informado abaixo deve ser utilizado para referenciar este
 * serviço.
 * 
 * @spring.bean id="lms.vendas.emitirTabelasClienteAction"
 */
@Assynchronous
public class EmitirTabelasClienteAction  {
	private FilialService filialService;
	private ClienteService clienteService;
	private ContatoService contatoService;
	private RegionalService regionalService;
	private DivisaoClienteService divisaoClienteService;
	private TabelaPrecoService tabelaPrecoService;
	private EmitirTabelasClientesService emitirTabelasClienteService;
	private JobInterfaceService jobService;
	private ProdutoEspecificoService produtoEspecificoService;
	private TabelaFreteMinimoProgressivoTarifaService tabelaFreteMinimoProgressivoTarifaService;
	private TabelaFreteMinimoProgressivoTaxaEmbutidaService tabelaFreteMinimoProgressivoTaxaEmbutidaService;
	private TabelaFretePercentualService tabelaFretePercentualService;
	private TabelaFreteMinimoProgressivoPesoExcedenteService tabelaFreteMinimoProgressivoPesoExcedenteService;
	private TabelaFreteMinimoPesoExcedenteService tabelaFreteMinimoPesoExcedenteService;
	private TabelaFreteMinimoProgressivoRotaService tabelaFreteMinimoProgressivoRotaService;
	private TabelaFreteMinimoTarifaService tabelaFreteMinimoTarifaService;
	private TabelaFretePesoCargaCompletaTarifaService tabelaFretePesoCargaCompletaTarifaService;
	private TabelaFreteMinimoRotaService tabelaFreteMinimoRotaService;
	private EmitirTabelaFreteAereoPadraoService emitirTabelaFreteAereoPadraoService;
	private TabelaFreteAereoTaxaMinimaPesoExcedenteService tabelaFreteAereoTaxaMinimaPesoExcedenteService;
	private TabelaFreteAereoProgressivaPesoExcedenteService tabelaFreteAereoProgressivaPesoExcedenteService;
	private TabelaFreteAereoTarifaEspecificaService tabelaFreteAereoTarifaEspecificaService;
	private TabelaFreteAereoTaxaMinimaPesoExcedenteProgressivoService tabelaFreteAereoTaxaMinimaPesoExcedenteProgressivoService;
	private TabelaFreteAereoProgressivoService tabelaFreteAereoProgressivoService;
	private TabelaFreteAereoPercentualService tabelaFreteAereoPercentualService;
	private TabelaFreteVolumeService tabelaFreteVolumeService;
	private TabelaFreteAereoVolumeService tabelaFreteAereoVolumeService;
	private TabelaFreteDiferenciadaService tabelaFreteDiferenciadaService;
	private EmitirTabelaFobService emitirTabelaFobService;
	private TabelaFreteMinimoValorService tabelaFreteMinimoValorService;
	private EmitirTabelaFreteAereaService emitirTabelaFreteAereaService;
	private final Log log = LogFactory.getLog(EmitirCotacaoPrecoAction.class);


	@AssynchronousMethod(name = "tabelaprecos.EmitirTabelasCliente", type = BatchType.BIZZ_BATCH_MULTIREPORT, htmlTemplateMessage = "com/mercurio/lms/vendas/report/EmitirTabelasClienteActionHtmlResponse.vm")
	public URL executeScheduled(TypedFlatMap parameters) throws Exception {
		List<TemplatePdf> templatesPdf = new ArrayList<TemplatePdf>();
		File reportFile = null;
		List<Map> data = emitirTabelasClienteService.findClientesParametrizados(parameters);
		for(Map d : data  ){
			String idCliente = null;
			String idDivisao = null;
			try{
				if( d.get("idCliente") != null ){
					idCliente = d.get("idCliente").toString(); 
	}

				if( d.get("idDivisao") != null ){
					idDivisao = d.get("idDivisao").toString(); 
				}
				parameters.put("cliente.idCliente",idCliente );
				parameters.put("divisaoCliente.idDivisaoCliente",idDivisao );
				templatesPdf.addAll(executePDF(parameters));
			}catch( Exception e){
				log.error("[Problema na Geraçaõ da tabela de Preço para o Cliente="+idCliente+"]", e);
			}
		}
		ClienteMergerPDF clienteMerger = new ClienteMergerPDF();
		clienteMerger.merge(templatesPdf);
		return emitirTabelasClienteService.getReportLocaleStore(clienteMerger.getFile());
	}

	public TypedFlatMap execute(TypedFlatMap parameters) throws Exception {
		ClienteMergerPDF clienteMerger = new ClienteMergerPDF();
		List<TemplatePdf> templatesPdf = executePDF(parameters);
		clienteMerger.merge(templatesPdf);
		TypedFlatMap retorno = new TypedFlatMap();
		retorno.put("_value", clienteMerger.getFile() == null ? null : clienteMerger.getFile());
		return retorno;
	}

	private List<TemplatePdf> executePDF(TypedFlatMap parameters) throws Exception {
		List<TemplatePdf> templatesPdf = new ArrayList<TemplatePdf>();

		List<Map<String, String>> precos = tabelaFreteMinimoProgressivoTarifaService.findDados(parameters);

		if (precos != null && !precos.isEmpty() ) {
			log.warn("1addReportTabelaMinimoProgressivoTarifa");
			emitirTabelasClienteService.addReportTabelaMinimoProgressivoTarifa(parameters, templatesPdf,precos);
		}

		precos = tabelaFreteMinimoProgressivoTaxaEmbutidaService.findDados(parameters);

		if (precos != null && !precos.isEmpty()) {
			log.warn("2addSubReportTabelaMinimoProgressivoTaxaEmbutida");
			emitirTabelasClienteService.addSubReportTabelaMinimoProgressivoTaxaEmbutida(parameters,	templatesPdf, precos);
	}
		try{			
			precos = tabelaFretePercentualService.findDados(parameters);
			if (precos != null && !precos.isEmpty()) {
				log.warn("3addSubReportTabelaFretePercentual");
				emitirTabelasClienteService.addSubReportTabelaFretePercentual(parameters, templatesPdf, precos);
			}
		}catch (Exception e) {
			log.error(e);
		}
	


		precos = tabelaFreteMinimoProgressivoPesoExcedenteService.findDados(parameters);

		if (precos != null && !precos.isEmpty()) {
			log.warn("4addSubReportTabelaFreteMinimoProgressivoPesoExcedenteReport");
			emitirTabelasClienteService.addSubReportTabelaFreteMinimoProgressivoPesoExcedenteReport(parameters, templatesPdf, precos);
		}


		precos = tabelaFreteMinimoPesoExcedenteService.findDados(parameters);
		
		if (precos != null && !precos.isEmpty()) {
			log.warn("5addSubReportTabelaFreteMinimoPesoExcedente");
			emitirTabelasClienteService.addSubReportTabelaFreteMinimoPesoExcedente(parameters,templatesPdf, precos);
	}		
	

		precos = tabelaFreteMinimoProgressivoRotaService.findDados(parameters);

		if (precos != null && !precos.isEmpty()) {
			log.warn("6addReportTabelaFretePercentual");
			emitirTabelasClienteService.addReportTabelaFretePercentual(parameters, templatesPdf, precos);
		}

		precos = tabelaFreteMinimoTarifaService.findDados(parameters);
		if (precos != null && !precos.isEmpty()) {
			log.warn("7addSubReportEabelaFreteMinimoTarifa");
			emitirTabelasClienteService.addSubReportTabelaFreteMinimoTarifa(parameters, templatesPdf, precos);
		}
		
		
		precos = tabelaFretePesoCargaCompletaTarifaService.findDados(parameters);
		
		
		if (precos != null && !precos.isEmpty()) {
			log.warn("8addSubReportTabelaFreteMinimoPesoExcedente");
			emitirTabelasClienteService.addSubReportTabelaFreteMinimoPesoExcedente(parameters,templatesPdf, precos);
		}

		precos = tabelaFreteMinimoRotaService.findDados(parameters);

		if (precos != null && !precos.isEmpty()) {
			log.warn("9addSubReportTabelaPercentual");
			emitirTabelasClienteService.addSubReportTabelaPercentual(parameters, templatesPdf, precos);
		}

		precos = emitirTabelaFreteAereoPadraoService.findDados(parameters);
		if (precos != null && !precos.isEmpty()) {
			log.warn("10addSubReportEmitirTabelaFreteAereoPadrao");
			emitirTabelasClienteService.addSubReportEmitirTabelaFreteAereoPadrao(parameters,templatesPdf, precos);
		}
		
		precos = tabelaFreteAereoTaxaMinimaPesoExcedenteService.findDados(parameters);
		if (precos != null && !precos.isEmpty()) {
			log.warn("11addSubReportTabelaFreteAereoTaxaMinimaPesoExcedente");
			emitirTabelasClienteService.addSubReportTabelaFreteAereoTaxaMinimaPesoExcedente(parameters,	templatesPdf, precos);
		}
		
		precos = tabelaFreteAereoProgressivaPesoExcedenteService.findDados(parameters);
		if (precos != null && !precos.isEmpty()) {
			log.warn("12addSubReportTabelaFreteMinimoPesoExcedente - aguardando implementacao");
		}
		precos = tabelaFreteAereoTarifaEspecificaService.findDados(parameters);
		
		if (precos != null && !precos.isEmpty()) {
			log.warn("13addSubReportTabelaFreteMinimoPesoExcedente - aguardando implementacao");
		}
		precos = tabelaFreteAereoTaxaMinimaPesoExcedenteProgressivoService.findDados(parameters);
		if (precos != null && !precos.isEmpty()) {
			log.warn("14addSubReportTabelaFreteMinimoPesoExcedente - aguardando implementacao");
		}
		precos = tabelaFreteAereoProgressivoService.findDados(parameters);
		if (precos != null && !precos.isEmpty()) {
			log.warn("15addSubReportTabelaFreteMinimoPesoExcedente - aguardando implementacao");
		}
		precos = tabelaFreteAereoPercentualService.findDados(parameters);
		if (precos != null && !precos.isEmpty()) {
			log.warn("16addSubReportTabelaFreteMinimoPesoExcedente - aguardando implementacao");
		}
		
		precos = tabelaFreteAereoVolumeService.findDados(parameters);
		if (precos != null && !precos.isEmpty()) {
			log.warn("17addSubReportTabelaFreteMinimoPesoExcedente - aguardando implementacao" );
		}
		
		precos = tabelaFreteDiferenciadaService.findDados(parameters);
		if (precos != null && !precos.isEmpty()) {
			log.warn("18addSubReporttabelaFreteDiferenciada");
			emitirTabelasClienteService.addSubReporttabelaFreteDiferenciada(parameters,templatesPdf, precos);
		}

		precos = tabelaFreteMinimoValorService.findDados(parameters);

		if (precos != null && !precos.isEmpty()) {
			emitirTabelasClienteService.addSubreportTabelaFretePercentual(parameters, templatesPdf, precos);
		}
		if (templatesPdf.size() == 0) {
			return null;
		} 
		return templatesPdf;
	}

	public Map validateTabelasAereo(Map data){
		Long idDivisao = Long.valueOf((String)data.get("idDivisaoCliente"));
		data.put("hasTabelaAereo",
				this.tabelaPrecoService.validateTabelasAereo(idDivisao));
		return data;
	}
	
	public List findLookupFilial(Map criteria) {
		return this.filialService.findLookup(criteria);
	}

	public List findLookupCliente(TypedFlatMap criteria) {
		return clienteService.findLookupCliente(criteria
				.getString("pessoa.nrIdentificacao"));
	}

	public List findDivisao(TypedFlatMap map) {
		return this.divisaoClienteService.findByIdCliente(map
				.getLong("idCliente"));
	}

	public List findContato(TypedFlatMap map) {
		return this.contatoService.findContatosByIdPessoa(map
				.getLong("idCliente"));
	}
	
	public List findDataRange(TypedFlatMap map){
		
		Map<String,Long> mapidTabelaDivisaoCliente = this.divisaoClienteService.getIdTabelaDivisaoClienteByIdDivisaoCliente(map.getLong("idDivisaoCliente")).get(0);
		
		List listaDatas = this.clienteService.findComboRangeData(mapidTabelaDivisaoCliente.get(("idTabelaDivisao")));
		
		List<Map<String, Object>> listMapDataRange = new ArrayList<Map<String,Object>>();

		for(int i=0;i<listaDatas.size() ;i++){
			Map<String, Object> mapDataRange = new HashMap<String, Object>();
			mapDataRange.put("idData", i);
			mapDataRange.put("dsData", listaDatas.get(i));
			listMapDataRange.add(mapDataRange);
		}

		return listMapDataRange;
	}

	public List montaComboRegional() {
		return this.regionalService.findRegional();
	}

	public List findlookupProdutoEspecifico(Map criteria) {
		return produtoEspecificoService.find(criteria);
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}

	public void setContatoService(ContatoService contatoService) {
		this.contatoService = contatoService;
	}

	public void setRegionalService(RegionalService regionalService) {
		this.regionalService = regionalService;
	}

	public void setDivisaoClienteService(
			DivisaoClienteService divisaoClienteService) {
		this.divisaoClienteService = divisaoClienteService;
	}

	public void setEmitirTabelasClienteService(
			EmitirTabelasClientesService emitirTabelasClienteService) {
		this.emitirTabelasClienteService = emitirTabelasClienteService;
	}

	public void setJobService(JobInterfaceService jobService) {
		this.jobService = jobService;
	}

	public void setProdutoEspecificoService(
			ProdutoEspecificoService produtoEspecificoService) {
		this.produtoEspecificoService = produtoEspecificoService;
	}

	public void setTabelaPrecoService(TabelaPrecoService tabelaPrecoService) {
		this.tabelaPrecoService = tabelaPrecoService;
	}

	public void setTabelaFreteMinimoProgressivoTarifaService(
			TabelaFreteMinimoProgressivoTarifaService tabelaFreteMinimoProgressivoTarifaService) {
		this.tabelaFreteMinimoProgressivoTarifaService = tabelaFreteMinimoProgressivoTarifaService;
	}

	public void setTabelaFreteMinimoProgressivoTaxaEmbutidaService(
			TabelaFreteMinimoProgressivoTaxaEmbutidaService tabelaFreteMinimoProgressivoTaxaEmbutidaService) {
		this.tabelaFreteMinimoProgressivoTaxaEmbutidaService = tabelaFreteMinimoProgressivoTaxaEmbutidaService;
	}

	public void setTabelaFreteVolumeService(
			TabelaFreteVolumeService tabelaFreteVolumeService) {
		this.tabelaFreteVolumeService = tabelaFreteVolumeService;
	}

	public TabelaFreteVolumeService getTabelaFreteVolumeService() {
		return tabelaFreteVolumeService;
	}

	public TabelaFretePercentualService getTabelaFretePercentualService() {
		return tabelaFretePercentualService;
	}

	public void setTabelaFretePercentualService(
			TabelaFretePercentualService tabelaFretePercentualService) {
		this.tabelaFretePercentualService = tabelaFretePercentualService;
	}

	public TabelaFreteMinimoProgressivoPesoExcedenteService getTabelaFreteMinimoProgressivoPesoExcedenteService() {
		return tabelaFreteMinimoProgressivoPesoExcedenteService;
	}

	public void setTabelaFreteMinimoProgressivoPesoExcedenteService(
			TabelaFreteMinimoProgressivoPesoExcedenteService tabelaFreteMinimoProgressivoPesoExcedenteService) {
		this.tabelaFreteMinimoProgressivoPesoExcedenteService = tabelaFreteMinimoProgressivoPesoExcedenteService;
	}

	public TabelaFreteMinimoPesoExcedenteService getTabelaFreteMinimoPesoExcedenteService() {
		return tabelaFreteMinimoPesoExcedenteService;
	}

	public void setTabelaFreteMinimoPesoExcedenteService(
			TabelaFreteMinimoPesoExcedenteService tabelaFreteMinimoPesoExcedenteService) {
		this.tabelaFreteMinimoPesoExcedenteService = tabelaFreteMinimoPesoExcedenteService;
	}

	public TabelaFreteMinimoProgressivoRotaService getTabelaFreteMinimoProgressivoRotaService() {
		return tabelaFreteMinimoProgressivoRotaService;
	}

	public void setTabelaFreteMinimoProgressivoRotaService(
			TabelaFreteMinimoProgressivoRotaService tabelaFreteMinimoProgressivoRotaService) {
		this.tabelaFreteMinimoProgressivoRotaService = tabelaFreteMinimoProgressivoRotaService;
	}

	public TabelaFreteMinimoTarifaService getTabelaFreteMinimoTarifaService() {
		return tabelaFreteMinimoTarifaService;
	}

	public void setTabelaFreteMinimoTarifaService(
			TabelaFreteMinimoTarifaService tabelaFreteMinimoTarifaService) {
		this.tabelaFreteMinimoTarifaService = tabelaFreteMinimoTarifaService;
	}

	public TabelaFretePesoCargaCompletaTarifaService getTabelaFretePesoCargaCompletaTarifaService() {
		return tabelaFretePesoCargaCompletaTarifaService;
	}

	public void setTabelaFretePesoCargaCompletaTarifaService(
			TabelaFretePesoCargaCompletaTarifaService tabelaFretePesoCargaCompletaTarifaService) {
		this.tabelaFretePesoCargaCompletaTarifaService = tabelaFretePesoCargaCompletaTarifaService;
	}

	public TabelaFreteMinimoRotaService getTabelaFreteMinimoRotaService() {
		return tabelaFreteMinimoRotaService;
	}

	public void setTabelaFreteMinimoRotaService(
			TabelaFreteMinimoRotaService tabelaFreteMinimoRotaService) {
		this.tabelaFreteMinimoRotaService = tabelaFreteMinimoRotaService;
	}

	public EmitirTabelaFreteAereoPadraoService getEmitirTabelaFreteAereoPadraoService() {
		return emitirTabelaFreteAereoPadraoService;
	}

	public void setEmitirTabelaFreteAereoPadraoService(
			EmitirTabelaFreteAereoPadraoService emitirTabelaFreteAereoPadraoService) {
		this.emitirTabelaFreteAereoPadraoService = emitirTabelaFreteAereoPadraoService;
	}

	public TabelaFreteAereoTaxaMinimaPesoExcedenteService getTabelaFreteAereoTaxaMinimaPesoExcedenteService() {
		return tabelaFreteAereoTaxaMinimaPesoExcedenteService;
	}

	public void setTabelaFreteAereoTaxaMinimaPesoExcedenteService(
			TabelaFreteAereoTaxaMinimaPesoExcedenteService tabelaFreteAereoTaxaMinimaPesoExcedenteService) {
		this.tabelaFreteAereoTaxaMinimaPesoExcedenteService = tabelaFreteAereoTaxaMinimaPesoExcedenteService;
	}

	public TabelaFreteAereoProgressivaPesoExcedenteService getTabelaFreteAereoProgressivaPesoExcedenteService() {
		return tabelaFreteAereoProgressivaPesoExcedenteService;
	}

	public void setTabelaFreteAereoProgressivaPesoExcedenteService(
			TabelaFreteAereoProgressivaPesoExcedenteService tabelaFreteAereoProgressivaPesoExcedenteService) {
		this.tabelaFreteAereoProgressivaPesoExcedenteService = tabelaFreteAereoProgressivaPesoExcedenteService;
	}

	public TabelaFreteAereoTarifaEspecificaService getTabelaFreteAereoTarifaEspecificaService() {
		return tabelaFreteAereoTarifaEspecificaService;
	}

	public void setTabelaFreteAereoTarifaEspecificaService(
			TabelaFreteAereoTarifaEspecificaService tabelaFreteAereoTarifaEspecificaService) {
		this.tabelaFreteAereoTarifaEspecificaService = tabelaFreteAereoTarifaEspecificaService;
	}

	public TabelaFreteAereoTaxaMinimaPesoExcedenteProgressivoService getTabelaFreteAereoTaxaMinimaPesoExcedenteProgressivoService() {
		return tabelaFreteAereoTaxaMinimaPesoExcedenteProgressivoService;
	}

	public void setTabelaFreteAereoTaxaMinimaPesoExcedenteProgressivoService(
			TabelaFreteAereoTaxaMinimaPesoExcedenteProgressivoService tabelaFreteAereoTaxaMinimaPesoExcedenteProgressivoService) {
		this.tabelaFreteAereoTaxaMinimaPesoExcedenteProgressivoService = tabelaFreteAereoTaxaMinimaPesoExcedenteProgressivoService;
	}

	public TabelaFreteAereoProgressivoService getTabelaFreteAereoProgressivoService() {
		return tabelaFreteAereoProgressivoService;
	}

	public void setTabelaFreteAereoProgressivoService(
			TabelaFreteAereoProgressivoService tabelaFreteAereoProgressivoService) {
		this.tabelaFreteAereoProgressivoService = tabelaFreteAereoProgressivoService;
	}

	public TabelaFreteAereoPercentualService getTabelaFreteAereoPercentualService() {
		return tabelaFreteAereoPercentualService;
	}

	public void setTabelaFreteAereoPercentualService(
			TabelaFreteAereoPercentualService tabelaFreteAereoPercentualService) {
		this.tabelaFreteAereoPercentualService = tabelaFreteAereoPercentualService;
	}

	public TabelaFreteAereoVolumeService getTabelaFreteAereoVolumeService() {
		return tabelaFreteAereoVolumeService;
	}

	public void setTabelaFreteAereoVolumeService(
			TabelaFreteAereoVolumeService tabelaFreteAereoVolumeService) {
		this.tabelaFreteAereoVolumeService = tabelaFreteAereoVolumeService;
	}

	public TabelaFreteDiferenciadaService getTabelaFreteDiferenciadaService() {
		return tabelaFreteDiferenciadaService;
	}

	public void setTabelaFreteDiferenciadaService(
			TabelaFreteDiferenciadaService tabelaFreteDiferenciadaService) {
		this.tabelaFreteDiferenciadaService = tabelaFreteDiferenciadaService;
	}

	public EmitirTabelaFobService getEmitirTabelaFobService() {
		return emitirTabelaFobService;
	}

	public void setEmitirTabelaFobService(
			EmitirTabelaFobService emitirTabelaFobService) {
		this.emitirTabelaFobService = emitirTabelaFobService;
	}

	public TabelaFreteMinimoValorService getTabelaFreteMinimoValorService() {
		return tabelaFreteMinimoValorService;
	}

	public void setTabelaFreteMinimoValorService(
			TabelaFreteMinimoValorService tabelaFreteMinimoValorService) {
		this.tabelaFreteMinimoValorService = tabelaFreteMinimoValorService;
	}

	public FilialService getFilialService() {
		return filialService;
	}

	public ClienteService getClienteService() {
		return clienteService;
	}

	public ContatoService getContatoService() {
		return contatoService;
	}

	public RegionalService getRegionalService() {
		return regionalService;
	}

	public DivisaoClienteService getDivisaoClienteService() {
		return divisaoClienteService;
	}

	public TabelaPrecoService getTabelaPrecoService() {
		return tabelaPrecoService;
	}

	public EmitirTabelasClientesService getEmitirTabelasClienteService() {
		return emitirTabelasClienteService;
	}

	public JobInterfaceService getJobService() {
		return jobService;
	}

	public ProdutoEspecificoService getProdutoEspecificoService() {
		return produtoEspecificoService;
	}

	public TabelaFreteMinimoProgressivoTarifaService getTabelaFreteMinimoProgressivoTarifaService() {
		return tabelaFreteMinimoProgressivoTarifaService;
	}

	public TabelaFreteMinimoProgressivoTaxaEmbutidaService getTabelaFreteMinimoProgressivoTaxaEmbutidaService() {
		return tabelaFreteMinimoProgressivoTaxaEmbutidaService;
	}
	
	public DateTime scheduleReport(TypedFlatMap parameters) {
		DateTime proximaExecucao = JTDateTimeUtils.getDataHoraAtual().plusDays(
				1);
		MutableDateTime mutableDateTime = proximaExecucao.toMutableDateTime();
		mutableDateTime.setSecondOfMinute(0);
		mutableDateTime.setHourOfDay(2);
		mutableDateTime.setMinuteOfHour(30);

		proximaExecucao = mutableDateTime.toDateTime();

		// Gera a expressão cron
		final String cronExpression = String.format("0 %d %d %d %d ? %d",
				proximaExecucao.getMinuteOfHour(),
				proximaExecucao.getHourOfDay(),
				proximaExecucao.getDayOfMonth(),
				proximaExecucao.getMonthOfYear(), proximaExecucao.getYear());

		Usuario usuarioLogado = SessionUtils.getUsuarioLogado();
		jobService.schedule("tabelaprecos.EmitirTabelasCliente",
				"Emissão de tabelas do cliente", cronExpression,
				new Serializable[] { parameters }, usuarioLogado.getLogin(),
				Collections.EMPTY_SET);

		return proximaExecucao;
	}

	public EmitirTabelaFreteAereaService getEmitirTabelaFreteAereaService() {
		return emitirTabelaFreteAereaService;
}

	public void setEmitirTabelaFreteAereaService(
			EmitirTabelaFreteAereaService emitirTabelaFreteAereaService) {
		this.emitirTabelaFreteAereaService = emitirTabelaFreteAereaService;
	}

}
