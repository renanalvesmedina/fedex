package com.mercurio.lms.vendas.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.joda.time.YearMonthDay;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.util.FilterList;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.EnderecoPessoa;
import com.mercurio.lms.configuracoes.model.service.EnderecoPessoaService;
import com.mercurio.lms.configuracoes.model.service.UsuarioService;
import com.mercurio.lms.municipios.model.Aeroporto;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.MunicipioFilial;
import com.mercurio.lms.municipios.model.service.AeroportoService;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.MunicipioFilialService;
import com.mercurio.lms.municipios.model.service.PaisService;
import com.mercurio.lms.municipios.model.service.TipoLocalizacaoMunicipioService;
import com.mercurio.lms.municipios.model.service.UnidadeFederativaService;
import com.mercurio.lms.municipios.model.service.ZonaService;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.vendas.model.PrazoEntregaCliente;
import com.mercurio.lms.vendas.model.service.PrazoEntregaClienteService;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.vendas.manterPrazosEntregaClienteAction"
 */

public class ManterPrazosEntregaClienteAction extends CrudAction {
	
	
	private MunicipioFilialService municipioFilialService;	
	private ZonaService zonaService;
	private PaisService paisService;
	private UnidadeFederativaService unidadeFederativaService;
	private FilialService filialService;
	private EnderecoPessoaService enderecoPessoaService;
	private AeroportoService aeroportoService;
	private TipoLocalizacaoMunicipioService tipoLocalizacaoMunicipioService;
	private UsuarioService usuarioService;
	
	public void setTipoLocalizacaoMunicipioService(
			TipoLocalizacaoMunicipioService tipoLocalizacaoMunicipioService) {
		this.tipoLocalizacaoMunicipioService = tipoLocalizacaoMunicipioService;
	}
	public void setAeroportoService(AeroportoService aeroportoService) {
		this.aeroportoService = aeroportoService;
	}
	public void setPrazoEntregaCliente(PrazoEntregaClienteService prazoEntregaClienteService) {
		this.defaultService = prazoEntregaClienteService;
	}
    public void removeById(java.lang.Long id) {
        ((PrazoEntregaClienteService)defaultService).removeById(id);
    }

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	((PrazoEntregaClienteService)defaultService).removeByIds(ids);
    }

    public PrazoEntregaCliente findById(java.lang.Long id) {
    	return ((PrazoEntregaClienteService)defaultService).findById(id);
    }
    
    /**Chama o store padrão
     * 
     * @param bean
     * @return
     */
    public Serializable store(PrazoEntregaCliente bean) {
    	return ((PrazoEntregaClienteService)defaultService).store(bean);
    }
    
    /**
     * Faz a busca para a lookup, 
     *
     */
    public List findLookupBySgFilialVigenteEm(TypedFlatMap criteria) {    	
    	return filialService.findLookupBySgFilialVigenteEm(criteria);
	}
    
    /**
     * Busca a data atual
     * @param tfm Critérios de pesquisa
     * @return YearMonthDay Data atual
     */
    public YearMonthDay findDataAtual(TypedFlatMap tfm){
    	return JTDateTimeUtils.getDataAtual();
    }
    
    //-----------------------------------------------------
    
    /**
     * @author José Rodrigo Moraes
     * @since  16/08/2006
     *
     * Busca as zonas para a combo de Zona
     * 
     * @param map Critérios de pesquisa
     * @return Lista de Zonas
     */
    public List findZona(Map map){
    	return zonaService.find(map);
    }
    
    /**
     * @author José Rodrigo Moraes
     * @since  16/08/2006
     * 
     * Método de busca dos países para a lookup de país
     * 
     * @param tfm Critérios de pesquisa
     * @return Lista de países
     */
    public List findLookupPais(Map criteria){
		return paisService.findLookup(criteria);
	}
    
    /**
     * @author José Rodrigo Moraes
     * @since  16/08/2006
     *
     * Busca as Unidades Federativas para a combo de unidades federativas
     * 
     * @param map Critérios de pesquisa
     * @return Lista de Unidades Federativas
     */
    public List findUnidadeFederativaByPais(Map criteria){
		return unidadeFederativaService.findByPais(criteria);
	}
    
    /**
     * @author José Rodrigo Moraes
     * @since  16/08/2006
     * 
     * Método de busca dos municípios para a lookup de municipio
     * 
     * @param criteria Critérios de pesquisa
     * @return Lista de municipios
     */
    public List findLookupFilial(TypedFlatMap tfm) {
    	List filiais = null;
    	List result = new ArrayList();

    	if( tfm.getYearMonthDay("historicoFiliais.vigenteEm") == null ){
    		filiais = filialService.findLookupBySgFilial(tfm.getString("sgFilial"),tfm.getString("tpAcesso"));
    		if(filiais != null) {
    			Map map;
    			if(filiais.size() == 1) {
    				map = (Map)filiais.get(0);
    				map.put("endereco", findEndereco((Long)map.get("idFilial")));
    				result.add(map);
    			}else{
		    		for (int i = 0; i < filiais.size(); i++) {
		    			map = (Map)filiais.get(i);
						result.add(map);
					}
    			}
    		}
    	} else {
    		filiais = filialService.findLookupBySgFilialVigenteEm(tfm.getString("sgFilial"),tfm.getYearMonthDay("historicoFiliais.vigenteEm"),tfm.getString("tpAcesso"));
    		if(filiais != null) {
	    		for (int i = 0; i < filiais.size(); i++) {
	    			Filial f = (Filial)filiais.get(i);
	    			TypedFlatMap map = new TypedFlatMap();
	    			map.put("endereco", findEndereco(f.getIdFilial()));
	    			map.put("idFilial",f.getIdFilial());
	    			map.put("sgFilial",f.getSgFilial());
	    			map.put("pessoa.idPessoa",f.getIdFilial());
	    			map.put("pessoa.nmFantasia",f.getPessoa().getNmFantasia());
	    			result.add(map);
	    		}
    		}
    	}

		return result;
	}
    
    /**
     * @author José Rodrigo Moraes
     * @since  16/08/2006
     * 
     * Busca os endereços associados a pessoa 
     * 
     * @param idPessoa Identificador da pessoa
     * @return Dados de Unidade Federativa, Pais e Zona
     */
    public TypedFlatMap findEndereco(Long idPessoa) {
		EnderecoPessoa ep = findEnderecoPessoa(idPessoa);
		if(ep != null){
			TypedFlatMap result = new TypedFlatMap();
			result.put("municipio.unidadeFederativa.idUnidadeFederativa",ep.getMunicipio().getUnidadeFederativa().getIdUnidadeFederativa());
			result.put("municipio.unidadeFederativa.pais.idPais",ep.getMunicipio().getUnidadeFederativa().getPais().getIdPais());
			result.put("municipio.unidadeFederativa.pais.nmPais",ep.getMunicipio().getUnidadeFederativa().getPais().getNmPais());
			
			if( ep.getMunicipio().getUnidadeFederativa().getPais().getZona() != null ){			
				result.put("municipio.unidadeFederativa.pais.zona.idZona",ep.getMunicipio().getUnidadeFederativa().getPais().getZona().getIdZona());
				result.put("municipio.unidadeFederativa.pais.zona.dsZona",ep.getMunicipio().getUnidadeFederativa().getPais().getZona().getDsZona());
			}
			return result;
		}
		return null;
	}
    
    /**
     * @author José Rodrigo Moraes
     * @since  16/08/2006
     * 
     * Busca o endereço padrão da pessoa informada
     * 
     * @param idPessoa Identificador da pessoa
     * @return Endereço padrão da pessoa
     */
    public EnderecoPessoa findEnderecoPessoa(Long idPessoa) {
		return enderecoPessoaService.findEnderecoPessoaPadrao(idPessoa);
	}    
    
    /**
     * @author José Rodrigo Moraes
     * @since  16/08/2006
     * 
     * Busca os municípios de acordo com a filial
     * 
     * @param criteria Dados de pesquisa
     * @return Lista de municípios
     */
    public List findLookupMunicipioFilial(Map criteria){
		FilterList filter = new FilterList(municipioFilialService.findLookup(criteria)) {
			public Map filterItem(Object item) {
				MunicipioFilial mf = (MunicipioFilial)item;				
				TypedFlatMap typedFlatMap = new TypedFlatMap();
				
				typedFlatMap.put("municipio.idMunicipio",mf.getMunicipio().getIdMunicipio());
				typedFlatMap.put("municipio.nmMunicipio",mf.getMunicipio().getNmMunicipio());
				typedFlatMap.put("municipio.unidadeFederativa.idUnidadeFederativa",mf.getMunicipio().getUnidadeFederativa().getIdUnidadeFederativa());
				typedFlatMap.put("municipio.unidadeFederativa.pais.idPais",mf.getMunicipio().getUnidadeFederativa().getPais().getIdPais());
				typedFlatMap.put("municipio.unidadeFederativa.pais.nmPais",mf.getMunicipio().getUnidadeFederativa().getPais().getNmPais());
				
				if( mf.getMunicipio().getUnidadeFederativa().getPais().getZona() != null ){
					typedFlatMap.put("municipio.unidadeFederativa.pais.zona.idZona",mf.getMunicipio().getUnidadeFederativa().getPais().getZona().getIdZona());
					typedFlatMap.put("municipio.unidadeFederativa.pais.zona.dsZona",mf.getMunicipio().getUnidadeFederativa().getPais().getZona().getDsZona());
				}
				
				typedFlatMap.put("filial.idFilial",mf.getFilial().getIdFilial());
				typedFlatMap.put("filial.sgFilial",mf.getFilial().getSgFilial());
				typedFlatMap.put("filial.pessoa.nmFantasia",mf.getFilial().getPessoa().getNmFantasia());
				
				return typedFlatMap;
			}
		};
		return (List)filter.doFilter();
	}
    
    /**
     * @author José Rodrigo Moraes
     * @since 18/08/2006
     * 
     * Busca os dados de aeroportos para a lookup de Aeroporto
     * 
     * @param criteria Critérios da pesquisa
     * @return Lista de Aeroportos
     */
    public List findLookupAeroporto(Map criteria) {
    	List l = aeroportoService.findLookup(criteria);
    	List retorno = new ArrayList();
    	if(l != null && !l.isEmpty()){
    		
    		TypedFlatMap tfm = null;
    		
    		for (Iterator iter = l.iterator(); iter.hasNext();) {
				Aeroporto aeroporto = (Aeroporto) iter.next();
				
				tfm = new TypedFlatMap();
				tfm.put("idAeroporto", aeroporto.getIdAeroporto());
				tfm.put("sgAeroporto", aeroporto.getSgAeroporto());
				tfm.put("pessoa.nmPessoa",aeroporto.getPessoa().getNmPessoa());
				tfm.put("endereco", findEndereco(tfm.getLong("idAeroporto")));
				retorno.add(tfm);
			}
    		
    	}
    	return retorno;
    }
    
    public List findTipoLocalizacao(Map criteria){
		return tipoLocalizacaoMunicipioService.find(criteria);
	}    
    
    //-----------------------------------------------------
    
    /**
     * @author José Rodrigo Moraes
     * @since 24/08/2006
     * 
	 * Valida se o usuário tem permissão de acesso a filial responsável
	 * operacional pelo cliente
	 * 
	 * @param idFilial Identificador da filial responsável operacional pelo cliente
	 * @return <code>true</code> se o usuário possui permissão, caso contrário retorna <code>false</code>
	 */
	public Boolean validatePermissao(Long idFilial) {
    	return usuarioService.validateAcessoFilialRegionalUsuario(idFilial);
    }
    
    public void setEnderecoPessoaService(EnderecoPessoaService enderecoPessoaService) {
		this.enderecoPessoaService = enderecoPessoaService;
	}
	public void setMunicipioFilialService(
			MunicipioFilialService municipioFilialService) {
		this.municipioFilialService = municipioFilialService;
	}
	public void setPaisService(PaisService paisService) {
		this.paisService = paisService;
	}
	public void setUnidadeFederativaService(
			UnidadeFederativaService unidadeFederativaService) {
		this.unidadeFederativaService = unidadeFederativaService;
	}
	public void setZonaService(ZonaService zonaService) {
		this.zonaService = zonaService;
	}	
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public void setUsuarioService(UsuarioService usuarioService) {
		this.usuarioService = usuarioService;
	}
    

}
