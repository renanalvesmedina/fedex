package com.mercurio.lms.vendas.action;

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.report.ReportActionSupport;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.service.UsuarioService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.RegionalFilialService;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.report.ClienteTabelaDesatualizadaAnaliticoService;
import com.mercurio.lms.vendas.report.ClienteTabelaDesatualizadaSinteticoService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.vendas.clientesTabelasAntigasAction"
 */

public class ClientesTabelasAntigasAction extends ReportActionSupport {
	
	private ClienteTabelaDesatualizadaAnaliticoService analiticoService;
	private ClienteTabelaDesatualizadaSinteticoService sinteticoService;
	private UsuarioService usuarioService;
    
	@Override
	public java.io.File execute(TypedFlatMap parameters) throws Exception {
		String tipoRel = parameters.getString("tipo");
		if("a".equalsIgnoreCase(tipoRel)){
			this.reportServiceSupport = analiticoService;
		}else if("s".equalsIgnoreCase(tipoRel)){
			this.reportServiceSupport = sinteticoService; 
		}
		return super.execute(parameters);
	}

	/**
	 * Find para combo de Regional
	 * @param criterios
	 * @return
	 */
	public List findRegional(Map criterios){
		return SessionUtils.getRegionaisFiliaisUsuarioLogado();
    }
	
	/**
	 * Find para a lookup de Filial
	 * @param criteria
	 * @return
	 */
	public List findFilial(TypedFlatMap  criteria){
		return filialService.findLookupBySgFilial(criteria.getString("sgFilial"),criteria.getString("tpAcesso"));
	}

	
	public List findLookupFilial(Map criteria){
        return filialService.findLookupFilial(criteria);
    }
	
    public List findRegionalFilial(TypedFlatMap criteria) {
		String sgFilial = criteria.getString("sgFilial");
		Long idRegional = criteria.getLong("regionalFiliais.regional.idRegional");
		List result = regionalFilialService.findBySgFilialIdRegionalUsuarioLogado(sgFilial,idRegional);
		if(!result.isEmpty()){
			for(Iterator it = result.iterator();it.hasNext();){
				Map m = (Map)it.next();
				Map m1 = new HashMap();
				m1.put("nmFantasia",m.get("nmFantasia"));
				m.put("pessoa",m1);
			}
		}
		return result;
	}

	public TypedFlatMap findDadosDefault() {
		TypedFlatMap result = new TypedFlatMap();

		Filial filial = SessionUtils.getFilialSessao();
		result.put("idFilial", filial.getIdFilial());
		result.put("sgFilial", filial.getSgFilial());
		result.put("nmFilial", filial.getPessoa().getNmFantasia());

		Map regionalMap = regionalFilialService.findRegionalByIdFilial(filial.getIdFilial());
		if(regionalMap != null) {
			result.put("idRegional", regionalMap.get("idRegional"));
			result.put("siglaDescricaoRegional", regionalMap.get("sgRegional") + " - " + regionalMap.get("dsRegional"));
		}

		return result;
	}
	
	public List findPromotor(TypedFlatMap params){
		return usuarioService.findLookupFuncionarioPromotor(params.getString("nrMatricula"));
	}

    private RegionalFilialService regionalFilialService;
	private FilialService filialService;

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public void setRegionalFilialService(RegionalFilialService regionalFilialService) {
		this.regionalFilialService = regionalFilialService;
	}

	public void setAnaliticoService(
			ClienteTabelaDesatualizadaAnaliticoService analiticoService) {
		this.analiticoService = analiticoService;
	}

	public void setSinteticoService(
			ClienteTabelaDesatualizadaSinteticoService sinteticoService) {
		this.sinteticoService = sinteticoService;
	}

	public void setUsuarioService(UsuarioService usuarioService) {
		this.usuarioService = usuarioService;
	}
}
