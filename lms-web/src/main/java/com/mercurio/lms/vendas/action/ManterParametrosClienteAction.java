package com.mercurio.lms.vendas.action;

import java.io.Serializable;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.FilterList;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.EnderecoPessoa;
import com.mercurio.lms.configuracoes.model.service.EnderecoPessoaService;
import com.mercurio.lms.configuracoes.model.service.ParametroGeralService;
import com.mercurio.lms.configuracoes.model.service.ServicoService;
import com.mercurio.lms.configuracoes.model.service.UsuarioService;
import com.mercurio.lms.expedicao.util.ConstantesExpedicao;
import com.mercurio.lms.municipios.model.Aeroporto;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.Municipio;
import com.mercurio.lms.municipios.model.MunicipioFilial;
import com.mercurio.lms.municipios.model.Pais;
import com.mercurio.lms.municipios.model.TipoLocalizacaoMunicipio;
import com.mercurio.lms.municipios.model.UnidadeFederativa;
import com.mercurio.lms.municipios.model.Zona;
import com.mercurio.lms.municipios.model.service.AeroportoService;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.GrupoClassificacaoFilialService;
import com.mercurio.lms.municipios.model.service.MunicipioFilialService;
import com.mercurio.lms.municipios.model.service.PaisService;
import com.mercurio.lms.municipios.model.service.TipoLocalizacaoMunicipioService;
import com.mercurio.lms.municipios.model.service.UnidadeFederativaService;
import com.mercurio.lms.municipios.model.service.ZonaService;
import com.mercurio.lms.tabelaprecos.model.GrupoRegiao;
import com.mercurio.lms.tabelaprecos.model.TabelaPreco;
import com.mercurio.lms.tabelaprecos.model.service.LimiteDescontoService;
import com.mercurio.lms.tabelaprecos.model.service.ParcelaPrecoService;
import com.mercurio.lms.tabelaprecos.model.service.SubtipoTabelaPrecoService;
import com.mercurio.lms.tabelaprecos.model.service.TabelaPrecoService;
import com.mercurio.lms.tabelaprecos.util.ConstantesTabelaPrecos;
import com.mercurio.lms.util.BigDecimalUtils;
import com.mercurio.lms.util.CompareUtils;
import com.mercurio.lms.util.IntegerUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.JTFormatUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.ParametroCliente;
import com.mercurio.lms.vendas.model.TabelaDivisaoCliente;
import com.mercurio.lms.vendas.model.service.ClienteService;
import com.mercurio.lms.vendas.model.service.DivisaoClienteService;
import com.mercurio.lms.vendas.model.service.ParametroClienteService;
import com.mercurio.lms.vendas.model.service.TabelaDivisaoClienteService;

/**
 * Generated by: ADSM ActionGenerator
 *
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.vendas.manterParametrosClienteAction"
 */

public class ManterParametrosClienteAction extends CrudAction {

	private ClienteService clienteService;
	private DivisaoClienteService divisaoClienteService;
	private LimiteDescontoService limiteDescontoService;
	private ParametroGeralService parametroGeralService;
	private ParcelaPrecoService parcelaPrecoService;
	private ServicoService servicoService;
	private TabelaDivisaoClienteService tabelaDivisaoClienteService;
	private TabelaPrecoService tabelaPrecoService;
	private UsuarioService usuarioService;
	private SubtipoTabelaPrecoService subtipoTabelaPrecoService;
	private FilialService filialService;
	private EnderecoPessoaService enderecoPessoaService;
	private AeroportoService aeroportoService;
	private ZonaService zonaService;
	private PaisService paisService;
	private UnidadeFederativaService unidadeFederativaService;
	private MunicipioFilialService municipioFilialService;
	private TipoLocalizacaoMunicipioService tipoLocalizacaoMunicipioService;
	private GrupoClassificacaoFilialService grupoClassificacaoFilialService;

	public ResultSetPage findPaginated(TypedFlatMap criteria) {
		return getParametroClienteService().findPaginated(criteria);
	}

	public Integer getRowCount(TypedFlatMap criteria) {
		return getParametroClienteService().getRowCount(criteria);
	}

	public TypedFlatMap getDataHoje() {
		TypedFlatMap tfm = new TypedFlatMap();
		tfm.put("dataAtual", JTFormatUtils.format(JTDateTimeUtils.getDataAtual(), JTFormatUtils.DEFAULT, JTFormatUtils.YEARMONTHDAY));
		return tfm;
	}
	
	
	public void setGrupoClassificacaoFilialService(GrupoClassificacaoFilialService grupoClassificacaoFilialService) {
		this.grupoClassificacaoFilialService = grupoClassificacaoFilialService;
	}
	
	public void removeById(java.lang.Long id) {
		getParametroClienteService().removeById(id);
	}

	public List findDivisaoCombo(TypedFlatMap criteria) {
		return getDivisaoClienteService().findByIdCliente(criteria.getLong("cliente.idCliente"));
	}

	public List findClienteLookup(TypedFlatMap criteria) {
		return clienteService.findLookupCliente(criteria.getString("pessoa.nrIdentificacao"));
	}

	public List findTabelaLookup(Map criteria){
		return getTabelaPrecoService().findLookup(criteria);
	}

	public List findServicoCombo(Map criteria){
		return getServicoService().find(criteria);
	}

	public List findTabelaDivisaoClienteCombo(TypedFlatMap criteria) {
		List result = new ArrayList();
		Long idDivisao = null;
		try {
			idDivisao = criteria.getLong("divisaoCliente.idDivisaoCliente");
		} catch(NumberFormatException nfe) {
			return Collections.EMPTY_LIST;		
		}
		List list = getTabelaDivisaoClienteService().findTabelaDivisaoClienteComboByDivisaoWithServico(idDivisao);
		for(Iterator it=list.iterator();it.hasNext();) {
			TabelaDivisaoCliente tdc = (TabelaDivisaoCliente)it.next();
			String aux = tdc.getTabelaPreco().getTabelaPrecoString();
			if(tdc.getTabelaPreco().getDsDescricao()!=null && !tdc.getTabelaPreco().getDsDescricao().toString().equals("")) {
				aux = aux + " - " + tdc.getTabelaPreco().getDsDescricao();
			}
			if(tdc.getServico()!=null && tdc.getServico().getDsServico()!=null && !tdc.getServico().getDsServico().toString().equals("")) {
				aux = aux + " - " + tdc.getServico().getDsServico();
			}
			Map tdcMap = new HashMap();
			tdcMap.put("idTabelaDivisaoCliente",tdc.getIdTabelaDivisaoCliente());
			//
			Map tpMap = new HashMap();
			tpMap.put("idTabelaPreco",tdc.getTabelaPreco().getIdTabelaPreco());
			tpMap.put("tabelaPrecoStringDescricao",aux);
			//		
			Map mMap = new HashMap();
			mMap.put("sgMoeda",tdc.getTabelaPreco().getMoeda().getSiglaSimbolo());
			mMap.put("dsSimbolo",tdc.getTabelaPreco().getMoeda().getSiglaSimbolo());
			tpMap.put("moeda",mMap);
			//
			Map stpMap = new HashMap();
			stpMap.put("idSubtipoTabelaPreco",tdc.getTabelaPreco().getSubtipoTabelaPreco().getIdSubtipoTabelaPreco());
			tpMap.put("subtipoTabelaPreco",stpMap);
			//
			Map ttpMap = new HashMap();
			ttpMap.put("tpTipoTabelaPreco",tdc.getTabelaPreco().getTipoTabelaPreco().getTpTipoTabelaPreco().getValue());
			tpMap.put("tipoTabelaPreco",ttpMap);
			tdcMap.put("tabelaPreco",tpMap);
			result.add(tdcMap);
		}
		return result;
	}

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		getParametroClienteService().removeByIds(ids);
	}
	public Map findById(java.lang.Long id) {
		Map<String, Object> bean = getParametroClienteService().findByIdMap(id);		
		return bean; 
	}

	public Serializable store(TypedFlatMap criteria) {
		ParametroCliente pc = new ParametroCliente();
		
		pc.setIdParametroCliente(criteria.getLong("idParametroCliente"));
		pc.setDsEspecificacaoRota(criteria.getString("dsEspecificacaoRota"));
		pc.setTpSituacaoParametro(criteria.getDomainValue("tpSituacaoParametro"));
		pc.setDtVigenciaInicial(criteria.getYearMonthDay("dtVigenciaInicial"));
		pc.setDtVigenciaFinal(criteria.getYearMonthDay("dtVigenciaFinal"));
		pc.setTpIndicadorMinFretePeso(criteria.getDomainValue("tpIndicadorMinFretePeso"));
		pc.setVlMinFretePeso(criteria.getBigDecimal("vlMinFretePeso"));
		pc.setTpIndicadorPercMinimoProgr(criteria.getDomainValue("tpIndicadorPercMinimoProgr"));
		pc.setVlPercMinimoProgr(criteria.getBigDecimal("vlPercMinimoProgr"));
		pc.setTpIndicadorFretePeso(criteria.getDomainValue("tpIndicadorFretePeso"));
		pc.setVlFretePeso(criteria.getBigDecimal("vlFretePeso"));
		pc.setVlMinimoFreteQuilo(criteria.getBigDecimal("vlMinimoFreteQuilo"));
		pc.setBlPagaPesoExcedente(criteria.getBoolean("blPagaPesoExcedente"));
		pc.setTpTarifaMinima(criteria.getDomainValue("tpTarifaMinima"));
		pc.setVlTarifaMinima(criteria.getBigDecimal("vlTarifaMinima"));
		pc.setVlFreteVolume(criteria.getBigDecimal("vlFreteVolume"));

		/*Solicitacao para o branch RPP - 01.04.01.07*/
		pc.setBlPagaCubagem(Boolean.TRUE);
		pc.setPcPagaCubagem(BigDecimalUtils.HUNDRED);
		
		pc.setTpIndicVlrTblEspecifica(criteria.getDomainValue("tpIndicVlrTblEspecifica"));
		pc.setVlTblEspecifica(criteria.getBigDecimal("vlTblEspecifica"));
		pc.setTpIndicadorAdvalorem(criteria.getDomainValue("tpIndicadorAdvalorem"));
		pc.setVlAdvalorem(criteria.getBigDecimal("vlAdvalorem"));
		pc.setTpIndicadorAdvalorem2(criteria.getDomainValue("tpIndicadorAdvalorem2"));
		pc.setVlAdvalorem2(criteria.getBigDecimal("vlAdvalorem2"));
		pc.setTpIndicadorValorReferencia(criteria.getDomainValue("tpIndicadorValorReferencia"));
		pc.setVlValorReferencia(criteria.getBigDecimal("vlValorReferencia"));
		pc.setPcFretePercentual(criteria.getBigDecimal("pcFretePercentual"));
		pc.setVlMinimoFretePercentual(criteria.getBigDecimal("vlMinimoFretePercentual"));
		pc.setVlToneladaFretePercentual(criteria.getBigDecimal("vlToneladaFretePercentual"));
		pc.setPsFretePercentual(criteria.getBigDecimal("psFretePercentual"));
		pc.setTpIndicadorPercentualGris(criteria.getDomainValue("tpIndicadorPercentualGris"));
		pc.setVlPercentualGris(criteria.getBigDecimal("vlPercentualGris"));
		pc.setTpIndicadorMinimoGris(criteria.getDomainValue("tpIndicadorMinimoGris"));
		pc.setVlMinimoGris(criteria.getBigDecimal("vlMinimoGris"));
		pc.setTpIndicadorPercentualTrt(criteria.getDomainValue("tpIndicadorPercentualTrt"));
		pc.setVlPercentualTrt(criteria.getBigDecimal("vlPercentualTrt"));
		pc.setTpIndicadorMinimoTrt(criteria.getDomainValue("tpIndicadorMinimoTrt"));
		pc.setVlMinimoTrt(criteria.getBigDecimal("vlMinimoTrt"));
		pc.setTpIndicadorPercentualTde(criteria.getDomainValue("tpIndicadorPercentualTde"));
		pc.setVlPercentualTde(criteria.getBigDecimal("vlPercentualTde"));
		pc.setTpIndicadorMinimoTde(criteria.getDomainValue("tpIndicadorMinimoTde"));
		pc.setVlMinimoTde(criteria.getBigDecimal("vlMinimoTde"));

		pc.setTpIndicadorPedagio(criteria.getDomainValue("tpIndicadorPedagio"));
		pc.setVlPedagio(criteria.getBigDecimal("vlPedagio"));
		pc.setPcDescontoFreteTotal(criteria.getBigDecimal("pcDescontoFreteTotal"));
		pc.setPcCobrancaReentrega(criteria.getBigDecimal("pcCobrancaReentrega"));
		pc.setPcCobrancaDevolucoes(criteria.getBigDecimal("pcCobrancaDevolucoes"));

		String key = "clienteByIdClienteRedespacho.idCliente";
		if(criteria.getLong(key)!=null) {
			Cliente cr = new Cliente();
			cr.setIdCliente(criteria.getLong(key));
			pc.setClienteByIdClienteRedespacho(cr);
		}

		key = "filialByIdFilialMercurioRedespacho.idFilial";
		if(criteria.getLong(key)!=null) {
			Filial fr = new Filial();
			fr.setIdFilial(criteria.getLong(key));
			pc.setFilialByIdFilialMercurioRedespacho(fr);
		}

		key = "tabelaDivisaoCliente.idTabelaDivisaoCliente";
		if(criteria.getLong(key)!=null) {
			TabelaDivisaoCliente tdc = new TabelaDivisaoCliente();
			tdc.setIdTabelaDivisaoCliente(criteria.getLong(key));
			pc.setTabelaDivisaoCliente(tdc);
		}

		key = "tabelaDivisaoCliente.tabelaPreco.idTabelaPreco";
		if(criteria.getLong(key)!=null) {
			TabelaPreco tabelaPreco = new TabelaPreco();
			tabelaPreco.setIdTabelaPreco(criteria.getLong(key));
			pc.setTabelaPreco(tabelaPreco);
		}

		key = "zonaByIdZonaOrigem.idZona";
		if(criteria.getLong(key)!=null) {
			Zona zo = new Zona();
			zo.setIdZona(criteria.getLong(key));
			pc.setZonaByIdZonaOrigem(zo);
		}

		key = "paisByIdPaisOrigem.idPais";
		if(criteria.getLong(key)!=null) {
			Pais po = new Pais();
			po.setIdPais(criteria.getLong(key));
			pc.setPaisByIdPaisOrigem(po);
		}

		key = "unidadeFederativaByIdUfOrigem.idUnidadeFederativa";
		if(criteria.getLong(key)!=null) {
			UnidadeFederativa ufo = new UnidadeFederativa();
			ufo.setIdUnidadeFederativa(criteria.getLong(key));
			pc.setUnidadeFederativaByIdUfOrigem(ufo);
		}

		key = "filialByIdFilialOrigem.idFilial";
		if(criteria.getLong(key)!=null) {
			Filial fo = new Filial();
			fo.setIdFilial(criteria.getLong(key));
			pc.setFilialByIdFilialOrigem(fo);
		}

		key = "municipioByIdMunicipioOrigem.idMunicipio";
		if(criteria.getLong(key)!=null) {
			Municipio mo = new Municipio();
			mo.setIdMunicipio(criteria.getLong(key));
			pc.setMunicipioByIdMunicipioOrigem(mo);
		}

		key = "aeroportoByIdAeroportoOrigem.idAeroporto";
		if(criteria.getLong(key)!=null) {
			Aeroporto ao = new Aeroporto();
			ao.setIdAeroporto(criteria.getLong(key));
			pc.setAeroportoByIdAeroportoOrigem(ao);
		}

		key = "tipoLocalizacaoMunicipioByIdTipoLocalizacaoOrigem.idTipoLocalizacaoMunicipio";
		if(criteria.getLong(key)!=null) {
			TipoLocalizacaoMunicipio tlmo = new TipoLocalizacaoMunicipio();
			tlmo.setIdTipoLocalizacaoMunicipio(criteria.getLong(key));
			pc.setTipoLocalizacaoMunicipioByIdTipoLocalizacaoOrigem(tlmo);
		}

		key = "grupoRegiaoOrigem.idGrupoRegiao";
		if(criteria.getLong(key)!=null) {
			GrupoRegiao grupoOrigem = new GrupoRegiao();
			grupoOrigem.setIdGrupoRegiao(criteria.getLong(key));
			pc.setGrupoRegiaoOrigem(grupoOrigem);
		}

		key = "zonaByIdZonaDestino.idZona";
		if(criteria.getLong(key)!=null) {
			Zona zd = new Zona();
			zd.setIdZona(criteria.getLong(key));
			pc.setZonaByIdZonaDestino(zd);
		}

		key = "paisByIdPaisDestino.idPais";
		if(criteria.getLong(key)!=null) {
			Pais pd = new Pais();
			pd.setIdPais(criteria.getLong(key));
			pc.setPaisByIdPaisDestino(pd);
		}

		key = "unidadeFederativaByIdUfDestino.idUnidadeFederativa";
		if(criteria.getLong(key)!=null) {
			UnidadeFederativa ufd = new UnidadeFederativa();
			ufd.setIdUnidadeFederativa(criteria.getLong(key));
			pc.setUnidadeFederativaByIdUfDestino(ufd);
		}

		key = "filialByIdFilialDestino.idFilial";
		if(criteria.getLong(key)!=null) {
			Filial fd = new Filial();
			fd.setIdFilial(criteria.getLong(key));
			pc.setFilialByIdFilialDestino(fd);
		}

		key = "municipioByIdMunicipioDestino.idMunicipio";
		if(criteria.getLong(key)!=null) {
			Municipio md = new Municipio();
			md.setIdMunicipio(criteria.getLong(key));
			pc.setMunicipioByIdMunicipioDestino(md);
		}

		key = "aeroportoByIdAeroportoDestino.idAeroporto";
		if(criteria.getLong(key)!=null) {
			Aeroporto ad = new Aeroporto();
			ad.setIdAeroporto(criteria.getLong(key));
			pc.setAeroportoByIdAeroportoDestino(ad);
		}

		key = "tipoLocalizacaoMunicipioByIdTipoLocalizacaoDestino.idTipoLocalizacaoMunicipio";
		if(criteria.getLong(key)!=null) {
			TipoLocalizacaoMunicipio tlmd = new TipoLocalizacaoMunicipio();
			tlmd.setIdTipoLocalizacaoMunicipio(criteria.getLong(key));
			pc.setTipoLocalizacaoMunicipioByIdTipoLocalizacaoDestino(tlmd);
		}

		key = "grupoRegiaoDestino.idGrupoRegiao";
		if(criteria.getLong(key)!=null) {
			GrupoRegiao grupoDestino = new GrupoRegiao();
			grupoDestino.setIdGrupoRegiao(criteria.getLong(key));
			pc.setGrupoRegiaoDestino(grupoDestino);
		}
		
		// Validação para não incluir registros duplicados
		if (getParametroClienteService().validateParametroCliente(pc))
			throw new BusinessException("LMS-01115");
		
		return getParametroClienteService().store(pc);
	}

	public Map findPercentualTotalFrete(Map map) {
		Map resMap = new HashMap(1);
		String result = null;
		String param = (String)map.get("param");
		if("reentrega".equals(param)) {
			BigDecimal pcr = (BigDecimal)getParametroGeralService().findConteudoByNomeParametro("PercentualCobrancaReentrega",false);
			result = (new DecimalFormat("##0.00")).format(pcr);
		} else if("devolucoes".equals(param)) {
			BigDecimal pcd = (BigDecimal)getParametroGeralService().findConteudoByNomeParametro("PercentualCobrancaDevolucao",false);
			result = (new DecimalFormat("##0.00")).format(pcd);
		}
		resMap.put("result",result);
		return resMap;
	}

	/**
	 * Metodo necessario pois os metodos find alteram os parametros de entrada (dominios). 
	 * Segundo a arquitetura, esse comportamento de alterar o parametro de entrada dos metodos find está correto. 
	 * @param map
	 * @return
	 */
	public Map processMap4Find(Map map) {
		Object obj = map.get("tpTipoTabelaPreco");
		if(obj instanceof DomainValue) {
			DomainValue dv = (DomainValue)map.remove("tpTipoTabelaPreco");
			map.put("tpTipoTabelaPreco",dv.getValue());
			map.remove("tpIndicadorDesconto");
			map.put("tpIndicadorDesconto","P");
		}
		return map;
	}

	private Long getGrupoClassificacaoParametroGeral() {
		return Long.valueOf(getParametroGeralService().findConteudoByNomeParametro("IDGrupoClassificacaoDescontos", false).toString());
	}

	private Map findPcLimiteDesconto(Long idParcelaPreco, Long idUsuario, Long idSubtipoTabelaPreco, String tpTipoTabelaPreco, Long idFilial, Long idDivisaoGrupoClassificacao) {
		/** Busca Limite de Desconto pelo Usuario */
		BigDecimal pcLimiteDesconto = limiteDescontoService.findPcLimiteDesconto(idParcelaPreco, idSubtipoTabelaPreco, tpTipoTabelaPreco, ConstantesTabelaPrecos.TP_INDICADOR_DESCONTO_PARAMETRIZACAO, "A", idUsuario, null, null);
		Integer step = IntegerUtils.ZERO;
		if(pcLimiteDesconto != null && CompareUtils.ne(pcLimiteDesconto, BigDecimalUtils.HUNDRED)){
			step = IntegerUtils.ONE;
		}

		/** Busca Limite de Desconto pela Filial da Sessão */
		if(pcLimiteDesconto == null) {
			pcLimiteDesconto = limiteDescontoService.findPcLimiteDesconto(idParcelaPreco, idSubtipoTabelaPreco, tpTipoTabelaPreco, ConstantesTabelaPrecos.TP_INDICADOR_DESCONTO_PARAMETRIZACAO, "A", null, idFilial, null);
			step = Integer.valueOf(2);
		}

		/** Busca Limite de Desconto pelo Grupo de Classificação */
		if(pcLimiteDesconto == null) {
			pcLimiteDesconto = limiteDescontoService.findPcLimiteDesconto(idParcelaPreco, idSubtipoTabelaPreco, tpTipoTabelaPreco, ConstantesTabelaPrecos.TP_INDICADOR_DESCONTO_PARAMETRIZACAO, "A", null, null, idDivisaoGrupoClassificacao);
			step = Integer.valueOf(3);
		}

		/** Busca Limite de Desconto para toda Empresa */
		if(pcLimiteDesconto == null) {
			pcLimiteDesconto = limiteDescontoService.findPcLimiteDesconto(idParcelaPreco, idSubtipoTabelaPreco, tpTipoTabelaPreco, ConstantesTabelaPrecos.TP_INDICADOR_DESCONTO_PARAMETRIZACAO, "A", null, null, null);
			step = Integer.valueOf(4);
		}

		/** Caso não tenha encontrado nenhum Limite de Desconto, ou encontrado um com 100% de Desconto, LIBERA CAMPOS */
		if(pcLimiteDesconto == null || (pcLimiteDesconto != null && CompareUtils.eq(pcLimiteDesconto, BigDecimalUtils.HUNDRED))) {
			pcLimiteDesconto = BigDecimalUtils.HUNDRED;
			step = Integer.valueOf(5);
		}

		Map retorno = new HashMap(2);
		retorno.put("STEP", step);
		retorno.put("PC_LIMITE_DESCONTO", pcLimiteDesconto);

		return retorno;
	}

	public Map findLimitesDescontos(TypedFlatMap parameters) {
		Map retorno = new HashMap();
		Long idSubtipoTabelaPreco = parameters.getLong("idSubtipoTabelaPreco");
		String tpTipoTabelaPreco = parameters.getString("tpTipoTabelaPreco");
		Long idUsuario = SessionUtils.getUsuarioLogado().getIdUsuario();
		Long idFilial = SessionUtils.getFilialSessao().getIdFilial();
		Long idGrupoClassificacao = getGrupoClassificacaoParametroGeral();
		Long idDivisaoGrupoClassificacao = grupoClassificacaoFilialService.findIdDivisaoByFilialGrupoClassificacao(idFilial, idGrupoClassificacao);

		// busca o limite de descontos para o frete peso (ConstantesExpedicao.CD_FRETE_PESO)
		Long idParcelaPreco = parcelaPrecoService.findIdParcelaByCdParcelaPreco(ConstantesExpedicao.CD_FRETE_PESO);
		Map retornoLimiteDesconto = findPcLimiteDesconto(idParcelaPreco, idUsuario, idSubtipoTabelaPreco, tpTipoTabelaPreco, idFilial, idDivisaoGrupoClassificacao);
		retorno.put("pcLimiteDescontoFretePeso", retornoLimiteDesconto.get("PC_LIMITE_DESCONTO"));
		retorno.put("STEP_FRETE_PESO", retornoLimiteDesconto.get("STEP"));

		// busca o limite de descontos para o frete valor e frete percentual (ConstantesExpedicao.CD_FRETE_VALOR)
		idParcelaPreco = parcelaPrecoService.findIdParcelaByCdParcelaPreco(ConstantesExpedicao.CD_FRETE_VALOR);
		retornoLimiteDesconto = findPcLimiteDesconto(idParcelaPreco, idUsuario, idSubtipoTabelaPreco, tpTipoTabelaPreco, idFilial, idDivisaoGrupoClassificacao);
		retorno.put("pcLimiteDescontoFreteValor", retornoLimiteDesconto.get("PC_LIMITE_DESCONTO"));
		retorno.put("STEP_FRETE_VALOR", retornoLimiteDesconto.get("STEP"));

		// busca o limite de descontos para o grupo Total Frete (ConstantesExpedicao.CD_PEDAGIO)
		idParcelaPreco = parcelaPrecoService.findIdParcelaByCdParcelaPreco(ConstantesExpedicao.CD_TOTAL_FRETE);
		retornoLimiteDesconto = findPcLimiteDesconto(idParcelaPreco, idUsuario, idSubtipoTabelaPreco, tpTipoTabelaPreco, idFilial, idDivisaoGrupoClassificacao); 
		retorno.put("pcLimiteDescontoTotalFrete", retornoLimiteDesconto.get("PC_LIMITE_DESCONTO"));
		retorno.put("STEP_TOTAL_FRETE", retornoLimiteDesconto.get("STEP"));

		// busca o limite de descontos para o grupo GRIS (ConstantesExpedicao.CD_GRIS)
		idParcelaPreco = parcelaPrecoService.findIdParcelaByCdParcelaPreco(ConstantesExpedicao.CD_GRIS);
		retornoLimiteDesconto = findPcLimiteDesconto(idParcelaPreco, idUsuario, idSubtipoTabelaPreco, tpTipoTabelaPreco, idFilial, idDivisaoGrupoClassificacao);
		retorno.put("pcLimiteDescontoGris", retornoLimiteDesconto.get("PC_LIMITE_DESCONTO"));

		// busca o limite de descontos para o grupo TRT (ConstantesExpedicao.CD_TRT)
		idParcelaPreco = parcelaPrecoService.findIdParcelaByCdParcelaPreco(ConstantesExpedicao.CD_TRT);
		retornoLimiteDesconto = findPcLimiteDesconto(idParcelaPreco, idUsuario, idSubtipoTabelaPreco, tpTipoTabelaPreco, idFilial, idDivisaoGrupoClassificacao);
		retorno.put("pcLimiteDescontoTrt", retornoLimiteDesconto.get("PC_LIMITE_DESCONTO"));
		
		// busca o limite de descontos para o grupo Pedágio (ConstantesExpedicao.CD_PEDAGIO)
		idParcelaPreco = parcelaPrecoService.findIdParcelaByCdParcelaPreco(ConstantesExpedicao.CD_PEDAGIO);
		retornoLimiteDesconto = findPcLimiteDesconto(idParcelaPreco, idUsuario, idSubtipoTabelaPreco, tpTipoTabelaPreco, idFilial, idDivisaoGrupoClassificacao);
		retorno.put("pcLimiteDescontoPedagio", retornoLimiteDesconto.get("PC_LIMITE_DESCONTO"));

		// busca o limite de descontos para o grupo TDE (ConstantesExpedicao.CD_TDE)
		idParcelaPreco = parcelaPrecoService.findIdParcelaByCdParcelaPreco(ConstantesExpedicao.CD_TDE);
		retornoLimiteDesconto = findPcLimiteDesconto(idParcelaPreco, idUsuario, idSubtipoTabelaPreco, tpTipoTabelaPreco, idFilial, idDivisaoGrupoClassificacao); 
		retorno.put("pcLimiteDescontoTde", retornoLimiteDesconto.get("PC_LIMITE_DESCONTO"));

		return retorno;
	}

	public void setParametroClienteService(ParametroClienteService parametroClienteService) {
		this.defaultService = parametroClienteService;
	}
	public ParametroClienteService getParametroClienteService() {
		return (ParametroClienteService)this.defaultService;
	}

	public DivisaoClienteService getDivisaoClienteService() {
		return divisaoClienteService;
	}
	public void setDivisaoClienteService(DivisaoClienteService divisaoClienteService) {
		this.divisaoClienteService = divisaoClienteService;
	}

	public TabelaDivisaoClienteService getTabelaDivisaoClienteService() {
		return tabelaDivisaoClienteService;
	}
	public void setTabelaDivisaoClienteService(TabelaDivisaoClienteService tabelaDivisaoClienteService) {
		this.tabelaDivisaoClienteService = tabelaDivisaoClienteService;
	}

	public ClienteService getClienteService() {
		return this.clienteService;
	}
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}

	public void setTabelaPrecoService(TabelaPrecoService tabelaPrecoService) {
		this.tabelaPrecoService = tabelaPrecoService;
	}
	public TabelaPrecoService getTabelaPrecoService() {
		return this.tabelaPrecoService;
	}

	public void setParcelaPrecoService(ParcelaPrecoService parcelaPrecoService) {
		this.parcelaPrecoService = parcelaPrecoService;
	}
	public ParcelaPrecoService getParcelaPrecoService() {
		return this.parcelaPrecoService;
	}

	public ServicoService getServicoService() {
		return this.servicoService;
	}
	public void setServicoService(ServicoService servicoService) {
		this.servicoService = servicoService;
	}

	public ParametroGeralService getParametroGeralService() {
		return parametroGeralService;
	}
	public void setParametroGeralService(ParametroGeralService parametroGeralService) {
		this.parametroGeralService = parametroGeralService;
	}

	public UsuarioService getUsuarioService() {
		return usuarioService;
	}
	public void setUsuarioService(UsuarioService usuarioService) {
		this.usuarioService = usuarioService;
	}

	public LimiteDescontoService getLimiteDescontoService() {
		return limiteDescontoService;
	}
	public void setLimiteDescontoService(LimiteDescontoService limiteDescontoService) {
		this.limiteDescontoService = limiteDescontoService;
	}

	public SubtipoTabelaPrecoService getSubtipoTabelaPrecoService() {
		return subtipoTabelaPrecoService;
	}
	public void setSubtipoTabelaPrecoService(SubtipoTabelaPrecoService subtipoTabelaPrecoService) {
		this.subtipoTabelaPrecoService = subtipoTabelaPrecoService;
	}

	public TipoLocalizacaoMunicipioService getTipoLocalizacaoMunicipioService() {
		return tipoLocalizacaoMunicipioService;
	}
	public void setTipoLocalizacaoMunicipioService(TipoLocalizacaoMunicipioService tipoLocalizacaoMunicipioService) {
		this.tipoLocalizacaoMunicipioService = tipoLocalizacaoMunicipioService;
	}

	public MunicipioFilialService getMunicipioFilialService() {
		return municipioFilialService;
	}
	public void setMunicipioFilialService(MunicipioFilialService municipioFilialService) {
		this.municipioFilialService = municipioFilialService;
	}

	public UnidadeFederativaService getUnidadeFederativaService() {
		return unidadeFederativaService;
	}
	public void setUnidadeFederativaService(UnidadeFederativaService unidadeFederativaService) {
		this.unidadeFederativaService = unidadeFederativaService;
	}

	public PaisService getPaisService() {
		return paisService;
	}
	public void setPaisService(PaisService paisService) {
		this.paisService = paisService;
	}

	public ZonaService getZonaService() {
		return zonaService;
	}
	public void setZonaService(ZonaService zonaService) {
		this.zonaService = zonaService;
	}

	public AeroportoService getAeroportoService() {
		return aeroportoService;
	}
	public void setAeroportoService(AeroportoService aeroportoService) {
		this.aeroportoService = aeroportoService;
	}

	public EnderecoPessoaService getEnderecoPessoaService() {
		return enderecoPessoaService;
	}
	public void setEnderecoPessoaService(EnderecoPessoaService enderecoPessoaService) {
		this.enderecoPessoaService = enderecoPessoaService;
	}

	public FilialService getFilialService() {
		return filialService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public List findZona(Map criteria){
		return getZonaService().find(criteria);
	}

	public List findLookupPais(Map criteria){
		return getPaisService().findLookup(criteria);
	}

	public List findUnidadeFederativaByPais(Map criteria){
		return getUnidadeFederativaService().findByPais(criteria);
	}

	public List findLookupMunicipioFilial(Map criteria){
		FilterList filter = new FilterList(getMunicipioFilialService().findLookup(criteria)) {
			public Map filterItem(Object item) {
				MunicipioFilial mf = (MunicipioFilial)item;
				TypedFlatMap typedFlatMap = new TypedFlatMap();
				typedFlatMap.put("municipio.idMunicipio",mf.getMunicipio().getIdMunicipio());
				typedFlatMap.put("municipio.nmMunicipio",mf.getMunicipio().getNmMunicipio());
				typedFlatMap.put("municipio.unidadeFederativa.idUnidadeFederativa",mf.getMunicipio().getUnidadeFederativa().getIdUnidadeFederativa());
				typedFlatMap.put("municipio.unidadeFederativa.pais.idPais",mf.getMunicipio().getUnidadeFederativa().getPais().getIdPais());
				typedFlatMap.put("municipio.unidadeFederativa.pais.nmPais",mf.getMunicipio().getUnidadeFederativa().getPais().getNmPais());
				
				if( mf.getMunicipio().getUnidadeFederativa().getPais().getZona() != null ){
					typedFlatMap.put("municipio.unidadeFederativa.pais.zona.idZona",mf.getMunicipio().getUnidadeFederativa().getPais().getZona().getIdZona());
					typedFlatMap.put("municipio.unidadeFederativa.pais.zona.dsZona",mf.getMunicipio().getUnidadeFederativa().getPais().getZona().getDsZona());
				}
				
				typedFlatMap.put("filial.idFilial",mf.getFilial().getIdFilial());
				typedFlatMap.put("filial.sgFilial",mf.getFilial().getSgFilial());
				typedFlatMap.put("filial.pessoa.nmFantasia",mf.getFilial().getPessoa().getNmFantasia());
				return typedFlatMap;
			}
		};
		return (List)filter.doFilter();
	}

	public List findTipoLocalizacao(Map criteria){
		return getTipoLocalizacaoMunicipioService().find(criteria);
	}

	public List findLookupFilial(TypedFlatMap criteria) {
		List filiais = getFilialService().findLookupBySgFilial(criteria.getString("sgFilial"), criteria.getString("tpAcesso"));
		if(filiais != null && filiais.size() == 1) {
			Map map = (Map)filiais.get(0);
			map.put("endereco", findEndereco((Long)map.get("idFilial")));
		}
		return filiais;
	}

	public TypedFlatMap findEndereco(Long idPessoa) {
		EnderecoPessoa ep = findEnderecoPessoa(idPessoa);
		if(ep != null){
			TypedFlatMap result = new TypedFlatMap();
			result.put("municipio.unidadeFederativa.idUnidadeFederativa",ep.getMunicipio().getUnidadeFederativa().getIdUnidadeFederativa());
			result.put("municipio.unidadeFederativa.pais.idPais",ep.getMunicipio().getUnidadeFederativa().getPais().getIdPais());
			result.put("municipio.unidadeFederativa.pais.nmPais",ep.getMunicipio().getUnidadeFederativa().getPais().getNmPais());
			
			if( ep.getMunicipio().getUnidadeFederativa().getPais().getZona() != null ){			
				result.put("municipio.unidadeFederativa.pais.zona.idZona",ep.getMunicipio().getUnidadeFederativa().getPais().getZona().getIdZona());
				result.put("municipio.unidadeFederativa.pais.zona.dsZona",ep.getMunicipio().getUnidadeFederativa().getPais().getZona().getDsZona());
			}
			
			return result;
		}
		return null;
	}

	public List findLookupAeroporto(Map criteria) {
			List l = getAeroportoService().findLookupAeroporto(criteria);
			if(l != null && l.size() == 1) {
				Map map = (Map)l.get(0);
				map.put("endereco", findEndereco((Long)map.get("idAeroporto")));
			}
			return l;
	 }

	public EnderecoPessoa findEnderecoPessoa(Long idPessoa) {
		return getEnderecoPessoaService().findEnderecoPessoaPadrao(idPessoa);
	}

	public Pais findPaisUsuarioLogado() {
		Map paisMap = getPaisService().findPaisUsuarioLogado();
		Pais pais = getPaisService().findById((Long)paisMap.get("idPais"));
		return pais;		
	}

}
