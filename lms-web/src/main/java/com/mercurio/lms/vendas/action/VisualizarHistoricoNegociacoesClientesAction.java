package com.mercurio.lms.vendas.action;

import java.text.DecimalFormat;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.FilterList;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.EnderecoPessoa;
import com.mercurio.lms.configuracoes.model.service.EnderecoPessoaService;
import com.mercurio.lms.municipios.model.MunicipioFilial;
import com.mercurio.lms.municipios.model.service.AeroportoService;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.MunicipioFilialService;
import com.mercurio.lms.municipios.model.service.PaisService;
import com.mercurio.lms.municipios.model.service.TipoLocalizacaoMunicipioService;
import com.mercurio.lms.municipios.model.service.UnidadeFederativaService;
import com.mercurio.lms.municipios.model.service.ZonaService;
import com.mercurio.lms.tabelaprecos.model.service.TabelaPrecoService;
import com.mercurio.lms.tabelaprecos.util.TabelaPrecoUtils;
import com.mercurio.lms.vendas.model.GeneralidadeCliente;
import com.mercurio.lms.vendas.model.service.ClienteService;
import com.mercurio.lms.vendas.model.service.DivisaoClienteService;
import com.mercurio.lms.vendas.model.service.GeneralidadeClienteService;
import com.mercurio.lms.vendas.model.service.ParametroClienteService;
import com.mercurio.lms.vendas.model.service.TaxaClienteService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.vendas.visualizarHistoricoNegociacoesClientesAction"
 */

public class VisualizarHistoricoNegociacoesClientesAction extends CrudAction {
	private ClienteService clienteService;
	private DivisaoClienteService divisaoClienteService;
	private ZonaService zonaService;
	private PaisService paisService;
	private UnidadeFederativaService unidadeFederativaService;
	private FilialService filialService;
	private EnderecoPessoaService enderecoPessoaService;
	private MunicipioFilialService municipioFilialService;
	private AeroportoService aeroportoService;
	private TipoLocalizacaoMunicipioService tipoLocalizacaoMunicipioService;
	private TaxaClienteService taxaClienteService;
	private GeneralidadeClienteService generalidadeClienteService;
	private TabelaPrecoService tabelaPrecoService;

	public List findClienteLookup(TypedFlatMap criteria) {
		return clienteService.findLookupCliente(criteria.getString("pessoa.nrIdentificacao"));
	}

	public List findDivisaoCombo(TypedFlatMap criteria) {
		return divisaoClienteService.findByIdCliente(criteria.getLong("cliente.idCliente"));
	}
	
	public List findLookupTabelaPreco(Map criteria) {
		return tabelaPrecoService.findLookup(criteria);
	}

	public List findZona(Map criteria){
		return zonaService.find(criteria);
	}

	public List findLookupPais(Map criteria){
		return paisService.findLookup(criteria);
	}

	public List findUnidadeFederativaByPais(Map criteria){
		return unidadeFederativaService.findByPais(criteria);
	}

	public List findLookupFilial(TypedFlatMap criteria) {
		List filiais = filialService.findLookupBySgFilial(criteria.getString("sgFilial"), criteria.getString("tpAcesso"));
		if(filiais != null && filiais.size() == 1) {
			Map map = (Map)filiais.get(0);
			map.put("endereco", findEndereco((Long)map.get("idFilial")));
		}
		return filiais;
	}

	public TypedFlatMap findEndereco(Long idPessoa) {
		EnderecoPessoa ep = findEnderecoPessoa(idPessoa);
		if(ep != null){
			TypedFlatMap result = new TypedFlatMap();
			result.put("municipio.unidadeFederativa.idUnidadeFederativa",ep.getMunicipio().getUnidadeFederativa().getIdUnidadeFederativa());
			result.put("municipio.unidadeFederativa.pais.idPais",ep.getMunicipio().getUnidadeFederativa().getPais().getIdPais());
			result.put("municipio.unidadeFederativa.pais.nmPais",ep.getMunicipio().getUnidadeFederativa().getPais().getNmPais());
			result.put("municipio.unidadeFederativa.pais.zona.idZona",ep.getMunicipio().getUnidadeFederativa().getPais().getZona().getIdZona());
			result.put("municipio.unidadeFederativa.pais.zona.dsZona",ep.getMunicipio().getUnidadeFederativa().getPais().getZona().getDsZona());
			return result;
		}
		return null;
	}
	
	public EnderecoPessoa findEnderecoPessoa(Long idPessoa) {
		return enderecoPessoaService.findEnderecoPessoaPadrao(idPessoa);
	}
	
	public List findLookupMunicipioFilial(Map criteria){
		FilterList filter = new FilterList(municipioFilialService.findLookup(criteria)) {
			public Map filterItem(Object item) {
				MunicipioFilial mf = (MunicipioFilial)item;
				TypedFlatMap typedFlatMap = new TypedFlatMap();
				typedFlatMap.put("municipio.idMunicipio",mf.getMunicipio().getIdMunicipio());
				typedFlatMap.put("municipio.nmMunicipio",mf.getMunicipio().getNmMunicipio());
				typedFlatMap.put("municipio.unidadeFederativa.idUnidadeFederativa",mf.getMunicipio().getUnidadeFederativa().getIdUnidadeFederativa());
				typedFlatMap.put("municipio.unidadeFederativa.pais.idPais",mf.getMunicipio().getUnidadeFederativa().getPais().getIdPais());
				typedFlatMap.put("municipio.unidadeFederativa.pais.nmPais",mf.getMunicipio().getUnidadeFederativa().getPais().getNmPais());
				typedFlatMap.put("municipio.unidadeFederativa.pais.zona.idZona",mf.getMunicipio().getUnidadeFederativa().getPais().getZona().getIdZona());
				typedFlatMap.put("municipio.unidadeFederativa.pais.zona.dsZona",mf.getMunicipio().getUnidadeFederativa().getPais().getZona().getDsZona());
				typedFlatMap.put("filial.idFilial",mf.getFilial().getIdFilial());
				typedFlatMap.put("filial.sgFilial",mf.getFilial().getSgFilial());
				typedFlatMap.put("filial.pessoa.nmFantasia",mf.getFilial().getPessoa().getNmFantasia());
				return typedFlatMap;
			}
		};
		return (List)filter.doFilter();
	}

	public List findLookupAeroporto(Map criteria) {
		List l = aeroportoService.findLookupAeroporto(criteria);
		if(l != null && l.size() == 1) {
			Map map = (Map)l.get(0);
			map.put("endereco", findEndereco((Long)map.get("idAeroporto")));
		}
		return l;
	}

	public List findTipoLocalizacao(Map criteria){
		return tipoLocalizacaoMunicipioService.find(criteria);
	}

	public ResultSetPage findPaginated(TypedFlatMap criteria) {
		this.prepareFindPaginatedCriteria(criteria);
		this.verifyParameters(criteria);
		ResultSetPage rsp = getParametroClienteService().findPaginatedHistoricoNegociacoes(criteria);
		List result = rsp.getList();

		for(Iterator it = result.iterator(); it.hasNext();) {
			Map map = (Map) it.next();
			
			String tpTipoTabelaPreco = "";
			Map mapTabelaPreco = (Map) map.get("tpTipoTabelaPreco");
			if(mapTabelaPreco != null) {
				tpTipoTabelaPreco = (String) mapTabelaPreco.get("value");
			}

			Integer nrVersaoTipoTabelaPreco = (Integer) map.get("nrVersao");
			String tpSubtipoTabelaPreco = (String) map.get("tpSubtipoTabelaPreco");

			String tabelaPrecoString = TabelaPrecoUtils.
				formatTabelaPrecoString(tpTipoTabelaPreco, nrVersaoTipoTabelaPreco, tpSubtipoTabelaPreco);

			map.put("tabelaPrecoString", tabelaPrecoString);
		}
		return rsp;
	}	

	public Integer getRowCount(TypedFlatMap criteria) {
		this.prepareFindPaginatedCriteria(criteria);
		return getParametroClienteService().getRowCountHistoricoNegociacoes(criteria);
	}
	
	public ResultSetPage findPaginatedTaxas(TypedFlatMap criteria) {
		return taxaClienteService.findPaginated(criteria);
	}

	public Integer getRowCountTaxas(TypedFlatMap criteria) {
		return taxaClienteService.getRowCount(criteria);
	}

	public ResultSetPage findPaginatedGeneralidades(TypedFlatMap criteria) {
		ResultSetPage rsp = generalidadeClienteService.findPaginated(criteria);
		for(Iterator it = rsp.getList().iterator();it.hasNext();) {
			GeneralidadeCliente gc = (GeneralidadeCliente)it.next();
			String vlGeneralidade = new DecimalFormat("###,###,###,###,##0.00").format(gc.getVlGeneralidade());
			if(gc.getTpIndicador().getValue().equals("T")) {
				gc.setValorIndicador(vlGeneralidade);
			} else if(gc.getTpIndicador().getValue().equals("V")) {
				gc.setValorIndicador(gc.getDsSimbolo() + " " + vlGeneralidade);
			} else {
				gc.setValorIndicador(vlGeneralidade + " %");
			}
		}		
		return rsp;
	}

	public Integer getRowCountGeneralidades(TypedFlatMap criteria) {
		return generalidadeClienteService.getRowCount(criteria);
	}

	private void verifyParameters(TypedFlatMap criteria) {
    	Long idZonaOrigem = criteria.getLong("zonaByIdZonaOrigem.idZona");
    	Long idPaisOrigem = criteria.getLong("paisByIdPaisOrigem.idPais");
    	Long idUfOrigem = criteria.getLong("unidadeFederativaByIdUfOrigem.idUnidadeFederativa");
    	Long idFilialOrigem = criteria.getLong("filialByIdFilialOrigem.idFilial");
    	Long idMunicipioOrigem = criteria.getLong("municipioByIdMunicipioOrigem.idMunicipio");
    	Long idAeroportoOrigem = criteria.getLong("aeroportoByIdAeroportoOrigem.idAeroporto");
    	Long idTpLocOrigem = criteria.getLong("tipoLocalizacaoMunicipioByIdTipoLocalizacaoOrigem.idTipoLocalizacaoMunicipio");

    	this.verifyParametersExpression(idZonaOrigem, idPaisOrigem, idUfOrigem,
				idFilialOrigem, idMunicipioOrigem, idAeroportoOrigem, idTpLocOrigem);

    	Long idZonaDestino = criteria.getLong("zonaByIdZonaDestino.idZona");
    	Long idPaisDestino = criteria.getLong("paisByIdPaisDestino.idPais");
    	Long idUfDestino = criteria.getLong("unidadeFederativaByIdUfDestino.idUnidadeFederativa");
    	Long idFilialDestino = criteria.getLong("filialByIdFilialDestino.idFilial");
    	Long idMunicipioDestino = criteria.getLong("municipioByIdMunicipioDestino.idMunicipio");
    	Long idAeroportoDestino = criteria.getLong("aeroportoByIdAeroportoDestino.idAeroporto");
    	Long idTpLocDestino = criteria.getLong("tipoLocalizacaoMunicipioByIdTipoLocalizacaoDestino.idTipoLocalizacaoMunicipio");

    	this.verifyParametersExpression(idZonaDestino, idPaisDestino, idUfDestino,
				idFilialDestino, idMunicipioDestino, idAeroportoDestino, idTpLocDestino);
	}

	private void verifyParametersExpression(Long idZona, Long idPais,
			Long idUf, Long idFilial, Long idMunicipio, Long idAeroporto,
			Long idTpLoc
	) {
		boolean zona = (idZona != null);
		boolean pais = (idPais != null);
		boolean uf = (idUf != null);
		boolean filial = (idFilial != null);
		boolean municipio = (idMunicipio != null);
		boolean aeroporto = (idAeroporto != null);
		boolean tpLoc = (idTpLoc != null);

		if(pais) {
			if(!zona) {
				throw new BusinessException("LMS-30001");
			}
		}

		if(uf) {
			if(!zona || !pais) {
				throw new BusinessException("LMS-30001");
			}
		}

		if(filial) {
			if(!zona || !pais || !uf || aeroporto || tpLoc) {
				throw new BusinessException("LMS-30001");
			}
		}

		if(municipio) {
			if(!zona || !pais || !uf || !filial || aeroporto || tpLoc) {
				throw new BusinessException("LMS-30001");
			}
		}

		if(aeroporto) {
			if(!zona || !pais || !uf || filial || municipio || tpLoc) {
				throw new BusinessException("LMS-30001");
			}
		}

		if(tpLoc) {
			if(!zona || !pais || !uf || filial || municipio || aeroporto) {
				throw new BusinessException("LMS-30001");
			}
		}
	}

	public Map findById(java.lang.Long id) {
		return getParametroClienteService().findHistoricoNegociacoes(id);
	}

	public Map findTaxasById(java.lang.Long id) {
		return taxaClienteService.findByIdMap(id);
	}

	public Map findGeneralidadesById(java.lang.Long id) {
		return generalidadeClienteService.findByIdMap(id);
	}

	private void prepareFindPaginatedCriteria(TypedFlatMap criteria) {
		criteria.put("tabelaDivisaoCliente.divisaoCliente.cliente.idCliente", criteria.get("cliente.idCliente"));
		criteria.put("tabelaDivisaoCliente.divisaoCliente.idDivisaoCliente", criteria.get("divisaoCliente.idDivisaoCliente"));
		criteria.put("zonaByIdZonaOrigem.idZona", criteria.get("zonaOrigem.idZona"));
		criteria.put("zonaByIdZonaDestino.idZona", criteria.get("zonaDestino.idZona"));
	}

	private ParametroClienteService getParametroClienteService() {
		return (ParametroClienteService) this.defaultService;
	}
	public void setParametroClienteService(ParametroClienteService parametroClienteService) {
		this.defaultService = parametroClienteService;
	}
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}
	public void setDivisaoClienteService(DivisaoClienteService divisaoClienteService) {
		this.divisaoClienteService = divisaoClienteService;
	}
	public void setZonaService(ZonaService zonaService) {
		this.zonaService = zonaService;
	}
	public void setPaisService(PaisService paisService) {
		this.paisService = paisService;
	}
	public void setUnidadeFederativaService(UnidadeFederativaService unidadeFederativaService) {
		this.unidadeFederativaService = unidadeFederativaService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public void setEnderecoPessoaService(EnderecoPessoaService enderecoPessoaService) {
		this.enderecoPessoaService = enderecoPessoaService;
	}
	public void setMunicipioFilialService(MunicipioFilialService municipioFilialService) {
		this.municipioFilialService = municipioFilialService;
	}
	public void setAeroportoService(AeroportoService aeroportoService) {
		this.aeroportoService = aeroportoService;
	}
	public void setTipoLocalizacaoMunicipioService(TipoLocalizacaoMunicipioService tipoLocalizacaoMunicipioService) {
		this.tipoLocalizacaoMunicipioService = tipoLocalizacaoMunicipioService;
	}
	public void setTaxaClienteService(TaxaClienteService taxaClienteService) {
		this.taxaClienteService = taxaClienteService;
	}
	public void setGeneralidadeClienteService(GeneralidadeClienteService generalidadeClienteService) {
		this.generalidadeClienteService = generalidadeClienteService;
	}

	public void setTabelaPrecoService(TabelaPrecoService tabelaPrecoService) {
		this.tabelaPrecoService = tabelaPrecoService;
	}
}
