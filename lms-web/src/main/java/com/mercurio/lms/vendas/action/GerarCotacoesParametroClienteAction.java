package com.mercurio.lms.vendas.action;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.hibernate.VarcharI18n;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.Moeda;
import com.mercurio.lms.expedicao.model.CalculoFrete;
import com.mercurio.lms.expedicao.model.CalculoServico;
import com.mercurio.lms.expedicao.model.ParcelaServico;
import com.mercurio.lms.expedicao.util.ConstantesExpedicao;
import com.mercurio.lms.expedicao.util.ExpedicaoUtils;
import com.mercurio.lms.municipios.model.GrupoClassificacao;
import com.mercurio.lms.municipios.model.service.GrupoClassificacaoFilialService;
import com.mercurio.lms.tabelaprecos.model.TabelaPreco;
import com.mercurio.lms.tabelaprecos.model.service.LimiteDescontoService;
import com.mercurio.lms.tabelaprecos.model.service.ParcelaPrecoService;
import com.mercurio.lms.tabelaprecos.util.ConstantesTabelaPrecos;
import com.mercurio.lms.util.BigDecimalUtils;
import com.mercurio.lms.util.CompareUtils;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.GeneralidadeCliente;
import com.mercurio.lms.vendas.model.ParametroCliente;
import com.mercurio.lms.vendas.model.ServicoAdicionalCliente;
import com.mercurio.lms.vendas.model.TaxaCliente;
import com.mercurio.lms.vendas.model.service.CotacaoService;
import com.mercurio.lms.vendas.model.service.GeneralidadeClienteService;
import com.mercurio.lms.vendas.model.service.ParametroClienteService;
import com.mercurio.lms.vendas.model.service.ServicoAdicionalClienteService;
import com.mercurio.lms.vendas.model.service.TaxaClienteService;
import com.mercurio.lms.vendas.util.ParametroClienteUtils;

/**
 * Generated by: ADSM ActionGenerator
 *
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.vendas.gerarCotacoesParametroClienteAction"
 */

public class GerarCotacoesParametroClienteAction extends CrudAction {

	private static int count = 0;
	private ConfiguracoesFacade configuracoesFacade;
	private ParcelaPrecoService parcelaPrecoService;
	private LimiteDescontoService limiteDescontoService;
	private GrupoClassificacaoFilialService grupoClassificacaoFilialService;
	private ServicoAdicionalClienteService servicoAdicionalClienteService;
	private TaxaClienteService taxaClienteService;
	private GeneralidadeClienteService generalidadeClienteService;
	private ParametroClienteService parametroClienteService;


	public Map findParametroCliente() {
		CalculoFrete calculoFrete = ExpedicaoUtils.getCalculoFreteInSession();
		if (Boolean.FALSE.equals(calculoFrete.getBlRecalculoCotacao()) && calculoFrete.getIdCotacao() == null){
			getCotacaoService().getParametroClientePadraoCotacao(calculoFrete.getParametroCliente());
		}
		
		Map parametroCliente = getParametroClienteAsMap(calculoFrete.getParametroCliente());

		TabelaPreco tabelaPreco = calculoFrete.getTabelaPreco();
		String tabelaPrecoString = tabelaPreco.getTabelaPrecoString();
		if(StringUtils.isNotBlank(tabelaPreco.getDsDescricao())) {
			tabelaPrecoString = tabelaPrecoString + " - " + tabelaPreco.getDsDescricao();
		}
		parametroCliente.put("dsTabelaPreco", tabelaPrecoString);
		parametroCliente.put("dsSimbolo", getSimboloMoeda(tabelaPreco.getMoeda()));

		Map tabelaDivisaoClienteMap = new HashMap();
		parametroCliente.put("tabelaDivisaoCliente", tabelaDivisaoClienteMap);
		Map tabelaPrecoMap = new HashMap();
		tabelaDivisaoClienteMap.put("tabelaPreco", tabelaPrecoMap);
		Map subtipoTabelaPrecoMap = new HashMap();
		tabelaPrecoMap.put("subtipoTabelaPreco", subtipoTabelaPrecoMap);
		subtipoTabelaPrecoMap.put("idSubtipoTabelaPreco", tabelaPreco.getSubtipoTabelaPreco().getIdSubtipoTabelaPreco());
		Map tipoTabelaPrecoMap = new HashMap();
		tabelaPrecoMap.put("tipoTabelaPreco", tipoTabelaPrecoMap);
		tipoTabelaPrecoMap.put("tpTipoTabelaPreco", tabelaPreco.getTipoTabelaPreco().getTpTipoTabelaPreco().getValue());

		return parametroCliente;
	}

	private Map getParametroClienteAsMap(ParametroCliente pc) {
		Map retorno = new HashMap();

		retorno.put("blPagaCubagem", pc.getBlPagaCubagem());
		retorno.put("pcPagaCubagem", pc.getPcPagaCubagem());
		retorno.put("blPagaPesoExcedente", pc.getBlPagaPesoExcedente());
		retorno.put("pcDescontoFreteTotal", pc.getPcDescontoFreteTotal());
		retorno.put("pcCobrancaDevolucoes", pc.getPcCobrancaDevolucoes());
		retorno.put("pcCobrancaReentrega", pc.getPcCobrancaReentrega());
		retorno.put("pcFretePercentual", pc.getPcFretePercentual());
		retorno.put("psFretePercentual", pc.getPsFretePercentual());
		retorno.put("vlValorReferencia", pc.getVlValorReferencia());
		retorno.put("vlAdvalorem", pc.getVlAdvalorem());
		retorno.put("vlFreteVolume", pc.getVlFreteVolume());
		retorno.put("vlMinimoFretePercentual", pc.getVlMinimoFretePercentual());
		retorno.put("vlToneladaFretePercentual", pc.getVlToneladaFretePercentual());
		retorno.put("vlFretePeso", pc.getVlFretePeso());
		retorno.put("vlMinFretePeso", pc.getVlMinFretePeso());
		retorno.put("vlPercMinimoProgr", pc.getVlPercMinimoProgr());
		retorno.put("vlMinimoFreteQuilo", pc.getVlMinimoFreteQuilo());
		retorno.put("vlAdvalorem2", pc.getVlAdvalorem2());
		retorno.put("vlPercentualGris", pc.getVlPercentualGris());
		retorno.put("vlMinimoGris", pc.getVlMinimoGris());
		retorno.put("vlPercentualTrt", pc.getVlPercentualTrt());
		retorno.put("vlMinimoTrt", pc.getVlMinimoTrt());
		retorno.put("vlPedagio", pc.getVlPedagio());
		retorno.put("vlTarifaMinima", pc.getVlTarifaMinima());
		retorno.put("vlTblEspecifica", pc.getVlTblEspecifica());
		retorno.put("tpIndicadorPedagio", pc.getTpIndicadorPedagio().getValue());
		retorno.put("tpIndicadorMinimoGris", pc.getTpIndicadorMinimoGris().getValue());
		retorno.put("tpIndicadorPercentualGris", pc.getTpIndicadorPercentualGris().getValue());
		retorno.put("tpIndicadorMinimoTrt", pc.getTpIndicadorMinimoTrt().getValue());
		retorno.put("tpIndicadorPercentualTrt", pc.getTpIndicadorPercentualTrt().getValue());
		retorno.put("tpIndicadorFretePeso", pc.getTpIndicadorFretePeso().getValue());
		retorno.put("tpIndicadorAdvalorem", pc.getTpIndicadorAdvalorem().getValue());
		retorno.put("tpIndicadorAdvalorem2", pc.getTpIndicadorAdvalorem2().getValue());
		retorno.put("tpIndicadorMinFretePeso", pc.getTpIndicadorMinFretePeso().getValue());
		retorno.put("tpIndicadorValorReferencia", pc.getTpIndicadorValorReferencia().getValue());
		retorno.put("tpTarifaMinima", pc.getTpTarifaMinima().getValue());
		retorno.put("tpIndicVlrTblEspecifica", pc.getTpIndicVlrTblEspecifica().getValue());
		retorno.put("tpIndicadorPercMinimoProgr", pc.getTpIndicadorPercMinimoProgr().getValue());
		return retorno;
	}

	public Map findLimitesDescontos() {
		Map retorno = new HashMap();
		TabelaPreco tp = ExpedicaoUtils.getCalculoFreteInSession().getTabelaPreco();
		Long idUsuario = SessionUtils.getUsuarioLogado().getIdUsuario();
		Long idSubtipoTabelaPreco = tp.getSubtipoTabelaPreco().getIdSubtipoTabelaPreco();
		String tpTipoTabelaPreco = tp.getTipoTabelaPreco().getTpTipoTabelaPreco().getValue();
		Long idFilial = SessionUtils.getFilialSessao().getIdFilial();
		Long idGrupoClassificacao = getGrupoClassificacaoParametroGeral();
		Long idDivisaoGrupoClassificacao = grupoClassificacaoFilialService.findIdDivisaoByFilialGrupoClassificacao(idFilial, idGrupoClassificacao);

		// busca o limite de descontos para o frete peso (ConstantesExpedicao.CD_FRETE_PESO)
		Long idParcelaPreco = parcelaPrecoService.findIdParcelaByCdParcelaPreco(ConstantesExpedicao.CD_FRETE_PESO);
		retorno.put("pcLimiteDescontoFretePeso", findPcLimiteDesconto(idParcelaPreco, idUsuario, idSubtipoTabelaPreco, tpTipoTabelaPreco, idFilial, idDivisaoGrupoClassificacao));

		// busca o limite de descontos para o frete valor e frete percentual (ConstantesExpedicao.CD_FRETE_VALOR)
		idParcelaPreco = parcelaPrecoService.findIdParcelaByCdParcelaPreco(ConstantesExpedicao.CD_FRETE_VALOR);
		retorno.put("pcLimiteDescontoFreteValor", findPcLimiteDesconto(idParcelaPreco, idUsuario, idSubtipoTabelaPreco, tpTipoTabelaPreco, idFilial, idDivisaoGrupoClassificacao));

		// busca o limite de descontos para o grupo GRIS (ConstantesExpedicao.CD_GRIS)
		idParcelaPreco = parcelaPrecoService.findIdParcelaByCdParcelaPreco(ConstantesExpedicao.CD_GRIS);
		retorno.put("pcLimiteDescontoGris", findPcLimiteDesconto(idParcelaPreco, idUsuario, idSubtipoTabelaPreco, tpTipoTabelaPreco, idFilial, idDivisaoGrupoClassificacao));

		// busca o limite de descontos para o grupo TRT (ConstantesExpedicao.CD_TRT)
		idParcelaPreco = parcelaPrecoService.findIdParcelaByCdParcelaPreco(ConstantesExpedicao.CD_TRT);
		retorno.put("pcLimiteDescontoTrt", findPcLimiteDesconto(idParcelaPreco, idUsuario, idSubtipoTabelaPreco, tpTipoTabelaPreco, idFilial, idDivisaoGrupoClassificacao));

		// busca o limite de descontos para o grupo Pedágio (ConstantesExpedicao.CD_PEDAGIO)
		idParcelaPreco = parcelaPrecoService.findIdParcelaByCdParcelaPreco(ConstantesExpedicao.CD_PEDAGIO);
		retorno.put("pcLimiteDescontoPedagio", findPcLimiteDesconto(idParcelaPreco, idUsuario, idSubtipoTabelaPreco, tpTipoTabelaPreco, idFilial, idDivisaoGrupoClassificacao));

		// busca o limite de descontos para o grupo TDE (ConstantesExpedicao.CD_TDE)
		idParcelaPreco = parcelaPrecoService.findIdParcelaByCdParcelaPreco(ConstantesExpedicao.CD_TDE);
		retorno.put("pcLimiteDescontoTde", findPcLimiteDesconto(idParcelaPreco, idUsuario, idSubtipoTabelaPreco, tpTipoTabelaPreco, idFilial, idDivisaoGrupoClassificacao));

		// busca o limite de descontos para o grupo Total Frete (ConstantesExpedicao.CD_PEDAGIO)
		idParcelaPreco = parcelaPrecoService.findIdParcelaByCdParcelaPreco(ConstantesExpedicao.CD_TOTAL_FRETE);
		retorno.put("pcLimiteDescontoTotalFrete", findPcLimiteDesconto(idParcelaPreco, idUsuario, idSubtipoTabelaPreco, tpTipoTabelaPreco, idFilial, idDivisaoGrupoClassificacao));
		return retorno;
	}

	private Long getGrupoClassificacaoParametroGeral() {
		return Long.valueOf(((BigDecimal)configuracoesFacade.getValorParametro(GrupoClassificacao.ID_GRUPO_CLASSIFICACAO_DESCONTOS)).longValue());
	}

	private BigDecimal findPcLimiteDesconto(Long idParcelaPreco, Long idUsuario, Long idSubtipoTabelaPreco, String tpTipoTabelaPreco, Long idFilial, Long idDivisaoGrupoClassificacao) {
		BigDecimal pcLimiteDesconto = limiteDescontoService.findPcLimiteDesconto(idParcelaPreco, idSubtipoTabelaPreco, tpTipoTabelaPreco, ConstantesTabelaPrecos.TP_INDICADOR_DESCONTO_COTACAO, "A", idUsuario, null, null);
		if(pcLimiteDesconto == null)
			pcLimiteDesconto = limiteDescontoService.findPcLimiteDesconto(idParcelaPreco, idSubtipoTabelaPreco, tpTipoTabelaPreco, ConstantesTabelaPrecos.TP_INDICADOR_DESCONTO_COTACAO, "A", null, idFilial, null);
		if(pcLimiteDesconto == null)
			pcLimiteDesconto = limiteDescontoService.findPcLimiteDesconto(idParcelaPreco, idSubtipoTabelaPreco, tpTipoTabelaPreco, ConstantesTabelaPrecos.TP_INDICADOR_DESCONTO_COTACAO, "A", null, null, idDivisaoGrupoClassificacao);
		if(pcLimiteDesconto == null)
			pcLimiteDesconto = limiteDescontoService.findPcLimiteDesconto(idParcelaPreco, idSubtipoTabelaPreco, tpTipoTabelaPreco, ConstantesTabelaPrecos.TP_INDICADOR_DESCONTO_COTACAO, "A", null, null, null);
		if(pcLimiteDesconto == null)
			pcLimiteDesconto = BigDecimalUtils.HUNDRED;
		return pcLimiteDesconto;
	}

	/**
	 * Armazena a nova parametrização para o cálculo.
	 * autor Julio Cesar Fernandes Corrêa
	 * 23/01/2006
	 * @param parameters
	 */
	public void storeParametroCliente(TypedFlatMap parameters) {
		CalculoFrete calculoFrete = ExpedicaoUtils.getCalculoFreteInSession();
		ParametroCliente pc = calculoFrete.getParametroCliente();
		if(pc == null) {
			pc = new ParametroCliente();
			calculoFrete.setParametroCliente(pc);
		}

		//Frete Peso
		pc.setTpIndicadorMinFretePeso(parameters.getDomainValue("tpIndicadorMinFretePeso"));
		pc.setVlMinFretePeso(parameters.getBigDecimal("vlMinFretePeso"));
		pc.setTpIndicadorPercMinimoProgr(parameters.getDomainValue("tpIndicadorPercMinimoProgr"));
		pc.setVlPercMinimoProgr(parameters.getBigDecimal("vlPercMinimoProgr"));
		pc.setTpIndicadorFretePeso(parameters.getDomainValue("tpIndicadorFretePeso"));
		pc.setVlFretePeso(parameters.getBigDecimal("vlFretePeso"));
		pc.setVlMinimoFreteQuilo(parameters.getBigDecimal("vlMinimoFreteQuilo"));
		pc.setBlPagaPesoExcedente(parameters.getBoolean("blPagaPesoExcedente"));
		pc.setTpTarifaMinima(parameters.getDomainValue("tpTarifaMinima"));
		pc.setVlTarifaMinima(parameters.getBigDecimal("vlTarifaMinima"));
		pc.setVlFreteVolume(parameters.getBigDecimal("vlFreteVolume"));
		pc.setTpIndicVlrTblEspecifica(parameters.getDomainValue("tpIndicVlrTblEspecifica"));
		pc.setVlTblEspecifica(parameters.getBigDecimal("vlTblEspecifica"));

		//Frete Valor
		pc.setTpIndicadorAdvalorem(parameters.getDomainValue("tpIndicadorAdvalorem"));
		pc.setVlAdvalorem(parameters.getBigDecimal("vlAdvalorem"));
		pc.setTpIndicadorAdvalorem2(parameters.getDomainValue("tpIndicadorAdvalorem2"));
		pc.setVlAdvalorem2(parameters.getBigDecimal("vlAdvalorem2"));
		pc.setTpIndicadorValorReferencia(parameters.getDomainValue("tpIndicadorValorReferencia"));
		pc.setVlValorReferencia(parameters.getBigDecimal("vlValorReferencia"));

		//Frete Percentual
		pc.setPcFretePercentual(parameters.getBigDecimal("pcFretePercentual"));
		pc.setVlMinimoFretePercentual(parameters.getBigDecimal("vlMinimoFretePercentual"));
		pc.setVlToneladaFretePercentual(parameters.getBigDecimal("vlToneladaFretePercentual"));
		pc.setPsFretePercentual(parameters.getBigDecimal("psFretePercentual"));

		//Gris
		pc.setTpIndicadorMinimoGris(parameters.getDomainValue("tpIndicadorMinimoGris"));
		pc.setVlMinimoGris(parameters.getBigDecimal("vlMinimoGris"));
		pc.setTpIndicadorPercentualGris(parameters.getDomainValue("tpIndicadorPercentualGris"));
		pc.setVlPercentualGris(parameters.getBigDecimal("vlPercentualGris"));

		//Trt
		pc.setTpIndicadorMinimoTrt(parameters.getDomainValue("tpIndicadorMinimoTrt"));
		pc.setVlMinimoTrt(parameters.getBigDecimal("vlMinimoTrt"));
		pc.setTpIndicadorPercentualTrt(parameters.getDomainValue("tpIndicadorPercentualTrt"));
		pc.setVlPercentualTrt(parameters.getBigDecimal("vlPercentualTrt"));

		//Pedagio
		pc.setTpIndicadorPedagio(parameters.getDomainValue("tpIndicadorPedagio"));
		pc.setVlPedagio(parameters.getBigDecimal("vlPedagio"));

		//Tde
		pc.setTpIndicadorMinimoTde(parameters.getDomainValue("tpIndicadorMinimoTde"));
		pc.setVlMinimoTde(parameters.getBigDecimal("vlMinimoTde"));
		pc.setTpIndicadorPercentualTde(parameters.getDomainValue("tpIndicadorPercentualTde"));
		pc.setVlPercentualTde(parameters.getBigDecimal("vlPercentualTde"));

		//Total Frete
		pc.setPcDescontoFreteTotal(parameters.getBigDecimal("pcDescontoFreteTotal"));

		
		pc.setPcCobrancaDevolucoes(parameters.getBigDecimal("pcCobrancaDevolucoes"));
		if (BigDecimal.ZERO.compareTo(pc.getPcCobrancaDevolucoes()) >= 0){
			throw new BusinessException("LMS-01205");
		}
		pc.setPcCobrancaReentrega(parameters.getBigDecimal("pcCobrancaReentrega"));
		if (BigDecimal.ZERO.compareTo(pc.getPcCobrancaReentrega()) >= 0){
			throw new BusinessException("LMS-01206");
		}
		
		calculoFrete.setBlDescontoTotal(Boolean.valueOf(BigDecimalUtils.hasValue(pc.getPcDescontoFreteTotal())));
		calculoFrete.setBlRecalculoCotacao(Boolean.TRUE);

		ExpedicaoUtils.setCalculoFreteInSession(calculoFrete);
	}
	
	public Map resetParametros() {
		CalculoFrete calculoFrete = ExpedicaoUtils.getCalculoFreteInSession();
		if(calculoFrete != null) {
			calculoFrete.setBlRecalculoCotacao(Boolean.FALSE);
		}
		ExpedicaoUtils.setCalculoFreteInSession(calculoFrete);
		return getParametroClienteAsMap(getCotacaoService().getParametroClientePadraoCotacao(null));
	}

	/**
	 * Métodos relacionados com a aba de taxas cliente
	 */
	
	/**
	 * Carrega as parcelas para combo de taxas.
	 * As parcelas são buscadas conforme as parcelas geradas no calculo do frete. 
	 * @see CalculoServico#getTaxas()
	 * autor Julio Cesar Fernandes Corrêa
	 * 26/01/2006
	 * @return List as parcelas do tipo taxa geradas no calculo.
	 */
	public List findParcelaPrecoTaxa() {
		return montaParcelas(ExpedicaoUtils.getCalculoFreteInSession().getTaxas());
	}
	
	/**
	 * Busca as taxas parametrizadas que foram utilizadas no calculo do frete.
	 * As taxas irão popular a grid da aba Taxas.
	 * 
	 * @see CalculoServico#getTaxas()
	 * 
	 * autor Julio Cesar Fernandes Corrêa
	 * 02/02/2006
	 * @return List as taxas parametrizadas
	 */
	public List findTaxasCliente() {
		List retorno = new ArrayList();
		CalculoFrete calculo = ExpedicaoUtils.getCalculoFreteInSession();
		List taxas = calculo.getTaxas();
		if(taxas != null) {
			Collections.sort(taxas);
			String dsSimbolo = getSimboloMoeda(calculo.getTabelaPreco().getMoeda());
			for (Iterator iter = taxas.iterator(); iter.hasNext();) {
				ParcelaServico parcela = (ParcelaServico) iter.next();
				TaxaCliente taxa = (TaxaCliente)parcela.getParametro();
				if(taxa != null) {
					TypedFlatMap map = new TypedFlatMap();
					map.put("idTaxaCliente", taxa.getIdTaxaCliente());
					map.put("parcelaPreco.nmParcelaPreco", parcela.getParcelaPreco().getNmParcelaPreco());
					map.put("tpTaxaIndicador", taxa.getTpTaxaIndicador());
					String valor = getValorFormatado(taxa.getTpTaxaIndicador().getValue(), 
							taxa.getVlTaxa(), dsSimbolo);
					map.put("valorIndicador", valor);
					map.put("psMinimo", taxa.getPsMinimo());
					map.put("vlExcedente", taxa.getVlExcedente());
					retorno.add(map);
				}
			}
		}
		return retorno;
	}
	
	private TypedFlatMap transformTaxa(ParcelaServico parcela, TaxaCliente taxa) {
		TypedFlatMap map = new TypedFlatMap();
		map.put("idTaxaCliente", taxa.getIdTaxaCliente());
		map.put("parcelaPreco.nmParcelaPreco", parcela.getParcelaPreco().getNmParcelaPreco());
		map.put("parcelaPreco.idParcelaPreco", parcela.getParcelaPreco().getIdParcelaPreco());
		map.put("parcelaPreco.cdParcelaPreco", parcela.getParcelaPreco().getCdParcelaPreco());
		map.put("tpTaxaIndicador.value", taxa.getTpTaxaIndicador().getValue());
		map.put("tpTaxaIndicadorDesc", taxa.getTpTaxaIndicador().getDescription());
		map.put("vlTaxa", taxa.getVlTaxa());
		map.put("psMinimo", taxa.getPsMinimo());
		map.put("vlExcedente", taxa.getVlExcedente());
		return map;
	}
	
	/**
	 * Salva a parametrização de uma taxa gerada no calculo.
	 * 
	 * autor Julio Cesar Fernandes Corrêa
	 * 02/02/2006
	 * @param parameters
	 * @return
	 */
	public Serializable storeTaxaCliente(TypedFlatMap parameters) {
		CalculoFrete calculoFrete = ExpedicaoUtils.getCalculoFreteInSession();
		BigDecimal vlTaxaOld = null;;
		TaxaCliente taxa = null;
		ParcelaServico parcela = calculoFrete.getTaxa(parameters.getString("parcelaPreco.cdParcelaPreco"));
		if(parcela.getParametro() == null) {
			taxa = new TaxaCliente();
			taxa.setIdTaxaCliente(Long.valueOf(--count));
			parcela.setParametro(taxa);
		} else {
			taxa = (TaxaCliente)parcela.getParametro();
		}
		vlTaxaOld = taxa.getVlTaxa();
		taxa.setDsSimbolo(parameters.getString("dsSimbolo"));
		taxa.setPsMinimo(parameters.getBigDecimal("psMinimo"));
		DomainValue tpTaxa = parameters.getDomainValue("tpTaxaIndicador");
		tpTaxa.setDescription(parameters.getVarcharI18n("tpTaxaIndicadorDesc"));
		taxa.setTpTaxaIndicador(tpTaxa);
		taxa.setVlTaxa(parameters.getBigDecimal("vlTaxa"));
		taxa.setVlExcedente(parameters.getBigDecimal("vlExcedente"));
		taxa.setPcReajTaxa(null);
		taxa.setPcReajVlExcedente(null);

		Boolean alterou = CompareUtils.neNull(vlTaxaOld,taxa.getVlTaxa());
		taxa.setBlAlterou(alterou);

		calculoFrete.setBlRecalculoCotacao(Boolean.TRUE);
		ExpedicaoUtils.setCalculoFreteInSession(calculoFrete);

		return taxa.getIdTaxaCliente();
	}

	/**
	 * Busca uma taxa parametriza pelo seu ID
	 * 
	 * autor Julio Cesar Fernandes Corrêa
	 * 02/02/2006
	 * @param idTaxa
	 * @return
	 */
	public TypedFlatMap findTaxaById(Long idTaxa) {
		List taxas = ExpedicaoUtils.getCalculoFreteInSession().getTaxas();
		if(taxas != null) {
			for (Iterator iter = taxas.iterator(); iter.hasNext();) {
				ParcelaServico parcela = (ParcelaServico) iter.next();
				TaxaCliente taxa = (TaxaCliente)parcela.getParametro();
				if(taxa != null && taxa.getIdTaxaCliente().equals(idTaxa))
					return transformTaxa(parcela, taxa);
			}
		}
		return null;
	}
	
	/**
	 * Remove a parametrização das taxas selecionadas na grid
	 * 
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeTaxaByIds(List ids) {
		CalculoFrete calculoFrete = ExpedicaoUtils.getCalculoFreteInSession();

		List taxas = calculoFrete.getTaxas();
		if(taxas != null) {
			for (Iterator iter = ids.iterator(); iter.hasNext();) {
				Long idTaxa = (Long) iter.next();
				for (Iterator iter2 = taxas.iterator(); iter2.hasNext();) {
					ParcelaServico parcela = (ParcelaServico) iter2.next();
					TaxaCliente taxa = (TaxaCliente)parcela.getParametro();
					if(taxa != null && taxa.getIdTaxaCliente().equals(idTaxa)) {
						parcela.setParametro(null);
						taxa.setBlAlterou(true);
						break;
					}
				}
			}
		}
		ExpedicaoUtils.setCalculoFreteInSession(calculoFrete);
	}

	/**
	 * Métodos relacionados com a aba de generalidades cliente
	 */

	/**
	 * 
	 * autor Julio Cesar Fernandes Corrêa
	 * 26/01/2006
	 * @return
	 */
	public List findParcelaPrecoGeneralidade() {
		CalculoFrete calculoFrete = ExpedicaoUtils.getCalculoFreteInSession();
		return montaParcelas(calculoFrete.getGeneralidades());
	}

	public List findGeneralidadesCliente() {
		List retorno = new ArrayList();
		CalculoFrete calculo = ExpedicaoUtils.getCalculoFreteInSession();
		List<ParcelaServico> parcelas = calculo.getGeneralidades();
		if(parcelas != null) {
			Collections.sort(parcelas);
			String dsSimbolo = getSimboloMoeda(calculo.getTabelaPreco().getMoeda());
			for (ParcelaServico parcelaServico : parcelas) {
				GeneralidadeCliente generalidadeCliente = (GeneralidadeCliente)parcelaServico.getParametro();
				if(generalidadeCliente != null) {
					TypedFlatMap map = new TypedFlatMap();
					map.put("idGeneralidadeCliente", generalidadeCliente.getIdGeneralidadeCliente());
					map.put("parcelaPreco.nmParcelaPreco", parcelaServico.getParcelaPreco().getNmParcelaPreco());
					map.put("tpIndicador", generalidadeCliente.getTpIndicador());
					String valor = getValorFormatado(generalidadeCliente.getTpIndicador().getValue(), 
							generalidadeCliente.getVlGeneralidade(), dsSimbolo);
					map.put("valorIndicador", valor);
					retorno.add(map);
				}
			}
		}
		return retorno;
	}

	private TypedFlatMap transformGeneralidade(ParcelaServico parcela, GeneralidadeCliente gen) {
		TypedFlatMap map = new TypedFlatMap();
		map.put("idGeneralidadeCliente", gen.getIdGeneralidadeCliente());
		map.put("tpIndicador.value", gen.getTpIndicador().getValue());
		map.put("tpIndicadorDesc", gen.getTpIndicador().getDescription());
		map.put("vlGeneralidade", gen.getVlGeneralidade());
		map.put("parcelaPreco.idParcelaPreco", parcela.getParcelaPreco().getIdParcelaPreco());
		map.put("parcelaPreco.cdParcelaPreco", parcela.getParcelaPreco().getCdParcelaPreco());
		map.put("parcelaPreco.nmParcelaPreco", parcela.getParcelaPreco().getNmParcelaPreco());
		return map;
	}

	public Serializable storeGeneralidadeCliente(TypedFlatMap parameters) {
		CalculoFrete calculoFrete = ExpedicaoUtils.getCalculoFreteInSession();
		String cdParcela = parameters.getString("parcelaPreco.cdParcelaPreco");
		ParcelaServico parcela = calculoFrete.getGeneralidade(cdParcela);
		BigDecimal vlOld = null;
		if(parcela.getParametro() == null) {
			GeneralidadeCliente generalidadeCliente = new GeneralidadeCliente();
			generalidadeCliente.setIdGeneralidadeCliente(Long.valueOf(--count));
			parcela.setParametro(generalidadeCliente);
		}
		GeneralidadeCliente generalidadeCliente = (GeneralidadeCliente) parcela.getParametro();
		vlOld = generalidadeCliente.getVlGeneralidade();
		generalidadeCliente.setDsSimbolo(parameters.getString("dsSimbolo"));
		DomainValue tpIndicador = parameters.getDomainValue("tpIndicador");
		tpIndicador.setDescription(parameters.getVarcharI18n("tpIndicadorDesc"));
		generalidadeCliente.setTpIndicador(tpIndicador);
		generalidadeCliente.setVlGeneralidade(parameters.getBigDecimal("vlGeneralidade"));
		generalidadeCliente.setPcReajGeneralidade(null);
		generalidadeCliente.setTpIndicadorMinimo(new DomainValue("T"));
		generalidadeCliente.setVlMinimo(BigDecimal.ZERO);
		generalidadeCliente.setPcReajMinimo(BigDecimal.ZERO);

		Boolean alterou = CompareUtils.neNull(vlOld,generalidadeCliente.getVlGeneralidade());
		generalidadeCliente.setBlAlterou(alterou);
		calculoFrete.setBlRecalculoCotacao(Boolean.TRUE);
		ExpedicaoUtils.setCalculoFreteInSession(calculoFrete);

		return generalidadeCliente.getIdGeneralidadeCliente();
	}

	public TypedFlatMap findGeneralidadeById(Long id) {
		List parcelas = ExpedicaoUtils.getCalculoFreteInSession().getGeneralidades();
		for (Iterator iter = parcelas.iterator(); iter.hasNext();) {
			ParcelaServico parcela = (ParcelaServico) iter.next();
			GeneralidadeCliente gen = (GeneralidadeCliente)parcela.getParametro();
			if(gen != null && gen.getIdGeneralidadeCliente().equals(id))
				return transformGeneralidade(parcela, gen);
		}
		return null;
	}

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeGeneralidadeByIds(List ids) {
		CalculoFrete calculoFrete = ExpedicaoUtils.getCalculoFreteInSession();

		List parcelas = calculoFrete.getGeneralidades();
		for (Iterator iter = ids.iterator(); iter.hasNext();) {
			Long id = (Long) iter.next();
			for (Iterator iter2 = parcelas.iterator(); iter2.hasNext();) {
				ParcelaServico parcela = (ParcelaServico) iter2.next();
				GeneralidadeCliente gen = (GeneralidadeCliente)parcela.getParametro();
				if(gen != null && gen.getIdGeneralidadeCliente().equals(id)) {
					parcela.setParametro(null);
					gen.setBlAlterou(true);
					break;
				}
			}
		}

		ExpedicaoUtils.setCalculoFreteInSession(calculoFrete);
	}

	private String getValorFormatado(String indicador, BigDecimal valor, String simbolo) {
		return FormatUtils.formatValorComIndicador(indicador, valor, simbolo);
	}

	public BigDecimal findLimiteDescontoParcela(Long idParcelaPreco) {
		TabelaPreco tp = ExpedicaoUtils.getCalculoFreteInSession().getTabelaPreco();
		Long idSubtipoTabelaPreco = tp.getSubtipoTabelaPreco().getIdSubtipoTabelaPreco();
		Long idFilial = SessionUtils.getFilialSessao().getIdFilial();
		String tpTipoTabelaPreco = tp.getTipoTabelaPreco().getTpTipoTabelaPreco().getValue();
		Long idGrupoClassificacao = getGrupoClassificacaoParametroGeral();
		Long idDivisaoGrupoClassificacao = grupoClassificacaoFilialService.findIdDivisaoByFilialGrupoClassificacao(idFilial, idGrupoClassificacao);
		return findPcLimiteDesconto(idParcelaPreco, SessionUtils.getUsuarioLogado().getIdUsuario(), 
				idSubtipoTabelaPreco, tpTipoTabelaPreco, idFilial, 
				idDivisaoGrupoClassificacao);
	}

	/**
	 * Métodos relacionados com a aba de serviços adicionais cliente
	 */

	/**
	 * 
	 * autor Julio Cesar Fernandes Corrêa
	 * 26/01/2006
	 * @return
	 */
	public List findParcelaPrecoServico() {
		return montaParcelas(ExpedicaoUtils.getCalculoFreteInSession().getTodosServicosAdicionais());
	}

	private List montaParcelas(List parcelas) {
		List retorno = new ArrayList();
		if(parcelas != null) {
			for (Iterator iter = parcelas.iterator(); iter.hasNext();) {
				ParcelaServico parcela = (ParcelaServico) iter.next();
				if (parcela != null) {
					Map map = new HashMap();
					map.put("nmParcelaPreco", parcela.getParcelaPreco().getNmParcelaPreco());
					map.put("cdParcelaPreco", parcela.getParcelaPreco().getCdParcelaPreco());
					map.put("idParcelaPreco", parcela.getParcelaPreco().getIdParcelaPreco());
					retorno.add(map);
				}
			}
		}
		return retorno;
	}

	public List findServicosCliente() {
		List retorno = new ArrayList();
		CalculoFrete calculo = ExpedicaoUtils.getCalculoFreteInSession();
		List parcelas = calculo.getTodosServicosAdicionais();
		if(parcelas != null) {
			Collections.sort(parcelas);
			String dsSimbolo = getSimboloMoeda(calculo.getTabelaPreco().getMoeda());
			for (Iterator iter = parcelas.iterator(); iter.hasNext();) {
				ParcelaServico parcela = (ParcelaServico) iter.next();
				ServicoAdicionalCliente serv = (ServicoAdicionalCliente)parcela.getParametro();
				if(serv != null) {
					TypedFlatMap map = new TypedFlatMap();
					map.put("idServicoAdicionalCliente", serv.getIdServicoAdicionalCliente());
					map.put("parcelaPreco.nmParcelaPreco", parcela.getParcelaPreco().getNmParcelaPreco());
					map.put("tpIndicador", serv.getTpIndicador());
					String valor = getValorFormatado(serv.getTpIndicador().getValue(), 
							serv.getVlValor(), dsSimbolo);
					map.put("valorIndicador", valor);
					retorno.add(map);
				}
			}
		}
		return retorno;
	}

	private TypedFlatMap transformServico(ParcelaServico parcela, ServicoAdicionalCliente serv) {
		TypedFlatMap map = new TypedFlatMap();
		map.put("idServicoAdicionalCliente", serv.getIdServicoAdicionalCliente());
		map.put("parcelaPreco.nmParcelaPreco", parcela.getParcelaPreco().getNmParcelaPreco());
		map.put("tpIndicador.value", serv.getTpIndicador().getValue());
		map.put("tpIndicadorDesc", serv.getTpIndicador().getDescription());
		map.put("vlValor", serv.getVlValor());
		map.put("vlMinimo", serv.getVlMinimo());
		map.put("parcelaPreco.idParcelaPreco", parcela.getParcelaPreco().getIdParcelaPreco());
		map.put("parcelaPreco.cdParcelaPreco", parcela.getParcelaPreco().getCdParcelaPreco());
		return map;
	}

	public Serializable storeServicoCliente(TypedFlatMap parameters) {
		validadeStoreServicoAdicional(parameters);
		
		CalculoFrete calculoFrete = ExpedicaoUtils.getCalculoFreteInSession();
		String cdParcelaPreco = parameters.getString("parcelaPreco.cdParcelaPreco");
		ServicoAdicionalCliente serv = null;
		BigDecimal vlOld = null;
		ParcelaServico parcela = calculoFrete.getServicoAdicionalAuxiliar(cdParcelaPreco);
		if(parcela == null) {
			parcela = calculoFrete.getServicoAdicional(cdParcelaPreco);
		}
		if(parcela.getParametro() == null) {
			ServicoAdicionalCliente servicoAdicionalCliente = new ServicoAdicionalCliente();
			servicoAdicionalCliente.setIdServicoAdicionalCliente(Long.valueOf(--count));
			parcela.setParametro(servicoAdicionalCliente);
		}
		serv = (ServicoAdicionalCliente)parcela.getParametro();
		vlOld = serv.getVlValor();
		DomainValue tpInd = parameters.getDomainValue("tpIndicador");
		tpInd.setDescription(parameters.getVarcharI18n("tpIndicadorDesc"));
		serv.setTpIndicador(tpInd);
		serv.setVlValor(parameters.getBigDecimal("vlValor"));
		serv.setVlMinimo(parameters.getBigDecimal("vlMinimo"));
		serv.setSimulacao(null);
		serv.setTabelaDivisaoCliente(null);
		calculoFrete.setBlRecalculoCotacao(Boolean.TRUE);

		Boolean alterou = CompareUtils.neNull(vlOld,serv.getVlValor());
		serv.setBlAlterou(alterou);
		
		ExpedicaoUtils.setCalculoFreteInSession(calculoFrete);

		return serv.getIdServicoAdicionalCliente();
	}

	public TypedFlatMap findServicoAdicionalById(Long id) {
		CalculoFrete calculoFrete = ExpedicaoUtils.getCalculoFreteInSession();
		List parcelas = calculoFrete.getTodosServicosAdicionais();
		if(parcelas != null) {
			for (Iterator iter = parcelas.iterator(); iter.hasNext();) {
				ParcelaServico parcela = (ParcelaServico) iter.next();
				ServicoAdicionalCliente serv = (ServicoAdicionalCliente)parcela.getParametro();
				if(serv != null && serv.getIdServicoAdicionalCliente().equals(id))
					return transformServico(parcela, serv);
			}
		}
		return null;
	}

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeServicoByIds(List ids) {
		CalculoFrete calculoFrete = ExpedicaoUtils.getCalculoFreteInSession();
		List parcelas = calculoFrete.getTodosServicosAdicionais();
		if(parcelas != null) {
			for (Iterator iter = ids.iterator(); iter.hasNext();) {
				Long id = (Long) iter.next();
				for (Iterator iter2 = parcelas.iterator(); iter2.hasNext();) {
					ParcelaServico parcela = (ParcelaServico) iter2.next();
					ServicoAdicionalCliente serv = (ServicoAdicionalCliente)parcela.getParametro();
					if(serv != null && serv.getIdServicoAdicionalCliente().equals(id)) {
						CalculoFrete calculo = ExpedicaoUtils.getCalculoFreteInSession();
						calculo.setBlRecalculoCotacao(Boolean.TRUE);
						parcela.setParametro(null);
						serv.setBlAlterou(true);
						break;
					}
				}
			}
		}
		ExpedicaoUtils.setCalculoFreteInSession(calculoFrete);
	}

	public String findDsSimboloMoeda() {
		return getSimboloMoeda(ExpedicaoUtils.getCalculoFreteInSession().getTabelaPreco().getMoeda());
	}

	public TypedFlatMap findParametroByCotacao(Long idCotacao) {
		CalculoFrete calculoFrete = ExpedicaoUtils.getCalculoFreteInSession(false);
		
		TypedFlatMap map = null;
		if( calculoFrete.getParametroCliente() == null ){
			map = parametroClienteService.findByIdCotacao(idCotacao);
			map.put("dsSimbolo", getSimboloMoeda(map));
			map.put("dsTabelaPreco", getDsTabelaPreco(map));
		}else{
			map = new TypedFlatMap(findParametroCliente());
		}
		return (TypedFlatMap)map;
	}

	private String getDsTabelaPreco(TypedFlatMap map) {
		String dsTabela = map.getString("tpTipoTabelaPreco.value");
		Integer nrVersao = map.getInteger("nrVersao");
		if(nrVersao != null)
			dsTabela += nrVersao;
		dsTabela += "-" + map.getString("tpSubtipoTabelaPreco");
		VarcharI18n dsDesc = map.getVarcharI18n("dsDescricao");
		if(dsDesc !=null && !dsDesc.getValue().equals("")) {
			dsTabela += " - " + dsDesc.getValue();
		}
		return dsTabela;
	}

	public List findServicosByCotacao(Long idCotacao) {
		List l = servicoAdicionalClienteService.findServicosByIdCotacao(idCotacao);
		return formataValorIndicador(l, "tpIndicador", "vlValor");
	}

	public List findTaxasByParametro(Long idParametroCliente) {
		List l = taxaClienteService.findByIdParametroCliente(idParametroCliente);
		return formataValorIndicador(l, "tpTaxaIndicador", "vlTaxa");
	}

	public List findGeneralidadesByParametro(Long idParametroCliente) {
		List l = generalidadeClienteService.findByIdParametroCliente(idParametroCliente);
		return formataValorIndicador(l, "tpIndicador", "vlGeneralidade");
	}

	/*
	 * METODOS PRIVADOS
	 */
	private List formataValorIndicador(List l, String nmIndicador, String nmValor) {
		String dsSimbolo = getSimboloMoeda(SessionUtils.getMoedaSessao());
		for (Iterator iter = l.iterator(); iter.hasNext();) {
			Map map = (Map) iter.next();
			String indicador = (String)((Map)map.get(nmIndicador)).get("value");
			map.put("valorIndicador", getValorFormatado(indicador, (BigDecimal)map.remove(nmValor), dsSimbolo));
		}
		return l;
	}

	private String getSimboloMoeda(Moeda m) {
		return m.getSgMoeda() + " " + m.getDsSimbolo();
	}

	private String getSimboloMoeda(TypedFlatMap map) {
		return map.getString("sgMoeda") + " " + map.getString("dsSimbolo");
	}

	private void validadeStoreServicoAdicional(TypedFlatMap parameters) {
		Long idParcelaPreco = parameters.getLong("parcelaPreco.idParcelaPreco");
		BigDecimal pcLimiteDesconto = findLimiteDescontoParcela(idParcelaPreco);
		String tpIndicador = parameters.getDomainValue("tpIndicador").getValue();

		if (CompareUtils.le(pcLimiteDesconto, BigDecimalUtils.HUNDRED)) {
			if (!"T".equals(tpIndicador) && !"A".equals(tpIndicador) && !"D".equals(tpIndicador)) {
				throw new BusinessException("LMS-01154");
			}
		}
		if ("D".equals(tpIndicador)) {
			BigDecimal vlValor = parameters.getBigDecimal("vlValor");
			if (CompareUtils.lt(BigDecimalUtils.HUNDRED, vlValor)) {
				throw new BusinessException("LMS-01153");
			}
		}
	}

	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}
	public void setParametroClienteService(ParametroClienteService parametroClienteService) {
		this.parametroClienteService = parametroClienteService;
	}
	public void setGeneralidadeClienteService(GeneralidadeClienteService generalidadeClienteService) {
		this.generalidadeClienteService = generalidadeClienteService;
	}
	public void setTaxaClienteService(TaxaClienteService taxaClienteService) {
		this.taxaClienteService = taxaClienteService;
	}
	public void setServicoAdicionalClienteService(ServicoAdicionalClienteService servicoAdicionalClienteService) {
		this.servicoAdicionalClienteService = servicoAdicionalClienteService;
	}
	public void setGrupoClassificacaoFilialService(GrupoClassificacaoFilialService grupoClassificacaoFilialService) {
		this.grupoClassificacaoFilialService = grupoClassificacaoFilialService;
	}
	public void setLimiteDescontoService(LimiteDescontoService limiteDescontoService) {
		this.limiteDescontoService = limiteDescontoService;
	}
	public CotacaoService getCotacaoService() {
		return (CotacaoService)defaultService;
	}
	public void setCotacaoService(CotacaoService cotacaoService) {
		this.defaultService = cotacaoService;
	}
	public void setParcelaPrecoService(ParcelaPrecoService parcelaPrecoService) {
		this.parcelaPrecoService = parcelaPrecoService;
	}
}