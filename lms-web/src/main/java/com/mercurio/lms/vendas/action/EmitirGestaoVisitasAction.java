package com.mercurio.lms.vendas.action;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

import org.apache.commons.collections.MapUtils;
import org.joda.time.YearMonthDay;

import com.mercurio.adsm.framework.report.ReportActionSupport;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.ParametroGeral;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.configuracoes.model.service.FuncionarioService;
import com.mercurio.lms.configuracoes.model.service.ParametroGeralService;
import com.mercurio.lms.configuracoes.model.service.ServicoService;
import com.mercurio.lms.configuracoes.model.service.UsuarioService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.Regional;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.RegionalFilialService;
import com.mercurio.lms.municipios.model.service.RegionalService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.CampanhaMarketing;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.service.CampanhaMarketingService;
import com.mercurio.lms.vendas.model.service.ClienteService;
import com.mercurio.lms.vendas.model.service.TipoVisitaService;
import com.mercurio.lms.vendas.report.EmitirGestaoVisitasService;

/**
 * Generated by: ADSM ActionGenerator
 * 
 * Não inserir documentação após ou remover a tag do XDoclet a seguir. O valor
 * do <code>id</code> informado abaixo deve ser utilizado para referenciar
 * este serviço.
 * 
 * @spring.bean id="lms.vendas.emitirGestaoVisitasAction"
 */
public class EmitirGestaoVisitasAction extends ReportActionSupport {

	private EmitirGestaoVisitasService emitirGestaoVisitasService;
	private RegionalService regionalService;
	private FilialService filialService;
	private UsuarioService usuarioService;
	private CampanhaMarketingService campanhaMarketingService;
	private ServicoService servicoService;
	private TipoVisitaService tipoVisitaService;
	private ClienteService clienteService;
	private FuncionarioService funcionarioService;
	private RegionalFilialService regionalFilialService;
	private ParametroGeralService parametroGeralService;

	@Override
	public java.io.File execute(TypedFlatMap parameters) throws Exception {
		reportServiceSupport = emitirGestaoVisitasService;
		return super.execute(parameters);
	}

	public TypedFlatMap findDefaultData() {
		TypedFlatMap result = new TypedFlatMap();

		//Dados da filial
		Filial filial = SessionUtils.getFilialSessao();
		Long idFilial = filial.getIdFilial();

		boolean isFilialMatriz = true;
		if (!"MTZ".equals(filial.getSgFilial())){
			isFilialMatriz = false;
		result.put("filial.idFilial", filial.getIdFilial());
		result.put("filial.sgFilial", filial.getSgFilial());
		result.put("filial.pessoa.nmFantasia", filial.getPessoa().getNmFantasia());

		//Dados do contato
		Usuario loggedUser = SessionUtils.getUsuarioLogado(); 
		Long idUsuario = loggedUser.getIdUsuario();
		Map regional = regionalFilialService.findRegionalByIdFilial(idFilial);
		Long idRegional = MapUtils.getLong(regional, "idRegional");
		result.put("regional.idRegional", idRegional);
		result.put("regional.siglaDescricao", MapUtils.getString(regional, "sgRegional")+" - "+MapUtils.getString(regional, "dsRegional"));

		/** Busca Gerentes e Diretores */
		ParametroGeral parametroGeral = parametroGeralService.findByNomeParametro("CD_COORDENACAO_VENDAS", false);
		List gerente  = funcionarioService.findUsuarioByFilialFuncao(idUsuario, idFilial, parametroGeral.getDsConteudo());
		if (gerente != null && !gerente.isEmpty()) {
			Map funcMap = (Map)gerente.get(0);
			result.put("contato.idUsuario", MapUtils.getLong(funcMap, "idUsuario"));
			result.put("contato.nrMatricula", MapUtils.getString(funcMap, "nrMatricula"));
			result.put("contato.nmUsuario", MapUtils.getString(funcMap, "nmUsuario"));
			result.put("contato.isGerenteComercial", true);
		} else {
			result.put("contato.idUsuario", idUsuario);
			result.put("contato.nrMatricula", loggedUser.getNrMatricula());
			result.put("contato.nmUsuario", loggedUser.getNmUsuario());
			result.put("contato.isGerenteComercial", false);
		}
		}

		YearMonthDay dtAtual = JTDateTimeUtils.getDataAtual();
		result.put("dtInicial", dtAtual.minusDays(31));
		result.put("dtFinal", dtAtual);

		result.put("isFilialMatriz", isFilialMatriz);
		
		return result;
	}
	public List montaComboRegional(TypedFlatMap parameters) {
		List listRegionais =  regionalService.findByUsuarioLogado(parameters);

		Set  set = new TreeSet(new Comparator() {
			public int compare(Object o1, Object o2) {
				Regional reg1 = (Regional)o1;
				Regional reg2 = (Regional)o2;
				
				if (reg1 != null && reg2 != null) {
					String nomeReg1 = reg1.getSgRegional()+reg1.getDsRegional();
					String nomeReg2 = reg2.getSgRegional()+reg2.getDsRegional();
					return nomeReg1.toUpperCase().compareTo(nomeReg2.toUpperCase());
				}				
				return -1;
			}			
		});
		
		set.addAll(listRegionais);		
		return new ArrayList(set);	
	}

	public List montaLookupFilial(TypedFlatMap parameters) {
		return filialService.findLookupFilial(parameters);
	}

	public List montaLookupFuncionario(TypedFlatMap parameters) {
		return usuarioService.findLookupUsuarioFuncionario(null, parameters.getString("nrMatricula"), null, null, null, null, true);
	}

	public List montaComboCampanhaMarketing(TypedFlatMap parameters) {
		List campanhas = campanhaMarketingService.find(parameters);
		
		Set  set = new TreeSet(new Comparator() {
			public int compare(Object o1, Object o2) {
				CampanhaMarketing cm1 = (CampanhaMarketing)o1;
				CampanhaMarketing cm2 = (CampanhaMarketing)o2;
				
				if (cm1 != null && cm2 != null) {
					return cm1.getDsCampanhaMarketing().toString().compareTo(cm2.getDsCampanhaMarketing().toString());
				}				
				return -1;
			}			
		});
		
		set.addAll(campanhas);		
		return new ArrayList(set);		
	}

	public List montaComboServico(TypedFlatMap parameters) {
		return servicoService.find(parameters);
	}

	public List montaComboTipoVisita(TypedFlatMap parameters) {
		return tipoVisitaService.findTodosOrderByDsTipoVisita(parameters);
	}

	public List findLookupCliente(TypedFlatMap tfm) {
		List clientes = clienteService.findLookupSimplificado(tfm.getString("pessoa.nrIdentificacao"), null);

		List retorno = new ArrayList();
		for (Iterator iter = clientes.iterator(); iter.hasNext();) {
			Cliente element = (Cliente) iter.next();

			TypedFlatMap map = new TypedFlatMap();
			map.put("pessoa.nrIdentificacao", element.getPessoa()
					.getNrIdentificacao());
			map.put("idCliente", element.getIdCliente());
			map.put("pessoa.nmPessoa", element.getPessoa().getNmPessoa());
			map.put("pessoa.nrIdentificacaoFormatado", FormatUtils
					.formatIdentificacao(element.getPessoa()
							.getTpIdentificacao(), element.getPessoa()
							.getNrIdentificacao()));

			retorno.add(map);
		}
		return retorno;
	}

	public void setFuncionarioService(FuncionarioService funcionarioService) {
		this.funcionarioService = funcionarioService;
	}
	public void setRegionalFilialService(RegionalFilialService regionalFilialService) {
		this.regionalFilialService = regionalFilialService;
	}
	public void setEmitirGestaoVisitasService(EmitirGestaoVisitasService emitirGestaoVisitasService) {
		this.emitirGestaoVisitasService = emitirGestaoVisitasService;
	}
	public void setRegionalService(RegionalService regionalService) {
		this.regionalService = regionalService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public void setUsuarioService(UsuarioService usuarioService) {
		this.usuarioService = usuarioService;
	}
	public void setCampanhaMarketingService(CampanhaMarketingService campanhaMarketingService) {
		this.campanhaMarketingService = campanhaMarketingService;
	}
	public void setServicoService(ServicoService servicoService) {
		this.servicoService = servicoService;
	}
	public void setTipoVisitaService(TipoVisitaService tipoVisitaService) {
		this.tipoVisitaService = tipoVisitaService;
	}
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}

	public ParametroGeralService getParametroGeralService() {
		return parametroGeralService;
	}

	public void setParametroGeralService(ParametroGeralService parametroGeralService) {
		this.parametroGeralService = parametroGeralService;
	}

}
