package com.mercurio.lms.vendas.action;

import java.io.Serializable;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.session.SessionContext;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.expedicao.util.ConstantesExpedicao;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.GrupoClassificacaoFilialService;
import com.mercurio.lms.tabelaprecos.model.LimiteDesconto;
import com.mercurio.lms.tabelaprecos.model.service.LimiteDescontoService;
import com.mercurio.lms.tabelaprecos.model.service.ParcelaPrecoService;
import com.mercurio.lms.util.session.SessionKey;
import com.mercurio.lms.vendas.model.GeneralidadeCliente;
import com.mercurio.lms.vendas.model.service.GeneralidadeClienteService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.vendas.manterParametrosClienteGeneralidadesAction"
 */
public class ManterParametrosClienteGeneralidadesAction extends CrudAction {
	private GrupoClassificacaoFilialService grupoClassificacaoFilialService;
	private ParcelaPrecoService parcelaPrecoService;
    private LimiteDescontoService limiteDescontoService;
	private ConfiguracoesFacade configuracoesFacade;
	private DomainValueService domainValueService;

	public ResultSetPage findPaginated(TypedFlatMap criteria) {
		ResultSetPage rsp = getGeneralidadeClienteService().findPaginated(criteria);
		for(Iterator it = rsp.getList().iterator();it.hasNext();) {
			GeneralidadeCliente generalidadeCliente = (GeneralidadeCliente)it.next();
			String vlGeneralidade = new DecimalFormat("###,###,###,###,##0.00").format(generalidadeCliente.getVlGeneralidade());
			String tpIndicador = generalidadeCliente.getTpIndicador().getValue();
			if("T".equals(tpIndicador) || "Q".equals(tpIndicador)) {
				generalidadeCliente.setValorIndicador(vlGeneralidade);
			} else if("V".equals(tpIndicador) || "M".equals(tpIndicador)) {
				generalidadeCliente.setValorIndicador(generalidadeCliente.getDsSimbolo() + " " +vlGeneralidade);
			} else {
				generalidadeCliente.setValorIndicador(vlGeneralidade + " %");
			}
		}		
		return rsp;
	}

	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		getGeneralidadeClienteService().removeByIds(ids);
	}

	public Map findById(java.lang.Long id) {
		return getGeneralidadeClienteService().findByIdMap(id);
	}

	public Serializable store(GeneralidadeCliente bean) {
		if(bean.getPcReajMinimo() == null){
			bean.setPcReajMinimo(new BigDecimal(0));
		}
		return getGeneralidadeClienteService().store(bean);
	}

    public List findGeneralidadeCombo(TypedFlatMap criteria) {
    	Long idTabelaPreco = criteria.getLong("idTabelaPreco");
    	Long idPedagio = parcelaPrecoService.findIdParcelaByCdParcelaPreco(ConstantesExpedicao.CD_PEDAGIO);
    	Long idGris = parcelaPrecoService.findIdParcelaByCdParcelaPreco(ConstantesExpedicao.CD_GRIS);
    	Long idTrt = parcelaPrecoService.findIdParcelaByCdParcelaPreco(ConstantesExpedicao.CD_TRT);
    	Long idAdvalorem1 = parcelaPrecoService.findIdParcelaByCdParcelaPreco(ConstantesExpedicao.CD_ADVALOREM_1);
    	Long idAdvalorem2 = parcelaPrecoService.findIdParcelaByCdParcelaPreco(ConstantesExpedicao.CD_ADVALOREM_2);
    	Long idTde = parcelaPrecoService.findIdParcelaByCdParcelaPreco(ConstantesExpedicao.CD_TDE);

    	Long idPedagioDocumento = parcelaPrecoService.findIdParcelaByCdParcelaPreco(ConstantesExpedicao.CD_PEDAGIO_DOCUMENTO);
       	Long idPedagioFaixaPeso = parcelaPrecoService.findIdParcelaByCdParcelaPreco(ConstantesExpedicao.CD_PEDAGIO_FAIXA_PESO);
       	Long idPedagioFracao = parcelaPrecoService.findIdParcelaByCdParcelaPreco(ConstantesExpedicao.CD_PEDAGIO_FRACAO);
       	Long idPedagioPostoFracao = parcelaPrecoService.findIdParcelaByCdParcelaPreco(ConstantesExpedicao.CD_PEDAGIO_POSTO_FRACAO);

    	return parcelaPrecoService.findGeneralidadesExcluindoAlgunsTipos(idTabelaPreco, new Long[]{idPedagio,idGris,idTrt,idAdvalorem1,idAdvalorem2,idTde,idPedagioDocumento,idPedagioFaixaPeso,idPedagioFracao,idPedagioPostoFracao});
    }

	/**
	 * Metodo necessario pois os metodos find alteram os parametros de entrada (dominios). 
	 * Segundo a arquitetura, esse comportamento de alterar o parametro de entrada dos metodos find está correto. 
	 * @param map
	 * @return
	 */
	public Map processMap4Find(Map map) {
		DomainValue dv = (DomainValue)map.remove("tpTipoTabelaPreco");
		map.put("tpTipoTabelaPreco",dv.getValue());
		map.remove("tpIndicadorDesconto");
		map.put("tpIndicadorDesconto","P");
		return map;
	}

	public Map findIndex(Map map) {
		Map result = new HashMap();
		Long returnFlag = Long.valueOf(0);
		Double percentualLimiteDesconto = new Double(0);

		String idParcela = (String)map.get("idParcelaPreco");
		Usuario us = SessionContext.getUser();
		String idSubtipoTabelaPreco = (String)map.get("idSubtipoTabelaPreco");
		String tpTipoTabelaPreco = (String)map.get("tpTipoTabelaPreco");

		Map ldMap = new HashMap(5);
		Map aux1 = new HashMap(1);
		aux1.put("idUsuario",us.getIdUsuario());
		ldMap.put("usuario",aux1);
		aux1 = new HashMap(1);
		aux1.put("idParcelaPreco",idParcela);
		ldMap.put("parcelaPreco",aux1);
		aux1 = new HashMap(1);
		aux1.put("idSubtipoTabelaPreco",idSubtipoTabelaPreco);
		ldMap.put("subtipoTabelaPreco",aux1);
		ldMap.put("tpTipoTabelaPreco",tpTipoTabelaPreco);
		ldMap.put("tpIndicadorDesconto","P");

		List ldList = limiteDescontoService.find(ldMap);
		if(!ldList.isEmpty()) {
			// usuario
			LimiteDesconto ld = ((LimiteDesconto)ldList.get(0));
			percentualLimiteDesconto = new Double(ld.getPcLimiteDesconto().doubleValue()); 
			returnFlag = Long.valueOf(0);
		} else {
			// filial do usuario		
			Filial f = (Filial)SessionContext.get(SessionKey.FILIAL_KEY);
			ldMap.remove("usuario");
			aux1 = new HashMap(1);
			aux1.put("idFilial",f.getIdFilial());
			ldMap.put("filial",aux1);

			ldList = limiteDescontoService.find(processMap4Find(ldMap)); 
			if(!ldList.isEmpty()) {
				LimiteDesconto ld = ((LimiteDesconto)ldList.get(0));
				percentualLimiteDesconto = new Double(ld.getPcLimiteDesconto().doubleValue());
				returnFlag = Long.valueOf(1);
			} else {
				// divisao grupo classificacao
				ldMap.remove("filial");
				Long idGrupoClassificao = Long.valueOf(((BigDecimal)configuracoesFacade.getValorParametro("IDGrupoClassificacaoDescontos")).longValue());
				Long idDivisaoGrupoClassificacao = grupoClassificacaoFilialService.findIdDivisaoByFilialGrupoClassificacao(f.getIdFilial(),idGrupoClassificao);
				boolean flag = (idDivisaoGrupoClassificacao !=null);
				if(flag) {
					aux1 = new HashMap(1);
					aux1.put("idDivisaoGrupoClassificacao", idDivisaoGrupoClassificacao);
					ldMap.put("divisaoGrupoClassificacao",aux1);
					ldList = limiteDescontoService.find(processMap4Find(ldMap));
				}
				if(flag && !ldList.isEmpty()) {
					LimiteDesconto ld = ((LimiteDesconto)ldList.get(0));
					percentualLimiteDesconto = new Double(ld.getPcLimiteDesconto().doubleValue());
					returnFlag = Long.valueOf(2);
				} else {
					// sem vinculo
					ldMap.remove("divisaoGrupoClassificacao");
					ldList = limiteDescontoService.find(processMap4Find(ldMap));
					if(!ldList.isEmpty()) {
						LimiteDesconto ld = ((LimiteDesconto)ldList.get(0));
						percentualLimiteDesconto = new Double(ld.getPcLimiteDesconto().doubleValue());
						returnFlag = Long.valueOf(3);
					} else {
						percentualLimiteDesconto = new Double(100.00);
						returnFlag = Long.valueOf(4);
					}
				}
			}
		}
		result.put("percentualLimiteDesconto",percentualLimiteDesconto);
    	result.put("returnFlag",returnFlag);
    	return result;
    }

	public void removeById(java.lang.Long id) {
		getGeneralidadeClienteService().removeById(id);
	}

	public List findDomainValues(String domainName) {
		return domainValueService.findDomainValues(domainName);
	}

	private GeneralidadeClienteService getGeneralidadeClienteService() {
		return (GeneralidadeClienteService) this.defaultService;
	}
	public void setGeneralidadeClienteService(GeneralidadeClienteService generalidadeClienteService) {
		this.defaultService = generalidadeClienteService;
	}
	public void setGrupoClassificacaoFilialService(GrupoClassificacaoFilialService grupoClassificacaoFilialService) {
		this.grupoClassificacaoFilialService = grupoClassificacaoFilialService;
	}
	public void setParcelaPrecoService(ParcelaPrecoService parcelaPrecoService) {
		this.parcelaPrecoService = parcelaPrecoService;
	}
	public void setLimiteDescontoService(LimiteDescontoService limiteDescontoService) {
		this.limiteDescontoService = limiteDescontoService;
	}
	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}
	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}
}