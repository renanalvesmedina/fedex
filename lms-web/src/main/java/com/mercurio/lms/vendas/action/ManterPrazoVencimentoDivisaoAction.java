package com.mercurio.lms.vendas.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Servico;
import com.mercurio.lms.configuracoes.model.service.UsuarioService;
import com.mercurio.lms.vendas.model.DiaVencimento;
import com.mercurio.lms.vendas.model.DivisaoCliente;
import com.mercurio.lms.vendas.model.PrazoVencimento;
import com.mercurio.lms.vendas.model.service.PrazoVencimentoService;

/**
 * Generated by: ADSM ActionGenerator
 * 
 * Não inserir documentação após ou remover a tag do XDoclet a seguir. O valor
 * do <code>id</code> informado abaixo deve ser utilizado para referenciar
 * este serviço.
 * 
 * @spring.bean id="lms.vendas.manterPrazoVencimentoDivisaoAction"
 */
public class ManterPrazoVencimentoDivisaoAction extends CrudAction {
	private UsuarioService usuarioService;
	private PrazoVencimentoService prazoVencimentoService;

	public void removeById(java.lang.Long id) {
		((PrazoVencimentoService) defaultService).removeById(id);
	}

	public ResultSetPage findPaginated(Map criteria) {
		return super.findPaginated(criteria);
	}

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		((PrazoVencimentoService) defaultService).removeByIds(ids);
	}

	public PrazoVencimento findById(java.lang.Long id) {
		PrazoVencimento retorno = ((PrazoVencimentoService) defaultService).findById(id);
		
		Comparator sort = new Comparator(){
			public int compare(Object o1, Object o2) {
				byte v1 = ((DiaVencimento)o1).getNrDiaVencimento().byteValue();
				byte v2 = ((DiaVencimento)o2).getNrDiaVencimento().byteValue();
				int retorno = 0; 

				if(v1 > v2) retorno = 1;
				else if(v1 < v2) retorno = -1;

				return retorno;
			};
		};

		Collections.sort(retorno.getDiasVencimento(), sort);
		
		return retorno;
	}

	public Serializable store(TypedFlatMap parameters) {
		PrazoVencimento prazoVencimento = new PrazoVencimento();

		prazoVencimento.setIdPrazoVencimento(parameters.getLong("idPrazoVencimento"));
		prazoVencimento.setTpModal(parameters.getDomainValue("tpModal"));
		prazoVencimento.setTpFrete(parameters.getDomainValue("tpFrete"));
		prazoVencimento.setTpDiaSemana(parameters.getDomainValue("tpDiaSemana"));
		prazoVencimento.setTpAbrangencia(parameters.getDomainValue("tpAbrangencia"));
		prazoVencimento.setNrPrazoPagamento(parameters.getShort("nrPrazoPagamento"));
		prazoVencimento.setNrPrazoPagamentoSolicitado(parameters.getShort("nrPrazoPagamentoSolicitado"));
		prazoVencimento.setNrPrazoPagamentoAprovado(parameters.getShort("nrPrazoPagamentoAprovado"));

		List mapsDiasVencimento = parameters.getList("diasVencimento");

		if(mapsDiasVencimento != null && !mapsDiasVencimento.isEmpty()){
			List diasVencimento = new ArrayList(mapsDiasVencimento.size());

			for(Iterator it = mapsDiasVencimento.iterator(); it.hasNext();){
				TypedFlatMap diaVenc = (TypedFlatMap)it.next();
				DiaVencimento diaVencimento = new DiaVencimento();
				diaVencimento.setPrazoVencimento(prazoVencimento);
				diaVencimento.setNrDiaVencimento(diaVenc.getByte("nrDiaVencimento"));
				diasVencimento.add(diaVencimento);
			}
			prazoVencimento.setDiasVencimento(diasVencimento);
		}
		
		if(parameters.getLong("servico.idServico") != null){
			Servico servico = new Servico();
			servico.setIdServico(parameters.getLong("servico.idServico"));
			prazoVencimento.setServico(servico);
		}

		DivisaoCliente divisaoCliente = new DivisaoCliente();
		divisaoCliente.setIdDivisaoCliente(parameters.getLong("divisaoCliente.idDivisaoCliente"));
		prazoVencimento.setDivisaoCliente(divisaoCliente);

		return ((PrazoVencimentoService) defaultService).store(prazoVencimento);
	}

	public TypedFlatMap findFilialNrPrazoCobranca(Long idDivisaoCliente) {
		return prazoVencimentoService.findFilialNrPrazoCobranca(idDivisaoCliente);
	}
	
	/*
	 * Chama verificação de permissões do usuário sobre uma filial / regional
	 */
	public Boolean validatePermissao(Long idFilial) {
		return getUsuarioService().validateAcessoFilialRegionalUsuario(idFilial);
	}
	
	//Getters and Setters
	public void setService(PrazoVencimentoService prazoVencimentoService) {
		this.defaultService = prazoVencimentoService;
	}

	public UsuarioService getUsuarioService() {
		return this.usuarioService;
	}

	public void setUsuarioService(UsuarioService usuarioService) {
		this.usuarioService = usuarioService;
	}
	
	public PrazoVencimentoService getPrazoVencimentoService() {
		return this.prazoVencimentoService;
}
	
	public void setPrazoVencimentoService(PrazoVencimentoService prazoVencimentoService) {
		this.prazoVencimentoService = prazoVencimentoService;
	}
}
