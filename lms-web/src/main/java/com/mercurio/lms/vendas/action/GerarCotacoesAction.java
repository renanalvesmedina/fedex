package com.mercurio.lms.vendas.action;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.MapUtils;
import org.apache.commons.lang.ArrayUtils;
import org.apache.commons.lang.BooleanUtils;
import org.apache.commons.lang.StringUtils;
import org.joda.time.YearMonthDay;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.coleta.model.PedidoColeta;
import com.mercurio.lms.coleta.model.service.PedidoColetaService;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.ConteudoParametroFilial;
import com.mercurio.lms.configuracoes.model.InscricaoEstadual;
import com.mercurio.lms.configuracoes.model.Moeda;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.configuracoes.model.Servico;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.configuracoes.model.service.ConteudoParametroFilialService;
import com.mercurio.lms.configuracoes.model.service.MoedaPaisService;
import com.mercurio.lms.configuracoes.model.service.ServicoService;
import com.mercurio.lms.configuracoes.model.service.TipoTributacaoIEService;
import com.mercurio.lms.configuracoes.model.service.UsuarioService;
import com.mercurio.lms.configuracoes.util.MapUtilsPlus;
import com.mercurio.lms.expedicao.DoctoServicoValidateFacade;
import com.mercurio.lms.expedicao.model.CalculoFrete;
import com.mercurio.lms.expedicao.model.DevedorDocServ;
import com.mercurio.lms.expedicao.model.DoctoServicoDadosCliente;
import com.mercurio.lms.expedicao.model.NaturezaProduto;
import com.mercurio.lms.expedicao.model.ParcelaServico;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.model.service.DimensaoService;
import com.mercurio.lms.expedicao.model.service.NaturezaProdutoService;
import com.mercurio.lms.expedicao.model.service.ServAdicionalDocServService;
import com.mercurio.lms.expedicao.util.ConstantesExpedicao;
import com.mercurio.lms.expedicao.util.ExpedicaoUtils;
import com.mercurio.lms.municipios.model.Aeroporto;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.Municipio;
import com.mercurio.lms.municipios.model.service.AeroportoService;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.MunicipioService;
import com.mercurio.lms.municipios.model.service.PpeService;
import com.mercurio.lms.tabelaprecos.model.ParcelaPreco;
import com.mercurio.lms.tabelaprecos.model.ProdutoEspecifico;
import com.mercurio.lms.tabelaprecos.model.TabelaPreco;
import com.mercurio.lms.tabelaprecos.model.service.ProdutoEspecificoService;
import com.mercurio.lms.util.AliasToTypedFlatMapResultTransformer;
import com.mercurio.lms.util.BigDecimalUtils;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.Cotacao;
import com.mercurio.lms.vendas.model.DivisaoCliente;
import com.mercurio.lms.vendas.model.service.ClienteService;
import com.mercurio.lms.vendas.model.service.CotacaoService;
import com.mercurio.lms.vendas.model.service.ParametroClienteService;
import com.mercurio.lms.vendas.model.service.ServicoAdicionalClienteService;
import com.mercurio.lms.vendas.util.ConstantesVendas;
import com.mercurio.lms.vendas.util.TabelasClienteUtil;
import com.mercurio.lms.vendas.util.VendasUtils;
import com.mercurio.lms.workflow.model.Pendencia;

/**
 * Generated by: ADSM ActionGenerator
 *
 * Não inserir documentação após ou remover a tag do XDoclet a seguir. O valor
 * do <code>id</code> informado abaixo deve ser utilizado para referenciar este
 * serviço.
 * 
 * @spring.bean id="lms.vendas.gerarCotacoesAction"
 */
public class GerarCotacoesAction extends CrudAction {

	private FilialService filialService;
	private MunicipioService municipioService;
	private PedidoColetaService pedidoColetaService;
	private ClienteService clienteService;
	private TipoTributacaoIEService tipoTributacaoIEService;
	private ServicoService servicoService;
	private MoedaPaisService moedaPaisService;
	private NaturezaProdutoService naturezaProdutoService;
	private ProdutoEspecificoService produtoEspecificoService;
	private AeroportoService aeroportoService;
	private PpeService ppeService;
	private UsuarioService usuarioService;
	private ParametroClienteService parametroClienteService;
	private ServicoAdicionalClienteService servicoAdicionalClienteService;
	private ServAdicionalDocServService servAdicionalDocServService;
	private ConfiguracoesFacade configuracoesFacade;
	private ConhecimentoService conhecimentoService;
	private DimensaoService dimensaoService;
	private DoctoServicoValidateFacade doctoServicoValidateFacade;
	private ConteudoParametroFilialService conteudoParametroFilialService;
	
	public void criaCotacao() {
		Cotacao cotacao = new Cotacao();
		VendasUtils.createCotacaoInSession(cotacao);
		ExpedicaoUtils.removeCalculoFreteFromSession();
	}

	public Map inicializaTela() {
		Map map = new HashMap();
		map.put("dtValidade",getCotacaoService().findNextDiaUtil());
		return map;
	}

	public Map findUsuarioLogado() {
		Map usuario = new HashMap();
		List lista = usuarioService.findLookupUsuarioFuncionario(SessionUtils
				.getUsuarioLogado().getIdUsuario(), null, null, null, null,
				null, true);
		for(Iterator i = lista.iterator();i.hasNext();) {
			usuario = (Map)i.next();
		}
		return usuario;
	}
 
	public List findFilial(TypedFlatMap criteria) {
		return filialService.findLookupBySgFilial(
				criteria.getString("sgFilial"), criteria.getString("tpAcesso"));
	} 

	public List findCliente(TypedFlatMap criteria) {
		List result = clienteService
				.findClienteByNrIdentificacaoValidaDadosBasicos(criteria
						.getString("pessoa.nrIdentificacao"));
		preencherClienteLookup(criteria, result);
		return result;
	}

	private void preencherClienteLookup(TypedFlatMap criteria, List result) {
		if(!result.isEmpty()) {
			Map cliente = (Map) result.get(0);
			Map pessoa = (Map) cliente.get("pessoa");
			pessoa.put("nrIdentificacao",
					FormatUtils.formatIdentificacao((String) ((Map) pessoa
							.get("tpIdentificacao")).get("value"),
							(String) pessoa.get("nrIdentificacao")));
			Long idCliente = (Long)cliente.get("idCliente");
			cliente.put("inscricaoEstadual", findInscricaoEstadual(idCliente));
			cliente.put("tipoOrigem", criteria.getString("tipoOrigem"));
		}
	}

	public List findClienteResponsavel(TypedFlatMap criteria) {
		List result = clienteService.findClienteByNrIdentificacao(criteria
				.getString("pessoa.nrIdentificacao"));
		preencherClienteLookup(criteria, result);
		return result;
	}

	private List findInscricaoEstadual(Long idPessoa) {
		if(idPessoa == null) {
			return null;
		}
		return tipoTributacaoIEService.findVigentesByIdPessoa(idPessoa);
	}

	public ResultSetPage findCotacaoPaginated(TypedFlatMap criteria) {
		return getCotacaoService().findCotacaoPaginated(criteria);
	}

	public Integer getRowCountCotacao(TypedFlatMap criteria) {
		return getCotacaoService().getRowCountCotacao(criteria);
	}

	public List findServico() {
		List servicos = servicoService
				.findByTpAbrangencia(ConstantesExpedicao.ABRANGENCIA_NACIONAL);
		Long idPadrao = Long.valueOf(
				((BigDecimal) configuracoesFacade
						.getValorParametro(Servico.SERVICO_PADRAO)).longValue());
		for (Iterator iter = servicos.iterator(); iter.hasNext();) {
			Map servicoMap = (Map) iter.next();
			if(idPadrao.equals(servicoMap.get("idServico"))){
				servicoMap.put("servicoPadrao", Boolean.TRUE);
				break;
			}
		}
		return servicos;
	}

	public List findMunicipio(TypedFlatMap criteria) {
		return municipioService.findByNmMunicipioTpSituacao(
				criteria.getString("nmMunicipio"), "A");
	}

	public Map findMunicipioByPessoa(TypedFlatMap criteria) {
		Long idPessoa = criteria.getLong("idPessoa");
		Map map = null;
		if( idPessoa != null ){
			Long idMunicipio = municipioService
					.findIdMunicipioByPessoa(idPessoa);
			map = municipioService.findDadosMunicipioById(idMunicipio);
		}
		return map;
	}

	public List findNaturezaProduto(){
		return naturezaProdutoService.findAllAtivo();
	}

	public List findMoeda(){
		return moedaPaisService.findMoedaByPaisUsuarioLogado();
	}

	public List findProdutoEspecifico(){
		return produtoEspecificoService.findAllAtivo();
	}

	public List findAeroporto(Map criteria){
		return aeroportoService.findLookupAeroporto(criteria);
	}

	public Cotacao findById(Long id) {
		return getCotacaoService().findById(id);
	}

	public Map findFilialAtendimento(TypedFlatMap criteria){
		Long idMunicipio = criteria.getLong("idMunicipio");
		Long idServico = criteria.getLong("idServico");
		String nrIdentificacaoRemetente = criteria
				.getString("nrIdentificacaoRemetente");
		String nrIdentificacaoResponsavel = criteria
				.getString("nrIdentificacaoResponsavel");
		Boolean isIndicadorColeta = Boolean.FALSE;
		String tipoIntegrante = criteria.getString("tipoIntegrante");
		Map<String, Object> atendimento = new HashMap<String, Object>();
		
		if (nrIdentificacaoRemetente != null
				|| nrIdentificacaoResponsavel != null) {
			nrIdentificacaoRemetente = nrIdentificacaoRemetente.replaceAll(
					"\\D", "");
			nrIdentificacaoResponsavel = nrIdentificacaoResponsavel.replaceAll(
					"\\D", "");
		}
		
		if ("Origem".equals(tipoIntegrante)
				|| ("Responsavel".equals(tipoIntegrante)
						&& nrIdentificacaoRemetente != null && nrIdentificacaoRemetente
							.equals(nrIdentificacaoResponsavel))) {
			isIndicadorColeta = Boolean.TRUE;
		}
		
		try {
			atendimento = ppeService.findAtendimentoMunicipio(idMunicipio,
					idServico, isIndicadorColeta, null, null, null, null, null,
					null, null, "N", null, null);
		} catch (RuntimeException e) {
			throw new BusinessException("LMS-01102");
		}
		
		return atendimento;
	}

	public Map findAeroportoAtendido(Long idFilial) {
		if(idFilial == null) {
			return null;
		}
		return filialService.findAeroportoFilial(idFilial);
	}

	public void removeServicosAdicionais() {
		VendasUtils.getCotacaoInSession().setServicoAdicionalClientes(null);
	}

	public TypedFlatMap getData(){
		TypedFlatMap retorno = new TypedFlatMap();
		YearMonthDay dtFinal = JTDateTimeUtils.getDataAtual();
		YearMonthDay dtInicial = dtFinal.minusDays(15);

		Filial filialUsuario = SessionUtils.getFilialSessao();
		retorno.put("filial.sgFilial", filialUsuario.getSgFilial());
		retorno.put("filial.idFilial", filialUsuario.getIdFilial());

		retorno.put("dtGeracaoCotacaoInicial", dtInicial);
		retorno.put("dtGeracaoCotacaoFinal", dtFinal);

		return retorno;
	}

	/**
	 * Métodos relacionados com a popup de observações da cotação
	 */
	public String findObservacao() {
		return VendasUtils.getCotacaoInSession().getObCotacao();
	}

	public void storeObservacao(TypedFlatMap parameters){
		VendasUtils.getCotacaoInSession().setObCotacao(
				parameters.getString("obCotacao"));
	}

	/**
	 * Métodos relativos a validação da cotação, rotina ValidaCotacao. A rotina
	 * tem por objetivo CARREGAR os dados informados na tela Gerar Cotação.
	 */
	@SuppressWarnings("rawtypes")
	public Map validateCotacaoPrimeiraFase(TypedFlatMap parameters){
		populateCotacao(parameters);
		return validateCotacaoSegundaFase();
	}
	
	/**
	 * Métodos relativos a validação da cotação, rotina ValidaCotacao. A rotina
	 * tem por objetivo VALIDAR os dados informados na tela Gerar Cotação.
	 */
	public Map validateCotacaoSegundaFase(){
		Cotacao cotacao = VendasUtils.getCotacaoInSession();
		getCotacaoService().validateCotacao(cotacao);

		Map retorno = new HashMap();
		retorno.put("dtGeracaoCotacao", cotacao.getDtGeracaoCotacao());
		retorno.put("dtValidade", cotacao.getDtValidade());
		retorno.put("nrPpe", cotacao.getNrPpe());
		return retorno;
	}
	
	private void validateAlteracaCotacao(TypedFlatMap parameters){
		Cotacao cotacao = VendasUtils.getCotacaoInSession();
		if( cotacao.getServico() != null ){
			Servico servico = new Servico();
			servico.setIdServico(parameters.getLong("servico.idServico"));
			if( !cotacao.getServico().equals(servico)){
				cotacao.setDivisaoCliente(null);
				ExpedicaoUtils.removeCalculoFreteFromSession();
			}
		}
		CalculoFrete calculoFrete = ExpedicaoUtils
				.getCalculoFreteInSession(false);
		if( calculoFrete != null ){
			if( valoresAlterados(cotacao,parameters) ){
				calculoFrete.setBlRecalculoCotacao(Boolean.TRUE);
			}
		}
	}

	private Boolean valoresAlterados(Cotacao cotacao,TypedFlatMap parameters){
		String nmResponsavel = ""; 
		String nmSolicitou = ""; 
		String nmDestino = ""; 

		if( cotacao.getClienteByIdCliente() != null ){
			nmResponsavel = cotacao.getClienteByIdCliente().getPessoa()
					.getNmPessoa();
		}else{
			nmResponsavel = cotacao.getNmResponsavelFrete();
		}
		
		if (valoresDiferentes(nmResponsavel,
				parameters.getString("clienteByIdCliente.pessoa.nmPessoa"))) {
			ExpedicaoUtils.removeCalculoFreteFromSession();
			cotacao.setDivisaoCliente(null);
			return true;
		}

		if( cotacao.getClienteByIdClienteSolicitou() != null ){
			nmSolicitou = cotacao.getClienteByIdClienteSolicitou().getPessoa()
					.getNmPessoa();
		}else{
			nmSolicitou = cotacao.getNmClienteRemetente();
		}
		if (valoresDiferentes(
				nmSolicitou,
				parameters
						.getString("clienteByIdClienteSolicitou.pessoa.nmPessoa"))) {
			return true;
		}

		if( cotacao.getClienteByIdClienteDestino() != null ){
			nmDestino = cotacao.getClienteByIdClienteDestino().getPessoa()
					.getNmPessoa();
		}else{
			nmDestino = cotacao.getNmClienteDestino();
		}
		if (valoresDiferentes(nmDestino,
				parameters
						.getString("clienteByIdClienteDestino.pessoa.nmPessoa"))) {
			return true;
		}
		
		Municipio mOrigem  = cotacao.getMunicipioByIdMunicipioOrigem();
		if (valoresDiferentes(mOrigem.getIdMunicipio(),
				parameters.getLong("municipioByIdMunicipioOrigem.idMunicipio"))) {
			ExpedicaoUtils.removeCalculoFreteFromSession();
			cotacao.setDivisaoCliente(null);
			return true;
		}

		Municipio mDestino  = cotacao.getMunicipioByIdMunicipioDestino();
		if (valoresDiferentes(mDestino.getIdMunicipio(),
				parameters.getLong("municipioByIdMunicipioDestino.idMunicipio"))) {
			ExpedicaoUtils.removeCalculoFreteFromSession();
			cotacao.setDivisaoCliente(null);
			return true;
		}
		
		Municipio mResponsavel  = cotacao.getMunicipioByIdMunicipioResponsavel();
		if (valoresDiferentes(
				mResponsavel.getIdMunicipio(),
				parameters
						.getLong("municipioByIdMunicipioResponsavel.idMunicipio"))) {
			ExpedicaoUtils.removeCalculoFreteFromSession();
			cotacao.setDivisaoCliente(null);
			return true;
		}
		
		BigDecimal vlM1 = BigDecimalUtils.round(cotacao.getVlMercadoria(), 3,
				BigDecimalUtils.ROUND_DOWN);
		BigDecimal vlM2 = BigDecimalUtils.round(
				parameters.getBigDecimal("vlMercadoria"), 3,
				BigDecimalUtils.ROUND_DOWN);
		if( valoresDiferentes(vlM1,vlM2)){
			return true;
		}
		
		BigDecimal vlC1 = BigDecimalUtils.round(cotacao.getPsCubado(), 3,
				BigDecimalUtils.ROUND_DOWN);
		BigDecimal vlC2 = BigDecimalUtils.round(
				parameters.getBigDecimal("psCubado"), 3,
				BigDecimalUtils.ROUND_DOWN);
		if( valoresDiferentes(vlC1,vlC2)){
			return true;
		}

		BigDecimal vlR1 = BigDecimalUtils.round(cotacao.getPsReal(), 3,
				BigDecimalUtils.ROUND_DOWN);
		BigDecimal vlR2 = BigDecimalUtils.round(
				parameters.getBigDecimal("psReal"), 3,
				BigDecimalUtils.ROUND_DOWN);
		if( valoresDiferentes(vlR1,vlR2) ){
			return true;
		}

		if (valoresDiferentes(cotacao.getNrNotaFiscal(),
				parameters.getInteger("nrNotaFiscal"))) {
			return true;
		}	
		
		if (valoresDiferentes(cotacao.getTpFrete(),
				parameters.getDomainValue("tpFrete"))) {
			return true;
		}
		if (valoresDiferentes(cotacao.getDsContato(),
				parameters.getString("dsContato"))) {
			return true;
		}
		if (valoresDiferentes(cotacao.getDsEmail(),
				parameters.getString("dsEmail"))) {
			return true;
		}
		if (valoresDiferentes(cotacao.getNrTelefone(),
				parameters.getLong("nrTelefone"))) {
			return true;
		}
		if( valoresDiferentes(cotacao.getNrFax(),parameters.getLong("nrFax")) ){
			return true;
		}
		if (valoresDiferentes(cotacao.getTpCalculo(),
				parameters.getDomainValue("tpCalculo"))) {
			return true;
		}

		NaturezaProduto np = new NaturezaProduto();
		np.setIdNaturezaProduto(parameters
				.getLong("naturezaProduto.idNaturezaProduto"));
		if( valoresDiferentes(cotacao.getNaturezaProduto(),np) ){
			return true;
		}
		
		Aeroporto apO1= null;
		Aeroporto apO2= new Aeroporto();
		apO2.setIdAeroporto(parameters
				.getLong("aeroportoByIdAeroportoOrigem.idAeroporto"));
		if( cotacao.getAeroportoByIdAeroportoOrigem() == null){
			apO1 = new Aeroporto();
		}else{
			apO1 = cotacao.getAeroportoByIdAeroportoOrigem();
		}
		
		if( valoresDiferentes(apO1,apO2) ){
			return true;
		}

		Aeroporto apD1 = null;
		Aeroporto apD2 = new Aeroporto();
		apD2.setIdAeroporto(parameters
				.getLong("aeroportoByIdAeroportoDestino.idAeroporto"));
		if( cotacao.getAeroportoByIdAeroportoOrigem() == null){
			apD1 = new Aeroporto();
		}else{
			apD1 = cotacao.getAeroportoByIdAeroportoDestino();
		}
		if( valoresDiferentes(apD1,apD2) ){
			return true;
		}

		if (valoresDiferentes(cotacao.getBlColetaEmergencia(),
				parameters.getBoolean("blColetaEmergencia"))) {
			return true;
		}

		if (valoresDiferentes(cotacao.getBlEntregaEmergencia(),
				parameters.getBoolean("blEntregaEmergencia"))) {
			return true;
		}

		ProdutoEspecifico pe1 = null;
		ProdutoEspecifico pe2 = new ProdutoEspecifico();
		pe2.setIdProdutoEspecifico(parameters
				.getLong("produtoEspecifico.idProdutoEspecifico"));
		if( cotacao.getProdutoEspecifico() == null){
			pe1 = new ProdutoEspecifico();
		}else{
			pe1 = cotacao.getProdutoEspecifico();
		}
		if( valoresDiferentes(pe1,pe2)) {
			return true;
		}
		
		return false;
	}

	private Boolean valoresDiferentes(Object o1,Object o2){
		if( o1 == null && o2 == null ){
			return false;
		}
		
		Object v = o1;
		if( v == null ){
			v = o2;
			o2 = o1;
			o1 = v;
		}
		if( o1 instanceof String ){
			if( o2 == null ){
				o2 = new String();
			}
		}else if( o1 instanceof Integer  ){
			if( o2 == null ){
				o2 = Integer.valueOf(0);
			}
			return ((Integer) o1).compareTo((Integer)o2) != 0;
		}else if( o1 instanceof Long  ){
			if( o2 == null ){
				o2 = Long.valueOf(0);
			}
			return ((Long) o1).compareTo((Long)o2) != 0;
		}else if( o1 instanceof BigDecimal ){
			if( o2 == null ){
				o2 = BigDecimal.ZERO;
			}
			return ((BigDecimal) o1).compareTo((BigDecimal)o2) != 0;
		}else if( o1 instanceof DomainValue ){
			if( o2 == null ){
				o2 = new DomainValue("");
			}
		}
		return !o1.equals(o2);
	}
	
	/**
	 * Popula cotacao com os dados da tela
	 * 
	 * @param parameters
	 */
	private void populateCotacao(TypedFlatMap parameters) {
		validateAlteracaCotacao(parameters);
		
		DomainValue tpCalculo = parameters.getDomainValue("tpCalculo");

		Cotacao cotacao = getCotacao(
				parameters.getLong("clienteByIdClienteSolicitou.idCliente"),
				parameters.getLong("municipioByIdMunicipioOrigem.idMunicipio"),
				tpCalculo.getValue());
		cotacao.setBlFrete(parameters.getBoolean("blFrete"));
		cotacao.setBlServicosAdicionais(parameters
				.getBoolean("blServicosAdicionais"));
		cotacao.setBlMercadoriaExportacao(parameters
				.getBoolean("blMercadoriaExportacao"));

		// Servico da cotacao
		Servico servico = new Servico();
		servico.setIdServico(parameters.getLong("servico.idServico"));
		servico.setTpAbrangencia(parameters
				.getDomainValue("servico.tpAbrangencia"));
		servico.setTpModal(parameters.getDomainValue("servico.tpModal"));
		cotacao.setServico(servico);

		cotacao.setTpFrete(parameters.getDomainValue("tpFrete"));
		cotacao.setTpCalculo(tpCalculo);

		cotacao.setDsContato(parameters.getString("dsContato"));
		cotacao.setDsEmail(parameters.getString("dsEmail"));
		cotacao.setNrTelefone(parameters.getLong("nrTelefone"));
		cotacao.setNrFax(parameters.getLong("nrFax"));
		cotacao.setQtVolumes(parameters.getLong("qtVolumes"));

		//*** Polpula Integrantes
		populateIntegrantesCotacao(parameters, cotacao);
		//*** Popula Dados Nacionais
		populateDadosNacionaisCotacao(parameters, cotacao);
		//*** Popula Dados Frete Aereo
		populateDadosFreteAereo(parameters, cotacao);
		//*** Tipo Docimento Cotação
		getCotacaoService().defineDocumentoCotacao(cotacao);

		VendasUtils.setCotacaoInSession(cotacao);
		
	}

	/**
	 * Verifica se ClienteRemetente ou MunicipioOrigem foi modificado, caso
	 * afirmativo exclui as liberações anteriores.
	 * 
	 * @param idClienteSolicitou
	 * @param idMunicipio
	 * @param tpCalculo
	 * @return
	 */
	private Cotacao getCotacao(Long idClienteSolicitou, Long idMunicipio,
			String tpCalculo) {
		Cotacao cotacao = VendasUtils.getCotacaoInSession();

		//Cliente Solicitou
		Cliente clienteSolicitou = cotacao.getClienteByIdClienteSolicitou();
		if(idClienteSolicitou != null) {
			if (clienteSolicitou == null
					|| !idClienteSolicitou.equals(clienteSolicitou
							.getIdCliente())) {
				cotacao.setLiberacoesDoctoServico(null);
			}
		} else if (clienteSolicitou != null) {
			cotacao.setLiberacoesDoctoServico(null);
		}
		//Municipio
		if (cotacao.getMunicipioByIdMunicipioOrigem() != null
				&& !idMunicipio.equals(cotacao
						.getMunicipioByIdMunicipioOrigem().getIdMunicipio())) {
			cotacao.setLiberacoesDoctoServico(null);
		}
		//Tipo de Calculo do Frete
		if (cotacao.getTpCalculo() != null
				&& !tpCalculo.equals(cotacao.getTpCalculo().getValue())) {
			cotacao.setLiberacoesDoctoServico(null);
		}
		return cotacao;
	}

	/**
	 * autor Julio Cesar Fernandes Corrêa 19/01/2006
	 * 
	 * @param parameters
	 * @param cotacao
	 */
	private void populateDadosFreteAereo(TypedFlatMap parameters,
			Cotacao cotacao) {
		// Aeroporto origem
		Long idAeroOrigem = parameters
				.getLong("aeroportoByIdAeroportoOrigem.idAeroporto");
		if(idAeroOrigem != null){
			Aeroporto aeroporto = new Aeroporto();
			aeroporto.setIdAeroporto(idAeroOrigem);
			cotacao.setAeroportoByIdAeroportoOrigem(aeroporto);
		} else {
			cotacao.setAeroportoByIdAeroportoOrigem(null);
		}
		// Aeroporto destino
		Long idAeroDest = parameters
				.getLong("aeroportoByIdAeroportoDestino.idAeroporto");
		if(idAeroDest != null){
			Aeroporto aeroporto = new Aeroporto();
			aeroporto.setIdAeroporto(idAeroDest);
			cotacao.setAeroportoByIdAeroportoDestino(aeroporto);
		} else {
			cotacao.setAeroportoByIdAeroportoDestino(null);
		}
		cotacao.setBlColetaEmergencia(parameters
				.getBoolean("blColetaEmergencia"));
		cotacao.setBlEntregaEmergencia(parameters
				.getBoolean("blEntregaEmergencia"));

		Long idProduto = parameters
				.getLong("produtoEspecifico.idProdutoEspecifico");
		if(idProduto != null){
			ProdutoEspecifico produtoEspecifico = new ProdutoEspecifico();
			produtoEspecifico.setIdProdutoEspecifico(idProduto);
			cotacao.setProdutoEspecifico(produtoEspecifico);
		} else {
			cotacao.setProdutoEspecifico(null);
		}
	}

	/**
	 * autor Julio Cesar Fernandes Corrêa 19/01/2006
	 * 
	 * @param parameters
	 * @param cotacao
	 */
	private void populateDadosNacionaisCotacao(TypedFlatMap parameters,
			Cotacao cotacao) {
		cotacao.setNrNotaFiscal(parameters.getInteger("nrNotaFiscal"));

		//Moeda
		Moeda moeda = new Moeda();
		moeda.setIdMoeda(parameters.getLong("moeda.idMoeda"));
		cotacao.setMoeda(moeda);

		cotacao.setVlMercadoria(parameters.getBigDecimal("vlMercadoria"));
		cotacao.setPsReal(parameters.getBigDecimal("psReal"));
		cotacao.setPsCubado(parameters.getBigDecimal("psCubado"));

		/** Valida psReal e psCubado */
		verifyLimitePeso(cotacao);
		
		//Natureza do produto
		Long idNatureza = parameters
				.getLong("naturezaProduto.idNaturezaProduto");
		if(idNatureza != null){
			NaturezaProduto naturezaProduto = new NaturezaProduto();
			naturezaProduto.setIdNaturezaProduto(idNatureza);
			cotacao.setNaturezaProduto(naturezaProduto);
		} else
			cotacao.setNaturezaProduto(null);

		YearMonthDay hoje = JTDateTimeUtils.getDataAtual();
		cotacao.setDtGeracaoCotacao(hoje);
		cotacao.setDtValidade(getCotacaoService().findNextDiaUtil());
	}

	/**
	 * Valida o LIMITE MAXIMO DE VOLUMES PARA CALCULAR FRETE
	 * 
	 * @param cotacao
	 */
	private void verifyLimitePeso(final Cotacao cotacao) {
		final BigDecimal limitePesoVolume = doctoServicoValidateFacade
				.findLimitePesoVolumeCalculoFrete();
		if (BooleanUtils.isFalse(doctoServicoValidateFacade.validateLimitePeso(
				cotacao.getPsReal(), limitePesoVolume))) {
			throw new BusinessException("LMS-04349", new Object[] {
					FormatUtils.formatDecimal(
							TabelasClienteUtil.FORMATO_3_CASAS,
							cotacao.getPsReal()),
					FormatUtils.formatDecimal(
							TabelasClienteUtil.FORMATO_3_CASAS,
							limitePesoVolume) });
		}
		if (BooleanUtils.isFalse(doctoServicoValidateFacade.validateLimitePeso(
				cotacao.getPsCubado(), limitePesoVolume))) {
			throw new BusinessException("LMS-04350", new Object[] {
					FormatUtils.formatDecimal(
							TabelasClienteUtil.FORMATO_3_CASAS,
							cotacao.getPsCubado()),
					FormatUtils.formatDecimal(
							TabelasClienteUtil.FORMATO_3_CASAS,
							limitePesoVolume) });
		}
	}
	
	/**
	 * @param parameters
	 * @param cotacao
	 */
	private void populateIntegrantesCotacao(TypedFlatMap parameters,
			Cotacao cotacao) {
		// Remetente
		Long idClienteSolicitou = parameters
				.getLong("clienteByIdClienteSolicitou.idCliente");
		if(idClienteSolicitou != null){
			cotacao.setClienteByIdClienteSolicitou(clienteService
					.findById(idClienteSolicitou));
		} else {
			cotacao.setClienteByIdClienteSolicitou(null);
			cotacao.setNrIdentifClienteRem(parameters
					.getString("clienteByIdClienteSolicitou.pessoa.nrIdentificacao"));
		}
		cotacao.setNmClienteRemetente(parameters
				.getString("clienteByIdClienteSolicitou.pessoa.nmPessoa"));
		// Situacao tributária do remetente
		cotacao.setTpSitTributariaRemetente(parameters
				.getDomainValue("clienteByIdClienteSolicitou.tpSituacaoTributaria"));
		// IE Remetente
		Long idIERemetente = parameters
				.getLong("clienteByIdClienteSolicitou.idInscricaoEstadual");
		if (idIERemetente != null) {
			InscricaoEstadual ieRemetente = new InscricaoEstadual();
			ieRemetente.setIdInscricaoEstadual(idIERemetente);
			cotacao.setInscricaoEstadualRemetente(ieRemetente);
		} else {
			cotacao.setInscricaoEstadualRemetente(null);
		}

		// Destinatário
		Long idClienteDestino = parameters
				.getLong("clienteByIdClienteDestino.idCliente");
		if(idClienteDestino != null){
			cotacao.setClienteByIdClienteDestino(clienteService
					.findById(idClienteDestino));
		} else {
			cotacao.setClienteByIdClienteDestino(null);
			cotacao.setNrIdentifClienteDest(parameters
					.getString("clienteByIdClienteDestino.pessoa.nrIdentificacao"));
		}
		cotacao.setNmClienteDestino(parameters
				.getString("clienteByIdClienteDestino.pessoa.nmPessoa"));
		// Situacao tributária do destinatário
		cotacao.setTpSitTributariaDestinatario(parameters
				.getDomainValue("clienteByIdClienteDestino.tpSituacaoTributaria"));
		// IE Destinatario
		Long idIEDestinatario = parameters
				.getLong("clienteByIdClienteDestino.idInscricaoEstadual");
		if (idIEDestinatario != null) {
			InscricaoEstadual ieDestinatario = new InscricaoEstadual();
			ieDestinatario.setIdInscricaoEstadual(idIEDestinatario);
			cotacao.setInscricaoEstadualDestinatario(ieDestinatario);
		} else {
			cotacao.setInscricaoEstadualDestinatario(null);
		}

		// Responsavel
		Long idCliente = parameters.getLong("clienteByIdCliente.idCliente");
		if(idCliente != null){
			cotacao.setClienteByIdCliente(clienteService.findById(idCliente));
		} else {
			cotacao.setClienteByIdCliente(null);
			cotacao.setNrIdentifResponsFrete(parameters
					.getString("clienteByIdCliente.pessoa.nrIdentificacao"));
		}
		cotacao.setNmResponsavelFrete(parameters
				.getString("clienteByIdCliente.pessoa.nmPessoa"));
		// Situacao tributária do responsável
		cotacao.setTpSitTributariaResponsavel(parameters
				.getDomainValue("clienteByIdCliente.tpSituacaoTributaria"));
		
		// IE Responsavel
		Long idIEResponsavel = parameters
				.getLong("clienteByIdCliente.idInscricaoEstadual");
		if (idIEResponsavel != null) {
			InscricaoEstadual ieResponsavel = new InscricaoEstadual();
			ieResponsavel.setIdInscricaoEstadual(idIEResponsavel);
			cotacao.setInscricaoEstadualResponsavel(ieResponsavel);
		} else {
			cotacao.setInscricaoEstadualResponsavel(null);
		}

		Cliente responsavel = cotacao.getClienteByIdCliente();
		String tipoPessoa = "";
		if (responsavel == null || responsavel.getPessoa() == null
				|| responsavel.getPessoa().getTpPessoa() == null) {
			tipoPessoa = parameters.getString("tpDevedorFrete");
		}else{
			tipoPessoa = responsavel.getPessoa().getTpPessoa().getValue();
		}

		if ("F".equals(tipoPessoa)
				&& "C".equals(cotacao.getTpFrete().getValue())) {
			throw new BusinessException("LMS-01195");
		}
		
		// Municipio Responsavel
		Municipio municipioResponsavel = new Municipio();
		municipioResponsavel.setIdMunicipio(parameters
				.getLong("municipioByIdMunicipioResponsavel.idMunicipio"));
		cotacao.setMunicipioByIdMunicipioResponsavel(municipioResponsavel);

		// Municipio Origem
		Municipio municipioOrigem = new Municipio();
		municipioOrigem.setIdMunicipio(parameters
				.getLong("municipioByIdMunicipioOrigem.idMunicipio"));
		cotacao.setMunicipioByIdMunicipioOrigem(municipioOrigem);

		// Municipio Destino
		Municipio destino = new Municipio();
		destino.setIdMunicipio(parameters
				.getLong("municipioByIdMunicipioDestino.idMunicipio"));
		cotacao.setMunicipioByIdMunicipioDestino(destino);
		cotacao.setMunicipioByIdMunicipioEntrega(destino);
		
		//Filial Responsavel
		Filial filialResponsavel = new Filial();
		filialResponsavel.setIdFilial(parameters
				.getLong("filialByIdFilialResponsavel.idFilial"));
		cotacao.setFilialByIdFilialResponsavel(filialResponsavel);

		//Filial origem
		Filial filialOrigem = new Filial();
		filialOrigem.setIdFilial(parameters
				.getLong("filialByIdFilialOrigem.idFilial"));
		cotacao.setFilialByIdFilialOrigem(filialOrigem);

		//	Filial destino
		Filial filialDestino = filialService.findById(parameters
				.getLong("filialByIdFilialDestino.idFilial"));
		cotacao.setFilialByIdFilialDestino(filialDestino);

		DoctoServicoDadosCliente dadosCliente = new DoctoServicoDadosCliente();
		dadosCliente.setIdTipoLocalizacaoOrigem(parameters
				.getLong("idTipoLocalizacaoOrigem"));
		dadosCliente.setIdTipoLocalizacaoDestino(parameters
				.getLong("idTipoLocalizacaoDestino"));
		cotacao.setDadosCliente(dadosCliente);
		cotacao.setTpDevedorFrete(parameters.getDomainValue("tpDevedorFrete"));
		Short nrPpe = null;
		if (cotacao.getClienteByIdClienteDestino() != null
				&& cotacao.getClienteByIdClienteSolicitou() != null) {
			nrPpe = getCotacaoService()
					.executeCalcularPpeClienteEspecial(
							cotacao.getClienteByIdClienteSolicitou()
									.getPessoa().getNrIdentificacao(),
							cotacao.getClienteByIdClienteDestino().getPessoa()
									.getNrIdentificacao(),
							cotacao.getClienteByIdCliente().getPessoa()
									.getNrIdentificacao(),
							cotacao.getServico().getIdServico(),
							cotacao.getMunicipioByIdMunicipioOrigem()
									.getIdMunicipio(),
							cotacao.getMunicipioByIdMunicipioDestino()
									.getIdMunicipio(),
							cotacao.getFilialByIdFilialOrigem().getIdFilial(),
							cotacao.getFilialByIdFilialDestino().getIdFilial());
		} else {
			nrPpe = getCotacaoService()
					.validateCalculoPpe(
							cotacao.getServico().getIdServico(),
							cotacao.getMunicipioByIdMunicipioOrigem()
									.getIdMunicipio(),
							cotacao.getMunicipioByIdMunicipioDestino()
									.getIdMunicipio());
		}

		cotacao.setNrPpe(nrPpe);
	}

	public Map calculaPpe(TypedFlatMap parameters){
		Long idServico = MapUtils.getLong(parameters, "idServico");
		Long idMunicipioOrigem = MapUtils.getLong(parameters,
				"idMunicipioOrigem");
		Long idMunicipioDestino = MapUtils.getLong(parameters,
				"idMunicipioDestino");
		String nrIdentificacaoClienteRemetente = substituirCaracteres(MapUtils
				.getString(parameters, "nrIdentificacaoClienteRemetente"));
		String nrIdentificacaoClienteDestinatario = substituirCaracteres(MapUtils
				.getString(parameters, "nrIdentificacaoClienteDestinatario"));
		String nrIdentificacaoClienteDevedorFrete = substituirCaracteres(MapUtils
				.getString(parameters, "nrIdentificacaoClienteDevedorFrete"));
		Long idMunicipioFilialOrigem = MapUtils.getLong(parameters,
				"idMunicipioFilialOrigem");
		Long idFilialOrigem = MapUtils.getLong(parameters, "idFilialOrigem");
		Long idFilialDestino = MapUtils.getLong(parameters, "idFilialDestino");
		Map result = new HashMap();
		Short nrPpe = null;
		
		Cliente clienteRemetente = clienteService
				.findByNrIdentificacao(nrIdentificacaoClienteRemetente);
		Cliente clienteDestinatario = clienteService
				.findByNrIdentificacao(nrIdentificacaoClienteDestinatario);
		
		Boolean contemDadosBasicos = idServico != null
				&& idMunicipioOrigem != null && idMunicipioDestino != null;
		if (contemDadosBasicos && clienteRemetente != null
				&& clienteDestinatario != null) {
			nrPpe = getCotacaoService().executeCalcularPpeClienteEspecial(
					nrIdentificacaoClienteRemetente,
					nrIdentificacaoClienteDestinatario,
					nrIdentificacaoClienteDevedorFrete, idServico,
					idMunicipioFilialOrigem, idMunicipioDestino,
					idFilialOrigem, idFilialDestino);
		} else if( contemDadosBasicos ){
			nrPpe = getCotacaoService().validateCalculoPpe(idServico,
					idMunicipioOrigem, idMunicipioDestino);
		}
		
		result.put("nrPpe", nrPpe);
		return result; 
	}

	private String substituirCaracteres(String nrIdentificacao) {
		nrIdentificacao = nrIdentificacao.replaceAll("\\.", "");
		nrIdentificacao = nrIdentificacao.replaceAll("\\/", "");
		nrIdentificacao = nrIdentificacao.replaceAll("-", "");
		return nrIdentificacao;
	}

	/**
	 * Métodos relativos ao calculo da cotação feito via popup cálculo da
	 * cotação.
	 */
	public List findDivisaoCliente() {
		Cotacao cotacao = VendasUtils.getCotacaoInSession();
		List result = getCotacaoService().findDivisaoCliente(cotacao);
		return result;
	}

	public Map configureCalculoFrete(TypedFlatMap criteria) {
		Map result = new HashMap();
		Boolean calcular = false;
		Cotacao cotacao = VendasUtils.getCotacaoInSession();
		Long idCotacao = MapUtils.getLong(criteria,"idCotacao");
		result.put("idCotacao", idCotacao);
		Long idDivisao = null;
		if( cotacao.getDivisaoCliente() != null ){
			idDivisao = cotacao.getDivisaoCliente().getIdDivisaoCliente();
		}

		List<DivisaoCliente> divisoesCliente = findDivisaoCliente();
		
		List<Map> divisoes = new ArrayList<Map>();
		if( divisoesCliente != null ){
			for( DivisaoCliente d : divisoesCliente ){
				Map divisao = new HashMap();
				divisao.put("idDivisaoCliente", d.getIdDivisaoCliente());
				divisao.put("dsDivisaoCliente", d.getDsDivisaoCliente());
				divisoes.add(divisao);
			}
		}
		result.put("divisoesCliente", divisoes);
		if( idDivisao == null ){
			if( divisoesCliente == null || divisoesCliente.size() < 2 ){
				calcular = true;
				if( divisoesCliente != null && divisoesCliente.size() > 0){
					idDivisao = divisoesCliente .get(0).getIdDivisaoCliente();
				}
			}
		}else{
			calcular = true;
		}
		
		Map calculo = null;
		if( calcular ){
			calculo = calculaCotacaoGeral(idDivisao,true);
		}
		
		result.put("calculo", calculo);

		return result;
	}

	public Map calculaCotacao(Long idDivisaoCliente) {
		return calculaCotacaoGeral(idDivisaoCliente,false);
	}
	
	public Map calculaCotacaoGeral(Long idDivisaoCliente,Boolean primeraVez) {
		Boolean alterada = getCotacaoService().findAlteracaoCotacao();
		
		Cotacao cotacao = VendasUtils.getCotacaoInSession();
		
		CalculoFrete calculoFrete = ExpedicaoUtils
				.getCalculoFreteInSession(false);
		if( alterada || !primeraVez){
			if (!primeraVez
					&& ((cotacao.getDivisaoCliente() == null) || (cotacao
							.getDivisaoCliente().getIdDivisaoCliente() != idDivisaoCliente))) {
				calculoFrete = getCotacaoService()
						.executeConfigureCalculoFrete(cotacao, true);
			}else{
				calculoFrete = getCotacaoService()
						.executeConfigureCalculoFrete(cotacao, false);
			}
			if(idDivisaoCliente != null){
				DivisaoCliente divisaoCliente = new DivisaoCliente();
				divisaoCliente.setIdDivisaoCliente(idDivisaoCliente);
				cotacao.setDivisaoCliente(divisaoCliente);
				calculoFrete.setIdDivisaoCliente(idDivisaoCliente);
			}
			
			/*
			 * Está rotina abaixo deve ser executada , pois devido a diversas
			 * alterações no cálculo de frete foi decidido pelos analistas obter
			 * o responsavel do frete através da lista de DevedorDocServ no
			 * conhecimento
			 */
			DevedorDocServ devedor = new DevedorDocServ();
			devedor.setCliente(cotacao.getClienteByIdCliente());
			List<DevedorDocServ> devedorDocServs = new ArrayList<DevedorDocServ>();
			devedorDocServs.add(devedor);
			calculoFrete.getDoctoServico().setDevedorDocServs(devedorDocServs);
	
			getCotacaoService().findCalculoCotacao(cotacao, calculoFrete);
			alterada = true;
		}
		Map calculo = montarParcelasGrid(cotacao, calculoFrete);
		if( cotacao.getIdCotacao() == null ){
			alterada = true;
		}
		calculo.put("idDivisaoCliente", calculoFrete.getIdDivisaoCliente());
		TabelaPreco tabelaPreco = calculoFrete.getTabelaPreco();
		Map tabela = new HashMap();
		if( tabelaPreco != null ){
			StringBuilder sb = new StringBuilder();
			sb.append(tabelaPreco.getTipoTabelaPreco()
					.getTpTipoTabelaPrecoNrVersao());
			sb.append("-");
			sb.append(tabelaPreco.getSubtipoTabelaPreco()
					.getTpSubtipoTabelaPreco());
			tabela.put("idTabelaPreco",tabelaPreco.getIdTabelaPreco());
			tabela.put("nmTabelaPreco",sb.toString());
		}
		calculo.putAll(tabela);
		calculo.put("alterado", alterada);
		
		validaCalculoFreteZerado(calculoFrete);
		
		return calculo; 
	}
	
	private Map montarParcelasGrid(Cotacao cotacao, CalculoFrete calculo) {
		Map retorno = new HashMap();
		if (cotacao.getBlFrete().booleanValue()
				&& calculo.getParcelas() != null) {
			List parcelas = new ArrayList();
			for (Iterator iter = calculo.getParcelas().iterator(); iter
					.hasNext();) {
				ParcelaServico parcelaServico = (ParcelaServico) iter.next();
				ParcelaPreco parcelaPreco = parcelaServico.getParcelaPreco();
				Map parcela = new HashMap();
				parcela.put("vlParcela", parcelaServico.getVlParcela());
				parcela.put("dsParcela", parcelaPreco.getNmParcelaPreco());
				parcelas.add(parcela);
			}
			retorno.put("parcelas", parcelas);
		}
		if (cotacao.getBlServicosAdicionais().booleanValue()
				&& calculo.getServicosAdicionais() != null) {
			List servicos = new ArrayList();
			for (Iterator iter = calculo.getServicosAdicionais().iterator(); iter
					.hasNext();) {
				ParcelaServico parcelaServico = (ParcelaServico) iter.next();
				ParcelaPreco parcelaPreco = parcelaServico.getParcelaPreco();
				Map parcela = new HashMap();
				parcela.put("vlServico", parcelaServico.getVlParcela());
				parcela.put("dsServico", parcelaPreco.getNmParcelaPreco());
				servicos.add(parcela);
			}
			retorno.put("servicos", servicos);
		}
		retorno.put("vlDesconto", calculo.getVlDesconto());
		retorno.put("vlTotalFrete", calculo.getVlTotalParcelas());
		retorno.put("vlTotalServico", calculo.getVlTotalServicosAdicionais());

		retorno.put("vlTotalCotacao", calculo.getVlTotal());
		retorno.put("vlIcmsSubstituicaoTributaria",
				calculo.getVlRetensaoSituacaoTributaria());
		retorno.put("vlLiquido", calculo.getVlDevido());
		retorno.put("vlImposto", calculo.getTributo().getVlImposto());
		if (calculo.getTabelaPreco() != null
				&& calculo.getTabelaPreco().getTipoTabelaPreco() != null) {
			retorno.put("tpTipoTabelaPreco", calculo.getTabelaPreco()
					.getTipoTabelaPreco().getTpTipoTabelaPreco().getValue());
		} else {
			retorno.put("tpTipoTabelaPreco", null);
		}
		retorno.put("tpDocumentoCotacao", cotacao.getTpDocumentoCotacao()
				.getValue());
		return retorno;
	}

	public Serializable gravaCotacao() {
		Cotacao cotacao = VendasUtils.getCotacaoInSession();
		CalculoFrete calculo = ExpedicaoUtils.getCalculoFreteInSession();

		HashMap retorno = new HashMap();
		retorno.put("idCotacao",
				getCotacaoService().storeCotacao(cotacao, calculo));
		retorno.put("sgFilial", cotacao.getFilial().getSgFilial());
		retorno.put("nrCotacao", cotacao.getNrCotacao());
		retorno.put("obCotacao", cotacao.getObCotacao());
		if(cotacao.getPendenciaDimensoes()!=null){
			retorno.put("gerouWorkflow", true);
		}else{
			retorno.put("gerouWorkflow", null);
		}
		criaCotacao();
		return retorno;
	}

	/**
	 * Metodo para validar calculo de frete zerado LMS-119 - Calculo do frete
	 * com resultado zero.
	 * 
	 * @param calculoFrete
	 */
	private void validaCalculoFreteZerado(CalculoFrete calculoFrete) {
		if (calculoFrete.getVlTotal() == null
				|| BigDecimalUtils.isZero(calculoFrete.getVlTotal())) {
			throw new BusinessException("LMS-04343");
		}
	}	

	public Map findCotacaoById(Long id) {
		Map map = getCotacaoService().findCotacaoById(id);
		verificaCliente(map, "clienteByIdClienteSolicitou");
		verificaCliente(map, "clienteByIdClienteDestino");
		verificaCliente(map, "clienteByIdCliente");

		List pedidosColeta = pedidoColetaService
				.findPedidoColetaByIdCotacao(id);
		if(pedidosColeta != null && !pedidosColeta.isEmpty()){
			PedidoColeta pedidoColeta = (PedidoColeta) pedidosColeta.get(0);
			Map pedido = new HashMap();
			String nrColeta = pedidoColeta.getFilialByIdFilialResponsavel()
					.getSgFilial()
					+ " "
					+ StringUtils.leftPad(
							pedidoColeta.getNrColeta().toString(), 8, '0');
			pedido.put("nrColeta", nrColeta);
			map.put("pedidoColeta", pedido);
		}

		Cotacao cotacao = new Cotacao();
		cotacao.setIdCotacao(id);
		cotacao.setNrCotacao((Integer)map.get("nrCotacao"));
		
		Map cliente = (Map)map.get("clienteByIdCliente");
		if(cliente != null){
			Map pessoa = (Map) cliente.get("pessoa");
			if( pessoa != null ){
				cotacao.setNmResponsavelFrete((String)pessoa.get("nmPessoa"));

			}
		}
		
		Map mapPendenciaDimensoes = MapUtilsPlus.getMap(map,
				"pendenciaDimensoes", null);
		if( mapPendenciaDimensoes != null ){
			Pendencia pendenciaDimensoes = new Pendencia();
			pendenciaDimensoes.setIdPendencia(MapUtilsPlus.getLong(
					mapPendenciaDimensoes, "idPendencia"));
			pendenciaDimensoes.setTpSituacaoPendencia(new DomainValue(
					(String) ((Map) mapPendenciaDimensoes
							.get("tpSituacaoPendencia")).get("value")));
			cotacao.setPendenciaDimensoes(pendenciaDimensoes);
		}
		
		Map mapPendencia = MapUtilsPlus.getMap(map, "pendencia",null);
		if( mapPendencia != null ){
			Pendencia pendencia = new Pendencia();
			pendencia.setIdPendencia(MapUtilsPlus.getLong(mapPendencia,
					"idPendencia"));
			cotacao.setPendencia(pendencia);
		}

		Map mapTpSituacao = MapUtilsPlus.getMap(map, "tpSituacao",null);
		if( mapTpSituacao != null ){
			cotacao.setTpSituacao(MapUtilsPlus.getDomainValue(mapTpSituacao,
					"value"));
		}
		Map mapTpSituacaoAprovacao = MapUtilsPlus.getMap(map,
				"tpSituacaoAprovacao", null);
		if( mapTpSituacaoAprovacao != null ){
			cotacao.setTpSituacaoAprovacao(MapUtilsPlus.getDomainValue(
					mapTpSituacaoAprovacao, "value"));
		}
		cotacao.setDtAprovacao(MapUtilsPlus.getYearMonthDay(map, "dtAprovacao"));
		cotacao.setDtValidade(MapUtilsPlus.getYearMonthDay(map, "dtValidade"));
		Usuario usuarioAprovou = new Usuario();
		Map mapUsuario = MapUtilsPlus.getMap(map, "usuarioByIdUsuarioAprovou",
				null);
		if( mapUsuario != null ){
			usuarioAprovou.setIdUsuario(MapUtilsPlus.getLong(mapUsuario,
					"idUsuario"));
		}
		if( usuarioAprovou.getIdUsuario() != null ){
			cotacao.setUsuarioByIdUsuarioAprovou(usuarioAprovou);
		}
		
		Map filialMap = (Map)map.get("filial");
		if( filialMap != null ){
			Filial filial = new Filial();
			filial.setIdFilial((Long)filialMap.get("idFilial"));
			filial.setSgFilial((String)filialMap.get("sgFilial"));
			cotacao.setFilial(filial);
		}
		
		Map dvCliente = (Map)map.get("divisaoCliente");
		if( dvCliente != null ){
			DivisaoCliente divisaoCliente = new DivisaoCliente();
			divisaoCliente.setIdDivisaoCliente((Long) dvCliente
					.get("idDivisaoCliente"));
			cotacao.setDivisaoCliente(divisaoCliente);
		}

		TabelaPreco tp = new TabelaPreco();
		tp.setIdTabelaPreco(MapUtils.getLong(map, "idTabelaPreco"));
		cotacao.setTabelaPreco(tp);
		
		List dimensoes = dimensaoService.findByIdCotacao(id);
		cotacao.setDimensoes(dimensoes);
		
		List servAdicionalDocServs = servAdicionalDocServService
				.findByCotacao(id);
		cotacao.setServAdicionalDocServs(servAdicionalDocServs);
		
		ExpedicaoUtils.setTpDocumentoInSession(ConstantesVendas.COTACAO);
		VendasUtils.setCotacaoInSession(cotacao);		
		
		map.put("countParametros",
				parametroClienteService.getRowCountByIdCotacao(id));
		map.put("countServicos",
				servicoAdicionalClienteService.getRowCountByIdCotacao(id));
		map.put("countServicosAdicionais",
				servAdicionalDocServService.getRowCountByIdCotacao(id));

		Map tpDocumentoCotacao = (Map) map.get("tpDocumentoCotacao");
		map.put("tpDocumentoCotacao", tpDocumentoCotacao.get("description"));
		
		ExpedicaoUtils.removeCalculoFreteFromSession();
		
		TypedFlatMap m = convertCotacaoForFlatMap(map);
		populateCotacao(m);
		CalculoFrete calculoFrete = (CalculoFrete) getCotacaoService()
				.findDadosCalculoCotacao(id);
		ExpedicaoUtils.setCalculoFreteInSession(calculoFrete);		
		return map;
	}

	private TypedFlatMap convertCotacaoForFlatMap(Map map){
		Map m = convertMapForAlias(map,null);
		TypedFlatMap flat = AliasToTypedFlatMapResultTransformer.getInstance()
				.transformeTupleMap(m);
		return flat;
	}

	private Map convertMapForAlias(Map map,String ownerKey){
		String[] dominios = {"tpCalculo","tpAbrangencia",
				"tpSituacaoTributaria","tpFrete","tpIdentificacao",
				"tpCliente","tpPessoa","tpDevedorFrete","tpCalculo",
				"tpSituacao","tpModal"};
		
		Map result = new HashMap();
		StringBuilder sb = new StringBuilder();
		for(Object key: map.keySet()){
			sb.setLength(0);
			Object o = map.get(key);
			String d = null;
			if( ArrayUtils.contains(dominios, key)){
				Map m = (Map)o;
				d = (String)m.get("value");
			}
			if( ownerKey != null && ownerKey != "" ){
					sb.append(ownerKey);
					sb.append("_");
				}
				sb.append(key);
			if( o instanceof HashMap && d == null ){
				Map m = convertMapForAlias((Map)o,sb.toString());
				result.putAll(m);
			}else{
				if( d == null ){
					result.put(sb.toString(),o);
				}else{
					result.put(sb.toString(),d);
				}
			}
		}
		return result;
	}
	
	private void verificaCliente(Map map, String tpCliente) {
		Map cliente = (Map)map.get(tpCliente);
		if(cliente.get("idCliente") != null){
			Map pessoa = (Map) cliente.get("pessoa");
			pessoa.put("nrIdentificacao",
					FormatUtils.formatIdentificacao((String) ((Map) pessoa
							.get("tpIdentificacao")).get("value"),
							(String) pessoa.get("nrIdentificacao")));
			// Inscricao Estadual
			String idInscricaoEstadual = MapUtils.getString(cliente,
					"idInscricaoEstadual");
			if (StringUtils.isNotBlank(idInscricaoEstadual)) {
				Map ie = new HashMap();
				ie.put("idInscricaoEstadual", idInscricaoEstadual);
				ie.put("nrInscricaoEstadual",
						MapUtils.getString(cliente, "nrInscricaoEstadual"));
				cliente.put("inscricaoEstadual", ie);
			}
		} else {
			Map pessoa = new HashMap();
			pessoa.put("nrIdentificacao", cliente.remove("nrIdentificacao"));
			pessoa.put("nmPessoa", cliente.remove("nmPessoa"));
			cliente.put("pessoa", pessoa);
		}
	}

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		getCotacaoService().removeCotacaoByIds(ids);
	}

	public Map reprovarCotacao(TypedFlatMap parameters){
		Cotacao cotacao = getCotacaoService().storeCotacaoReprovada(
				parameters.getLong("idCotacao"),
				parameters.getString("dsMotivo"));
		Map retorno = new HashMap();
		Map status = new HashMap();
		DomainValue tpSituacao = cotacao.getTpSituacao();
		status.put("value", tpSituacao.getValue());
		status.put("description", tpSituacao.getDescription());
		retorno.put("tpSituacao", status);
		retorno.put("dsMotivo", cotacao.getDsMotivo());
		return retorno;
	}

	public Map calculaPesoCubado(TypedFlatMap criteria) {
		Map retorno = new HashMap();
		String tpModal = criteria.getString("tpModal");

		BigDecimal psCubado = BigDecimalUtils.ZERO;
		if(StringUtils.isNotBlank(tpModal)) {
			List dimensoes = null;
			try {
				dimensoes = VendasUtils.getCotacaoInSession().getDimensoes();
			} catch (BusinessException e) {
			}
			psCubado = conhecimentoService.calculaPsAforado(tpModal, dimensoes,
					null);
		}
		retorno.put("psCubado", psCubado);
		return retorno;
	}

	/**
	 * Busca a filial do usuario logado.
	 * 
	 * @return Retorna apenas o id da filial, a sigla e o nome
	 */
	public Filial getFilialUsuarioLogado(Map map) {
		Filial filial = new Filial();
		filial.setIdFilial(SessionUtils.getFilialSessao().getIdFilial());
		filial.setSgFilial(SessionUtils.getFilialSessao().getSgFilial());
		Pessoa pessoa = new Pessoa();
		pessoa.setNmFantasia(SessionUtils.getFilialSessao().getPessoa()
				.getNmFantasia());
		filial.setPessoa(pessoa);
		return filial;
	}

	/***
	 * Valida se é necessário validar o FOB, se for necessário é feita a
	 * validação.
	 * 
	 * @author Gabriel.Scossi
	 * @since 22/02/2016
	 * @param parameters
	 * @return Map
	 */
	public Map validaFOB(TypedFlatMap parameters) {
		ConteudoParametroFilial conteudoParametroFilial = conteudoParametroFilialService
				.findByNomeParametro(parameters.getLong("idFilial"),
						"BLQ_FOB_TP_SIT_TRIBU", false, true);
		if (conteudoParametroFilial == null
				|| conteudoParametroFilial.getVlConteudoParametroFilial()
						.equals("S")) {
			if(parameters.getLong("idInscricaoEstadualDestinatario")!=null){
				parameters.put("validaFOB", tipoTributacaoIEService.validateTipoTributacaoFOB(parameters.getLong("idInscricaoEstadualDestinatario")));
			}else{
				parameters.put("validaFOB", tipoTributacaoIEService.validateFOBByTipoTributacao(parameters.getString("tipoTributacao")));
			}
			return parameters;
		}

		return null;

	}

	//Getters and Setters
	public void setConteudoParametroFilialService(
			ConteudoParametroFilialService conteudoParametroFilialService) {
		this.conteudoParametroFilialService = conteudoParametroFilialService;
	}

	public CotacaoService getCotacaoService() {
		return (CotacaoService)defaultService;
	}

	public void setCotacaoService(CotacaoService cotacaoService) {
		this.defaultService = cotacaoService;
	}

	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}

	public void setServicoAdicionalClienteService(
			ServicoAdicionalClienteService servicoAdicionalClienteService) {
		this.servicoAdicionalClienteService = servicoAdicionalClienteService;
	}

	public void setUsuarioService(UsuarioService usuarioService) {
		this.usuarioService = usuarioService;
	}

	public void setParametroClienteService(
			ParametroClienteService parametroClienteService) {
		this.parametroClienteService = parametroClienteService;
	}

	public void setAeroportoService(AeroportoService aeroportoService) {
		this.aeroportoService = aeroportoService;
	}

	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}

	public void setTipoTributacaoIEService(
			TipoTributacaoIEService tipoTributacaoIEService) {
		this.tipoTributacaoIEService = tipoTributacaoIEService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public void setMoedaPaisService(MoedaPaisService moedaPaisService) {
		this.moedaPaisService = moedaPaisService;
	}

	public void setMunicipioService(MunicipioService municipioService) {
		this.municipioService = municipioService;
	}

	public void setNaturezaProdutoService(
			NaturezaProdutoService naturezaProdutoService) {
		this.naturezaProdutoService = naturezaProdutoService;
	}

	public void setPpeService(PpeService ppeService) {
		this.ppeService = ppeService;
	}

	public void setProdutoEspecificoService(
			ProdutoEspecificoService produtoEspecificoService) {
		this.produtoEspecificoService = produtoEspecificoService;
	}

	public void setServicoService(ServicoService servicoService) {
		this.servicoService = servicoService;
	}

	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
	}

	public void setPedidoColetaService(PedidoColetaService pedidoColetaService) {
		this.pedidoColetaService = pedidoColetaService;
	}

	public void setDimensaoService(DimensaoService dimensaoService) {
		this.dimensaoService = dimensaoService;
	}

	public void setServAdicionalDocServService(
			ServAdicionalDocServService servAdicionalDocServService) {
		this.servAdicionalDocServService = servAdicionalDocServService;
	}

	public void setDoctoServicoValidateFacade(
			DoctoServicoValidateFacade doctoServicoValidateFacade) {
		this.doctoServicoValidateFacade = doctoServicoValidateFacade;
	}
}