package com.mercurio.lms.vendas.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.report.ReportActionSupport;
import com.mercurio.lms.expedicao.model.CalculoFrete;
import com.mercurio.lms.expedicao.model.ParcelaServico;
import com.mercurio.lms.expedicao.util.CalculoFreteUtils;
import com.mercurio.lms.municipios.model.Municipio;
import com.mercurio.lms.municipios.model.service.PpeService;
import com.mercurio.lms.vendas.model.Cotacao;
import com.mercurio.lms.vendas.model.service.CotacaoFreteViaWebService;
import com.mercurio.lms.vendas.util.VendasUtils;

/**
 * Generated by: ADSM ActionGenerator
 *
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.vendas.cotacaoFreteViaWebCalculoFreteAction"
 */
public class CotacaoFreteViaWebCalculoFreteAction extends ReportActionSupport {
	private PpeService ppeService;
	private CotacaoFreteViaWebService cotacaoFreteViaWebCalculoFreteService;

	public Map findCalculoFrete() {
		Cotacao cotacao = VendasUtils.getCotacaoInSession();
		CalculoFrete calculoFrete = new CalculoFrete();
		/** Calculo Frete */
		cotacaoFreteViaWebCalculoFreteService.findCalculoFrete(cotacao, calculoFrete);
		CalculoFreteUtils.ordenaParcelas(calculoFrete.getParcelas());

		Map retorno = new HashMap();
		List parcelas = new ArrayList(calculoFrete.getParcelas().size());
		for (Iterator iter = calculoFrete.getParcelas().iterator(); iter.hasNext();) {
			ParcelaServico parcelaServico = (ParcelaServico) iter.next();
			Map map = new HashMap();
			map.put("nmParcela", parcelaServico.getParcelaPreco().getDsParcelaPreco());
			map.put("vlParcela", parcelaServico.getVlParcela());
			parcelas.add(map);
		}

		//Grava dados na sessao
		VendasUtils.setCotacaoInSession(cotacao);
		retorno.put("parcelas", parcelas);
		retorno.put("vlDesconto", cotacao.getVlDesconto());
		retorno.put("vlTotalFrete", cotacao.getVlTotalCotacao());
		retorno.put("vlRetencaoICMS", cotacao.getVlIcmsSubstituicaoTributaria());
		retorno.put("vlTotalLiquido", cotacao.getVlLiquido());
		retorno.put("vlTotalImposto", cotacao.getVlImposto());
		return retorno;
	}

	/**
	 * Busca Prazos de Entrega
	 * @return
	 */
	public Map findPrazoEntrega() {
		Cotacao cotacao = VendasUtils.getCotacaoInSession();

		Municipio municipioOrigem = cotacao.getMunicipioByIdMunicipioOrigem();
		Municipio municipioDestino = cotacao.getMunicipioByIdMunicipioDestino();
		Map<String, Object> prazos = new HashMap<String, Object>();
		prazos = ppeService.executeCalculoPPE(
			municipioOrigem.getIdMunicipio(),
			municipioDestino.getIdMunicipio(),
			cotacao.getServico().getIdServico(),
			cotacao.getClienteByIdCliente().getIdCliente(),
			municipioOrigem.getNrCep(),
			municipioDestino.getNrCep(),
			null);
		Long horasPrevistas = (Long) prazos.get("nrPrazo");
		double dp = (double)horasPrevistas.longValue()/24;
		dp = dp + 0.9;
		Long diasPrevistos = Long.valueOf((long)Math.floor(dp)); 
		Map retorno = new HashMap();
		retorno.put("prazoEntrega", diasPrevistos);
		return retorno;
	}

	public void setPpeService(PpeService ppeService) {
		this.ppeService = ppeService;
	}
	public void setCotacaoFreteViaWebCalculoFreteService(
			CotacaoFreteViaWebService cotacaoFreteViaWebCalculoFreteService) {
		this.cotacaoFreteViaWebCalculoFreteService = cotacaoFreteViaWebCalculoFreteService;
	}
}