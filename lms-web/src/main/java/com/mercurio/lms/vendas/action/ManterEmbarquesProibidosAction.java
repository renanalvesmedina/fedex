package com.mercurio.lms.vendas.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.MapUtils;
import org.apache.commons.lang.StringUtils;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.security.Resource;
import com.mercurio.adsm.framework.session.SessionContext;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.configuracoes.model.param.ConsultarUsuarioLMSParam;
import com.mercurio.lms.configuracoes.model.service.ParametroGeralService;
import com.mercurio.lms.configuracoes.model.service.UsuarioLMSService;
import com.mercurio.lms.configuracoes.model.service.UsuarioService;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.JTFormatUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.MotivoProibidoEmbarque;
import com.mercurio.lms.vendas.model.ProibidoEmbarque;
import com.mercurio.lms.vendas.model.service.ProibidoEmbarqueService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.vendas.manterEmbarquesProibidosAction"
 */
public class ManterEmbarquesProibidosAction extends CrudAction {
	
	private static final String MESSAGE_LMS_01179 = "LMS-01179";
	
	private UsuarioService usuarioService;
	private ConfiguracoesFacade configuracoesFacade;	
	private UsuarioLMSService usuarioLMSService; 
	private ParametroGeralService parametroGeralService;
	private ProibidoEmbarqueService proibidoEmbarqueService;
	
	public Map findSessionData() {
		Usuario usuario = SessionUtils.getUsuarioLogado();
		TypedFlatMap result = new TypedFlatMap();
		result.put("nrMatricula", usuario.getNrMatricula());
		result.put("nmUsuario", usuario.getNmUsuario());
		result.put("idUsuario", usuario.getIdUsuario());
		result.put("dtToday", JTFormatUtils.format(JTDateTimeUtils.getDataAtual(), JTFormatUtils.DEFAULT));

		return result;
	}

	public List findLookupUsuarioFuncionario(TypedFlatMap tfm){
		ConsultarUsuarioLMSParam cup = new ConsultarUsuarioLMSParam();
		cup.setNrMatricula(tfm.getString("nrMatricula"));
		cup.setNmUsuario(tfm.getString("nmUsuario"));
		cup.setTpCategoriaUsuario(tfm.getString("tpCategoriaUsuario"));

        return usuarioLMSService.findLookupSistema(cup);
	}	

	public void setProibidoEmbarque(ProibidoEmbarqueService proibidoEmbarqueService) {
		this.defaultService = proibidoEmbarqueService;
	}
	
	public ProibidoEmbarqueService getProibidoEmbarqueService() {
		return (ProibidoEmbarqueService) this.defaultService;
	}
	
    public void removeById(java.lang.Long id) {
        getProibidoEmbarqueService().removeById(id);
    }

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {		
		getProibidoEmbarqueService().removeByIds(ids);		
    }


    public Map findById(java.lang.Long id) {
    	ProibidoEmbarque proibidoEmbarque = getProibidoEmbarqueService().findById(id);
    	
    	TypedFlatMap map = new TypedFlatMap();
    	
    	map.put("idProibidoEmbarque", proibidoEmbarque.getIdProibidoEmbarque());
    	map.put("cliente.idCliente", proibidoEmbarque.getCliente().getIdCliente());
    	map.put("cliente.pessoa.nrIdentificacao", proibidoEmbarque.getCliente().getPessoa().getNrIdentificacaoFormatado());
    	map.put("cliente.pessoa.nmPessoa", proibidoEmbarque.getCliente().getPessoa().getNmPessoa());
    	map.put("dtBloqueioCarregada", proibidoEmbarque.getDtBloqueio());
    	map.put("dtBloqueio", proibidoEmbarque.getDtBloqueio());
    	
    	if (proibidoEmbarque.getUsuarioByIdUsuarioBloqueio() != null) {
	    	map.put("usuarioBloqueio.idUsuario", proibidoEmbarque.getUsuarioByIdUsuarioBloqueio().getIdUsuario());
	    	map.put("usuarioBloqueio.nrMatricula", proibidoEmbarque.getUsuarioByIdUsuarioBloqueio().getNrMatricula());
	    	map.put("usuarioBloqueio.nmUsuario", proibidoEmbarque.getUsuarioByIdUsuarioBloqueio().getNmUsuario());
    	}
    	
    	map.put("motivoProibidoEmbarque.idMotivoProibidoEmbarque", proibidoEmbarque.getMotivoProibidoEmbarque().getIdMotivoProibidoEmbarque());
    	map.put("dsBloqueio", proibidoEmbarque.getDsBloqueio());
    	map.put("dtDesbloqueio", proibidoEmbarque.getDtDesbloqueio());
    	
    	if (proibidoEmbarque.getUsuarioByIdUsuarioDesbloqueio() != null) {
    		map.put("usuarioDesbloqueio.idUsuario", proibidoEmbarque.getUsuarioByIdUsuarioDesbloqueio().getIdUsuario());
        	map.put("usuarioDesbloqueio.nrMatricula", proibidoEmbarque.getUsuarioByIdUsuarioDesbloqueio().getNrMatricula());
        	map.put("usuarioDesbloqueio.nmUsuario", proibidoEmbarque.getUsuarioByIdUsuarioDesbloqueio().getNmUsuario());
    	}
    	
    	map.put("dsDesbloqueio", proibidoEmbarque.getDsDesbloqueio());

    	return map;
    }
    
    
    public Map disabilitaBotoesDetalhamento(TypedFlatMap parameter){
    	
    	Long idFilial = MapUtils.getLong(parameter, "idFilial");
    	Long idProibidoEmbarque = MapUtils.getLong(parameter, "idProibidoEmbarque");
    	    	
    	Boolean filialUsuarioMatriz = SessionUtils.isFilialSessaoMatriz();
    	
    	TypedFlatMap map = new TypedFlatMap();    	
		if(Boolean.FALSE.equals(usuarioService.verificaAcessoFilialRegionalUsuarioLogado(idFilial)) 
				&& Boolean.FALSE.equals(filialUsuarioMatriz)) {
			map.put("disabilitarBotoes", "true");
			map.put("disabilitarLimpar", "true");
		}else if(this.validaMotivoBloqueio(idProibidoEmbarque) 
				&& !getProibidoEmbarqueService().perfilMatrizUsuarioLogado()){			
			map.put("disabilitarBotoes", "true");
			map.put("motivoUsuarioSemTributacaoMTZ", "true");
			map.put("errorMessage",configuracoesFacade.getMensagem(MESSAGE_LMS_01179));
		}else{
			map.put("disabilitarBotoes", "false");
		}
		return map;
    }    
    
    
	/**
	 * Através da lista de ids verifica se o motivo pode ou não ser excluido
	 * dependendo do parametro geral (ID_MOTIVO_TRIBUT_PROIB_EMB) cadastrado
	 * @param ids
	 * @return
	 */
	public Boolean validaMotivosBloqueio(List ids){
		
		String idsProibido = String.valueOf(parametroGeralService.findConteudoByNomeParametro("ID_MOTIVO_TRIBUT_PROIB_EMB", false));		
		
		if(ids != null && StringUtils.isNotBlank(idsProibido)){			
			List<String> listIdsProibido = Arrays.asList(idsProibido.split(";"));
			String idProibidoEmbraque = null;
			ProibidoEmbarque pe = null;
			for(Object id : ids){
				pe = getProibidoEmbarqueService().findById(Long.valueOf(id.toString()));
				if(pe != null && pe.getMotivoProibidoEmbarque() != null){ 
					idProibidoEmbraque = String.valueOf(pe.getMotivoProibidoEmbarque().getIdMotivoProibidoEmbarque());
					if(listIdsProibido.contains(idProibidoEmbraque)){
						return Boolean.TRUE;
					}
				}
			}
		}
		return Boolean.FALSE;
	}
	
	/**
	 * Valida valida o motivo bloquei através do id
	 * @param id
	 * @return
	 */
	public Boolean validaMotivoBloqueio(Long id){
		
		if(id != null){
			List ids = new ArrayList();
			ids.add(id.toString());
			return this.validaMotivosBloqueio(ids);
		}
		return Boolean.TRUE;
	}	    
    
    
	public void setUsuarioLMSService(UsuarioLMSService usuarioLMSService) {
		this.usuarioLMSService = usuarioLMSService;
	}

	public ResultSetPage findPaginated(TypedFlatMap criteria) {
		criteria.put("usuarioByIdUsuarioDesbloqueio.idUsuario", criteria.getLong("usuarioDesbloqueio.idUsuario"));
		criteria.put("usuarioByIdUsuarioBloqueio.idUsuario", criteria.getLong("usuarioBloqueio.idUsuario"));		
		criteria.remove("usuarioDesbloqueio.idUsuario");
		criteria.remove("usuarioBloqueio.idUsuario");
		return super.findPaginated(criteria);
	}
	
	public Integer getRowCount(TypedFlatMap criteria) {
		criteria.put("usuarioByIdUsuarioDesbloqueio.idUsuario", criteria.getLong("usuarioDesbloqueio.idUsuario"));
		criteria.put("usuarioByIdUsuarioBloqueio.idUsuario", criteria.getLong("usuarioBloqueio.idUsuario"));		
		criteria.remove("usuarioDesbloqueio.idUsuario");
		criteria.remove("usuarioBloqueio.idUsuario");		
		return super.getRowCount(criteria);
	}
	
	public Serializable store(TypedFlatMap map) {
		ProibidoEmbarque proibidoEmbarque = new ProibidoEmbarque();
		
		if(map.getYearMonthDay("dtDesbloqueio") != null && map.getBoolean("motivoUsuarioSemTributacaoMTZ", Boolean.FALSE) ){
			throw new BusinessException("LMS-01179");
		}		
		
		if (map.getLong("idProibidoEmbarque") != null){
			proibidoEmbarque = getProibidoEmbarqueService().findById(map.getLong("idProibidoEmbarque"));
		}
		
		//Atribuir o valor da data de bloqueio que vem do banco no campo transiente para poder validar no before store
		proibidoEmbarque.setDtBloqueioAnterior(proibidoEmbarque.getDtBloqueio()); 
		
		MotivoProibidoEmbarque motivoProibidoEmbarque = new MotivoProibidoEmbarque();
		motivoProibidoEmbarque.setIdMotivoProibidoEmbarque(map.getLong("motivoProibidoEmbarque.idMotivoProibidoEmbarque"));
		proibidoEmbarque.setMotivoProibidoEmbarque(motivoProibidoEmbarque);
		
		if (!validaPermissaoRecurso(motivoProibidoEmbarque.getIdMotivoProibidoEmbarque())) {
			throw new BusinessException("LMS-01204");
		}
		
		Cliente cliente = new Cliente();
		cliente.setIdCliente(map.getLong("cliente.idCliente"));
		proibidoEmbarque.setCliente(cliente);
		
		final Long idUsuarioBloqueio = map.getLong("usuarioBloqueio.idUsuario");
		if (idUsuarioBloqueio != null) {
			Usuario usuarioBloq = new Usuario();
			usuarioBloq.setIdUsuario(idUsuarioBloqueio);
			proibidoEmbarque.setUsuarioByIdUsuarioBloqueio(usuarioBloq);
		} else {
			proibidoEmbarque.setUsuarioByIdUsuarioBloqueio(null);
		}
		
		final Long idUsuarioDesbloqueio = map.getLong("usuarioDesbloqueio.idUsuario");
		if (idUsuarioDesbloqueio != null) {
			Usuario usuarioDesbloq = new Usuario();
			usuarioDesbloq.setIdUsuario(idUsuarioDesbloqueio);
			proibidoEmbarque.setUsuarioByIdUsuarioDesbloqueio(usuarioDesbloq);
		} else {
			proibidoEmbarque.setUsuarioByIdUsuarioDesbloqueio(null);
		}
		
		proibidoEmbarque.setDtBloqueio(map.getYearMonthDay("dtBloqueio"));
		proibidoEmbarque.setDtDesbloqueio(map.getYearMonthDay("dtDesbloqueio"));
		
		proibidoEmbarque.setDsBloqueio(map.getString("dsBloqueio"));
		proibidoEmbarque.setDsDesbloqueio(map.getString("dsDesbloqueio"));

		return getProibidoEmbarqueService().store(proibidoEmbarque);
	}
	
	
	/**
	 * Verifica se o usuário possui permissão neste recurso
	 * @return boolean
	 */
	public boolean validaPermissaoRecurso(Long idMotivoProibidoEmbarque) {
		Resource resource = new Resource(SessionContext.getSystemName(), null, "/vendas/manterEmbarquesProibidos", "cad", "embarquesProibidosCliente");
		return proibidoEmbarqueService.validaPermissaoRecurso(idMotivoProibidoEmbarque, resource);
	}
	
	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}

	public void setUsuarioService(UsuarioService usuarioService) {
		this.usuarioService = usuarioService;
	}

	public void setParametroGeralService(ParametroGeralService parametroGeralService) {
		this.parametroGeralService = parametroGeralService;
	}	

	public void setProibidoEmbarqueService(ProibidoEmbarqueService proibidoEmbarqueService) {
		this.proibidoEmbarqueService = proibidoEmbarqueService;
}
}
