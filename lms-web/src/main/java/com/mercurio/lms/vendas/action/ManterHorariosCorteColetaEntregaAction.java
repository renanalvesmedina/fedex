package com.mercurio.lms.vendas.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.joda.time.YearMonthDay;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.util.FilterList;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.EnderecoPessoa;
import com.mercurio.lms.configuracoes.model.Servico;
import com.mercurio.lms.configuracoes.model.service.EnderecoPessoaService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.Municipio;
import com.mercurio.lms.municipios.model.MunicipioFilial;
import com.mercurio.lms.municipios.model.Pais;
import com.mercurio.lms.municipios.model.UnidadeFederativa;
import com.mercurio.lms.municipios.model.Zona;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.MunicipioFilialService;
import com.mercurio.lms.municipios.model.service.PaisService;
import com.mercurio.lms.municipios.model.service.UnidadeFederativaService;
import com.mercurio.lms.municipios.model.service.ZonaService;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.HorarioCorteCliente;
import com.mercurio.lms.vendas.model.service.HorarioCorteClienteService;

/**
 * Generated by: ADSM ActionGenerator
 *
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.vendas.manterHorariosCorteColetaEntregaAction"
 */

public class ManterHorariosCorteColetaEntregaAction extends CrudAction {
	
	private MunicipioFilialService municipioFilialService;
	private ZonaService zonaService;
	private PaisService paisService;
	private UnidadeFederativaService unidadeFederativaService;
	private FilialService filialService;
	private EnderecoPessoaService enderecoPessoaService;
	
	public void removeById(java.lang.Long id) {
		getHorarioCorteClienteService().removeById(id);
	}

	public List findMunicipioFilialVigenteByMunicipio(TypedFlatMap map){
		Long idMunicipio = Long.valueOf(map.getString("municipio.idMunicipio"));
		return municipioFilialService.findMunicipioFilialVigenteByMunicipio(idMunicipio);
	}

	/**
	 * @author José Rodrigo Moraes
	 * @since 14/08/2006
	 *
	 * Busca as zonas para a combo de Zona
	 * 
	 * @param map Critérios de pesquisa
	 * @return Lista de Zonas
	 */
	public List findZona(Map map) {
		return zonaService.find(map);
	}

	/**
	 * @author José Rodrigo Moraes
	 * @since 14/08/2006
	 * 
	 * Método de busca dos países para a lookup de país
	 * 
	 * @param tfm Critérios de pesquisa
	 * @return Lista de países
	 */
	public List findLookupPais(Map criteria) {
		return paisService.findLookup(criteria);
	}

	/**
	 * @author José Rodrigo Moraes
	 * @since 14/08/2006
	 *
	 * Busca as Unidades Federativas para a combo de unidades federativas
	 * 
	 * @param map Critérios de pesquisa
	 * @return Lista de Unidades Federativas
	 */
	public List findUnidadeFederativaByPais(Map criteria) {
		return unidadeFederativaService.findByPais(criteria);
	}

	/**
	 * @author José Rodrigo Moraes
	 * @since 14/08/2006
	 * 
	 * Método de busca dos municípios para a lookup de municipio
	 * 
	 * @param criteria Critérios de pesquisa
	 * @return Lista de municipios
	 */
	public List findLookupFilial(TypedFlatMap tfm) {
		List filiais = filialService.findLookupBySgFilialVigenteEm(tfm);
		
		List retorno = new ArrayList();
		
		if(filiais != null && filiais.size() == 1){
			Filial f = (Filial)filiais.get(0);
			TypedFlatMap map = new TypedFlatMap();
			map.put("endereco", findEndereco(f.getIdFilial()));
			map.put("idFilial",f.getIdFilial());
			map.put("sgFilial",f.getSgFilial());
			map.put("pessoa.idPessoa",f.getIdFilial());
			map.put("pessoa.nmFantasia",f.getPessoa().getNmFantasia());
						
			retorno.add(map);
		}
		return retorno;
	}

	/**
	 * @author José Rodrigo Moraes
	 * @since 14/08/2006
	 * 
	 * Busca os endereços associados a pessoa 
	 * 
	 * @param idPessoa Identificador da pessoa
	 * @return Dados de Unidade Federativa, Pais e Zona
	 */
	public TypedFlatMap findEndereco(Long idPessoa) {
		EnderecoPessoa ep = findEnderecoPessoa(idPessoa);
		if(ep != null){
			TypedFlatMap result = new TypedFlatMap();
			result.put("municipio.unidadeFederativa.idUnidadeFederativa",ep.getMunicipio().getUnidadeFederativa().getIdUnidadeFederativa());
			result.put("municipio.unidadeFederativa.pais.idPais",ep.getMunicipio().getUnidadeFederativa().getPais().getIdPais());
			result.put("municipio.unidadeFederativa.pais.nmPais",ep.getMunicipio().getUnidadeFederativa().getPais().getNmPais());
			
			if( ep.getMunicipio().getUnidadeFederativa().getPais().getZona() != null ){			
				result.put("municipio.unidadeFederativa.pais.zona.idZona",ep.getMunicipio().getUnidadeFederativa().getPais().getZona().getIdZona());
				result.put("municipio.unidadeFederativa.pais.zona.dsZona",ep.getMunicipio().getUnidadeFederativa().getPais().getZona().getDsZona());
			}
			return result;
		}
		return null;
	}

	/**
	 * @author José Rodrigo Moraes
	 * @since 14/08/2006
	 * 
	 * Busca o endereço padrão da pessoa informada
	 * 
	 * @param idPessoa Identificador da pessoa
	 * @return Endereço padrão da pessoa
	 */
	public EnderecoPessoa findEnderecoPessoa(Long idPessoa) {
		return enderecoPessoaService.findEnderecoPessoaPadrao(idPessoa);
	}

	/**
	 * @author José Rodrigo Moraes
	 * @since 14/08/2006
	 * 
	 * Busca os municípios de acordo com a filial
	 * 
	 * @param criteria Dados de pesquisa
	 * @return Lista de municípios
	 */
	public List findLookupMunicipioFilial(Map criteria) {
		FilterList filter = new FilterList(municipioFilialService.findLookup(criteria)) {
			public Map filterItem(Object item) {
				MunicipioFilial mf = (MunicipioFilial)item;
				TypedFlatMap typedFlatMap = new TypedFlatMap();
				typedFlatMap.put("municipio.idMunicipio",mf.getMunicipio().getIdMunicipio());
				typedFlatMap.put("municipio.nmMunicipio",mf.getMunicipio().getNmMunicipio());
				typedFlatMap.put("municipio.unidadeFederativa.idUnidadeFederativa",mf.getMunicipio().getUnidadeFederativa().getIdUnidadeFederativa());
				typedFlatMap.put("municipio.unidadeFederativa.pais.idPais",mf.getMunicipio().getUnidadeFederativa().getPais().getIdPais());
				typedFlatMap.put("municipio.unidadeFederativa.pais.nmPais",mf.getMunicipio().getUnidadeFederativa().getPais().getNmPais());

				if( mf.getMunicipio().getUnidadeFederativa().getPais().getZona() != null ){
					typedFlatMap.put("municipio.unidadeFederativa.pais.zona.idZona",mf.getMunicipio().getUnidadeFederativa().getPais().getZona().getIdZona());
					typedFlatMap.put("municipio.unidadeFederativa.pais.zona.dsZona",mf.getMunicipio().getUnidadeFederativa().getPais().getZona().getDsZona());
				}

				typedFlatMap.put("filial.idFilial",mf.getFilial().getIdFilial());
				typedFlatMap.put("filial.sgFilial",mf.getFilial().getSgFilial());
				typedFlatMap.put("filial.pessoa.nmFantasia", mf.getFilial().getPessoa().getNmFantasia());
				
				return typedFlatMap;
			}
		};
		return (List)filter.doFilter();
	}

	public Serializable store(TypedFlatMap criteria) {
		HorarioCorteCliente horarioCorteCliente = new HorarioCorteCliente();

		horarioCorteCliente.setCliente(new Cliente(criteria.getLong("cliente.idCliente")));
		horarioCorteCliente.setIdHorarioCorteCliente(criteria.getLong("idHorarioCorteCliente"));
		horarioCorteCliente.setHrInicial(criteria.getTimeOfDay("hrInicial"));
		horarioCorteCliente.setHrFinal(criteria.getTimeOfDay("hrFinal"));
		horarioCorteCliente.setNrHorasAplicadas(criteria.getShort("nrHorasAplicadas"));

		String tpHorario = criteria.getString("tpHorario");
		if (StringUtils.isNotBlank(tpHorario)) {
			horarioCorteCliente.setTpHorario(new DomainValue(tpHorario));
		}
		Long idFilial = criteria.getLong("filialOrigem.idFilial");
		if (idFilial != null) {
			Filial filial = new Filial();
			filial.setIdFilial(idFilial);
			horarioCorteCliente.setFilialOrigem(filial);
		}
		idFilial = criteria.getLong("filialDestino.idFilial");
		if (idFilial != null) {
			Filial filial = new Filial();
			filial.setIdFilial(idFilial);
			horarioCorteCliente.setFilialDestino(filial);
		}
		
		Long idEnderecoPessoa = criteria.getLong("enderecoPessoaOrigem.idEnderecoPessoa");
		if (idEnderecoPessoa != null) {
			EnderecoPessoa enderecoPessoa = new EnderecoPessoa();
			enderecoPessoa.setIdEnderecoPessoa(idEnderecoPessoa);
			horarioCorteCliente.setEnderecoPessoaOrigem(enderecoPessoa);
		}
		idEnderecoPessoa = criteria.getLong("enderecoPessoaDestino.idEnderecoPessoa");
		if (idEnderecoPessoa != null) {
			EnderecoPessoa enderecoPessoa = new EnderecoPessoa();
			enderecoPessoa.setIdEnderecoPessoa(idEnderecoPessoa);
			horarioCorteCliente.setEnderecoPessoaDestino(enderecoPessoa);
		}
		Long idMunicipio =  criteria.getLong("municipioOrigem.idMunicipio");
		if (idMunicipio != null) {
			Municipio municipio = new Municipio();
			municipio.setIdMunicipio(idMunicipio);
			horarioCorteCliente.setMunicipioOrigem(municipio);
		}
		idMunicipio =  criteria.getLong("municipioDestino.idMunicipio");
		if (idMunicipio != null) {
			Municipio municipio = new Municipio();
			municipio.setIdMunicipio(idMunicipio);
			horarioCorteCliente.setMunicipioDestino(municipio);
		}
		
		Long idUnidadeFederativa = criteria.getLong("unidadeFederativaOrigem.idUnidadeFederativa");
		if (idUnidadeFederativa != null) {
			UnidadeFederativa uf = new UnidadeFederativa();
			uf.setIdUnidadeFederativa(idUnidadeFederativa);
			horarioCorteCliente.setUnidadeFederativaOrigem(uf);
		}
		idUnidadeFederativa = criteria.getLong("unidadeFederativaDestino.idUnidadeFederativa");
		if (idUnidadeFederativa != null) {
			UnidadeFederativa uf = new UnidadeFederativa();
			uf.setIdUnidadeFederativa(idUnidadeFederativa);
			horarioCorteCliente.setUnidadeFederativaDestino(uf);
		}
		
		Long idPais = criteria.getLong("paisOrigem.idPais");
		if (idPais != null) {
			Pais pais = new Pais();
			pais.setIdPais(idPais);
			horarioCorteCliente.setPaisOrigem(pais);
		}
		idPais = criteria.getLong("paisDestino.idPais");
		if (idPais != null) {
			Pais pais = new Pais();
			pais.setIdPais(idPais);
			horarioCorteCliente.setPaisDestino(pais);
		}
		
		Long idZona = criteria.getLong("zonaOrigem.idZona");
		if (idZona != null) {
			Zona zona = new Zona();
			zona.setIdZona(idZona);
			horarioCorteCliente.setZonaOrigem(zona);
		}
		idZona = criteria.getLong("zonaDestino.idZona");
		if (idZona != null) {
			Zona zona = new Zona();
			zona.setIdZona(idZona);
			horarioCorteCliente.setZonaDestino(zona);
		}
		
		Long idServico =  criteria.getLong("servico.idServico");
		if (idServico != null) {
			Servico servico = new Servico();
			servico.setIdServico(idServico);
			horarioCorteCliente.setServico(servico);
		}

		return getHorarioCorteClienteService().store(horarioCorteCliente);
	}

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		getHorarioCorteClienteService().removeByIds(ids);
	}

	public HorarioCorteCliente findById(java.lang.Long id) {
		return getHorarioCorteClienteService().findById(id);
	}
	
	/**
	 * Busca a data atual
	 * @param tfm Critérios de pesquisa
	 * @return YearMonthDay Data atual
	 */
	public YearMonthDay findDataAtual(TypedFlatMap tfm) {
		return JTDateTimeUtils.getDataAtual();
	}

	public void setHorarioCorteCliente(HorarioCorteClienteService horarioCorteClienteService) {
		this.defaultService = horarioCorteClienteService;
	}
	public HorarioCorteClienteService getHorarioCorteClienteService() {
		return (HorarioCorteClienteService)this.defaultService;
	}	
	public void setEnderecoPessoaService(EnderecoPessoaService enderecoPessoaService) {
		this.enderecoPessoaService = enderecoPessoaService;
	}
	public void setUnidadeFederativaService(UnidadeFederativaService unidadeFederativaService) {
		this.unidadeFederativaService = unidadeFederativaService;
	}
	public void setPaisService(PaisService paisService) {
		this.paisService = paisService;
	}
	public void setMunicipioFilialService(MunicipioFilialService municipioFilialService) {
		this.municipioFilialService = municipioFilialService;
	}
	public void setZonaService(ZonaService zonaService) {
		this.zonaService = zonaService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

}
