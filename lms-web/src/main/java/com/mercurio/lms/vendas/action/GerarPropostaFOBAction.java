package com.mercurio.lms.vendas.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.MapUtils;
import org.apache.commons.lang.BooleanUtils;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.EnderecoPessoa;
import com.mercurio.lms.configuracoes.model.service.EnderecoPessoaService;
import com.mercurio.lms.configuracoes.util.MapUtilsPlus;
import com.mercurio.lms.municipios.model.Municipio;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.MunicipioService;
import com.mercurio.lms.tabelaprecos.model.TabelaPreco;
import com.mercurio.lms.tabelaprecos.model.service.TabelaPrecoService;
import com.mercurio.lms.util.LongUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.DivisaoCliente;
import com.mercurio.lms.vendas.model.PropostaFOB;
import com.mercurio.lms.vendas.model.TabelaDivisaoCliente;
import com.mercurio.lms.vendas.model.service.ClienteService;
import com.mercurio.lms.vendas.model.service.DivisaoClienteService;
import com.mercurio.lms.vendas.model.service.TabelaDivisaoClienteService;
import com.mercurio.lms.vendas.util.ConstantesVendas;
import com.mercurio.lms.vendas.model.service.PropostaFOBService;

/**
 * Generated by: ADSM ActionGenerator
 *
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.vendas.gerarPropostaFOBAction"
 * 
 */
public class GerarPropostaFOBAction extends CrudAction {
	
	private ClienteService clienteService;
	private DivisaoClienteService divisaoClienteService;
	private EnderecoPessoaService enderecoPessoaService;
	private MunicipioService finMunicipioService;
	private TabelaDivisaoClienteService tabelaDivisaoClienteService;
	private PropostaFOBService propostaFOBService;
	private FilialService filialService;
	private TabelaPrecoService tabelaPrecoService;
	
	public List findClienteLookup(TypedFlatMap criteria) {
		
		List<Map> list = clienteService.findLookupCliente(criteria.getString("pessoa.nrIdentificacao"));
		if(CollectionUtils.isNotEmpty(list)){
			Map param = list.get(0);
			Long idCliente = MapUtils.getLong(param, "idCliente");
			EnderecoPessoa ep = enderecoPessoaService.findEnderecoPessoaPadrao(idCliente);
			param.put("idMunicipio", ep.getMunicipio().getIdMunicipio());
			param.put("nmMunicipio", ep.getMunicipio().getNmMunicipio());
		}		
		return list;
	}
	
	public List findLookupTabelaPreco(Map criteria) {		
		return tabelaPrecoService.findLookup(criteria);
	}	

	public List findDivisaoCombo(TypedFlatMap criteria){
		List lsParams = new ArrayList();
		Long idCliente = criteria.getLong("cliente.idCliente");
		if(LongUtils.hasValue(idCliente)) {
			
			Map<String, Object> param = new HashMap<String, Object>();			
			
			List<TabelaDivisaoCliente> list = tabelaDivisaoClienteService.findByServicoCliente(idCliente,"R");
			for (TabelaDivisaoCliente tdc : list) {
				param = new HashMap<String, Object>();
				param.put("idDivisaoCliente", tdc.getDivisaoCliente().getIdDivisaoCliente());
				param.put("dsDivisaoCliente", tdc.getDivisaoCliente().getDsDivisaoCliente());
				lsParams.add(param);
			}
			return divisaoClienteService.findLookupDivisoesCliente(idCliente,ConstantesVendas.SITUACAO_ATIVO);
		}
		return lsParams;
	}	
	
	public List findMunicipioLookup(TypedFlatMap criteria){
		Long idCliente = criteria.getLong("cliente.idCliente");
		List list = new ArrayList();
		if(LongUtils.hasValue(idCliente)) {
			
			list.add(enderecoPessoaService.findMunicipioUfByIdPessoa(idCliente));
			return list;
		}else{
			return finMunicipioService.findLookupMunicipio(criteria);
		}		
	}
	
	public Map findTabelaPrecoFOB(Map criteria){
		
		Long idDivisaoCliente = MapUtils.getLong(criteria, "idDivisaoCliente");
		
		Map param = new HashMap();
		
		List<TabelaDivisaoCliente> list = tabelaDivisaoClienteService.findTabelaPrecoFob(idDivisaoCliente,"R");
		if(CollectionUtils.isNotEmpty(list)){
			TabelaPreco tabelaFOB = list.get(0).getTabelaPreco();
			param.put("idTabelaPreco", tabelaFOB.getIdTabelaPreco());
			param.put("dsDescricao", tabelaFOB.getDsDescricao());
		}
		return param;
	}
	
	public TabelaPreco findTabelaPrecoFOBVigente(Map criteria){
		return propostaFOBService.findTabelaPrecoFOBVigente();
	}
	
	public Map findPropostaFOBCliente(Map criteria){
		
		Map params = new HashMap();
		
		Long idCliente = MapUtils.getLong(criteria,"idCliente");
		
		List<PropostaFOB> list = propostaFOBService.findByCliente(idCliente);
		if(CollectionUtils.isNotEmpty(list)){
			params.put("existeParametroFOB", true);
		}else{
			params.put("existeParametroFOB", false);			
		}
		return params;
	}
	
	
	public PropostaFOB findPropostaFOBClienteInformado(Map criteria){
				
		Long idCliente = MapUtils.getLong(criteria,"idCliente");
		
		List<PropostaFOB> list = propostaFOBService.findByCliente(idCliente);
		if(CollectionUtils.isNotEmpty(list)){
			PropostaFOB propostaFOB = ((PropostaFOB)list.get(0));
			propostaFOB.getTabelaPreco().setTabelaPrecoStringDescricao(propostaFOB.getTabelaPreco().getTabelaPrecoString());
			
			return propostaFOB;
		}
		return null;
	}	
	
	public List findOrigensProposta(Map criteria){
		return propostaFOBService.findOrigensProposta(criteria);				
	}
		
	public Serializable executeEfetivarProposta(Map criteria){
		
		PropostaFOB fob = new PropostaFOB();
		
		Long idPropostaFOB =  MapUtils.getLong(criteria, "idPropostaFOB");
		if(idPropostaFOB != null){
			fob.setIdPropostaFOB(idPropostaFOB);
		}
		
		Map param = MapUtils.getMap(criteria, "cliente");
		Long idCliente = MapUtils.getLong(param, "idCliente");
		if(idCliente != null){
			Cliente cliente = new Cliente();
			cliente.setIdCliente(idCliente);
			fob.setCliente(cliente);
		}
		
		param = MapUtils.getMap(criteria, "tabelaPreco");
		Long idTabelaPreco = MapUtils.getLong(param, "idTabelaPreco");
		if(idTabelaPreco != null){
			TabelaPreco tabelaPreco = new TabelaPreco();
			tabelaPreco.setIdTabelaPreco(idTabelaPreco);
			fob.setTabelaPreco(tabelaPreco);			
		}
		
		param = MapUtils.getMap(criteria, "municipio");
		Long idMunicipio = MapUtils.getLong(param, "idMunicipio");
		if(idMunicipio != null){
			Municipio municipio = new Municipio();
			municipio.setIdMunicipio(idMunicipio);
			fob.setMunicipio(municipio);
		}
		
		param = MapUtils.getMap(criteria, "divisaoCliente");
		Long idDivisaoCliente = MapUtils.getLong(param, "idDivisaoCliente");
		if(idDivisaoCliente != null){
			DivisaoCliente divisaoCliente = new DivisaoCliente();
			divisaoCliente.setIdDivisaoCliente(idDivisaoCliente);
			fob.setDivisaoCliente(divisaoCliente);
		}
		
		fob.setBlEfetivada(BooleanUtils.toBoolean(MapUtils.getBoolean(criteria, "blEfetivada")));
		
		List origens = MapUtilsPlus.getList(criteria, "origensProposta", null);
		
		return propostaFOBService.executeEfetivarProposta(fob,origens);
		
	}
	
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}

	public void setDivisaoClienteService(DivisaoClienteService divisaoClienteService) {
		this.divisaoClienteService = divisaoClienteService;
	}

	public void setEnderecoPessoaService(EnderecoPessoaService enderecoPessoaService) {
		this.enderecoPessoaService = enderecoPessoaService;
	}

	public void setFinMunicipioService(MunicipioService finMunicipioService) {
		this.finMunicipioService = finMunicipioService;
	}

	public void setTabelaDivisaoClienteService(
			TabelaDivisaoClienteService tabelaDivisaoClienteService) {
		this.tabelaDivisaoClienteService = tabelaDivisaoClienteService;
	}

	public void setPropostaFOBService(PropostaFOBService propostaFOBService) {
		this.propostaFOBService = propostaFOBService;
	}

	public FilialService getFilialService() {
		return filialService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public TabelaPrecoService getTabelaPrecoService() {
		return tabelaPrecoService;
	}

	public void setTabelaPrecoService(TabelaPrecoService tabelaPrecoService) {
		this.tabelaPrecoService = tabelaPrecoService;
	}
	
}
