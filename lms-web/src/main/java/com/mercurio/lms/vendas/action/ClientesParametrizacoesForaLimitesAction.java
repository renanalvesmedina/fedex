package com.mercurio.lms.vendas.action;

import java.util.List;
import java.util.Map;

import org.apache.commons.collections.MapUtils;

import com.mercurio.adsm.framework.report.ReportActionSupport;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.RegionalFilialService;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.report.ClienteParametrizacaoForaLimiteService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.vendas.clientesParametrizacoesForaLimitesAction"
 */

public class ClientesParametrizacoesForaLimitesAction extends ReportActionSupport {
	private FilialService filialService;
	private RegionalFilialService regionalFilialService;
	private ClienteParametrizacaoForaLimiteService clienteParametrizacaoForaLimiteService;

	@Override
	public java.io.File execute(TypedFlatMap parameters) throws Exception {
		reportServiceSupport = clienteParametrizacaoForaLimiteService;
		return super.execute(parameters);
	}

	/**
	 * Dados de inicializacao de tela
	 * @return
	 */
	public Map getBasicData() {
		Filial filial = SessionUtils.getFilialSessao();
		Map mapRegUserLogado = regionalFilialService.findRegionalByIdFilial(filial.getIdFilial());
		Long idRegional = MapUtils.getLong(mapRegUserLogado, "idRegional");

		TypedFlatMap data = new TypedFlatMap();
		data.put("regional.idRegional",idRegional);
		data.put("filial.idFilial",filial.getIdFilial());
		data.put("filial.sgFilial",filial.getSgFilial());
		data.put("filial.pessoa.nmFantasia",filial.getPessoa().getNmFantasia());
		data.put("dtAtual", JTDateTimeUtils.getDataAtual());

		return data;
	}

	public List findLookupFilial(Map criteria){
		return filialService.findLookupFilial(criteria);
	}

	/**
	 * Find para combo de Regional
	 * @param criterios
	 * @return
	 */
	public List findRegional(Map criterios){
		return SessionUtils.getRegionaisFiliaisUsuarioLogado();
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public void setClienteParametrizacaoForaLimiteService(ClienteParametrizacaoForaLimiteService clienteParametrizacaoForaLimiteService) {
		this.clienteParametrizacaoForaLimiteService = clienteParametrizacaoForaLimiteService;
	}
	public void setRegionalFilialService(RegionalFilialService regionalFilialService) {
		this.regionalFilialService = regionalFilialService;
	}
}