package com.mercurio.lms.vendas.action;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.report.ReportExecutionManager;
import com.mercurio.adsm.framework.session.SessionContext;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.municipios.model.Pais;
import com.mercurio.lms.municipios.model.service.MunicipioService;
import com.mercurio.lms.seguros.model.Seguradora;
import com.mercurio.lms.seguros.model.service.ReguladoraSeguroService;
import com.mercurio.lms.seguros.model.service.SeguradoraService;
import com.mercurio.lms.seguros.report.RelatorioManterSegurosClienteService;
import com.mercurio.lms.util.MoedaUtils;
import com.mercurio.lms.util.session.SessionKey;
import com.mercurio.lms.vendas.model.SeguroCliente;
import com.mercurio.lms.vendas.model.service.ClienteService;
import com.mercurio.lms.vendas.model.service.SeguroClienteService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.vendas.manterSegurosClienteAction"
 */

public class ManterSegurosClienteAction extends CrudAction  {
	
	private ConfiguracoesFacade configuracoesFacade;
	private ReguladoraSeguroService reguladoraSeguroService;
	private ClienteService clienteService;
	private SeguradoraService seguradoraService;
	private MunicipioService municipioService;
	private ReportExecutionManager reportExecutionManager;
	private RelatorioManterSegurosClienteService relatorioManterSegurosClienteService;
	
	public void setSeguroCliente(SeguroClienteService seguroClienteService) {
		this.defaultService = seguroClienteService;
	}
	
    public void removeById(java.lang.Long id) {
        ((SeguroClienteService)defaultService).removeById(id);
    }

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	((SeguroClienteService)defaultService).removeByIds(ids);
    }

    public SeguroCliente findById(java.lang.Long id) {
    	return ((SeguroClienteService)defaultService).findById(id);
    }
    
    /**
     * Método responsável por retornar uma lista com as moedas de todos países
     * @return List
     */
    public List findMoeda(){
    	Pais  pais  = (Pais)  SessionContext.get(SessionKey.PAIS_KEY);
    	return MoedaUtils.moedaToMap(this.configuracoesFacade.getMoeda(pais.getIdPais(), Boolean.TRUE));
    }
    
    /**
     * LMS-6148
     * Método utilizado para realizar o Lookup "Cliente"
     * 
     * @param criteria
     * @return
     */
    public List findClienteLookup(TypedFlatMap criteria) {
		return clienteService.findLookupCliente(criteria.getString("pessoa.nrIdentificacao"));
	}

/**
     * LMS-6148
     * Método que retornar uma lista ordenada para ser utilizada na combobox "Seguradora".
     * 
     * @param criteria
     * @return
     */
    public List findSeguradoraOrderByNmPessoa(TypedFlatMap criteria){
    	List lista = seguradoraService.findOrderByNmPessoa(criteria);
    	List result = new ArrayList();
    	TypedFlatMap map;
    	for(Iterator ite = lista.iterator(); ite.hasNext();){
    		Seguradora seguradora = (Seguradora)ite.next();
    		map = new TypedFlatMap();
    		map.put("tpSituacao", seguradora.getTpSituacao().getValue());
    		map.put("seguradora.idSeguradora", seguradora.getIdSeguradora());
    		map.put("seguradora.pessoa.nmPessoa", seguradora.getPessoa().getNmPessoa());
    		map.put("seguradora.pessoa.idPessoa", seguradora.getPessoa().getIdPessoa());
    		//Exceção! onlyActiveValues da jsp não funciona neste caso.
    		if((!criteria.containsKey("tpSituacao") || !"A".equals(criteria.getDomainValue("tpSituacao").getValue())) || 
    		   "A".equals(seguradora.getTpSituacao().getValue())) {
    			result.add(map);
    		}
    	}
        return result;
    }

    /**
     * Geração do relatório excel
     * 
     * Jira LMS-6175
     * 
     * @param parameters
     * @return
     * @throws Exception
     */
    public String executeReport(TypedFlatMap params) throws Exception {
		return this.reportExecutionManager.generateReportLocator(this.relatorioManterSegurosClienteService, params);
	}
    
    /**
     * LMS-6148
     * Método que retornar uma lista ordenada para ser utilizada na combobox "Corretora".
     * 
     * @param criteria
     * @return
     */
    public List findReguladoraOrderByNmPessoa(Map criteria){
        return reguladoraSeguroService.findOrderByNmPessoa(criteria);
    }
    
    /**
     * LMS-6148
     * Método utilizado para realizar os Lookups "Município origem" e "Município destino" 
     * 
     * @param criteria
     * @return
     */
    public List findLookupMunicipio(Map criteria){
		return municipioService.findLookup(criteria);
	}
    
    /**
	 * Método que seta a dataAtual no campo de vigência na tela de listagem
	 * @return
	 */
	
    /* *SETTERS* */
    public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}
    
	public void setReguladoraSeguroService(ReguladoraSeguroService reguladoraSeguroService) {
		this.reguladoraSeguroService = reguladoraSeguroService;
	}
	
    public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}

    public void setSeguradoraService(SeguradoraService seguradoraService) {
		this.seguradoraService = seguradoraService;
	}

	public void setMunicipioService(MunicipioService municipioService) {
		this.municipioService = municipioService;
	}

	public void setReportExecutionManager(
			ReportExecutionManager reportExecutionManager) {
		this.reportExecutionManager = reportExecutionManager;
	}

	public void setRelatorioManterSegurosClienteService(RelatorioManterSegurosClienteService relatorioManterSegurosClienteService) {
		this.relatorioManterSegurosClienteService = relatorioManterSegurosClienteService;
	}

	/**
	 * LMS-7285 - Lookup para {@link SeguroCliente}.
	 * 
	 * @param criteria
	 *            filtro para lookup
	 * @return lista de {@link SeguroCliente}
	 */
	@SuppressWarnings("unchecked")
	public List<SeguroCliente> findLookup(TypedFlatMap criteria) {
		return ((SeguroClienteService) defaultService).findLookup(criteria);
	}

}
