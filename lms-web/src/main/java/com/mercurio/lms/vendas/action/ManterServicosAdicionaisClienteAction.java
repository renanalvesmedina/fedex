package com.mercurio.lms.vendas.action;

import java.io.Serializable;
import java.text.Collator;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.MapUtils;
import org.springframework.context.i18n.LocaleContextHolder;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.masterdetail.ItemList;
import com.mercurio.adsm.framework.model.masterdetail.ItemListConfig;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailAction;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailFactory;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailKey;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntry;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntryConfig;
import com.mercurio.adsm.framework.util.FilterResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.expedicao.util.ConstantesExpedicao;
import com.mercurio.lms.tabelaprecos.model.ParcelaPreco;
import com.mercurio.lms.tabelaprecos.model.service.ParcelaPrecoService;
import com.mercurio.lms.tabelaprecos.model.service.TabelaPrecoParcelaService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.LongUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.ServicoAdicionalCliente;
import com.mercurio.lms.vendas.model.ServicoAdicionalClienteDestinatario;
import com.mercurio.lms.vendas.model.service.ClienteService;
import com.mercurio.lms.vendas.model.service.ServicoAdicionalClienteDestinatarioService;
import com.mercurio.lms.vendas.model.service.ServicoAdicionalClienteService;


/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.vendas.manterServicosAdicionaisClienteAction"
 */

public class ManterServicosAdicionaisClienteAction extends MasterDetailAction {
	private TabelaPrecoParcelaService tabelaPrecoParcelaService;
	private ClienteService clienteService;	
	private ParcelaPrecoService parcelaPrecoService;
	private ServicoAdicionalClienteDestinatarioService servAdicCliDestService;

	public void removeById(java.lang.Long id) {	     	   	    	
		getService().removeByIdCascade(id);
	}

	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List<Long> ids) {		
		getService().removeByIdsCascade(ids);				
	}

	public Object findById(java.lang.Long id) {
		Object masterObj = getService().findById(id);
		putMasterInSession(masterObj);
		return masterObj;
	}

	public Map preStore(TypedFlatMap bean) {		
		Long idServicoAdicionalCliente = bean.getLong("idServicoAdicionalCliente");
		
		MasterEntry entry = getMasterFromSession(idServicoAdicionalCliente, true);
    	ItemList destinatarios = getItemsFromSession(entry, "destinatarios");
		
    	if(destinatarios.hasItems() && bean.getBoolean("blPagaParaTodos")) {
    		throw new BusinessException("LMS-04460");
    	}

    	Long idParcelaPreco = bean.getLong("parcelaPreco.idParcelaPreco");
        ParcelaPreco parcela = parcelaPrecoService.findById(idParcelaPreco);

    	if(bean.getBoolean("blCobrancaCte") && ConstantesExpedicao.CD_PALETIZACAO.equals(parcela.getCdParcelaPreco())){
            throw new BusinessException("LMS-04577");
        }
    	
    	
    	Map<String, Object> result = new HashMap<String, Object>();
    	result.put("validated", true);
    	return result;
	}

    public Serializable store(ServicoAdicionalCliente bean) { 	
    	MasterEntry entry = getMasterFromSession(bean.getIdServicoAdicionalCliente(), true);
    	ItemList destinatarios = getItemsFromSession(entry, "destinatarios");
    	    	
    	if(bean.getBlPagaParaTodos()) {
    		for (int i=destinatarios.size()-1; i>=0; i--) {        		
        		destinatarios.remove(i);
    		}    		  
    	}
    	   
		Serializable s = getService().storeCascade(bean, destinatarios.getNewOrModifiedItems(), destinatarios.getRemovedItems());		
		updateMasterInSession(entry);
		
		return s;    	
    }

    public Serializable storeDestinatario(TypedFlatMap parameters) {    	
    	Cliente cliente = clienteService.findById(parameters.getLong("clienteDestinatario.idCliente"));		    	    
    	
    	if(cliente.getBlDificuldadeEntrega() != null && !cliente.getBlDificuldadeEntrega()) {
    		throw new BusinessException("LMS-04458");
    	}
    	    	
    	MasterEntry masterObj = getMasterFromSession(parameters.getLong("idMaster"), false);    	   
    	ItemList destinatarios = getItemsFromSession(masterObj, "destinatarios");
		ItemListConfig config = getMasterConfig().getItemListConfig("destinatarios");

    	
    	for (Iterator iter = destinatarios.iterator((Long)masterObj.getMasterId(), config); iter.hasNext();) {
    		ServicoAdicionalClienteDestinatario destinatario = (ServicoAdicionalClienteDestinatario) iter.next();
    		if(destinatario.getClienteDestinatario().getIdCliente().equals(cliente.getIdCliente())) {
				throw new BusinessException("LMS-04459");
			}	
    	}
    	    			    	
		Serializable s = saveItemInstance(parameters, "destinatarios");			
		return s; 
	}
    

	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIdsDestinatarios(List ids) {
		super.removeItemByIds(ids,"destinatarios");
	}

	public List findLookupCliente(Map<String, Object> criteria) {		
		List<Cliente> clientes = clienteService.findLookup(criteria);
		List<Map<String, Object>> retorno = new ArrayList<Map<String,Object>>();
		
		if (clientes != null) {
			for (Cliente cliente : clientes) {
				TypedFlatMap map = new TypedFlatMap();				
				map.put("idCliente", cliente.getIdCliente());
				map.put("tpSituacao", cliente.getTpSituacao());
				map.put("pessoa.nmPessoa", cliente.getPessoa().getNmPessoa());
				map.put("pessoa.nrIdentificacao", cliente.getPessoa().getNrIdentificacao());
				map.put("pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(cliente.getPessoa()));
				map.put("pessoa.tpIdentificacao", cliente.getPessoa().getTpIdentificacao());
				map.put("pessoa.tpCliente", cliente.getTpCliente());
				map.put("pessoa.blDificuldadeEntrega", cliente.getBlDificuldadeEntrega());
				retorno.add(map);

	}
		}
		return retorno;
	}

	public Object findByIdDestinatario(MasterDetailKey key) {
    	return  findItemById(key, "destinatarios");
	}
	
	public ResultSetPage findPaginatedDestinatarios(TypedFlatMap criteria) {    			
		ResultSetPage rs = (ResultSetPage) findPaginatedItemList(criteria, "destinatarios");
		
		FilterResultSetPage filter = new FilterResultSetPage(rs) {			
			public Map filterItem(Object item) {		 	
				ServicoAdicionalClienteDestinatario destinatario = (ServicoAdicionalClienteDestinatario) item;
				TypedFlatMap tfm = new TypedFlatMap();
								
				tfm.put("idServicoAdicionalClienteDestinatario", destinatario.getIdServicoAdicionalClienteDestinatario());
				Pessoa pessoa = destinatario.getClienteDestinatario().getPessoa();
				tfm.put("pessoa.nrIdentificacao", FormatUtils.formatIdentificacao(pessoa));
				tfm.put("pessoa.nmPessoa", pessoa.getNmPessoa());
				
				return tfm;
		 	};
		 };
		
		return (ResultSetPage) filter.doFilter();		    
	}
	               
	public Integer getRowCountDestinatarios(TypedFlatMap criteria) {
		return getRowCountItemList(criteria, "destinatarios");
	}
	
	public List findTabelaPrecoParcelaCombo(Map criteria) {
		return getTabelaPrecoParcelaService().findMappedList(criteria,false);
	}

	public List findTabelaPrecoParcelaComboActiveValues(Map criteria) {
		return getTabelaPrecoParcelaService().findMappedList(criteria,true);
	}
	
	/**
	 * 01.04.01.06 Item 3.1 Layout
	 * 
	 * @param criteria
	 * @return
	 */
	@SuppressWarnings("rawtypes")
	public boolean isTaxaPermanenciaCargaOrTaxaFielDepositario(Map criteria){
		return getTabelaPrecoParcelaService().findTaxaPermanenciaCargaOrTaxaFielDepositario(criteria);
	}
	

	/**
	 * 01.04.01.06 Item 3.1 Layout
	 * 
	 * @param criteria
	 * @return
	 */
	@SuppressWarnings("rawtypes")
	public boolean isParcelaKmExcedenteOrVeiculoDedicado(Map criteria){
		if(criteria.containsKey("idParcelaPreco") && LongUtils.hasValue(MapUtils.getLong(criteria,"idParcelaPreco"))){
			Long idParcelaPreco = MapUtils.getLong(criteria,"idParcelaPreco");
			ParcelaPreco parcela = parcelaPrecoService.findById(idParcelaPreco);


			List<String> cdParcelas = new ArrayList<String>();
			cdParcelas.add("IdEntColDedicadokm");
			cdParcelas.add("IdEntColDedTocokm");
			cdParcelas.add("IdEntColDedVankm");
			cdParcelas.add("IdEntColDedicado");
			cdParcelas.add("IdEntColDedToco");
			cdParcelas.add("IdEntColDedVan");
			cdParcelas.add("IdSegPerm");
			
			if(parcela != null && cdParcelas.contains(parcela.getCdParcelaPreco())){
				return true;
			}
		}
	
		return false;
	}
	
	
	/**
	 * 01.04.01.06 Item 3.1 Layout
	 * 
	 * @param criteria
	 * @return
	 */
	@SuppressWarnings("rawtypes")
	public boolean isParcelaSeguroCargaPermanencia(Map criteria){
		if(criteria.containsKey("idParcelaPreco") && LongUtils.hasValue(MapUtils.getLong(criteria,"idParcelaPreco"))){
			Long idParcelaPreco = MapUtils.getLong(criteria,"idParcelaPreco");
			ParcelaPreco parcela = parcelaPrecoService.findById(idParcelaPreco);

			if(parcela != null && "IdSegPerm".equals(parcela.getCdParcelaPreco())){
				return true;
			}
		}
	
		return false;
	}
	
    @Override
	protected MasterEntryConfig createMasterConfig(MasterDetailFactory masterFactory) {
    	MasterEntryConfig config = masterFactory.createMasterEntryConfig(ServicoAdicionalCliente.class,true);

		Comparator<ServicoAdicionalClienteDestinatario> comparator = new Comparator<ServicoAdicionalClienteDestinatario>() {		
			public int compare(ServicoAdicionalClienteDestinatario obj1, ServicoAdicionalClienteDestinatario obj2) {
				Collator collator = Collator.getInstance(LocaleContextHolder.getLocale());				

				return  collator.compare(obj1.getClienteDestinatario().getPessoa().getNrIdentificacao(),
						                 obj2.getClienteDestinatario().getPessoa().getNrIdentificacao());
		
    }
    	};

    	ItemListConfig destinatariosListConfig = new ItemListConfig() {
			private static final long serialVersionUID = 1L;

			public List initialize(Long masterId, Map parameters) {
				return  servAdicCliDestService.findByIdServicoAdicionalCliente(masterId);
}
			
			public Integer getRowCount(Long masterId, Map parameters) {		
				return servAdicCliDestService.findByIdServicoAdicionalCliente(masterId).size();
			}			
			
            public void setMasterOnItem(Object master, Object itemBean) {
            	ServicoAdicionalCliente servAdicCliente = (ServicoAdicionalCliente) master;
            	ServicoAdicionalClienteDestinatario destinatario = (ServicoAdicionalClienteDestinatario) itemBean;
            	destinatario.setServicoAdicionalCliente(servAdicCliente);
            }
            
			public Object populateNewItemInstance(Map parameters, Object object) {
				TypedFlatMap criteria = (TypedFlatMap) parameters;				
				ServicoAdicionalClienteDestinatario destinatario = new ServicoAdicionalClienteDestinatario();				
				Cliente cliente = clienteService.findById(criteria.getLong("clienteDestinatario.idCliente"));							
				destinatario.setClienteDestinatario(cliente);		
				return destinatario;
			}
    	};
    	
    	//Seta as configuracoes do filho...
    	config.addItemConfig("destinatarios", ServicoAdicionalClienteDestinatario.class, destinatariosListConfig, comparator);
		
		return config;
    }
    
	public void setService(ServicoAdicionalClienteService service) {
		this.setMasterService(service);
	}
	
	public ServicoAdicionalClienteService getService() {
		return (ServicoAdicionalClienteService) this.getMasterService();
	}
	
	public void setTabelaPrecoParcelaService(TabelaPrecoParcelaService tabelaPrecoParcelaService) {
		this.tabelaPrecoParcelaService = tabelaPrecoParcelaService;
	}

	public TabelaPrecoParcelaService getTabelaPrecoParcelaService() {
		return tabelaPrecoParcelaService;
	}
    
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}

	public void setServAdicCliDestService(
			ServicoAdicionalClienteDestinatarioService servAdicCliDestService) {
		this.servAdicCliDestService = servAdicCliDestService;
	}

	public ParcelaPrecoService getParcelaPrecoService() {
		return parcelaPrecoService;
	}

	public void setParcelaPrecoService(ParcelaPrecoService parcelaPrecoService) {
		this.parcelaPrecoService = parcelaPrecoService;
	}
}