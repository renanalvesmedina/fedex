package com.mercurio.lms.vendas.action;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.MapUtils;
import org.apache.commons.lang.StringUtils;
import org.joda.time.YearMonthDay;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.ConstantesConfiguracoes;
import com.mercurio.lms.configuracoes.model.EnderecoPessoa;
import com.mercurio.lms.configuracoes.model.Funcionario;
import com.mercurio.lms.configuracoes.model.Moeda;
import com.mercurio.lms.configuracoes.model.MoedaPais;
import com.mercurio.lms.configuracoes.model.ParametroGeral;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.configuracoes.model.service.EnderecoPessoaService;
import com.mercurio.lms.configuracoes.model.service.FuncionarioService;
import com.mercurio.lms.configuracoes.model.service.MoedaPaisService;
import com.mercurio.lms.configuracoes.model.service.ParametroGeralService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.Regional;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.HistoricoFilialService;
import com.mercurio.lms.municipios.model.service.RegionalFilialService;
import com.mercurio.lms.tabelaprecos.model.TabelaPreco;
import com.mercurio.lms.tabelaprecos.model.service.TabelaPrecoService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.IntegerUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.JTFormatUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.dto.PipelineClienteSimulacaoDTO;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.PipelineCliente;
import com.mercurio.lms.vendas.model.PipelineReceita;
import com.mercurio.lms.vendas.model.SegmentoMercado;
import com.mercurio.lms.vendas.model.Visita;
import com.mercurio.lms.vendas.model.service.ClienteService;
import com.mercurio.lms.vendas.model.service.PipelineClienteService;
import com.mercurio.lms.vendas.model.service.PipelineClienteSimulacaoService;
import com.mercurio.lms.vendas.model.service.PipelineEtapaService;
import com.mercurio.lms.vendas.model.service.PipelineReceitaService;
import com.mercurio.lms.vendas.model.service.TipoVisitaService;
import com.mercurio.lms.vendas.model.service.VisitaService;

/**
 * Generated by: ADSM ActionGenerator
 * 
 * Não inserir documentação após ou remover a tag do XDoclet a seguir. O valor
 * do <code>id</code> informado abaixo deve ser utilizado para referenciar
 * este serviço.
 * 
 * @spring.bean id="lms.vendas.manterPipelineClienteAction"
 */
public class ManterPipelineClienteAction extends CrudAction {
	private static final String DS_CARGO_EXECUTIVO_VENDAS = "EXECUTIVO VENDAS";
	private PipelineReceitaService pipelineReceitaService;
	private RegionalFilialService regionalFilialService;
	private FuncionarioService funcionarioService;
	private ClienteService clienteService;
	private TipoVisitaService tipoVisitaService;
	private FilialService filialService;
	private EnderecoPessoaService enderecoPessoaService;
	private ParametroGeralService parametroGeralService;
	private ConfiguracoesFacade configuracoesFacade;
	private MoedaPaisService moedaPaisService;
	private PipelineEtapaService pipelineEtapaService;
	private VisitaService visitaService;
	private HistoricoFilialService historicoFilialService;
	private PipelineClienteSimulacaoService pipelineClienteSimulacaoService;
	private TabelaPrecoService tabelaPrecoService;
	

	public VisitaService getVisitaService() {
		return visitaService;
	}

	public void setVisitaService(VisitaService visitaService) {
		this.visitaService = visitaService;
	}

	public PipelineEtapaService getPipelineEtapaService() {
		return pipelineEtapaService;
	}

	public void setPipelineEtapaService(PipelineEtapaService pipelineEtapaService) {
		this.pipelineEtapaService = pipelineEtapaService;
	}

	public MoedaPaisService getMoedaPaisService() {
		return moedaPaisService;
	}

	public void setMoedaPaisService(MoedaPaisService moedaPaisService) {
		this.moedaPaisService = moedaPaisService;
	}

	public ConfiguracoesFacade getConfiguracoesFacade() {
		return configuracoesFacade;
	}

	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}
	
	
	public List findLookupFilial(TypedFlatMap criteria) {
    	List listFilial = filialService.findLookupAsPaginated(criteria);
    	if (CollectionUtils.isNotEmpty(listFilial)) {
    		TypedFlatMap map = (TypedFlatMap) listFilial.get(0);
    		Long idFilial = map.getLong("idFilial");
    		try {
    			filialService.validateSelecaoFilialUsuarioEmpresa(idFilial, SessionUtils.getEmpresaSessao(), SessionUtils.getUsuarioLogado());
    		} catch (BusinessException e) {
    			map.put("error", configuracoesFacade.getMensagem(e.getMessageKey()));
    			Filial filialSessao = SessionUtils.getFilialSessao();
    			if (filialSessao != null) {
    				map.put("idFilial", filialSessao.getIdFilial());
    				map.put("sgFilial", filialSessao.getSgFilial());
    				map.put("nmFantasia", filialSessao.getPessoa().getNmFantasia());
    				Regional regionalVigente = regionalFilialService.findLastRegionalVigente(filialSessao.getIdFilial());
    				map.put("lastRegional", regionalVigente);
    			}
    		}
		}
    	return listFilial;
    }
	
	
	public void validaFilialSelecionadaById(TypedFlatMap criteria){
		Long idFilial = criteria.getLong("idFilial");
		if (idFilial != null) {
			filialService.validateSelecaoFilialUsuarioEmpresa(idFilial, SessionUtils.getEmpresaSessao(), SessionUtils.getUsuarioLogado());
		}
	}
	
	public TypedFlatMap store(TypedFlatMap map) {
				
		PipelineCliente pipelineCliente = new PipelineCliente();
			
		// dados da tela
		pipelineCliente.setIdPipelineCliente(map.getLong("idPipelineCliente"));
		pipelineCliente.setBlClienteNovo(map.getBoolean("blClienteNovo"));
		pipelineCliente.setTpMotivoPerda(map.getDomainValue("tpMotivoPerda"));
		pipelineCliente.setDtPerda(map.getYearMonthDay("dtPerda"));
		pipelineCliente.setTpSituacao(map.getDomainValue("tpSituacao"));
		pipelineCliente.setPercProbabilidade(map.getBigDecimal("percProbabilidade"));
		pipelineCliente.setVlReceitaAtual(map.getBigDecimal("vlReceitaAtual"));
		pipelineCliente.setVlReceitaPrevista(map.getBigDecimal("vlReceitaPrevista"));
		
		
		pipelineCliente.setTpNegociacao(map.getDomainValue("tpNegociacao"));
		pipelineCliente.setTpProbabilidade(map.getDomainValue("tpProbabilidade"));
		
		YearMonthDay mesAnoFechamento = map.getYearMonthDay("mesAnoFechamento");
		YearMonthDay mesAnoFechamentoAtualizado = map.getYearMonthDay("mesAnoFechamentoAtualizado");
		
		if (mesAnoFechamento != null) {
			pipelineCliente.setNrMesFechamento(StringUtils.leftPad("" + mesAnoFechamento.getMonthOfYear(), 2, "0"));
			pipelineCliente.setNrAnoFechamento("" + mesAnoFechamento.getYear());
		}
		if (mesAnoFechamentoAtualizado != null) {
			pipelineCliente.setNrMesFechamentoAtualizado(StringUtils.leftPad("" + mesAnoFechamentoAtualizado.getMonthOfYear(), 2, "0"));
			pipelineCliente.setNrAnoFechamentoAtualizado("" + mesAnoFechamentoAtualizado.getYear());
		}
		//segmento de mercado
		SegmentoMercado sMercado = new SegmentoMercado();
		sMercado.setIdSegmentoMercado(map.getLong("segmentoMercado.idSegmentoMercado"));
		pipelineCliente.setSegmentoMercado(sMercado);
		
		
		
	    //pessoa
		if(map.getLong("cliente.idCliente")!= null){
			Pessoa pessoa = new Pessoa();
			pessoa.setNmPessoa(map.getString("cliente.pessoa.nmPessoa"));
			pessoa.setIdPessoa(map.getLong("cliente.idCliente"));
	
			//cliente.
			Cliente cliente = new Cliente();
			cliente.setIdCliente(pessoa.getIdPessoa());
			cliente.setPessoa(pessoa);
			pipelineCliente.setCliente(cliente);
			Cliente clienteLoaded = clienteService.findClienteResponsavelByIdCliente(cliente.getIdCliente());
			if (clienteLoaded != null && clienteLoaded.getCliente() != null) {
				pipelineCliente.setClienteByIdClienteRespnsavel(clienteLoaded.getCliente());
			}
		}else{
			if(!map.getString("cliente.pessoa.nmPessoa").equals(""))	
				pipelineCliente.setNmCliente(map.getString("cliente.pessoa.nmPessoa"));
		}

		
		//Usuario
		Usuario usuarioByIdUsuario = new Usuario();
		usuarioByIdUsuario.setIdUsuario(map.getLong("usuarioByIdUsuario.idUsuario"));
		usuarioByIdUsuario.setNrMatricula(map.getString("usuarioByIdUsuario.nrMatricula"));
		usuarioByIdUsuario.setNmUsuario(map.getString("usuarioByIdUsuario.nmUsuario"));
		pipelineCliente.setUsuarioByIdUsuario(usuarioByIdUsuario);

		//Filial
		Long idFilial = map.getLong("filial.idFilial");
		Filial filial = filialService.findById(idFilial);
		pipelineCliente.setFilial(filial);  

		//moeda
		Moeda moeda = new Moeda();
		moeda.setIdMoeda(map.getLong("moeda.idMoeda"));
		pipelineCliente.setMoeda(moeda);
				
		List listPipelineReceita = new ArrayList<PipelineReceita>();
		
		for(int i=1; i<=1 ; i++){
			if(!map.getString("dsConcorrente1"+i).equals("") || 
					!map.getString("dsConcorrente1"+i).equals("") || 
					map.getBigDecimal("vlReceitaAtual"+i)!= null || 
					!map.getDomainValue("tpAbrangencia"+i).getValue().equals("") || 
					!map.getDomainValue("tpModal"+i).getValue().equals("")){
				if(map.getDomainValue("tpAbrangencia"+i).getValue().equals("")|| map.getDomainValue("tpModal"+i).getValue().equals("") || map.getBigDecimal("vlReceitaAtual"+i)== null){
					throw new BusinessException("LMS-01053");
				}
			}
			if((!map.get("tpAbrangencia"+i).equals("") && !map.get("tpModal"+i).equals("") && !map.get("vlReceitaAtual"+i).equals("")) || (map.getLong("idPipelineReceita"+i)!= null)){
				
				PipelineReceita pipelineReceita = new PipelineReceita();
				if(!map.get("idPipelineReceita"+i).equals(""))
					pipelineReceita.setIdPipelineReceita(map.getLong("idPipelineReceita"+i));
				
				if(!map.getDomainValue("tpAbrangencia"+i).getValue().equals(""))
					pipelineReceita.setTpAbrangencia(map.getDomainValue("tpAbrangencia"+i));
				
				if(!map.getDomainValue("tpModal"+i).getValue().equals(""))
					pipelineReceita.setTpModal(map.getDomainValue("tpModal"+i));
				
				if(!map.getString("dsConcorrente1"+i).equals(""))
					pipelineReceita.setDsConcorrente1(map.getString("dsConcorrente1"+i));
				
				if(!map.getString("dsConcorrente2"+i).equals(""))
					pipelineReceita.setDsConcorrente2(map.getString("dsConcorrente2"+i));
				
				if(map.getBigDecimal("vlReceitaAtual"+i)!= null){
					if(map.getBigDecimal("vlReceitaAtual"+i).compareTo(new BigDecimal(0))!= 0){
						pipelineReceita.setVlReceita(map.getBigDecimal("vlReceitaAtual"+i));
					}else{
						throw new BusinessException("LMS-01054");
					}
				}
				pipelineReceita.setPipelineCliente(pipelineCliente);
				listPipelineReceita.add(pipelineReceita);
			}
		}
		
		if(listPipelineReceita.isEmpty()){
			throw new BusinessException("LMS-01053");
		}
		
		
		pipelineCliente.setListPipelineReceita(listPipelineReceita);
		TypedFlatMap mapaIds = this.getService().store(pipelineCliente);

		return mapaIds;
   }
	
	public TypedFlatMap storeEtapas(TypedFlatMap mapa) {
		return getPipelineEtapaService().storeEtapas(mapa);
		}
				
	/**
	 * Remove um registro master e filhos
	 */ 
	public void removeById(java.lang.Long id) {
		this.getService().removeById(id); //pipelineCliente
	}
		
	/**
	 * Remove vários registros master e filhos
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		for (int i=0; i < ids.size(); i++){
			removeById((Long)ids.get(i));
		}
	}

	/**
	 * Localiza uma visita pelo id
	 * @param id
	 * @return
	 */
	public PipelineCliente findById(java.lang.Long id) {
		PipelineCliente pipelineCliente = this.getService().findById(id);
		
		return pipelineCliente;
	}
	
	/**
	 * Recupera o registro PipelineCliente do id informado
	 * 
	 * @param id
	 * @return
	 */
	public TypedFlatMap findByIdCustom(Long id) {
		PipelineCliente pipelineCliente = this.getService().findByIdAndInitialeProperties(id);
		TypedFlatMap map = new TypedFlatMap();
		
		//idPipelineCliente
		map.put("idPipelineCliente", pipelineCliente.getIdPipelineCliente());
		
		//filial
		map.put("filial.sgFilial", pipelineCliente.getFilial().getSgFilial());
		map.put("filial.idFilial", pipelineCliente.getFilial().getIdFilial());
		map.put("filial.pessoa.nmFantasia", pipelineCliente.getFilial().getPessoa().getNmFantasia());
		
		//regional
		Regional reg = regionalFilialService.findLastRegionalVigente(pipelineCliente.getFilial().getIdFilial());
		map.put("idRegional", reg.getIdRegional());
		map.put("siglaDescricao", reg.getSiglaDescricao());
		
		//funcionario
		map.put("usuarioByIdUsuario.idUsuario", pipelineCliente.getUsuarioByIdUsuario().getIdUsuario());
		map.put("usuarioByIdUsuario.nrMatricula",pipelineCliente.getUsuarioByIdUsuario().getNrMatricula());
		map.put("usuarioByIdUsuario.nmUsuario",pipelineCliente.getUsuarioByIdUsuario().getNmUsuario());
		map.put("usuarioByIdUsuario.vfuncionario.dsFuncao",pipelineCliente.getUsuarioByIdUsuario().getVfuncionario().getDsFuncao());
		
		//cliente
		if(pipelineCliente.getCliente()!= null){
			map.put("cliente.idCliente", pipelineCliente.getCliente().getIdCliente());
			map.put("cliente.pessoa.nrIdentificacao", pipelineCliente.getCliente().getPessoa().getNrIdentificacao());
			map.put("cliente.pessoa.nmPessoa", pipelineCliente.getCliente().getPessoa().getNmPessoa());
			//tipo cliente
			map.put("cliente.tpCliente", pipelineCliente.getCliente().getTpCliente().getValue());
		}else{
			if(pipelineCliente.getNmCliente()!= null && !pipelineCliente.getNmCliente().equals("") )
				map.put("cliente.pessoa.nmPessoa", pipelineCliente.getNmCliente());
		}
		
		//cliente novo
		map.put("blClienteNovo", pipelineCliente.getBlClienteNovo());
		
		//receita mensal atual
		map.put("moeda.idMoeda", pipelineCliente.getMoeda().getIdMoeda());
		map.put("vlReceitaAtual", pipelineCliente.getVlReceitaAtual());
		
		//ramo de atuação
		map.put("segmentoMercado.idSegmentoMercado", pipelineCliente.getSegmentoMercado().getIdSegmentoMercado());
		
		//probabilidade
		map.put("percProbabilidade", pipelineCliente.getPercProbabilidade());
		
		//tpSituacao
		map.put("tpSituacao", pipelineCliente.getTpSituacao().getValue());
		
		map.put("tpNegociacao", pipelineCliente.getTpNegociacao() == null ? "" : pipelineCliente.getTpNegociacao().getValue());
		
		map.put("tpProbabilidade", pipelineCliente.getTpProbabilidade() == null ? "" : pipelineCliente.getTpProbabilidade().getValue());
				
		if (pipelineCliente.getCliente() != null && pipelineCliente.getCliente().getPessoa() != null) {
			map.put("clienteByIdClienteRespnsavel.nrIdenticacao", pipelineCliente.getCliente().getCliente().getPessoa().getNrIdentificacao());
			map.put("clienteByIdClienteRespnsavel.nmPessoa", pipelineCliente.getCliente().getCliente().getPessoa().getNmPessoa());
		}
		
		YearMonthDay today = new YearMonthDay(
				Integer.valueOf(JTDateTimeUtils.getDataAtual().getYear()), 
				Integer.valueOf(JTDateTimeUtils.getDataAtual().getMonthOfYear()), 1);
			
			JTDateTimeUtils.getDataAtual();
		
		if (StringUtils.isNotBlank(pipelineCliente.getNrAnoFechamento())) {
			if (StringUtils.isNotBlank(pipelineCliente.getNrAnoFechamentoAtualizado())){
				map.put("mesAnoFechamento", new YearMonthDay(
						Integer.valueOf(pipelineCliente.getNrAnoFechamento()),
						Integer.valueOf(StringUtils.trim(pipelineCliente.getNrMesFechamento())), 1));
				map.put("mesAnoFechamentoAtualizado", new YearMonthDay(
						Integer.valueOf(pipelineCliente.getNrAnoFechamentoAtualizado()),
						Integer.valueOf(StringUtils.trim(pipelineCliente.getNrMesFechamentoAtualizado())), 1));
			}else{
				YearMonthDay dtFechamento = new YearMonthDay(
						Integer.valueOf(pipelineCliente.getNrAnoFechamento()), 
						Integer.valueOf(StringUtils.trim(pipelineCliente.getNrMesFechamento())), 1);
				
				if (dtFechamento.isBefore(today)) {
					pipelineCliente.setNrMesFechamentoAtualizado(String.valueOf(today.getMonthOfYear()));
					pipelineCliente.setNrAnoFechamentoAtualizado(String.valueOf(today.getYear()));
					map.put("mesAnoFechamentoAtualizado", today);
				}
				map.put("mesAnoFechamento", dtFechamento);
			}
		}else{
			if (StringUtils.isBlank(pipelineCliente.getNrAnoFechamentoAtualizado())){
				pipelineCliente.setNrMesFechamentoAtualizado(String.valueOf(today.getMonthOfYear()));
				pipelineCliente.setNrAnoFechamentoAtualizado(String.valueOf(today.getYear()));
				map.put("mesAnoFechamentoAtualizado", today);
			}else{
				map.put("mesAnoFechamentoAtualizado", new YearMonthDay(
						Integer.valueOf(pipelineCliente.getNrAnoFechamentoAtualizado()),
						Integer.valueOf(StringUtils.trim(pipelineCliente.getNrMesFechamentoAtualizado())), 1));
			}
		}
		
		List<PipelineReceita> listaPR = pipelineReceitaService.findPipelineReceitaByPipelineCliente(pipelineCliente.getIdPipelineCliente());
		int i=1;
		
		for(PipelineReceita pipelineReceita: listaPR){
			map.put("tpAbrangencia"+i, pipelineReceita.getTpAbrangencia().getValue());
			map.put("tpModal"+i, pipelineReceita.getTpModal().getValue());
			map.put("moeda"+i+".idMoeda", pipelineCliente.getMoeda().getIdMoeda());
			map.put("dsConcorrente1"+i, pipelineReceita.getDsConcorrente1());
			map.put("dsConcorrente2"+i, pipelineReceita.getDsConcorrente2());
			map.put("vlReceitaAtual"+i, pipelineReceita.getVlReceita());
			map.put("idPipelineReceita"+i, pipelineReceita.getIdPipelineReceita());
			i++;
		}
		
		//todas as combos moeda
		map.put("moeda1.idMoeda", pipelineCliente.getMoeda().getIdMoeda());
		map.put("moeda2.idMoeda", pipelineCliente.getMoeda().getIdMoeda());
		map.put("moeda3.idMoeda", pipelineCliente.getMoeda().getIdMoeda());
		map.put("moeda4.idMoeda", pipelineCliente.getMoeda().getIdMoeda());
		map.put("moeda5.idMoeda", pipelineCliente.getMoeda().getIdMoeda());
		map.put("vlReceitaPrevista", pipelineCliente.getVlReceitaPrevista());
			
        map.put("dtAtual", JTDateTimeUtils.getDataAtual());

		return map;
	}
	
	/**
	 * Recupera o registro PipelineCliente do id informado
	 * 
	 * @param id
	 * @return
	 */
	public TypedFlatMap findPipelineEtapas(Long idPipelineCliente) {
		pipelineEtapaService.storeAndFindPrimeiroEmbarquePipeline(idPipelineCliente);
		pipelineEtapaService.storeAndFindEfetivacaoPipeline(idPipelineCliente);
		List<HashMap> listaPE = pipelineEtapaService.findPipelineEtapaByPipelineCliente(idPipelineCliente);
		
		TypedFlatMap map = new TypedFlatMap();
		
		for(Map mapEtapa: listaPE){
			String infVisitas="";
			if(mapEtapa.get("idVisita")!= null){
				Visita v = getVisitaService().findById(Long.valueOf(mapEtapa.get("idVisita").toString()));
				infVisitas = v.getFilial().getSgFilial().concat(" ".concat(v.getDtVisita().toString().concat(" ".concat(v.getUsuarioByIdUsuario().getNmUsuario()))));
			}
			if(mapEtapa.get("tpPipelineEtapa")!= null){
				DomainValue dm = (DomainValue)mapEtapa.get("tpPipelineEtapa");
				
				if(dm.getValue().equals("05")){
					map.put("dtEvento1", JTFormatUtils.format((YearMonthDay)mapEtapa.get("dtEvento")));
					map.put("dsObservacao1",mapEtapa.get("dsObservacao"));
					map.put("idPipelineEtapa1", mapEtapa.get("idPipelineEtapa"));
				}else if(dm.getValue().equals("10")){
					map.put("dtEvento2", JTFormatUtils.format((YearMonthDay)mapEtapa.get("dtEvento")));
					map.put("dsObservacao2", mapEtapa.get("dsObservacao"));
					map.put("idPipelineEtapa2", mapEtapa.get("idPipelineEtapa"));
				}else if(dm.getValue().equals("15")){
					map.put("dtEvento3",JTFormatUtils.format((YearMonthDay) mapEtapa.get("dtEvento")));
					map.put("dsObservacao3", mapEtapa.get("dsObservacao"));
					map.put("idPipelineEtapa3", mapEtapa.get("idPipelineEtapa"));
					if(mapEtapa.get("idVisita")!= null){
						map.put("visita3.idVisita", mapEtapa.get("idVisita"));
						map.put("visita3.dsVisita", infVisitas);
					}
				}else if(dm.getValue().equals("20")){
					map.put("dtEvento4", JTFormatUtils.format((YearMonthDay)mapEtapa.get("dtEvento")));
					map.put("dsObservacao4", mapEtapa.get("dsObservacao"));
					map.put("idPipelineEtapa4", mapEtapa.get("idPipelineEtapa"));
					if(mapEtapa.get("idVisita")!= null){
						map.put("visita4.idVisita", mapEtapa.get("idVisita"));
						map.put("visita4.dsVisita", infVisitas);
					}
				}else if(dm.getValue().equals("25")){
					map.put("dtEvento5", JTFormatUtils.format((YearMonthDay)mapEtapa.get("dtEvento")));
					map.put("dsObservacao5", mapEtapa.get("dsObservacao"));
					map.put("idPipelineEtapa5", mapEtapa.get("idPipelineEtapa"));
					if(mapEtapa.get("idVisita")!= null){
						map.put("visita5.idVisita", mapEtapa.get("idVisita"));
						map.put("visita5.dsVisita", infVisitas);
					}
				}else if(dm.getValue().equals("30")){
					map.put("dtEvento6", JTFormatUtils.format((YearMonthDay)mapEtapa.get("dtEvento")));
					map.put("dsObservacao6", mapEtapa.get("dsObservacao"));
					map.put("idPipelineEtapa6", mapEtapa.get("idPipelineEtapa"));
					if(mapEtapa.get("idVisita")!= null){
						map.put("visita6.idVisita", mapEtapa.get("idVisita"));
						map.put("visita6.dsVisita", infVisitas);
					}
				}else if(dm.getValue().equals("35")){
					map.put("dtEvento7", JTFormatUtils.format((YearMonthDay)mapEtapa.get("dtEvento")));
					map.put("dsObservacao7", mapEtapa.get("dsObservacao"));
					map.put("idPipelineEtapa7", mapEtapa.get("idPipelineEtapa"));
					if(mapEtapa.get("idVisita")!= null){
						map.put("visita7.idVisita", mapEtapa.get("idVisita"));
						map.put("visita7.dsVisita", infVisitas);
					}
				}else if(dm.getValue().equals("55")){
					map.put("dtEvento8", JTFormatUtils.format((YearMonthDay)mapEtapa.get("dtEvento")));
					map.put("dsObservacao8",  mapEtapa.get("dsObservacao"));
					map.put("idPipelineEtapa8", mapEtapa.get("idPipelineEtapa"));
				}else if(dm.getValue().equals("40")){
					map.put("dtEvento9", JTFormatUtils.format((YearMonthDay)mapEtapa.get("dtEvento")));
					map.put("dsObservacao9", mapEtapa.get("dsObservacao"));
					map.put("idPipelineEtapa9", mapEtapa.get("idPipelineEtapa"));
				}else if(dm.getValue().equals("45")){
					map.put("dtEvento10", JTFormatUtils.format((YearMonthDay)mapEtapa.get("dtEvento")));
					map.put("dsObservacao10", mapEtapa.get("dsObservacao"));
					map.put("idPipelineEtapa10", mapEtapa.get("idPipelineEtapa"));
				}else if(dm.getValue().equals("50")){
					map.put("dtEvento11", JTFormatUtils.format((YearMonthDay)mapEtapa.get("dtEvento")));
					map.put("dsObservacao11", mapEtapa.get("dsObservacao"));
					if(mapEtapa.get("idVisita")!= null){
						map.put("visita10.idVisita", mapEtapa.get("idVisita"));
						map.put("visita10.dsVisita", infVisitas);
					}
					map.put("idPipelineEtapa11", mapEtapa.get("idPipelineEtapa"));
				}else if(dm.getValue().equals("60")){
					map.put("dtEvento12", JTFormatUtils.format((YearMonthDay)mapEtapa.get("dtEvento")));
					map.put("dsObservacao12",  mapEtapa.get("dsObservacao"));
					map.put("idPipelineEtapa12", mapEtapa.get("idPipelineEtapa"));
				}
			}
		}	
		PipelineCliente pc = this.getService().findById(idPipelineCliente);
		if(pc.getDtPerda()!= null){
			map.put("dtPerda", JTFormatUtils.format(pc.getDtPerda()));
		}
		if(pc.getTpMotivoPerda()!= null){
			map.put("tpMotivoPerda", pc.getTpMotivoPerda().getValue());
		}
		map.put("tpSituacao", pc.getTpSituacao().getValue());
		
		return map;
	}

	
	/**
	 * Consulta da grid principal
	 */
	public ResultSetPage findPaginatedCustom(TypedFlatMap criteria) {
		if(!validateFindPaginated(criteria)) {
			throw new BusinessException("LMS-00055");
		}

		ResultSetPage rsPage = this.getService().findPaginated(criteria);
		
		return rsPage;
	}
	
	
	public ResultSetPage findPropostasTabelasPaginatedCustom(TypedFlatMap criteria) {
		ResultSetPage res = pipelineClienteSimulacaoService.findPaginated(criteria);
		return res;
	}

	/**
	 * RowCount da grid principal
	 */
	public Integer getRowCountCustom(TypedFlatMap criteria) {
		if (!validateFindPaginated(criteria)) {
			return IntegerUtils.ZERO;
		}
		return this.getService().getRowCountCustom(criteria);
	}
	
	public Integer getPropostasTabelasRowCountCustom(TypedFlatMap criteria) {
		Long idCliente = criteria.getLong("cliente.idCliente");
		if (idCliente == null) {
			return IntegerUtils.ZERO;
		}
		return pipelineClienteSimulacaoService.getRowCountCustom(criteria);
	}

	private Boolean validateFindPaginated(TypedFlatMap criteria){
		if(criteria.getYearMonthDay("dtInicial") == null && criteria.getString("cliente.pessoa.nmPessoa").equals("") && criteria.getYearMonthDay("dtFinal") == null && criteria.getLong("cliente.idCliente") == null && criteria.getLong("filial.idFilial") == null	 && criteria.getLong("usuarioByIdUsuario.idUsuario") == null && criteria.getDomainValue("tpAbrangencia").getValue().equals(""))
		{
			return Boolean.FALSE;
		}
		return Boolean.TRUE;
	}
	
	/////////////////////////////////////
	//  MÉTODOS PARA COMBOS E LOOKUPS  //
	/////////////////////////////////////
	/**
	 * Lookup Cliente
	 */
	public List findLookupCliente(Map criteria) {
		List clientesOld = clienteService.findLookup(criteria);
		List clientes = new ArrayList();
		Iterator i = clientesOld.iterator();
		while (i.hasNext()){
			/*
			 * Copia para outro objeto para retornar apenas 
			 * os dados necessários para a tela
			 */
			Cliente cliOld = (Cliente)i.next();
			Cliente cli = new Cliente();

			cli.setIdCliente(cliOld.getIdCliente());
			cli.setTpCliente(cliOld.getTpCliente());

			Pessoa pessoa = new Pessoa();
			pessoa.setIdPessoa(cliOld.getPessoa().getIdPessoa());
			pessoa.setNmPessoa(cliOld.getPessoa().getNmPessoa());
			String nrIdentificacaoFormatado = FormatUtils.formatIdentificacao(cliOld.getPessoa().getTpIdentificacao(), cliOld.getPessoa().getNrIdentificacao());
			pessoa.setNrIdentificacao(nrIdentificacaoFormatado);

			//pega o endereco
			EnderecoPessoa end = enderecoPessoaService.findByIdPessoa(cliOld.getPessoa().getIdPessoa());
			pessoa.setEnderecoPessoa(end);

			cli.setPessoa(pessoa);
			
			Cliente responsavelFrete = clienteService.findClienteByIdInitialazeResponsavelFrete(cli.getIdCliente());
			cli.setCliente(responsavelFrete); // responsavel frete
			
			clientes.add(cli);
		}
		return clientes;
	}

	public EnderecoPessoa findEnderecoCliente(TypedFlatMap param){
		Long idPessoa = param.getLong("idPessoa");
		EnderecoPessoa endereco = enderecoPessoaService.findByIdPessoa(idPessoa);

		return endereco;
	}
	
	

	/**
	 * Lookup Funcionário
	 */
	public List findLookupFuncionario(Map criteria) {
		List listRes = funcionarioService.findLookup(criteria);

		if(listRes != null && !listRes.isEmpty()) {
			Funcionario vfuncionario = (Funcionario)listRes.get(0);
			Usuario usuario = vfuncionario.getUsuario();

			Map tfm = new HashMap();
			tfm.put("idUsuario", usuario.getIdUsuario());
	   	 	tfm.put("nrMatricula", usuario.getNrMatricula());
			tfm.put("nmUsuario", usuario.getNmUsuario());
			tfm.put("login", usuario.getLogin());
			if (vfuncionario != null){
				tfm.put("nmFuncionario", vfuncionario.getNmFuncionario());
				tfm.put("dsFuncao",vfuncionario.getDsFuncao());
			}

			listRes.clear();
			listRes.add(tfm);
		}
		return listRes;
	}
	
	/**
	 * ComboBox TipoVisita
	 */
	public List findTipoVisita(Map criteria) {
		List order = new ArrayList();
		order.add("dsTipoVisita");

		return tipoVisitaService.findOrderByDsTipoVisita(criteria);
	}

	/////////////////////
	// DADOS DA SESSÃO //
	/////////////////////
	public Map getBasicData() {
		TypedFlatMap filial = new TypedFlatMap();
		Filial filialUsuario = SessionUtils.getFilialSessao();
		Long idFilial = filialUsuario.getIdFilial();
		filial.put("idFilial", idFilial);
		filial.put("sgFilial", filialUsuario.getSgFilial());
		
		
		EnderecoPessoa enderecoPessoa = this.enderecoPessoaService.findEnderecoPessoaPadrao(filialUsuario.getIdFilial());
		MoedaPais mp = moedaPaisService.findMoedaPaisMaisUtilizada(enderecoPessoa.getMunicipio().getUnidadeFederativa().getPais().getIdPais());	

		TypedFlatMap pessoa = new TypedFlatMap();
		pessoa.put("nmFantasia", filialUsuario.getPessoa().getNmFantasia());
		filial.put("pessoa", pessoa);

		TypedFlatMap regional = new TypedFlatMap();
		Regional reg = regionalFilialService.findLastRegionalVigente(idFilial);
		regional.put("idRegional", reg.getIdRegional());
		regional.put("siglaDescricao", reg.getSiglaDescricao());	
		

		TypedFlatMap usuarioByIdUsuarioVisto = new TypedFlatMap();
		TypedFlatMap usuario = new TypedFlatMap();
		//Dados do usuario logado
		Usuario usu = SessionUtils.getUsuarioLogado();
		Long idUsuario = usu.getIdUsuario();
		usuario.put("idUsuario", idUsuario);
		usuario.put("nmUsuario", usu.getNmUsuario());
		usuario.put("nrMatricula", usu.getNrMatricula());
		usuario.put("dsFuncao", usu.getVfuncionario() != null ? usu.getVfuncionario().getDsFuncao() : "");

		/** Busca Gerentes e Diretores */
		ParametroGeral parametroGeral = parametroGeralService.findByNomeParametro("CD_COORDENACAO_VENDAS", false);
		List gerente = funcionarioService.findUsuarioByFilialFuncao(idUsuario, idFilial, parametroGeral.getDsConteudo());
		if (!gerente.isEmpty()) {
			Map funcMap = (Map)gerente.get(0);
			String cdFuncao = MapUtils.getString(funcMap, "cdFuncao");
			usuarioByIdUsuarioVisto.put("isGerente", true);

			//somente gerentes regionais para cima podem trocar o valor da filial
			if(ConstantesConfiguracoes.CD_GERENTE_COMERCIAL.equals(cdFuncao) || 
				ConstantesConfiguracoes.CD_GERENTE_FILIAL.equals(cdFuncao)) {
				usuarioByIdUsuarioVisto.put("changeFilial", false);
			} else {
				usuarioByIdUsuarioVisto.put("changeFilial", true);
			}
			usuarioByIdUsuarioVisto.put("idUsuario", MapUtils.getLong(funcMap, "idUsuario"));
			usuarioByIdUsuarioVisto.put("nmUsuario", MapUtils.getString(funcMap, "nmUsuario"));
		}

		TypedFlatMap dadosUsuario = new TypedFlatMap();
		dadosUsuario.put("usuario", usuario);
		dadosUsuario.put("filial", filial);
		dadosUsuario.put("regional", regional);			
		dadosUsuario.put("usuarioByIdUsuarioVisto", usuarioByIdUsuarioVisto);
		dadosUsuario.put("dtAtual", JTDateTimeUtils.getDataAtual());
		dadosUsuario.put("idMoedaUsuario", mp.getMoeda().getIdMoeda());
		
		return dadosUsuario;
	}

	public List findComboMoeda(TypedFlatMap criteria) {
		Filial filialUsuario = SessionUtils.getFilialSessao();
		EnderecoPessoa enderecoPessoa = this.enderecoPessoaService.findEnderecoPessoaPadrao(filialUsuario.getIdFilial());
		Long idPais = enderecoPessoa.getMunicipio().getUnidadeFederativa().getPais().getIdPais();
		return configuracoesFacade.getMoeda(idPais, Boolean.TRUE);
	}
	
	public TypedFlatMap findDadosIniciaisListagem() {
		TypedFlatMap result = new TypedFlatMap();
		
		Filial filialSessao = SessionUtils.getFilialSessao();
		
		if (filialSessao != null) {
			result.put("idFilial", filialSessao.getIdFilial());
			result.put("sgFilial", filialSessao.getSgFilial());
			result.put("nmFantasiaFilial", filialSessao.getPessoa().getNmFantasia());
			Regional regionalVigente = regionalFilialService.findLastRegionalVigente(filialSessao.getIdFilial());
			if (regionalVigente != null) {
				result.put("dsRegional", regionalVigente.getDsRegional());
			}
		}
		
		Funcionario funcionario = funcionarioService.findByIdUsuario(SessionUtils.getUsuarioLogado().getIdUsuario());
		boolean isMatriz = historicoFilialService.validateFilialUsuarioMatriz(filialSessao.getIdFilial());
		
		if (!isMatriz && funcionario != null && StringUtils.isNotBlank(funcionario.getDsFuncao()) 
				&& funcionario.getDsFuncao().contains(DS_CARGO_EXECUTIVO_VENDAS)) {
			result.put("idUsuario", SessionUtils.getUsuarioLogado().getIdUsuario());
			result.put("nrMatricula", funcionario.getNrMatricula());
			result.put("nmFuncionario", funcionario.getNmFuncionario());
			result.put("dsFuncao", funcionario.getDsFuncao());
		}
		result.put("isMatriz", isMatriz);
		
		return result;
	}
	
	public TypedFlatMap getDadosReponsavelCliente(TypedFlatMap params) {
		Cliente responsavelFrete = clienteService.findClienteByIdInitialazeResponsavelFrete(params.getLong("idCliente"));
		if (responsavelFrete != null && responsavelFrete.getCliente() != null) {
			params.put("clienteByIdClienteRespnsavel.nrIdentificacao", responsavelFrete.getCliente().getPessoa().getNrIdentificacao());
			params.put("clienteByIdClienteRespnsavel.nmPessoa", responsavelFrete.getCliente().getPessoa().getNmPessoa());
		}
		return params;
	}
	
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removePipelineClienteSimulacaoByIds(List ids) {
		pipelineClienteSimulacaoService.removeByIds(ids);
	}
	
	public void storePipelineClienteSimulacao(TypedFlatMap map) {
		pipelineClienteSimulacaoService.storeByMap(map);
	}
	
	public List findLookupTabelaPreco(TypedFlatMap criteria) {
		List tabelasPrecos = tabelaPrecoService.findLookup(criteria);
		
		if (CollectionUtils.isNotEmpty(tabelasPrecos)) {
			TabelaPreco tabelaPreco = (TabelaPreco) tabelasPrecos.get(0);
			validaTabelaPreco(tabelaPreco);
		}
		
		return tabelasPrecos;
	}

	private void validaTabelaPreco(TabelaPreco tabelaPreco) {
		if (tabelaPreco.getTipoTabelaPreco().getTpTipoTabelaPreco()!= null 
				&& !"D".equals(tabelaPreco.getTipoTabelaPreco().getTpTipoTabelaPreco().getValue())
				&& !"F".equals(tabelaPreco.getSubtipoTabelaPreco().getTpSubtipoTabelaPreco())) {
			throw new BusinessException("LMS-01214");
		}
	}
	
	public TypedFlatMap getTabelaPrecoById(TypedFlatMap criteria) {
		Long idTabelaPreco = criteria.getLong("idTabelaPreco");
		if (idTabelaPreco != null) {
			TabelaPreco tabelaPreco = tabelaPrecoService.findByIdTabelaPreco(idTabelaPreco);
			validaTabelaPreco(tabelaPreco);
		}
		tabelaPrecoService.findByIdTabelaPreco(idTabelaPreco);
		return criteria;
	}
	
	public PipelineClienteSimulacaoDTO loadPipelineClienteGridRowClick(TypedFlatMap criteria) {
		Long idPipelineClienteSimulacao = criteria.getLong("idPipelineClienteSimulacao");
		if (criteria.getLong("idPipelineClienteSimulacao") != null) {
			PipelineClienteSimulacaoDTO pipelineSimulacao = pipelineClienteSimulacaoService.findToEdit(idPipelineClienteSimulacao);
			return pipelineSimulacao;
		}
		return null;
	}

	public void setService(PipelineClienteService pipelineClienteService) {
		this.setDefaultService(pipelineClienteService);
	}
	public PipelineClienteService getService() {
		return (PipelineClienteService) this.getDefaultService();
	}
	public void setRegionalFilialService(RegionalFilialService regionalFilialService) {
		this.regionalFilialService = regionalFilialService;
	}
	public void setFuncionarioService(FuncionarioService funcionarioService) {
		this.funcionarioService = funcionarioService;
	}
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}
	public void setTipoVisitaService(TipoVisitaService tipoVisitaService) {
		this.tipoVisitaService = tipoVisitaService;
	}
	
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	
	public void setEnderecoPessoaService(EnderecoPessoaService enderecoPessoaService) {
		this.enderecoPessoaService = enderecoPessoaService;
	}

	public ParametroGeralService getParametroGeralService() {
		return parametroGeralService;
	}

	public void setParametroGeralService(ParametroGeralService parametroGeralService) {
		this.parametroGeralService = parametroGeralService;
	}

	public PipelineReceitaService getPipelineReceitaService() {
		return pipelineReceitaService;
	}

	public void setPipelineReceitaService(
			PipelineReceitaService pipelineReceitaService) {
		this.pipelineReceitaService = pipelineReceitaService;
	}
	
	public void setHistoricoFilialService(
			HistoricoFilialService historicoFilialService) {
		this.historicoFilialService = historicoFilialService;
	}
	
	public void setPipelineClienteSimulacaoService(
			PipelineClienteSimulacaoService pipelineClienteSimulacaoService) {
		this.pipelineClienteSimulacaoService = pipelineClienteSimulacaoService;
	}
	
	public void setTabelaPrecoService(TabelaPrecoService tabelaPrecoService) {
		this.tabelaPrecoService = tabelaPrecoService;
	}
	
}
