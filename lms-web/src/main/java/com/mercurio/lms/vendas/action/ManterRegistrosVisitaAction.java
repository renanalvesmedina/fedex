package com.mercurio.lms.vendas.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.MapUtils;
import org.apache.commons.lang.StringUtils;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.masterdetail.ItemList;
import com.mercurio.adsm.framework.model.masterdetail.ItemListConfig;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailAction;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailFactory;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailKey;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntry;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntryConfig;
import com.mercurio.adsm.framework.util.FilterResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.ConstantesConfiguracoes;
import com.mercurio.lms.configuracoes.model.EnderecoPessoa;
import com.mercurio.lms.configuracoes.model.Funcionario;
import com.mercurio.lms.configuracoes.model.ParametroGeral;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.configuracoes.model.service.EnderecoPessoaService;
import com.mercurio.lms.configuracoes.model.service.FuncionarioService;
import com.mercurio.lms.configuracoes.model.service.ParametroGeralService;
import com.mercurio.lms.configuracoes.model.service.ServicoService;
import com.mercurio.lms.configuracoes.util.MapUtilsPlus;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.Regional;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.HistoricoFilialService;
import com.mercurio.lms.municipios.model.service.RegionalFilialService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.IntegerUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.CampanhaMarketing;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.EtapaVisita;
import com.mercurio.lms.vendas.model.FuncionarioVisita;
import com.mercurio.lms.vendas.model.ServicoOferecido;
import com.mercurio.lms.vendas.model.Visita;
import com.mercurio.lms.vendas.model.service.CampanhaMarketingService;
import com.mercurio.lms.vendas.model.service.ClienteService;
import com.mercurio.lms.vendas.model.service.EtapaVisitaService;
import com.mercurio.lms.vendas.model.service.FuncionarioVisitaService;
import com.mercurio.lms.vendas.model.service.ServicoOferecidoService;
import com.mercurio.lms.vendas.model.service.TipoVisitaService;
import com.mercurio.lms.vendas.model.service.VisitaService;
import com.mercurio.lms.workflow.model.Pendencia;

/**
 * Generated by: ADSM ActionGenerator
 * 
 * Não inserir documentação após ou remover a tag do XDoclet a seguir. O valor
 * do <code>id</code> informado abaixo deve ser utilizado para referenciar
 * este serviço.
 * 
 * @spring.bean id="lms.vendas.manterRegistrosVisitaAction"
 */
public class ManterRegistrosVisitaAction extends MasterDetailAction {
	private RegionalFilialService regionalFilialService;
	private FuncionarioService funcionarioService;
	private ClienteService clienteService;
	private TipoVisitaService tipoVisitaService;
	private CampanhaMarketingService campanhaMarketingService;
	private ServicoService servicoService;
	private FilialService filialService;
	private EtapaVisitaService etapaVisitaService;
	private EnderecoPessoaService enderecoPessoaService;
	private FuncionarioVisitaService funcionarioVisitaService;
	private ServicoOferecidoService servicoOferecidoService;
	private ParametroGeralService parametroGeralService;
	private HistoricoFilialService historicoFilialService;
	private ConfiguracoesFacade configuracoesFacade;

	/**
	 * Salva uma Visita e as etapasVisita
	 */
	public TypedFlatMap store(TypedFlatMap map) {
		MasterEntry entry = getMasterFromSession(map.getLong("idVisita"), true);
		Visita visita = (Visita)entry.getMaster();

		// dados da tela
		visita.setIdVisita(map.getLong("idVisita"));
		visita.setDtVisita(map.getYearMonthDay("dtVisita"));
		visita.setDtRegistro(map.getYearMonthDay("dtRegistro"));
		visita.setHrInicial(map.getTimeOfDay("hrInicial"));
		visita.setHrFinal(map.getTimeOfDay("hrFinal"));
		visita.setDtVisto(map.getYearMonthDay("dtVisto"));
		visita.setDsVisita(map.getString("dsVisita"));
		visita.setVersao(map.getInteger("versao"));

		//pessoa
		Pessoa pessoa = new Pessoa();
		pessoa.setNmPessoa(map.getString("cliente.pessoa.nmPessoa"));
		pessoa.setIdPessoa(map.getLong("cliente.idCliente"));

		//cliente.
		Cliente cliente = new Cliente();
		cliente.setIdCliente(pessoa.getIdPessoa());
		cliente.setPessoa(pessoa);
		visita.setCliente(cliente);

		//Usuario
		Usuario usuarioByIdUsuario = new Usuario();
		usuarioByIdUsuario.setIdUsuario(map.getLong("usuarioByIdUsuario.idUsuario"));
		usuarioByIdUsuario.setNrMatricula(map.getString("usuarioByIdUsuario.nrMatricula"));
		usuarioByIdUsuario.setNmUsuario(map.getString("usuarioByIdUsuario.nmUsuario"));
		visita.setUsuarioByIdUsuario(usuarioByIdUsuario);

		//Filial
		Long idFilial = map.getLong("filial.idFilial");
		Filial filial = filialService.findById(idFilial);
		visita.setFilial(filial);  

		//Adiciona os FuncionarioVisita
		List list = map.getList("funcionarioVisitas"); //pega os FuncionarioVisita
		List funcs = new ArrayList(); //lista dos FuncionariosVisita inseridos
		if (list != null){
			for(int i=0; i< list.size(); i++){
				TypedFlatMap linha = (TypedFlatMap)list.get(i);
				FuncionarioVisita funcionarioVisita = new FuncionarioVisita();

				Usuario usu = new Usuario();
				usu.setIdUsuario(linha.getLong("funcionarioVisita.idUsuario"));
				funcionarioVisita.setUsuario(usu);
				funcionarioVisita.setVisita(visita);	
				funcs.add(funcionarioVisita);				
			}
			visita.setFuncionarioVisitas(funcs);
		}

		//Salva as Etapas da Visita
		ItemList items = getItemsFromSession(entry, "etapas");
		List etapas = items.getNewOrModifiedItems();

		//só valida se for inserção
		if((etapas == null || etapas.isEmpty()) && visita.getIdVisita() == null) {
			throw new BusinessException("LMS-01135");
		}

		//seta as etapas da vista.
		visita.setEtapaVisitas(etapas);

		List etapasRemove = items.getRemovedItems();
		visita.setEtapasRemovidas(etapasRemove);
		visita.setBlEnviarEmail(false);

		//Salva a Visita
		this.getService().store(visita);

		updateMasterInSession(entry);
		TypedFlatMap data = new TypedFlatMap();
		data.put("idVisita", visita.getIdVisita());
		data.put("versao", visita.getVersao());
		Pendencia pendencia = visita.getPendencia();
		if(pendencia != null) {
			data.put("pendencia.idPendencia", pendencia.getIdPendencia());
		}
		return data;
   }

	/**
	 * Remove um registro master e filhos
	 */ 
	public void removeById(java.lang.Long id) {
		/** Valida se pode excluir Visita */
		Visita visita = findById(id);
		if (visita.getDtVisto() != null) {
			throw new BusinessException("LMS-01029"); 
		}

		//remove os servicos oferecidos de cada etapa da visita
		List evs = etapaVisitaService.findEtapaVisitasByVisita(id);
		for(int i=0; i < evs.size(); i++){
			EtapaVisita ev = (EtapaVisita)evs.get(i);
			servicoOferecidoService.removeByIdEtapaVisita(ev.getIdEtapaVisita()); //servicoOferecidos
		}
		funcionarioVisitaService.removeByIdVisita(id); //funcionarioVisitas

		etapaVisitaService.removeByIdVisita(id); //etapaVisitas
		this.getService().removeById(id); //visita
	}

	/**
	 * Remove vários registros master e filhos
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		for (int i=0; i < ids.size(); i++){
			removeById((Long)ids.get(i));
		}
	}

	/**
	 * Localiza uma visita pelo id
	 * @param id
	 * @return
	 */
	public Visita findById(java.lang.Long id) {
		return this.getService().findById(id);
	}
	
	/**
	 * Recupera o registro visita do id informado
	 * 
	 * @param id
	 * @return
	 */
	public TypedFlatMap findByIdCustom(Long id) {
		Visita visita = this.getService().findById(id);
		putMasterInSession(visita);

		TypedFlatMap map = new TypedFlatMap();

		map.put("idVisita", visita.getIdVisita());
		map.put("versao", visita.getVersao());
		map.put("dtVisita", visita.getDtVisita());
		map.put("dtRegistro", visita.getDtRegistro());
		map.put("dtVisto", visita.getDtVisto());
		map.put("dsVisita", visita.getDsVisita());
		map.put("hrInicial", visita.getHrInicial());
		map.put("hrFinal", visita.getHrFinal());

		// Cliente
		Map mapEndereco = new HashMap();
		Cliente cliente = visita.getCliente();
		if (cliente != null) {
			map.put("cliente.idCliente", cliente.getIdCliente());
			map.put("cliente.tpCliente", cliente.getTpCliente().getValue());

			Pessoa pessoaCliente = cliente.getPessoa();
			if (pessoaCliente != null) {
				map.put("cliente.pessoa.nrIdentificacao", 
						FormatUtils.formatIdentificacao(pessoaCliente.getTpIdentificacao(), pessoaCliente.getNrIdentificacao())
				);
				
				map.put("cliente.pessoa.nmPessoa", pessoaCliente.getNmPessoa());

				mapEndereco = enderecoPessoaService.findByIdPessoaTpEndereco(pessoaCliente.getIdPessoa(),"COM");
				
				if (mapEndereco != null && !mapEndereco.isEmpty()) {
					map.put("cliente.pessoa.enderecoPessoa.nrEndereco",
							MapUtils.getString(mapEndereco,"nrEndereco"));

					map.put("cliente.pessoa.enderecoPessoa.dsComplemento",
							MapUtils.getString(mapEndereco,"dsComplemento"));
					
					map.put("cliente.pessoa.enderecoPessoa.dsEndereco",
							MapUtils.getString(mapEndereco,"dsEndereco"));
					
					map.put("cliente.pessoa.enderecoPessoa.municipio.idMunicipio",
							MapUtilsPlus.getLongOnMap(mapEndereco, "municipio", "idMunicipio", null));
					
					map.put("cliente.pessoa.enderecoPessoa.municipio.nmMunicipio",
							MapUtilsPlus.getStringOnMap(mapEndereco, "municipio", "nmMunicipio", null));
					
					Map mapMunicipio = MapUtilsPlus.getMap(mapEndereco,"municipio", null);
					if(mapMunicipio != null && !mapMunicipio.isEmpty())	{
						Long idRegional = MapUtilsPlus.getLongOnMap(mapMunicipio,"unidadeFederativa", "idUnidadeFederativa", null);
						if (idRegional != null)	{
							String sgRegional = MapUtilsPlus.getStringOnMap(mapMunicipio,"unidadeFederativa", "sgUnidadeFederativa", null);
							map.put("cliente.pessoa.enderecoPessoa.municipio.unidadeFederativa.idUnidadeFederativa", idRegional);
							map.put("cliente.pessoa.enderecoPessoa.municipio.unidadeFederativa.sgUnidadeFederativa", sgRegional);
						}
					}
				}
			}
		}
		// funcionario que fez a visita
		Usuario usuarioVisita = visita.getUsuarioByIdUsuario();
		map.put("usuarioByIdUsuario.idUsuario", usuarioVisita.getIdUsuario());
		map.put("usuarioByIdUsuario.nrMatricula", usuarioVisita.getNrMatricula());
		map.put("usuarioByIdUsuario.nmUsuario", usuarioVisita.getNmUsuario());
		map.put("usuarioByIdUsuario.vfuncionario.dsFuncao", usuarioVisita.getVfuncionario().getDsFuncao());
		
		Filial filial = visita.getFilial();
		map.put("idFilial", filial.getIdFilial());
		map.put("sgFilial", filial.getSgFilial());
		map.put("pessoa.nmFantasia", filial.getPessoa().getNmFantasia());

		map.put("filial.idFilial", filial.getIdFilial());
		map.put("filial.sgFilial", filial.getSgFilial());
		map.put("filial.pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
		
		Regional reg = regionalFilialService.findLastRegionalVigente(filial.getIdFilial());
		if(reg!=null){
			map.put("idRegional", reg.getIdRegional());
			map.put("siglaDescricao", reg.getSiglaDescricao());
		}
		
		// usuario do visto
		Usuario usuarioVisto = visita.getUsuarioByIdUsuarioVisto();
		if (usuarioVisto != null) {
			map.put("usuarioByIdUsuarioVisto.idUsuario", usuarioVisto.getIdUsuario());
			map.put("usuarioByIdUsuarioVisto.nmUsuario", usuarioVisto.getNmUsuario());
		}

		// funcionarios acompanhantes
		Map mapId = new HashMap();
		mapId.put("visita.idVisita", id);

		Pendencia pendencia = visita.getPendencia();
		if(pendencia != null) {
			map.put("pendencia.idPendencia", pendencia.getIdPendencia());
		}

		List funcionarioVisitas = funcionarioVisitaService.find(mapId);
		
		List funcionarios = new ArrayList(); 
		
		Iterator i = funcionarioVisitas.iterator();
		while (i.hasNext()){
			Map rowMap = new TypedFlatMap();
			FuncionarioVisita row = (FuncionarioVisita)i.next();
			rowMap.put("idFuncionarioVisita", row.getIdFuncionarioVisita());
			rowMap.put("funcionarioVisita.idUsuario", row.getUsuario().getIdUsuario());
			rowMap.put("funcionarioVisita.nmUsuario", row.getUsuario().getNmUsuario());
			rowMap.put("funcionarioVisita.nrMatricula", row.getUsuario().getNrMatricula());
			rowMap.put("funcionarioVisita.vfuncionario.dsFuncao", row.getUsuario().getVfuncionario().getDsFuncao());
			
			funcionarios.add(rowMap);
		}
		map.put("funcionarioVisitas", funcionarios);

		return map;
	}
	
	/**
	 * Consulta da grid principal
	 */
	public ResultSetPage findPaginatedCustom(TypedFlatMap criteria) {
		if(!validateFindPaginated(criteria)) {
			throw new BusinessException("LMS-01139");
		}

		ResultSetPage rsPage = this.getService().findPaginated(criteria);
		//retirar duplicacao das visitas devido ao filtro de tipo de visita
		List listPage = rsPage.getList();
		List newListPage = new ArrayList();
		Map mapRepControl = new HashMap();
		for(Iterator it = listPage.iterator();it.hasNext();)
		{
			Map map = (Map)it.next();
			if(!mapRepControl.containsValue(map.get("idVisita")))
			{
				mapRepControl.put(map.get("idVisita"),map.get("idVisita"));
				newListPage.add(map);
			}
		}
		rsPage.setList(newListPage);
		
		FilterResultSetPage frsp = new FilterResultSetPage(rsPage) {

			public Map filterItem(Object item) {
				Map mapItem = (Map) item;
				TypedFlatMap filterItem = new TypedFlatMap();

				filterItem.put("idVisita", mapItem.get("idVisita"));
				filterItem.put("dtVisita", mapItem.get("dtVisita"));

				// cliente
				filterItem.put("cliente.idCliente", mapItem.get("idCliente"));
				filterItem.put("cliente.pessoa.nmPessoa", mapItem.get("nmPessoa"));
				
				// usuario que fez a visita
				filterItem.put("usuarioByIdUsuario.idUsuario", mapItem.get("idUsuario"));
				filterItem.put("usuarioByIdUsuario.nmUsuario", mapItem.get("nmUsuario"));

				// filial
				filterItem.put("filial.idFilial", mapItem.get("idFilial"));
				filterItem.put("filial.sgFilial", mapItem.get("sgFilial"));

				return filterItem;
			}
		};
		return (ResultSetPage) frsp.doFilter();
	}

	/**
	 * RowCount da grid principal
	 */
	public Integer getRowCountCustom(TypedFlatMap criteria) {
		if (!validateFindPaginated(criteria)) {
			return IntegerUtils.ZERO;
		}
		return this.getService().getRowCountCustom(criteria);
	}

	private Boolean validateFindPaginated(TypedFlatMap criteria){
		if((criteria.getYearMonthDay("dtVisitaInicial") == null || 
			criteria.getYearMonthDay("dtVisitaFinal") == null) &&
			(criteria.getYearMonthDay("dtRegistroInicial") == null || 
			 criteria.getYearMonthDay("dtRegistroFinal") == null))
		{
			return Boolean.FALSE;
		}
		return Boolean.TRUE;
	}

	/////////////////////////////////////
	//  MÉTODOS PARA COMBOS E LOOKUPS  //
	/////////////////////////////////////
	/**
	 * Lookup Cliente
	 */
	public List findLookupCliente(Map criteria) {
		List clientesOld = clienteService.findLookup(criteria);
		List clientes = new ArrayList();
		Iterator i = clientesOld.iterator();
		while (i.hasNext()){
			/*
			 * Copia para outro objeto para retornar apenas 
			 * os dados necessários para a tela
			 */
			Cliente cliOld = (Cliente)i.next();
			Cliente cli = new Cliente();

			cli.setIdCliente(cliOld.getIdCliente());
			cli.setTpCliente(cliOld.getTpCliente());

			Pessoa pessoa = new Pessoa();
			pessoa.setIdPessoa(cliOld.getPessoa().getIdPessoa());
			pessoa.setNmPessoa(cliOld.getPessoa().getNmPessoa());
			String nrIdentificacaoFormatado = FormatUtils.formatIdentificacao(cliOld.getPessoa().getTpIdentificacao(), cliOld.getPessoa().getNrIdentificacao());
			pessoa.setNrIdentificacao(nrIdentificacaoFormatado);

			//pega o endereco
			EnderecoPessoa end = enderecoPessoaService.findByIdPessoa(cliOld.getPessoa().getIdPessoa());
			pessoa.setEnderecoPessoa(end);

			cli.setPessoa(pessoa);

			clientes.add(cli);
		}
		return clientes;
	}

	public EnderecoPessoa findEnderecoCliente(TypedFlatMap param){
		Long idPessoa = param.getLong("idPessoa");
		EnderecoPessoa endereco = enderecoPessoaService.findByIdPessoa(idPessoa);

		return endereco;
	}

	/**
	 * Lookup Funcionário
	 */
	public List findLookupFuncionario(Map criteria) {
		List listRes = funcionarioService.findLookup(criteria);

		if(listRes != null && !listRes.isEmpty()) {
			Funcionario vfuncionario = (Funcionario)listRes.get(0);
			Usuario usuario = vfuncionario.getUsuario();

			Map tfm = new HashMap();
			tfm.put("idUsuario", usuario.getIdUsuario());
	   	 	tfm.put("nrMatricula", usuario.getNrMatricula());
			tfm.put("nmUsuario", usuario.getNmUsuario());
			tfm.put("login", usuario.getLogin());
			if (vfuncionario != null){
				tfm.put("nmFuncionario", vfuncionario.getNmFuncionario());
				tfm.put("dsFuncao",vfuncionario.getDsFuncao());
			}

			listRes.clear();
			listRes.add(tfm);
		}
		return listRes;
	}
	
	/**
	 * ComboBox TipoVisita
	 */
	public List findTipoVisita(Map criteria) {
		List order = new ArrayList();
		order.add("dsTipoVisita");

		return tipoVisitaService.findOrderByDsTipoVisita(criteria);
	}

	/**
	 * ComboBox CampanhaMarketing
	 */
	public List findIndicadorMarketing(Map criteria) {
		List campanhas = campanhaMarketingService.find(criteria);

		Set  set = new TreeSet(new Comparator() {
			public int compare(Object o1, Object o2) {
				CampanhaMarketing cm1 = (CampanhaMarketing)o1;
				CampanhaMarketing cm2 = (CampanhaMarketing)o2;

				if (cm1 != null && cm2 != null) {
					return cm1.getDsCampanhaMarketing().toString().compareTo(cm2.getDsCampanhaMarketing().toString());
				}				
				return -1;
			}			
		});

		set.addAll(campanhas);		
		return new ArrayList(set);			
	}

	public List findServico(Map criteria) {
		List servicos = servicoService.find(criteria); 
		return servicos;
	}

	public List findFiliais(Map criteria){
		List listFiliais = filialService.findLookup(criteria);
		List sessionFiliais = SessionUtils.getFiliaisUsuarioLogado();
		List newListFiliais = new ArrayList();

		for(Iterator it = listFiliais.iterator(); it.hasNext();) {
			Object obj = it.next();
			if(sessionFiliais.contains(obj)) {
				newListFiliais.add(obj);
			}
		}
		return newListFiliais;
	}

	//////////////////////////////
	// MÉTODOS PARA ETAPAVISITA //
	//////////////////////////////
	/**
	 * Salva uma instancia de etapa de visita na sessao
	 * @param parameters
	 * @return
	 */
	public Serializable storeEtapa(TypedFlatMap parameters) {
		//checa se já tem a etapa da visita, caso a etapa tenha sido informada
		List pListServOf = parameters.getList("servicoOferecidos");
		if(pListServOf==null || pListServOf.isEmpty()){
			throw new BusinessException("LMS-01216");
		}else if (checkEtapaVisita(parameters)) {
			throw new BusinessException("LMS-01128");
		}
		return saveItemInstance(parameters, "etapas");
	}

	/**
	 * Valida se já existe a etapa para a visita.
	 * com a duplicação da combinação dos seguinte campos:
	 * id_Visita + modal + abrangência + serviço deve ser único
	 */
	private boolean checkEtapaVisita(TypedFlatMap parameters) {
		Long masterId = (Long) getMasterId(parameters);
		ItemListConfig itemListConfig = getMasterConfig().getItemListConfig("etapas");

		MasterEntry entry = getMasterFromSession(masterId, true);
		ItemList items = getItemsFromSession(entry, "etapas");

		//(modal + abrangência + serviço) DEVE SER ÚNICO
		Long idEtapaVisita 	 = parameters.getLong("idEtapaVisita");
		DomainValue dmAbrang = parameters.getDomainValue("tpAbrangencia");
		DomainValue dmModal  = parameters.getDomainValue("tpModal");
		if (StringUtils.isBlank(dmAbrang.getValue()))dmAbrang = null;
		if (StringUtils.isBlank(dmModal.getValue())) dmModal  = null;
		List pListServOf = parameters.getList("servicoOferecidos");
		boolean bAbrangencia = false, bModal = false, bListServ = false;

		for (Iterator iter = items.iterator(masterId, itemListConfig); iter.hasNext();) {
			EtapaVisita etapaVisita = (EtapaVisita) iter.next();
			DomainValue modal   	= etapaVisita.getTpModal();
			DomainValue abrangencia = etapaVisita.getTpAbrangencia();
			List servOf 			= etapaVisita.getServicoOferecidos();
			bAbrangencia = false;
			bModal = false;
			bListServ = false;

			if(idEtapaVisita == null || idEtapaVisita.longValue() != etapaVisita.getIdEtapaVisita().longValue()) {
				//compara abrangencia
				if( (dmAbrang == null && abrangencia == null)
						|| (dmAbrang != null && abrangencia != null && dmAbrang.getValue().equals(abrangencia.getValue())))
				{
					bAbrangencia = true;
				}
				//compara modal
				if((dmModal == null && modal == null) 
						||(dmModal != null && modal != null && dmModal.getValue().equals(modal.getValue())))
				{
					bModal = true;
				}
				/*
				 * compara as listas
				 * As listas de serviços são iguais se as duas listas:
				 * - forem nulas e/ou vazias
				 * - tiverem os mesmos servicos
				 */
				if((pListServOf == null || pListServOf.isEmpty()) && (servOf == null || servOf.isEmpty())) {
					bListServ = true;
				}
				else if (pListServOf != null && servOf!=null && !servOf.isEmpty()) {
					boolean achou = false;
					for(Iterator itout = pListServOf.iterator(); itout.hasNext();) {
						Map pServMap = (Map)itout.next();
						String pServDsServ = MapUtilsPlus.getString(pServMap,"servico.dsServico","") + MapUtilsPlus.getString(pServMap,"obServicoOferecido","");
						achou = false;
						for(Iterator itin = servOf.iterator(); itin.hasNext();) {
							ServicoOferecido itemServOf = (ServicoOferecido)itin.next();

							String itServOf = ((itemServOf.getServico().getDsServico()==null)?"":itemServOf.getServico().getDsServico())
									+ ((itemServOf.getObServicoOferecido()==null)?"":itemServOf.getObServicoOferecido());

							if(pServDsServ.equalsIgnoreCase(itServOf)) {
								achou = true;
							} else {
								achou = false;
								break;
							}
						}
						//Se não achou não precisa mais procurar os outros elementos pois a lista já é diferente
						if(!achou) break;
					}
					/*
					 * se achou todos elementos então a lista é igual
					 * e retorna true, pois a combinação dos campos é duplicada
					 */
					if(achou) bListServ = true;
				}
				if(bAbrangencia && bModal && bListServ) return true;
		}
		}
		return false;
	}	

	/**
	 * Exclui etapas da sessão
	 * 
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeEtapasByIds(List ids){
		super.removeItemByIds(ids, "etapas");
	}

	/**
	 * Retorna uma instancia da etapa da visita
	 * @param key
	 * @return
	 */
	public Object findByIdEtapa(MasterDetailKey key) {
		EtapaVisita ev = (EtapaVisita) findItemById(key, "etapas");
		TypedFlatMap retorno = new TypedFlatMap();
		retorno.put("idEtapaVisita", ev.getIdEtapaVisita());
		retorno.put("versao", ev.getVersao());
		retorno.put("nrTelefone", ev.getNrTelefone());
		retorno.put("nrDDD", ev.getNrDDD());
		retorno.put("nrDDI", ev.getNrDDI());
		retorno.put("dsContato", ev.getDsContato());
		retorno.put("dsAreaAtuacao", ev.getDsAreaAtuacao());
		retorno.put("dsEmail", ev.getDsEmail());

		if (ev.getTpModal() != null){
			retorno.put("tpModal.value", ev.getTpModal().getValue());
			retorno.put("tpModal.description", ev.getTpModal().getDescription());
		}
		if (ev.getTpAbrangencia() != null){
			retorno.put("tpAbrangencia.value", ev.getTpAbrangencia().getValue());
			retorno.put("tpAbrangencia.description", ev.getTpAbrangencia().getDescription());
		}
		if (ev.getTpPerspectivaFaturamento() != null){
			retorno.put("tpPerspectivaFaturamento.value", ev.getTpPerspectivaFaturamento().getValue());
			retorno.put("tpPerspectivaFaturamento.description", ev.getTpPerspectivaFaturamento().getDescription());
		}
		if( ev.getTipoVisita() != null ){
			retorno.put("tipoVisita.idTipoVisita", ev.getTipoVisita().getIdTipoVisita());
			retorno.put("tipoVisita.dsTipoVisita", ev.getTipoVisita().getDsTipoVisita());
		}
		if( ev.getCampanhaMarketing() != null ){
			retorno.put("campanhaMarketing.idCampanhaMarketing", ev.getCampanhaMarketing().getIdCampanhaMarketing());
			retorno.put("campanhaMarketing.dsCampanhaMarketing", ev.getCampanhaMarketing().getDsCampanhaMarketing());
		}

		List listServicoOferecidos = new ArrayList();
		for (int i=0; i< ev.getServicoOferecidos().size(); i++) {
			ServicoOferecido servicoOferecido = (ServicoOferecido) ev.getServicoOferecidos().get(i);
			TypedFlatMap mapSO = new TypedFlatMap();
			mapSO.put("idServicoOferecido", servicoOferecido.getIdServicoOferecido());	
			mapSO.put("obServicoOferecido", servicoOferecido.getObServicoOferecido());

			if( servicoOferecido.getServico() != null ){
				mapSO.put("servico.idServico", servicoOferecido.getServico().getIdServico());
				mapSO.put("servico.dsServico", servicoOferecido.getServico().getDsServico());
			}
			listServicoOferecidos.add(mapSO);
		}
		retorno.put("servicoOferecidos", listServicoOferecidos);
		return retorno;
	}

	/**
	  * Consulta da grid de etapas de visita
	  * @param parameters
	  * @return
	  */
	public ResultSetPage findPaginatedEtapa(Map parameters){
		ResultSetPage rsp = findPaginatedItemList(parameters, "etapas");

		FilterResultSetPage filter = new FilterResultSetPage(rsp) {
			public Map filterItem(Object item) {
				TypedFlatMap map = new TypedFlatMap();
				EtapaVisita etapaVisita = (EtapaVisita) item;
				map.put("idEtapaVisita", etapaVisita.getIdEtapaVisita());
				map.put("dsContato", etapaVisita.getDsContato());
				if (etapaVisita.getTipoVisita() != null){
					map.put("tipoVisita.idTipoVisita", etapaVisita.getTipoVisita().getIdTipoVisita());
					map.put("tipoVisita.dsTipoVisita", etapaVisita.getTipoVisita().getDsTipoVisita());
				}
				if (etapaVisita.getCampanhaMarketing() != null ){
					map.put("campanhaMarketing.idCampanhaMarketing", etapaVisita.getCampanhaMarketing().getIdCampanhaMarketing());
					map.put("campanhaMarketing.dsCampanhaMarketing", etapaVisita.getCampanhaMarketing().getDsCampanhaMarketing());
				}
				if (etapaVisita.getTpPerspectivaFaturamento() != null ){
					map.put("tpPerspectivaFaturamento.value", etapaVisita.getTpPerspectivaFaturamento().getValue());
					map.put("tpPerspectivaFaturamento.description", etapaVisita.getTpPerspectivaFaturamento().getDescription());
				}
				if (etapaVisita.getTpModal() != null){
					map.put("tpModal.value", etapaVisita.getTpModal().getValue());
					map.put("tpModal.description", etapaVisita.getTpModal().getDescription());
				}
				if (etapaVisita.getTpAbrangencia() != null){
					map.put("tpAbrangencia.value", etapaVisita.getTpAbrangencia().getValue());
					map.put("tpAbrangencia.description", etapaVisita.getTpAbrangencia().getDescription());
				}
				return map;
			};
		};
		return (ResultSetPage) filter.doFilter(); 
	}

	public Integer getRowCountEtapa(Map parameters) {
		return getRowCountItemList(parameters, "etapas");
	}

	/////////////////////
	// DADOS DA SESSÃO //
	/////////////////////
	public Map getBasicData() {
		TypedFlatMap filial = new TypedFlatMap();
		
		
		Filial filialUsuario = SessionUtils.getFilialSessao();
		Long idFilial = filialUsuario.getIdFilial();
		filial.put("idFilial", idFilial);
		filial.put("sgFilial", filialUsuario.getSgFilial());

		TypedFlatMap pessoa = new TypedFlatMap();
		pessoa.put("nmFantasia", filialUsuario.getPessoa().getNmFantasia());
		filial.put("pessoa", pessoa);

		TypedFlatMap regional = new TypedFlatMap();
		Regional reg = regionalFilialService.findLastRegionalVigente(idFilial);
		regional.put("idRegional", reg.getIdRegional());
		regional.put("siglaDescricao", reg.getSiglaDescricao());		

		TypedFlatMap usuarioByIdUsuarioVisto = new TypedFlatMap();
		TypedFlatMap usuario = new TypedFlatMap();
		//Dados do usuario logado
		Usuario usu = SessionUtils.getUsuarioLogado();
		Long idUsuario = usu.getIdUsuario();
		usuario.put("idUsuario", idUsuario);
		usuario.put("nmUsuario", usu.getNmUsuario());
		usuario.put("nrMatricula", usu.getNrMatricula());
		usuario.put("dsFuncao", usu.getVfuncionario() != null ? usu.getVfuncionario().getDsFuncao() : "");

		/** Busca Gerentes e Diretores */
		ParametroGeral parametroGeral = parametroGeralService.findByNomeParametro("CD_COORDENACAO_VENDAS", false);
		List gerente = funcionarioService.findUsuarioByFilialFuncao(idUsuario, idFilial, parametroGeral.getDsConteudo());
		if (!gerente.isEmpty()) {
			Map funcMap = (Map)gerente.get(0);
			String cdFuncao = MapUtils.getString(funcMap, "cdFuncao");
			usuarioByIdUsuarioVisto.put("isGerente", true);

			//somente gerentes regionais para cima podem trocar o valor da filial
			if(ConstantesConfiguracoes.CD_GERENTE_COMERCIAL.equals(cdFuncao) || 
				ConstantesConfiguracoes.CD_GERENTE_FILIAL.equals(cdFuncao)) {
				usuarioByIdUsuarioVisto.put("changeFilial", false);
			} else {
				usuarioByIdUsuarioVisto.put("changeFilial", true);
			}
			usuarioByIdUsuarioVisto.put("idUsuario", MapUtils.getLong(funcMap, "idUsuario"));
			usuarioByIdUsuarioVisto.put("nmUsuario", MapUtils.getString(funcMap, "nmUsuario"));
		}

		boolean isMatriz = historicoFilialService.validateFilialUsuarioMatriz(idFilial);
		
		TypedFlatMap dadosUsuario = new TypedFlatMap();
		dadosUsuario.put("usuario", usuario);
		dadosUsuario.put("filial", filial);
		dadosUsuario.put("regional", regional);			
		dadosUsuario.put("usuarioByIdUsuarioVisto", usuarioByIdUsuarioVisto);
		dadosUsuario.put("dtAtual", JTDateTimeUtils.getDataAtual());
		dadosUsuario.put("dtAtualMinus15", JTDateTimeUtils.getDataAtual().minusDays(15));
		dadosUsuario.put("isMatriz", isMatriz);
		return dadosUsuario;
	}

	@Override
	protected MasterEntryConfig createMasterConfig(MasterDetailFactory masterFactory) {
		MasterEntryConfig config = masterFactory.createMasterEntryConfig(Visita.class);

		Comparator comparator = new Comparator() {
			public int compare(Object obj1, Object obj2) {
				return 0;
			}
		};

		ItemListConfig itemInitEtapa = new ItemListConfig() {
			public void setMasterOnItem(Object master, Object itemBean) {
				Visita v = (Visita) master; // Pai
				EtapaVisita ev = (EtapaVisita) itemBean; // filho
				ev.setVisita(v);
			}

			public List initialize(Long masterId, Map parameters) {
				if (masterId != null) {
					List listev = etapaVisitaService.findEtapaVisitasByVisita(masterId);
					if(listev != null){
						for(int i=0; i<listev.size(); i++){
							EtapaVisita ev = (EtapaVisita)listev.get(i);
							Map criteria = new HashMap();
							criteria.put("etapaVisita.idEtapaVisita", ev.getIdEtapaVisita());
							ev.setServicoOferecidos(servicoOferecidoService.find(criteria));
						}
					}
					return listev;
				} else
					return new ArrayList(0);
			}

			public Integer getRowCount(Long masterId, Map parameters) {
				if (masterId != null) {
					return etapaVisitaService.getRowCountEtapaVisitasByVisita(masterId);
				} else
					return Integer.valueOf(0);
			}

			public void modifyItemValues(Object newBean, Object oldBean) {
				EtapaVisita evNew = (EtapaVisita) newBean;
				EtapaVisita evOld = (EtapaVisita) oldBean;

				evOld.setIdEtapaVisita(evNew.getIdEtapaVisita());
				evOld.setVersao(evNew.getVersao());
				evOld.setNrTelefone(evNew.getNrTelefone());
				evOld.setNrDDI(evNew.getNrDDI());
				evOld.setNrDDD(evNew.getNrDDD());
				evOld.setTpModal(evNew.getTpModal());
				evOld.setTpAbrangencia(evNew.getTpAbrangencia());
				evOld.setTpPerspectivaFaturamento(evNew.getTpPerspectivaFaturamento());
				evOld.setDsContato(evNew.getDsContato());
				evOld.setDsAreaAtuacao(evNew.getDsAreaAtuacao());
				evOld.setDsEmail(evNew.getDsEmail());
				evOld.setTipoVisita(evNew.getTipoVisita());
				evOld.setCampanhaMarketing(evNew.getCampanhaMarketing());

				List listServicoOferecidos = new ArrayList();
				if(evNew.getServicoOferecidos() != null) {
					for (int i=0; i<evNew.getServicoOferecidos().size(); i++) {
						ServicoOferecido so = (ServicoOferecido) evNew.getServicoOferecidos().get(i);
						so.setIdServicoOferecido(null);
						so.setEtapaVisita(evOld);
						listServicoOferecidos.add(so);
					}
				}
				evOld.getServicoOferecidos().clear();
				evOld.setServicoOferecidos(listServicoOferecidos);
			}

			public Map configItemDomainProperties() {
					Map props = new HashMap();
					props.put("tpModal", "DM_MODAL");				
					props.put("tpAbrangencia", "DM_ABRANGENCIA");
					props.put("tpPerspectivaFaturamento", "DM_PERSPECTIVA_FATUR");
					return props;
			}

			public Object populateNewItemInstance(Map params, Object bean) {
				TypedFlatMap p = (TypedFlatMap) params;

				EtapaVisita etapaVisita = new EtapaVisita();

				etapaVisita.setIdEtapaVisita( p.getLong("idEtapaVisita"));
				etapaVisita.setVersao(p.getInteger("versao"));
				
				etapaVisita.setNrTelefone(p.getString("nrTelefone"));
				etapaVisita.setNrDDD(p.getString("nrDDD"));
				etapaVisita.setNrDDI(p.getString("nrDDI"));

				if( !p.getString("tpModal").equals("") ){
					DomainValue tpModal = getDomainValueService().findDomainValueByValue("DM_MODAL", p.getString("tpModal"));
					etapaVisita.setTpModal(tpModal);
				}

				if( !p.getString("tpAbrangencia").equals("") ){
					DomainValue tpAbrangencia = getDomainValueService().findDomainValueByValue("DM_ABRANGENCIA", p.getString("tpAbrangencia"));
					etapaVisita.setTpAbrangencia(tpAbrangencia);
				}

				if( !p.getString("tpPerspectivaFaturamento").equals("")){
					DomainValue tpPerspectivaFaturamento = getDomainValueService().findDomainValueByValue("DM_PERSPECTIVA_FATUR", p.getString("tpPerspectivaFaturamento"));
					etapaVisita.setTpPerspectivaFaturamento(tpPerspectivaFaturamento);
				}
				etapaVisita.setDsContato(p.getString("dsContato"));
				etapaVisita.setDsAreaAtuacao(p.getString("dsAreaAtuacao"));
				etapaVisita.setDsEmail(p.getString("dsEmail"));

				if ( p.getLong("tipoVisita.idTipoVisita") != null ){
					etapaVisita.setTipoVisita(tipoVisitaService.findById(p.getLong("tipoVisita.idTipoVisita")));
				}
				
				if ( p.getLong("campanhaMarketing.idCampanhaMarketing") != null ) {
					etapaVisita.setCampanhaMarketing(campanhaMarketingService.findById(p.getLong("campanhaMarketing.idCampanhaMarketing")));
				}
				
				List listMapServicoOferecidos = p.getList("servicoOferecidos");		
				List listServicoOferecidos = new ArrayList();
				if(listMapServicoOferecidos != null) {
					
					for (int i=0; i<listMapServicoOferecidos.size(); i++) {
						TypedFlatMap typedFlatMap = (TypedFlatMap) listMapServicoOferecidos.get(i);
						ServicoOferecido servicoOferecido = new ServicoOferecido();
						
						Long idServicoOferecido = typedFlatMap.getLong("idServicoOferecido");
						if(idServicoOferecido != null && !(idServicoOferecido.longValue() <= 0)) {
							servicoOferecido.setIdServicoOferecido(typedFlatMap.getLong("idServicoOferecido"));	
						} else {
							servicoOferecido.setIdServicoOferecido(null);
						}						
						
						if (typedFlatMap.getLong("servico.idServico") != null ){
							servicoOferecido.setServico(servicoService.findById(typedFlatMap.getLong("servico.idServico")));
						}
						servicoOferecido.setObServicoOferecido(typedFlatMap.getString("obServicoOferecido"));
						servicoOferecido.setEtapaVisita(etapaVisita);
						
						listServicoOferecidos.add(servicoOferecido);
					}
				}
				etapaVisita.setServicoOferecidos(listServicoOferecidos);
				return etapaVisita;
			}
		};

		config.addItemConfig("etapas", EtapaVisita.class, itemInitEtapa,  comparator);
		return config;
	}

	public List findLookupFilial(TypedFlatMap criteria) {
    	List listFilial = filialService.findLookupAsPaginated(criteria);
    	if (CollectionUtils.isNotEmpty(listFilial)) {
    		TypedFlatMap map = (TypedFlatMap) listFilial.get(0);
    		Long idFilial = map.getLong("idFilial");
    		try {
    			filialService.validateSelecaoFilialUsuarioEmpresa(idFilial, SessionUtils.getEmpresaSessao(), SessionUtils.getUsuarioLogado());
    		} catch (BusinessException e) {
    			map.put("error", configuracoesFacade.getMensagem(e.getMessageKey()));
    			Filial filialSessao = SessionUtils.getFilialSessao();
    			if (filialSessao != null) {
    				map.put("idFilial", filialSessao.getIdFilial());
    				map.put("sgFilial", filialSessao.getSgFilial());
    				map.put("nmFantasia", filialSessao.getPessoa().getNmFantasia());
    				Regional regionalVigente = regionalFilialService.findLastRegionalVigente(filialSessao.getIdFilial());
    				map.put("lastRegional", regionalVigente);
    			}
    		}
		}
    	return listFilial;
    }
	
	public void validaFilialSelecionadaById(TypedFlatMap criteria){
		Long idFilial = criteria.getLong("idFilial");
		if (idFilial != null) {
			filialService.validateSelecaoFilialUsuarioEmpresa(idFilial, SessionUtils.getEmpresaSessao(), SessionUtils.getUsuarioLogado());
		}
	}
	
	public ConfiguracoesFacade getConfiguracoesFacade() {
		return configuracoesFacade;
	}
	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}
	public void setService(VisitaService visitaService) {
		this.setMasterService(visitaService);
	}
	public VisitaService getService() {
		return (VisitaService) this.getMasterService();
	}
	public void setRegionalFilialService(RegionalFilialService regionalFilialService) {
		this.regionalFilialService = regionalFilialService;
	}
	public void setFuncionarioService(FuncionarioService funcionarioService) {
		this.funcionarioService = funcionarioService;
	}
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}
	public void setTipoVisitaService(TipoVisitaService tipoVisitaService) {
		this.tipoVisitaService = tipoVisitaService;
	}
	public void setCampanhaMarketingService(CampanhaMarketingService campanhaMarketingService) {
		this.campanhaMarketingService = campanhaMarketingService;
	}
	public void setServicoService(ServicoService servicoService) {
		this.servicoService = servicoService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public void setEtapaVisitaService(EtapaVisitaService etapaVisitaService) {
		this.etapaVisitaService = etapaVisitaService;
	}
	public void setEnderecoPessoaService(EnderecoPessoaService enderecoPessoaService) {
		this.enderecoPessoaService = enderecoPessoaService;
	}
	public void setFuncionarioVisitaService(FuncionarioVisitaService funcionarioVisitaService) {
		this.funcionarioVisitaService = funcionarioVisitaService;
	}
	public void setServicoOferecidoService(ServicoOferecidoService servicoOferecidoService) {
		this.servicoOferecidoService = servicoOferecidoService;
	}

	public ParametroGeralService getParametroGeralService() {
		return parametroGeralService;
	}

	public void setParametroGeralService(ParametroGeralService parametroGeralService) {
		this.parametroGeralService = parametroGeralService;
	}
	
	public void setHistoricoFilialService(HistoricoFilialService historicoFilialService) {
		this.historicoFilialService = historicoFilialService;
	}

}
