package com.mercurio.lms.vendas.action;

import java.io.Serializable;
import java.net.URL;
import java.util.Collections;
import java.util.List;
import java.util.Map;

import org.joda.time.DateTime;

import com.mercurio.adsm.batch.annotations.Assynchronous;
import com.mercurio.adsm.batch.annotations.AssynchronousMethod;
import com.mercurio.adsm.batch.annotations.BatchType;
import com.mercurio.adsm.framework.report.ReportActionSupport;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.configuracoes.model.service.JobInterfaceService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.RegionalFilialService;
import com.mercurio.lms.municipios.model.service.RegionalService;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.report.ClienteSituacaoService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.vendas.listarClientesStatusAction"
 */
@Assynchronous
public class ListarClientesStatusAction extends ReportActionSupport {
	private RegionalService regionalService;
    private RegionalFilialService regionalFilialService;
    private JobInterfaceService jobService;

    @AssynchronousMethod(name="vendas.ListarClientesStatus",
    						type=BatchType.BIZZ_BATCH_REPORT,
    						htmlTemplateMessage="com/mercurio/lms/vendas/report/ListarClientesStatusActionHtmlResponse.vm")	
	public URL executeScheduled(TypedFlatMap parameters) throws Exception {
    	
		return getReportExecutionManager().executeAssynchronousReport("lms.vendas.clienteSituacaoService",
																	 parameters);
	}

    public DateTime scheduleReport(TypedFlatMap parameters) {
    	//Executar as 3:00 da madrugada do dia seguinte
    	DateTime proximaExecucao = JTDateTimeUtils.getDataHoraAtual()
    		.plusDays(1)
    		.toDateMidnight()
    		.toDateTime(JTDateTimeUtils.getUserDtz())
    		.plusHours(3);

		//Gera a expressão cron
		String cronExpression = String.format("0 %d %d %d %d ? %d",
								proximaExecucao.getMinuteOfHour(),
								proximaExecucao.getHourOfDay(),
								proximaExecucao.getDayOfMonth(),
								proximaExecucao.getMonthOfYear(),
								proximaExecucao.getYear());

		Usuario usuarioLogado = SessionUtils.getUsuarioLogado();
		jobService.schedule("vendas.ListarClientesStatus",
								"Emissão de Clientes por Situação",
								cronExpression,
								new Serializable[]{ parameters },
								usuarioLogado.getLogin(),
								Collections.EMPTY_SET);

		return proximaExecucao;
	}

    public List findRegional(Map criterios){
        return regionalService.findRegional();
    }

    public List findRegionalFilial(TypedFlatMap criteria) {
		String sgFilial = criteria.getString("sgFilial");
		Long idRegional = criteria.getLong("regionalFiliais.regional.idRegional");
		return regionalFilialService.findBySgFilialIdRegional2(sgFilial,idRegional);
	}

    public TypedFlatMap findDadosDefault(){
		TypedFlatMap result = new TypedFlatMap();
		Filial filial = SessionUtils.getFilialSessao();
		result.put("idFilialUsuarioLogado",filial.getIdFilial());
		result.put("sgFilialUsuarioLogado",filial.getSgFilial());
		result.put("nmFilialUsuarioLogado",filial.getPessoa().getNmFantasia());

		Map regionalMap = regionalFilialService.findRegionalByIdFilial(filial.getIdFilial());
		if(regionalMap!=null){
			result.put("idRegionalFilialUsuarioLogado",regionalMap.get("idRegional"));
			result.put("siglaDescricaoRegionalFilialUsuarioLogado",regionalMap.get("sgRegional") + " - " + regionalMap.get("dsRegional"));
		}
		return result;
	}

    public void setService(ClienteSituacaoService serviceService) {
		this.reportServiceSupport = serviceService;
	}
	public void setRegionalService(RegionalService regionalService) {
		this.regionalService = regionalService;
	}
	public void setRegionalFilialService(RegionalFilialService regionalFilialService) {
		this.regionalFilialService = regionalFilialService;
	}
	public void setJobService(JobInterfaceService jobService) {
		this.jobService = jobService;
	}
}