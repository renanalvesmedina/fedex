package com.mercurio.lms.fretecarreteiroviagem.action;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.FindDefinition;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.report.ReportActionSupport;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.service.ControleCargaService;
import com.mercurio.lms.configuracoes.model.MoedaPais;
import com.mercurio.lms.configuracoes.model.service.MoedaPaisService;
import com.mercurio.lms.contratacaoveiculos.model.MeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.Proprietario;
import com.mercurio.lms.contratacaoveiculos.model.TipoMeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteService;
import com.mercurio.lms.contratacaoveiculos.model.service.ProprietarioService;
import com.mercurio.lms.contratacaoveiculos.model.service.TipoMeioTransporteService;
import com.mercurio.lms.fretecarreteiroviagem.model.AplicaReajusteRota;
import com.mercurio.lms.fretecarreteiroviagem.model.SimulacaoReajusteRota;
import com.mercurio.lms.fretecarreteiroviagem.model.service.SimulacaoReajusteRotaService;
import com.mercurio.lms.fretecarreteiroviagem.report.EmitirSimulacaoReajustesTabelasFreteService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.Pais;
import com.mercurio.lms.municipios.model.Regional;
import com.mercurio.lms.municipios.model.RotaIdaVolta;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.PaisService;
import com.mercurio.lms.municipios.model.service.RegionalFilialService;
import com.mercurio.lms.municipios.model.service.RegionalService;
import com.mercurio.lms.municipios.model.service.RotaIdaVoltaService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.session.SessionUtils;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.fretecarreteiroviagem.simularEfetivarReajustesTabelasFreteAction"
 */

public class SimularEfetivarReajustesTabelasFreteAction extends ReportActionSupport {
	
	private FilialService filialService;
	private MeioTransporteService meioTransporteService;
	private RegionalService regionalService;
	private TipoMeioTransporteService tipoMeioTransporteService;
	private ProprietarioService proprietarioService;
	private RotaIdaVoltaService rotaIdaVoltaService;
	private MoedaPaisService moedaPaisService;
	private PaisService paisService;
	private DomainValueService domainValueService;
	private SimulacaoReajusteRotaService defaultService;
	private RegionalFilialService regionalFilialService;
	private ControleCargaService controleCargaService;

	public void setService(SimulacaoReajusteRotaService serviceService) {
		defaultService = serviceService;
	}
	public void setReportService(EmitirSimulacaoReajustesTabelasFreteService reportService) {
		this.reportServiceSupport = reportService;
	}
	private SimulacaoReajusteRotaService getService() {
		return defaultService;
	}
    public void removeById(java.lang.Long id) {
        getService().removeById(id);
    }
    
	@Override
    public java.io.File execute(TypedFlatMap parameters) throws Exception {
    	getService().validatePossibilidadeReajuste(copyParametersToBean(parameters));
    	return super.execute(parameters);
	}
    public TypedFlatMap executeEfetivacao(TypedFlatMap parameters) {
    	SimulacaoReajusteRota simulacao = copyParametersToBean(parameters);
    	
    	if (simulacao.getTpReajuste().getValue().equals("V") &&
    			simulacao.getMoedaPais() == null)
    		throw new BusinessException("LMS-24024");
    	
    	getService().executeEfetivacao(simulacao);
		TypedFlatMap result = new TypedFlatMap();
		result.put("idSimulacaoReajusteRota",simulacao.getIdSimulacaoReajusteRota());
		DomainValue tpSituacao = domainValueService.findDomainValueByValue("DM_STATUS_REAJUSTE_ROTA",simulacao.getTpSituacaoRota().getValue());
		result.put("tpSituacaoRota.description",tpSituacao.getDescription());
		result.put("tpSituacaoRota.value",tpSituacao.getValue());
		return result;
    }
	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	getService().removeByIds(ids);
    }
    public ResultSetPage findPaginated(TypedFlatMap criteria) {
    	ResultSetPage rsp = getService().findPaginated(criteria,FindDefinition.createFindDefinition(criteria));
    	if (rsp.getList() != null && !rsp.getList().isEmpty()) {
    		for(Iterator i = rsp.getList().iterator(); i.hasNext();) {
    			Map row = (Map)i.next();
    			String nrIdentificacao = (String)row.get("proprietario_nrIdentificacao");
    			DomainValue tpIdentificacao = (DomainValue)row.get("proprietario_tpIdentificacao");
    			if (StringUtils.isNotBlank(nrIdentificacao) && tpIdentificacao != null)
    				row.put("proprietario_nrIdentificacao",FormatUtils.formatIdentificacao(tpIdentificacao,nrIdentificacao));
    		}
    	}
    	return rsp;
    }
    public Integer getRowCount(TypedFlatMap criteria) {
    	return getService().getRowCount(criteria);
    }
    public TypedFlatMap findById(java.lang.Long id) {
    	Map resultDb = getService().findByIdCustom(id);
    	TypedFlatMap result = new TypedFlatMap();
    	for(Iterator i = resultDb.keySet().iterator(); i.hasNext();) {
    		String key = (String)i.next();
    		result.put(key.replace('_','.'),resultDb.get(key));
    	}
    	result.put("tpSituacaoRota.value",result.getDomainValue("tpSituacaoRota").getValue());
    	result.put("tpSituacaoRota.description",result.getDomainValue("tpSituacaoRota").getDescription());
    	result.put("tpReajuste.value",result.getDomainValue("tpReajuste").getValue());
    	if (result.getDomainValue("tpRota") != null)
    		result.put("tpRota.value",result.getDomainValue("tpRota").getValue());
    	
    	String nr = result.getString("proprietario.pessoa.nrIdentificacao");
    	DomainValue tp = result.getDomainValue("proprietario.pessoa.tpIdentificacao");
    	if (StringUtils.isNotBlank(nr) && tp != null)
    		result.put("proprietario.pessoa.nrIdentificacaoFormatado",FormatUtils.formatIdentificacao(tp,nr));

    	result.remove("tpSituacaoRota");
    	result.remove("tpReajuste");
    	result.remove("tpRota");
    	
    	List rotasDb = getService().findRotasBySimulacao(id);
    	if (rotasDb != null && !rotasDb.isEmpty()) {
    		Boolean blAplicacao = null;
    		List rotas = new ArrayList();
    		for(Iterator i = rotasDb.iterator(); i.hasNext();) {
    			Map rotaDb = (Map)i.next();
    			TypedFlatMap rota = new TypedFlatMap();
    			if (blAplicacao == null)
    				blAplicacao = (Boolean)rotaDb.get("blAplicacao");
    			for(Iterator i2 = rotaDb.keySet().iterator(); i2.hasNext();) {
    	    		String key = (String)i2.next();
    	    		rota.put(key.replace('_','.'),rotaDb.get(key));
    	    	}
    			rotas.add(rota);
    		}
    		result.put(((blAplicacao.booleanValue()) ? "rotasT" : "rotasF"),rotas);
    	}
    	return result;
    }
    
    public List findLookupRotasViagem(TypedFlatMap tfm) {
		return rotaIdaVoltaService.findLookupRotaIdaVolta(tfm);
	}
	public List findLookupMeioTransporte(TypedFlatMap criteria) {
	    return meioTransporteService.findLookupWithProprietario(criteria);
    }
	public List findLookupFilial(Map criteria) {
		return filialService.findLookupFilial(criteria);
	}
	public List findComboTipoMeioTransporte(Map criteria) {
		return tipoMeioTransporteService.find(criteria);
	}
	public List findComboRegional(Map criteria) {
		return regionalService.find(criteria);
	}
	public List findLookupProprietario(Map criteria) {
		return proprietarioService.findLookup(criteria);
	}
	public List findLookupPais(Map criteria) {
		return paisService.findLookup(criteria);
	}
	public List findComboMoedaPais(Map criteria) {
		return moedaPaisService.find(criteria);
	}
	public TypedFlatMap findPaisSession() {
		Pais pais = SessionUtils.getPaisSessao();
		TypedFlatMap result = new TypedFlatMap();
		result.put("idPais",pais.getIdPais());
		result.put("nmPais",pais.getNmPais().getValue());
		if (!isUsuarioDIVOP()) {
			Regional regional = regionalFilialService.findLastRegionalVigente(SessionUtils.getFilialSessao().getIdFilial());
			if (regional != null)
				result.put("regional.id",regional.getIdRegional());
		}
		return result;
	}
	
	private boolean isUsuarioDIVOP() {
		return controleCargaService.validateManutencaoEspecialCC(SessionUtils.getUsuarioLogado());
	}
	
	
	public List setValuesList(TypedFlatMap parameters, String property, Boolean aplicar, SimulacaoReajusteRota simulacao) {
		List rotas = parameters.getList(property);
		if (rotas == null || rotas.isEmpty())
			return null;
		List result = new ArrayList();
		for(Iterator i = rotas.iterator();i.hasNext();) {
			AplicaReajusteRota reajusteRota = new AplicaReajusteRota();
			reajusteRota.setBlAplicacao(aplicar);
			reajusteRota.setSimulacaoReajusteRota(simulacao);
			RotaIdaVolta rota = new RotaIdaVolta();
			rota.setVersao(Integer.valueOf(1));
			TypedFlatMap flat = (TypedFlatMap)i.next();
			rota.setIdRotaIdaVolta(flat.getLong("rotaIdaVolta.idRotaIdaVolta"));
			rota.setNrRota(flat.getInteger("rotaIdaVolta.nrRota"));
			reajusteRota.setRotaIdaVolta(rota);
			result.add(reajusteRota);
		}
		return result;
	}
	public TypedFlatMap store(TypedFlatMap parameters) {
		SimulacaoReajusteRota simulacao = copyParametersToBean(parameters);
		getService().store(simulacao);
		
		TypedFlatMap result = new TypedFlatMap();
		result.put("idSimulacaoReajusteRota",simulacao.getIdSimulacaoReajusteRota());
		result.put("tpSituacaoRota.description",domainValueService.findDomainValueByValue("DM_STATUS_REAJUSTE_ROTA",simulacao.getTpSituacaoRota().getValue()).getDescription());
		return result;
	}
	
	public SimulacaoReajusteRota copyParametersToBean(TypedFlatMap parameters) {
		SimulacaoReajusteRota simulacao = new SimulacaoReajusteRota();
		simulacao.setIdSimulacaoReajusteRota(parameters.getLong("idSimulacaoReajusteRota"));
		simulacao.setDsSimulacaoReajusteRota(parameters.getString("dsSimulacaoReajusteRota"));
		simulacao.setTpReajuste(parameters.getDomainValue("tpReajuste"));
		simulacao.setVlReajuste(parameters.getBigDecimal("vlReajuste"));
		simulacao.setDtVigenciaInicial(parameters.getYearMonthDay("dtVigenciaInicial"));
		simulacao.setDtVigenciaFinal(parameters.getYearMonthDay("dtVigenciaFinal"));
		simulacao.setTpRota(parameters.getDomainValue("tpRota"));
		simulacao.setTpSituacaoRota(new DomainValue("S"));
		
		if (parameters.getLong("tipoMeioTransporte.idTipoMeioTransporte") != null) {
			TipoMeioTransporte tipoMeioTransporte = new TipoMeioTransporte();
			tipoMeioTransporte.setIdTipoMeioTransporte(parameters.getLong("tipoMeioTransporte.idTipoMeioTransporte"));
			simulacao.setTipoMeioTransporte(tipoMeioTransporte);
		}
		if (parameters.getLong("regionalOrigem.idRegional") != null) {
			Regional regional = new Regional();
			regional.setIdRegional(parameters.getLong("regionalOrigem.idRegional"));
			simulacao.setRegionalOrigem(regional);
		}
		if (parameters.getLong("regionalDestino.idRegional") != null) {
			Regional regional = new Regional();
			regional.setIdRegional(parameters.getLong("regionalDestino.idRegional"));
			simulacao.setRegionalDestino(regional);
		}
		if (parameters.getLong("filialOrigem.idFilial") != null) {
			Filial filial = new Filial();
			filial.setIdFilial(parameters.getLong("filialOrigem.idFilial"));
			simulacao.setFilialOrigem(filial);
		}
		if (parameters.getLong("filialDestino.idFilial") != null) {
			Filial filial = new Filial();
			filial.setIdFilial(parameters.getLong("filialDestino.idFilial"));
			simulacao.setFilialDestino(filial);
		}
		if (parameters.getLong("meioTransporte.idMeioTransporte") != null) {
			MeioTransporte meioTransporte = new MeioTransporte();
			meioTransporte.setIdMeioTransporte(parameters.getLong("meioTransporte.idMeioTransporte"));
			simulacao.setMeioTransporte(meioTransporte);
		}
		if (parameters.getLong("proprietario.idProprietario") != null) {
			Proprietario proprietario = new Proprietario();
			proprietario.setIdProprietario(parameters.getLong("proprietario.idProprietario"));
			simulacao.setProprietario(proprietario);
		}
		
		if (parameters.getLong("moedaPais.idMoedaPais") != null) {
			MoedaPais moedaPais = new MoedaPais();
			moedaPais.setIdMoedaPais(parameters.getLong("moedaPais.idMoedaPais"));
			simulacao.setMoedaPais(moedaPais);
		}
		List list = setValuesList(parameters,"rotasT",Boolean.TRUE,simulacao);
		if (list != null)
			simulacao.setParametroSimulacaoRotas(list);
		else
			simulacao.setParametroSimulacaoRotas(setValuesList(parameters,"rotasF",Boolean.FALSE,simulacao));
		
		return simulacao;
	}
	
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public void setMeioTransporteService(MeioTransporteService meioTransporteService) {
		this.meioTransporteService = meioTransporteService;
	}
	public void setRegionalService(RegionalService regionalService) {
		this.regionalService = regionalService;
	}
	public void setTipoMeioTransporteService(
			TipoMeioTransporteService tipoMeioTransporteService) {
		this.tipoMeioTransporteService = tipoMeioTransporteService;
	}
	public void setProprietarioService(ProprietarioService proprietarioService) {
		this.proprietarioService = proprietarioService;
	}
	public void setRotaIdaVoltaService(RotaIdaVoltaService rotaIdaVoltaService) {
		this.rotaIdaVoltaService = rotaIdaVoltaService;
	}
	public void setMoedaPaisService(MoedaPaisService moedaPaisService) {
		this.moedaPaisService = moedaPaisService;
	}
	public void setPaisService(PaisService paisService) {
		this.paisService = paisService;
	}
	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}

	public void setRegionalFilialService(RegionalFilialService regionalFilialService) {
		this.regionalFilialService = regionalFilialService;
	}

	/**
	 * @param controleCargaService the controleCargaService to set
	 */
	public void setControleCargaService(ControleCargaService controleCargaService) {
		this.controleCargaService = controleCargaService;
	}
	
	
}
