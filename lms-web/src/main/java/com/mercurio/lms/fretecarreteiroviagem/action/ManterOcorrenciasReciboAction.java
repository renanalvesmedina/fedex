package com.mercurio.lms.fretecarreteiroviagem.action;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.ControleCarga;
import com.mercurio.lms.carregamento.model.service.ControleCargaService;
import com.mercurio.lms.fretecarreteiroviagem.model.OcorrenciaFreteCarreteiro;
import com.mercurio.lms.fretecarreteiroviagem.model.ReciboFreteCarreteiro;
import com.mercurio.lms.fretecarreteiroviagem.model.service.OcorrenciaFreteCarreteiroService;
import com.mercurio.lms.fretecarreteiroviagem.model.service.ReciboFreteCarreteiroService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.fretecarreteiroviagem.manterOcorrenciasReciboAction"
 */
public class ManterOcorrenciasReciboAction extends CrudAction {
	
	public void setService(OcorrenciaFreteCarreteiroService ocorrenciaFreteCarreteiroService) {
		this.defaultService = ocorrenciaFreteCarreteiroService;
	}
	
	/**
	 * @return
	 */
	private OcorrenciaFreteCarreteiroService getOcorrenciaFreteCarreteiroService() {
		return (OcorrenciaFreteCarreteiroService)defaultService;
	}
	
	private FilialService filialService;
	private ControleCargaService controleCargaService;
	private ReciboFreteCarreteiroService reciboFreteCarreteiroService;
	private DomainValueService domainValueService;
	
    public void removeById(java.lang.Long id) {
        getOcorrenciaFreteCarreteiroService().removeById(id);
    }
	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	Iterator itIds = ids.iterator();
    	while (itIds.hasNext()) {
    		Long id = (Long)itIds.next();
    		this.removeById(id);
    	}
    }

    public TypedFlatMap findById(java.lang.Long id) {
    	OcorrenciaFreteCarreteiro ofc = getOcorrenciaFreteCarreteiroService().findById(id);
    	ReciboFreteCarreteiro recibo = ofc.getReciboFreteCarreteiro();
    	TypedFlatMap retorno = new TypedFlatMap();
    	
    	retorno.put("idOcorrenciaFreteCarreteiro",ofc.getIdOcorrenciaFreteCarreteiro());
    	
    	Filial filial = recibo.getFilial();
    	retorno.put("reciboFreteCarreteiro.filial.idFilial",filial.getIdFilial());
    	retorno.put("reciboFreteCarreteiro.filial.sgFilial",filial.getSgFilial());
    	retorno.put("reciboFreteCarreteiro.filial.pessoa.nmFantasia",filial.getPessoa().getNmFantasia());
    	
    	retorno.put("reciboFreteCarreteiro.idReciboFreteCarreteiro",recibo.getIdReciboFreteCarreteiro());
    	retorno.put("reciboFreteCarreteiro.nrReciboFreteCarreteiro",recibo.getNrReciboFreteCarreteiro());    	
    	retorno.put("reciboFreteCarreteiro2.idReciboFreteCarreteiro",recibo.getIdReciboFreteCarreteiro());
    	retorno.put("reciboFreteCarreteiro2.filial.sgFilial",filial.getSgFilial());
    	
    	boolean blComplementar = recibo.getReciboComplementado() != null;
    	retorno.put("blComplementar",Boolean.valueOf(blComplementar));
    	
    	retorno.put("tpReciboFreteCarreteiro.value",recibo.getTpReciboFreteCarreteiro().getValue());
    	
    	retorno.put("tpSituacaoRecibo.description",recibo.getTpSituacaoRecibo().getDescription().getValue());
    	
    	ControleCarga cc = recibo.getControleCarga();
    	if (cc != null) {
    		retorno.put("controleCarga.sgFilial",cc.getFilialByIdFilialOrigem().getSgFilial());
        	retorno.put("controleCarga.nrControleCarga",cc.getNrControleCarga());	
    	}    	
    	
    	retorno.put("dtInclusao",ofc.getDtInclusao());
    	retorno.put("tpOcorrencia.value",ofc.getTpOcorrencia().getValue());
    	retorno.put("dtOcorrenciaFreteCarreteiro",ofc.getDtOcorrenciaFreteCarreteiro());
    	retorno.put("reciboFreteCarreteiro.dsMoeda",recibo.getMoedaPais().getMoeda().getSiglaSimbolo());
    	retorno.put("blDescontoCancelado",ofc.getBlDescontoCancelado());
    	retorno.put("obMotivo",ofc.getObMotivo());
    	
    	retorno.put("vlDesconto",ofc.getVlDesconto());
    	
    	TypedFlatMap outrasInfo = this.findValoresReciboImplement(recibo.getIdReciboFreteCarreteiro(),ofc.getIdOcorrenciaFreteCarreteiro());
    	
    	retorno.putAll(outrasInfo);
    	
    	return retorno;
    	
    }

    public ResultSetPage findPaginatedCustom(TypedFlatMap criteria) {
    	return getOcorrenciaFreteCarreteiroService().findPaginatedCustom(criteria);
    }
    
    public Integer getRowCountCustom(TypedFlatMap criteria) {
    	return getOcorrenciaFreteCarreteiroService().getRowCountCustom(criteria);
    }
    
    public TypedFlatMap storeCustom(TypedFlatMap map) {
    	OcorrenciaFreteCarreteiro ofc = new OcorrenciaFreteCarreteiro();
    	ofc.setIdOcorrenciaFreteCarreteiro(map.getLong("idOcorrenciaFreteCarreteiro"));
    	ofc.setTpOcorrencia(map.getDomainValue("tpOcorrencia"));
    	ofc.setVlDesconto(map.getBigDecimal("vlDesconto"));
    	ofc.setBlDescontoCancelado(map.getBoolean("blDescontoCancelado"));
    	ofc.setObMotivo(map.getString("obMotivo"));
    	ofc.setDtOcorrenciaFreteCarreteiro(map.getYearMonthDay("dtOcorrenciaFreteCarreteiro"));
    	
    	if (ofc.getIdOcorrenciaFreteCarreteiro() == null) {
    		ofc.setDtInclusao(JTDateTimeUtils.getDataAtual());
    	} else {
    		ofc.setDtInclusao(map.getYearMonthDay("dtInclusao"));
    	}
    	
    	TypedFlatMap retorno = getOcorrenciaFreteCarreteiroService().storeCustom(ofc,map);
    	
    	String value = retorno.getString("tpSituacaoReciboValue");
    	String description = "";
    	if (StringUtils.isNotBlank(value)) {
			DomainValue dvTpSituacaoRecibo = domainValueService.findDomainValueByValue("DM_STATUS_RECIBO_PAGAMENTO_FRETE_CARRETE",value);
			description = dvTpSituacaoRecibo.getDescription().getValue();
		}
    	retorno.put("tpSituacaoRecibo.description",description);
    	
    	retorno.put("dtInclusao",ofc.getDtInclusao());
    	retorno.put("tpOcorrencia.value",ofc.getTpOcorrencia().getValue());
    	retorno.put("blDescontoCancelado",ofc.getBlDescontoCancelado());
    	
    	return retorno;
    }
    
    /**
     * findLookup de filiais.
     * @param criteria
     * @return
     */
    public List findLookupFilial(Map criteria) {
		return filialService.findLookupFilial(criteria);
	}
    
    /**
     * findLookup de Controle de Carga.
     * @param criteria
     * @return
     */
    public List findLookupControleCarga(Map criteria) {
    	return controleCargaService.findLookup(criteria);
    }
	
    /**
     * findLookup de Recibo.
     * @param criteria
     * @return
     */
    public List findLookupRecibo(TypedFlatMap criteria) {
    	String tpRecibo = (String)criteria.get("tpReciboFreteCarreteiro");
		if (StringUtils.isNotBlank(tpRecibo)) {
			criteria.remove("tpReciboFreteCarreteiro");
			if (tpRecibo.equals("C")) {
				return reciboFreteCarreteiroService.findLookupColetaEntrega(criteria);
			}
		}
    	return reciboFreteCarreteiroService.findLookupViagem(criteria);
    }
    
    /**
     * Retorna para a tela a filial do usuário logado.
     * @return
     */
    public TypedFlatMap findFilialUsuarioLogado() {
    	TypedFlatMap retorno = new TypedFlatMap();
    	
    	Filial f = SessionUtils.getFilialSessao();
    	retorno.put("idFilial",f.getIdFilial());
    	retorno.put("sgFilial",f.getSgFilial());
    	retorno.put("pessoa.nmFantasia",f.getPessoa().getNmFantasia());
    	
    	return retorno;
    }
    
    public TypedFlatMap findValoresRecibo(TypedFlatMap values) {
    	Long idRecibo = values.getLong("idReciboFreteCarreteiro");
    	Long idOcorrenciaAtual = values.getLong("idOcorrenciaFreteCarreteiro");
    	    	
    	if (idRecibo == null)
    		return null;
    	
    	return this.findValoresReciboImplement(idRecibo,idOcorrenciaAtual);
    }
    
    private TypedFlatMap findValoresReciboImplement(Long idRecibo, Long idOcorrenciaAtual) {
    	if (idOcorrenciaAtual == null)
    		idOcorrenciaAtual = Long.valueOf(-1);
    	
    	List lValoresDescontos = new ArrayList();
    	
    	Map ocorrenciaCriteria = new HashMap();
    	ocorrenciaCriteria.put("tpOcorrencia","D");
    	ocorrenciaCriteria.put("blDescontoCancelado","N");
    	ocorrenciaCriteria.put("reciboFreteCarreteiro.idReciboFreteCarreteiro",idRecibo);
    	
    	List lOcorrencias = getOcorrenciaFreteCarreteiroService().find(ocorrenciaCriteria);
    	
    	Iterator i = lOcorrencias.iterator();
    	BigDecimal sum = new BigDecimal(0);
    	while (i.hasNext()) {
    		OcorrenciaFreteCarreteiro ofc = (OcorrenciaFreteCarreteiro)i.next();
    		BigDecimal vlDesconto = ofc.getVlDesconto();
    		if (vlDesconto == null) {
    			vlDesconto = BigDecimal.valueOf(0);
			}
			if (ofc.getIdOcorrenciaFreteCarreteiro().compareTo(idOcorrenciaAtual) != 0) {
    			Map nodo = new HashMap();
    			nodo.put("_value", FormatUtils.formatDecimal("#,##0.00",vlDesconto));
    			lValoresDescontos.add(nodo);
    			sum = sum.add(vlDesconto);
    		} else {
    			// Se é a ocorrência atual, apenas somamos no valor total dos descontos.
    			sum = sum.add(vlDesconto);
    		}
    	}
    	
    	
    	TypedFlatMap retorno = getOcorrenciaFreteCarreteiroService().findValoresRecibo(idRecibo);
    	
    	retorno.put("valorReciboComDesconto",retorno.getBigDecimal("reciboFreteCarreteiro.vlBruto").subtract(sum));
    	retorno.put("descontos",lValoresDescontos);
    	retorno.put("somaDescontos",sum);
    	retorno.put("dtOcorrenciaFreteCarreteiro",JTDateTimeUtils.getDataAtual());
    	
    	return retorno;
    }
    
    public TypedFlatMap recalculaDesconto(TypedFlatMap values) {
    	BigDecimal vlRecibo = values.getBigDecimal("vlRecibo");
    	BigDecimal vlDesconto = values.getBigDecimal("vlDesconto");
    	if (vlDesconto == null)
    		vlDesconto = new BigDecimal(0);
    		
    	List descontos = values.getList("descontos");
    	
    	if (descontos != null) {
	    	Iterator i = descontos.iterator();
	    	while (i.hasNext()) {
	    		TypedFlatMap t = (TypedFlatMap)i.next();
	    		BigDecimal toSum = new BigDecimal(t.getString("_value").replace(".","").replace(",","."));
	    		vlDesconto = vlDesconto.add(toSum);
	    	}
    	}
    	
    	vlRecibo = vlRecibo.subtract(vlDesconto);
    	
    	TypedFlatMap retorno = new TypedFlatMap();
    	retorno.put("valorReciboComDesconto",vlRecibo);
    	return retorno;
    }
    
    public TypedFlatMap storeCancelarCancelarDesconto(TypedFlatMap values) {
    	Long idOcorrencia = values.getLong("idOcorrenciaFreteCarreteiro");
    	
    	TypedFlatMap retorno = new TypedFlatMap();
    	
    	if (idOcorrencia != null) {
    		retorno.put("blDescontoCancelado",Boolean.TRUE);
    		getOcorrenciaFreteCarreteiroService().storeCancelarCancelarDesconto(idOcorrencia);
    	}
    	
    	return retorno;
    }

	public void setControleCargaService(ControleCargaService controleCargaService) {
		this.controleCargaService = controleCargaService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public void setReciboFreteCarreteiroService(
			ReciboFreteCarreteiroService reciboFreteCarreteiroService) {
		this.reciboFreteCarreteiroService = reciboFreteCarreteiroService;
	}

	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}
    
	

}
