package com.mercurio.lms.fretecarreteiroviagem.action;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.jdbc.UncategorizedSQLException;

import com.mercurio.adsm.core.InfrastructureException;
import com.mercurio.adsm.framework.report.ReportActionSupport;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.MoedaPais;
import com.mercurio.lms.configuracoes.model.service.MoedaPaisService;
import com.mercurio.lms.fretecarreteiroviagem.report.EmitirRecibosOcorrenciasService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.Pais;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.session.SessionUtils;


/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.fretecarreteiroviagem.emitirRecibosOcorrenciasAction"
 */

public class EmitirRecibosOcorrenciasAction extends ReportActionSupport {
	
	private ConfiguracoesFacade configuracoesFacade;
	private FilialService filialService;
	private MoedaPaisService moedaPaisService;
	 
	@Override
	public java.io.File execute(TypedFlatMap parameters) throws Exception {
		java.io.File retorno = null;
		try{
			retorno = super.execute(parameters);
		}catch(UncategorizedSQLException e){
			throw new InfrastructureException(e.getCause());
		}
		return retorno;
	}

	/**
	 * Retorna valores da combo de moeda a partir do país do usuário logado.
	 * @return
	 */
	public List findMoedaByPais() {		
		Pais p = SessionUtils.getPaisSessao();
		return configuracoesFacade.getMoedasPais(p.getIdPais(), Boolean.TRUE);
	}
	
	public Map findDadosUsuario(){
		Filial f = SessionUtils.getFilialSessao();
		Map m = new HashMap();
		m.put("idFilial", f.getIdFilial());
		m.put("sgFilial", f.getSgFilial());
		m.put("nmFantasia", f.getPessoa().getNmFantasia());
		m.putAll(findMoedaUsuario());
		
		return m;
	}	
	
	public Map findMoedaUsuario() {		
		Pais p = SessionUtils.getPaisSessao();
		MoedaPais mp = moedaPaisService.findMoedaPaisMaisUtilizada(p.getIdPais());	
		Map m = new HashMap();
		m.put("idMoedaPais",mp.getIdMoedaPais());
		m.put("idMoeda",mp.getMoeda().getIdMoeda());
		m.put("dsSimbolo", mp.getMoeda().getDsSimbolo());
		m.put("siglaSimbolo", mp.getMoeda().getSiglaSimbolo());
		return m;
	}

	public Long findIdPaisSessao(TypedFlatMap map){
		Pais p = SessionUtils.getPaisSessao();
		return p.getIdPais();
	}
	
	public List findFilial(Map parametros){
		return filialService.findLookupFilial(parametros);
	}
	
	/**
	 * @param configuracoesFacade The configuracoesFacade to set.
	 */
	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}

	/**
	 * @param filialService The filialService to set.
	 */
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	
	/**
	 * @param emitirRecibosOcorrenciasService The emitirRecibosOcorrenciasService to set.
	 */
	public void setEmitirRecibosOcorrenciasService(
			EmitirRecibosOcorrenciasService emitirRecibosOcorrenciasService) {
		this.reportServiceSupport = emitirRecibosOcorrenciasService;
	}

	/**
	 * @param moedaPaisService The moedaPaisService to set.
	 */
	public void setMoedaPaisService(MoedaPaisService moedaPaisService) {
		this.moedaPaisService = moedaPaisService;
	}
}
