package com.mercurio.lms.fretecarreteiroviagem.action;

import java.io.Serializable;
import java.text.Collator;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.lang.StringUtils;
import org.springframework.context.i18n.LocaleContextHolder;

import com.mercurio.adsm.core.util.ReflectionUtils;
import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.masterdetail.ItemList;
import com.mercurio.adsm.framework.model.masterdetail.ItemListConfig;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailAction;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailFactory;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailKey;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntry;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntryConfig;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.MoedaPais;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.configuracoes.model.service.MoedaPaisService;
import com.mercurio.lms.contratacaoveiculos.model.TipoMeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.service.TipoMeioTransporteService;
import com.mercurio.lms.fretecarreteiroviagem.model.ReferenciaFreteCarreteiro;
import com.mercurio.lms.fretecarreteiroviagem.model.ReferenciaTipoVeiculo;
import com.mercurio.lms.fretecarreteiroviagem.model.service.ReferenciaFreteCarreteiroService;
import com.mercurio.lms.fretecarreteiroviagem.model.service.ReferenciaTipoVeiculoService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.Pais;
import com.mercurio.lms.municipios.model.UnidadeFederativa;
import com.mercurio.lms.municipios.model.ValorTarifaPostoPassagem;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.UnidadeFederativaService;
import com.mercurio.lms.util.JTVigenciaUtils;
import com.mercurio.lms.util.session.SessionUtils;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;


/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.fretecarreteiroviagem.manterTabelasReferenciasFreteKmAction"
 */

public class ManterTabelasReferenciasFreteKmAction extends MasterDetailAction {
	
	private ReferenciaTipoVeiculoService referenciaTipoVeiculoService;
	private UnidadeFederativaService unidadeFederativaService;
	private FilialService filialService;
	private MoedaPaisService moedaPaisService;
	private TipoMeioTransporteService tipoMeioTransporteService;
	private ConfiguracoesFacade configuracoesFacade;
	
	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}
	public void setReferenciaFreteCarreteiroService(ReferenciaFreteCarreteiroService referenciaFreteCarreteiroService) {
		super.setMasterService(referenciaFreteCarreteiroService);
	}
	public ReferenciaFreteCarreteiroService getReferenciaFreteCarreteiroService() {
		return (ReferenciaFreteCarreteiroService)super.getMasterService();
	}
	
	public ReferenciaTipoVeiculoService getReferenciaTipoVeiculoService() {
		return referenciaTipoVeiculoService;
	}

	public void setReferenciaTipoVeiculoService(
			ReferenciaTipoVeiculoService referenciaTipoVeiculoService) {
		this.referenciaTipoVeiculoService = referenciaTipoVeiculoService;
	}
	
	
	public TipoMeioTransporteService getTipoMeioTransporteService() {
		return tipoMeioTransporteService;
	}

	public void setTipoMeioTransporteService(
			TipoMeioTransporteService tipoMeioTransporteService) {
		this.tipoMeioTransporteService = tipoMeioTransporteService;
	}
	
	public MoedaPaisService getMoedaPaisService() {
		return moedaPaisService;
	}

	public void setMoedaPaisService(MoedaPaisService moedaPaisService) {
		this.moedaPaisService = moedaPaisService;
	}

	public FilialService getFilialService() {
		return filialService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public UnidadeFederativaService getUnidadeFederativaService() {
		return unidadeFederativaService;
	}

	public void setUnidadeFederativaService(
			UnidadeFederativaService unidadeFederativaService) {
		this.unidadeFederativaService = unidadeFederativaService;
	}
	
	
	public Map store(TypedFlatMap typedFlatMap) {
		    	    		
		MasterEntry entry = getMasterFromSession(typedFlatMap.getLong("idReferenciaFreteCarreteiro"), true);
	
		ReferenciaFreteCarreteiro rfc = (ReferenciaFreteCarreteiro)entry.getMaster();
		
		if(StringUtils.isNotBlank(typedFlatMap.getString("filialByIdFilialDestino.idFilial"))){
			Filial filialDestino = new Filial();
			filialDestino.setIdFilial(typedFlatMap.getLong("filialByIdFilialDestino.idFilial"));
			Pessoa pessoa = new Pessoa();
			pessoa.setIdPessoa(typedFlatMap.getLong("filialByIdFilialDestino.idFilial"));
			filialDestino.setPessoa(pessoa);
			rfc.setFilialByIdFilialDestino(filialDestino);
			
		}else
			rfc.setFilialByIdFilialDestino(null);
		
		if(StringUtils.isNotBlank(typedFlatMap.getString("filialByIdFilialOrigem.idFilial"))){
			Filial filialOrigem = new Filial();
			filialOrigem.setIdFilial(typedFlatMap.getLong("filialByIdFilialOrigem.idFilial"));
			Pessoa pessoaOri = new Pessoa();
			pessoaOri.setIdPessoa(typedFlatMap.getLong("filialByIdFilialOrigem.idFilial"));
			filialOrigem.setPessoa(pessoaOri);
			rfc.setFilialByIdFilialOrigem(filialOrigem);
			
		}else
			rfc.setFilialByIdFilialOrigem(null);
		
		if(StringUtils.isNotBlank(typedFlatMap.getString("unidadeFederativaByIdUnidadeFederativaOrigem.idUnidadeFederativa"))){
			UnidadeFederativa unidadeFederativaOrigem = new UnidadeFederativa();
			unidadeFederativaOrigem.setIdUnidadeFederativa(typedFlatMap.getLong("unidadeFederativaByIdUnidadeFederativaOrigem.idUnidadeFederativa"));
			rfc.setUnidadeFederativaByIdUnidadeFederativaOrigem(unidadeFederativaOrigem);
		}else
			rfc.setUnidadeFederativaByIdUnidadeFederativaOrigem(null);
		
		if(StringUtils.isNotBlank(typedFlatMap.getString("unidadeFederativaByIdUnidadeDestino.idUnidadeFederativa"))){
			UnidadeFederativa unidadeFederativaDestino = new UnidadeFederativa();
			unidadeFederativaDestino.setIdUnidadeFederativa(typedFlatMap.getLong("unidadeFederativaByIdUnidadeDestino.idUnidadeFederativa"));
			rfc.setUnidadeFederativaByIdUnidadeDestino(unidadeFederativaDestino);
		}else
			rfc.setUnidadeFederativaByIdUnidadeDestino(null);
		
		if(StringUtils.isNotBlank(typedFlatMap.getString("moedaPais.idMoedaPais"))){
			MoedaPais moedaPais = new MoedaPais();
			moedaPais.setIdMoedaPais(typedFlatMap.getLong("moedaPais.idMoedaPais"));
			rfc.setMoedaPais(moedaPais);
		}else
			rfc.setMoedaPais(null);
		
		if(StringUtils.isNotBlank(typedFlatMap.getString("dtVigenciaInicial"))){
			rfc.setDtVigenciaInicial(typedFlatMap.getYearMonthDay("dtVigenciaInicial"));
		}else
			rfc.setDtVigenciaInicial(null);
		
		if(StringUtils.isNotBlank(typedFlatMap.getString("dtVigenciaFinal"))){
			rfc.setDtVigenciaFinal(typedFlatMap.getYearMonthDay("dtVigenciaFinal"));
		}else
			rfc.setDtVigenciaFinal(null);
		
						
		Set ignore = new HashSet();
			ignore.add("versao");
			
	
		ItemList items = getItemsFromSession(entry, ReferenciaTipoVeiculo.class.getName());
	
		Map returnMap = getReferenciaFreteCarreteiroService().store(rfc, items);
		items.resetItemsState(); 
    	updateMasterInSession(entry);

    	returnMap.put("acaoVigenciaAtual", JTVigenciaUtils.getIntegerAcaoVigencia(rfc));
		
		return returnMap;
    }
  
	
	
   public Object findByIdReferenciaTipoVeiculo(MasterDetailKey key) {
    	return findItemById(key, ReferenciaTipoVeiculo.class.getName());
    }
	
   public void removeById(java.lang.Long id) {
        getReferenciaFreteCarreteiroService().removeById(id);
        newMaster();
    }

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
   public void removeByIds(List ids) {
    	getReferenciaFreteCarreteiroService().removeByIds(ids);
   }

   public TypedFlatMap findByIdEValidaDtVigencia(java.lang.Long id) {
	    ReferenciaFreteCarreteiro rfc = getReferenciaFreteCarreteiroService().findById(id);
	    putMasterInSession(rfc);
	    Integer acaoVigencia = JTVigenciaUtils.getIntegerAcaoVigencia(rfc);
	    
	    TypedFlatMap mapRFC = new TypedFlatMap();
	    
	    mapRFC.put("acaoVigenciaAtual", acaoVigencia);
	    
	    if(rfc.getUnidadeFederativaByIdUnidadeFederativaOrigem() != null){
	    	final UnidadeFederativa unidadeFederativaOrigem = rfc.getUnidadeFederativaByIdUnidadeFederativaOrigem();
	    	mapRFC.put("unidadeFederativaByIdUnidadeFederativaOrigem.idUnidadeFederativa", unidadeFederativaOrigem.getIdUnidadeFederativa());
	    	mapRFC.put("unidadeFederativaByIdUnidadeFederativaOrigem.sgUnidadeFederativa", unidadeFederativaOrigem.getSgUnidadeFederativa());
	    	mapRFC.put("unidadeFederativaByIdUnidadeFederativaOrigem.nmUnidadeFederativa", unidadeFederativaOrigem.getNmUnidadeFederativa());
	    }
	    if(rfc.getFilialByIdFilialOrigem()!= null){
	    	final Filial filialByIdFilialOrigem = rfc.getFilialByIdFilialOrigem();
	    	mapRFC.put("filialByIdFilialOrigem.idFilial", filialByIdFilialOrigem.getIdFilial());
	    	mapRFC.put("filialByIdFilialOrigem.sgFilial", filialByIdFilialOrigem.getSgFilial());
	    	mapRFC.put("filialByIdFilialOrigem.pessoa.nmFantasia", filialByIdFilialOrigem.getPessoa().getNmFantasia());
	    }
	    if(rfc.getUnidadeFederativaByIdUnidadeDestino() != null){
		    final UnidadeFederativa unidadeFederativaDestino = rfc.getUnidadeFederativaByIdUnidadeDestino();
			mapRFC.put("unidadeFederativaByIdUnidadeDestino.idUnidadeFederativa", unidadeFederativaDestino.getIdUnidadeFederativa());
		    mapRFC.put("unidadeFederativaByIdUnidadeDestino.sgUnidadeFederativa", unidadeFederativaDestino.getSgUnidadeFederativa());
		    mapRFC.put("unidadeFederativaByIdUnidadeDestino.nmUnidadeFederativa", unidadeFederativaDestino.getNmUnidadeFederativa());
	    }
	    if(rfc.getFilialByIdFilialDestino() != null){
		    final Filial filialByIdFilialDestino = rfc.getFilialByIdFilialDestino();
			mapRFC.put("filialByIdFilialDestino.idFilial", filialByIdFilialDestino.getIdFilial());
		    mapRFC.put("filialByIdFilialDestino.sgFilial", filialByIdFilialDestino.getSgFilial());
		    mapRFC.put("filialByIdFilialDestino.pessoa.nmFantasia", filialByIdFilialDestino.getPessoa().getNmFantasia());
	    }
	    
	    mapRFC.put("moedaPais.idMoedaPais", rfc.getMoedaPais().getIdMoedaPais());
	    mapRFC.put("dtVigenciaInicial", rfc.getDtVigenciaInicial());
	    mapRFC.put("dtVigenciaFinal", rfc.getDtVigenciaFinal());
	    mapRFC.put("idReferenciaFreteCarreteiro", rfc.getIdReferenciaFreteCarreteiro());
	   
	    	   
	    return mapRFC;
  }
	
   //lookup de unidade federativa
	public List findLookupUnidadeFederativa(Map criteria){
		return getUnidadeFederativaService().findLookup(criteria);
	}
	
	//lookup de filial
	public List findLookupFilial(Map criteria){
		return getFilialService().findLookup(criteria);
	}
	
	/**
	 * Retorna valores da combo de moeda a partir do país do usuário logado.
	 * @return
	 */
	//lookup de moeda pais
	public List findMoedaByPais() {
		Pais p = SessionUtils.getPaisSessao();
		return  configuracoesFacade.getMoedasPais(p.getIdPais(), Boolean.TRUE);
		
	}
	
	//combo tipo de meio de transporte
	public List findTipoMeioTransporte(Map criteria){
		return getTipoMeioTransporteService().findAtivos(criteria);
	}

	public ResultSetPage findPaginatedReferenciaFreteCarreteiro(TypedFlatMap criteria) {
		return getReferenciaFreteCarreteiroService().findPaginated(criteria);
	}

	public Integer getRowCountReferenciaFreteCarreteiro(TypedFlatMap criteria) {
		return getReferenciaFreteCarreteiroService().getRowCount(criteria);
	}
	
	//salva o filho na sessao
	public Serializable saveReferenciaTipoVeiculo(TypedFlatMap parameters) {
		Integer qtKmInicial = null;
		Integer qtKmFinal = null;
		
		if(!StringUtils.isNotBlank(parameters.getString("idFilialOrigem")) && !StringUtils.isNotBlank(parameters.getString("idFilialDestino"))){
			 if(!StringUtils.isNotBlank(parameters.getString("qtKmInicial")) && !StringUtils.isNotBlank(parameters.getString("qtKmFinal")))
				 	throw new BusinessException("LMS-24019");
			 else{
				 qtKmInicial = parameters.getInteger("qtKmInicial");
				 qtKmFinal = parameters.getInteger("qtKmFinal");
			 }
		}		
		
		Long idTipoMeioTransporte = parameters.getLong("tipoMeioTransporte.idTipoMeioTransporte");
		
		Long idReferenciaTipoVeiculo = null;
		if(StringUtils.isNotBlank(parameters.getString("idReferenciaTipoVeiculo")))
			idReferenciaTipoVeiculo = parameters.getLong("idReferenciaTipoVeiculo");
		
		//******************compara a lista de filhos já inseridos com o filho a ser inserido*********************
		Long masterId = (Long) getMasterId(parameters);
		MasterEntry entry = getMasterFromSession(masterId, true);
		ItemList items = getItemsFromSession(entry,ReferenciaTipoVeiculo.class.getName());
		ItemListConfig config = getMasterConfig().getItemListConfig(ReferenciaTipoVeiculo.class.getName());
		boolean comparaIds = true; 
		for (Iterator iter = items.iterator(masterId, config); iter.hasNext();) {
				ReferenciaTipoVeiculo rtv = (ReferenciaTipoVeiculo) iter.next();
				if(idReferenciaTipoVeiculo != null)
					comparaIds = rtv.getIdReferenciaTipoVeiculo().compareTo(idReferenciaTipoVeiculo)!=0;
				if(comparaIds)	{
						if(rtv.getTipoMeioTransporte().getIdTipoMeioTransporte().compareTo(idTipoMeioTransporte)==0){
							if(qtKmInicial != null && qtKmFinal!= null){
								if((qtKmInicial.compareTo(rtv.getQtKmFinal())<=0 && qtKmFinal.compareTo(rtv.getQtKmInicial())>=0))
										throw new BusinessException("LMS-24001");
							}else{
								throw new BusinessException("LMS-24001");
						     }	
						}else{
							if(rtv.getTipoMeioTransporte().getIdTipoMeioTransporte().compareTo(idTipoMeioTransporte)==0 && idReferenciaTipoVeiculo.compareTo(rtv.getIdReferenciaTipoVeiculo()) !=0){
								if(qtKmInicial != null && qtKmFinal!= null){
									if((qtKmInicial.compareTo(rtv.getQtKmFinal())<=0 && qtKmFinal.compareTo(rtv.getQtKmInicial())>=0))
											throw new BusinessException("LMS-24001");
								}else{
									throw new BusinessException("LMS-24001");
								}
						    }
						}
				}
		}
		return saveItemInstance(parameters, ReferenciaTipoVeiculo.class.getName());
    
	}
	
    public ResultSetPage findPaginatedReferenciaTipoVeiculo(Map parameters) {
    	ResultSetPage rsp = findPaginatedItemList(parameters, ReferenciaTipoVeiculo.class.getName());
    	return rsp;
    }
    
    public Integer getRowCountReferenciaTipoVeiculo(Map parameters){
    	return getRowCountItemList(parameters, ReferenciaTipoVeiculo.class.getName());
    }
	
	
	public Object findByIdValorReferenciaTipoVeiculo(MasterDetailKey key) {
    	return findItemById(key, ValorTarifaPostoPassagem.class.getName());
    }
	
	 /***
     * Remove uma lista de registros items.
     *  
     * @param ids ids dos registros item a serem removidos.
     * 
	 *
     */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIdsReferenciaTipoVeiculo(List ids) {
    	super.removeItemByIds(ids, ReferenciaTipoVeiculo.class.getName());
    }
    
    protected MasterEntryConfig createMasterConfig(MasterDetailFactory masterFactory) {
		
		MasterEntryConfig config = masterFactory.createMasterEntryConfig(ReferenciaFreteCarreteiro.class);

		//Comparador para realizar a ordenação dos items filhos de acordo com a regra de negócio.
    	Comparator descComparator = new Comparator() {
    		
			public int compare(Object o1, Object o2) {
	    		Collator collator = Collator.getInstance(LocaleContextHolder.getLocale());
	    		
				if ((o1 instanceof Comparable) && (o2 instanceof Comparable)) {
					return ((Comparable)o1).compareTo(o2);
				} else {
					ReferenciaTipoVeiculo v1 = (ReferenciaTipoVeiculo) o1;
					ReferenciaTipoVeiculo v2 = (ReferenciaTipoVeiculo) o2;
					if (v1.getTipoMeioTransporte() == null || v2.getTipoMeioTransporte() == null)
						return 0;
				
					return collator.compare(v1.getTipoMeioTransporte().getDsTipoMeioTransporte(),
													v2.getTipoMeioTransporte().getDsTipoMeioTransporte());
				}
			}
    	};
    	
    	
   	ItemListConfig itemInit = new ItemListConfig() {

			public List initialize(Long masterId) {
				if (masterId != null)
					return getReferenciaTipoVeiculoService().findReferenciaTipoVeiculoByIdReferenciaFrete(masterId);
				return new ArrayList();
			}

			public Integer getRowCount(Long masterId) {
				Map criteria = new HashMap();
				criteria.put("masterId",masterId);
				return getReferenciaTipoVeiculoService().getRowCount(criteria);
			}

			public void modifyItemValues(Object newValues, Object bean) {
				Set ignore = new HashSet();
				ignore.add("referenciaFreteCarreteiro");
				ignore.add("versao");
				ReflectionUtils.syncObjectProperties(bean, newValues, ignore);
			}
    		
			public Map configItemDomainProperties() {
				return null;
			} 

			public Object populateNewItemInstance(Map parameters, Object bean) {
				
				TypedFlatMap mapNewItens =(TypedFlatMap) parameters;
				ReferenciaTipoVeiculo rtv = (ReferenciaTipoVeiculo)bean;
				rtv.setIdReferenciaTipoVeiculo(mapNewItens.getLong("idReferenciaTipoVeiculo"));
				rtv.setQtKmFinal(mapNewItens.getInteger("qtKmFinal"));
				rtv.setQtKmInicial(mapNewItens.getInteger("qtKmInicial"));
				TipoMeioTransporte tipoMT = new TipoMeioTransporte();
				tipoMT.setIdTipoMeioTransporte(mapNewItens.getLong("tipoMeioTransporte.idTipoMeioTransporte"));
				tipoMT.setDsTipoMeioTransporte(mapNewItens.getString("tipoMeioTransporte.dsTipoMeioTransporte"));
				rtv.setTipoMeioTransporte(tipoMT);
				rtv.setVlFreteReferencia(mapNewItens.getBigDecimal("vlFreteReferencia"));
				ReferenciaFreteCarreteiro rfc = new ReferenciaFreteCarreteiro();
				rfc.setIdReferenciaFreteCarreteiro(mapNewItens.getLong("referenciaFreteCarreteiro.idReferenciaFreteCarreteiro"));
				
				return rtv;
			}
    	};
		config.addItemConfig(ReferenciaTipoVeiculo.class.getName(), ReferenciaTipoVeiculo.class, itemInit, descComparator);
		return config;
	}

}
