package com.mercurio.lms.fretecarreteirocoletaentrega.action;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.masterdetail.ItemList;
import com.mercurio.adsm.framework.model.masterdetail.ItemListConfig;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailAction;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailFactory;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailKey;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntry;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntryConfig;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.EnderecoPessoa;
import com.mercurio.lms.configuracoes.model.MoedaPais;
import com.mercurio.lms.configuracoes.model.service.EnderecoPessoaService;
import com.mercurio.lms.configuracoes.model.service.MoedaPaisService;
import com.mercurio.lms.contratacaoveiculos.model.TipoMeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.service.TipoMeioTransporteService;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.FaixaPesoParcelaTabelaCE;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.ParcelaTabelaCe;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.TabelaColetaEntrega;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.TipoTabelaColetaEntrega;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.service.FaixaPesoParcelaTabelaCEService;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.service.ParcelaTabelaCeService;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.service.TabelaColetaEntregaService;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.service.TipoTabelaColetaEntregaService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.RotaColetaEntrega;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.BigDecimalUtils;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTVigenciaUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.Cliente;

/**
 * Generated by: ADSM ActionGenerator
 *   
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.fretecarreteirocoletaentrega.manterTabelasFretesAgregadosAction"
 */

public class ManterTabelasFretesAgregadosAction extends MasterDetailAction {
    private static final String FAIXA_PESO_CONFIG_ALIAS = "FAIXA_PESO";
    private TipoMeioTransporteService tipoMeioTransporteService;
    private TipoTabelaColetaEntregaService tipoTabelaColetaEntregaService;
    private FilialService filialService;
    private ParcelaTabelaCeService parcelaTabelaCeService;
    private EnderecoPessoaService enderecoPessoaService;
    private MoedaPaisService moedaPaisService;
    private DomainValueService domainValueService;
    private FaixaPesoParcelaTabelaCEService faixaPesoParcelaTabelaCEService;
    
    public ManterTabelasFretesAgregadosAction() {

    }
    
    public TabelaColetaEntrega findById(java.lang.Long id) {
    	TabelaColetaEntrega tabelaColetaEntrega = getTabelaColetaEntregaService().findById(id);
    	putMasterInSession(tabelaColetaEntrega);
    	return tabelaColetaEntrega;
    }
    
    public TypedFlatMap findByIdDetalhamento(java.lang.Long id) {
    	TypedFlatMap retorno = new TypedFlatMap();
    	
		TabelaColetaEntrega tabelaColetaEntrega = findById(id);
		
		TipoMeioTransporte tipoMeioTransporte = tabelaColetaEntrega.getTipoMeioTransporte();
		TipoTabelaColetaEntrega tipoTabelaColetaEntrega = tabelaColetaEntrega.getTipoTabelaColetaEntrega();
		Filial filial = tabelaColetaEntrega.getFilial();
		
		// Organizando o retorno para a tela.
		retorno.put("idTabelaColetaEntrega", tabelaColetaEntrega.getIdTabelaColetaEntrega());
		if (filial != null){
			retorno.put("filial.idFilial",filial.getIdFilial());
			retorno.put("filial.sgFilial", filial.getSgFilial());
			retorno.put("pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
    }
		if (tipoTabelaColetaEntrega != null) {
			retorno.put("tipoTabelaColetaEntrega.idTipoTabelaColetaEntrega",tipoTabelaColetaEntrega.getIdTipoTabelaColetaEntrega());
			retorno.put("tipoTabelaColetaEntrega.dsTipoTabelaColetaEntrega",tipoTabelaColetaEntrega.getDsTipoTabelaColetaEntrega());
		}
    
		if (tipoMeioTransporte != null) {
			retorno.put("tipoMeioTransporte.idTipoMeioTransporte",tipoMeioTransporte.getIdTipoMeioTransporte());
			retorno.put("tipoMeioTransporte.dsTipoMeioTransporte",tipoMeioTransporte.getDsTipoMeioTransporte());
		}
    
		if(tabelaColetaEntrega.getCliente() != null){
			retorno.put("cliente.idCliente", tabelaColetaEntrega.getCliente().getIdCliente());
			retorno.put("cliente.pessoa.nrIdentificacaoFormatado",  FormatUtils.formatIdentificacao(tabelaColetaEntrega.getCliente().getPessoa().getTpIdentificacao().getValue(), tabelaColetaEntrega.getCliente().getPessoa().getNrIdentificacao()));
			retorno.put("cliente.pessoa.nrIdentificacao", tabelaColetaEntrega.getCliente().getPessoa().getNrIdentificacao());
			retorno.put("cliente.pessoa.nmPessoa", tabelaColetaEntrega.getCliente().getPessoa().getNmPessoa());
	}
	
		if(tabelaColetaEntrega.getRotaColetaEntrega() != null){
			retorno.put("rotaColetaEntrega.idRotaColetaEntrega", tabelaColetaEntrega.getRotaColetaEntrega().getIdRotaColetaEntrega());
			retorno.put("rotaColetaEntrega.nrRota", tabelaColetaEntrega.getRotaColetaEntrega().getNrRota());
			retorno.put("rotaColetaEntrega.dsRota", tabelaColetaEntrega.getRotaColetaEntrega().getDsRota());
		}
		
		retorno.put("tpCalculo", tabelaColetaEntrega.getTpCalculo().getValue());

		retorno.put("acaoVigenciaAtual",JTVigenciaUtils.getIntegerAcaoVigencia(tabelaColetaEntrega));
		retorno.put("dtVigenciaInicial",tabelaColetaEntrega.getDtVigenciaInicial());
		retorno.put("dtVigenciaFinal",tabelaColetaEntrega.getDtVigenciaFinal());

    	return retorno;
    }
    
	
    public void removeById(java.lang.Long id) {
    	// Remove TabelaColetaEntrega
    	getTabelaColetaEntregaService().removeById(id);
    }
    

    /**
     * Ádamo B. Azambuja
     * Este método é responsável por retornar os dados da grid editavel da tela de cadastro/detalhamento
     * */
    public List findGridParcelas(TypedFlatMap criteria) {
        Long idTabelaColetaEntrega = criteria.getLong("idTabelaColetaEntrega");

    	String tpCalculo = criteria.getString("tpCalculo");
    	List resultList = new ArrayList();
    	List tpParcelas = new ArrayList();

        
        if(idTabelaColetaEntrega != null){
        	TabelaColetaEntrega tce = getTabelaColetaEntregaService().findById(idTabelaColetaEntrega);
        	tpCalculo = tce.getTpCalculo().getValue();
        }
        
        if("C1".equals(tpCalculo)){
        	tpParcelas.add("DH");
        	tpParcelas.add("EV");
        	tpParcelas.add("QU"); 
        	tpParcelas.add("FP");
        }
        else if("C2".equals(tpCalculo)){
        	tpParcelas.add("DH");
        	tpParcelas.add("EV");
        	tpParcelas.add("QU");
        	tpParcelas.add("PF");
        	tpParcelas.add("PV");
        	tpParcelas.add("VO");
        }
        
        if (idTabelaColetaEntrega == null ){
            for (int i = 0; i < tpParcelas.size(); i++){
            	String parcela = (String)tpParcelas.get(i);
	            DomainValue dv =domainValueService.findDomainValueByValue("DM_TIPO_PARCELA_FRETE_COLETA_ENTREGA",parcela); 
                TypedFlatMap result = new TypedFlatMap();
         	   	result.put("tpParcela", dv.getValue());
		     	if("C2".equals(tpCalculo) && "EV".equals(parcela)){
		     		result.put("dsParcela", "CTRC");
		     	}else{
         	   	result.put("dsParcela", dv.getDescription());
		     	}
         	   	resultList.add(result);
            } 
        } else {
        	for (int x = 0; x < tpParcelas.size(); x++) {
        		ParcelaTabelaCe parcela = parcelaTabelaCeService.findParcelaTabelaCeByTpParcelaAndTabelaCE((String)tpParcelas.get(x),idTabelaColetaEntrega);
        		TypedFlatMap result = new TypedFlatMap();
        		if (parcela != null) {
            		result.put("tpParcela",parcela.getTpParcela().getValue());
            		
            		if("C2".equals(tpCalculo) && "EV".equals(parcela.getTpParcela().getValue())){
    		     		result.put("dsParcela", "CTRC");
    		     	}else{
            		result.put("dsParcela",parcela.getTpParcela().getDescription());
    		     	}
            		result.put("id",parcela.getIdParcelaTabelaCe());
            		result.put("vlDefinido",parcela.getVlDefinido());

            		//LMS-3581
            		if (!"DH".equals(parcela.getTpParcela().getValue())) {
            		result.put("pcSobreValor",parcela.getPcSobreValor());
            		}
        		}else{
        			DomainValue dv = domainValueService.findDomainValueByValue("DM_TIPO_PARCELA_FRETE_COLETA_ENTREGA",(String)tpParcelas.get(x));
            		result.put("tpParcela",dv.getValue());
            		result.put("dsParcela",dv.getDescription());
        		}
        		resultList.add(result);
        	}
        }
        return  resultList;
    }
    
    
    public void cleanItensSession() {
    	super.removeMasterFromSession();
    }
    
	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
		getTabelaColetaEntregaService().removeByIds(ids);
    }

    public List findComboTpMeioTransporte(Map criteria) {
    	if (criteria == null)
    		criteria = new HashMap();
        criteria.put("tpMeioTransporte", "R");
        return tipoMeioTransporteService.find(criteria);
    }
    public List findComboTipoTabelaColetaEntrega(Map criteria) {
        return tipoTabelaColetaEntregaService.find(criteria);
    }
    public List findFilial(Map criteria){
        return getFilialService().findLookupFilial(criteria);
    }
    
    public Object findFaixaPeso(MasterDetailKey key) {
    	FaixaPesoParcelaTabelaCE rspItemAnexo = (FaixaPesoParcelaTabelaCE) findItemById(key, FAIXA_PESO_CONFIG_ALIAS);
    	return rspItemAnexo;
	}
    
    // Find da Listagem, este método é definido no jsp na Grid da list
    public ResultSetPage findPaginatedCustom(TypedFlatMap criteria){
        return getTabelaColetaEntregaService().findOrdenedPaginated( criteria);
    }
    
    public Integer getRowCountFreteCarreteiroColetaEntregaCustom(TypedFlatMap criteria){
        return getTabelaColetaEntregaService().getRowCountCustom(criteria);
    }
 
    public TypedFlatMap storeCustom(TypedFlatMap map) {
    	MasterEntry master = getMasterFromSession(map.getLong("idTabelaColetaEntrega"), true);
    	ItemList faixasPeso = getItemsFromSession(master, FAIXA_PESO_CONFIG_ALIAS);
    	
    	
        // Id da tela, se for novo ele nao vai cadastrar e gera um registro novo
    	TabelaColetaEntrega tabelaColetaEntrega = (TabelaColetaEntrega) master.getMaster();
    	
        // Campos com preenchimento padrao quando for novo registro 3.4
        tabelaColetaEntrega.setTpRegistro(new DomainValue("A"));
        tabelaColetaEntrega.setTpSituacaoAprovacao(new DomainValue("A"));
        tabelaColetaEntrega.setBlDomingo(Boolean.TRUE);
        tabelaColetaEntrega.setBlSegunda(Boolean.TRUE);
        tabelaColetaEntrega.setBlTerca(Boolean.TRUE);
        tabelaColetaEntrega.setBlQuarta(Boolean.TRUE);
        tabelaColetaEntrega.setBlQuinta(Boolean.TRUE);
        tabelaColetaEntrega.setBlSexta(Boolean.TRUE);
        tabelaColetaEntrega.setBlSabado(Boolean.TRUE);

        // Campos obrigatórios em tela
        tabelaColetaEntrega.setDtVigenciaFinal(map.getYearMonthDay("dtVigenciaFinal"));
        tabelaColetaEntrega.setDtVigenciaInicial(map.getYearMonthDay("dtVigenciaInicial"));

        // seta moedaPais do endereco da filial atual
        Filial filial = filialService.findById(map.getLong("filial.idFilial"));
        EnderecoPessoa enderecoPessoa = enderecoPessoaService.findEnderecoPessoaPadrao(filial.getIdFilial());
        MoedaPais moedaPais = moedaPaisService.findByPaisAndMoeda(enderecoPessoa.getMunicipio().getUnidadeFederativa().getPais().getIdPais(),filial.getMoeda().getIdMoeda());
        
        tabelaColetaEntrega.setFilial(filial);

        tabelaColetaEntrega.setMoedaPais(moedaPais);
        
        if(map.getLong("cliente.idCliente") != null){
        	Cliente cliente = new Cliente();
        	cliente.setIdCliente(map.getLong("cliente.idCliente"));
        	tabelaColetaEntrega.setCliente(cliente);
        }else {
        	tabelaColetaEntrega.setCliente(null);
        }
        
        
        if(map.getLong("rotaColetaEntrega.idRotaColetaEntrega") != null){
        	RotaColetaEntrega rotaColetaEntrega = new RotaColetaEntrega();
        	rotaColetaEntrega.setIdRotaColetaEntrega(map.getLong("rotaColetaEntrega.idRotaColetaEntrega"));
        	tabelaColetaEntrega.setRotaColetaEntrega(rotaColetaEntrega);
        } else {
        	tabelaColetaEntrega.setRotaColetaEntrega(null);
        }
        
        tabelaColetaEntrega.setTpCalculo(map.getDomainValue("tpCalculo"));
        
        // seta o tipo de tabela coleta entrega, campo não obrigatorio
        if (map.getLong("tipoTabelaColetaEntrega.idTipoTabelaColetaEntrega") != null ){
            TipoTabelaColetaEntrega tipoTabelaColetaEntrega = new TipoTabelaColetaEntrega();
            tipoTabelaColetaEntrega.setIdTipoTabelaColetaEntrega(map.getLong("tipoTabelaColetaEntrega.idTipoTabelaColetaEntrega"));
            tabelaColetaEntrega.setTipoTabelaColetaEntrega(tipoTabelaColetaEntrega);            
        }
        
        // Seta meio de transporte, campo não obrigatorio
        if (map.getLong("tipoMeioTransporte.idTipoMeioTransporte") != null ){
            TipoMeioTransporte tipoMeioTransporte = new TipoMeioTransporte();
            tipoMeioTransporte.setIdTipoMeioTransporte(map.getLong("tipoMeioTransporte.idTipoMeioTransporte"));
            tabelaColetaEntrega.setTipoMeioTransporte(tipoMeioTransporte);            
        }
        
        // Salvar as parcelas.
        List listaParcelas =  map.getList("ParcelaTabelaCe");
        List<ParcelaTabelaCe> listaParcela = new ArrayList<ParcelaTabelaCe>();
        List<ParcelaTabelaCe> listaParcelaRemove = new ArrayList<ParcelaTabelaCe>();
        for (int x = 0;  x < listaParcelas.size(); x++){
    		TypedFlatMap parameters = (TypedFlatMap)listaParcelas.get(x);
        
            ParcelaTabelaCe parcela = new ParcelaTabelaCe();
            parcela.setTabelaColetaEntrega(tabelaColetaEntrega);
            parcela.setIdParcelaTabelaCe(parameters.getLong("id"));
            parcela.setTpParcela(parameters.getDomainValue("tpParcela"));
            parcela.setVlDefinido(parameters.getBigDecimal("vlDefinido"));
            parcela.setPcSobreValor(parameters.getBigDecimal("pcSobreValor"));
            
			if((BigDecimalUtils.defaultBigDecimal(parcela.getVlDefinido()).compareTo(BigDecimal.ZERO) != 0 || ("FP".equals(parcela.getTpParcela().getValue()) && ! faixasPeso.isEmpty()))) {
            listaParcela.add(parcela);
			} else if (parcela.getIdParcelaTabelaCe() != null) {
				listaParcelaRemove.add(parcela);
        }
        }
        
        if (tabelaColetaEntrega.getIdTabelaColetaEntrega() != null) {
        	
        	List<ParcelaTabelaCe> parcelasOld = parcelaTabelaCeService.findListByTabelaColetaEntrega(tabelaColetaEntrega);
        	for (ParcelaTabelaCe parcelaOld: parcelasOld) {
        		boolean exists = false;
        		for (ParcelaTabelaCe parcelaNew: tabelaColetaEntrega.getParcelaTabelaCes()) {
        			if (parcelaNew.getIdParcelaTabelaCe() != null) {
        				
        				if (parcelaOld.getIdParcelaTabelaCe().equals(parcelaNew.getIdParcelaTabelaCe())) {
        					exists = true;
        				}
        				
        			}
        			
        		}
        		
        		if (! exists || "FP".equals(parcelaOld.getTpParcela().getValue())) {
        			if ("FP".equals(parcelaOld.getTpParcela().getValue()) && ! faixasPeso.isEmpty()) {
        				listaParcela.add(parcelaOld);
        			} else {
        				
        				if (! listaParcelaRemove.contains(parcelaOld)) {
        					listaParcelaRemove.add(parcelaOld);
        				}
        			}
        		}
        	}
        }

        tabelaColetaEntrega.setParcelaTabelaCes(listaParcela);

        tabelaColetaEntrega.setParcelaTabelaCesRemove(listaParcelaRemove);
        

        
        TypedFlatMap retorno = getTabelaColetaEntregaService().store(tabelaColetaEntrega,
        		faixasPeso,
        		master.getMasterId() == null ? faixasPeso.getNewOrModifiedItems().iterator() : faixasPeso.iterator((Long) master.getMasterId(), map, getMasterConfig().getItemListConfig(FAIXA_PESO_CONFIG_ALIAS)),
        		true);

        retorno.put("acaoVigenciaAtual",JTVigenciaUtils.getIntegerAcaoVigencia(tabelaColetaEntrega));
        
        return retorno;
    }
        
    public FilialService getFilialService() {
        return filialService;
    }
    
    //  metodo responsável por trazer informações do usuario logado
    public Map findInformacoesUsuarioLogado(Map criteria){
        TypedFlatMap typedFlatMap = new TypedFlatMap();
        
        typedFlatMap.put("filial.idFilial", SessionUtils.getFilialSessao().getIdFilial());
        typedFlatMap.put("filial.sgFilial", SessionUtils.getFilialSessao().getSgFilial());
        typedFlatMap.put("pessoa.nmFantasia",SessionUtils.getFilialSessao().getPessoa().getNmFantasia());        
        
        return typedFlatMap;
        
    }
    public void setFilialService(FilialService filialService) {
        this.filialService = filialService;
    }
    public void setTipoMeioTransporteService(
            TipoMeioTransporteService tipoMeioTransporteService) {
        this.tipoMeioTransporteService = tipoMeioTransporteService;
    }
    public void setTipoTabelaColetaEntregaService(
            TipoTabelaColetaEntregaService tipoTabelaColetaEntregaService) {
        this.tipoTabelaColetaEntregaService = tipoTabelaColetaEntregaService;
    }

    public void setParcelaTabelaCeService(
            ParcelaTabelaCeService parcelaTabelaCeService) {
        this.parcelaTabelaCeService = parcelaTabelaCeService;
    }

	public void setEnderecoPessoaService(EnderecoPessoaService enderecoPessoaService) {
		this.enderecoPessoaService = enderecoPessoaService;
	}

	public void setMoedaPaisService(MoedaPaisService moedaPaisService) {
		this.moedaPaisService = moedaPaisService;
	}

	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}
    
	public void setTabelaColetaEntregaService(TabelaColetaEntregaService tabelaColetaEntregaService) {
		setMasterService(tabelaColetaEntregaService);
}

	public TabelaColetaEntregaService getTabelaColetaEntregaService() {
		return (TabelaColetaEntregaService) getMasterService();
	}

	@Override
	protected MasterEntryConfig createMasterConfig(MasterDetailFactory masterFactory) {

		/**
		 * Declaracao da classe pai
		 */		
		MasterEntryConfig config = masterFactory.createMasterEntryConfig(TabelaColetaEntrega.class, true);		
				
		/**
		 * Esta classe e reponsavel por ordenar a List dos filhos que estao
		 * em memoria de acordo com as regras de negocio
		 */
    	Comparator descComparator = new Comparator() {
			public int compare(Object obj1, Object obj2) {
				return  ((FaixaPesoParcelaTabelaCE)obj1).getPsInicial().compareTo(((FaixaPesoParcelaTabelaCE)obj2).getPsInicial());
			}
    	};		
		
    	
    	/**
    	 * Esta instancia é responsavel por carregar os 
    	 * items filhos na sessão a partir do banco de dados.
    	 */
    	ItemListConfig itemInit = new ItemListConfig() {
    		
    		@Override
    		public void setMasterOnItem(Object master, Object itemBean) {
    			 ((FaixaPesoParcelaTabelaCE) itemBean).setTabelaColetaEntrega((TabelaColetaEntrega)master); 
    		}
 
    		/**
    		 * Find paginated do filho
    		 * Passa por este ponto apenas na primeira vez em que a list filha e chamada.
    		 * Apos a primeira vez ela e carregada da memoria
    		 * 
    		 * @param masterId id do pai
    		 * @param parameters todos os parametros vindo da tela pai
    		 */    		
			public List initialize(Long masterId, Map parameters) {	
				return faixaPesoParcelaTabelaCEService.findFaixaPesoByIdParcelaTabelaCE(masterId); 
			}

			/**
			 * Busca rowCount da grid da tela filha
			 * Passa por este ponto apenas na primeira vez em que a list filha e chamada.
    		 * Apos a primeira vez ela e carregada da memoria
			 * 
			 * @param masterId id do pai
			 * @param parameters todos os parametros vindo da tela pai
			 */			
			public Integer getRowCount(Long masterId, Map parameters) {
				return Integer.valueOf(faixaPesoParcelaTabelaCEService.findFaixaPesoByIdParcelaTabelaCE(masterId).size());
			}
			
			/**
			 * Chama esta funcao depois de editar um item da grid filho
			 * E retira atributos desnecessarios para o filho
			 * 
			 * @param newBean 
			 * @param oldBean 
			 */
			public void modifyItemValues(Object newBean, Object bean) {
				FaixaPesoParcelaTabelaCE beanModified = (FaixaPesoParcelaTabelaCE)newBean;
				FaixaPesoParcelaTabelaCE baseBean = (FaixaPesoParcelaTabelaCE)bean;

				baseBean.setPsFinal(beanModified.getPsFinal());
				baseBean.setPsInicial(beanModified.getPsInicial());
				baseBean.setVlValor(beanModified.getVlValor());
			}
			
			/**
			 * Todos os dados a serem carregados na grid pelo form passam antes por este
			 * metodo. Para se fazer uma validacao...
			 * Recomenda-se que o bean em questao seja gerado nesta classe a partir dos
			 * parametros enviados da tela para se evitar um 'ReflectionUtils'
			 * 
			 * @param mapParameter 
			 * @param bean a ser istanciado
			 * @return Object bean instanciado
			 */
			public Object populateNewItemInstance(Map mapParameter, Object bean) {
				FaixaPesoParcelaTabelaCE faixaPesoParcelaTabelaCE = (FaixaPesoParcelaTabelaCE) bean;				
				TypedFlatMap parameters = (TypedFlatMap) mapParameter;

				MasterEntry master = getMasterFromSession(getMasterId(mapParameter), true);
				if(getItemsFromSession(master, FAIXA_PESO_CONFIG_ALIAS).size() == 0){
					faixaPesoParcelaTabelaCE.setTpFator("Documento");
					faixaPesoParcelaTabelaCE.setPsInicial(BigDecimal.ZERO);
				} else {
					faixaPesoParcelaTabelaCE.setTpFator("KG");
				}
				
				faixaPesoParcelaTabelaCE.setIdFaixaPesoParcelaTabelaCE(parameters.getLong("idFaixaPesoParcelaTabelaCE"));
				faixaPesoParcelaTabelaCE.setPsFinal(parameters.getBigDecimal("psFinal"));
				faixaPesoParcelaTabelaCE.setPsInicial(parameters.getBigDecimal("psInicial"));
				faixaPesoParcelaTabelaCE.setVlValor(parameters.getBigDecimal("vlValor"));

				return faixaPesoParcelaTabelaCE;
			}			

    	};
    	
    	config.addItemConfig(FAIXA_PESO_CONFIG_ALIAS, FaixaPesoParcelaTabelaCE.class, itemInit, descComparator);
    	
		return config;
	}
	
    public void storeFaixaPeso(TypedFlatMap parameters) {
    	BigDecimal psInicial =  parameters.getBigDecimal("psInicial");
    	BigDecimal psFinal   =  parameters.getBigDecimal("psFinal");
    	
    	if(psInicial.compareTo(psFinal) >= 0){
			throw new BusinessException("LMS-25059");
    }
    	
    	saveItemInstance( parameters, FAIXA_PESO_CONFIG_ALIAS);
    	
    }

    public List<FaixaPesoParcelaTabelaCE> findFaixasPeso(Long idTabelaColetaEntrega, String itemConfigAlias){
    	Map<String,String> criteria = new HashMap<String,String>();
    	criteria.put("idTabelaColetaEntrega", idTabelaColetaEntrega == null ? null : String.valueOf(idTabelaColetaEntrega));
    	Long masterId = getMasterId(criteria);
   		ItemList itemList = loadItemList(masterId, itemConfigAlias, criteria);
		List filterItems = new ArrayList(); 
   		
   		Iterator it = itemList.iterator(idTabelaColetaEntrega, getMasterConfig().getItemListConfig(itemConfigAlias));
   		while ( it.hasNext() ) {
			Object type = (Object) it.next();
			filterItems.add(type);
		}
    	return filterItems;
    }
    
	public Integer getRowCountFaixaPeso(TypedFlatMap criteria) {
		getMasterFromSession(criteria.getLong("idTabelaColetaEntrega"), true);
		return getRowCountItemList(criteria, FAIXA_PESO_CONFIG_ALIAS);
	}
	
	public ResultSetPage findPaginatedFaixaPeso(TypedFlatMap criteria) {
		ResultSetPage rspItemAnexo = findPaginatedItemList(criteria, FAIXA_PESO_CONFIG_ALIAS);
    	return rspItemAnexo;
	}
	
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIdsFaixaPeso(List ids) {
    	super.removeItemByIds(ids, FAIXA_PESO_CONFIG_ALIAS);
    }
    	
	public TypedFlatMap loadPesoInicial(TypedFlatMap parameters) {
    	List<FaixaPesoParcelaTabelaCE> listFaixasPeso = findFaixasPeso(parameters.getLong("idTabelaColetaEntrega"),FAIXA_PESO_CONFIG_ALIAS);
    	
    	int size = listFaixasPeso.size();
    	
    	if(size > 0){ 
	    	FaixaPesoParcelaTabelaCE faixaPesoParcelaTabelaCE = listFaixasPeso.get(size - 1);
	    	faixaPesoParcelaTabelaCE.getPsFinal();
	    	BigDecimal b = faixaPesoParcelaTabelaCE.getPsFinal(); 
	    	
	    	BigDecimal umaUnidade = new BigDecimal(0.001).setScale(3,RoundingMode.FLOOR);
	    	b = b.add(umaUnidade);
	    	parameters.put("psInicial", b.toString().replace(".", ","));
    	} else {
    		parameters.put("psInicial", "0,000");
    }
		return parameters;
    }
	
	public void setFaixaPesoParcelaTabelaCEService(
			FaixaPesoParcelaTabelaCEService faixaPesoParcelaTabelaCEService) {
		this.faixaPesoParcelaTabelaCEService = faixaPesoParcelaTabelaCEService;
	}

    
}
