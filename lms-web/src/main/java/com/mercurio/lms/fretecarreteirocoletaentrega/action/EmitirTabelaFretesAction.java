package com.mercurio.lms.fretecarreteirocoletaentrega.action;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.report.ReportActionSupport;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteService;
import com.mercurio.lms.contratacaoveiculos.model.service.ProprietarioService;
import com.mercurio.lms.contratacaoveiculos.model.service.TipoMeioTransporteService;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.service.TipoTabelaColetaEntregaService;
import com.mercurio.lms.fretecarreteirocoletaentrega.report.EmitirTabelaFretesAgregadosService;
import com.mercurio.lms.fretecarreteirocoletaentrega.report.EmitirTabelaFretesEventuaisService;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.RegionalService;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator 
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.fretecarreteirocoletaentrega.emitirTabelaFretesAction"
 */

public class EmitirTabelaFretesAction extends ReportActionSupport {
	private FilialService filialService;
	private TipoMeioTransporteService tipoMeioTransporteService;
	private EmitirTabelaFretesAgregadosService emitirTabelaFretesAgregados;
	private EmitirTabelaFretesEventuaisService emitirTabelaFretesEventuais;
	private TipoTabelaColetaEntregaService tipoTabelaColetaEntregaService;
	private RegionalService regionalService;
	private MeioTransporteService meioTransporteService;
	private ProprietarioService proprietarioService;
	
	
	public List findComboTipoTabela(Map criteria){
		return tipoTabelaColetaEntregaService.findByOrder(criteria);
	}
	
	@Override
	public java.io.File execute(TypedFlatMap parameters) throws Exception {
		if (parameters.getString("tipoCarreteiro.value").equalsIgnoreCase("A")){
			this.reportServiceSupport = emitirTabelaFretesAgregados;
		} else if (parameters.getString("tipoCarreteiro.value").equalsIgnoreCase("E")) {
			this.reportServiceSupport = emitirTabelaFretesEventuais;
		} else {
			this.reportServiceSupport = null;
		}
		return super.execute(parameters); 
	}
	
	public List findFilial(Map criteria){
		return filialService.findLookupFilial(criteria);
	}

	public List findLookupProprietario(TypedFlatMap criteria){
		return proprietarioService.findLookupProprietario(criteria.getString("pessoa.nrIdentificacao"), null);
	}

	public List findComboTipoTabelaColetaEntrega(TypedFlatMap criteria) {
		return tipoTabelaColetaEntregaService.find(criteria);
	}

	public List findComboTpMeioTransporte(Map criteria) {
		criteria = new HashMap();
		criteria.put("tpMeioTransporte", "R");
		return tipoMeioTransporteService.find(criteria);
	}

	public List findComboRegional() {
		return regionalService.findRegional();
	}

	public List findLookupMeioTransp(TypedFlatMap criteria) {
		return meioTransporteService.findLookupWithProprietario(criteria);
	}

	public EmitirTabelaFretesEventuaisService getEmitirTabelaFretesEventuais() {
		return emitirTabelaFretesEventuais;
	}

	/**
	 * Método responsável por trazer informações do usuario logado
	 * @param criteria
	 * @return
	 */
	public Map findInformacoesUsuarioLogado(Map criteria){
		TypedFlatMap typedFlatMap = new TypedFlatMap();

		typedFlatMap.put("filial.idFilial", SessionUtils.getFilialSessao().getIdFilial());
		typedFlatMap.put("filial.sgFilial", SessionUtils.getFilialSessao().getSgFilial());
		typedFlatMap.put("pessoa.nmFantasia",SessionUtils.getFilialSessao().getPessoa().getNmFantasia());

		return typedFlatMap;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public void setTipoTabelaColetaEntregaService(TipoTabelaColetaEntregaService tipoTabelaColetaEntregaService) {
		this.tipoTabelaColetaEntregaService = tipoTabelaColetaEntregaService;
	}
	public void setRegionalService(RegionalService regionalService) {
		this.regionalService = regionalService;
	}
	public void setEmitirTabelaFretesAgregados(EmitirTabelaFretesAgregadosService emitirTabelaFretesAgregados) {
		this.emitirTabelaFretesAgregados = emitirTabelaFretesAgregados;
	}
	public void setEmitirTabelaFretesEventuais(EmitirTabelaFretesEventuaisService emitirTabelaFretesEventuais) {
		this.emitirTabelaFretesEventuais = emitirTabelaFretesEventuais;
	}
	public void setMeioTransporteService(MeioTransporteService meioTransporteService) {
		this.meioTransporteService = meioTransporteService;
	}
	public void setTipoMeioTransporteService(TipoMeioTransporteService tipoMeioTransporteService) {
		this.tipoMeioTransporteService = tipoMeioTransporteService;
	}
	public void setProprietarioService(ProprietarioService proprietarioService) {
		this.proprietarioService = proprietarioService;
	}

}
