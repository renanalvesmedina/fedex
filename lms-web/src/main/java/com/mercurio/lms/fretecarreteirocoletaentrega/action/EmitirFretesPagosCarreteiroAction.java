package com.mercurio.lms.fretecarreteirocoletaentrega.action;

import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.report.ReportActionSupport;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.MoedaPais;
import com.mercurio.lms.configuracoes.model.service.MoedaPaisService;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteRodoviarioService;
import com.mercurio.lms.contratacaoveiculos.model.service.ProprietarioService;
import com.mercurio.lms.fretecarreteirocoletaentrega.report.EmitirRelacaoFretesPagosCarreteiroService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.Pais;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.RegionalService;
import com.mercurio.lms.util.session.SessionUtils;


/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.fretecarreteirocoletaentrega.emitirFretesPagosCarreteiroAction"
 */

public class EmitirFretesPagosCarreteiroAction extends ReportActionSupport {
	private EmitirRelacaoFretesPagosCarreteiroService emitirRelacaoFretesPagosCarreteiroService;
	private FilialService filialService;
	private ProprietarioService proprietarioService;
	private MeioTransporteRodoviarioService meioTransporteRodoviarioService;
	private ConfiguracoesFacade configuracoesFacade;
	private RegionalService regionalService;
	private MoedaPaisService moedaPaisService;
	
	public RegionalService getRegionalService() {
		return regionalService;
	}

	public void setRegionalService(RegionalService regionalService) {
		this.regionalService = regionalService;
	}

	public ConfiguracoesFacade getConfiguracoesFacade() {
		return configuracoesFacade;
	}

	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}

	public FilialService getFilialService() {
		return filialService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public MeioTransporteRodoviarioService getMeioTransporteRodoviarioService() {
		return meioTransporteRodoviarioService;
	}

	public void setMeioTransporteRodoviarioService(
			MeioTransporteRodoviarioService meioTransporteRodoviarioService) {
		this.meioTransporteRodoviarioService = meioTransporteRodoviarioService;
	}

	public ProprietarioService getProprietarioService() {
		return proprietarioService;
	}

	public void setProprietarioService(ProprietarioService proprietarioService) {
		this.proprietarioService = proprietarioService;
	}

	public EmitirRelacaoFretesPagosCarreteiroService getEmitirRelacaoFretesPagosCarreteiroService() {
		return emitirRelacaoFretesPagosCarreteiroService;
	}

	public void setEmitirRelacaoFretesPagosCarreteiroService(
			EmitirRelacaoFretesPagosCarreteiroService emitirRelacaoFretesPagosCarreteiroService) {
		this.reportServiceSupport = emitirRelacaoFretesPagosCarreteiroService;
	}
	
	public List findLookupProprietario(Map criteria) {
		return getProprietarioService().findLookup(criteria);
	}
	
	public List findLookupFilial(Map criteria) {
		return getFilialService().findLookupFilial(criteria);
	}
	
	public List findLookupMeioTransporteRodoviario(TypedFlatMap criteria) {
    	return getMeioTransporteRodoviarioService().findLookupWithProprietario(criteria);
    }
	
	public List findMoedaPais(Map criteria){
		Pais p = SessionUtils.getPaisSessao();
		return configuracoesFacade.getMoedasPais(p.getIdPais(),Boolean.TRUE);
	}
	
	public TypedFlatMap findInfoUsuarioLogado(){
		TypedFlatMap typedFlatMap = new TypedFlatMap();
		
		// Encontra informações da filial
		Filial filial = SessionUtils.getFilialSessao();
		typedFlatMap.put("filial.sgFilial", filial.getSgFilial());
		typedFlatMap.put("filial.pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
		typedFlatMap.put("filial.idFilial", filial.getIdFilial());
		
		// Encontra informações da moeda.
		Pais p = SessionUtils.getPaisSessao();
		MoedaPais mp = moedaPaisService.findMoedaPaisMaisUtilizada(p.getIdPais());
		typedFlatMap.put("idMoedaPais",mp.getIdMoedaPais());
		typedFlatMap.put("idMoeda",mp.getMoeda().getIdMoeda());
		typedFlatMap.put("dsSimbolo", mp.getMoeda().getDsSimbolo());
		typedFlatMap.put("siglaSimbolo", mp.getMoeda().getSiglaSimbolo());
		typedFlatMap.put("idPais",mp.getPais().getIdPais());
		return typedFlatMap;
	}
	
	public List findRegionaisVigentes(){
		return getRegionalService().findRegionaisVigentes();
	}

	public void setMoedaPaisService(MoedaPaisService moedaPaisService) {
		this.moedaPaisService = moedaPaisService;
	}


}
