package com.mercurio.lms.fretecarreteirocoletaentrega.action;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.report.ReportActionSupport;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.MoedaPais;
import com.mercurio.lms.configuracoes.model.service.MoedaPaisService;
import com.mercurio.lms.contratacaoveiculos.model.TipoMeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.service.TipoMeioTransporteService;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.FilialReajuste;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.NcParcelaSimulacao;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.ParamSimulacaoHistorica;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.ParcelaReajuste;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.SimulacaoReajusteFreteCe;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.TipoTabelaColetaEntrega;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.service.FilialReajusteService;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.service.ParamSimulacaoHistoricaService;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.service.ParcelaReajusteService;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.service.SimulacaoReajusteFreteCeService;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.service.TipoTabelaColetaEntregaService;
import com.mercurio.lms.fretecarreteirocoletaentrega.report.EmitirTabelasFretesSimuladasService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.Pais;
import com.mercurio.lms.municipios.model.service.FilialService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.fretecarreteirocoletaentrega.aplicarReajustesTabelasFreteTabelasAction"
 */

public class AplicarReajustesTabelasFreteTabelasAction extends ReportActionSupport {
	
	private FilialService filialService;
	private TipoTabelaColetaEntregaService tipoTabelaColetaEntregaService;
	private TipoMeioTransporteService tipoMeioTransporteService;
	private ParamSimulacaoHistoricaService paramSimulacaoHistoricaService;
	private ParcelaReajusteService parcelaReajusteService;
	private FilialReajusteService filialReajusteService;
	private SimulacaoReajusteFreteCeService defaultService;
	private MoedaPaisService moedaPaisService;
	private static final String[] tpsParcela = new String[] {"DH","EV","FP","QU"};
	
	public void setEmitirTabelasFretesSimuladasService(EmitirTabelasFretesSimuladasService service) {
		this.reportServiceSupport = service;
	}
	
	public void setService(SimulacaoReajusteFreteCeService serviceService) {
		this.defaultService = serviceService;
	}
	
	private SimulacaoReajusteFreteCeService getService() {
		return this.defaultService;
	}
	
	
	public List findComboMoeda(TypedFlatMap criteria) {
		return moedaPaisService.findByPais(criteria.getLong("pais.idPais"),Boolean.TRUE);
	}
	public void efetivarReajuste(TypedFlatMap parameters) {
		SimulacaoReajusteFreteCe bean = copyParametersToBean(parameters);
		getService().executeEfetivarReajuste(bean,parameters);
	}
	
	public TypedFlatMap findById(Long id) {
		TypedFlatMap result = new TypedFlatMap();
		if (id != null) { 
			ParamSimulacaoHistorica bean = paramSimulacaoHistoricaService.findById(id);

	    	result.put("idParamSimulacaoHistorica",bean.getIdParamSimulacaoHistorica());
	    	result.put("blPercentual",((bean.getBlPercentual().booleanValue()) ? "P" : "V"));
	    	MoedaPais moedaPais = getService().findMoedaPaisByFilial(bean.getFilial());
	    	if (moedaPais != null) {
	    		result.put("moedaPais.idMoedaPais",moedaPais.getIdMoedaPais());
	    		Pais pais = moedaPais.getPais();
				result.put("moedaPais.pais.idPais",pais.getIdPais());
	    		result.put("moedaPais.pais.nmPais",pais.getNmPais());
	    	}
	    	Filial filial = bean.getFilial();
	    	List filiaisT = new ArrayList();
	    	TypedFlatMap filialT = new TypedFlatMap();
	    	filialT.put("filial.idFilial",filial.getIdFilial());
	    	filialT.put("filial.sgFilial",filial.getSgFilial());
	    	filialT.put("nmFilial",filial.getPessoa().getNmFantasia());
	    	filiaisT.add(filialT);
	    	result.put("filiaisT",filiaisT);
	    	
	    	TipoMeioTransporte tipoMeioTransporte = bean.getTipoMeioTransporte();
	    	if (tipoMeioTransporte != null)
	    		result.put("tipoMeioTransporte.idTipoMeioTransporte",tipoMeioTransporte.getIdTipoMeioTransporte());
	    	
	    	TipoTabelaColetaEntrega tipoTabelaColetaEntrega = bean.getTipoTabelaColetaEntrega();
	    	if (tipoTabelaColetaEntrega != null)
	    		result.put("tipoTabelaColetaEntrega.idTipoTabelaColetaEntrega",tipoTabelaColetaEntrega.getIdTipoTabelaColetaEntrega());

	    	List parcelas = new ArrayList();
	    	for (int x = 0; x < tpsParcela.length; x++) {

	    		List rs = paramSimulacaoHistoricaService.findNcParcelaSimulacao(bean.getIdParamSimulacaoHistorica(),tpsParcela[x]);
	    		TypedFlatMap resultParcelas = new TypedFlatMap();
	    		if (rs.size() > 0) { 
	    			NcParcelaSimulacao parcela = (NcParcelaSimulacao)rs.get(0);
	    			resultParcelas.put("pcReajuste",((bean.getBlPercentual().booleanValue()) ? parcela.getVlReajustado().add(parcela.getVlOriginal()).multiply(BigDecimal.valueOf(100l)).divide(parcela.getVlOriginal(),BigDecimal.ROUND_UP).subtract(BigDecimal.valueOf(100l))
							: parcela.getVlReajustado()));
				}else{
					resultParcelas.put("pcReajuste",BigDecimal.ZERO);
				}
	    		parcelas.add(resultParcelas);
	    	}
	    	result.put("ncParcelaSimulacao",parcelas);
	    	
		}else{
			List rs = getService().find(null);
			if (rs.size() > 0) {
				SimulacaoReajusteFreteCe bean = (SimulacaoReajusteFreteCe)rs.get(0);
				result.put("idSimulacaoReajusteFreteCe",bean.getIdSimulacaoReajusteFreteCe());
		    	result.put("dtEmissaoInicial",bean.getDtVigenciaInicial());
		    	result.put("dtEmissaoFinal",bean.getDtVigenciaFinal());
		    	result.put("tipoMeioTransporte.idTipoMeioTransporte",bean.getTipoMeioTransporte().getIdTipoMeioTransporte());
		    	result.put("tipoTabelaColetaEntrega.idTipoTabelaColetaEntrega",bean.getTipoTabelaColetaEntrega().getIdTipoTabelaColetaEntrega());
		    	MoedaPais moedaPais = moedaPaisService.findById(bean.getMoedaPais().getIdMoedaPais());
		    	result.put("moedaPais.idMoedaPais",moedaPais.getIdMoedaPais());
	    		Pais pais = moedaPais.getPais();
				result.put("moedaPais.pais.idPais",pais.getIdPais());
	    		result.put("moedaPais.pais.nmPais",pais.getNmPais());

		    	List filiais = bean.getFilialReajustes();
		    	if (filiais != null) {
		    		List filiaisT = new ArrayList();
			    	List filiaisF = new ArrayList();
			    	for(Iterator i = filiais.iterator(); i.hasNext();) {
			    		FilialReajuste filialReajuste = filialReajusteService.findById(((FilialReajuste)i.next()).getIdFilialReajuste());
			    		
			    		TypedFlatMap filialResult = new TypedFlatMap();
			    		Filial filial = filialReajuste.getFilial();
			    		filialResult.put("filial.idFilial",filial.getIdFilial());
			    		filialResult.put("filial.sgFilial",filial.getSgFilial());
			    		filialResult.put("nmFilial",filial.getPessoa().getNmFantasia());
			    		if (filialReajuste.getBlAjusta().booleanValue())
			    			filiaisT.add(filialResult);
			    		else
			    			filiaisF.add(filialResult);
			    	}
			    	result.put("filiaisF",filiaisF);
			    	result.put("filiaisT",filiaisT);
		    	}
		    	Map criteria = new HashMap();
		    	Map simulacaoReajusteFreteCe = new HashMap();
		    	simulacaoReajusteFreteCe.put("idSimulacaoReajusteFreteCe",bean.getIdSimulacaoReajusteFreteCe());
		    	criteria.put("simulacaoReajusteFreteCe",simulacaoReajusteFreteCe);
		    	
		    	List parcelasReajuste = new ArrayList();
		    	for (int x = 0; x < tpsParcela.length; x++) {
		    		criteria.put("tpParcela",tpsParcela[x]);
		    		List parcelas = parcelaReajusteService.find(criteria);
		    		TypedFlatMap resultParcela = new TypedFlatMap();
		    		if (parcelas.size() == 1) {
		    			ParcelaReajuste parcela = (ParcelaReajuste)parcelas.get(0);
		    			if (parcela.getVlBruto() != null) {
		    				result.put(new StringBuffer("blPercentual").append(x).toString(),"V");
		    				resultParcela.put("pcReajuste",parcela.getVlBruto());
		    			}else{
		    				result.put(new StringBuffer("blPercentual").append(x).toString(),"P");
		    				resultParcela.put("pcReajuste",parcela.getVlReajustado());
		    			}
		    		}
		    		parcelasReajuste.add(resultParcela);
		    	}
		    	result.put("ncParcelaSimulacao",parcelasReajuste);
			}else
				result.put("disabledEfetivar",Boolean.TRUE);
		}
		return result;
	}
	public void removeById(Long id) {
		getService().removeById(id);
	}
	public TypedFlatMap store(TypedFlatMap parameters) {
		SimulacaoReajusteFreteCe bean = copyParametersToBean(parameters);
		getService().store(bean,parameters.getBoolean("blAprovado"));
		TypedFlatMap result = new TypedFlatMap();
		result.put("idSimulacaoReajusteFreteCe",bean.getIdSimulacaoReajusteFreteCe());
		return result;
	}
	
	private SimulacaoReajusteFreteCe copyParametersToBean(TypedFlatMap parameters) {
		SimulacaoReajusteFreteCe bean = new SimulacaoReajusteFreteCe();
		bean.setIdSimulacaoReajusteFreteCe(parameters.getLong("idSimulacaoReajusteFreteCe"));
		bean.setDtVigenciaFinal(parameters.getYearMonthDay("dtEmissaoFinal"));
		bean.setDtVigenciaInicial(parameters.getYearMonthDay("dtEmissaoInicial"));
		
		TipoMeioTransporte tipoMeioTransporte = new TipoMeioTransporte();
		tipoMeioTransporte.setIdTipoMeioTransporte(parameters.getLong("tipoMeioTransporte.idTipoMeioTransporte"));
		TipoTabelaColetaEntrega tipoTabelaColetaEntrega = new TipoTabelaColetaEntrega();
		tipoTabelaColetaEntrega.setIdTipoTabelaColetaEntrega(parameters.getLong("tipoTabelaColetaEntrega.idTipoTabelaColetaEntrega"));
		MoedaPais moedaPais = new MoedaPais();
		moedaPais.setIdMoedaPais(parameters.getLong("moedaPais.idMoedaPais"));
		
		bean.setTipoMeioTransporte(tipoMeioTransporte);
		bean.setTipoTabelaColetaEntrega(tipoTabelaColetaEntrega);
		bean.setMoedaPais(moedaPais);
		
		List filiaisF = parameters.getList("filiaisF");
		List filiaisT = parameters.getList("filiaisT");
		
		List newList = new ArrayList();
		
		if (filiaisF != null && filiaisF.size() > 0) {
			for(Iterator i = filiaisF.iterator(); i.hasNext();) {
				TypedFlatMap line = (TypedFlatMap)i.next();
				
				FilialReajuste filialReajuste = new FilialReajuste();
				
				Filial filial = new Filial();
				filial.setIdFilial(line.getLong("filial.idFilial"));
				
				filialReajuste.setFilial(filial);
				filialReajuste.setBlAjusta(Boolean.FALSE);
				filialReajuste.setTpSituacao(new DomainValue("A"));
				filialReajuste.setSimulacaoReajusteFreteCe(bean);
				newList.add(filialReajuste);
			}

		}
		if (filiaisT != null && filiaisT.size() > 0) {
			for(Iterator i = filiaisT.iterator(); i.hasNext();) {
				TypedFlatMap line = (TypedFlatMap)i.next();
				
				FilialReajuste filialReajuste = new FilialReajuste();
				
				Filial filial = new Filial();
				filial.setIdFilial(line.getLong("filial.idFilial"));
				
				filialReajuste.setFilial(filial);
				filialReajuste.setBlAjusta(Boolean.TRUE);
				filialReajuste.setTpSituacao(new DomainValue("A"));
				filialReajuste.setSimulacaoReajusteFreteCe(bean);
				newList.add(filialReajuste);
			}
		}
		if (newList.size() != 0)
			bean.setFilialReajustes(newList);
		
		List parcelas = parameters.getList("ncParcelaSimulacao");
		List newListP = new ArrayList();
		for(int x = 0; x < tpsParcela.length; x++) {
			String blPercentual = parameters.getString(new StringBuffer("blPercentual").append(x).toString());
			BigDecimal reajuste = ((TypedFlatMap)parcelas.get(x)).getBigDecimal("pcReajuste");
			if (StringUtils.isNotBlank(blPercentual) && reajuste != null) {
				ParcelaReajuste parcela = new ParcelaReajuste();
				parcela.setTpParcela(new DomainValue(tpsParcela[x]));
				parcela.setTpSituacao(new DomainValue("A"));
				parcela.setSimulacaoReajusteFreteCe(bean);
				if (blPercentual.equals("V"))
					parcela.setVlBruto(reajuste);
				else
					parcela.setVlReajustado(reajuste);
				newListP.add(parcela);
			}
		}
		if (newListP.size() > 0)
			bean.setParcelaReajustes(newListP);
		return bean;
	}
	
	
    public List findComboTipoTabelaColetaEntrega(TypedFlatMap criteria) {
        return tipoTabelaColetaEntregaService.find(criteria);
    }
    
    public List findLookupFilial(Map criteria) {
    	return filialService.findLookupFilial(criteria);
    }
	public List findComboTipoMeioTransporte(Map criteria) {
		if (criteria == null)
			criteria = new HashMap();
		criteria.put("tpMeioTransporte","R");  
		
		List beans = tipoMeioTransporteService.find(criteria);
		List newList = new ArrayList(beans.size());
		
		TipoMeioTransporte bean;
		for (Iterator i = beans.iterator(); i.hasNext();) {
			bean = (TipoMeioTransporte)i.next();
			TypedFlatMap result = new TypedFlatMap();
			result.put("idTipoMeioTransporte",bean.getIdTipoMeioTransporte());
			result.put("dsTipoMeioTransporte",bean.getDsTipoMeioTransporte());
			newList.add(bean);
		}
		return newList;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public void setTipoMeioTransporteService(
			TipoMeioTransporteService tipoMeioTransporteService) {
		this.tipoMeioTransporteService = tipoMeioTransporteService;
	}

	public void setTipoTabelaColetaEntregaService(
			TipoTabelaColetaEntregaService tipoTabelaColetaEntregaService) {
		this.tipoTabelaColetaEntregaService = tipoTabelaColetaEntregaService;
	}

	public void setParamSimulacaoHistorica(
			ParamSimulacaoHistoricaService paramSimulacaoHistoricaService) {
		this.paramSimulacaoHistoricaService = paramSimulacaoHistoricaService;
	}

	public void setParcelaReajusteService(
			ParcelaReajusteService parcelaReajusteService) {
		this.parcelaReajusteService = parcelaReajusteService;
	}

	public void setFilialReajusteService(FilialReajusteService filialReajusteService) {
		this.filialReajusteService = filialReajusteService;
	}

	public void setMoedaPaisService(MoedaPaisService moedaPaisService) {
		this.moedaPaisService = moedaPaisService;
	}
	
}
