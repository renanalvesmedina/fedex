package com.mercurio.lms.fretecarreteirocoletaentrega.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.joda.time.YearMonthDay;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.FindDefinition;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.EnderecoPessoa;
import com.mercurio.lms.configuracoes.model.MoedaPais;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.configuracoes.model.service.EnderecoPessoaService;
import com.mercurio.lms.configuracoes.model.service.MoedaPaisService;
import com.mercurio.lms.contratacaoveiculos.model.MeioTranspProprietario;
import com.mercurio.lms.contratacaoveiculos.model.MeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.Proprietario;
import com.mercurio.lms.contratacaoveiculos.model.SolicitacaoContratacao;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteRodoviarioService;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteService;
import com.mercurio.lms.contratacaoveiculos.model.service.ProprietarioService;
import com.mercurio.lms.contratacaoveiculos.model.service.SolicitacaoContratacaoService;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.ParcelaTabelaCe;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.TabelaColetaEntrega;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.service.ParcelaTabelaCeService;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.service.TabelaColetaEntregaService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;


/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.fretecarreteirocoletaentrega.manterTabelasFretesEventuaisAction"
 */

public class ManterTabelasFretesEventuaisAction extends CrudAction {
	MoedaPaisService moedaPaisService;
	FilialService filialService;
	MeioTransporteRodoviarioService meioTransporteRodoviarioService;
	ProprietarioService proprietarioService;
	SolicitacaoContratacaoService solicitacaoContratacaoService;
	EnderecoPessoaService enderecoPessoaService;
	DomainValueService domainValueService;
	ParcelaTabelaCeService parcelaTabelaCeService;
	MeioTransporteService meioTransporteService;
	
	private final String[] tpsParcela = new String[]{"DH","EV","QU","FP","PF","PV"};
	private final String domainName = "DM_TIPO_PARCELA_FRETE_COLETA_ENTREGA";
		
	public void setService(TabelaColetaEntregaService serviceService) {
		this.defaultService = serviceService;
	}
	private TabelaColetaEntregaService getService() {
		return (TabelaColetaEntregaService)this.defaultService;
	}
    public void removeById(java.lang.Long id) {
        getService().removeById(id);
    }

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	getService().removeByIds(ids);
    }

    public Serializable store(TypedFlatMap parameters) {
    	return getService().store(parameters);
    	}
	    
    public TypedFlatMap findById(java.lang.Long id) {
    	TabelaColetaEntrega bean = getService().findByIdCustom(id);
    	
    	Filial filial = bean.getFilial();
    	TypedFlatMap result = new TypedFlatMap();
		result.put("filial.idFilial",filial.getIdFilial());
		result.put("filial.sgFilial",filial.getSgFilial());
		result.put("filial.pessoa.nmPessoa",filial.getPessoa().getNmFantasia());

		SolicitacaoContratacao solicitacaoContratacao = bean.getSolicitacaoContratacao();
		result.put("meioTransporteRodoviario.meioTransporte.nrIdentificador",solicitacaoContratacao.getNrIdentificacaoMeioTransp());
		
		if (StringUtils.isNotBlank(solicitacaoContratacao.getNrIdentificacaoMeioTransp()))
			result.put("meioTransporteRodoviario.meioTransporte.nrFrota",
					meioTransporteService.findNrFrotaByNrIdentificacao(solicitacaoContratacao.getNrIdentificacaoMeioTransp()));
			

    	if (bean.getMeioTransporteRodoviario() != null) {
    		MeioTransporte meioTransporte = bean.getMeioTransporteRodoviario().getMeioTransporte();
    		
    		
			result.put("meioTransporteRodoviario.idMeioTransporte",meioTransporte.getIdMeioTransporte());
			
			if (!meioTransporte.getMeioTranspProprietarios().isEmpty()) {
				Proprietario proprietario = ((MeioTranspProprietario)meioTransporte.getMeioTranspProprietarios().get(0)).getProprietario();
				Pessoa pessoaPro = proprietario.getPessoa();
	    		result.put("proprietario.pessoa.nmPessoa",pessoaPro.getNmPessoa());
	    		result.put("proprietario.pessoa.nrIdentificacaoFormatado",FormatUtils.formatIdentificacao(pessoaPro.getTpIdentificacao(),pessoaPro.getNrIdentificacao()));
	    		result.put("proprietario.idProprietario",proprietario.getIdProprietario());
			}
    	}
    	result.put("solicitacaoContratacao2.idSolicitacaoContratacao",solicitacaoContratacao.getIdSolicitacaoContratacao());
    	result.put("solicitacaoContratacao.idSolicitacaoContratacao",solicitacaoContratacao.getIdSolicitacaoContratacao());
    	result.put("solicitacaoContratacao2.nrSolicitacaoContratacao",solicitacaoContratacao.getNrSolicitacaoContratacao());
    	result.put("solicitacaoContratacao.filial.sgFilial",filial.getSgFilial());
    				 
		EnderecoPessoa enderecoPessoa = enderecoPessoaService.findEnderecoPessoaPadrao(filial.getIdFilial());
		if (enderecoPessoa != null) {
			MoedaPais moedaPais = moedaPaisService.findMoedaPaisMaisUtilizada(enderecoPessoa.getMunicipio().getUnidadeFederativa().getPais().getIdPais());
			result.put("moedaPais",moedaPais.getMoeda().getSiglaSimbolo());
		}
			 
		result.put("blDomingo",bean.getBlDomingo());
		result.put("idTabelaColetaEntrega",bean.getIdTabelaColetaEntrega());
		result.put("blQuarta",bean.getBlQuarta());
		result.put("blQuinta",bean.getBlQuinta());
		result.put("blSabado",bean.getBlSabado());
		result.put("blSegunda",bean.getBlSegunda());
		result.put("blSexta",bean.getBlSexta());
		result.put("blTerca",bean.getBlTerca());
		result.put("dtVigenciaInicial",bean.getDtVigenciaInicial());
		result.put("dtVigenciaFinal",bean.getDtVigenciaFinal());
		result.put("tpSituacaoAprovacao",bean.getTpSituacaoAprovacao().getValue());
		result.put("hrDiariaInicial",bean.getHrDiariaInicial());   
		result.put("behaivor",validateBehaivor(solicitacaoContratacao.getTpSituacaoContratacao().getValue(),bean.getDtVigenciaInicial()));
    	return result;
    }
    public ResultSetPage findPaginated(TypedFlatMap criteria) {
    	return getService().findPaginated(criteria,FindDefinition.createFindDefinition(criteria));
    }
    
    private Integer validateBehaivor(String tpSituacao,YearMonthDay dtVigenciaInicial) {
    	if (tpSituacao.equalsIgnoreCase("SA") ||
    			tpSituacao.equalsIgnoreCase("AN") || 
    			tpSituacao.equalsIgnoreCase("CA") || 
    			tpSituacao.equalsIgnoreCase("RE"))
    		return Integer.valueOf(0);
    	else if (tpSituacao.equalsIgnoreCase("NE"))
    		return Integer.valueOf(1);
    	else if (dtVigenciaInicial.compareTo(JTDateTimeUtils.getDataAtual()) > 0)
    		return Integer.valueOf(2);
    	else if (dtVigenciaInicial.compareTo(JTDateTimeUtils.getDataAtual()) <= 0)
    		return Integer.valueOf(3);
    	else
    		return Integer.valueOf(4);
    	
    	
    }
    
    public List findGridEditabled(Long idTabelaColetaEntrega) {
    	List result = new ArrayList();
    	for (int x = 0; x < tpsParcela.length; x++) {
    			TypedFlatMap resultT = new TypedFlatMap();
    			 			 
    			ParcelaTabelaCe parcelaTabelaCe = parcelaTabelaCeService.findParcelaTabelaCeByTpParcelaAndTabelaCE(tpsParcela[x],
    													idTabelaColetaEntrega);
    			if (parcelaTabelaCe != null) {
						 resultT.put("tpParcela",parcelaTabelaCe.getTpParcela());
						 resultT.put("idParcelaTabelaCe",parcelaTabelaCe.getIdParcelaTabelaCe());
						 resultT.put("vlSugerido",parcelaTabelaCe.getVlSugerido());
						 resultT.put("vlMaximoAprovado",parcelaTabelaCe.getVlMaximoAprovado());
						 resultT.put("vlNegociado",parcelaTabelaCe.getVlNegociado());
						 resultT.put("vlDefinido",parcelaTabelaCe.getVlDefinido());
						 if( parcelaTabelaCe.getTpParcela() != null && !"DH".equals(parcelaTabelaCe.getTpParcela().getValue()) ) {
						 resultT.put("pcSobreValor",parcelaTabelaCe.getPcSobreValor());
						 }else {
							 resultT.put("pcSobreValor",null);
						 }
						 resultT.put("vlReferencia",parcelaTabelaCe.getVlReferencia());
    			}else{
    				resultT.put("tpParcela",domainValueService.findDomainValueByValue(domainName,tpsParcela[x]));
    			}
    				
	    		result.add(resultT);
	    }
    	return result;
    }

    
    public Integer getRowCount(TypedFlatMap criteria) {
    	return getService().getRowCount(criteria);
    }
    
    public List findComboMoedaPais() {
    	return moedaPaisService.findMoedaPaisBySituacaoPais("A",SessionUtils.getPaisSessao().getIdPais());
    }
    
    public List findLookupMeioTransporteRodoviario(Map criteria) {
    	return meioTransporteRodoviarioService.findLookup(criteria);
    }

    public List findLookupProprietario(Map criteria) {
    	return proprietarioService.findLookup(criteria);
    }

    public List findLookupSolicitacaoContratacao(TypedFlatMap criteria) {
    	return solicitacaoContratacaoService.findLookup(criteria);
    }
    
    public List findLookupFilial(Map criteria) {
    	return filialService.findLookupFilial(criteria);
    }
    
	public void setMoedaPaisService(MoedaPaisService moedaPaisService) {
		this.moedaPaisService = moedaPaisService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public void setMeioTransporteRodoviarioService(
			MeioTransporteRodoviarioService meioTransporteRodoviarioService) {
		this.meioTransporteRodoviarioService = meioTransporteRodoviarioService;
	}
	public void setProprietarioService(ProprietarioService proprietarioService) {
		this.proprietarioService = proprietarioService;
	}
	public void setSolicitacaoContratacaoService(
			SolicitacaoContratacaoService solicitacaoContratacaoService) {
		this.solicitacaoContratacaoService = solicitacaoContratacaoService;
	}
	public void setEnderecoPessoaService(EnderecoPessoaService enderecoPessoaService) {
		this.enderecoPessoaService = enderecoPessoaService;
	}
	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}
	public void setParcelaTabelaCeService(
			ParcelaTabelaCeService parcelaTabelaCeService) {
		this.parcelaTabelaCeService = parcelaTabelaCeService;
	}
	public void setMeioTransporteService(MeioTransporteService meioTransporteService) {
		this.meioTransporteService = meioTransporteService;
	}
}
