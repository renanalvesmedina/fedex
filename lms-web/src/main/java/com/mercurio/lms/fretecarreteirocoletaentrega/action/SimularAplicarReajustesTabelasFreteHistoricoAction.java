package com.mercurio.lms.fretecarreteirocoletaentrega.action;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.joda.time.DateTime;
import org.joda.time.YearMonthDay;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.contratacaoveiculos.model.MeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.MeioTransporteRodoviario;
import com.mercurio.lms.contratacaoveiculos.model.TipoMeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteRodoviarioService;
import com.mercurio.lms.contratacaoveiculos.model.service.TipoMeioTransporteService;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.NcParcelaSimulacao;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.ParamSimulacaoHistorica;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.ParcelaTabelaCe;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.TipoTabelaColetaEntrega;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.service.ParamSimulacaoHistoricaService;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.service.TipoTabelaColetaEntregaService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.fretecarreteirocoletaentrega.simularAplicarReajustesTabelasFreteHistoricoAction"
 */

public class SimularAplicarReajustesTabelasFreteHistoricoAction extends CrudAction {
	
	private TipoTabelaColetaEntregaService tipoTabelaColetaEntregaService;
	private TipoMeioTransporteService tipoMeioTransporteService;
	private FilialService filialService;
	private MeioTransporteRodoviarioService meioTransporteRodoviarioService;
	private static final String[] tpsParcela = new String[] {"DH","EV","FP","QU"};

	public void setService(ParamSimulacaoHistoricaService serviceService) {
		this.defaultService = serviceService;
	}
	private ParamSimulacaoHistoricaService getService() {
		return (ParamSimulacaoHistoricaService)this.defaultService;
	}
    public void removeById(java.lang.Long id) {
        getService().removeById(id);
    }
    
    public ResultSetPage findPaginated(TypedFlatMap criteria) {
    	fixInputParameters(criteria);
    	return getService().findPaginated(criteria);
    }
    public Integer getRowCount(TypedFlatMap criteria) {
    	fixInputParameters(criteria);
    	return getService().getRowCount(criteria);
    }
    private void fixInputParameters(TypedFlatMap criteria) {
    	if (StringUtils.isNotBlank(criteria.getString("blPercentual")))
    		criteria.put("blPercentual",convertDmTipoSimulacaoReajusteToBoolean(criteria.getString("blPercentual")));
    }
    
    public TypedFlatMap findVlOriginal(TypedFlatMap criteria) {
    	DateTime dhCriacao = criteria.getDateTime("dhCriacao");
    	Long idTipoTabelaColetaEntrega = criteria.getLong("tipoTabelaColetaEntrega.idTipoTabelaColetaEntrega");
    	Long idTipoMeioTransporte = criteria.getLong("tipoMeioTransporte.idTipoMeioTransporte");
    	Long idFilial = criteria.getLong("filial.idFilial");
    	YearMonthDay vigenteEm;
    	if (dhCriacao == null)
    		vigenteEm = JTDateTimeUtils.getDataAtual();
    	else
    		vigenteEm = new YearMonthDay(dhCriacao.getYear(),dhCriacao.getMonthOfYear(),dhCriacao.getDayOfMonth());
    	
    	TypedFlatMap result = new TypedFlatMap();
    	boolean isValidResult = false;
    	for(int x = 0; x < tpsParcela.length; x++) {
    		List rs = getService().findParcelaTabelaCeByTpMeioTransTpTabColEnt(idTipoTabelaColetaEntrega,idTipoMeioTransporte,tpsParcela[x],vigenteEm,idFilial);
    		if (rs.size() > 0) {
    			result.put("qtde_" + Integer.toString(x),((ParcelaTabelaCe)rs.get(0)).getVlDefinido());
    			isValidResult = true;
    		}
    	}
    	result.put("isValidResult",Boolean.toString(isValidResult));
    	return result;
    }
    
    
    public TypedFlatMap calculeValuesGrid(TypedFlatMap parameters) {
		String blPercentual = parameters.getString("blPercentual");
		TypedFlatMap result = new TypedFlatMap();
		BigDecimal zero = BigDecimal.valueOf(0l);
		result.put("vlTotalReajustado",zero);
		result.put("vlTotalAtual","");
		List listParcelas = new ArrayList();
		for(Iterator i = parameters.getList("ncParcelaSimulacao").iterator(); i.hasNext();) {
			TypedFlatMap resultList = new TypedFlatMap();
			TypedFlatMap mapView = (TypedFlatMap)i.next();
			
			BigDecimal qtNcParcelaSimulacao = mapView.getBigDecimal("qtNcParcelaSimulacao");
			BigDecimal vlOriginal = mapView.getBigDecimal("vlOriginal");
			if (vlOriginal != null && !(vlOriginal.compareTo(zero) == 0)) {
				//IMPLEMENTAÇÃO DO VALOR ATUAL DO ITEM
				BigDecimal vlAtual;
				if (qtNcParcelaSimulacao != null  && !(vlOriginal.compareTo(zero) == 0))
					vlAtual = vlOriginal.multiply(qtNcParcelaSimulacao);
				else{
					vlAtual = zero;
					qtNcParcelaSimulacao = zero;
				}
				resultList.put("vlAtual",vlAtual);
				resultList.put("qtNcParcelaSimulacao",qtNcParcelaSimulacao);
				//IMPLEMENTACAO DO VALOR TOTAL ATUAL DOS ITEMS (SOMATORIA) 
				sumValues(result,"vlTotalAtual",vlAtual);
				BigDecimal vlReajustado = null;
				if (blPercentual.equals("P") && mapView.getBigDecimal("pcReajuste") != null) {
					BigDecimal vlReajuste = mapView.getBigDecimal("pcReajuste").multiply(vlOriginal).divide(new BigDecimal(100),BigDecimal.ROUND_UP).add(vlOriginal);
					resultList.put("vlReajuste",vlReajuste);
					vlReajustado = vlReajuste.multiply(qtNcParcelaSimulacao);
					resultList.put("vlReajustado",vlReajustado);
						
					sumValues(result,"vlTotalReajustado",vlReajustado);
				}else if (blPercentual.equals("V") && mapView.getBigDecimal("vlReajuste") != null) {
					if (vlAtual.compareTo(zero) == 0)
						vlReajustado = zero;
					else
						vlReajustado = mapView.getBigDecimal("vlReajuste").multiply(qtNcParcelaSimulacao);
					
					resultList.put("vlReajustado",vlReajustado);
					resultList.put("pcReajuste",mapView.getBigDecimal("vlReajuste").multiply(new BigDecimal(100)).divide(vlOriginal,BigDecimal.ROUND_UP).subtract(new BigDecimal(100)));
					sumValues(result,"vlTotalReajustado",vlReajustado);
				}else{
					resultList.put("vlReajuste",vlOriginal);
					resultList.put("vlTotalReajustado",zero);
					resultList.put("vlReajustado",zero);
					resultList.put("pcReajuste",zero);
				}
			}else{
				resultList.put("qtNcParcelaSimulacao",zero);
				resultList.put("vlReajustado",vlOriginal);
				resultList.put("pcReajuste",zero);
				resultList.put("vlAtual",zero);
				resultList.put("vlReajuste",zero);
			}
			listParcelas.add(resultList);
		}
		result.put("ncParcelaSimulacao",listParcelas);
    	return result;    	
    }
    
    private void sumValues(TypedFlatMap result,String property, BigDecimal value) {
		if (result.getBigDecimal(property) == null)
			result.put(property,value);
		else
			result.put(property,result.getBigDecimal(property).add(value));

    }
    
    public TypedFlatMap findDataSession() {
    	Filial bean = SessionUtils.getFilialSessao();
    	TypedFlatMap result = new TypedFlatMap();
    	result.put("filial.idFilial",bean.getIdFilial());
    	result.put("filial.sgFilial",bean.getSgFilial());
    	result.put("filial.pessoa.nmFantasia",bean.getPessoa().getNmFantasia());
    	result.put("moeda.dsMoeda",SessionUtils.getMoedaSessao().getSiglaSimbolo());
    	return result;
    }
    
    public Map loadHistoryData(TypedFlatMap parameters) {
    	//Regra 3.3
    	if (parameters.getLong("tipoMeioTransporte.idTipoMeioTransporte") == null ||
    			parameters.getLong("tipoTabelaColetaEntrega.idTipoTabelaColetaEntrega") == null ||
    			parameters.getYearMonthDay("dtEmissaoInicial") == null ||
    			parameters.getYearMonthDay("dtEmissaoFinal") == null ||
    			parameters.getLong("filial.idFilial") == null)
    		throw new BusinessException("LMS-25014");

    	Long idFilial = parameters.getLong("filial.idFilial");
    	YearMonthDay dtVigenciaInicial = parameters.getYearMonthDay("dtEmissaoInicial");
    	YearMonthDay dtVigenciaFinal = parameters.getYearMonthDay("dtEmissaoFinal");
    	Long idTipoMeioTransporte = parameters.getLong("tipoMeioTransporte.idTipoMeioTransporte");
		Long idMeioTransporte = parameters.getLong("meioTransporteRodoviario.idMeioTransporte");
		Long idTipoTabelaColetaEntrega = parameters.getLong("tipoTabelaColetaEntrega.idTipoTabelaColetaEntrega");
		
		return getService().findQtde(idFilial,dtVigenciaInicial,dtVigenciaFinal,idTipoMeioTransporte,idMeioTransporte,idTipoTabelaColetaEntrega);
    }
    
    public TypedFlatMap store(TypedFlatMap parameters) {
    	ParamSimulacaoHistorica bean = new ParamSimulacaoHistorica();
    	
    	bean.setIdParamSimulacaoHistorica(parameters.getLong("idParamSimulacaoHistorica"));
    	bean.setDsParamSimulacaoHistorica(parameters.getString("dsParamSimulacaoHistorica"));
    	bean.setDhCriacao(parameters.getDateTime("dhCriacao"));
    	bean.setDtEmissaoInicial(parameters.getYearMonthDay("dtEmissaoInicial"));
    	bean.setDtEmissaoFinal(parameters.getYearMonthDay("dtEmissaoFinal"));
    	bean.setBlPercentual(convertDmTipoSimulacaoReajusteToBoolean(parameters.getString("blPercentual")));
    	
    	//INNER
    	Filial filial = new Filial();
		   filial.setIdFilial(parameters.getLong("filial.idFilial"));
    	bean.setFilial(filial);
    	
    	//LEFT
		if (parameters.getLong("tipoTabelaColetaEntrega.idTipoTabelaColetaEntrega") != null) {
			TipoTabelaColetaEntrega tipoTabelaColetaEntrega = new TipoTabelaColetaEntrega();
			tipoTabelaColetaEntrega.setIdTipoTabelaColetaEntrega(parameters.getLong("tipoTabelaColetaEntrega.idTipoTabelaColetaEntrega"));
			bean.setTipoTabelaColetaEntrega(tipoTabelaColetaEntrega);
		}

		if (parameters.getLong("tipoMeioTransporte.idTipoMeioTransporte") != null) {
			TipoMeioTransporte tipoMeioTransporte = new TipoMeioTransporte();
			tipoMeioTransporte.setIdTipoMeioTransporte(parameters.getLong("tipoMeioTransporte.idTipoMeioTransporte"));
			bean.setTipoMeioTransporte(tipoMeioTransporte);
		}
		
		if (parameters.getLong("meioTransporteRodoviario.idMeioTransporte") != null) {
			MeioTransporteRodoviario meioTransporteRodoviario = new MeioTransporteRodoviario();
			meioTransporteRodoviario.setIdMeioTransporte(parameters.getLong("meioTransporteRodoviario.idMeioTransporte"));
			bean.setMeioTransporteRodoviario(meioTransporteRodoviario);
		}

    	List parcelas = new ArrayList();
    	int count = 0;
    	for(Iterator i = parameters.getList("ncParcelaSimulacao").iterator(); i.hasNext();) {
    		TypedFlatMap parametersPacela = (TypedFlatMap)i.next();
    		BigDecimal zero = BigDecimal.valueOf(0l);
    		if (parametersPacela.getBigDecimal("vlOriginal") != null &&
    				!(parametersPacela.getBigDecimal("vlOriginal").compareTo(zero) == 0) && 
    				parameters.getString("blPercentual") != null &&
    				(parametersPacela.getBigDecimal("pcReajuste") != null && parameters.getString("blPercentual").equals("P") || 
    				 parametersPacela.getBigDecimal("vlReajuste") != null && parameters.getString("blPercentual").equals("V"))) {
    		
	    		NcParcelaSimulacao ncParcelaSimulacao = new NcParcelaSimulacao();
	    		ncParcelaSimulacao.setQtNcParcelaSimulacao(parametersPacela.getBigDecimal("qtNcParcelaSimulacao"));
	    		ncParcelaSimulacao.setTpParcela(new DomainValue(tpsParcela[count]));
	    		  
	    		ncParcelaSimulacao.setParamSimulacaoHistorica(bean);
	
	    		ncParcelaSimulacao.setVlOriginal(parametersPacela.getBigDecimal("vlOriginal"));
	    		ncParcelaSimulacao.setVlReajustado(parametersPacela.getBigDecimal("vlReajuste").subtract(ncParcelaSimulacao.getVlOriginal()));
	    		
	    		parcelas.add(ncParcelaSimulacao);
    		}
    		count++;
    	}
    	
    	bean.setNcParcelaSimulacoes(parcelas);
		
    	getService().store(bean);
    	
    	TypedFlatMap result = new TypedFlatMap();
    	result.put("idParamSimulacaoHistorica",bean.getIdParamSimulacaoHistorica());
    	result.put("dhCriacao",bean.getDhCriacao());
    	return result;
    }
    
    private Boolean convertDmTipoSimulacaoReajusteToBoolean(String value) {
    	return Boolean.valueOf(value.equals("P"));
    }
	/** 
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	((ParamSimulacaoHistoricaService)defaultService).removeByIds(ids);
    }

    public TypedFlatMap findById(java.lang.Long id) {
    	ParamSimulacaoHistorica bean = getService().findById(id);
    	TypedFlatMap result = new TypedFlatMap();
    	result.put("idParamSimulacaoHistorica",bean.getIdParamSimulacaoHistorica());
    	result.put("dhCriacao",bean.getDhCriacao());
    	result.put("dsParamSimulacaoHistorica",bean.getDsParamSimulacaoHistorica());
    	result.put("blPercentual",((bean.getBlPercentual().booleanValue()) ? "P" : "V"));
    	result.put("dtEmissaoInicial",bean.getDtEmissaoInicial());
    	result.put("dtEmissaoFinal",bean.getDtEmissaoFinal());
    	Filial filial = bean.getFilial();
		result.put("filial.idFilial",filial.getIdFilial());
    	result.put("filial.sgFilial",filial.getSgFilial());
    	result.put("filial.pessoa.nmFantasia",filial.getPessoa().getNmFantasia());
    	
    	if (filial.getMoeda() != null)
    		result.put("moeda.dsMoeda",filial.getMoeda().getSiglaSimbolo());
    	
    	
    	TipoMeioTransporte tipoMeioTransporte = bean.getTipoMeioTransporte();
    	if (tipoMeioTransporte != null) {
    		result.put("tipoMeioTransporte.idTipoMeioTransporte",tipoMeioTransporte.getIdTipoMeioTransporte());
    		result.put("tpMeioTransporte",tipoMeioTransporte.getTpMeioTransporte().getValue());
    		
    	}
    	
    	TipoTabelaColetaEntrega tipoTabelaColetaEntrega = bean.getTipoTabelaColetaEntrega();
    	if (tipoTabelaColetaEntrega != null)
    		result.put("tipoTabelaColetaEntrega.idTipoTabelaColetaEntrega",tipoTabelaColetaEntrega.getIdTipoTabelaColetaEntrega());
    	   	
    	MeioTransporteRodoviario meioTransporteRodoviario = bean.getMeioTransporteRodoviario();
    	if (meioTransporteRodoviario != null) {
    		MeioTransporte meioTransporte = meioTransporteRodoviario.getMeioTransporte();
    		result.put("meioTransporteRodoviario2.idMeioTransporte",meioTransporteRodoviario.getIdMeioTransporte());
    		result.put("meioTransporteRodoviario2.meioTransporte.nrFrota",meioTransporte.getNrFrota());			
    		result.put("meioTransporte.tpVinculo.value",meioTransporte.getTpVinculo().getValue());
	    	result.put("meioTransporteRodoviario.idMeioTransporte",meioTransporteRodoviario.getIdMeioTransporte());
	    	result.put("meioTransporteRodoviario.meioTransporte.nrIdentificador",meioTransporte.getNrIdentificador());
    	}
    	List parcelas = new ArrayList();
    	for (int x = 0; x < tpsParcela.length; x++) {
    		List rs = getService().findNcParcelaSimulacao(bean.getIdParamSimulacaoHistorica(),tpsParcela[x]);
    		TypedFlatMap resultParcelas = new TypedFlatMap();
    		if (rs.size() > 0) { 
    			NcParcelaSimulacao parcela = (NcParcelaSimulacao)rs.get(0);
    			resultParcelas.put("idNcParcelaSimulacao",parcela.getIdNcParcelaSimulacao());
    			if (parcela.getVlReajustado() != null) {
					resultParcelas.put(new StringBuffer((bean.getBlPercentual().booleanValue()) ? "pc" : "vl").append("Reajuste").toString(),
					((bean.getBlPercentual().booleanValue()) ? parcela.getVlReajustado().add(parcela.getVlOriginal()).multiply(BigDecimal.valueOf(100l)).divide(parcela.getVlOriginal(),BigDecimal.ROUND_UP).subtract(BigDecimal.valueOf(100l))
							: parcela.getVlReajustado().add(parcela.getVlOriginal())));
    			}

				resultParcelas.put("vlOriginal",parcela.getVlOriginal());
				resultParcelas.put("qtNcParcelaSimulacao",parcela.getQtNcParcelaSimulacao());
			}
    		parcelas.add(resultParcelas);
    	}
    	result.put("ncParcelaSimulacao",parcelas);
    	return result;
    }
 
    public List findComboTipoTabelaColetaEntrega(TypedFlatMap criteria) {
        return tipoTabelaColetaEntregaService.findByOrder(criteria);
    }

    public List findLookupFilial(Map criteria) {
    	List filiais = filialService.findLookupFilial(criteria);
    	return filiais;
    }
	public List findComboTipoMeioTransporte(Map criteria) {
		if (criteria == null)
			criteria = new HashMap();
		criteria.put("tpMeioTransporte","R");  
		
		List beans = tipoMeioTransporteService.find(criteria);
		List newList = new ArrayList(beans.size());
		
		TipoMeioTransporte bean;
		for (Iterator i = beans.iterator(); i.hasNext();) {
			bean = (TipoMeioTransporte)i.next();
			TypedFlatMap result = new TypedFlatMap();
			result.put("idTipoMeioTransporte",bean.getIdTipoMeioTransporte());
			result.put("dsTipoMeioTransporte",bean.getDsTipoMeioTransporte());
			newList.add(bean);
		}
		return newList;
	}
	
	public List findLookupMeioTransporteRodoviario(Map criteria) {
		return meioTransporteRodoviarioService.findLookup(criteria);
	}
	
	public void setTipoMeioTransporteService(
			TipoMeioTransporteService tipoMeioTransporteService) {
		this.tipoMeioTransporteService = tipoMeioTransporteService;
	}
	public void setTipoTabelaColetaEntregaService(
			TipoTabelaColetaEntregaService tipoTabelaColetaEntregaService) {
		this.tipoTabelaColetaEntregaService = tipoTabelaColetaEntregaService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public void setMeioTransporteRodoviarioService(
			MeioTransporteRodoviarioService meioTransporteRodoviarioService) {
		this.meioTransporteRodoviarioService = meioTransporteRodoviarioService;
	}
}
