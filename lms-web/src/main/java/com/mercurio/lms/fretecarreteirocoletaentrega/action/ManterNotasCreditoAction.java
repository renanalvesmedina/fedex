package com.mercurio.lms.fretecarreteirocoletaentrega.action;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.mercurio.adsm.core.util.Base64Util;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.FindDefinition;
import com.mercurio.adsm.framework.model.PaginatedQuery;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.hibernate.VarcharI18n;
import com.mercurio.adsm.framework.model.pojo.PerfilUsuario;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.model.service.PerfilUsuarioService;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteService;
import com.mercurio.lms.contratacaoveiculos.model.service.ProprietarioService;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.AnexoNotaCredito;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.NotaCredito;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.NotaCreditoParcela;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.service.NotaCreditoService;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.service.TipoTabelaColetaEntregaService;
import com.mercurio.lms.fretecarreteiroviagem.model.service.ReciboFreteCarreteiroService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.session.SessionUtils;
/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.fretecarreteirocoletaentrega.manterNotasCreditoAction"
 */

public class ManterNotasCreditoAction extends CrudAction {
	
	private ProprietarioService proprietarioService;
	private MeioTransporteService meioTransporteService;
	private FilialService filialService;
	private ReciboFreteCarreteiroService reciboFreteCarreteiroService;
	private DomainValueService domainValueService;
	private TipoTabelaColetaEntregaService tipoTabelaColetaEntregaService;
	private NotaCreditoService notaCreditoService;
	private PerfilUsuarioService perfilUsuarioService;
	private ConfiguracoesFacade configuracoesFacade;
	
	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}
	public void setPerfilUsuarioService(PerfilUsuarioService perfilUsuarioService) {
		this.perfilUsuarioService = perfilUsuarioService;
	}
	public void setService(NotaCreditoService serviceService) {
		this.defaultService = serviceService;
	}
	public NotaCreditoService getService() {
		return (NotaCreditoService)this.defaultService;
	}
	
	public List findComboTipoTabelaColetaEntrega(Map criteria) {
		return tipoTabelaColetaEntregaService.findLookup(criteria);
	}
    public void removeById(java.lang.Long id) {
        getService().removeById(id);
    }

    public TypedFlatMap findFilialSession() {
    	Filial  filial  = SessionUtils.getFilialSessao();
    	TypedFlatMap result = new TypedFlatMap();
    				 result.put("filial.idFilial",filial.getIdFilial());
    				 result.put("filial.sgFilial",filial.getSgFilial());
    				 result.put("filial.pessoa.nmFantasia",filial.getPessoa().getNmFantasia());
    	return result;
    }

    public ResultSetPage findPaginated(TypedFlatMap criteria) {
    	ResultSetPage rsp = getService().findPaginated(criteria,FindDefinition.createFindDefinition(criteria));
    	List newList = new ArrayList();
    	for(Iterator i = rsp.getList().iterator(); i.hasNext();) {
    		TypedFlatMap flat = new TypedFlatMap();
    		Object[] projections = (Object[])i.next();
	    	flat.put("notasCreditoParcelas.parcelaTabelaCe.tabelaColetaEntrega.tpRegistro",projections[0]);
	    	flat.put("notasCreditoParcelas.parcelaTabelaCe.tabelaColetaEntrega.tipoTabelaColetaEntrega.dsTipoTabelaColetaEntrega",projections[1]);
	    	flat.put("nrNotaCredito",projections[2]);
	    	flat.put("controleCargas.meioTransporte.nrIdentificador",projections[3]);
	    	flat.put("controleCargas.meioTransporte2.nrFrota",projections[4]);
	    	flat.put("controleCargas.proprietario.pessoa.nrIdentificacao",projections[5]);
	    	flat.put("controleCargas.proprietario.pessoa.tpIdentificacao",projections[6]);
	    	flat.put("controleCargas.proprietario.pessoa.nmPessoa",projections[7]);
	    	flat.put("dhGeracao",projections[8]);
	    	flat.put("dhEmissao",projections[9]);
	    	flat.put("tpSituacaoAprovacao",domainValueService.findDomainValueByValue("DM_SITUACAO_EMISSAO_NC",((projections[9] == null) ? "N" : "E")));
	    	flat.put("idNotaCredito",projections[11]);
	    	flat.put("filial.idFilial",projections[12]);
	    	flat.put("filial.sgFilial",projections[13]);
	    	flat.put("filial.pessoa.nmFantasia",projections[14]);
	    	flat.put("controleCargas.meioTransporte.idMeioTransporte",projections[15]);
	    	flat.put("controleCargas.proprietario.idProprietario",projections[16]);
	    	
	    	flat.put("controleCargas.meioTransporte.modeloMeioTransporte.dsModeloMeioTransporte",projections[17]);
	    	flat.put("controleCargas.meioTransporte.modeloMeioTransporte.marcaMeioTransporte.dsMarcaMeioTransporte",projections[18]);
	    	
    		//Formata identificacao
    		flat.put("controleCargas.proprietario.pessoa.nrIdentificacaoFormatado",FormatUtils.formatIdentificacao(
    				flat.getDomainValue("controleCargas.proprietario.pessoa.tpIdentificacao"),
    				flat.getString("controleCargas.proprietario.pessoa.nrIdentificacao")));
    		//Calcula valor da nota
	    	flat.put("vlNotaCredito",calculeAcrecimos((BigDecimal)projections[24],(BigDecimal)projections[22],(BigDecimal)projections[26], (BigDecimal)projections[23],(BigDecimal)projections[21],getService().executeCalculoVlNota(flat.getLong("idNotaCredito"))));
	    	
    		flat.put("sgMoeda",projections[19]);
    		flat.put("dsSimbolo",projections[20]);
    		
    		if (projections[25] != null) {
    			flat.put("nrRecibo",projections[25]);
    			flat.put("recibo.sgFilial",projections[13]);
    			
    		}
    		newList.add(flat);
    	}
    	rsp.setList(newList);
    	return rsp;
    }
    
    public Integer getRowCount(TypedFlatMap criteria) {
    	return getService().getRowCount(criteria);
    }
	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	getService().removeByIds(ids);
    }

    public TypedFlatMap findById(java.lang.Long id) {
    	List list = getService().findByIdCustom(id);
    	TypedFlatMap result = new TypedFlatMap();
    	Object[] projections = (Object[])list.get(0);
    	result.put("sgFilial",projections[0]);
    	result.put("nmFilial",projections[1]);
    	result.put("idFilial",projections[25]);
    	result.put("filial.idFilial",projections[25]);
    	result.put("nrNotaCredito",projections[2]);
    	result.put("nrFrota",projections[3]);
    	result.put("nrIdentificador",projections[4]);
    	result.put("tpIdentificacaoProprietario",(getDomainValue(projections[6])));
    	result.put("tpPessoa",(getDomainValue(projections[26])));
    	result.put("tpProprietario",(getDomainValue(projections[27])));
    	
    	result.put("idProprietario",projections[22]);
    	result.put("idTabelaColetaEntrega",projections[23]);
    	if (projections[24] != null && projections[0] != null) {
    		result.put("reciboFreteCarreteiro.filial.sgFilial",projections[0]);
    		result.put("reciboFreteCarreteiro.nrReciboFreteCarreteiro",projections[24]);
    	}
    	
    	result.put("nrIdentificacao",FormatUtils.formatIdentificacao(getDomainValue(projections[6]),(String)projections[5]));
    	result.put("nmProprietario",projections[7]);
    	if (projections[8] != null) {
    		result.put("tabela",((DomainValue)projections[8]).getDescription());
    		result.put("tabelaValue",(getDomainValue(projections[8])));
    	}
    	result.put("tpTabela",projections[9]);

    	result.put("moeda",projections[10]);
    	result.put("vlDescontoSugerido",projections[11]);
    	result.put("vlDesconto",projections[12]);
    	result.put("vlAcrescimoSugerido",projections[13]);
    	result.put("vlAcrescimo",projections[14]);
    	if (projections[15] != null){
    		result.put("tpSituacaoAprovacao",((DomainValue)projections[15]).getDescription());
        	result.put("notaCreditoTpSituacao",((DomainValue)projections[15]).getValue());
    	} 	
    	result.put("dhGeracao",projections[16]);
    	result.put("dhEmissao",projections[17]);
    	result.put("obNotaCredito",projections[18]);
    	result.put("idNotaCredito",projections[19]);
    	
    	result.put("idRecibo",projections[20]);
    	
    	if (projections[20] != null && (projections[21] == null || !"CA".equalsIgnoreCase(((DomainValue)projections[21]).getValue())))
    		result.put("behaviorScreen","0");
    	else if (projections[15] == null)
    	   	result.put("behaviorScreen","1");
    	    	
    	result.put("vlDescontoSugerido",projections[11]);
    	result.put("vlDesconto",projections[12]);
    	result.put("vlAcrescimoSugerido",projections[13]);
    	result.put("vlAcrescimo",projections[14]);
    	BigDecimal vlParcelas = getService().executeCalculoVlNota(result.getLong("idNotaCredito"));
    	result.put("vlParcelas",vlParcelas);
    	
    	/*Verifica se o usúario logado possue perfil de acesso PERMITE_ACRESCIMO_RECIBO_PUD*/ 
    	result.put("isDIVOP",getService().permiteAcrescimoReciboPUD(SessionUtils.getUsuarioLogado()));
    	
    	result.put("vlNota",calculeAcrecimos((BigDecimal)projections[14],(BigDecimal)projections[12],(BigDecimal)projections[32],(BigDecimal)projections[13],(BigDecimal)projections[11],vlParcelas));
    	result.put("situacaoNotaCredito",domainValueService.findDomainValueByValue("DM_SITUACAO_EMISSAO_NC",((projections[17] == null) ? "N" : "E")).getDescription().getValue());
    	
    	result.put("controleCarga.nrControleCarga", projections[28]);
    	result.put("controleCarga.filialByIdFilialOrigem.idFilial", projections[29]);
    	result.put("controleCarga.filialByIdFilialOrigem.sgFilial", projections[30]);
    	result.put("controleCarga.filialByIdFilialOrigem.pessoa.nmFantasia", projections[31]);
    	result.put("vlDescUsoEquipamento",projections[32]);
    	result.put("isExibeBtnNotaCredito", isPermissaoBtnNotaCredito());    	
    	
    	if (projections[13] != null || projections[11] != null){
    		result.put("executedWorkFlow", "true");
    	}
    	
    	return result;
    }
    
    private String getDomainValue(Object obj) {
    	if(obj == null) return null;
    	return ((DomainValue) obj).getValue();
    }

    public Map store(TypedFlatMap map) {
    	
    	NotaCredito bean = new NotaCredito();
    	
    	bean.setIdNotaCredito(map.getLong("idNotaCredito"));
    	bean.setVlAcrescimoSugerido(map.getBigDecimal("vlAcrescimoSugerido"));
    	bean.setVlDescontoSugerido(map.getBigDecimal("vlDescontoSugerido"));
    	bean.setTpSituacaoAprovacao(map.getDomainValue("tpSituacaoAprovacao"));
    	bean.setObNotaCredito(map.getString("obNotaCredito"));
    	bean.setNrNotaCredito(map.getLong("nrNotaCredito"));
    	
    	List parcelas = map.getList("Parcelas");
    	
    	List parcelasNew = new ArrayList();
    	BigDecimal sumTot = new BigDecimal(0);
    	if (parcelas != null) {
	    	for(Iterator i = parcelas.iterator(); i.hasNext();) {
	    		TypedFlatMap map2 = (TypedFlatMap)i.next();
	    		NotaCreditoParcela beanP = new NotaCreditoParcela();
	    		beanP.setIdNotaCreditoParcela(map2.getLong("id"));
	    		beanP.setQtNotaCreditoParcela(map2.getBigDecimal("qtde"));
	    		beanP.setVlNotaCreditoParcela(map2.getBigDecimal("vlUnit"));
	    		if (beanP.getQtNotaCreditoParcela() != null && beanP.getVlNotaCreditoParcela() != null) {
	    			sumTot = sumTot.add(beanP.getVlNotaCreditoParcela().multiply(beanP.getQtNotaCreditoParcela()));
	    			parcelasNew.add(beanP);
	    		}
	    	}/*for*/
    	}/*if*/
    	
    	if (parcelasNew.size() > 0){
    		bean.setNotaCreditoParcelas(parcelasNew);
	    	}
    	
    	
    	//Verificado aqui o valor total máximo porque este valor é calculado e não gravado no banco
    	//O calculo do valor total da nota, baseado no controle de carga, é executado com base nos dados gravados no banco.
    	Boolean existeValor = (bean.getVlAcrescimoSugerido() != null || bean.getVlDescontoSugerido() != null);
		Boolean naoAprovado = (bean.getTpSituacaoAprovacao() == null || StringUtils.isBlank(bean.getTpSituacaoAprovacao().getValue()));
		if (existeValor &&  naoAprovado){
			BigDecimal valorNotaCredito = new BigDecimal(sumTot.doubleValue());
			if (bean.getVlAcrescimoSugerido()!=null) {
				valorNotaCredito = valorNotaCredito.add(bean.getVlAcrescimoSugerido());
			}
			if (bean.getVlDescontoSugerido() != null){
				valorNotaCredito = valorNotaCredito.subtract(bean.getVlDescontoSugerido());
			}
			notaCreditoService.validateValorTotalNotaCredito(valorNotaCredito);
		}
    	
    	/*Salva a nota de crédito*/
    	getService().store(bean);
    	
    	TypedFlatMap result = new TypedFlatMap();
    	result.put("vlParcelas",sumTot);
    	result.put("vlNota",calculeAcrecimos(bean.getVlAcrescimo(),bean.getVlDesconto(),bean.getVlDescUsoEquipamento(),bean.getVlAcrescimoSugerido(),bean.getVlDescontoSugerido(),sumTot));
    	
    	if (bean.getVlAcrescimoSugerido() != null || bean.getVlDescontoSugerido() != null){
    		result.put("executedWorkFlow",Boolean.TRUE);
    	}
    	
    	return result;
    }
    
    private BigDecimal calculeAcrecimos(BigDecimal vlAcrescimo, BigDecimal vlDesconto, BigDecimal vlDescUsoEquipamento, BigDecimal vlAcresimoSugerido, BigDecimal vlDescontoSugerido, BigDecimal value) {
    	if (value != null){
    		if (value.compareTo(BigDecimal.ZERO) > 0) {
    			if (vlDescUsoEquipamento != null) {
            		value = value.subtract(vlDescUsoEquipamento);
            	}
            	if (vlAcrescimo != null)
	    			return value.add(vlAcrescimo);
	    		else if (vlDesconto != null) {
	    			return value.subtract(vlDesconto);
	    		}
	    	}
    	} else value = BigDecimal.ZERO;
    	
    	return value;
    }
    
    public List findParcelas(Long idNotaCredito) {
        
    	List newList = new ArrayList();
    	for(Iterator i = getService().findParcelasNotaCredito(idNotaCredito).iterator(); i.hasNext();) {
    		NotaCreditoParcela bean = (NotaCreditoParcela)i.next();
    		TypedFlatMap result = new TypedFlatMap();
    		result.put("qtde",bean.getQtNotaCreditoParcela());
    		result.put("vlUnit",bean.getVlNotaCreditoParcela());
    		result.put("vlTot",bean.getVlNotaCreditoParcela().multiply(bean.getQtNotaCreditoParcela()));
    		
    		boolean isCalculo2 = "C2".equals(bean.getParcelaTabelaCe().getTabelaColetaEntrega().getTpCalculo().getValue());
    		
    		if(isCalculo2){
    			if(bean.getParcelaTabelaCe().getTpParcela().getValue().equals("EV")){
    				bean.getParcelaTabelaCe().getTpParcela().setDescription(new VarcharI18n(getMessage("ctrc")));
    			}if(bean.getParcelaTabelaCe().getTpParcela().getValue().equals("FP")){
    				if(bean.getFaixaPesoParcelaTabelaCE().getTpFator().equals("Documento")){
    					DomainValue domainValue = new DomainValue("FP");
    					domainValue.setDescription(new VarcharI18n(getMessage("freteFaixaPesoDocumento")));
    					bean.getParcelaTabelaCe().setTpParcela(domainValue);    				
    				} else if(bean.getFaixaPesoParcelaTabelaCE().getTpFator().equals("KG")){
    					DomainValue domainValue = new DomainValue("FP");
    					domainValue.setDescription(new VarcharI18n(getMessage("freteFaixaPesoExcedente")));
    					bean.getParcelaTabelaCe().setTpParcela(domainValue);    
    				}    	    				
    			}
    		}
    		    		  
   			result.put("tpParcela",bean.getParcelaTabelaCe().getTpParcela());    	
    		result.put("idNotaCreditoParcela",bean.getIdNotaCreditoParcela());
    		newList.add(result);
    	}
    	
    	/*Ordena a lista conforme solicitação Quest CQPRO00024317*/
    	orderList(newList);
    	
    	return newList;
    }
    
    
    /**
     * Ordena as parcelas de crédito
     * @param newList
     */
	private void orderList(List newList) {
		
		Collections.sort(newList, new java.util.Comparator() {

			public int compare(Object obj1, Object obj2) {

				Map pc1 = (Map) obj1;
				Map pc2 = (Map) obj2;

				DomainValue d1 = (DomainValue) pc1.get("tpParcela");
				DomainValue d2 = (DomainValue) pc2.get("tpParcela");

				if ("QU".equals(d1.getValue()) && "FP".equals(d2.getValue())) {
					return -1;
				} else {
					return d1.getValue().compareTo(d2.getValue());
				}

			}

		});
	}
    
    
    //LOKUPS
    public List findLookupFilial(Map criteria) {
    	return filialService.findLookupFilial(criteria);
    }
    public List findLookupProprietario(Map criteria) {
    	return proprietarioService.findLookup(criteria);
    }
    public List findLookupMeioTransporte(Map criteria) {
    	Map proprietario = (Map)criteria.get("proprietario");
    	Map meioTranspProprietarios = new HashMap();
    	meioTranspProprietarios.put("proprietario",proprietario);
    	criteria.put("meioTranspProprietarios",meioTranspProprietarios);
    	criteria.remove("proprietario");
    	return meioTransporteService.findLookup(criteria);
    }
    public TypedFlatMap calculeValuesGrid(TypedFlatMap grid) {
    	BigDecimal vlParcelas = new BigDecimal(0);
    	BigDecimal vlTot = new BigDecimal(0);
		
    	List parcelas = grid.getList("Parcelas");
    	for(Iterator i = parcelas.iterator(); i.hasNext();) {
    		TypedFlatMap line = (TypedFlatMap)i.next();
    		if (line.getBigDecimal("qtde") != null && line.getBigDecimal("vlUnit") != null) {
    			vlTot = line.getBigDecimal("qtde").multiply(line.getBigDecimal("vlUnit"));
    			line.put("vlTot",vlTot);
    			vlParcelas = vlParcelas.add(vlTot);
    		}
    	}
    	grid.put("vlNota",calculeAcrecimos(grid.getBigDecimal("vlAcrescimo"),grid.getBigDecimal("vlDesconto"), grid.getBigDecimal("vlDescUsoEquipamento"),grid.getBigDecimal("vlAcrescimoSugerido"),grid.getBigDecimal("vlDescontoSugerido"),vlParcelas));
    	grid.put("vlParcelas", vlParcelas);
    	return grid;
    }
    /**
     * findLookup de Recibo.
     * @param criteria
     * @return
     */
    public List findLookupRecibo(TypedFlatMap criteria) {
    	return reciboFreteCarreteiroService.findLookupColetaEntrega(criteria);
    }
    
    /**
     * Verifica se o usuário Logado possui perfil para exibir o botão Controle de Carga
     */
    @SuppressWarnings("unchecked")
    private boolean isPermissaoBtnNotaCredito(){
    	boolean isPermissaoValida = false;
    	String perfilFreteCarrColetaEnt = (String) configuracoesFacade.getValorParametro("DS_PERMISSAO_BTNS_NOTACREDITO_WORKFLOW");
		List<PerfilUsuario> list = perfilUsuarioService.findByIdUsuarioPerfilUsuario(SessionUtils.getUsuarioLogado().getIdUsuario());
    
		for (PerfilUsuario perfilUsuario : list) {
			if ((Long.valueOf(perfilFreteCarrColetaEnt)).equals(perfilUsuario.getPerfil().getIdPerfil())) {
				isPermissaoValida = true;
			}
		}
		
		return isPermissaoValida;
    }
    
    public TypedFlatMap findAnexoNotaCreditoById(TypedFlatMap criteria) {
		AnexoNotaCredito anexoNotaCredito = notaCreditoService.findAnexoNotaCreditoById(criteria.getLong("idAnexoNotaCredito"));
		
		TypedFlatMap map = new TypedFlatMap();
		map.put("idAnexoNotaCredito", anexoNotaCredito.getIdAnexoNotaCredito());
		map.put("dsAnexo", anexoNotaCredito.getDsAnexo());
		map.put("dcArquivo", Base64Util.encode(anexoNotaCredito.getDcArquivo()));
		map.put("idNotaCredito", anexoNotaCredito.getNotaCredito().getIdNotaCredito());
		return map;
	}
	
    @SuppressWarnings({ "rawtypes", "unchecked" })
	public ResultSetPage findPaginatedAnexoNotaCredito(TypedFlatMap criteria) {
    	criteria.put("idNotaCredito", criteria.getLong("idNotaCredito"));
    	return notaCreditoService.findPaginatedAnexoNotaCredito(new PaginatedQuery(criteria));
    }

    public Integer getRowCountAnexoNotaCredito(TypedFlatMap criteria){
    	return notaCreditoService.getRowCountAnexoNotaCredito(criteria);
    }
	
    public Serializable storeAnexoNotaCredito(TypedFlatMap map){
    	return notaCreditoService.storeAnexoNotaCredito(map);
    }
    
    @ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIdsAnexoNotaCredito(List ids){
    	notaCreditoService.removeByIdsAnexoNotaCredito(ids);
    }
    
    public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public void setMeioTransporteService(MeioTransporteService meioTransporteService) {
		this.meioTransporteService = meioTransporteService;
	}
	public void setProprietarioService(ProprietarioService proprietarioService) {
		this.proprietarioService = proprietarioService;
	}
	public void setReciboFreteCarreteiroService(
			ReciboFreteCarreteiroService reciboFreteCarreteiroService) {
		this.reciboFreteCarreteiroService = reciboFreteCarreteiroService;
	}
	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}
	public void setTipoTabelaColetaEntregaService(
			TipoTabelaColetaEntregaService tipoTabelaColetaEntregaService) {
		this.tipoTabelaColetaEntregaService = tipoTabelaColetaEntregaService;
	}
	public void setNotaCreditoService(NotaCreditoService notaCreditoService) {
		this.notaCreditoService = notaCreditoService;
	}

	}
