package com.mercurio.lms.fretecarreteirocoletaentrega.action;

import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.joda.time.YearMonthDay;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.report.ReportExecutionManager;
import com.mercurio.adsm.framework.session.SessionContext;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.contratacaoveiculos.model.Proprietario;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTranspProprietarioService;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteRodoviarioService;
import com.mercurio.lms.contratacaoveiculos.model.service.ProprietarioService;
import com.mercurio.lms.fretecarreteirocoletaentrega.report.EmitirReciboService;
import com.mercurio.lms.fretecarreteiroviagem.model.service.ReciboFreteCarreteiroService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.fretecarreteirocoletaentrega.emitirReciboAction"
 */

public class EmitirReciboAction  {

	private FilialService filialService;
	private MeioTransporteRodoviarioService meioTransporteRodoviarioService;
	private ReciboFreteCarreteiroService reciboFreteCarreteiroService;
	private ProprietarioService proprietarioService;
	private MeioTranspProprietarioService meioTranspProprietarioService;
	private ReportExecutionManager reportExecutionManager;
	private EmitirReciboService emitirReciboService;
	private ConfiguracoesFacade configuracoesFacade;
	
	public void setReportExecutionManager(
			ReportExecutionManager reportExecutionManager) {
		this.reportExecutionManager = reportExecutionManager;
	}

	public void setEmitirReciboService(EmitirReciboService emitirReciboService) {
		this.emitirReciboService = emitirReciboService;
	}
	
	/**
	 * Usado para reemissão
	 * @param parameters
	 * @return
	 * @throws Exception
	 */
	public String execute(TypedFlatMap parameters) throws Exception {
		TypedFlatMap m = reciboFreteCarreteiroService.storeValidateEmissaoRecibo(parameters);
    	
		if (m.isEmpty()) {
			String mensagem = (String)SessionContext.get("LMS_25030_KEY");
			if (StringUtils.isNotBlank(mensagem))
				throw new BusinessException("LMS-25030", new Object[]{mensagem});
			else
				throw new BusinessException("LMS-25051");
		}else{
		
			if(isEmissao(parameters, m)){
				String nrRecibos = m.getString("nrRecibos");
				return "LMS-25134 - " + configuracoesFacade.getMensagem("LMS-25134", new Object[]{nrRecibos});
			}else{
				//é reemissão
		return this.reportExecutionManager.generateReportLocator(emitirReciboService, m);
	}

		}
	}
	
	/**
	 * LMSA-1502: Fluxo de aprovações dos Recibos de Coleta/Entrega
	 * 
	 * @param parameters
	 * @param m
	 * @return
	 * @throws Exception
	 */
	private Boolean isEmissao(TypedFlatMap parameters, TypedFlatMap m) throws Exception {
		Long idRecibo = parameters.getLong("reciboFreteCarreteiro.idReciboFreteCarreteiro");
		YearMonthDay dtEmissaoInicial = parameters.getYearMonthDay("dtEmissaoInicial");
		YearMonthDay dtEmissaoFinal = parameters.getYearMonthDay("dtEmissaoFinal");
		if (idRecibo == null && dtEmissaoInicial == null && dtEmissaoFinal == null) {
			return true;
		}	
		return false;
			
	}
	

	public void validateEmissaoRecibo() {
		String mensagem = (String)SessionContext.get("LMS_25030_KEY");
		SessionContext.remove("LMS_25030_KEY");
		if (StringUtils.isNotBlank(mensagem)) {
			throw new BusinessException("LMS-25030", new Object[]{mensagem});
		}
	}
	
	/**
     * findLookup de filiais.
     * @param criteria
     * @return
     */
    public List findLookupFilial(Map criteria) {
		return filialService.findLookupFilial(criteria);
	}
    
    /**
     * findLookup de Meio de transporte.
     * @param criteria
     * @return
     */
    public List findLookupMeioTransporte(TypedFlatMap criteria) {
    	return meioTransporteRodoviarioService.findLookupCompleteWithProprietario(criteria);
    }
    
    /**
     * findLookup de Proprietário.
     * @param criteria
     * @return
     */
    public List findLookupProprietario(Map criteria) {
    	return proprietarioService.findLookup(criteria);
    }
    
    /**
     * findLookup de Recibo.
     * @param criteria
     * @return
     */
    public List findLookupRecibo(TypedFlatMap criteria) {
		return reciboFreteCarreteiroService.findLookupColetaEntrega(criteria);
    }
    
    /**
     * Retorna para a tela a filial do usuário logado.
     * @return
     */
    public TypedFlatMap findFilialUsuarioLogado() {
    	TypedFlatMap retorno = new TypedFlatMap();
    	
    	Filial f = SessionUtils.getFilialSessao();
    	retorno.put("idFilial",f.getIdFilial());
    	retorno.put("sgFilial",f.getSgFilial());
    	retorno.put("pessoa.nmFantasia",f.getPessoa().getNmFantasia());
    	
    	return retorno;
    }
    
    public TypedFlatMap findProprietarioByMeioTransporte(Long idMeioTransporte) {
    	Proprietario proprietario = meioTranspProprietarioService
    			.findProprietarioByIdMeioTransporte(idMeioTransporte,JTDateTimeUtils.getDataAtual());
    	if (proprietario != null) {
    		Pessoa pessoa = proprietario.getPessoa();
    		TypedFlatMap result = new TypedFlatMap();
    		result.put("proprietario.idProprietario",proprietario.getIdProprietario());
    		result.put("proprietario.pessoa.nmPessoa",pessoa.getNmPessoa());
    		DomainValue tpIdentificacao = pessoa.getTpIdentificacao();
    		if (tpIdentificacao != null) {
    			String nrIdentificacao = FormatUtils.formatIdentificacao(tpIdentificacao,pessoa.getNrIdentificacao());
        		result.put("proprietario.pessoa.nrIdentificacaoFormatado",nrIdentificacao);
        		result.put("proprietario.pessoa.nrIdentificacao",nrIdentificacao);    			
    		}			
    		return result;
    	}
    	return null;
    }
    
    

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public void setMeioTransporteRodoviarioService(
			MeioTransporteRodoviarioService meioTransporteRodoviarioService) {
		this.meioTransporteRodoviarioService = meioTransporteRodoviarioService;
	}

	public void setProprietarioService(ProprietarioService proprietarioService) {
		this.proprietarioService = proprietarioService;
	}

	public void setReciboFreteCarreteiroService(
			ReciboFreteCarreteiroService reciboFreteCarreteiroService) {
		this.reciboFreteCarreteiroService = reciboFreteCarreteiroService;
	}

	public void setMeioTranspProprietarioService(
			MeioTranspProprietarioService meioTranspProprietarioService) {
		this.meioTranspProprietarioService = meioTranspProprietarioService;
	}

	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}

}
