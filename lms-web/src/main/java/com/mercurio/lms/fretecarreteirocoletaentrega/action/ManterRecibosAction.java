package com.mercurio.lms.fretecarreteirocoletaentrega.action;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.report.ReportActionSupport;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.service.AdiantamentoTrechoService;
import com.mercurio.lms.configuracoes.model.AgenciaBancaria;
import com.mercurio.lms.configuracoes.model.Banco;
import com.mercurio.lms.configuracoes.model.ContaBancaria;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.contratacaoveiculos.model.Beneficiario;
import com.mercurio.lms.contratacaoveiculos.model.MeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.PostoConveniado;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteRodoviarioService;
import com.mercurio.lms.contratacaoveiculos.model.service.ProprietarioService;
import com.mercurio.lms.fretecarreteirocoletaentrega.report.EmitirReciboService;
import com.mercurio.lms.fretecarreteiroviagem.model.ReciboFreteCarreteiro;
import com.mercurio.lms.fretecarreteiroviagem.model.service.ReciboFreteCarreteiroService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.fretecarreteirocoletaentrega.manterRecibosAction"
 */

public class ManterRecibosAction extends ReportActionSupport {

	private ReciboFreteCarreteiroService reciboFreteCarreteiroService;
	private FilialService filialService;
	private ProprietarioService proprietarioService;
	private MeioTransporteRodoviarioService meioTransporteRodoviarioService;
	private AdiantamentoTrechoService adiantamentoTrechoService;

    public void setEmitirReciboService(EmitirReciboService service) {
        this.reportServiceSupport = service;
    }

	/**
     * Retorna TypedFlatMap com todos campos para o detalhamento.
     * @param id
     * @return
     */
    public TypedFlatMap findByIdCustom(java.lang.Long id) {
    	ReciboFreteCarreteiro rfc = reciboFreteCarreteiroService.findByIdCustom(id);

    	TypedFlatMap retorno = new TypedFlatMap();
    	
    	retorno.put("idReciboFreteCarreteiro",rfc.getIdReciboFreteCarreteiro());
    	
    	Filial filial = rfc.getFilial();
		retorno.put("filial.idFilial",filial.getIdFilial());
    	retorno.put("filial.sgFilial",filial.getSgFilial());
    	retorno.put("filial.pessoa.nmFantasia",filial.getPessoa().getNmFantasia());
    	
    	ReciboFreteCarreteiro reciboComplementado = rfc.getReciboComplementado();
    	String nrRecibo = FormatUtils.formatLongWithZeros(rfc.getNrReciboFreteCarreteiro(),"0000000000");
    	retorno.put("nrReciboFreteCarreteiro",nrRecibo);
		retorno.put("nrReciboFreteCarreteiro2",
    			nrRecibo + (reciboComplementado != null ? "C" : ""));
    	
    	DomainValue tpSituacaoRecibo = rfc.getTpSituacaoRecibo();
		retorno.put("tpSituacaoRecibo.value",tpSituacaoRecibo.getValue());
    	retorno.put("tpSituacaoRecibo.description",tpSituacaoRecibo.getDescription());
    	
    	retorno.put("blComplementar",Boolean.valueOf(reciboComplementado != null));
    	
    	Pessoa proprietarioPessoa = rfc.getProprietario().getPessoa();
    	retorno.put("proprietario.idProprietario",proprietarioPessoa.getIdPessoa());
    	retorno.put("proprietario.pessoa.nmPessoa",proprietarioPessoa.getNmPessoa());
    	
    	String nrIdentificacaoProprietario = FormatUtils.formatIdentificacao(
    			proprietarioPessoa.getTpIdentificacao(),proprietarioPessoa.getNrIdentificacao());
		retorno.put("proprietario.pessoa.nrIdentificacaoFormatado",nrIdentificacaoProprietario);
    	
		Beneficiario beneficiario = rfc.getBeneficiario();
		Pessoa beneficiarioPessoa = null;
		if (beneficiario != null) {
			beneficiarioPessoa = beneficiario.getPessoa();
		} else {
			PostoConveniado postoConveniado = adiantamentoTrechoService.findPostoConveniadoByIdReciboFreteCarreteiro(rfc.getIdReciboFreteCarreteiro());
			
			if(postoConveniado != null){
				beneficiarioPessoa = postoConveniado.getPessoa();
			}
		}
			
		if (beneficiarioPessoa  != null) {
			retorno.put("beneficiario.idBeneficiario",beneficiarioPessoa.getIdPessoa());
	    	retorno.put("beneficiario.pessoa.nmPessoa",beneficiarioPessoa.getNmPessoa());
	    	
	    	String nrIdentificacaoBeneficiario = FormatUtils.formatIdentificacao(
	    			beneficiarioPessoa.getTpIdentificacao(),beneficiarioPessoa.getNrIdentificacao());
			retorno.put("beneficiario.pessoa.nrIdentificacaoFormatado",nrIdentificacaoBeneficiario);
		}
		
		
		ContaBancaria contaBancaria = rfc.getContaBancaria();
		if (contaBancaria != null) {
			AgenciaBancaria agenciaBancaria = contaBancaria.getAgenciaBancaria();
			Banco banco = agenciaBancaria.getBanco();
			retorno.put("contaBancaria.nrContaBancaria",contaBancaria.getNrContaBancaria());
			retorno.put("contaBancaria.dvContaBancaria",contaBancaria.getDvContaBancaria());
			retorno.put("agenciaBancaria.nrAgenciaBancaria",agenciaBancaria.getNrAgenciaBancaria());
			retorno.put("agenciaBancaria.nrDigito",agenciaBancaria.getNrDigito());
			retorno.put("banco.nrBanco",banco.getNrBanco());
		}
		
    	retorno.put("nrNfCarreteiro",rfc.getNrNfCarreteiro());
    	retorno.put("obReciboFreteCarreteiro",rfc.getObReciboFreteCarreteiro());
    	retorno.put("dhEmissao",rfc.getDhEmissao());
    	retorno.put("dtContabilizacao",rfc.getDtContabilizacao());
    	retorno.put("dtSugeridaPagto",rfc.getDtSugeridaPagto());
    	retorno.put("dtPagtoReal",rfc.getDtPagtoReal());
    	
    	if (rfc.getRelacaoPagamento() != null) {
    		retorno.put("relacaoPagamento.nrRelacaoPagamento",rfc.getRelacaoPagamento().getNrRelacaoPagamento());
    	}	
    	
    	MeioTransporte meioTransporte = rfc.getMeioTransporteRodoviario().getMeioTransporte();
    	retorno.put("meioTransporte.idMeioTransporte",meioTransporte.getIdMeioTransporte());
		retorno.put("meioTransporte.nrFrota",meioTransporte.getNrFrota());
    	retorno.put("meioTransporte.nrIdentificador",meioTransporte.getNrIdentificador());
    	retorno.put("dsMarcaMeioTransporte",meioTransporte.getModeloMeioTransporte().getMarcaMeioTransporte().getDsMarcaMeioTransporte());
    	retorno.put("dsModeloMeioTransporte",meioTransporte.getModeloMeioTransporte().getDsModeloMeioTransporte());
    	
    	retorno.put("moedaPais.moeda.siglaSimbolo",rfc.getMoedaPais().getMoeda().getSiglaSimbolo());
    	
    	retorno.put("vlSalarioContribuicao",rfc.getVlSalarioContribuicao());
    	retorno.put("pcAliquotaInss",rfc.getPcAliquotaInss());
    	retorno.put("vlOutrasFontes",rfc.getVlOutrasFontes());
    	retorno.put("vlApuradoInss",rfc.getVlInss());
    	retorno.put("pcAliquotaIssqn",rfc.getPcAliquotaIssqn());
    	retorno.put("vlIssqn",rfc.getVlIssqn());
    	retorno.put("pcAliquotaIrrf",rfc.getPcAliquotaIrrf());
    	retorno.put("vlIrrf",rfc.getVlIrrf());
    	
    	retorno.put("vlBruto",rfc.getVlBruto());
    	retorno.put("vlPostoPassagem",rfc.getVlPostoPassagem());

    	retorno.put("vlDesconto",rfc.getVlDesconto());
    	retorno.put("vlLiquido",rfc.getVlLiquido());
    	retorno.put("dhGeracaoMovimento",rfc.getDhGeracaoMovimento());
    	
    	return retorno;
    }

    public TypedFlatMap storeCancelarRecibo(TypedFlatMap values) {
        Long idReciboFreteCarreteiro = values.getLong("idReciboFreteCarreteiro");
        List lComplementares = reciboFreteCarreteiroService.findRecibosComplementares(idReciboFreteCarreteiro);
        if (lComplementares.size() > 0)
            throw new BusinessException("LMS-24009");

        ReciboFreteCarreteiro rfc = reciboFreteCarreteiroService.storeCancelarRecibo(idReciboFreteCarreteiro);
        TypedFlatMap retorno = new TypedFlatMap();
        retorno.put("tpSituacaoRecibo.value",rfc.getTpSituacaoRecibo().getValue());
        retorno.put("tpSituacaoRecibo.description",rfc.getTpSituacaoRecibo().getDescription());
        return retorno;
    }

    @Override
    public java.io.File execute(TypedFlatMap parameters) throws Exception {
        Long idRecibo = parameters.getLong("idReciboFreteCarreteiro");
        if (idRecibo == null)
            throw new IllegalArgumentException("O método execute exige um long 'idReciboFreteCarreteiro' nos parametros.");

        TypedFlatMap m = new TypedFlatMap();
        boolean blReemissao = reciboFreteCarreteiroService.storeValidateEmissaoReciboColetaEntrega(idRecibo);
        m.put(idRecibo,new Object[]{Boolean.valueOf(blReemissao)});

        return super.execute(m);
    }
    
    /**
	 * Retorna consulta paginada.
	 * @param criteria
	 * @return
	 */
	public ResultSetPage findPaginatedCustom(TypedFlatMap criteria) {
    	return reciboFreteCarreteiroService.findPaginatedColetaEntrega(criteria);
    }
	
	/**
	 * Retorna total de registros para paginação.
	 * @param criteria
	 * @return
	 */
    public Integer getRowCountCustom(TypedFlatMap criteria) {
    	return reciboFreteCarreteiroService.getRowCountColetaEntrega(criteria);
    }

    /**
     * findLookup de filiais.
     * @param criteria
     * @return
     */
    public List findLookupFilial(Map criteria) {
		return filialService.findLookupFilial(criteria);
	}
    
    /**
     * findLookup de Meio de transporte.
     * @param criteria
     * @return
     */
    public List findLookupMeioTransporte(TypedFlatMap criteria) {
    	return meioTransporteRodoviarioService.findLookupWithProprietario(criteria);
    }
    
    /**
     * findLookup de Proprietário.
     * @param criteria
     * @return
     */
    public List findLookupProprietario(Map criteria) {
    	return proprietarioService.findLookup(criteria);
    }
    
    /**
     * Retorna para a tela a filial do usuário logado.
     * @return
     */
    public TypedFlatMap findFilialUsuarioLogado() {
    	TypedFlatMap retorno = new TypedFlatMap();
    	
    	Filial f = SessionUtils.getFilialSessao();
    	
	    	retorno.put("idFilial",f.getIdFilial());
	    	retorno.put("sgFilial",f.getSgFilial());
	    	retorno.put("pessoa.nmFantasia",f.getPessoa().getNmFantasia());
    	
    	return retorno;
    }
    
    
	public void setReciboFreteCarreteiroService(
			ReciboFreteCarreteiroService reciboFreteCarreteiroService) {
		this.reciboFreteCarreteiroService = reciboFreteCarreteiroService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public void setMeioTransporteRodoviarioService(
			MeioTransporteRodoviarioService meioTransporteRodoviarioService) {
		this.meioTransporteRodoviarioService = meioTransporteRodoviarioService;
	}

	public void setProprietarioService(ProprietarioService proprietarioService) {
		this.proprietarioService = proprietarioService;
	} 
	
	public TypedFlatMap storeCancelarReciboAfterValidation(TypedFlatMap values) {
    	return reciboFreteCarreteiroService.storeCancelarReciboAfterValidation(values);
    }
	
	public Serializable storeCustom(TypedFlatMap values) {
    	return reciboFreteCarreteiroService.storeCustom(values);
    }
	
	public void setAdiantamentoTrechoService(AdiantamentoTrechoService adiantamentoTrechoService) {
		this.adiantamentoTrechoService = adiantamentoTrechoService;
	}
} 
