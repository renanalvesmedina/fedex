package com.mercurio.lms.vendas.report;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;

import org.apache.commons.collections.MapUtils;
import org.springframework.jdbc.core.JdbcTemplate;

import com.mercurio.adsm.framework.model.hibernate.PropertyVarcharI18nProjection;
import com.mercurio.adsm.framework.report.JRReportDataObject;
import com.mercurio.adsm.framework.report.ReportServiceSupport;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.Servico;
import com.mercurio.lms.configuracoes.util.MapUtilsPlus;
import com.mercurio.lms.tabelaprecos.report.EmitirTabelaFreteCiaAereaService;
import com.mercurio.lms.vendas.model.Simulacao;
import com.mercurio.lms.vendas.model.dao.EmitirTabelasClienteDAO;
import com.mercurio.lms.vendas.model.service.EmitirTabelasClientesService;
import com.mercurio.lms.vendas.model.service.TabelasClienteService;
import com.mercurio.lms.vendas.util.EmptyDataSourceByGroups;
     
/**
 * Generated by: ADSM ActionGenerator
 * 
 * ESPECIFICACAO: 30.03.02.27 - Tabela de frete aéreo padrão
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 *    
 */	 
public class EmitirTabelaFreteAereoPadraoService extends ReportServiceSupport {
	private ConfiguracoesFacade configuracoesFacade;
	private EmitirTabelaFreteCiaAereaService emitirTabelaFreteCiaAereaService;
	private EmitirTabelaTaxaCombustivelLandscapeService emitirTabelaTaxaCombustivel;
	private static final String NOME_TABELA = "TMP_CIAAEREAS";	
	private EmitirTabelasClienteDAO emitirTabelasClienteDAO;
	private EmitirTabelasClientesService emitirTabelasClientesService;
	private TabelasClienteService tabelasClienteService;
	

	private String getSqlGroupCount(String groupField){
		return "select count(*) as total from(  " +
				"select count("+groupField+") from TMP_CIAAEREAS group by "+groupField+"  order by "+groupField+" ASC )";
	}
	
	private static final String SQL_SUBTIPO;
	
	static
	{
		StringBuffer sql = new StringBuffer();
		sql.append(" Select STP.TP_SUBTIPO_TABELA_PRECO from tabela_preco tp, subtipo_tabela_preco stp");
		sql.append(" where tp.id_tabela_preco = ?");
		sql.append("       and stp.id_subtipo_tabela_preco = tp.id_subtipo_tabela_preco");
		
		SQL_SUBTIPO = sql.toString();
	}
	
	/**
	 * Consulta do valor aplicado conforme de onde o relatório é chamado.
	 * @param idSimulacao
	 * @return
	 */
	private String getSqlValorAplicado(Long idSimulacao){
		
		StringBuffer sql = new StringBuffer(); 
		if(idSimulacao==null){
			sql.append(" select PC.TP_INDICADOR_FRETE_PESO, PC.VL_FRETE_PESO, ")
			.append(" PC.TP_INDIC_VLR_TBL_ESPECIFICA, VL_TBL_ESPECIFICA, TP_TARIFA_MINIMA, VL_TARIFA_MINIMA ")
			.append(" from ")
			.append(" CLIENTE CC, DIVISAO_CLIENTE  DC, TABELA_DIVISAO_CLIENTE TDC, TABELA_PRECO TP, ")
			.append(" PARAMETRO_CLIENTE PC ")
			.append(" WHERE ")
			.append("   DC.ID_CLIENTE = CC.ID_CLIENTE AND ")
			.append("   TDC.ID_DIVISAO_CLIENTE = DC.ID_DIVISAO_CLIENTE AND ")
			.append("   TDC.ID_TABELA_PRECO = TP.ID_TABELA_PRECO AND ")
			.append("   PC.ID_TABELA_DIVISAO_CLIENTE = TDC.ID_TABELA_DIVISAO_CLIENTE ") 
			.append("   AND DC.ID_DIVISAO_CLIENTE = ? ")
			.append("   AND PC.ID_PARAMETRO_CLIENTE = ? "); 
		}else{
			sql.append(" select PC.TP_INDICADOR_FRETE_PESO, PC.VL_FRETE_PESO, ")
			.append(" PC.TP_INDIC_VLR_TBL_ESPECIFICA, VL_TBL_ESPECIFICA, TP_TARIFA_MINIMA, VL_TARIFA_MINIMA ")
			.append(" from ")
			.append(" PARAMETRO_CLIENTE PC ")
			.append(" WHERE ")
			.append(" PC.ID_PARAMETRO_CLIENTE = ? ");
		}
		
		return sql.toString();
	}

	public JRReportDataObject execute(Map parameters) throws Exception {	
		return null;
	}
		
	public List<Map<String, String>> findDados(TypedFlatMap parameters) {
		JdbcTemplate jdbcTemplate = getJdbcTemplate();
		List<Map<String, String>> result = new ArrayList<Map<String,String>>();		
		Simulacao simulacao  = (Simulacao)MapUtils.getObject(parameters, "simulacao");
		TypedFlatMap parametros = new TypedFlatMap();
		
		if(simulacao == null){
		
			List<Map> data = getEmitirTabelasClienteDAO().findRelatorioFreteAereoPadrao(parameters);
			Long idTabelaDivisao = null;
		
			if(data == null || data.isEmpty()){
				return null;
			}
		
			boolean isFirst = true;
			for (Map map : data) {
				if(isFirst){
					idTabelaDivisao = MapUtils.getLong(map,"idTabelaDivisao");
					isFirst = false;
				}
				parametros = getCommonParameter(map);
				parametros.put("idParametroCliente", MapUtils.getLong(map,"listaParametros"));
				parametros.put("idTabelaDivisao", idTabelaDivisao);
				parametros.put("relatorio", "27");
				parametros.put("isTabelaNova", MapUtils.getBoolean(parameters, "tabelaNova"));
				parametros.put("idAeroportoOrigem", MapUtils.getLong(parameters, "aeroportoOrigem.idAeroporto"));
				parametros.put("nmAeroportoOrigem", MapUtils.getString(parameters, "nmAeroportoOrigem"));
				parametros.put("idAeroportoDestino", MapUtils.getLong(parameters, "aeroportoDestino.idAeroporto"));
				parametros.put("nmAeroportoDestino", MapUtils.getString(parameters, "nmAeroportoDestino"));
				parametros.put("blEmitirSomenteCapitais", MapUtils.getBoolean(parameters, "blEmitirSomenteCapitais"));
				parametros.put("blEmitirEspecifica", MapUtils.getBoolean(parameters, "blEmitirEspecifica"));
				parametros.put("tabelaPreco.idTabelaPreco",  MapUtils.getLong(map, "idTabelaPreco"));
		
		}
		}else{
			parametros.putAll(parameters);
		}
		
		adjustParameters(parameters);
				
		if (parameters.get("idAeroportoDestino")!=null){
			parametros.put("AGRUPAMENTO_DADOS", "D");
		}else{
			parametros.put("AGRUPAMENTO_DADOS", "O");
	}
	
		List<Map<String, String>> precos;
		try {
			precos = emitirTabelaFreteCiaAereaService.findDados(parametros);
		} catch (Exception e) {
			return null;
		}
		
		parameters.putAll(parametros);
		
		Long idTabelaPreco = MapUtils.getLong(parametros,"tipoTabelaPreco.idTabelaPreco", MapUtils.getLongValue(parametros,"tabelaPreco.idTabelaPreco"));
		String dsSimbolo = getTabelasClienteService().getMoeda(idTabelaPreco, jdbcTemplate);

		/* COLETA */
		List coleta = getTabelasClienteService().getSubRelColeta(idTabelaPreco,getJdbcTemplate());
		parameters.put(TabelasClienteService.KEY_PARAMETER_COLETA,  coleta);
		 
		/* ENTREGA */
		List entrega = getTabelasClienteService().getSubRelEntrega(idTabelaPreco,getJdbcTemplate());
		parameters.put(TabelasClienteService.KEY_PARAMETER_ENTREGA, entrega);
		
		String subTipo = (String) jdbcTemplate.queryForObject(SQL_SUBTIPO,new Long[]{idTabelaPreco},String.class);
		parameters.put("SUBTIPO",subTipo);
		   
		/* GENERALIDADES. */
		Long idDivisao = MapUtils.getLong(parameters,"idTabelaDivisao");
		List generalidades = getTabelasClienteService().getSubRelGeneralidadesTabelaPreco(getTabelasClienteService().montaSqlSubGeneralidadesTab(), idTabelaPreco,dsSimbolo,"",0,0,getConfiguracoesFacade(),getJdbcTemplate(),idDivisao);
		parameters.put(TabelasClienteService.KEY_PARAMETER_GENERALIDADES,  generalidades);

		/* LEGENDAS DAS GENERALIDADES. */
		List legendaGeneralidades = getTabelasClienteService().montaPageFooter(generalidades);
		parameters.put(TabelasClienteService.KEY_PARAMETER_LEGENDA_GENERALIDADE, legendaGeneralidades);

		/* FORMALIDADES AEREO */
		List formalidades =  getTabelasClienteService().getFormalidadesAereoNacional(idTabelaPreco, configuracoesFacade, jdbcTemplate);
		parameters.put(TabelasClienteService.KEY_PARAMETER_FORMALIDADES, formalidades);

		/* SERVICOS ADICIONAIS. */
		
		List<Map> generalidadesDificuldadeEntrega = getTabelasClienteService().getGeneralidadesTabelaPrecoDificuldadeEntrega(idTabelaPreco, jdbcTemplate);
		
		parameters.put(TabelasClienteService.KEY_PARAMETER_DIFICULDADE_ENTREGA, generalidadesDificuldadeEntrega);

		List servAdd = getTabelasClienteService().getSubServicosAdicionais(idDivisao,null, null, dsSimbolo,getConfiguracoesFacade(),getJdbcTemplate(),null);
		parameters.put(TabelasClienteService.KEY_PARAMETER_SERVICOSAD, servAdd);
		
		return precos;		
		}
		
	
	private boolean populateTable(List parametros, Long idDivisao, Long idCliente, Map agrup, JdbcTemplate jdbcTemplate, Long idTabelaDivisao, Long idSimulacao) {
		if (parametros != null) {
			String sql = montaSql(parametros, idSimulacao);
			int tamanho = agrup.size();
			
			List listaUFOrigem = new ArrayList();
			List listaUFDestino = new ArrayList();
			
		    List registros =  new ArrayList();
		    if(idSimulacao==null){
		    	registros = jdbcTemplate.queryForList(sql, new Long[]{idCliente,idDivisao,idTabelaDivisao});
		    }else{
		    	registros = jdbcTemplate.queryForList(sql, new Long[]{idCliente,idDivisao});
	}
	
		    if(registros.isEmpty()) return false;
		    
		    Map dados = null;
			String origem = null, destino = null, grupo = null, ufOrigem = null, ufDestino = null, mOrigem = null, mDestino = null;
			Long idParametro = null;
			BigDecimal idAeroportoOrigem = null, idMunicipioOrigem = null, idFilialOrigem = null, idTipoLocMunicipioOrigem = null, idGrupoOrigem = null, idGrupoDestino = null;
			BigDecimal idAeroportoDestino = null, idMunicipioDestino = null, idFilialDestino = null, idTipoLocMunicipioDestino = null;
			BigDecimal taxaMinima = null, pesoMinimo = null, excedenteKg = null;
		    
			
			String msgTodoEstado = configuracoesFacade.getMensagem("todoEstado");
			String msgDemaisLocalidades = configuracoesFacade.getMensagem("demaisLocalidades");
			    
		    for (Iterator iter = registros.iterator(); iter.hasNext();)
		    {
				dados = (Map) iter.next();
				StringBuffer sqlInsert = new StringBuffer();
				idParametro = Long.valueOf(dados.get("ID_PARAMETRO_CLIENTE").toString());
				
				grupo = getTabelasClienteService().getGrupo(idParametro, agrup, tamanho);
				
				if (dados.get("UF_ORIGEM")== null || dados.get("UF_DESTINO") == null) continue;
				ufOrigem  = dados.get("UF_ORIGEM").toString();
				ufDestino = dados.get("UF_DESTINO").toString();

				taxaMinima  = (BigDecimal) dados.get("TAXA_MINIMA");
				pesoMinimo  = (BigDecimal) dados.get("PESO_MINIMO");
				excedenteKg = (BigDecimal) dados.get("EXCEDENTEKG");

				idAeroportoOrigem 		  = (BigDecimal) dados.get("ID_AEROPORTO_ORIGEM");
				idMunicipioOrigem 		  = (BigDecimal) dados.get("ID_MUNICIPIO_ORIGEM");
				idFilialOrigem			  = (BigDecimal) dados.get("ID_FILIAL_ORIGEM");
				idTipoLocMunicipioOrigem  = (BigDecimal) dados.get("ID_TIPO_LOC_MUNICIPIO_ORIGEM");
				idGrupoOrigem  			  = (BigDecimal) dados.get("ID_GRUPO_REGIAO_ORIGEM");
				
				idAeroportoDestino		  = (BigDecimal) dados.get("ID_AEROPORTO_DESTINO");
				idMunicipioDestino 		  = (BigDecimal) dados.get("ID_MUNICIPIO_DESTINO");
				idFilialDestino			  = (BigDecimal) dados.get("ID_FILIAL_DESTINO");
				idTipoLocMunicipioDestino = (BigDecimal) dados.get("ID_TIPO_LOC_MUNICIPIO_DESTINO");
				idGrupoDestino 			  = (BigDecimal) dados.get("ID_GRUPO_REGIAO_DESTINO");
				
				//obtencao da origem e destino
				StringBuffer sqlAeroporto = new StringBuffer("");
				sqlAeroporto.append("select A.SG_AEROPORTO AS SG_AEROPORTO from PESSOA P, AEROPORTO A, FILIAL F ");
				sqlAeroporto.append("where A.ID_AEROPORTO = ?"); // aeroporto origem do param do cliente
				sqlAeroporto.append(" and A.ID_FILIAL_RESPONSAVEL = F.ID_FILIAL");
				sqlAeroporto.append(" and F.ID_FILIAL = P.ID_PESSOA");
				
				StringBuffer sqlMunicipio = new StringBuffer("");
				sqlMunicipio.append("select M.NM_MUNICIPIO from MUNICIPIO M where M.ID_MUNICIPIO = ?");
				
				StringBuffer sqlFilial = new StringBuffer("");
				sqlFilial.append("select F.SG_FILIAL from FILIAL F where F.ID_FILIAL = ?");
				
				StringBuffer sqlTipoLocMunicipio = new StringBuffer("");
				sqlTipoLocMunicipio.append("select ").append(PropertyVarcharI18nProjection.createProjection("T.DS_TIPO_LOCAL_MUNICIPIO_I", "DS_TIPO_LOCALIZACAO_MUNICIPIO"))
				.append(" from TIPO_LOCALIZACAO_MUNICIPIO T").append(" where T.ID_TIPO_LOCALIZACAO_MUNICIPIO = ?");				
				 
				StringBuffer sqlGrupo = new StringBuffer("");
				sqlFilial.append("select GR.DS_GRUPO_REGIAO from GRUPO_REGIAO GR where GR.ID_GRUPO_REGIAO = ?");
				 
				//origem
				mOrigem = null;
				if(idAeroportoOrigem != null)
				{
					List listaOrigem = jdbcTemplate.queryForList(sqlAeroporto.toString(), new BigDecimal[]{idAeroportoOrigem});
					Map  mapOrigem   = listaOrigem.isEmpty() ? new HashMap() : (Map)listaOrigem.get(0);
					mOrigem = MapUtils.getString(mapOrigem,"SG_AEROPORTO");
				}
				else if(idAeroportoOrigem == null && idMunicipioOrigem != null){
					List listaOrigem = jdbcTemplate.queryForList(sqlMunicipio.toString(), new BigDecimal[]{idMunicipioOrigem});
					Map  mapOrigem   = listaOrigem.isEmpty() ? new HashMap() : (Map)listaOrigem.get(0);
					mOrigem = MapUtils.getString(mapOrigem,"NM_MUNICIPIO");
				}
				else if(idAeroportoOrigem == null && idMunicipioOrigem == null && idFilialOrigem != null){
					List listaOrigem = jdbcTemplate.queryForList(sqlFilial.toString(), new BigDecimal[]{idFilialOrigem});
					Map  mapOrigem   = listaOrigem.isEmpty() ? new HashMap() : (Map)listaOrigem.get(0);
					mOrigem = MapUtils.getString(mapOrigem,"SG_FILIAL");
				}
				else if (idAeroportoOrigem == null && idMunicipioOrigem == null && idFilialOrigem == null
						&& idTipoLocMunicipioOrigem != null){
					List listaOrigem = jdbcTemplate.queryForList(sqlTipoLocMunicipio.toString(), new BigDecimal[]{idTipoLocMunicipioOrigem});
					Map  mapOrigem   = listaOrigem.isEmpty() ? new HashMap() : (Map)listaOrigem.get(0);
					mOrigem = MapUtils.getString(mapOrigem,"DS_TIPO_LOCALIZACAO_MUNICIPIO");
				}			
				else if (idMunicipioOrigem == null && idFilialOrigem == null && idTipoLocMunicipioOrigem == null && idGrupoOrigem != null){
					List listaOrigem = jdbcTemplate.queryForList(sqlGrupo.toString(), new BigDecimal[]{idGrupoOrigem});
					Map  mapOrigem   = listaOrigem.isEmpty() ? new HashMap() : (Map)listaOrigem.get(0);
					mOrigem = MapUtils.getString(mapOrigem,"DS_GRUPO_REGIAO");
				}			

				//destino
				mDestino = null;
				if(idAeroportoDestino != null){
					
					List listaDestino = jdbcTemplate.queryForList(sqlAeroporto.toString(), new BigDecimal[]{idAeroportoDestino});
					Map  mapDestino   = listaDestino.isEmpty() ? new HashMap() : (Map)listaDestino.get(0);
					mDestino = MapUtils.getString(mapDestino,"SG_AEROPORTO");
				}
				else if (idAeroportoDestino == null && idMunicipioDestino != null){
					
					List listaDestino = jdbcTemplate.queryForList(sqlMunicipio.toString(), new BigDecimal[]{idMunicipioDestino});
					Map  mapDestino   = listaDestino.isEmpty() ? new HashMap() : (Map)listaDestino.get(0);
					mDestino = MapUtils.getString(mapDestino,"NM_MUNICIPIO");
				}
				else if(idAeroportoDestino  == null && idMunicipioDestino == null && idFilialDestino != null){
					
					List listaDestino = jdbcTemplate.queryForList(sqlFilial.toString(), new BigDecimal[]{idFilialDestino});
					Map  mapDestino   = listaDestino.isEmpty() ? new HashMap() : (Map)listaDestino.get(0);
					mDestino = MapUtils.getString(mapDestino,"SG_FILIAL");
				}
				else if(idAeroportoDestino  == null && idMunicipioDestino == null && idFilialDestino == null 
						&& idTipoLocMunicipioDestino != null){				
					
					List listaDestino = jdbcTemplate.queryForList(sqlTipoLocMunicipio.toString(), new BigDecimal[]{idTipoLocMunicipioDestino});
					Map  mapDestino   = listaDestino.isEmpty() ? new HashMap() : (Map)listaDestino.get(0);
					mDestino = MapUtils.getString(mapDestino,"DS_TIPO_LOCALIZACAO_MUNICIPIO");
					
				}
				else if (idMunicipioDestino == null && idFilialDestino == null && idTipoLocMunicipioDestino == null && idGrupoDestino != null){
					List listaOrigem = jdbcTemplate.queryForList(sqlGrupo.toString(), new BigDecimal[]{idGrupoDestino});
					Map  mapOrigem   = listaOrigem.isEmpty() ? new HashMap() : (Map)listaOrigem.get(0);
					mOrigem = MapUtils.getString(mapOrigem,"DS_GRUPO_REGIAO");
				}					
				
				
				//Concatena o uf da origem e do destino com "-" para ser usado no metodo verificaComplemento
				String ufOrigemDestino = ufOrigem+"-"+ufDestino;
				mOrigem 	= getTabelasClienteService().verificaComplemento(listaUFOrigem, msgTodoEstado, msgDemaisLocalidades, ufOrigemDestino, mOrigem);
				mDestino 	= getTabelasClienteService().verificaComplemento(listaUFDestino, msgTodoEstado, msgDemaisLocalidades, ufOrigemDestino, mDestino);
				
				
				origem  = mOrigem  != null ? ufOrigem + " - " + mOrigem : ufOrigem;
				destino = mDestino != null ? ufDestino + " - " + mDestino : ufDestino;
				
				
				//salva registro na tabela temporaria
				sqlInsert.append("INSERT INTO " + NOME_TABELA + " (ID_PARAMETRO_CLIENTE, TAXAMINIMA, PESOMINIMO, EXCEDENTE,");
				sqlInsert.append(" ORIGEM, DESTINO, GRUPO) VALUES(?,?,?,?,?,?,?)");
	
				jdbcTemplate.update(sqlInsert.toString(), new Object[]{idParametro, taxaMinima, pesoMinimo, excedenteKg, origem, destino, grupo});
			}
		    
		    getTabelasClienteService().verificaUfs(listaUFOrigem,"ORIGEM",NOME_TABELA,msgTodoEstado,msgDemaisLocalidades,jdbcTemplate);
		    getTabelasClienteService().verificaUfs(listaUFDestino,"DESTINO",NOME_TABELA,msgTodoEstado,msgDemaisLocalidades,jdbcTemplate);

		}
		return true;
	}
	
	private String montaSql(List parametros, Long idSimulacao) {
		StringBuffer sql = new StringBuffer();

		sql.append("SELECT DISTINCT ")
	 	  .append("PC.ID_PARAMETRO_CLIENTE,")
	 	  .append("TP.ID_TABELA_PRECO,")
          .append("UF_ORIGEM.SG_UNIDADE_FEDERATIVA as UF_ORIGEM,")
          .append("UF_DESTINO.SG_UNIDADE_FEDERATIVA as UF_DESTINO,")
          
	 	  .append("PC.VL_MINIMO_FRETE_QUILO as TAXA_MINIMA,")
	 	  .append("PC.VL_MIN_FRETE_PESO as PESO_MINIMO,")
	 	  .append("PC.VL_FRETE_PESO as EXCEDENTEKG,")
	 	  
	 	  .append("PC.ID_AEROPORTO_ORIGEM,")
	 	  .append("PC.ID_MUNICIPIO_ORIGEM,")
	 	  .append("PC.ID_FILIAL_ORIGEM,")
	 	  .append("PC.ID_TIPO_LOC_MUNICIPIO_ORIGEM,")
	 	  .append("PC.ID_AEROPORTO_DESTINO,")
	 	  .append("PC.ID_MUNICIPIO_DESTINO,")
	 	  .append("PC.ID_FILIAL_DESTINO,")
	 	  .append("PC.ID_TIPO_LOC_MUNICIPIO_DESTINO, ")
		  .append("PC.ID_GRUPO_REGIAO_ORIGEM, ")
		  .append("PC.ID_GRUPO_REGIAO_DESTINO ")
	 	  
	 	  .append(" FROM CLIENTE C,")
	 	  .append("DIVISAO_CLIENTE DC,")
	 	  .append("TABELA_DIVISAO_CLIENTE TDC,")
	 	  .append("TABELA_PRECO TP,")
	 	  .append("PARAMETRO_CLIENTE PC,")
	 	  .append("UNIDADE_FEDERATIVA UF_ORIGEM,")
	 	  .append("UNIDADE_FEDERATIVA UF_DESTINO")

	 	  .append(" WHERE C.ID_CLIENTE = DC.ID_CLIENTE")
	      .append(" AND DC.ID_DIVISAO_CLIENTE = TDC.ID_DIVISAO_CLIENTE");
		  if(idSimulacao == null){
			  sql.append(" AND TDC.ID_TABELA_DIVISAO_CLIENTE = PC.ID_TABELA_DIVISAO_CLIENTE");
		  }
	      
	      sql.append(" AND TDC.ID_TABELA_PRECO = TP.ID_TABELA_PRECO")
	      .append(" AND PC.ID_UF_ORIGEM = UF_ORIGEM.ID_UNIDADE_FEDERATIVA")
	      .append(" AND PC.ID_UF_DESTINO = UF_DESTINO.ID_UNIDADE_FEDERATIVA")
		  
	      .append(" AND C.ID_CLIENTE = ? AND DC.ID_DIVISAO_CLIENTE = ?");
	      if(idSimulacao == null){
	    	  sql.append(" AND TDC.ID_TABELA_DIVISAO_CLIENTE = ?");
	      }else{
	    	  sql.append(" AND PC.ID_SIMULACAO = ").append(idSimulacao.longValue());
	      }

		StringBuffer idsParamCliente = new StringBuffer("");
		boolean primeiro = true;
		for (Iterator iter = parametros.iterator(); iter.hasNext();) {
			Long pc = (Long) iter.next();
			if (!primeiro)
				idsParamCliente.append(",");
			else
				primeiro = false;

			idsParamCliente.append(pc);
		}
		if (!idsParamCliente.toString().equalsIgnoreCase(""))
			sql.append(" AND PC.ID_PARAMETRO_CLIENTE in (").append(idsParamCliente).append(")");

		sql.append("order by UF_ORIGEM.SG_UNIDADE_FEDERATIVA, UF_DESTINO.SG_UNIDADE_FEDERATIVA ");

		return sql.toString();
	}

	private void adjustParameters(Map parameters){
		transformKey(parameters, "aeroportoOrigem.idAeroporto", "idAeroportoOrigem");
		transformKey(parameters, "aeroportoDestino.idAeroporto", "idAeroportoDestino");
	}
	
	private void transformKey(Map map, String oldKey, String newKey){
		Object value = map.get(oldKey);
		if(value != null){
			map.put(newKey, value);
			map.remove(oldKey);
		}
	}
	
	/**
	 * Montagem dos parametros passados para o relatorio
	 * @param parameters
	 * @param totais
	 * @param crosstab
	 * @return
	 */
	private Map montaParametersReport(Map parameters,int[] totais, Set crosstab)
	{	
		
		Long idCliente     = MapUtilsPlus.getLong(parameters,"idCliente",null);
		Long idDivisao     = MapUtilsPlus.getLong(parameters,"idDivisao",null); 
		Long idTabelaDivisao = MapUtilsPlus.getLong(parameters,"idTabelaDivisao",null); 
		Long idParametro   = MapUtilsPlus.getLong(parameters,"listaParametros",MapUtilsPlus.getLong(parameters,"idParametroCliente"));
		Long idTabelaPreco = MapUtilsPlus.getLong(parameters,"idTabelaPreco",null);
		Boolean isTabelaNova = MapUtils.getBoolean(parameters, "isTabelaNova", false);
		
		Simulacao simulacao  = (Simulacao)MapUtils.getObject(parameters, "simulacao");
		Long idSimulacao   = MapUtilsPlus.getLong(parameters,"idSimulacao",null);
		
		List generalidades = null, formalidadesAereo = null, listaServicosContr = null, listaServicosAdicionais = null,
			coletaCliente = null, entregaCliente = null, listTaxTerrestre = null, listTaxCombustivel = null, 
			aereo = null, legendas = null;
		
		int totGrupos;
		
		//Define se vai agrupar por origem ou destino
		if (MapUtils.getLong(parameters, "idAeroportoDestino")!=null){
			parameters.put("AGRUPAMENTO_DADOS", "D");
			totGrupos  = getJdbcTemplate().queryForInt(getSqlGroupCount("DESTINO"));
		}else{
			parameters.put("AGRUPAMENTO_DADOS", "O");
			totGrupos  = getJdbcTemplate().queryForInt(getSqlGroupCount("ORIGEM"));
		}

		/* CheckBox "Emite Específica" na tela Emitir Tabelas Clientes
		 * 
		 * Aqui será necessário  o uso de dois parametros (um para ocultar as colunas da tabela específica 
		 * e outro para as taxas de Frete Peso) porque o recurso de ocultar as colunas nao estará disponível 
		 * impressão da proposta
		 *   
		 * */
		Boolean paramEmitirEspecifica = MapUtils.getBoolean(parameters, "blEmitirEspecifica");
		Boolean emiteEspecifica = Boolean.TRUE;
		Boolean emiteFretePeso = Boolean.TRUE;
		//Caso haja o checkBox, vai emitir ou a específica ou a frete peso
		if(paramEmitirEspecifica!=null){
			emiteEspecifica = paramEmitirEspecifica;
			emiteFretePeso = Boolean.valueOf(!paramEmitirEspecifica.booleanValue());
		}
		parameters.put("EMITE_ESPECIFICA", emiteEspecifica);
		parameters.put("EMITE_FRETE_PESO", emiteFretePeso);
		
		if (totGrupos!=0)
		{
			
			JdbcTemplate jdbcTemplate = getJdbcTemplate();
			
			String moeda = getTabelasClienteService().getMoeda(idTabelaPreco,getJdbcTemplate());
			
			/* busca e adiciona o subrelatório de: generalidades. */
			generalidades = getTabelasClienteService().getSubRelGeneralidades(idParametro,idTabelaPreco,isTabelaNova,moeda,getConfiguracoesFacade(),jdbcTemplate,idDivisao);
			parameters.put(TabelasClienteService.KEY_PARAMETER_GENERALIDADES,generalidades);
			
			List<Map> generalidadesDificuldadeEntrega = getTabelasClienteService().getDificuldadeEntrega(idParametro, idTabelaPreco, isTabelaNova, jdbcTemplate);
			
//			/* busca e adiciona o subrelatorio de: Serviços Adicionais Contratados. */
//			listaServicosContr = tabelasClienteServer.getSubServicoAdicionalContratado(idTabelaPreco,idDivisao,idSimulacao,moeda,configuracoesFacade,jdbcTemplate);
//			parameters.put(TabelasClienteUtil.KEY_PARAMETER_SERVICOSCONTRATADOS, listaServicosContr);			
			
			/* busca e adiciona o subrelatório de: Serviços Adicionais Não Contratados.  */
			
			listaServicosAdicionais = getTabelasClienteService().getSubServicosAdicionais(idDivisao,null, null,moeda,configuracoesFacade,jdbcTemplate,null);
			parameters.put(TabelasClienteService.KEY_PARAMETER_SERVICOSADICIONAIS, listaServicosAdicionais);
			
			/* busca e adiciona o subrelatório: aereo */
			aereo = getTabelasClienteService().getSubRelAereo(jdbcTemplate);
			parameters.put(TabelasClienteService.KEY_PARAMETER_AEREO,aereo);
			
			/* busca de adiciona o subrelatório de: legendas */
			legendas = getTabelasClienteService().getSubRelLegendas(jdbcTemplate);
			parameters.put(TabelasClienteService.KEY_PARAMETER_LEGENDAS,legendas);
			
			/* busca e adiciona o subrelatório de: Coleta cliente */
			coletaCliente = getTabelasClienteService().getSubRelColetaCliente(idTabelaPreco,idParametro,jdbcTemplate);
			parameters.put(TabelasClienteService.KEY_PARAMETER_COLETA,coletaCliente);
			
			/* busca e adiciona o subrelatório de: Entrega Cliente */
			entregaCliente = getTabelasClienteService().getSubRelEntregaCliente(idTabelaPreco,idParametro,getJdbcTemplate());
			parameters.put(TabelasClienteService.KEY_PARAMETER_ENTREGA,entregaCliente);
			
			//TAXA TERRESTRE
			listTaxTerrestre = getTabelasClienteService().getSubRelTaxaTerrestre(idTabelaPreco, idParametro, getJdbcTemplate());
			if(listTaxTerrestre != null && !listTaxTerrestre.isEmpty())
				parameters.put(TabelasClienteService.KEY_PARAMETER_TAXA_TERRESTRE,  listTaxTerrestre);

			//TAXA COMBUSTIVEL
			Map mapTaxCombustivel = getTabelasClienteService().getSubRelTaxaCombustivel(idTabelaPreco, idParametro, getJdbcTemplate());
			listTaxCombustivel = (List)mapTaxCombustivel.get("RESULT");
			Set subCrossTab         = (Set)mapTaxCombustivel.get("SUBCROSSTAB");
			if(listTaxCombustivel !=null && !listTaxCombustivel.isEmpty())
			{
				List listColumn = new ArrayList();
				listColumn.addAll(subCrossTab);
				String nomeSubRel = TabelasClienteService.PATH_TABELAPRECOS + "report/subReportTaxaCombustivel_Landscape_ct_" + subCrossTab.size() + ".jasper";
				
				parameters.put("SUBREPORTTAXACOMBUSTIVEL_PATH", nomeSubRel);
				parameters.put(TabelasClienteService.KEY_PARAMETER_TAXA_COMBUSTIVEL,  listTaxCombustivel);
				for(int i=0; i<subCrossTab.size();i++)
				{
					mapTaxCombustivel.put("COLUMN"+(i+1), listColumn.get(i));
				}
				emitirTabelaTaxaCombustivel.setMapParameters(mapTaxCombustivel);
				parameters.put("SERVICE_TX_COMB", emitirTabelaTaxaCombustivel);
			}
			
			/* busca e adiciona o subrelaório de: formalidades aereo */
			formalidadesAereo = null;
			String servico = null;
			if(idSimulacao != null){
				formalidadesAereo = getTabelasClienteService().getFormalidadesPropostaAereoNacional(idTabelaPreco, idCliente, idDivisao, null,idSimulacao,configuracoesFacade, getJdbcTemplate());
				
				Servico serv = simulacao.getServico();
				Map mapTipoServico = getTabelasClienteService().getTipoServicoByServico(serv.getIdServico(), getJdbcTemplate());
				servico = MapUtils.getString(mapTipoServico,"DS_TIPO_SERVICO");
			}else{
				formalidadesAereo = getTabelasClienteService().getFormalidadesClienteAereoNacional(idTabelaPreco, idCliente, idDivisao, idParametro,configuracoesFacade, getJdbcTemplate());
				
				servico = getTabelasClienteService().getTipoServico(idTabelaDivisao, getJdbcTemplate());
			}
			parameters.put(TabelasClienteService.KEY_PARAMETER_FORMALIDADES_AEREO,formalidadesAereo);
			parameters.put("SERVICO", servico);

			parameters.put(TabelasClienteService.KEY_PARAMETER_PAGEFOOTER,new JRMapCollectionDataSource(getTabelasClienteService().montaPageFooter(generalidades)));
			
			int totRegistros = jdbcTemplate.queryForInt("Select COUNT(*) from " + NOME_TABELA);
			
			List listaHeader = (List)  getTabelasClienteService().montaHeader(parameters, getJdbcTemplate(),TabelasClienteService.RETORNO_LIST);
			parameters.put("HEADER", listaHeader);
			
			Iterator it = crosstab.iterator();
			int i=1;
			while(it.hasNext())
			{			
				parameters.put("PCOLUMN" + i,it.next().toString());
				i++;
			}	
			
			getTabelasClienteService().montaLogoMercurio(parameters,getJdbcTemplate());
		}
		
		int tamSubReports = (coletaCliente==null?0:coletaCliente.size()) +
		(entregaCliente==null?0:entregaCliente.size()) +
		(aereo==null?0:aereo.size()) +
		(legendas==null?0:legendas.size())+
		(listTaxTerrestre==null?0:listTaxTerrestre.size()) +
		(listTaxCombustivel==null?0:listTaxCombustivel.size()) +
		Math.max((formalidadesAereo==null?0:formalidadesAereo.size()), (generalidades==null?0:generalidades.size())) +
		(listaServicosContr==null?0:listaServicosContr.size()) +
		(listaServicosAdicionais==null?0:listaServicosAdicionais.size());
		parameters.put("SIZE_SUBREPORTS", (tamSubReports));
		
		/*
		 * 	int totRegistrosPorPagina,
			int totDeducoesPrimeiraPagina,
			int totalRegistros,
			int totDeducoesPorPagina,
			int reserverdSpaceSubreport,
			Map parametersReport
		 */
		
		int dataCount = getJdbcTemplate().queryForInt("SELECT COUNT(*) FROM " + NOME_TABELA);
		parameters.put("TOTAL", Integer.valueOf(dataCount));       	
		//tabelasClienteService.setEspacoQuebra(15,12,dataCount,8,0,parameters);
		//tabelasClienteService.setEspacoQuebra(35,8,dataCount,4,0,parameters);
		//tabelasClienteService.setEspacoQuebra(29,8,dataCount,4,0,parameters);
		getTabelasClienteService().setEspacoQuebra(29,8,dataCount,4,8,parameters);
		
		/* numero de colunas da cross-tab[obrigatorio-adsm] */
		parameters.put(ReportServiceSupport.CT_NUMBER_OF_COLS,new Integer[]{Integer.valueOf(totais[0]),Integer.valueOf(totais[1])});
		
		/* srcBlank para o subreport da tabeladeprecos abrir. */
		parameters.put("srcBlank",new EmptyDataSourceByGroups());
		
		return parameters;
	}	
	
	private void atualizaTempTable(Map parameters,int totais[])
	{					
			
		Map dados = getValorAplicado(
				MapUtilsPlus.getLong(parameters,"idParametroCliente",null),
				MapUtilsPlus.getLong(parameters,"idDivisao",null),
				MapUtilsPlus.getLong(parameters,"idSimulacao",null)
									 );
		
		if (dados!=null && dados.size()>=1)
		{
			StringBuffer updateVl = new StringBuffer();
			StringBuffer updateTe = new StringBuffer();	
			StringBuffer updateTarMin = new StringBuffer();
			
			int total0 = totais[0];
			
			gerPorcentagem("VL_PESO_TIPO","VL_PESO",dados,updateVl,total0,1);
			gerPorcentagem("VL_TBL_TIPO","VL_TBL",dados,updateTe,totais[1],++total0);		

			//TARIFA MINIMA
			if (MapUtilsPlus.getString(dados,"VL_TARMIN_TIPO","").equalsIgnoreCase("A")){
				Long valorParam = MapUtilsPlus.getLong(dados, "VL_TARMIN");
				if(valorParam != null && valorParam.longValue()!=0)
				{
					updateTarMin.append("TAXA_MINIMA = TAXA_MINIMA + TAXA_MINIMA * (").append(valorParam)
					.append("/100)");
				}
			}
			else if (MapUtilsPlus.getString(dados,"VL_TARMIN_TIPO","").equalsIgnoreCase("D")){
				Long valorParam = MapUtilsPlus.getLong(dados, "VL_TARMIN");
				if(valorParam != null && valorParam.longValue()!=0)
				{
					updateTarMin.append("TAXA_MINIMA = TAXA_MINIMA - TAXA_MINIMA * (").append(valorParam)
					.append("/100)");
				}
			}

			StringBuffer sqlUpdate = new StringBuffer("update " + EmitirTabelaFreteCiaAereaService.NOME_TABELA + " set   ");
			boolean execute = false;
			if(!updateVl.toString().equalsIgnoreCase(""))
			{
				execute = true;
				sqlUpdate.append(updateVl);
			}
			if(!updateTe.toString().equalsIgnoreCase(""))
			{
				execute = true;
				if(!updateVl.toString().equalsIgnoreCase("")) sqlUpdate.append(" ,");
				sqlUpdate.append(updateTe);
			}
			if(!updateTarMin.toString().equalsIgnoreCase(""))
			{
				execute = true;
				if(!updateVl.toString().equalsIgnoreCase("")
						|| !updateTe.toString().equalsIgnoreCase("")) sqlUpdate.append(" ,");
				sqlUpdate.append(updateTarMin);
			}
			
			if (execute)getJdbcTemplate().execute(sqlUpdate.toString());
		}
		
	}
	
	private void gerPorcentagem(String chaveValor,String chavePercent,Map dados,StringBuffer buffer,int totIteracoes,int somar)
	{
		String operacao = "";
		for(int j=0;j<totIteracoes;j++)
		{
			if (MapUtilsPlus.getString(dados,chaveValor,"").equals("A"))			
				operacao = " + ";			
			else if (MapUtilsPlus.getString(dados,chaveValor,"").equals("D"))			
				operacao = " - ";					
			
			if (!operacao.equals("") && MapUtilsPlus.getLong(dados,chavePercent,Long.valueOf(0)).longValue()!=0 )
				buffer.append( ((j>=1) ? "," : "" ) +
						      "  COLUMN" + (j+somar) + " = COLUMN" + (j+somar) + operacao +  
						      " ((COLUMN" + (j+somar) + " * " +  
						      MapUtilsPlus.getLong(dados,chavePercent,Long.valueOf(0)).longValue() + ")/100)" );
									
		}
	}
	
	private Map getValorAplicado(Long idParametroCliente,Long idDivisaoCliente, Long idSimulacao)
	{
		List result = null;
		if(idSimulacao==null){
			result = getJdbcTemplate().queryForList(getSqlValorAplicado(idSimulacao) ,new Object[]{idDivisaoCliente,idParametroCliente});
		}else{
			result = getJdbcTemplate().queryForList(getSqlValorAplicado(idSimulacao) ,new Object[]{idParametroCliente});			
		}
		
		if (result!=null && result.size()>=1)
		{
			Map retorno = new HashMap();
			
			Map dados = (Map)result.iterator().next();
			if (dados.get("TP_INDICADOR_FRETE_PESO").toString().equals("V")||dados.get("TP_INDICADOR_FRETE_PESO").toString().equals("A"))
			{
				retorno.put("VL_PESO",MapUtilsPlus.getLong(dados,"VL_FRETE_PESO",null));
				retorno.put("VL_PESO_TIPO","A");
			}
			if (dados.get("TP_INDICADOR_FRETE_PESO").toString().equals("D"))
			{
				retorno.put("VL_PESO",MapUtilsPlus.getLong(dados,"VL_FRETE_PESO",null));
				retorno.put("VL_PESO_TIPO","D");
			}
			
			if (dados.get("TP_INDIC_VLR_TBL_ESPECIFICA").toString().equals("A"))
			{
				retorno.put("VL_TBL",MapUtilsPlus.getLong(dados,"VL_TBL_ESPECIFICA",null));
				retorno.put("VL_TBL_TIPO","A");
			}
			if (dados.get("TP_INDIC_VLR_TBL_ESPECIFICA").toString().equals("D"))
			{
				retorno.put("VL_TBL",MapUtilsPlus.getLong(dados,"VL_TBL_ESPECIFICA",null));
				retorno.put("VL_TBL_TIPO","D");
			}

			if (dados.get("TP_TARIFA_MINIMA").toString().equals("A"))
			{
				retorno.put("VL_TARMIN",MapUtilsPlus.getLong(dados,"VL_TARIFA_MINIMA",null));
				retorno.put("VL_TARMIN_TIPO","A");
			}
			if (dados.get("TP_TARIFA_MINIMA").toString().equals("D"))
			{
				retorno.put("VL_TARMIN",MapUtilsPlus.getLong(dados,"VL_TARIFA_MINIMA",null));
				retorno.put("VL_TARMIN_TIPO","D");
			}			
			return retorno;
			
		}
		return null;
	}

	public ConfiguracoesFacade getConfiguracoesFacade() {
		return configuracoesFacade;
	}

	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}

	public void setEmitirTabelaFreteCiaAereaService(EmitirTabelaFreteCiaAereaService emitirTabelaFreteCiaAereaService) 
	{
		this.emitirTabelaFreteCiaAereaService = emitirTabelaFreteCiaAereaService;
	}

	public EmitirTabelaTaxaCombustivelLandscapeService getEmitirTabelaTaxaCombustivel() {
		return emitirTabelaTaxaCombustivel;
	}

	public void setEmitirTabelaTaxaCombustivel(
			EmitirTabelaTaxaCombustivelLandscapeService emitirTabelaTaxaCombustivel) {
		this.emitirTabelaTaxaCombustivel = emitirTabelaTaxaCombustivel;
	}

	

	private TypedFlatMap getCommonParameter(Map param) {
		TypedFlatMap parameters = new TypedFlatMap();
		parameters.put("idCliente", MapUtils.getLong(param, "idCliente"));
		parameters.put("idDivisao", MapUtils.getLong(param, "idDivisao"));
		parameters.put("idTabelaPreco", MapUtils.getLong(param, "idTabelaPreco"));
		parameters.put("idContato", MapUtils.getLong(param, "idContato"));
		return parameters;
}
	
	public EmitirTabelasClienteDAO getEmitirTabelasClienteDAO() {
		return emitirTabelasClienteDAO;
	}

	public void setEmitirTabelasClienteDAO(
			EmitirTabelasClienteDAO emitirTabelasClienteDAO) {
		this.emitirTabelasClienteDAO = emitirTabelasClienteDAO;
	}
	
	public EmitirTabelasClientesService getEmitirTabelasClientesService() {
		return emitirTabelasClientesService;
}

	public void setEmitirTabelasClientesService(
			EmitirTabelasClientesService emitirTabelasClientesService) {
		this.emitirTabelasClientesService = emitirTabelasClientesService;
	}
	
	public TabelasClienteService getTabelasClienteService() {
		return tabelasClienteService;
}

	public void setTabelasClienteService(TabelasClienteService tabelasClienteService) {
		this.tabelasClienteService = tabelasClienteService;
	}
}
