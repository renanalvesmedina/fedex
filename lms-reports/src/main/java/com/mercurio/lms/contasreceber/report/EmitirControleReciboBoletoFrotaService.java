package com.mercurio.lms.contasreceber.report;

import java.util.HashMap;
import java.util.Map;

import com.mercurio.adsm.framework.report.JRReportDataObject;
import com.mercurio.adsm.framework.report.ReportServiceSupport;
import com.mercurio.adsm.framework.util.SqlTemplate;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *
 * @author Rafael Andrade de Oliveira 
 * @since 28/04/2006
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contasreceber.emitirControleReciboBoletoFrotaService"
 * @spring.property name="reportName" value="com/mercurio/lms/contasreceber/report/emitirControleReciboBoletoFrota.jasper"
 */

public class EmitirControleReciboBoletoFrotaService extends ReportServiceSupport {

	public JRReportDataObject execute(Map parameters) {

		/* Busca SqlTemplate */
		SqlTemplate sql = getSql((TypedFlatMap) parameters);
		
		JRReportDataObject jr = executeQuery(sql.getSql(), sql.getCriteria());

		Map parametersReport = new HashMap();
		
		/* Tipo do relatório */
        parametersReport.put(JRReportDataObject.EXPORT_MODE_PARAM, parameters.get("tpFormatoRelatorio"));
		/* Parametros de pesquisa */
		parametersReport.put("parametrosPesquisa", sql.getFilterSummary());
		/* Usuario emissor */
		parametersReport.put("usuarioEmissor", SessionUtils.getUsuarioLogado().getNmUsuario());
        
        jr.setParameters(parametersReport);
		
		return jr;
	}
	
	public void configReportDomains(ReportDomainConfig config) {
		config.configDomainField("TIPO_DCTO_SERVICO", "DM_TIPO_DOCUMENTO_SERVICO");
		super.configReportDomains(config);
	}

	private SqlTemplate getSql(TypedFlatMap tfm) {
		
		SqlTemplate sql = createSqlTemplate();

		sql.addProjection("distinct FILIAL_MANIFESTO.SG_FILIAL || ' ' || TO_CHAR(MANIFESTO_ENTREGA.NR_MANIFESTO_ENTREGA, '00000000')", "NUMERO");
		sql.addProjection("MEIO_TRANSPORTE.NR_FROTA", "FROTA");
		
		sql.addProjection("DECODE(BOLETO.NR_BOLETO, NULL, 'Recibo', 'Boleto')", "TIPO_DOCUMENTO");
		sql.addProjection("DECODE(BOLETO.NR_BOLETO, NULL, FILIAL_RECIBO.SG_FILIAL || ' ' || TO_CHAR(RECIBO.NR_RECIBO, '0000000000'), FILIAL_FATURA.SG_FILIAL || ' ' || BOLETO.NR_BOLETO)", "DOCUMENTO_COBRANCA");
		sql.addProjection("FILIAL_FATURA.SG_FILIAL || ' ' || TO_CHAR(FATURA.NR_FATURA, '0000000000')", "DOCUMENTO");
		sql.addProjection("DOCTO_SERVICO.TP_DOCUMENTO_SERVICO", "TIPO_DCTO_SERVICO");
		sql.addProjection("DOCTO_SERVICO.TP_DOCUMENTO_SERVICO", "TP_DCTO_SERVICO");
		sql.addProjection("FILIAL_DOCUMENTO.SG_FILIAL", "FILIAL_DOCTO"); 
		sql.addProjection("DOCTO_SERVICO.NR_DOCTO_SERVICO", "DCTO_SERVICO");
		
		
		sql.addFrom("MANIFESTO " +
        "inner join MANIFESTO_ENTREGA on MANIFESTO.ID_MANIFESTO = MANIFESTO_ENTREGA.ID_MANIFESTO_ENTREGA \n" +
        "left outer join CONTROLE_CARGA on MANIFESTO.ID_CONTROLE_CARGA = CONTROLE_CARGA.ID_CONTROLE_CARGA \n" +
        "left outer join MEIO_TRANSPORTE on CONTROLE_CARGA.ID_TRANSPORTADO = MEIO_TRANSPORTE.ID_MEIO_TRANSPORTE \n" +
        "inner join FATURA on MANIFESTO_ENTREGA.ID_MANIFESTO_ENTREGA = FATURA.ID_MANIFESTO_ENTREGA " +
        "inner join ITEM_FATURA on FATURA.ID_FATURA = ITEM_FATURA.ID_FATURA \n" +
        "inner join DEVEDOR_DOC_SERV_FAT on ITEM_FATURA.ID_DEVEDOR_DOC_SERV_FAT = DEVEDOR_DOC_SERV_FAT.ID_DEVEDOR_DOC_SERV_FAT \n" +
        "inner join DOCTO_SERVICO on DEVEDOR_DOC_SERV_FAT.ID_DOCTO_SERVICO = DOCTO_SERVICO.ID_DOCTO_SERVICO \n" +
        "inner join FILIAL FILIAL_MANIFESTO on MANIFESTO_ENTREGA.ID_FILIAL = FILIAL_MANIFESTO.ID_FILIAL \n" +
        "inner join FILIAL FILIAL_FATURA on FATURA.ID_FILIAL = FILIAL_FATURA.ID_FILIAL \n" +
        "inner join FILIAL FILIAL_DOCUMENTO on DOCTO_SERVICO.ID_FILIAL_ORIGEM = FILIAL_DOCUMENTO.ID_FILIAL \n" +
        "left outer join BOLETO on FATURA.ID_BOLETO = BOLETO.ID_BOLETO \n" +
        //"left outer join FATURA_RECIBO on FATURA.ID_FATURA = FATURA_RECIBO.ID_FATURA \n" +
        "left outer join RECIBO on FATURA.ID_RECIBO = RECIBO.ID_RECIBO \n" +
        "left outer join FILIAL FILIAL_RECIBO on RECIBO.ID_FILIAL_EMISSORA = FILIAL_RECIBO.ID_FILIAL");
	
		sql.addCustomCriteria("MANIFESTO.TP_STATUS_MANIFESTO <> 'CA'");
		sql.addCustomCriteria("FATURA.TP_SITUACAO_FATURA IN ('BL', 'RC')");

		Filial filialUsuario = SessionUtils.getFilialSessao();
		sql.addCriteria("MANIFESTO_ENTREGA.ID_FILIAL", "=", filialUsuario.getIdFilial());

		sql.addCriteria("TRUNC(MANIFESTO.DH_EMISSAO_MANIFESTO)", "=", tfm.getYearMonthDay("dtEmissao"));
		sql.addFilterSummary("emissaoManifestoEntrega", tfm.getYearMonthDay("dtEmissao"));
		
		sql.addOrderBy("NUMERO, TIPO_DOCUMENTO, DOCUMENTO_COBRANCA");
		
		return sql;
	}

}