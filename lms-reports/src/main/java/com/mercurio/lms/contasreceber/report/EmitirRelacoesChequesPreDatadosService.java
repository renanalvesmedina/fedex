package com.mercurio.lms.contasreceber.report;

import java.util.HashMap;
import java.util.Map;

import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.report.JRReportDataObject;
import com.mercurio.adsm.framework.report.ReportServiceSupport;
import com.mercurio.adsm.framework.util.SqlTemplate;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.util.JTFormatUtils;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 * 
 * Emissao de relatorio de cheques por vencimento
 * @author Rafael Andrade de Oliveira
 * @since 24/03/2006
 * 
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contasreceber.emitirRelacoesChequesPreDatadosService"
 * @spring.property name="reportName" value="com/mercurio/lms/contasreceber/report/emitirRelacoesChequesPreDatados.jasper"
 */

public class EmitirRelacoesChequesPreDatadosService extends ReportServiceSupport {

	DomainValueService domainValueService;
	
	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}

	public JRReportDataObject execute(Map parameters) {

		/* Busca SqlTemplate */
		SqlTemplate sql = getSql(parameters);
		
		JRReportDataObject jr = executeQuery(sql.getSql(), sql.getCriteria());

		Map parametersReport = new HashMap();
		
		/* Tipo do relatório */
        parametersReport.put(JRReportDataObject.EXPORT_MODE_PARAM, parameters.get("tpFormatoRelatorio"));
		/* Parametros de pesquisa */
		parametersReport.put("parametrosPesquisa", sql.getFilterSummary());
		/* Usuario emissor */
		parametersReport.put("usuarioEmissor", SessionUtils.getUsuarioLogado().getNmUsuario());
        
        jr.setParameters(parametersReport);
		
		return jr;
	}
	
	public void configReportDomains(ReportDomainConfig config) {
		config.configDomainField("SITUACAO", "DM_STATUS_CHEQUE");
		super.configReportDomains(config);
	}

	private SqlTemplate getSql(Map parameters) {
		
		TypedFlatMap tfm = (TypedFlatMap) parameters;
		
		SqlTemplate sql = createSqlTemplate();
		
		/* Projection */
		sql.addProjection("c.dt_vencimento", "vencimento");
		sql.addProjection("f.sg_filial || ' - ' || p.nm_fantasia", "filial");
		sql.addProjection("c.nr_banco", "banco");
		sql.addProjection("c.nr_agencia", "agencia");
		sql.addProjection("c.nr_conta_corrente", "conta");
		sql.addProjection("c.nr_cheque", "cheque");
		sql.addProjection("c.tp_situacao_cheque", "situacao");
		sql.addProjection("lc.dt_emissao", "emissao");
		sql.addProjection("c.vl_cheque", "valor");
		sql.addProjection("c.tp_identificacao_responsavel", "tp_identificacao");
		sql.addProjection("c.nr_identificacao_responsavel", "cnpjcpf");

		/* From */
		sql.addFrom("cheque", "c");

		/* Join com a tabela LOTE_CHEQUE */
		sql.addFrom("lote_cheque", "lc");
		sql.addJoin("lc.id_lote_cheque", "c.id_lote_cheque");

		/* Join com a tabela FILIAL */
		sql.addFrom("filial", "f");
		sql.addJoin("f.id_filial", "c.id_filial");
		
		/* Join com a tabela HISTORICO_CHEQUE */
		sql.addFrom("historico_cheque", "hc");
		sql.addJoin("hc.id_cheque", "c.id_cheque");
		sql.addJoin("hc.id_historico_cheque", "(select max(hc2.id_historico_cheque) from historico_cheque hc2 where hc2.id_cheque = hc.id_cheque)");

		/* Join com a tabela HISTORICO_FILIAL */
		sql.addFrom("historico_filial", "hf");
		sql.addJoin("hf.id_filial", "f.id_filial");
		sql.addCustomCriteria("lc.dt_emissao between hf.dt_real_operacao_inicial and hf.dt_real_operacao_final");
		
		/* Join com a tabela PESSOA */
		sql.addFrom("pessoa", "p");
		sql.addJoin("p.id_pessoa", "c.id_filial");

		/* Filtros */
		
		// Deve buscar apenas cheques de lotes fechados
		sql.addCriteria("lc.bl_fechado", "=", "S");
		
		sql.addCriteria("lc.nr_lote_cheque", "=", tfm.getLong("nrLote"));
		sql.addFilterSummary("lote", tfm.getLong("nrLote"));
		
		if (tfm.getLong("filial.idFilial") != null) {
			sql.addCriteria("f.id_filial", "=", tfm.getLong("filial.idFilial"));
			sql.addFilterSummary("filial", tfm.getString("sgFilial") + " - " + tfm.getString("filial.pessoa.nmFantasia"));
		}
		
		Long idUsuario = tfm.getLong("usuario.idUsuario");
		if ( idUsuario != null ) {
			sql.addCriteria("hc.id_usuario", "=", idUsuario);
			sql.addFilterSummary("usuario", tfm.getString("usuario.nrMatricula") + " - " + tfm.getString("nmUsuario"));
		}
		
		sql.addCriteria("c.tp_situacao_cheque", "=", tfm.getDomainValue("tpSituacaoCheque").getValue());
		
		if (!tfm.getDomainValue("tpSituacaoCheque").getValue().equals("") ) {
			String situacaoCheque = domainValueService.findDomainValueDescription("DM_STATUS_CHEQUE", tfm.getDomainValue("tpSituacaoCheque").getValue());
			sql.addFilterSummary("situacaoCheque", situacaoCheque);
		}

		/* i18n para o valor de "Sim" */
		String sim = domainValueService.findDomainValueDescription("DM_SIM_NAO", "S");
		String nao = domainValueService.findDomainValueDescription("DM_SIM_NAO", "N");

		if (tfm.getString("incluirChequeDevolvido").equals("N")) {
			sql.addCriteria("hc.tp_historico_cheque", "<>", "DB");
			sql.addFilterSummary("incluirChequeDevolvido", nao);
		} else {
			sql.addFilterSummary("incluirChequeDevolvido", sim);
		}
		
		if (tfm.getString("listarChequesSucursais").equals("N")) {
			sql.addCriteria("hf.tp_filial", "<>", "SU");
			sql.addFilterSummary("listarChequesSucursais", nao);
		} else {
			sql.addFilterSummary("listarChequesSucursais", sim);
		}
		
		sql.addCriteria("hc.tp_historico_cheque", "=", tfm.getDomainValue("ultimaAcao").getValue());
		
		if (tfm.getYearMonthDay("dtEmissaoInicial") != null) {
			sql.addCriteria("lc.dt_emissao", ">=", tfm.getYearMonthDay("dtEmissaoInicial"));
			sql.addFilterSummary("dataEmissaoInicial", JTFormatUtils.format(tfm.getYearMonthDay("dtEmissaoInicial")));
		}
		
		if (tfm.getYearMonthDay("dtEmissaoFinal") != null) {
			sql.addCriteria("lc.dt_emissao", "<=", tfm.getYearMonthDay("dtEmissaoFinal"));
			sql.addFilterSummary("dataEmissaoFinal", JTFormatUtils.format(tfm.getYearMonthDay("dtEmissaoFinal")));
		}
		
		if (tfm.getYearMonthDay("dtVencimentoInicial") != null) {
			sql.addCriteria("c.dt_vencimento", ">=", tfm.getYearMonthDay("dtVencimentoInicial"));
			sql.addFilterSummary("dataVencimentoInicial", JTFormatUtils.format(tfm.getYearMonthDay("dtVencimentoInicial")));
		}
		
		if (tfm.getYearMonthDay("dtVencimentoFinal") != null) {
			sql.addCriteria("c.dt_vencimento", "<=", tfm.getYearMonthDay("dtVencimentoFinal"));
			sql.addFilterSummary("dataVencimentoFinal", JTFormatUtils.format(tfm.getYearMonthDay("dtVencimentoFinal")));
		}
		
		if (tfm.getYearMonthDay("dtAcaoInicial") != null) {
			sql.addCriteria("trunc(hc.dh_historico_cheque)", ">=", tfm.getYearMonthDay("dtAcaoInicial"));
			sql.addFilterSummary("dataAcaoInicial", JTFormatUtils.format(tfm.getYearMonthDay("dtAcaoInicial")));
		}
		
		if (tfm.getYearMonthDay("dtAcaoFinal") != null) {
			sql.addCriteria("trunc(hc.dh_historico_cheque)", "<=", tfm.getYearMonthDay("dtAcaoFinal"));
			sql.addFilterSummary("dataAcaoFinal", JTFormatUtils.format(tfm.getYearMonthDay("dtAcaoFinal")));
		}

		if (!tfm.getDomainValue("ultimaAcao").getValue().equals("") ) {
			String ultimaAcao = domainValueService.findDomainValueDescription("DM_HISTORICO_CHEQUE", tfm.getDomainValue("ultimaAcao").getValue());
			sql.addFilterSummary("ultimaAcao", ultimaAcao);
		}
		
		//moeda
		sql.addCriteria("c.id_moeda_pais", "=", tfm.getLong("moedaPais.idMoedaPais"));
		sql.addFilterSummary("moeda", tfm.getString("siglaSimbolo"));
		
		
		/* Ordenação */
		sql.addOrderBy("c.dt_vencimento, f.sg_filial, c.nr_banco, c.nr_agencia, c.nr_conta_corrente, c.nr_cheque");
		
		return sql;
	}
}
