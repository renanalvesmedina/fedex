package com.mercurio.lms.contasreceber.report;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;

import com.mercurio.adsm.framework.model.JodaTimeUtils;
import com.mercurio.adsm.framework.report.JRReportDataObject;
import com.mercurio.adsm.framework.report.ReportServiceSupport;
import com.mercurio.adsm.framework.util.SqlTemplate;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 * 
 * @author Rafael Andrade de Oliveira
 * @since 28/03/2006
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contasreceber.emitirMaioresDevedoresSinteticoService"
 * @spring.property name="reportName" value="com/mercurio/lms/contasreceber/report/emitirMaioresDevedoresSintetico.jasper" 
 */

public class EmitirMaioresDevedoresSinteticoService extends ReportServiceSupport {

	private EmitirMaioresDevedoresSqlService emitirMaioresDevedoresSqlService;
	public void setEmitirMaioresDevedoresSqlService(EmitirMaioresDevedoresSqlService emitirMaioresDevedoresSqlService){
		this.emitirMaioresDevedoresSqlService = emitirMaioresDevedoresSqlService;
	}
	
	public JRReportDataObject execute(Map parameters) {
		TypedFlatMap tfm = (TypedFlatMap) parameters;
		
		SqlTemplate sql = createSqlTemplate();
		
		if (tfm.getString("situacao").equalsIgnoreCase("V")) {//Vencidos/a vencer
			emitirMaioresDevedoresSqlService.getSqlAVencerVencidoNaoFaturado(tfm, sql);
		} else {//Em protesto
			emitirMaioresDevedoresSqlService.getSqlEmProtesto(tfm, sql);
		}

		/* Seta o FilterSummary */
		emitirMaioresDevedoresSqlService.mountFilterSummary(sql, tfm);
		
		// Itera o resultSet
		List lst = this.iteratorResultSet(sql, tfm.getLong("qtdCliente")); 
		
		JRMapCollectionDataSource jrMap = new JRMapCollectionDataSource(lst);
		
		JRReportDataObject jr = createReportDataObject(jrMap, parameters);
		
		jr.setParameters(mountParametersReport(parameters, sql, jr));
		
		return jr;
	}

	/**
	 * Monta os parâmetros do relatório
	 * 
	 * @author Hector Julian Esnaola Junior
	 * @since 14/03/2007
	 *
	 * @param parameters
	 * @param sql
	 * @param jr
	 *
	 */
	private Map mountParametersReport(Map parameters, SqlTemplate sql, JRReportDataObject jr) {
		Map parametersReport = new HashMap();
		
		/* Tipo do relatório */
        parametersReport.put(JRReportDataObject.EXPORT_MODE_PARAM, parameters.get("tpFormatoRelatorio"));
        
        /* Parametros de pesquisa */
        parametersReport.put("parametrosPesquisa", sql.getFilterSummary());

		/* Usuario emissor */
		parametersReport.put("usuarioEmissor", SessionUtils.getUsuarioLogado().getNmUsuario());

        return parametersReport;
	}
	
	/**
	 * Itera o resultSet para calcular o total geral
	 *
	 * @author Hector Julian Esnaola Junior
	 * @since 14/03/2007
	 *
	 * @param sql
	 * @param qtClientes
	 * @return
	 *
	 */
	public List iteratorResultSet(SqlTemplate sql, final Long qtClientes){
		return (List) getJdbcTemplate().query(sql.getSql(), JodaTimeUtils.jdbcPureParamConverter(getJdbcTemplate(), sql.getCriteria()), emitirMaioresDevedoresSqlService.getResultSetExtractor(qtClientes));
	}
	
}