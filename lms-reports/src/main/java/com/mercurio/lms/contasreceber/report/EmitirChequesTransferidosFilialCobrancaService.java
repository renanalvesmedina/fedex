package com.mercurio.lms.contasreceber.report;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;

import org.joda.time.YearMonthDay;
import org.springframework.jdbc.core.RowMapper;

import com.mercurio.adsm.framework.report.JRReportDataObject;
import com.mercurio.adsm.framework.report.ReportServiceSupport;
import com.mercurio.adsm.framework.util.SqlTemplate;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.contasreceber.model.service.CalcularJurosDiarioService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contasreceber.emitirChequesTransferidosFilialCobrancaService"
 * @spring.property name="reportName" value="com/mercurio/lms/contasreceber/report/emitirChequesTransferidosFilialCobranca.jasper"
 */

public class EmitirChequesTransferidosFilialCobrancaService extends ReportServiceSupport {
	
	private CalcularJurosDiarioService calcularJurosDiarioService;

	public JRReportDataObject execute(Map parameters) throws Exception {

		TypedFlatMap tfm = (TypedFlatMap) parameters;
		
		SqlTemplate sql = new SqlTemplate(); 

		sql.addProjection( "  c.id_cheque as id_cheque");
		
		sql.addFrom(new StringBuffer()
				.append("  cheque c " +
						"  INNER JOIN lote_cheque lc on lc.id_lote_cheque = c.id_lote_cheque " +
						"  INNER JOIN filial f on f.id_filial = c.id_filial " +
						"  INNER JOIN pessoa pf on pf.id_pessoa = f.id_filial " +
						"  INNER JOIN historico_cheque hc on hc.id_cheque = c.id_cheque " +
						"         AND hc.tp_historico_cheque = 'TF' " + 
						"         AND hc.id_historico_cheque = (SELECT max(id_historico_cheque) " +
				        "                             			FROM   historico_cheque hc2 " +
				        "                             			WHERE  hc2.id_cheque = c.id_cheque) ")
				.toString()
		);
		
		if (tfm.get("filial.idFilial") != null && !tfm.get("filial.idFilial").equals(""))
			  sql.addCriteria("c.ID_FILIAL", "=", tfm.get("filial.idFilial").toString() ); 

		if (tfm.get("dataTransferencia") != null && !tfm.get("dataTransferencia").equals(""))
		  sql.addCustomCriteria("trunc(cast(hc.DH_HISTORICO_CHEQUE as Date)) = to_date('" + tfm.getYearMonthDay("dataTransferencia") + "', 'yyyy-mm-dd') "); 
		
		sql.addOrderBy("f.sg_filial, c.nr_banco, c.nr_agencia, c.nr_conta_corrente, c.nr_cheque");
		
		JRReportDataObject jr = executeQuery(sql.getSql(), sql.getCriteria());

		Map parametersReport = new HashMap();
        parametersReport.put(JRReportDataObject.EXPORT_MODE_PARAM, tfm.get("tpFormatoRelatorio"));
        jr.setParameters(parametersReport);
		
		return jr;
	}
	
	public JRDataSource executeSubReport(Object[] parameters) throws Exception {
		String sql = getSqlSub(parameters);
		
		List retorno = getJdbcTemplate().query(sql, new Object[]{}, new RowMapper() {

			public Object mapRow(ResultSet rs, int rowNum) throws SQLException {
				Map map = new HashMap();
				
				map.put("DE", rs.getString("de"));
				map.put("PARA", rs.getString("para"));
				map.put("DH_HISTORICO_CHEQUE", rs.getString("dh_historico_cheque"));
				map.put("CHEQUE", rs.getString("cheque"));
				map.put("AGENCIA", rs.getString("agencia"));
				map.put("BANCO", rs.getString("banco"));
				map.put("CONTA", rs.getString("conta"));
				map.put("EMITENTE", rs.getString("emitente"));
				map.put("VENCIMENTO", rs.getDate("vencimento"));
				map.put("VALOR", new Double(rs.getDouble("valor")));
				map.put("JUROS_DIA", new Double(rs.getDouble("valor") * calcularJurosDiarioService.calcularPercentualJuroDiario(rs.getLong("id_filial"), rs.getBigDecimal("juro_cliente"), rs.getBigDecimal("juro_filial"), new YearMonthDay(rs.getDate("dh_historico_cheque").getTime())).doubleValue() / 100));
				
				return map;
			}
		});

		JRMapCollectionDataSource jrMap = new JRMapCollectionDataSource(retorno);

		return jrMap;

	}
	
	private String getSqlSub(Object[] parameters) {
		
		StringBuffer sql = new StringBuffer();
		
		sql.append("SELECT " +
						"  'Matriz - Divisão Financeira' as de, " +
						"  f.sg_filial || ' - ' || pf.nm_fantasia as para, " +
						"  f.id_filial as id_filial, " +
						"  hc.dh_historico_cheque as dh_historico_cheque, " +
						"  c.nr_cheque as cheque, " +
						"  c.nr_agencia as agencia, " +
						"  c.nr_banco as banco, " +
						"  c.nr_conta_corrente as conta, " +
						"  c.nm_responsavel as emitente, " +
						"  c.dt_vencimento as vencimento, " +
						"  c.vl_cheque as valor, " +
						"  cli.pc_juro_diario as juro_cliente, " +
						"  f.pc_juro_diario as juro_filial " +
						"  FROM  cheque c " +
						"  LEFT JOIN cliente cli on cli.id_cliente = c.id_cliente " +
						"  INNER JOIN lote_cheque lc on lc.id_lote_cheque = c.id_lote_cheque " +
						"  INNER JOIN filial f on f.id_filial = c.id_filial " +
						"  INNER JOIN pessoa pf on pf.id_pessoa = f.id_filial " +
						"  INNER JOIN historico_cheque hc on hc.id_cheque = c.id_cheque " +
						"         AND hc.tp_historico_cheque = 'TF' " + 
						"         AND hc.id_historico_cheque = (SELECT max(id_historico_cheque) " +
				        "                             			FROM   historico_cheque hc2 " +
				        "                             			WHERE  hc2.id_cheque = c.id_cheque) " +
						"  WHERE 0 = 0 "
		);
						
		sql.append("  AND c.id_cheque = " + parameters[0]); 

		/* GAMBIARRA: os resultsets da 1a e 2a via eram fechados pois o sql era sempre igual, assim imprimia somente a 3a via */
		long i = System.currentTimeMillis();
		sql.append("  AND " + i + " = " + i );

		sql.append(" ORDER BY f.sg_filial, c.nr_banco, c.nr_agencia, c.nr_conta_corrente, c.nr_cheque");
		
		return sql.toString();
	}

	public void setCalcularJurosDiarioService(
			CalcularJurosDiarioService calcularJurosDiarioService) {
		this.calcularJurosDiarioService = calcularJurosDiarioService;
	}
	
}