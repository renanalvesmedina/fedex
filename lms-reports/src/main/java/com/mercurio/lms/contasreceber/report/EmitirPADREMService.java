package com.mercurio.lms.contasreceber.report;

import static java.lang.Boolean.TRUE;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;

import org.joda.time.YearMonthDay;
import org.springframework.jdbc.core.RowMapper;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.JodaTimeUtils;
import com.mercurio.adsm.framework.report.JRReportDataObject;
import com.mercurio.adsm.framework.report.ReportServiceSupport;
import com.mercurio.adsm.framework.util.SqlTemplate;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.adsm.framework.web.taglibs.datatype.MonthYearDataType;
import com.mercurio.lms.configuracoes.model.ConteudoParametroFilial;
import com.mercurio.lms.configuracoes.model.ParametroFilial;
import com.mercurio.lms.configuracoes.model.service.ConteudoParametroFilialService;
import com.mercurio.lms.configuracoes.model.service.ParametroFilialService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.portaria.model.AcaoIntegracao;
import com.mercurio.lms.portaria.model.AcaoIntegracaoEvento;
import com.mercurio.lms.portaria.model.service.AcaoIntegracaoEventosService;
import com.mercurio.lms.portaria.model.service.AcaoIntegracaoService;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 * 
 * @author Rafael Andrade de Oliveira
 * @since 17/04/2006
 *
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contasreceber.emitirPADREMService"
 * @spring.property name="reportName" value="com/mercurio/lms/contasreceber/report/emitirPADREM.jasper" 
 */

public class EmitirPADREMService extends ReportServiceSupport {
	
	private AcaoIntegracaoEventosService acaoIntegracaoEventosService;
	private AcaoIntegracaoService acaoIntegracaoService;
	private ConteudoParametroFilialService conteudoParametroFilialService;
	private ParametroFilialService parametroFilialService;
	private FilialService filialService;
	
	public void generateAcaoIntegracaoEvento(Long idFilial, String dataCompetencia) {		
		List acoes = acaoIntegracaoService.findByTpDocumento("PAD");
		if(acoes != null && acoes.size() == 1) {
			AcaoIntegracao acao = (AcaoIntegracao)acoes.get(0); 		
			AcaoIntegracaoEvento evento = new AcaoIntegracaoEvento();
			evento.setAcaoIntegracao(acao);
			evento.setDsInformacao(dataCompetencia);
			evento.setNrAgrupador(acaoIntegracaoEventosService.findLastAgrupador()+1);
			evento.setNrDocumento(idFilial);
			evento.setTpDocumento(acao.getTpDocumento());	
			acaoIntegracaoEventosService.store(evento);
		}		
	}
	
	public JRReportDataObject execute(Map parameters) {
		TypedFlatMap tfm = (TypedFlatMap) parameters;
		
		//pendências?
		if (checkPendings(tfm)) {
			throw new BusinessException("LMS-36254");
		}

		
		Boolean blGeraIntegracao = tfm.getBoolean("blGerarIntegracao");
		if (TRUE.equals(blGeraIntegracao)) {
			generateAcaoIntegracaoEvento(tfm.getLong("filial.idFilial"), JTDateTimeUtils.convertFrameworkDateToFormat(tfm.getYearMonthDay("dtCompetencia").toString(), "MM/yyyy"));
		}
		
		SqlTemplate sql = createSqlTemplate();
		sql.addFilterSummary("filialEmissora", tfm.getString("sgFilial") + " - " + tfm.getString("filial.pessoa.nmFantasia"));
		sql.addFilterSummary("dataCompetencia", JTDateTimeUtils.convertFrameworkDateToFormat(tfm.getYearMonthDay("dtCompetencia").toString(), "MM/yyyy"));
		sql.addFilterSummary("moedaExibicao", "BRL R$");
		
		List rel = new ArrayList();
		
		Long idFilial = tfm.getLong("filial.idFilial");
		YearMonthDay dtCompetencia = tfm.getYearMonthDay("dtCompetencia");

        ParametroFilial parametroFilial = parametroFilialService.findByParametro("ULTIMA_PADREM_GERADA");
		
		if (parametroFilial != null){
			ConteudoParametroFilial conteudoParametroFilial = conteudoParametroFilialService.findByIdParametroFilialIdFilial(parametroFilial.getIdParametroFilial(),idFilial );
			
			if (conteudoParametroFilial != null){
				conteudoParametroFilial.setVlConteudoParametroFilial(tfm.getYearMonthDay("dtCompetencia").toString());
			}else{
				Filial filial = filialService.findById(idFilial);
				conteudoParametroFilial = new ConteudoParametroFilial();
				conteudoParametroFilial.setParametroFilial(parametroFilial);
				conteudoParametroFilial.setFilial(filial);
				conteudoParametroFilial.setVlConteudoParametroFilial(tfm.getYearMonthDay("dtCompetencia").toString());
			}
			conteudoParametroFilialService.store(conteudoParametroFilial);
			
		}
		
		int nextDay = 1;
		
		YearMonthDay dt;
		
		while ( validaIntervaloDias(nextDay, dtCompetencia.getYear(), dtCompetencia.getMonthOfYear()) ) {

			dt = new YearMonthDay(dtCompetencia.getYear(), dtCompetencia.getMonthOfYear(), nextDay); 
			nextDay++;
			
			/* Busca SqlTemplate */
			String sqlDia = getSql(dt, idFilial);
			
			Object[] criteria = JodaTimeUtils.jdbcPureParamConverter(getJdbcTemplate(), getCriteria(dt, idFilial));
			
			List lista = getJdbcTemplate().query(sqlDia, criteria, new RowMapper() {

				public Object mapRow(ResultSet rs, int arg1) throws SQLException {
					Map map = new HashMap();
					
					map.put("FILIAL", rs.getString("FILIAL"));
					map.put("DIA", rs.getString("DIA"));
					map.put("DIAEXTENSO", rs.getString("DIAEXTENSO"));
					map.put("FOB", new Double(rs.getDouble("FOB")));
					map.put("CIF", new Double(rs.getDouble("CIF")));
					map.put("PESO", new Double(rs.getDouble("PESO")));
					map.put("CONHECTOS_DIA", new Double(rs.getDouble("CONHECTOS_DIA")));
					map.put("CONHECTOS_CANC", new Double(rs.getDouble("CONHECTOS_CANC")));
					map.put("MANIFESTOS_DIA", new Double(rs.getDouble("MANIFESTOS_DIA")));
					map.put("MANIFESTOS_CANC", new Double(rs.getDouble("MANIFESTOS_CANC")));
					map.put("NF_DIA", new Double(rs.getDouble("NF_DIA")));
					map.put("NF_CANC", new Double(rs.getDouble("NF_CANC")));
					map.put("NF_TOT", new Double(rs.getDouble("NF_TOT")));
					map.put("NFDEBITONACIONAL_DIA", new Double(rs.getDouble("NFDEBITONACIONAL_DIA")));
					map.put("NFDEBITONACIONAL_CANC", new Double(rs.getDouble("NFDEBITONACIONAL_CANC")));
					map.put("NFDEBITONACIONAL_TOT", new Double(rs.getDouble("NFDEBITONACIONAL_TOT")));
	
					return map;
				}
			});

			Map map = (Map) lista.get(0);
			
			if (map != null) {
				rel.add(map);
			}
		}
		
		JRMapCollectionDataSource jrMap = new JRMapCollectionDataSource(rel);
		
		JRReportDataObject jr = createReportDataObject(jrMap, parameters);

		Map parametersReport = new HashMap();
		
		/* Tipo do relatório */ 
        parametersReport.put(JRReportDataObject.EXPORT_MODE_PARAM, parameters.get("tpFormatoRelatorio"));
		/* Parametros de pesquisa */
		parametersReport.put("parametrosPesquisa", sql.getFilterSummary());
		
		// Seta nos parametros do relatório o id da filial e a competência
		parametersReport.put("ID_FILIAL", idFilial);
		parametersReport.put("DT_COMPETENCIA", dtCompetencia);
		
		/* Usuario emissor */
		parametersReport.put("usuarioEmissor", SessionUtils.getUsuarioLogado().getNmUsuario());
        
		parametersReport.put("SERVICE", this);
        
        jr.setParameters(parametersReport);
		
		return jr;
	}

	/**
	 *
	 * @author Hector Julian Esnaola Junior
	 * @since 07/03/2007
	 *
	 * @param nextDay
	 * @param dia
	 * @return
	 *
	 */
	private boolean validaIntervaloDias(int day, int year, int month) {
		return day <= JTDateTimeUtils.getLastDayOfMonth(year, month);
	}

	public JRDataSource executeSubReportDetalhe(Object[] parameters) throws Exception {
		
		Long idFilial = (Long) parameters[0];
		YearMonthDay dtCompetencia = (YearMonthDay) parameters[1];
		
		SqlTemplate sql = createSqlTemplate();

		sql.addProjection(new StringBuffer()
		  .append("( ")
		  .append("select nvl(min(c.nr_conhecimento), 0) ") 
		  .append("from docto_servico ds ")
		  .append("inner join conhecimento c on c.id_conhecimento = ds.id_docto_servico ")
		  .append("where c.tp_situacao_conhecimento <> 'P' and trunc(cast(ds.dh_emissao as date)) >= ? and trunc(cast(ds.dh_emissao as date)) <= ? and ds.id_filial_origem = ? ") // 3
		  .append("and ds.tp_documento_servico in ('CTR', 'CTE')")
		  .append(") as CONHECTO_PRIM, ")
		  .append("( ")
		  .append("select nvl(MAX(c.nr_conhecimento), 0) ")
		  .append("from docto_servico ds ")
		  .append("inner join conhecimento c on c.id_conhecimento = ds.id_docto_servico ")
		  .append("where c.tp_situacao_conhecimento <> 'P' and trunc(cast(ds.dh_emissao as date)) >= ? and trunc(cast(ds.dh_emissao as date)) <= ? and ds.id_filial_origem = ? ") // 6
		  .append("and ds.tp_documento_servico in ('CTR', 'CTE')")
		  .append(") as CONHECTO_ULT, ")
		  .append("( ")
		  .append("select  ")
		  .append("count(ds.id_docto_servico) ")
		  .append("from docto_servico ds ")
		  .append("inner join conhecimento c on c.id_conhecimento = ds.id_docto_servico ")
		  .append("where 0=0 ")
		  .append("and ds.tp_documento_servico in ('CTR', 'CTE')")
		  .append("and c.tp_situacao_conhecimento = 'C'")
		  .append("and trunc(cast(ds.dh_emissao as date)) >= ? ")
		  .append("and trunc(cast(ds.dh_emissao as date)) <= ? ") // 9
		  .append("and ds.id_filial_origem = ? ")
		  .append(") as CONHECTO_CANC, ")
		  .append("( ")
		  .append("select ")
		  .append("nvl(min(mvn.nr_manifesto_origem), 0) ")
		  .append("from manifesto m ")
		  .append("inner join manifesto_viagem_nacional mvn on mvn.id_manifesto_viagem_nacional = m.id_manifesto ") 
		  .append("where 0=0 ")
		  .append("and trunc(cast(m.dh_emissao_manifesto as date)) >= ? ")
		  .append("and trunc(cast(m.dh_emissao_manifesto as date)) <= ? ") // 12
		  .append("and m.id_filial_origem = ?")
		  .append(") as MAN_PRIM, ")
		  .append("( ")
		  .append("select ") 
		  .append("nvl(max(mvn.nr_manifesto_origem), 0) ")
		  .append("from manifesto m ")
		  .append("inner join manifesto_viagem_nacional mvn on mvn.id_manifesto_viagem_nacional = m.id_manifesto ") 
		  .append("where 0=0 ")
		  .append("and trunc(cast(m.dh_emissao_manifesto as date)) >= ? ")
		  .append("and trunc(cast(m.dh_emissao_manifesto as date)) <= ? ") // 15
		  .append("and m.id_filial_origem = ? ")
		  .append(") as MAN_ULT, ")
		  .append("( ")
		  .append("select ") 
		  .append("count(m.id_manifesto) ")
		  .append("from manifesto m, manifesto_viagem_nacional mvn ")
		  .append("where 0=0 ")
		  .append("and m.tp_status_manifesto = 'CA' ")
		  .append("and trunc(cast(m.dh_emissao_manifesto as date)) >= ? ")
		  .append("and trunc(cast(m.dh_emissao_manifesto as date)) <= ? ") // 18
		  .append("and m.id_filial_origem = ? ")
  		  .append("and m.id_manifesto = mvn.id_manifesto_viagem_nacional ")
		  .append(") as MAN_CANC, ")
		  .append("( ")
		  .append("select ")
		  .append("nvl(min(f.nr_fatura), 0) ")
		  .append("from fatura f ")
		  .append("where 0=0 ")
		  .append("and f.dt_emissao >= ? ")
		  .append("and f.dt_emissao <= ? ") // 21
		  .append("and f.id_filial = ? ")
		  .append(") as FAT_PRIM, ")
		  .append("( ")
		  .append("select ")
		  .append("nvl(max(f.nr_fatura), 0) ")
		  .append("from fatura f ")
		  .append("where 0=0 ")
		  .append("and f.dt_emissao >= ? ")
		  .append("and f.dt_emissao <= ? ") // 24
		  .append("and f.id_filial = ? ")
		  .append(") as FAT_ULT, ")
		  .append("( ")
		  .append("select ")
		  .append("count(f.id_fatura) ")
		  .append("from fatura f ")
		  .append("where 0=0 ")
		  .append("and f.tp_situacao_fatura = 'CA' ")
		  .append("and f.dt_emissao >= ? ")
		  .append("and f.dt_emissao <= ? ") // 27
		  .append("and f.id_filial = ? ")
		  .append(") as FAT_CANC, ")
		  .append("( ")
		  .append("select ")
		  .append("nvl(min(rc.nr_relacao_cobranca_filial), 0) ")
		  .append("from relacao_cobranca rc ")
		  .append("where 0=0 ")
		  .append("and rc.dt_liquidacao >= ? ") //30
		  .append("and rc.dt_liquidacao <= ? ")
		  .append("and rc.id_filial = ? ")
		  .append(") as RC_PRIM, ")
		  .append("( ")
		  .append("select ")
		  .append("nvl(max(rc.nr_relacao_cobranca_filial), 0) ")
		  .append("from relacao_cobranca rc ")
		  .append("where 0=0 ")
		  .append("and rc.dt_liquidacao >= ? ") // 33
		  .append("and rc.dt_liquidacao <= ? ")
		  .append("and rc.id_filial = ? ")
		  .append(") as RC_ULT, ")
		  .append("( ")
		  .append("select ")
		  .append("count(rc.nr_relacao_cobranca_filial) ")
		  .append("from relacao_cobranca rc ")
		  .append("where 0=0 ")
		  .append("and rc.tp_situacao_relacao_cobranca = 'CA' ")
		  .append("and rc.dt_liquidacao >= ? ") // 36
		  .append("and rc.dt_liquidacao <= ? ")
		  .append("and rc.id_filial = ? ")
		  .append(") as RC_CANC, ")
		  .append("( ")
		  .append("select ")
		  .append("nvl(min(t.nr_transferencia), 0) ")
		  .append("from transferencia t ")
		  .append("where 0=0 ")
		  .append("and t.dt_emissao >= ? ")
		  .append("and t.dt_emissao <= ? ") // 39
		  .append("and t.id_filial_origem = ? ")
		  .append(") as TRANS_PRIM, ")
		  .append("( ")
		  .append("select ") 
		  .append("nvl(max(t.nr_transferencia), 0) ")
		  .append("from transferencia t ")
		  .append("where 0=0 ")
		  .append("and t.dt_emissao >= ? ") // 42
		  .append("and t.dt_emissao <= ? ")
		  .append("and t.id_filial_origem = ? ")
		  .append(") as TRANS_ULT, ")
		  .append("( ")
		  .append("select ") 
		  .append("nvl(count(t.id_transferencia), 0) ")
		  .append("from transferencia t ")
		  .append("where 0=0 ")
		  .append("and t.tp_situacao_transferencia = 'CA' ")
		  .append("and t.dt_emissao <= ? ") // 45
		  .append("and t.dt_emissao >= ? ")
		  .append("and t.id_filial_origem = ? ")
		  .append(") as TRANS_CANC, ")
		  .append("( ")
		  .append("select ") 
		  .append("nvl(min(rd.nr_recibo_desconto), 0) ")
		  .append("from recibo_desconto rd ")
		  .append("where 0=0 ")
		  .append("and rd.dt_emissao >= ? ")
		  .append("and rd.dt_emissao <= ? ") // 48
		  .append("and rd.id_filial = ? ")
		  .append(") as RD_PRIM, ")
		  .append("( ")
		  .append("select ") 
		  .append("nvl(max(rd.nr_recibo_desconto), 0) ")
		  .append("from recibo_desconto rd ")
		  .append("where 0=0 ")
		  .append("and rd.dt_emissao >= ? ")
		  .append("and rd.dt_emissao <= ? ") // 51
		  .append("and rd.id_filial = ? ")
		  .append(") as RD_ULT, ")
		  .append("( ")
		  .append("select ") 
		  .append("nvl(count(rd.id_recibo_desconto), 0) ")
		  .append("from recibo_desconto rd ")
		  .append("where 0=0 ")
		  .append("AND rd.tp_situacao_recibo_desconto = 'C' ")
		  .append("and rd.dt_emissao >= ? ")
		  .append("and rd.dt_emissao <= ? ") // 54
		  .append("and rd.id_filial = ? ")
		  .append(") as RD_CANC, ")
		  .append("( ")
		  .append("select ") 
		  .append("nvl(min(dd.nr_demonstrativo_desconto), 0) ")
		  .append("from demonstrativo_desconto dd ")
		  .append("where 0=0 ")
		  .append("and dd.dt_emissao >= ? ") // 57
		  .append("and dd.dt_emissao <= ? ")
		  .append("and dd.id_filial = ? ")
		  .append(") as DD_PRIM, ")
		  .append("( ")
		  .append("select ") 
		  .append("nvl(max(dd.nr_demonstrativo_desconto), 0) ")
		  .append("from demonstrativo_desconto dd ")
		  .append("where 0=0 ")
		  .append("and dd.dt_emissao >= ? ") // 60
		  .append("and dd.dt_emissao <= ? ")
		  .append("and dd.id_filial = ? ")
		  .append(") as DD_ULT, ")
		  .append("( ")
		  .append("select ") 
		  .append("nvl(count(dd.id_demonstrativo_desconto), 0) ")
		  .append("from demonstrativo_desconto dd ")
		  .append("where 0=0 ")
		  .append("AND dd.tp_situacao_demonstrativo_desc = 'C' ")
		  .append("and dd.dt_emissao >= ? ")
		  .append("and dd.dt_emissao <= ? ") // 63
		  .append("and dd.id_filial = ? ")
		  .append(") as DD_CANC, ")
		  .append("( ")
		  .append("select ") 
		  .append("nvl(min(bdm.nr_bdm), 0) ")
		  .append("from baixa_dev_merc bdm ")
		  .append("where 0=0 ")
		  .append("and bdm.dt_emissao >= ? ")
		  .append("and bdm.dt_emissao <= ? ") // 66
		  .append("and bdm.id_filial_emissora = ? ")
		  .append(") as BDM_PRIM, ")
		  .append("( ")
		  .append("select ") 
		  .append("nvl(max(bdm.nr_bdm), 0) ")
		  .append("from baixa_dev_merc bdm ")
		  .append("where 0=0 ")
		  .append("and bdm.dt_emissao >= ? ")
		  .append("and bdm.dt_emissao <= ? ") // 69
		  .append("and bdm.id_filial_emissora = ? ")
		  .append(") as BDM_ULT, ")
		  .append("( ")
		  .append("select ") 
		  .append("nvl(count(bdm.id_baixa_dev_merc), 0) ")
		  .append("from baixa_dev_merc bdm ")
		  .append("where 0=0 ")
		  .append("and bdm.tp_situacao = 'C' ")
		  .append("and bdm.dt_emissao >= ? ")
		  .append("and bdm.dt_emissao <= ? ") // 72
		  .append("and bdm.id_filial_emissora = ? ")
		  .append(") as BDM_CANC, ")
		  .append("( ")
		  .append("select ") 
		  .append("nvl(min(rnc.nr_nao_conformidade), 0) ")
		  .append("from nao_conformidade rnc ")
		  .append("where 0=0 ")
		  .append("and trunc(cast(rnc.dh_emissao as date)) >= ? ")
		  .append("and trunc(cast(rnc.dh_emissao as date)) <= ? ") // 75
		  .append("and rnc.id_filial = ? ")
		  .append(") as RNC_PRIM, ")
		  .append("( ")
		  .append("select ") 
		  .append("nvl(max(rnc.nr_nao_conformidade), 0) ")
		  .append("from nao_conformidade rnc ")
		  .append("where 0=0 ")
		  .append("and trunc(cast(rnc.dh_emissao as date)) >= ? ")
		  .append("and trunc(cast(rnc.dh_emissao as date)) <= ? ") //78
		  .append("and rnc.id_filial = ? ")
		  .append(") as RNC_ULT, ")		  
		  .append("0 as RNC_CANC, ")		  
		  .append("( ")
		  .append("select ") 
		  .append("nvl(min(ds.nr_docto_servico), 0) ")
		  .append("from docto_servico ds ")
		  .append("where 0=0 ")
		  .append("and ds.tp_documento_servico in ('NFS', 'NFT', 'NSE', 'NTE') ")
		  .append("and trunc(cast(ds.dh_emissao as date)) >= ? ")
		  .append("and trunc(cast(ds.dh_emissao as date)) <= ? ") // 81
		  .append("and ds.id_filial_origem = ? ")
		  .append(") as NF_PRIM, ")
		  .append("( ")
		  .append("select ") 
		  .append("nvl(max(ds.nr_docto_servico), 0) ")
		  .append("from docto_servico ds ")
		  .append("where 0=0 ")
		  .append("and ds.tp_documento_servico in ('NFS', 'NFT', 'NSE', 'NTE') ")
		  .append("and trunc(cast(ds.dh_emissao as date)) >= ? ") // 84
		  .append("and trunc(cast(ds.dh_emissao as date)) <= ? ")
		  .append("and ds.id_filial_origem = ? ")
		  .append(") as NF_ULT, ")
		  .append("( ")
		  .append("select ") 
		  .append("nvl(count(ds.id_docto_servico), 0) ")
		  .append("from docto_servico ds ")
		  .append("LEFT OUTER JOIN conhecimento c on c.id_conhecimento = ds.id_docto_servico ")
		  .append("LEFT OUTER JOIN nota_fiscal_servico nfs on nfs.id_nota_fiscal_servico = ds.id_docto_servico ")
		  .append("where 0=0 ")
		  .append("and ds.tp_documento_servico in ('NFS', 'NFT', 'NSE', 'NTE') ")
		  .append("and ( c.tp_situacao_conhecimento = 'C' or nfs.tp_situacao_nf = 'C' ) ")
		  .append("and trunc(cast(ds.dh_emissao as date)) >= ? ") // 87
		  .append("and trunc(cast(ds.dh_emissao as date)) <= ? ")
		  .append("and ds.id_filial_origem = ? ")
		  .append(") as NF_CANC, ")
		  .append("( ")
		  .append("select ") 
		  .append("NVL(min(ndn.nr_nota_debito_nac), 0) ")
		  .append("from docto_servico ds ")
		  .append("inner join nota_debito_nacional ndn on ndn.id_nota_debito_nacional = ds.id_docto_servico ")
		  .append("where 0=0 ")
		  .append("and trunc(cast(ds.dh_emissao as date)) >= ? ") //90
		  .append("and trunc(cast(ds.dh_emissao as date)) <= ? ")
		  .append("and ds.id_filial_origem = ? ")
		  .append(") as NFDEBITO_PRIM, ")
		  .append("( ")
		  .append("select ") 
		  .append("NVL(max(ndn.nr_nota_debito_nac), 0) ")
		  .append("from docto_servico ds ")
		  .append("inner join nota_debito_nacional ndn on ndn.id_nota_debito_nacional = ds.id_docto_servico ")
		  .append("where 0=0 ")
		  .append("and trunc(cast(ds.dh_emissao as date)) >= ? ") // 93
		  .append("and trunc(cast(ds.dh_emissao as date)) <= ? ")
		  .append("and ds.id_filial_origem = ? ")
		  .append(") as NFDEBITO_ULT, ")
		  .append("( ")
		  .append("select ") 
		  .append("NVL(count(ndn.nr_nota_debito_nac), 0) ")
		  .append("from docto_servico ds ")
		  .append("inner join nota_debito_nacional ndn on ndn.id_nota_debito_nacional = ds.id_docto_servico ")
		  .append("where 0=0 ")
		  .append("and ndn.tp_situacao_nota_debito_nac = 'C' ")
		  .append("and trunc(cast(ds.dh_emissao as date)) >= ? ") //96
		  .append("and trunc(cast(ds.dh_emissao as date)) <= ? ")
		  .append("and ds.id_filial_origem = ? ")
		  .append(") as NFDEBITO_CANC, ")
		  .append("( ")
		  .append("select ") 
		  .append("nvl(min(a.nr_awb), 0) ") 
		  .append("from awb a ") 
		  .append("where 0=0 ")
		  .append("and trunc(cast(a.dh_emissao as date)) >= ? ") //99
		  .append("and trunc(cast(a.dh_emissao as date)) <= ? ")
		  .append("and a.id_filial_origem = ? ")
		  .append(") as AWB_PRIM, ")
		  .append("( ")
		  .append("select ") 
		  .append("nvl(max(a.nr_awb), 0) ")
		  .append("from awb a ") 
		  .append("where 0=0 ")
		  .append("and trunc(cast(a.dh_emissao as date)) >= ? ") // 102
		  .append("and trunc(cast(a.dh_emissao as date)) <= ? ")
		  .append("and a.id_filial_origem = ? ")
		  .append(") as AWB_ULT, ")
		  .append("( ")
		  .append("select ") 
		  .append("nvl(count(a.id_awb), 0) ")
		  .append("from awb a ") 
		  .append("where 0=0 ")
		  .append("and a.tp_status_awb = 'C' ")
		  .append("and trunc(cast(a.dh_emissao as date)) >= ? ")
		  .append("and trunc(cast(a.dh_emissao as date)) <= ? ") // 105
		  .append("and a.id_filial_origem = ? ")
		  .append(") as AWB_CANC, ")
		  .append("( ")
		  .append("select ") 
		  .append("nvl(sum(nvl(ds.vl_imposto, 0)), 0) ")
		  .append("from docto_servico ds ")
		  .append("inner join conhecimento c on c.id_conhecimento = ds.id_docto_servico ")
		  .append("where 0=0 ")
		  .append("and ds.tp_documento_servico in ('CTR', 'CTE') ")
		  .append("and c.tp_situacao_conhecimento in ('B', 'E') ")
		  .append("and trunc(cast(ds.dh_emissao as date)) >= ? ") // 108
		  .append("and trunc(cast(ds.dh_emissao as date)) <= ? ")
		  .append("and ds.id_filial_origem = ? ")
		  .append(") as ICMS ")
		  .toString()
		  );
		  
		sql.addFrom("dual");
		
		/* filtro da competencia */ 
		YearMonthDay periodoInicial = new YearMonthDay();
		periodoInicial = JTDateTimeUtils.setDay(periodoInicial, 1);
		periodoInicial = JTDateTimeUtils.setMonth(periodoInicial, dtCompetencia.getMonthOfYear());
		periodoInicial = JTDateTimeUtils.setYear(periodoInicial, dtCompetencia.getYear());
		
		YearMonthDay periodoFinal = new YearMonthDay(
				dtCompetencia.getYear()
			  , dtCompetencia.getMonthOfYear()
			  , JTDateTimeUtils.getLastDayOfMonth(dtCompetencia.getYear(), dtCompetencia.getMonthOfYear()));
		
		Object[] criteria = new Object[108]; // 108
		criteria[0] = idFilial;
		

		for (int i = 0; i < criteria.length; i++) {
			if (i % 3 == 0) {
				criteria[i] = periodoInicial;
				criteria[i+1] = periodoFinal;
				criteria[i+2] = idFilial;
			}
		}
		
		return executeQuery(sql.getSql(), criteria).getDataSource();
	}
	
	public JRDataSource executeSubReportNotasFiscaisCanceladas(Object[] parameters) throws Exception {
		Long idFilial = (Long) parameters[0];
		YearMonthDay dtCompetencia = (YearMonthDay) parameters[1];
		
		SqlTemplate sql = createSqlTemplate();

		sql.addProjection("ds.nr_docto_servico", "NOTA_FISCAL");
		sql.addProjection("f.sg_filial", "FILIAL");
		
		sql.addFrom("docto_servico", "ds");
		
		sql.addFrom("conhecimento", "c");
		sql.addJoin("c.id_conhecimento(+)", "ds.id_docto_servico");
		
		sql.addFrom("nota_fiscal_servico", "nfs");
		sql.addJoin("nfs.id_nota_fiscal_servico(+)", "ds.id_docto_servico");
		
		sql.addFrom("filial", "f");
		sql.addJoin("f.id_filial", "ds.id_filial_origem");
		
		sql.addCustomCriteria("ds.tp_documento_servico in ('NFS', 'NFT', 'NSE', 'NTE')");
		sql.addCustomCriteria("( c.tp_situacao_conhecimento = 'C' or nfs.tp_situacao_nf = 'C' )");
		
		sql.addCriteria("ds.id_filial_origem", "=", idFilial);
		
		/* filtro da competencia */ 
		YearMonthDay periodoInicial = new YearMonthDay();
		periodoInicial = JTDateTimeUtils.setDay(periodoInicial, 1);
		periodoInicial = JTDateTimeUtils.setMonth(periodoInicial, dtCompetencia.getMonthOfYear());
		periodoInicial = JTDateTimeUtils.setYear(periodoInicial, dtCompetencia.getYear());
		
		YearMonthDay periodoFinal = new YearMonthDay(
												dtCompetencia.getYear()
											  , dtCompetencia.getMonthOfYear()
											  , JTDateTimeUtils.getLastDayOfMonth(dtCompetencia.getYear(), dtCompetencia.getMonthOfYear()));
		
		sql.addCriteria("trunc(cast(ds.dh_emissao as date))", ">=", periodoInicial);
		sql.addCriteria("trunc(cast(ds.dh_emissao as date))", "<=", periodoFinal);
		
		return executeQuery(sql.getSql(), sql.getCriteria()).getDataSource();
	}
	
	public JRDataSource executeSubReportConhecimentosCancelados(Object[] parameters) throws Exception {
		
		Long idFilial = (Long) parameters[0];
		YearMonthDay dtCompetencia = (YearMonthDay) parameters[1];
		
		SqlTemplate sql = createSqlTemplate();

		sql.addProjection("ds.nr_docto_servico", "CONHECIMENTO");
		sql.addProjection("f.sg_filial", "FILIAL");
		
		sql.addFrom("docto_servico", "ds");
		
		sql.addFrom("conhecimento", "c");
		sql.addJoin("c.id_conhecimento", "ds.id_docto_servico");
		
		sql.addFrom("filial", "f");
		sql.addJoin("f.id_filial", "ds.id_filial_origem");
		
		sql.addCustomCriteria("ds.tp_documento_servico in ('CTR', 'CTE')");
		sql.addCustomCriteria("c.tp_situacao_conhecimento = 'C'");
		
		sql.addCriteria("ds.id_filial_origem", "=", idFilial);
		
		/* filtro da competencia */ 
		YearMonthDay periodoInicial = new YearMonthDay();
		periodoInicial = JTDateTimeUtils.setDay(periodoInicial, 1);
		periodoInicial = JTDateTimeUtils.setMonth(periodoInicial, dtCompetencia.getMonthOfYear());
		periodoInicial = JTDateTimeUtils.setYear(periodoInicial, dtCompetencia.getYear());
		
		
		YearMonthDay periodoFinal = new YearMonthDay(
				dtCompetencia.getYear()
			  , dtCompetencia.getMonthOfYear()
			  , JTDateTimeUtils.getLastDayOfMonth(dtCompetencia.getYear(), dtCompetencia.getMonthOfYear()));
		
		sql.addCriteria("trunc(cast(ds.dh_emissao as date))", ">=", periodoInicial);
		sql.addCriteria("trunc(cast(ds.dh_emissao as date))", "<=", periodoFinal);
		
		return executeQuery(sql.getSql(), sql.getCriteria()).getDataSource();
	}

	private Object[] getCriteria(YearMonthDay dia, Long idFilial) {
		Object[] criteria = new Object[26];
		
		for (int i = 0; i < criteria.length; i++) {
			if (i % 2 == 0) {
				criteria[i] = dia;
			} else {
				criteria[i] = idFilial;
			}
		}
		
		return criteria;
	}
	
	private String getSql(YearMonthDay dia, Long idFilial) {

		SqlTemplate sql = createSqlTemplate();

		sql.addProjection(new StringBuffer()
				  .append("(select ")
			      .append("f.sg_filial || ' - ' || p.nm_fantasia ")
				  .append("from filial f ")
				  .append("inner join pessoa p on p.id_pessoa = f.id_filial ")
				  .append("where f.id_filial = " + idFilial)
				  .append(") AS FILIAL, ")  
				  .append("(select ")
			      .append("'" + dia.getDayOfMonth() + "'")
				  .append("from dual ")
				  .append(") AS DIA, ")
				  .append("(select ")
			      .append("'" + JTDateTimeUtils.getWeekdayName(dia)  + "'")
				  .append("from dual ")
				  .append(") AS DIAEXTENSO, ")
				  .append("( ")
				  .append("select ")  
				  .append("sum(nvl(ds.vl_total_doc_servico, 0)) ")
				  .append("from docto_servico ds ")
				  .append("inner join conhecimento c on c.id_conhecimento = ds.id_docto_servico ")
				  .append("where 0=0 ")
				  .append("and c.tp_frete = 'F' ")
				  .append("and ds.tp_documento_servico in ('CTR', 'CTE') ")
				  .append("and c.tp_situacao_conhecimento in ('E', 'B') ")
				  .append("and trunc(cast(ds.dh_emissao as date)) = ? ")
				  .append("and ds.id_filial_origem = ? ")
				  .append(") AS FOB, ")
				  .append("( ")
				  .append("select ") 
				  .append("sum(nvl(ds.vl_total_doc_servico, 0)) ")
				  .append("from docto_servico ds ")
				  .append("inner join conhecimento c on c.id_conhecimento = ds.id_docto_servico ")
				  .append("where 0=0 ")
				  .append("and c.tp_frete = 'C' ")
				  .append("and ds.tp_documento_servico in ('CTR', 'CTE') ")
				  .append("and c.tp_situacao_conhecimento in ('E', 'B') ")
				  .append("and trunc(cast(ds.dh_emissao as date)) = ? ")
				  .append("and ds.id_filial_origem = ? ")
				  .append(") AS CIF, ")
				  .append("( ")
				  .append("select ") 
				  .append("sum(nvl(ds.ps_real, 0)) ")
				  .append("from docto_servico ds ")
				  .append("inner join conhecimento c on c.id_conhecimento = ds.id_docto_servico ")
				  .append("where 0=0 ")
				  .append("and ds.tp_documento_servico in ('CTR', 'CTE') ")
				  .append("and c.tp_situacao_conhecimento in ('E', 'B') ")
				  .append("and trunc(cast(ds.dh_emissao as date)) = ? ")
				  .append("and ds.id_filial_origem = ? ")
				  .append(") ")
				  .append("as PESO, ")
				  .append("( ")
				  .append("select ") 
				  .append("count(ds.id_docto_servico) ")
				  .append("from docto_servico ds ")
				  .append("inner join conhecimento c on c.id_conhecimento = ds.id_docto_servico ")
				  .append("where 0=0 ")
				  .append("and c.tp_situacao_conhecimento in ('E', 'B') ")
				  .append("and ds.tp_documento_servico in ('CTR', 'CTE') ")
				  .append("and trunc(cast(ds.dh_emissao as date)) = ? ")
				  .append("and ds.id_filial_origem = ? ")
				  .append(") as CONHECTOS_DIA, ")
				  .append("( ")
				  .append("select ") 
				  .append("count(ds.id_docto_servico) ")
				  .append("from docto_servico ds ")
				  .append("inner join conhecimento c on c.id_conhecimento = ds.id_docto_servico ")
				  .append("where 0=0 ")
				  .append("and c.tp_situacao_conhecimento = 'C' ")
				  .append("and ds.tp_documento_servico in ('CTR', 'CTE') ")
				  .append("and trunc(cast(ds.dh_emissao as date)) = ? ")
				  .append("and ds.id_filial_origem = ? ")
				  .append(") as CONHECTOS_CANC, ")
				  .append("( ")
				  .append("select ") 
				  .append("count(m.id_manifesto) ")
				  .append("from manifesto m, manifesto_viagem_nacional mvn ")
				  .append("where 0=0 ")
				  .append("and m.tp_status_manifesto not in ('CA', 'PM') ")
				  .append("and trunc(cast(m.dh_emissao_manifesto as date)) = ? ")
				  .append("and m.id_filial_origem = ? ")
				  .append("and m.id_manifesto = mvn.id_manifesto_viagem_nacional ")
				  .append(") as MANIFESTOS_DIA, ")
				  .append("( ")
				  .append("select ") 
				  .append("count(m.id_manifesto) ")
				  .append("from manifesto m, manifesto_viagem_nacional mvn ")
				  .append("where 0=0 ")
				  .append("and m.tp_status_manifesto = 'CA' ")
				  .append("and trunc(cast(m.dh_emissao_manifesto as date)) = ? ")
				  .append("and m.id_filial_origem = ? ")
				  .append("and m.id_manifesto = mvn.id_manifesto_viagem_nacional ")
				  .append(") as MANIFESTOS_CANC, ")
				  .append("( ")
				  .append("select ") 
				  .append("count(ds.id_docto_servico) ")
				  .append("from docto_servico ds ")
				  .append("left outer join conhecimento c on c.id_conhecimento = ds.id_docto_servico ")
				  .append("left outer join nota_fiscal_servico nfs on nfs.id_nota_fiscal_servico = ds.id_docto_servico ")
				  .append("where 0=0 ")
				  .append("and ds.tp_documento_servico in ('NFS', 'NFT', 'NSE', 'NTE') ")
				  .append("and ( c.tp_situacao_conhecimento in ('E', 'B') or nfs.tp_situacao_nf <> 'C' ) ")
				  .append("and trunc(cast(ds.dh_emissao as date)) = ? ")
				  .append("and ds.id_filial_origem = ? ")
				  .append(") as NF_DIA, ")
				  .append("( ")
				  .append("select ") 
				  .append("count(ds.id_docto_servico) ")
				  .append("from docto_servico ds ")
				  .append("left outer join conhecimento c on c.id_conhecimento = ds.id_docto_servico ")
				  .append("left outer join nota_fiscal_servico nfs on nfs.id_nota_fiscal_servico = ds.id_docto_servico ")
				  .append("where 0=0 ")
				  .append("and ds.tp_documento_servico in ('NFS', 'NFT', 'NSE', 'NTE') ")
				  .append("and ( c.tp_situacao_conhecimento = 'C' or nfs.tp_situacao_nf = 'C' ) ")
				  .append("and trunc(cast(ds.dh_emissao as date)) = ? ")
				  .append("and ds.id_filial_origem = ? ")
				  .append(") as NF_CANC, ")
				  .append("( ")
				  .append("select ") 
				  .append("SUM(nvl(ds.vl_total_doc_servico, 0)) ") 
				  .append("from docto_servico ds ")
				  .append("left outer join conhecimento c on c.id_conhecimento = ds.id_docto_servico ")
				  .append("left outer join nota_fiscal_servico nfs on nfs.id_nota_fiscal_servico = ds.id_docto_servico ")
				  .append("where 0=0 ")
				  .append("and ds.tp_documento_servico in ('NFS', 'NFT', 'NSE', 'NTE') ")
				  .append("and ( c.tp_situacao_conhecimento in ('E', 'B') or nfs.tp_situacao_nf <> 'C' ) ")
				  .append("and trunc(cast(ds.dh_emissao as date)) = ? ")
				  .append("and ds.id_filial_origem = ? ")
				  .append(") as NF_TOT, ")
				  .append("( ")
				  .append("select ") 
				  .append("count(ds.id_docto_servico) ")
				  .append("from docto_servico ds ")
				  .append("inner join nota_debito_nacional ndn on ndn.id_nota_debito_nacional = ds.id_docto_servico ")
				  .append("where 0=0 ")
				  .append("and ndn.tp_situacao_nota_debito_nac not in ('P', 'C')  ")
				  .append("and trunc(cast(ds.dh_emissao as date)) = ? ")
				  .append("and ds.id_filial_origem = ? ")
				  .append(") as NFDEBITONACIONAL_DIA, ")
				  .append("( ")
				  .append("select ") 
				  .append("count(ds.id_docto_servico) ")
				  .append("from docto_servico ds ")
				  .append("inner join nota_debito_nacional ndn on ndn.id_nota_debito_nacional = ds.id_docto_servico ")
				  .append("where 0=0 ")
				  .append("and ndn.tp_situacao_nota_debito_nac = 'C' ")
				  .append("and trunc(cast(ds.dh_emissao as date)) = ? ")
				  .append("and ds.id_filial_origem = ? ")
				  .append(") as NFDEBITONACIONAL_CANC, ")
				  .append("( ")
				  .append("select ") 
				  .append("SUM(NVL(ds.vl_total_doc_servico, 0)) ")
				  .append("from docto_servico ds ")
				  .append("inner join nota_debito_nacional ndn on ndn.id_nota_debito_nacional = ds.id_docto_servico ")
				  .append("where 0=0 ")
				  .append("and ndn.tp_situacao_nota_debito_nac not in ('I', 'C') ")
				  .append("and trunc(cast(ds.dh_emissao as date)) = ? ")
				  .append("and ds.id_filial_origem = ? ")
				  .append(") as NFDEBITONACIONAL_TOT ")
			.toString()
			);
		
		sql.addFrom("dual");
		
		long i = System.currentTimeMillis();
		
		sql.addCustomCriteria(i + " = " + i);
		
		return sql.getSql();
	}
	
	public void setAcaoIntegracaoEventosService(
			AcaoIntegracaoEventosService acaoIntegracaoEventosService) {
		this.acaoIntegracaoEventosService = acaoIntegracaoEventosService;
	}
	
	public void setAcaoIntegracaoService(AcaoIntegracaoService acaoIntegracaoService) {
		this.acaoIntegracaoService = acaoIntegracaoService;
	}

	/**
	 * 
	 * Aplicar a regra que verifica conhecimentos com status "Pendentes" ao
	 * clicar em "Visualizar" sempre a competência informada (mês/ano) for menor
	 * do que mês/ano atual. Se exibir a mensagem de erro, logo após o usuário
	 * clicar no ok voltar para a tela de parâmetros do relatório.
	 * 
	 * @param parameters
	 * @return Boolean
	 */
	private Boolean checkPendings(TypedFlatMap parameters) {

		String competencia =  JTDateTimeUtils.convertFrameworkDateToFormat(parameters.getYearMonthDay("dtCompetencia").toString(), "MM/yyyy");		
		Long idFilial = parameters.getLong("filial.idFilial");
		YearMonthDay dtCompetencia = parameters.getYearMonthDay("dtCompetencia");

		YearMonthDay competenciaAtual = new YearMonthDay(System.currentTimeMillis());
		MonthYearDataType my;

		if (dtCompetencia.getMonthOfYear() < competenciaAtual.getMonthOfYear()) {

			int year = dtCompetencia.getYear();
			int month = dtCompetencia.getMonthOfYear();
			int lastDay = JTDateTimeUtils.getLastDayOfMonth(year, month);

			String inicio = "01/"+month+"/"+year;
			String fim = lastDay+"/"+month+"/"+year;

			Object[] criteria = {idFilial, inicio, fim};

			String sql = "SELECT count(*)" +
			"FROM conhecimento c," +
			" docto_servico ds" +
			" WHERE c.id_conhecimento = ds.id_docto_servico" +
			" and c.id_filial_origem = ?" +
			" and trunc(ds.dh_emissao) >= to_date(?, 'dd/mm/yyyy')" +
			" and trunc(ds.dh_emissao) <= to_date(?, 'dd/mm/yyyy') " +
			" AND tp_situacao_conhecimento = 'P'";

			int pendencias = getJdbcTemplate().queryForInt(sql, criteria);

			return pendencias != 0;
		} else
			return false;
	}

	public void setConteudoParametroFilialService(
            ConteudoParametroFilialService conteudoParametroFilialService) {
    	this.conteudoParametroFilialService = conteudoParametroFilialService;
    }
	
	public void setParametroFilialService(
            ParametroFilialService parametroFilialService) {
    	this.parametroFilialService = parametroFilialService;
    }

	public void setFilialService(FilialService filialService) {
    	this.filialService = filialService;
    }

	
}