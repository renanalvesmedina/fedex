package com.mercurio.lms.contasreceber.report;

import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.joda.time.YearMonthDay;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.jdbc.core.RowMapper;

import com.mercurio.adsm.core.util.ReflectionUtils;
import com.mercurio.adsm.framework.model.JodaTimeUtils;
import com.mercurio.adsm.framework.report.JRReportDataObject;
import com.mercurio.adsm.framework.report.ReportServiceSupport;
import com.mercurio.adsm.framework.util.SqlTemplate;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.service.ConversaoMoedaService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;

import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;

/**
 * Generated by: ADSM ActionGenerator
 * 
 * @author Rafael Andrade de Oliveira
 * @since 07/04/2006
 * 
 * Alterado por : José Rodrigo Moraes
 * Em : 30/08/2006
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contasreceber.emitirRelacaoConhecimentosInternacionaisEmitidosService"
 * @spring.property name="reportName" value="com/mercurio/lms/contasreceber/report/emitirRelacaoConhecimentosInternacionaisEmitidos.jasper" 
 */

public class EmitirRelacaoConhecimentosInternacionaisEmitidosService extends ReportServiceSupport {
	
	ConversaoMoedaService conversaoMoedaService;
	
	public JRReportDataObject execute(Map parameters) {
		
		String dtEmissaoInicial; 
		String dtEmissaoFinal; 

		Long clienteRemetente; 
		Long clienteDestinatario; 
		Long filialOrigem; 
		Long filialDestino; 
		Long filialCobranca; 
		Long idMoeda;
		
		TypedFlatMap tfm = (TypedFlatMap) parameters;
		
		/* Busca SqlTemplate */
		SqlTemplate sql = getSql(tfm);
	
		final Long idPaisDestino = SessionUtils.getPaisSessao().getIdPais();
		final Long idMoedaDestino = Long.valueOf(parameters.get("moeda.idMoeda").toString());
		final YearMonthDay dtAtual = JTDateTimeUtils.getDataAtual();
		
		List rel = getJdbcTemplate().query(sql.getSql(), JodaTimeUtils.jdbcPureParamConverter(getJdbcTemplate(), sql.getCriteria()), new RowMapper() {
			
			Map map = null;
			
			public Object mapRow(ResultSet rs, int arg1) throws SQLException {

				map = new HashMap();
				
				Long idMoeda = Long.valueOf(rs.getLong("MOEDA"));
				Long idPais = Long.valueOf(rs.getLong("PAIS"));
				
				BigDecimal vlExportacao = rs.getBigDecimal("EXPORTACAO");
				BigDecimal vlImportacao = rs.getBigDecimal("IMPORTACAO");
				
				BigDecimal novoVlExportacao = conversaoMoedaService.findConversaoMoeda(idPais, idMoeda, idPaisDestino, idMoedaDestino, dtAtual, vlExportacao);
				BigDecimal novoVlImportacao = conversaoMoedaService.findConversaoMoeda(idPais, idMoeda, idPaisDestino, idMoedaDestino, dtAtual, vlImportacao);
				
				map.put("EXPORTACAO", new Double(novoVlExportacao.doubleValue()));
				map.put("IMPORTACAO", new Double(novoVlImportacao.doubleValue()));
		
				map.put("EMISSAO", rs.getDate("EMISSAO"));
				
				map.put("CONHECIMENTO", rs.getString("CONHECIMENTO"));
				map.put("ORIGEM", rs.getString("ORIGEM"));
				map.put("DESTINO", rs.getString("DESTINO"));
				map.put("COBRANCA", rs.getString("COBRANCA"));
				
				String remetente = FormatUtils.formatIdentificacao(rs.getString("TP_IDENTIFICACAO_REMETENTE"), 
																   rs.getString("NR_IDENTIFICACAO_REMETENTE")
																  ) 
																  + " " 
																  + rs.getString("NOME_REMETENTE");
				
				String destinatario = FormatUtils.formatIdentificacao(rs.getString("TP_IDENTIFICACAO_DESTINATARIO"), 
						                                              rs.getString("NR_IDENTIFICACAO_DESTINATARIO")
						                                             ) 
						                                             + " " 
						                                             + rs.getString("NOME_DESTINATARIO"); 
					
				map.put("REMETENTE", remetente);
				map.put("DESTINATARIO", destinatario);
				map.put("PESO", new Double( rs.getDouble("PESO") ));
				map.put("CUBAGEM", rs.getBigDecimal("CUBAGEM"));
				
				return map;
				
			}
		});
		
		JRMapCollectionDataSource jrMap = new JRMapCollectionDataSource(rel);

		JRReportDataObject jr = createReportDataObject(jrMap, parameters);
		
		Map parametersReport = new HashMap();
		
		/* Tipo do relatório */
        parametersReport.put(JRReportDataObject.EXPORT_MODE_PARAM, parameters.get("tpFormatoRelatorio"));
		/* Parametros de pesquisa */
		parametersReport.put("parametrosPesquisa", sql.getFilterSummary());
		/* Usuario emissor */
		parametersReport.put("usuarioEmissor", SessionUtils.getUsuarioLogado().getNmUsuario());
		
		//seta atributos da instancia para utilizar nas chamadas dos subrelatorios
		dtEmissaoInicial 	= tfm.getString("dtEmissaoInicial");
		dtEmissaoFinal 		= tfm.getString("dtEmissaoFinal");
		clienteRemetente 	= tfm.getLong("clienteRemetente.idCliente");
		clienteDestinatario = tfm.getLong("clienteDestinatario.idCliente");
		filialOrigem 		= tfm.getLong("filialOrigem.idFilial");
		filialDestino 		= tfm.getLong("filialDestino.idFilial");
		filialCobranca 		= tfm.getLong("filialCobranca.idFilial");
		idMoeda				= tfm.getLong("moeda.idMoeda");
		
		parametersReport.put("clienteRemetente",clienteRemetente);
		parametersReport.put("clienteDestinatario",clienteDestinatario);
		parametersReport.put("filialOrigem",filialOrigem);
		parametersReport.put("filialDestino",filialDestino);
		parametersReport.put("filialCobranca",filialCobranca);
		parametersReport.put("idMoeda",idMoeda);
		parametersReport.put("dtEmissaoInicial",dtEmissaoInicial);
		parametersReport.put("dtEmissaoFinal",dtEmissaoFinal);
		
        jr.setParameters(parametersReport);
		
		return jr;
	}
	
	private SqlTemplate getSql(TypedFlatMap tfm) {
		
		SqlTemplate sql = createSqlTemplate();
		
		sql.addProjection("cast(ds.dh_emissao as date)", "EMISSAO");
		sql.addProjection("cto.sg_pais || '.' || cto.nr_permisso || '.' || cto.nr_crt", "CONHECIMENTO");
		sql.addProjection("fo.sg_filial", "ORIGEM");
		sql.addProjection("fd.sg_filial", "DESTINO");
		sql.addProjection("fc.sg_filial", "COBRANCA");
		sql.addProjection("pr.tp_identificacao", "TP_IDENTIFICACAO_REMETENTE");
		sql.addProjection("pr.nr_identificacao", "NR_IDENTIFICACAO_REMETENTE");
		sql.addProjection("pr.nm_pessoa", "NOME_REMETENTE");
		sql.addProjection("pd.tp_identificacao", "TP_IDENTIFICACAO_DESTINATARIO");
		sql.addProjection("pd.nr_identificacao", "NR_IDENTIFICACAO_DESTINATARIO");
		sql.addProjection("pd.nm_pessoa", "NOME_DESTINATARIO");
		sql.addProjection("NVL(SUM(tci.vl_frete_remetente), 0)", "EXPORTACAO");
		sql.addProjection("NVL(SUM(tci.vl_frete_destinatario), 0)", "IMPORTACAO");
		sql.addProjection("NVL(ds.ps_real, 0)", "PESO");
		sql.addProjection("NVL(ds.ps_aforado, 0)", "CUBAGEM");
		sql.addProjection("ds.id_moeda", "MOEDA");
		sql.addProjection("ds.id_pais", "PAIS");
		
		sql.addFrom("docto_servico", "ds");
		
		sql.addFrom("cto_internacional", "cto");
		sql.addJoin("cto.id_cto_internacional", "ds.id_docto_servico");
		
		sql.addFrom("trecho_cto_int", "tci");
		sql.addJoin("tci.id_cto_internacional", "cto.id_cto_internacional");
		
		sql.addFrom("cliente", "cr");
		sql.addJoin("cr.id_cliente", "ds.id_cliente_remetente");
		
		sql.addFrom("pessoa", "pr");
		sql.addJoin("pr.id_pessoa", "cr.id_cliente");
		
		sql.addFrom("cliente", "cd");
		sql.addJoin("cd.id_cliente", "ds.id_cliente_destinatario");
		
		sql.addFrom("pessoa", "pd");
		sql.addJoin("pd.id_pessoa", "cd.id_cliente");
		
		sql.addFrom("filial", "fo");
		sql.addJoin("fo.id_filial", "ds.id_filial_origem");
		
		sql.addFrom("filial", "fd");
		sql.addJoin("fd.id_filial", "ds.id_filial_destino");
		
		sql.addFrom("filial", "fc");
		sql.addJoin("fc.id_filial", "cr.id_filial_cobranca");
		
		sql.addCriteria("cto.tp_situacao_crt", "=", "E");
		
		sql.addCriteria("cast(ds.dh_emissao as date)", ">=", tfm.getYearMonthDay("dtEmissaoInicial"));
		sql.addFilterSummary("dataEmissaoInicial", tfm.getYearMonthDay("dtEmissaoInicial"));
		
		sql.addCriteria("cast(ds.dh_emissao as date)", "<=", tfm.getYearMonthDay("dtEmissaoFinal"));
		sql.addFilterSummary("dataEmissaoFinal", tfm.getYearMonthDay("dtEmissaoFinal"));

		if (tfm.getLong("filialOrigem.idFilial") != null) {
			sql.addCriteria("fo.id_filial", "=", tfm.getLong("filialOrigem.idFilial"));
			sql.addFilterSummary("filialOrigem", tfm.getString("sgFilialOrigem") + " - " + tfm.getString("filialOrigem.pessoa.nmFantasia"));
		}

		if (tfm.getLong("filialDestino.idFilial") != null) {
			sql.addCriteria("fd.id_filial", "=", tfm.getLong("filialDestino.idFilial"));
			sql.addFilterSummary("filialDestino", tfm.getString("sgFilialDestino") + " - " + tfm.getString("filialDestino.pessoa.nmFantasia"));
		}
		
		if (tfm.getLong("filialCobranca.idFilial") != null) {
			sql.addCriteria("fc.id_filial", "=", tfm.getLong("filialCobranca.idFilial"));
			sql.addFilterSummary("filialCobranca", tfm.getString("sgFilialCobranca") + " - " + tfm.getString("filialCobranca.pessoa.nmFantasia"));
		}

		sql.addCriteria("cr.id_cliente", "=", tfm.getLong("clienteRemetente.idCliente"));
		sql.addFilterSummary("clienteRemetente", tfm.getString("clienteRemetente.pessoa.nmPessoa"));
		
		sql.addCriteria("cd.id_cliente", "=", tfm.getLong("clienteDestinatario.idCliente"));
		sql.addFilterSummary("clienteDestinatario", tfm.getString("clienteDestinatario.pessoa.nmPessoa"));
		
		// moeda
		sql.addFilterSummary("moedaExibicao", tfm.getString("moeda.dsSimbolo"));
		
		sql.addGroupBy("ds.dh_emissao");
		sql.addGroupBy("cto.sg_pais");
		sql.addGroupBy("cto.nr_permisso");
		sql.addGroupBy("cto.nr_crt");
		sql.addGroupBy("fo.sg_filial");
		sql.addGroupBy("fd.sg_filial");
		sql.addGroupBy("fc.sg_filial");
		sql.addGroupBy("pr.tp_identificacao");
		sql.addGroupBy("pr.nr_identificacao");
		sql.addGroupBy("pr.nm_pessoa");
		sql.addGroupBy("pd.tp_identificacao");
		sql.addGroupBy("pd.nr_identificacao");
		sql.addGroupBy("pd.nm_pessoa");
		sql.addGroupBy("ds.ps_real");
		sql.addGroupBy("ds.ps_aforado");
		sql.addGroupBy("ds.id_moeda");
		sql.addGroupBy("ds.id_pais");
		
		sql.addOrderBy("ds.dh_emissao");
		sql.addOrderBy("cto.sg_pais");
		sql.addOrderBy("cto.nr_permisso");
		sql.addOrderBy("cto.nr_crt");
		
		return sql;
	} 

	public JRDataSource executeSubReport(Object[] param) throws Exception {		
		
		String fonte 					= (String) param[0];
		Long clienteRemetente 			= (Long) param[1];
		Long clienteDestinatario		= (Long) param[2]; 
		Long filialOrigem 				= (Long) param[3]; 
		Long filialDestino 				= (Long) param[4]; 
		Long filialCobranca 			= (Long) param[5]; 
		Long idMoeda 					= (Long) param[6];
		YearMonthDay dtEmissaoInicial 	= (YearMonthDay) ReflectionUtils.getConverterInstance().convert((String) param[7],YearMonthDay.class); 
		YearMonthDay dtEmissaoFinal 	= (YearMonthDay) ReflectionUtils.getConverterInstance().convert((String) param[8],YearMonthDay.class);		
		
		TypedFlatMap tfm = new TypedFlatMap();
		tfm.put("fonte",fonte);
		tfm.put("clienteRemetente",clienteRemetente);
		tfm.put("clienteDestinatario",clienteDestinatario);
		tfm.put("filialOrigem",filialOrigem);
		tfm.put("filialDestino",filialDestino);
		tfm.put("filialCobranca",filialCobranca);
		tfm.put("idMoeda",idMoeda);
		tfm.put("dtEmissaoInicial",dtEmissaoInicial);
		tfm.put("dtEmissaoFinal",dtEmissaoFinal);
		
		SqlTemplate sql = getSqlSubReport(tfm);		
		
		final Long idMoedaDestino = idMoeda;
		final YearMonthDay dtAtual = JTDateTimeUtils.getDataAtual();
		
		List rel = (List)getJdbcTemplate().query(sql.getSql(), JodaTimeUtils.jdbcPureParamConverter(getJdbcTemplate(), sql.getCriteria()), new ResultSetExtractor() {
			
			List lst = new ArrayList();
			final Long idPaisDestino = SessionUtils.getPaisSessao().getIdPais();
			String sgFilialAnterior;
			Double nc;
			Double total;
			Double peso;
			Double cubagem;
			String sgFilial;

			public Object extractData(ResultSet rs) throws SQLException, DataAccessException {
				
				Map map = null;
				
				limpaDados();
				
				while(rs.next()){
					
					map = new HashMap();
					
					Long idMoeda = Long.valueOf(rs.getLong("MOEDA"));
					Long idPais = Long.valueOf(rs.getLong("PAIS"));
					
					BigDecimal vlFrete = rs.getBigDecimal("FRETE");				
					BigDecimal novoVlFrete = conversaoMoedaService.findConversaoMoeda(idPais, idMoeda, idPaisDestino, idMoedaDestino, dtAtual, vlFrete);					
					
					sgFilial = rs.getString("FILIAL");
					
					if( sgFilialAnterior.equals("") ){
						sgFilialAnterior = sgFilial;
					} 
					
					if( sgFilialAnterior.equals(sgFilial) ){
						
						nc 		+= rs.getDouble("NC");
						total 	+= new Double(novoVlFrete.doubleValue());
						peso 	+= rs.getDouble("PESO");
						cubagem += rs.getDouble("CUBAGEM");
						
					} else {
						map.put("FILIAL",sgFilialAnterior);
						map.put("NC",nc);
						map.put("FRETE", total);
						map.put("PESO",peso);
						map.put("CUBAGEM",cubagem);
						
						lst.add(map);
						
						limpaDados();
						map = new HashMap();
						
						sgFilialAnterior = sgFilial;		
						nc 		+= rs.getDouble("NC");
						total 	+= new Double(novoVlFrete.doubleValue());
						peso 	+= rs.getDouble("PESO");
						cubagem += rs.getDouble("CUBAGEM");
					}
					
				}
				
				map.put("FILIAL",sgFilialAnterior);
				map.put("NC",nc);
				map.put("FRETE", total);
				map.put("PESO",peso);
				map.put("CUBAGEM",cubagem);
				
				lst.add(map);
				
				return lst;
			}
			
			private void limpaDados(){				
				sgFilialAnterior = "";
				nc 		= new Double(0);
				total 	= new Double(0);
				peso  	= new Double(0);
				cubagem = new Double(0);
			}
			
		});
		
		JRDataSource jrds = null;
		
		if( rel != null && !rel.isEmpty() ){
			jrds = new JRMapCollectionDataSource(rel);
		} else {
			jrds = new JREmptyDataSource();
		}
			
		return jrds;
	}
	
	private SqlTemplate getSqlSubReport(TypedFlatMap tfm) {
		
		SqlTemplate sql = createSqlTemplate();
		
		if( tfm.getString("fonte").equalsIgnoreCase("origem") ){
			sql.addProjection("fo.sg_filial", "FILIAL");
		} else if( tfm.getString("fonte").equalsIgnoreCase("destino") ){
			sql.addProjection("fd.sg_filial", "FILIAL");
		} else if( tfm.getString("fonte").equalsIgnoreCase("cobranca") ){
			sql.addProjection("fc.sg_filial", "FILIAL");
		}
		
		sql.addProjection("COUNT(ds.id_docto_servico)", "NC");
		sql.addProjection("NVL(SUM(ds.VL_TOTAL_DOC_SERVICO), 0)", "FRETE");
		sql.addProjection("NVL(SUM(ds.ps_real), 0)", "PESO");
		sql.addProjection("NVL(SUM(ds.ps_aforado), 0)", "CUBAGEM");
		sql.addProjection("ds.id_moeda", "MOEDA");
		sql.addProjection("ds.id_pais", "PAIS");
		
		sql.addFrom("docto_servico", "ds");
		
		sql.addFrom("cto_internacional", "cto");
		sql.addJoin("cto.id_cto_internacional", "ds.id_docto_servico");
		
		sql.addFrom("cliente", "cr");
		sql.addJoin("cr.id_cliente", "ds.id_cliente_remetente");
		
		sql.addFrom("pessoa", "pr");
		sql.addJoin("pr.id_pessoa", "cr.id_cliente");
		
		sql.addFrom("cliente", "cd");
		sql.addJoin("cd.id_cliente", "ds.id_cliente_destinatario");
		
		sql.addFrom("pessoa", "pd");
		sql.addJoin("pd.id_pessoa", "cd.id_cliente");
		
		sql.addFrom("filial", "fo");
		sql.addJoin("fo.id_filial", "ds.id_filial_origem");
		
		sql.addFrom("filial", "fd");
		sql.addJoin("fd.id_filial", "ds.id_filial_destino");
		
		sql.addFrom("filial", "fc");
		sql.addJoin("fc.id_filial", "cr.id_filial_cobranca");
		
		sql.addCriteria("cto.tp_situacao_crt", "=", "E");
		
		sql.addCriteria("cast(ds.dh_emissao as date)", ">=", tfm.getYearMonthDay("dtEmissaoInicial"));
		sql.addCriteria("cast(ds.dh_emissao as date)", "<=", tfm.getYearMonthDay("dtEmissaoFinal"));
		
		sql.addCustomCriteria("cto.id_cto_internacional in (select id_cto_internacional from TRECHO_CTO_INT)");
		
		sql.addCriteria("cr.id_cliente", "=", tfm.getLong("clienteRemetente"));
		sql.addCriteria("cd.id_cliente", "=", tfm.getLong("clienteDestinatario"));

		sql.addCriteria("fo.id_filial", "=", tfm.getLong("filialOrigem"));
		sql.addCriteria("fd.id_filial", "=", tfm.getLong("filialDestino"));
		sql.addCriteria("fc.id_filial", "=", tfm.getLong("filialCobranca"));

		// garante o sql diferente pro jasper nao fechar o resultset anterior
		long i = System.currentTimeMillis();
		sql.addCustomCriteria(i + " = " + i);
		
		if( tfm.getString("fonte").equalsIgnoreCase("origem") ){
			sql.addGroupBy("fo.sg_filial");
			sql.addOrderBy("fo.sg_filial");
		} else if( tfm.getString("fonte").equalsIgnoreCase("destino") ){
			sql.addGroupBy("fd.sg_filial");
			sql.addOrderBy("fd.sg_filial");
		} else if( tfm.getString("fonte").equalsIgnoreCase("cobranca") ){
			sql.addGroupBy("fc.sg_filial");
			sql.addOrderBy("fc.sg_filial");
		}		
		
		sql.addGroupBy("ds.id_moeda");
		sql.addGroupBy("ds.id_pais");
		
		return sql;
	}

	public void setConversaoMoedaService(ConversaoMoedaService conversaoMoedaService) {
		this.conversaoMoedaService = conversaoMoedaService;
	}	
	
}