package com.mercurio.lms.contasreceber.report;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;

import org.springframework.jdbc.core.RowMapper;

import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.JodaTimeUtils;
import com.mercurio.adsm.framework.model.hibernate.PropertyVarcharI18nProjection;
import com.mercurio.adsm.framework.report.JRReportDataObject;
import com.mercurio.adsm.framework.report.ReportServiceSupport;
import com.mercurio.adsm.framework.util.SqlTemplate;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.contasreceber.model.RelacaoCobranca;
import com.mercurio.lms.contasreceber.model.service.RelacaoCobrancaService;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 * 
 * @author Rafael Andrade de Oliveira
 * @since 03/04/2006
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contasreceber.emitirRelacoesCobrancasService"
 * @spring.property name="reportName" value="com/mercurio/lms/contasreceber/report/emitirRelacoesCobrancas.jasper" 
 */

public class EmitirRelacoesCobrancasService extends ReportServiceSupport {
	 
	protected RelacaoCobrancaService relacaoCobrancaService;

	public JRReportDataObject execute(Map parameters) {

		/* Busca SqlTemplate */
		SqlTemplate sql = getSql((TypedFlatMap) parameters);
		
		List rel = getJdbcTemplate().query(sql.getSql(), JodaTimeUtils.jdbcPureParamConverter(getJdbcTemplate(), sql.getCriteria()), new RowMapper() {
			
			public Object mapRow(ResultSet rs, int arg1) throws SQLException {

				Map map = new HashMap();
				
				Long idRelacaoCobranca = rs.getLong("ID_RELACAO_COBRANCA");
				
				map.put("NR_REL_COBRANCA",rs.getBigDecimal("NR_REL_COBRANCA"));
				map.put("FILIAL",rs.getString("FILIAL"));
				map.put("VALOR_FRETE",rs.getBigDecimal("VALOR_FRETE"));
				map.put("VALOR_DESCONTO",rs.getBigDecimal("VALOR_DESCONTO"));
				map.put("VALOR_TARIFA",rs.getBigDecimal("VALOR_TARIFA"));
				map.put("VALOR_JURO",rs.getBigDecimal("VALOR_JURO"));
				
				map.put("TIPO_DOCUMENTO",rs.getString("TIPO_DOCUMENTO"));
				map.put("SIGLA_FILIAL",rs.getString("SIGLA_FILIAL"));
				map.put("DOCUMENTO_SERVICO",rs.getString("DOCUMENTO_SERVICO"));
				map.put("VALOR_DOCUMENTO",rs.getBigDecimal("VALOR_DOCUMENTO"));
				
				map.put("DS_ORIGEM", rs.getString("DSORIGEM"));
            	
				map.put("NR_REDECO", rs.getString("NR_REDECO"));

				RelacaoCobranca rc = (RelacaoCobranca) relacaoCobrancaService.findById(idRelacaoCobranca);
            	
            	rc.setTpSituacaoRelacaoCobranca(new DomainValue("E"));//Emitida
            	
            	relacaoCobrancaService.store(rc);
                
                return map;
                
			}
			
		});	
				
		JRMapCollectionDataSource jrResult = new JRMapCollectionDataSource(rel);		

		Map parametersReport = new HashMap();
		
		/* Tipo do relatório */
        parametersReport.put(JRReportDataObject.EXPORT_MODE_PARAM, parameters.get("tpFormatoRelatorio"));
		/* Parametros de pesquisa */
		parametersReport.put("parametrosPesquisa", sql.getFilterSummary());
		/* Usuario emissor */
		parametersReport.put("usuarioEmissor", SessionUtils.getUsuarioLogado().getNmUsuario());
		
		JRReportDataObject jr = createReportDataObject(jrResult,parametersReport);
        
        jr.setParameters(parametersReport);
		
		return jr;
	}
	
	private SqlTemplate getSql(TypedFlatMap tfm) {

		Boolean listarDocumentosServicos = tfm.getBoolean("listarDocumentosServicos");
		
		SqlTemplate sql = createSqlTemplate();

		sql.addProjection("rc.nr_relacao_cobranca_filial", "NR_REL_COBRANCA");
		sql.addProjection("f.sg_filial", "FILIAL");
		sql.addProjection("rc.id_relacao_cobranca","ID_RELACAO_COBRANCA");
		
		sql.addProjection("rc.vl_frete", "VALOR_FRETE");
		sql.addProjection("rc.vl_desconto", "VALOR_DESCONTO");
		sql.addProjection("rc.vl_tarifa", "VALOR_TARIFA");
		sql.addProjection("rc.vl_juros", "VALOR_JURO");
		
		if (listarDocumentosServicos != null && 
				listarDocumentosServicos) {
			sql.addProjection(PropertyVarcharI18nProjection.createProjection("vdom.DS_VALOR_DOMINIO_I"), "TIPO_DOCUMENTO");
			sql.addProjection("fd.sg_filial", "SIGLA_FILIAL");
			sql.addProjection("ds.nr_docto_servico", "DOCUMENTO_SERVICO");
			sql.addProjection("ddsf.vl_devido", "VALOR_DOCUMENTO");
			
			sql.addFrom("dominio", "dom");
			sql.addFrom("valor_dominio", "vdom");
			sql.addJoin("dom.id_dominio", "vdom.id_dominio");
			sql.addCriteria("dom.NM_DOMINIO", "=", "DM_TIPO_DOCUMENTO_SERVICO");
			sql.addJoin("vdom.VL_VALOR_DOMINIO", "ds.tp_documento_servico");
		} else {
			sql.addProjection("'FAT'", "TIPO_DOCUMENTO");
			sql.addProjection("ff.sg_filial", "SIGLA_FILIAL");
			sql.addProjection("fat.nr_fatura", "DOCUMENTO_SERVICO");
			sql.addProjection("fat.vl_total", "VALOR_DOCUMENTO");
		}
		
		sql.addProjection("rc.DS_ORIGEM", "DSORIGEM");

		// quando existe redeco, mostrar no relatório
		sql.addProjection("decode (fr.sg_filial, null, null, fr.sg_filial || ' ' || to_char(red.nr_redeco, '0000000000'))", "NR_REDECO");

		sql.addFrom("relacao_cobranca", "rc");
		sql.addFrom("filial", "f");
		sql.addJoin("f.id_filial", "rc.id_filial");

		sql.addFrom("fatura", "fat");
		sql.addJoin("fat.id_relacao_cobranca", "rc.id_relacao_cobranca");
		
		sql.addFrom("filial", "ff");
		sql.addJoin("ff.id_filial", "fat.id_filial");
		
		sql.addFrom("redeco", "red");
		sql.addJoin("red.id_redeco(+)", "rc.id_redeco");

		sql.addFrom("filial", "fr");
		sql.addJoin("fr.id_filial(+)", "red.id_filial");
		
		if (listarDocumentosServicos != null &&
				listarDocumentosServicos) {
			sql.addFrom("item_fatura", "if");
			sql.addJoin("if.id_fatura", "fat.id_fatura");
			
			sql.addFrom("devedor_doc_serv_fat", "ddsf");
			sql.addJoin("ddsf.id_devedor_doc_serv_fat", "if.id_devedor_doc_serv_fat");
			
			sql.addFrom("docto_servico", "ds");
			sql.addJoin("ds.id_docto_servico", "ddsf.id_docto_servico");
			
			sql.addFrom("filial", "fd");
			sql.addJoin("fd.id_filial", "ds.ID_FILIAL_ORIGEM");
		}
		
		if(tfm.getLong("filial.idFilial") != null) {
			sql.addCriteria("f.id_filial", "=", tfm.getLong("filial.idFilial"));
			sql.addFilterSummary("filialCobranca", tfm.getString("sgFilial") + " - " + tfm.getString("filial.pessoa.nmFantasia"));
		}
		
		Long nrRelacaoCobranca = tfm.getLong("nrRelacaoCobranca");
		
		if( nrRelacaoCobranca == null ){
			sql.addCriteria("rc.tp_situacao_relacao_cobranca","=","A");//A emitir
		} else {
			sql.addCriteria("rc.nr_relacao_cobranca_filial", "=", nrRelacaoCobranca);
		}		
		
		sql.addFilterSummary("numeroRelacao", tfm.getLong("nrRelacaoCobranca"));
		
		sql.addOrderBy("f.sg_filial");
		sql.addOrderBy("rc.nr_relacao_cobranca_filial");
		
		if (listarDocumentosServicos != null &&
				listarDocumentosServicos) {
			sql.addOrderBy("fd.sg_filial");
			sql.addOrderBy("ds.nr_docto_servico");
		} else {
			sql.addOrderBy("ff.sg_filial");
			sql.addOrderBy("fat.nr_fatura");
		}
		
		//Se o parametro idReco é diferente de null, quer dizer que ele é chamado a partir da tela de redeco
		//e tem que fazer todo o relacionamento até o redeco
		if (tfm.getLong("idRedeco") != null){
			sql.addFrom("item_redeco", "itr");
			sql.addJoin("fat.id_fatura", "itr.id_fatura");
			sql.addCriteria("itr.id_redeco", "=", tfm.getLong("idRedeco"));		
		}
		
		return sql;
	}

	public void setRelacaoCobrancaService(
			RelacaoCobrancaService relacaoCobrancaService) {
		this.relacaoCobrancaService = relacaoCobrancaService;
	}
	
}