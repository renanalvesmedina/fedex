package com.mercurio.lms.contasreceber.report;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import net.sf.jasperreports.engine.data.JRMapCollectionDataSource;

import org.springframework.jdbc.core.RowMapper;

import com.mercurio.adsm.framework.model.JodaTimeUtils;
import com.mercurio.adsm.framework.model.hibernate.PropertyVarcharI18nProjection;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.report.JRReportDataObject;
import com.mercurio.adsm.framework.report.ReportServiceSupport;
import com.mercurio.adsm.framework.util.SqlTemplate;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.EnderecoPessoa;
import com.mercurio.lms.configuracoes.model.TelefoneEndereco;
import com.mercurio.lms.configuracoes.model.service.EnderecoPessoaService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *
 * @author Rafael Andrade de Oliveira
 * @since 10/04/2006
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contasreceber.emitirPrazoPagamentoClientesService"
 * @spring.property name="reportName" value="com/mercurio/lms/contasreceber/report/emitirPrazoPagamentoClientes.jasper"
 */

public class EmitirPrazoPagamentoClientesService extends ReportServiceSupport {

	DomainValueService domainValueService;
	
	EnderecoPessoaService enderecoPessoaService;
	
	public void setEnderecoPessoaService(EnderecoPessoaService enderecoPessoaService) {
		this.enderecoPessoaService = enderecoPessoaService;
	}

	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}


	public JRReportDataObject execute(Map parameters) {
		
		/* Busca SqlTemplate */
		SqlTemplate sql = getSql((TypedFlatMap) parameters);
		
		List rel = getJdbcTemplate().query(sql.getSql(), JodaTimeUtils.jdbcPureParamConverter(getJdbcTemplate(), sql.getCriteria()), new RowMapper() {
			
			public Object mapRow(ResultSet rs, int arg1) throws SQLException {

				Map map = new HashMap();
				
				map.put("SIGLAFILIAL", rs.getString("SIGLAFILIAL"));
				map.put("NOMEFILIAL", rs.getString("NOMEFILIAL"));
				
				String tpIdentificacao = rs.getString("TPIDENTIFICACAO");
				
				map.put("IDENTIFICACAO", FormatUtils.formatIdentificacao(tpIdentificacao, rs.getString("IDENTIFICACAO")));
				map.put("NOME", rs.getString("NOME"));
				
				long idPessoa = rs.getLong("PESSOA");
				
				EnderecoPessoa enderecoPessoa = new EnderecoPessoa();
				//busca endereço de cobrança, se não possuir busca endereço padrão
				enderecoPessoa = enderecoPessoaService.findEnderecoPessoaCobranca(Long.valueOf(idPessoa), JTDateTimeUtils.getDataAtual());
				if(enderecoPessoa != null){
					map.put("ENDERECO", enderecoPessoaService.getEnderecoCompleto(enderecoPessoa.getIdEnderecoPessoa()));
				}
				else{
					enderecoPessoa = enderecoPessoaService.findEnderecoPessoaPadrao(Long.valueOf(idPessoa), JTDateTimeUtils.getDataAtual());
					map.put("ENDERECO", enderecoPessoaService.getEnderecoCompleto(enderecoPessoa.getIdEnderecoPessoa()));
				}
				
				
				
				
				List telefones = enderecoPessoa.getTelefoneEnderecos();
				
				if (telefones != null && !telefones.isEmpty()) {
					TelefoneEndereco telefoneEndereco = (TelefoneEndereco) telefones.get(0);
					
					String ddd = telefoneEndereco.getNrDdd();
					String ddi = telefoneEndereco.getNrDdi();
					String numero = telefoneEndereco.getNrTelefone();
					
					map.put("FONE", FormatUtils.formatTelefone(numero, ddd, ddi));
				}
				
				map.put("DIVISAO", rs.getString("DIVISAO"));
				map.put("SERVICO", rs.getString("SERVICO"));
				map.put("PRAZO", new Double(rs.getDouble("PRAZO")));

				if (rs.getString("TPFRETE") != null) {
					map.put("TPFRETE", domainValueService.findDomainValueByValue("DM_TIPO_FRETE", rs.getString("TPFRETE")).getDescription().toString());
				}
				if (rs.getString("MODAL") != null) {
					map.put("MODAL", domainValueService.findDomainValueByValue("DM_MODAL", rs.getString("MODAL")).getDescription().toString());
				}
				if (rs.getString("ABRANGENCIA") != null) {
					map.put("ABRANGENCIA", domainValueService.findDomainValueByValue("DM_ABRANGENCIA", rs.getString("ABRANGENCIA")).getDescription().toString());
				}
				
				return map;
				
			}
		});
		
		JRMapCollectionDataSource jrMap = new JRMapCollectionDataSource(rel);

		JRReportDataObject jr = createReportDataObject(jrMap, parameters);
		
		Map parametersReport = new HashMap();
		
		/* Tipo do relatório */
        parametersReport.put(JRReportDataObject.EXPORT_MODE_PARAM, parameters.get("tpFormatoRelatorio"));
		/* Parametros de pesquisa */
		parametersReport.put("parametrosPesquisa", sql.getFilterSummary());
		/* Usuario emissor */
		parametersReport.put("usuarioEmissor", SessionUtils.getUsuarioLogado().getNmUsuario());
        
        jr.setParameters(parametersReport);
		
		return jr;
	}
	
	private SqlTemplate getSql(TypedFlatMap tfm) {
		
		SqlTemplate sql = createSqlTemplate();

		sql.addProjection("f.sg_filial", "SIGLAFILIAL");  
		sql.addProjection("pf.nm_fantasia", "NOMEFILIAL");
		sql.addProjection("pc.tp_identificacao", "TPIDENTIFICACAO");
		sql.addProjection("pc.nr_identificacao", "IDENTIFICACAO");
		sql.addProjection("pc.nm_pessoa", "NOME");
		sql.addProjection("pc.id_pessoa", "PESSOA");
		sql.addProjection("dc.ds_divisao_cliente", "DIVISAO");
		sql.addProjection("pv.tp_frete", "TPFRETE");
		sql.addProjection(PropertyVarcharI18nProjection.createProjection("s.ds_servico_i"), "SERVICO"); 
		sql.addProjection("pv.tp_modal", "MODAL");
		sql.addProjection("pv.tp_abrangencia", "ABRANGENCIA");
		sql.addProjection("pv.nr_prazo_pagamento", "PRAZO");
		

		sql.addFrom("cliente", "c");

		sql.addFrom("pessoa", "pc");
		sql.addJoin("pc.id_pessoa", "c.id_cliente");
		
		sql.addFrom("filial", "f");
		sql.addJoin("f.id_filial", "c.id_filial_cobranca");
		
		sql.addFrom("pessoa", "pf");
		sql.addJoin("pf.id_pessoa", "f.id_filial");
		
		sql.addFrom("divisao_cliente", "dc");
		sql.addJoin("dc.id_cliente", "nvl(c.id_cliente_matriz, c.id_cliente)");

		sql.addFrom("prazo_vencimento", "pv");
		sql.addJoin("pv.id_divisao_cliente", "dc.id_divisao_cliente");

		sql.addFrom("servico", "s");
		sql.addJoin("s.id_servico(+)", "pv.id_servico");
		
		
		if (tfm.getLong("filial.idFilial") != null) {
			sql.addCriteria("f.id_filial", "=", tfm.getLong("filial.idFilial"));
			sql.addFilterSummary("filial", tfm.getString("sgFilial") + " - " + tfm.getString("filial.pessoa.nmFantasia"));
		}
		
		if (!tfm.getDomainValue("modal").getValue().equals("")) {
			sql.addCustomCriteria("(pv.tp_modal is null or pv.tp_modal = ?)"); 
			sql.addCriteriaValue(tfm.getDomainValue("modal").getValue());
			sql.addFilterSummary("modal", domainValueService.findDomainValueByValue("DM_MODAL", tfm.getDomainValue("modal").getValue()).getDescription());
		}
		
		if (!tfm.getDomainValue("abrangencia").getValue().equals("")) {
			sql.addCustomCriteria("(pv.tp_abrangencia is null or pv.tp_abrangencia = ?)"); 
			sql.addCriteriaValue(tfm.getDomainValue("abrangencia").getValue());
			sql.addFilterSummary("abrangencia", domainValueService.findDomainValueByValue("DM_ABRANGENCIA", tfm.getDomainValue("abrangencia").getValue()).getDescription());
		}

		sql.addCriteria("pv.nr_prazo_pagamento", ">=", tfm.getLong("prazo"));
		sql.addFilterSummary("prazoSuperior", tfm.getLong("prazo"));
		
		sql.addOrderBy("f.sg_filial");
		sql.addOrderBy("pc.nm_pessoa");
		sql.addOrderBy("dc.ds_divisao_cliente");
		
		return sql;
	}
	
}