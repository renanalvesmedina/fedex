package com.mercurio.lms.expedicao.model.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudService;
import com.mercurio.lms.carregamento.model.PadraoCodigoBarra;
import com.mercurio.lms.carregamento.model.service.PadraoCodigoBarraService;
import com.mercurio.lms.configuracoes.model.ParametroGeral;
import com.mercurio.lms.configuracoes.model.service.ParametroGeralService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.expedicao.codigoBarrasService"
 */
public class CodigoBarrasService extends CrudService {
	
	private ParametroGeralService parametroGeralService;
	private PadraoCodigoBarraService padraoCodigoBarraService;
	private VolumeNotaFiscalService volumeNotaFiscalService;
	
	private static final String NR_ID_DISP_UNIT_BAG = "NR_ID_DISP_UNIT_BAG";
	private static final String NR_ID_CODBAR_VOLUME_COLETA = "NR_ID_CODBAR_VOLUME_COLETA";
	private static final String NR_ID_CODBAR_VOLUME = "NR_ID_CODBAR_VOLUME";
	private static final String NR_ID_DISP_UNIT_PALLET = "NR_ID_DISP_UNIT_PALLET";
	private static final String NR_ID_DISP_UNIT_COFRE = "NR_ID_DISP_UNIT_COFRE";
	private static final String NR_ID_CODBAR_MEIO_TRANSPORTE = "NR_ID_CODBAR_MEIO_TRANSPORTE";
	private static final String NR_ID_DISP_UNIT_GAIOLA = "NR_ID_DISP_UNIT_GAIOLA";
	private static final String NR_ID_CODBAR_ENDERECO = "NR_ID_CODBAR_ENDERECO";
	private static final String NR_ID_CODBAR_MEIO_TRANSPORTE_EV = "NR_ID_CODBAR_MEIO_TRANSPORTE_EV";
	
	
	public Map findIdCodigoBarras(){
		Map map = new HashMap();
		map.put("bag", getParametroGeral(NR_ID_DISP_UNIT_BAG));
		map.put("volumeColeta", getParametroGeral(NR_ID_CODBAR_VOLUME_COLETA));
		map.put("volume", getParametroGeral(NR_ID_CODBAR_VOLUME));
		map.put("pallet", getParametroGeral(NR_ID_DISP_UNIT_PALLET));
		map.put("cofre", getParametroGeral(NR_ID_DISP_UNIT_COFRE));
		map.put("meioTransporteProprio", getParametroGeral(NR_ID_CODBAR_MEIO_TRANSPORTE));
		map.put("meioTransporteEventual", getParametroGeral(NR_ID_CODBAR_MEIO_TRANSPORTE_EV));
		map.put("gaiola", getParametroGeral(NR_ID_DISP_UNIT_GAIOLA));
		map.put("macroZona", getParametroGeral(NR_ID_CODBAR_ENDERECO));
		
		map.put("listPadraoCodigoBarras", this.padraoCodBarListToMap(padraoCodigoBarraService.find(new HashMap())));
		
        return map;
	}
	
	private List<Map> padraoCodBarListToMap(List<PadraoCodigoBarra> listPadraoCodigoBarras) {
		List<Map> mapListPadraoCodigoBarras = new ArrayList<Map>();
		
		for(PadraoCodigoBarra padraoCodigoBarra : listPadraoCodigoBarras){
			Map map = new HashMap();
			map.put("idPadraoCodigoBarra", padraoCodigoBarra.getIdPadraoCodigoBarra());
			map.put("nmPadrao", padraoCodigoBarra.getNmPadrao());
			map.put("dsConteudo", padraoCodigoBarra.getDsConteudo());
			map.put("nrCaracter", padraoCodigoBarra.getNrCaracter());
			map.put("nrInicio", padraoCodigoBarra.getNrInicio());
			map.put("nrTamanho", padraoCodigoBarra.getNrTamanho());
			map.put("idCliente", padraoCodigoBarra.getCliente().getIdCliente());
			mapListPadraoCodigoBarras.add(map);
		}
		
		return mapListPadraoCodigoBarras;
	}

	public Boolean isVolume(String nrCodigoBarras) {
		return isVolume(nrCodigoBarras, false);
	}

	public Boolean isVolume(String nrCodigoBarras, boolean isFilialSorter) {	
		if(getParametroGeral(NR_ID_CODBAR_VOLUME).equals(nrCodigoBarras.substring(0, 2)) || volumeNotaFiscalService.validateIsEtiquetaMWW(nrCodigoBarras, isFilialSorter)) {
			return Boolean.TRUE;
		} else {
			return Boolean.FALSE;
		}
	}
	
	public Boolean validatePadraoCodigoBarra(String nrCodigoBarras) {
		List<PadraoCodigoBarra> listPadraoCodigoBarra = padraoCodigoBarraService.findPadraoCodigoBarraByNrCaracter(nrCodigoBarras);
		if(listPadraoCodigoBarra != null && listPadraoCodigoBarra.size() > 0){
			for(PadraoCodigoBarra padraoCodigoBarra : listPadraoCodigoBarra){
				if(padraoCodigoBarra.getNrInicio() < padraoCodigoBarra.getNrCaracter() && 
						padraoCodigoBarra.getNrCaracter() <= padraoCodigoBarra.getNrTamanho().intValue()){
					if(padraoCodigoBarra.getDsConteudo().equals(nrCodigoBarras.substring(padraoCodigoBarra.getNrInicio() , padraoCodigoBarra.getNrCaracter()))) {
						return Boolean.TRUE;
					}
				}
			}
		}
		return Boolean.FALSE;
	}
	
	private String getParametroGeral(String nmParam){
		ParametroGeral param = getParametroGeralService().findByNomeParametro(nmParam, Boolean.FALSE);
		if (param!=null) {
			return param.getDsConteudo();
		}else{
			return null;
		}
	}

	public static boolean validateDv(String valor){
		String codigo = valor.substring(0, valor.length()-1);
    	String dv = valor.substring(valor.length()-1, valor.length());

    	int digitoCalculado = calculaDv(codigo);
    	
    	if(digitoCalculado == Integer.valueOf(dv).intValue()){
    		return true;
    	} else {
    		return false;
    	}
	}

	private static int calculaDv(String codigo) {
		int multiplicador = 2;
    	int soma = 0;
    	for (int i = codigo.length()-1; i >= 0 ; i--) {
    		soma += Integer.valueOf(codigo.substring(i, i+1)) * multiplicador;
    		multiplicador = multiplicador==9? 2 : multiplicador+1;
		}
    	
    	int resto = soma % 11;
    	int digitoCalculado = (resto==0 || resto==1) ? 0 : 11 - resto;
		return digitoCalculado;
	}
	
	/**
	 * @param nrCodigoBarras Codigo de barras com DV
	 * @return
	 */
	public static Long incrementaCodigo(Long nrCodigoBarras){
		Long codigo = nrCodigoBarras/10;
		return Long.valueOf(String.valueOf(++codigo) + calculaDv(String.valueOf(codigo)));
	}
	
	/**
	 * @param nrCodigoBarras Codigo de barras com DV
	 * @return
	 */
	public static Long decrementaCodigo(Long nrCodigoBarras){
		Long codigo = nrCodigoBarras/10;
		return Long.valueOf(String.valueOf(--codigo) + calculaDv(String.valueOf(codigo)));
	}

	public void setParametroGeralService(ParametroGeralService parametroGeralService) {
		this.parametroGeralService = parametroGeralService;
	}

	public ParametroGeralService getParametroGeralService() {
		return parametroGeralService;
	}

	public PadraoCodigoBarraService getPadraoCodigoBarraService() {
		return padraoCodigoBarraService;
}

	public void setPadraoCodigoBarraService(
			PadraoCodigoBarraService padraoCodigoBarraService) {
		this.padraoCodigoBarraService = padraoCodigoBarraService;
	}

	public void setVolumeNotaFiscalService(VolumeNotaFiscalService volumeNotaFiscalService) {
		this.volumeNotaFiscalService = volumeNotaFiscalService;
	}
}
