package com.mercurio.lms.vendas.model.service;

import java.util.List;

import org.apache.commons.collections.MapUtils;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.lms.configuracoes.model.Servico;
import com.mercurio.lms.expedicao.DocumentoServicoFacade;
import com.mercurio.lms.expedicao.model.CalculoFrete;
import com.mercurio.lms.expedicao.model.Dimensao;
import com.mercurio.lms.expedicao.util.CalculoFreteUtils;
import com.mercurio.lms.expedicao.util.ConstantesExpedicao;
import com.mercurio.lms.municipios.model.Aeroporto;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.McdService;
import com.mercurio.lms.municipios.model.service.MunicipioFilialService;
import com.mercurio.lms.util.IntegerUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.vendas.model.Cotacao;

/**
 * Generated by: ADSM ActionGenerator
 * @author Andre Valadas
 *
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.vendas.cotacaoFreteViaWebService"
 */
public class CotacaoFreteViaWebService extends AbstractCotacaoService {
	private McdService mcdService;
	private DocumentoServicoFacade documentoServicoFacade;
	private ProibidoEmbarqueService proibidoEmbarqueService;
	private MunicipioFilialService municipioFilialService;
	private LiberacaoEmbarqueService liberacaoEmbarqueService;
	private FilialService filialService;

	/**
	 * Valida Restricoes da Cotacao Web
	 * @param cotacao
	 */
	public void validateCotacao(Cotacao cotacao) {
		validadeDimensoes(cotacao);
		validateEmbarqueProibido(cotacao);
		validateMunicipioEntrega(cotacao);
	}

	/**
	 * Valida se foi informado ao menos uma Dimensao 
	 * @param cotacao
	 */
	private void validadeDimensoes(Cotacao cotacao) {
		List<Dimensao> dimensoes = cotacao.getDimensoes();
		if( (dimensoes == null) || (dimensoes.isEmpty()) ) {
			throw new BusinessException("LMS-01092");
		}
	}

	/**
	 * Valida Embarque Proibido
	 * @param cotacao
	 */
	private void validateEmbarqueProibido(Cotacao cotacao) {
		Long idCliente = cotacao.getClienteByIdCliente().getIdCliente();
		Integer nrCountEmbarque = proibidoEmbarqueService.getRowCountProibidoByIdCliente(idCliente);
		if (IntegerUtils.hasValue(nrCountEmbarque)) {
			throw new BusinessException("LMS-01137");
		}
	}

	/**
	 * Valida Municipio de Entrega
	 * @param cotacao
	 */
	private void validateMunicipioEntrega(Cotacao cotacao) {
		if (isServicoRodoviario(cotacao.getServico())) {
			Long idMunicipioDestino = cotacao.getMunicipioByIdMunicipioDestino().getIdMunicipio();
			Integer nrCountMunicipio = municipioFilialService.getRowCountMunicipioFilial(
				 cotacao.getMunicipioByIdMunicipioDestino().getIdMunicipio()
				,Boolean.FALSE
				,Boolean.TRUE
				,JTDateTimeUtils.getDataAtual());

			//Se existe Municipio
			if (IntegerUtils.hasValue(nrCountMunicipio)) {
				Integer nrCountLiberacao = liberacaoEmbarqueService.getRowCountByIdMunicipioIdClienteModal(
					 idMunicipioDestino
					,cotacao.getClienteByIdCliente().getIdCliente()
					,cotacao.getServico().getTpModal().getValue());
				//Se não existir liberacao, o Embarque esta Bloqueado.
				if (!IntegerUtils.hasValue(nrCountLiberacao)) {	
					throw new BusinessException("LMS-01138");
				}
			}
		}
	}

	private boolean isServicoRodoviario(Servico servico) {
		return servico != null && servico.hasModal(ConstantesExpedicao.MODAL_RODOVIARIO);
	}

	/**
	 * Calcula Frete Cotacao Web
	 * @param cotacao
	 * @param calculoFrete
	 */
	public void findCalculoFrete(Cotacao cotacao, CalculoFrete calculoFrete) {
		calculoFrete.setTpConhecimento(ConstantesExpedicao.CONHECIMENTO_NORMAL);
		calculoFrete.setTpAbrangencia(ConstantesExpedicao.ABRANGENCIA_NACIONAL);
		calculoFrete.setTpCalculo(ConstantesExpedicao.CALCULO_COTACAO);
		calculoFrete.setTpFrete(cotacao.getTpFrete().getValue());

		calculoFrete.setPsRealInformado(cotacao.getPsReal());
		calculoFrete.setPsCubadoInformado(cotacao.getPsCubado());
		calculoFrete.setIdDensidade(ConstantesExpedicao.ID_DENSIDADE_MERCURIO);
		//Cliente
		calculoFrete.setClienteBase(cotacao.getClienteByIdCliente());
		calculoFrete.setIdDivisaoCliente(cotacao.getDivisaoCliente().getIdDivisaoCliente());
		//Cep de Origem/Destino
		calculoFrete.setNrCepColeta(cotacao.getMunicipioByIdMunicipioOrigem().getNrCep());
		calculoFrete.setNrCepEntrega(cotacao.getMunicipioByIdMunicipioDestino().getNrCep());

		calculoFrete.setVlMercadoria(cotacao.getVlMercadoria());
		calculoFrete.setTpModal(cotacao.getServico().getTpModal().getValue());
		calculoFrete.setIdServico(cotacao.getServico().getIdServico());

		//Tarifa
		calculoFrete.setIdTarifa(mcdService.findTarifaMunicipios(
			cotacao.getMunicipioByIdMunicipioOrigem().getIdMunicipio(),
			cotacao.getMunicipioByIdMunicipioDestino().getIdMunicipio(),
			calculoFrete.getIdServico()));

		//Ativa a opção de calculo do frete e desativa o cálculo de Serviços Adicionais
		calculoFrete.setBlCalculaParcelas(Boolean.TRUE);
		calculoFrete.setBlCalculaServicosAdicionais(Boolean.FALSE);
		calculoFrete.setBlColetaEmergencia(Boolean.FALSE);
		calculoFrete.setBlEntregaEmergencia(Boolean.FALSE);

		//Modal Aereo
		if(ConstantesExpedicao.MODAL_AEREO.equals(calculoFrete.getTpModal())) {
			//Aeroportos
			Long idAeroportoOrigem = MapUtils.getLong(filialService.findAeroportoFilial(cotacao.getFilialByIdFilialOrigem().getIdFilial()), "idAeroporto");
			Aeroporto aeroportoOrigem = new Aeroporto();
			aeroportoOrigem.setIdAeroporto(idAeroportoOrigem);
			cotacao.setAeroportoByIdAeroportoOrigem(aeroportoOrigem);
	
			Long idAeroportoDestino = MapUtils.getLong(filialService.findAeroportoFilial(cotacao.getFilialByIdFilialDestino().getIdFilial()), "idAeroporto");
			Aeroporto aeroportoDestino = new Aeroporto();
			aeroportoDestino.setIdAeroporto(idAeroportoDestino);
			cotacao.setAeroportoByIdAeroportoDestino(aeroportoDestino);
		}

		/** Dados Clientes */
		validateDadosCliente(cotacao, calculoFrete);

		/** Executa Calculo Frete */
		documentoServicoFacade.executeCalculoCotacaoViaWeb(calculoFrete);
		CalculoFreteUtils.copyResult(cotacao, calculoFrete);
	}

	public void setMcdService(McdService mcdService) {
		this.mcdService = mcdService;
	}
	public void setDocumentoServicoFacade(DocumentoServicoFacade documentoServicoFacade) {
		this.documentoServicoFacade = documentoServicoFacade;
	}
	public void setLiberacaoEmbarqueService(LiberacaoEmbarqueService liberacaoEmbarqueService) {
		this.liberacaoEmbarqueService = liberacaoEmbarqueService;
	}
	public void setMunicipioFilialService(MunicipioFilialService municipioFilialService) {
		this.municipioFilialService = municipioFilialService;
	}
	public void setProibidoEmbarqueService(ProibidoEmbarqueService proibidoEmbarqueService) {
		this.proibidoEmbarqueService = proibidoEmbarqueService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
}