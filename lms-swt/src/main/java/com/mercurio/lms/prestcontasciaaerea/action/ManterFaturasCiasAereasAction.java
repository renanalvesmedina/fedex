package com.mercurio.lms.prestcontasciaaerea.action;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.beanutils.BeanComparator;
import org.apache.commons.collections.IteratorUtils;
import org.apache.commons.collections.comparators.ComparatorChain;
import org.apache.commons.collections.comparators.NullComparator;

import com.mercurio.adsm.core.InfrastructureException;
import com.mercurio.adsm.core.util.Base64Util;
import com.mercurio.adsm.core.util.ReflectionUtils;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.FindDefinition;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.masterdetail.ItemList;
import com.mercurio.adsm.framework.model.masterdetail.ItemListConfig;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailAction;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailFactory;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailKey;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntry;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntryConfig;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.service.UsuarioLMSService;
import com.mercurio.lms.expedicao.model.Awb;
import com.mercurio.lms.expedicao.model.service.AwbService;
import com.mercurio.lms.expedicao.util.AwbUtils;
import com.mercurio.lms.expedicao.util.ConstantesAwb;
import com.mercurio.lms.expedicao.util.ConstantesExpedicao;
import com.mercurio.lms.municipios.model.Empresa;
import com.mercurio.lms.municipios.model.service.EmpresaService;
import com.mercurio.lms.prestcontasciaaerea.model.FaturaCiaAerea;
import com.mercurio.lms.prestcontasciaaerea.model.FaturaCiaAereaAnexo;
import com.mercurio.lms.prestcontasciaaerea.model.ItemFaturaCiaAerea;
import com.mercurio.lms.prestcontasciaaerea.model.service.FaturaCiaAereaService;
import com.mercurio.lms.util.ArquivoUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.LongUtils;
import com.mercurio.lms.util.session.SessionUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Generated by: ADSM ActionGenerator
 * 
 * Não inserir documentação após ou remover a tag do XDoclet a seguir. O valor
 * do <code>id</code> informado abaixo deve ser utilizado para referenciar este
 * serviço.
 * 
 * @spring.bean id="lms.prestcontasciaaerea.swt.manterFaturasCiasAereasAction"
 */

public class ManterFaturasCiasAereasAction extends MasterDetailAction {

	private static final String SG_EMPRESA = "sgEmpresa";
	private Logger log = LogManager.getLogger(this.getClass());
	private EmpresaService empresaService;
	private AwbService awbService;
	private UsuarioLMSService usuarioLMSService;

	/**
	 * 
	 * @param faturaCiaAerea
	 * @return
	 */
	private Map<String, Object> converterFaturaCiaAereaParaMap(FaturaCiaAerea faturaCiaAerea){
		Map<String, Object> map = new HashMap<String, Object>();

		map.put("idFaturaCiaAerea", faturaCiaAerea.getIdFaturaCiaAerea());
		map.put("idEmpresa", faturaCiaAerea.getCiaAerea().getIdEmpresa());
		map.put("nmPessoa", faturaCiaAerea.getCiaAerea().getPessoa().getNmPessoa());
		map.put("nrFaturaCiaAerea", faturaCiaAerea.getNrFaturaCiaAerea());
		map.put("dtEmissao", faturaCiaAerea.getDtEmissao());
		map.put("dtVencimento", faturaCiaAerea.getDtVencimento());
		map.put("dtPeriodoInicial", faturaCiaAerea.getDtPeriodoInicial());
		map.put("dtPeriodoFinal", faturaCiaAerea.getDtPeriodoFinal());
		map.put("vlDesconto", faturaCiaAerea.getVlDesconto());
		map.put("vlAcrescimo", faturaCiaAerea.getVlAcrescimo());
		map.put("obFatura", faturaCiaAerea.getObFatura());
		map.put("dtInclusao", faturaCiaAerea.getDtInclusao());
		map.put("dtEnvioJDE", faturaCiaAerea.getDtEnvioJDE());
		map.put("dtPagamento", faturaCiaAerea.getDtPagamento());
		
		return map;
	}

	/**
	 * 
	 * @param map
	 * @param faturaCiaAerea
	 * @return
	 */
	private FaturaCiaAerea popularFaturaCiaAerea(TypedFlatMap map, FaturaCiaAerea faturaCiaAerea){
		faturaCiaAerea.setIdFaturaCiaAerea(map.getLong("idFaturaCiaAerea"));
		Empresa ciaAerea = new Empresa();
		ciaAerea.setIdEmpresa(map.getLong("idEmpresa"));
		faturaCiaAerea.setCiaAerea(ciaAerea);
		
		faturaCiaAerea.setNrFaturaCiaAerea(map.getLong("nrFaturaCiaAerea"));
		faturaCiaAerea.setDtEmissao(map.getYearMonthDay("dtEmissao"));
		faturaCiaAerea.setDtVencimento(map.getYearMonthDay("dtVencimento"));
		faturaCiaAerea.setDtPeriodoInicial(map.getYearMonthDay("dtPeriodoInicial"));
		faturaCiaAerea.setDtPeriodoFinal(map.getYearMonthDay("dtPeriodoFinal"));
		faturaCiaAerea.setVlDesconto(map.getBigDecimal("vlDesconto"));
		faturaCiaAerea.setVlAcrescimo(map.getBigDecimal("vlAcrescimo"));
		faturaCiaAerea.setObFatura(map.getString("obFatura"));
		faturaCiaAerea.setDtEnvioJDE(map.getYearMonthDay("dtEnvioJDE"));
		faturaCiaAerea.setDtPagamento(map.getYearMonthDay("dtPagamento"));
		faturaCiaAerea.setDtInclusao(map.getYearMonthDay("dtInclusao"));
		
		return faturaCiaAerea;
	}
	
	/**
	 * 
	 * @param itemFaturaCiaAerea
	 * @return
	 */
	private Map<String, Object> converterItemFaturaCiaAereaParaMap(ItemFaturaCiaAerea itemFaturaCiaAerea){
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("idItemFaturaCiaAerea", itemFaturaCiaAerea.getIdItemFaturaCiaAerea());
		map.put("idAwb", itemFaturaCiaAerea.getAwb().getIdAwb());
		map.put("nrAwb", AwbUtils.getNrAwb(itemFaturaCiaAerea.getAwb()));
		map.put("dsSerieAwb", itemFaturaCiaAerea.getAwb().getDsSerie());
		map.put("idEmpresaCiaAerea", itemFaturaCiaAerea.getAwb().getCiaFilialMercurio().getEmpresa().getIdEmpresa());
		map.put("sgEmpresa", itemFaturaCiaAerea.getAwb().getCiaFilialMercurio().getEmpresa().getSgEmpresa());
		map.put("tpStatusAwb", itemFaturaCiaAerea.getAwb().getTpStatusAwb().getValue());
		map.put("psCobrado", itemFaturaCiaAerea.getPsCobrado());
		map.put("vlCobrado", itemFaturaCiaAerea.getVlCobrado());
		map.put("vlFrete", itemFaturaCiaAerea.getAwb().getVlFreteCalculado());
		map.put("vlDiferencaFrete", itemFaturaCiaAerea.getVlDiferencaFrete());
		map.put("vlDesconto", itemFaturaCiaAerea.getVlDesconto());
		map.put("vlAcrescimo", itemFaturaCiaAerea.getVlAcrescimo());
		
		BigDecimal vlFinal = itemFaturaCiaAerea.getVlDesconto().subtract(itemFaturaCiaAerea.getVlAcrescimo());
		if (itemFaturaCiaAerea.getAwb().getVlFreteCalculado() != null) {
			vlFinal = vlFinal.add(itemFaturaCiaAerea.getAwb().getVlFreteCalculado());
		} 
		map.put("vlFinal", vlFinal);
		
		return map;
	}
	
	/**
	 * 
	 * @param itemFaturaCiaAerea
	 */
	private void populateTransientsItemFaturaCiaAerea(ItemFaturaCiaAerea itemFaturaCiaAerea){
		Awb awb = itemFaturaCiaAerea.getAwb();
		Empresa empresa= awb.getCiaFilialMercurio().getEmpresa();
		itemFaturaCiaAerea.setDsSerie(awb.getDsSerie());
		itemFaturaCiaAerea.setNrAwb(awb.getNrAwb());
		itemFaturaCiaAerea.setDvAwb(awb.getDvAwb());
		itemFaturaCiaAerea.setNrAwbFormatado(empresa.getSgEmpresa() + " " + AwbUtils.getNrAwbFormated(awb.getDsSerie(), awb.getNrAwb(), awb.getDvAwb()));
		itemFaturaCiaAerea.setDhEmissao(awb.getDhEmissao());
		itemFaturaCiaAerea.setTpStatusAwb(awb.getTpStatusAwb());
		itemFaturaCiaAerea.setVlFrete(awb.getVlFreteCalculado());
		itemFaturaCiaAerea.setQtVolumes(awb.getQtVolumes());
		itemFaturaCiaAerea.setPsTotal(awb.getPsTotal());
		itemFaturaCiaAerea.setPsCubado(awb.getPsCubado());
		itemFaturaCiaAerea.setSgAeroportoOrigem(awb.getAeroportoByIdAeroportoOrigem().getSgAeroporto());
		itemFaturaCiaAerea.setSgAeroportoDestino(awb.getAeroportoByIdAeroportoDestino().getSgAeroporto());
		
		if (itemFaturaCiaAerea.getVlFrete() != null) {
			itemFaturaCiaAerea.setVlDiferencaFrete(itemFaturaCiaAerea.getVlCobrado().subtract(itemFaturaCiaAerea.getVlFrete()));
		} else {
			itemFaturaCiaAerea.setVlDiferencaFrete(itemFaturaCiaAerea.getVlCobrado());
		}
	}
	
	/**	 
	 * Salva a referencia do objeto Master na sessão.
	 * não devem ser inicializadas as coleções que representam os filhos
	 * já que o usuário pode vir a não utilizar a aba de filhos, evitando assim
	 * a carga desnecessária de objetos na sessão e a partir do banco de dados.
	 * 
	 * @param id
	 * @return Object
	 */
	public Map<String, Object> findById(Long id) {
		FaturaCiaAerea faturaCiaAerea = this.getFaturaCiaAereaService().findById(id);
		putMasterInSession(faturaCiaAerea);
		return converterFaturaCiaAereaParaMap(faturaCiaAerea);
	}
	
	/**
	 * 
	 * @param id
	 */
	public void removeById(Long id) {
		this.getFaturaCiaAereaService().removeById(id);
		removeMasterFromSession();
    }
	
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List<Long> ids) {
		this.getFaturaCiaAereaService().removeByIds(ids);
    }
	
	@Override
	protected MasterEntryConfig createMasterConfig(MasterDetailFactory masterFactory) {
		/**
		 * Declaracao da classe pai
		 */
		MasterEntryConfig config = masterFactory.createMasterEntryConfig(FaturaCiaAerea.class,true);

		/* Ordenação dos registros da grid da aba "AWB´s". */
		ComparatorChain itemFaturaCiaAereaComparator = new ComparatorChain();
		itemFaturaCiaAereaComparator.addComparator(new BeanComparator("dsSerie", new NullComparator(false)));
		itemFaturaCiaAereaComparator.addComparator(new BeanComparator("nrAwb"));
		
		/**
		 * Esta instancia é responsavel por carregar os 
		 * items filhos na sessão a partir do banco de dados.
		 */
		ItemListConfig itemListConfigItensFatura = new ItemListConfig() {
 
			/**
			 * Find paginated do filho
			 * Passa por este ponto apenas na primeira vez em que a list filha e chamada.
			 * Apos a primeira vez ela e carregada da memoria
			 * 
			 * @param masterId id do pai
			 * @param parameters todos os parametros vindo da tela pai
			 */			
			public List initialize(Long masterId, Map parameters) {
				return getFaturaCiaAereaService().findItemFaturaCiaAereaByIdFaturaCiaAerea(masterId);
			}

			/**
			 * Busca rowCount da grid da tela filha
			 * Passa por este ponto apenas na primeira vez em que a list filha e chamada.
			 * Apos a primeira vez ela e carregada da memoria
			 * 
			 * @param masterId id do pai
			 * @param parameters todos os parametros vindo da tela pai
			 */			
			public Integer getRowCount(Long masterId, Map parameters) {
				return getFaturaCiaAereaService().getRowCountItemFaturaCiaAerea(masterId);
			}
			
			/**
			 * Todos os dados a serem carregados na grid pelo form passam antes por este
			 * metodo. Para se fazer uma validacao...
			 * Recomenda-se que o bean em questao seja gerado nesta classe a partir dos
			 * parametros enviados da tela para se evitar um 'ReflectionUtils'
			 * 
			 * @param parameters 
			 * @param bean a ser istanciado
			 * @return Object bean instanciado
			 */
			public Object populateNewItemInstance(Map parameters, Object bean) {
				TypedFlatMap map = new TypedFlatMap(parameters);
				
				FaturaCiaAerea faturaCiaAerea = new FaturaCiaAerea();
				faturaCiaAerea = popularFaturaCiaAerea(map, faturaCiaAerea);
				
				ItemFaturaCiaAerea itemFaturaCiaAerea = (ItemFaturaCiaAerea) bean;
				itemFaturaCiaAerea.setIdItemFaturaCiaAerea(map.getLong("idItemFaturaCiaAerea"));
				itemFaturaCiaAerea.setAwb(getAwbService().findById(map.getLong("idAwb")));
				itemFaturaCiaAerea.setPsCobrado(map.getBigDecimal("psCobrado"));
				itemFaturaCiaAerea.setVlCobrado(map.getBigDecimal("vlCobrado"));
				itemFaturaCiaAerea.setVlDesconto(map.getBigDecimal("vlDesconto"));
				itemFaturaCiaAerea.setVlAcrescimo(map.getBigDecimal("vlAcrescimo"));
				populateTransientsItemFaturaCiaAerea(itemFaturaCiaAerea);
				
				if(parameters.get("executarRotinaValidacaoAwb") != null && Boolean.TRUE.equals((Boolean) parameters.get("executarRotinaValidacaoAwb"))){
					Long masterId = getMasterId(parameters);
			    	MasterEntry entry = getMasterFromSession(masterId, true);
					ItemList itemFaturaCiaAereaList = entry.getItems("listaItemFaturaCiaAerea");
					ItemListConfig itemFaturaCiaAereaConfig = getMasterConfig().getItemListConfig("listaItemFaturaCiaAerea");
					
					Iterator<ItemFaturaCiaAerea> itItemFaturaCiaAerea = itemFaturaCiaAereaList.iterator(masterId, itemFaturaCiaAereaConfig);
					List<ItemFaturaCiaAerea> listaItemFaturaCiaAerea = IteratorUtils.toList(itItemFaturaCiaAerea);
					
					getFaturaCiaAereaService().validateAwb(itemFaturaCiaAerea, listaItemFaturaCiaAerea, faturaCiaAerea);
				}
				
				return itemFaturaCiaAerea;
			}
			
			@SuppressWarnings("unchecked")
			public void modifyItemValues(Object newBean, Object oldBean) {
				Set ignore = new HashSet();
				ignore.add("idItemFaturaCiaAerea");
				ignore.add("faturaCiaAerea");				
				ReflectionUtils.syncObjectProperties(oldBean, newBean, ignore);				
			}
		};
		
		
		/* Ordenação dos registros da grid da aba "Anexos". */
		BeanComparator faturaCiaAereaAnexoComparator = new BeanComparator("dhCriacao");
				
		ItemListConfig itemListConfigAnexos = new ItemListConfig() {
			 
			/**
			 * Find paginated do filho
			 * Passa por este ponto apenas na primeira vez em que a list filha e chamada.
			 * Apos a primeira vez ela e carregada da memoria
			 * 
			 * @param masterId id do pai
			 * @param parameters todos os parametros vindo da tela pai
			 */			
			public List initialize(Long masterId, Map parameters) {
				return getFaturaCiaAereaService().findFaturaCiaAereaAnexoByIdFaturaCiaAerea(masterId);
			}

			/**
			 * Busca rowCount da grid da tela filha
			 * Passa por este ponto apenas na primeira vez em que a list filha e chamada.
			 * Apos a primeira vez ela e carregada da memoria
			 * 
			 * @param masterId id do pai
			 * @param parameters todos os parametros vindo da tela pai
			 */			
			public Integer getRowCount(Long masterId, Map parameters) {
				return getFaturaCiaAereaService().getRowCountFaturaCiaAereaAnexo(masterId);
			}
			
			/**
			 * Todos os dados a serem carregados na grid pelo form passam antes por este
			 * metodo. Para se fazer uma validacao...
			 * Recomenda-se que o bean em questao seja gerado nesta classe a partir dos
			 * parametros enviados da tela para se evitar um 'ReflectionUtils'
			 * 
			 * @param parameters 
			 * @param bean a ser istanciado
			 * @return Object bean instanciado
			 */
			public Object populateNewItemInstance(Map parameters, Object bean) {
				TypedFlatMap map = new TypedFlatMap(parameters);
				FaturaCiaAereaAnexo faturaCiaAereaAnexo = (FaturaCiaAereaAnexo) bean;
				
				faturaCiaAereaAnexo.setIdFaturaCiaAereaAnexo(map.getLong("idFaturaCiaAereaAnexo"));				
				faturaCiaAereaAnexo.setUsuario(usuarioLMSService.findById(SessionUtils.getUsuarioLogado().getIdUsuario()));
				faturaCiaAereaAnexo.setDsAnexo(map.getString("dsAnexo"));
				if(map.getLong("idFaturaCiaAereaAnexo") == null || map.getLong("idFaturaCiaAereaAnexo").intValue() < 0){
					faturaCiaAereaAnexo.setDhCriacao(JTDateTimeUtils.getDataHoraAtual());
				} else {
					faturaCiaAereaAnexo.setDhCriacao(map.getDateTime("dhCriacao"));
				}
				
				try {
					faturaCiaAereaAnexo.setDcArquivo(Base64Util.decode(map.getString("dcArquivo")));
				} catch (IOException e) {
					log.error(e);
					throw new InfrastructureException(e.getMessage());
				}
				
				faturaCiaAereaAnexo.setNmArquivo(ArquivoUtils.getNomeArquivo(faturaCiaAereaAnexo.getDcArquivo()));
				faturaCiaAereaAnexo.setNmUsuario(faturaCiaAereaAnexo.getUsuario().getUsuarioADSM().getNmUsuario());
				
				return faturaCiaAereaAnexo;
			}
			
			@SuppressWarnings("unchecked")
			public void modifyItemValues(Object newBean, Object oldBean) {
				Set ignore = new HashSet();
				ignore.add("idFaturaCiaAereaAnexo");
				ignore.add("faturaCiaAerea");				
				ReflectionUtils.syncObjectProperties(oldBean, newBean, ignore);				
			}
		};
		
		config.addItemConfig("listaItemFaturaCiaAerea", ItemFaturaCiaAerea.class, itemListConfigItensFatura, itemFaturaCiaAereaComparator);
		config.addItemConfig("listaFaturaCiaAereaAnexo", FaturaCiaAereaAnexo.class, itemListConfigAnexos, faturaCiaAereaAnexoComparator);

		return config;
	}
	
	/**
	 * 
	 * @param parameters
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public Map store(TypedFlatMap parameters) {
		MasterEntry entry = getMasterFromSession(parameters.getLong("idFaturaCiaAerea"), true);
		FaturaCiaAerea faturaCiaAerea = (FaturaCiaAerea) entry.getMaster();
		faturaCiaAerea = popularFaturaCiaAerea(parameters, faturaCiaAerea);
		
		ItemList itemFaturaCiaAereaList = entry.getItems("listaItemFaturaCiaAerea");
		ItemList faturaCiaAereaAnexoList = entry.getItems("listaFaturaCiaAereaAnexo");

		// É necessário validar os itens da aba AWBs, para obter estes itens
		// estava sendo utilizado o método
		// itemFaturaCiaAereaList.getNewOrModifiedItems() na service, porém este
		// método seta null nos ids dos objetos que ainda não foram salvos.
		// Dessa forma quando não passava pelas validações, e o registro
		// voltava para edição, e era clicado no item da grid de AWBs,
		// gerava um nullpointer.
		ItemListConfig itemFaturaCiaAereaConfig = getMasterConfig().getItemListConfig("listaItemFaturaCiaAerea");
		List<ItemFaturaCiaAerea> listaItemFaturaCiaAerea = IteratorUtils.toList(itemFaturaCiaAereaList.iterator((Long) entry.getMasterId(), itemFaturaCiaAereaConfig));
		
		faturaCiaAerea = this.getFaturaCiaAereaService().store(faturaCiaAerea, itemFaturaCiaAereaList, listaItemFaturaCiaAerea, faturaCiaAereaAnexoList);

		itemFaturaCiaAereaList.resetItemsState();
		faturaCiaAereaAnexoList.resetItemsState();
		updateMasterInSession(entry);

		parameters.put("idFaturaCiaAerea", faturaCiaAerea.getIdFaturaCiaAerea());

		return parameters;
	}
	
	/**
	 * 
	 * @param criteria
	 * @return ResultSetPage
	 */
	@SuppressWarnings("rawtypes")
	public ResultSetPage findPaginated(Map parameters) {
		TypedFlatMap criteria = new TypedFlatMap(parameters);
		return  getFaturaCiaAereaService().findPaginated(criteria, FindDefinition.createFindDefinition(parameters));
   }

	public List findLookupSgCiaAerea(Map criteria) {
		TypedFlatMap mapResult = new TypedFlatMap();
		List listResult = new ArrayList();
		
		criteria.put("tpEmpresa", ConstantesExpedicao.TP_EMPRESA_CIA_AEREA);
		criteria.put(SG_EMPRESA, criteria.get(SG_EMPRESA).toString().toUpperCase());
		
		List ciaList = empresaService.findLookupEmpresaAwb(criteria);
		if (ciaList != null && !ciaList.isEmpty()) {
			for (int i = 0; i < ciaList.size(); i++) {
				Empresa ciaAerea = (Empresa) ciaList.get(i);
				mapResult.put("idEmpresa", ciaAerea.getIdEmpresa());
				mapResult.put("idEmpresaCiaAerea", ciaAerea.getIdEmpresa());
				mapResult.put(SG_EMPRESA, ciaAerea.getSgEmpresa());
				
				listResult.add(mapResult);
			}
		}		
		
		return listResult;
	}	
	
	/**
	 * 
	 */
	public Integer getRowCount(Map parameters) {
		TypedFlatMap criteria = new TypedFlatMap(parameters);
		return getFaturaCiaAereaService().getRowCount(criteria);
	}
	
	/**
	 * Utilizado pela combo de cias aereas.
	 * 
	 * @param criteria
	 * @return
	 */
	@SuppressWarnings("rawtypes")
	public List findCiaAerea(Map criteria) {
		List empresas = empresaService.findCiaAerea(criteria);
		if (empresas != null && !empresas.isEmpty()) {
			List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();
			for (int i = 0; i < empresas.size(); i++) {
				Empresa empresa = (Empresa) empresas.get(i);
				Map<String, Object> e = new HashMap<String, Object>();
				e.put("idEmpresa", empresa.getIdEmpresa());
				e.put("nmPessoa", empresa.getPessoa().getNmPessoa());
				e.put("sgEmpresa", empresa.getSgEmpresa());
				result.add(e);
			}
			return result;
		}
		return null;
	}
	
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public List findLookupAwb(Map criteria) {
		Map ciaFilialMercurio = new HashMap();
		Map empresa = new HashMap();
		if (criteria.get("idEmpresa") != null) {
			empresa.put("idEmpresa", criteria.get("idEmpresa"));
		} else {
			empresa.put("idEmpresa", criteria.get("idEmpresaCiaAerea"));
		}
		ciaFilialMercurio.put("empresa", empresa);
		criteria.put("ciaFilialMercurio", ciaFilialMercurio);
		criteria.remove("idEmpresa");
		Object sNrAwb = criteria.get("nrAwb");
		if(ConstantesAwb.TP_STATUS_PRE_AWB.equals(criteria.get("tpStatusAwb"))){
			Long nrAwb = LongUtils.getLong(sNrAwb);
			criteria.put("idAwb", nrAwb);
			criteria.remove("nrAwb");
		} else {
			Awb awb = AwbUtils.splitNrAwb(sNrAwb.toString());
			criteria.put("nrAwb", awb.getNrAwb() );
			criteria.put("dsSerie", awb.getDsSerie());
			criteria.put("dvAwb", awb.getDvAwb());
		}
		
		List listAwbs = awbService.findLookup(criteria);
		List listResult = new ArrayList();
		for (Iterator iter = listAwbs.iterator(); iter.hasNext();) {
			Awb awb = (Awb) iter.next();
			Empresa e = empresaService.findById(awb.getCiaFilialMercurio().getEmpresa().getIdEmpresa());
			Map mapAwb = new HashMap();
			mapAwb.put("idAwb", awb.getIdAwb());
			if(ConstantesAwb.TP_STATUS_PRE_AWB.equals(awb.getTpStatusAwb().getValue())){
				mapAwb.put("nrAwb", awb.getIdAwb());
			} else {
				mapAwb.put("nrAwb", AwbUtils.getNrAwb(awb));
			}
			
			mapAwb.put("tpStatusAwb", awb.getTpStatusAwb().getValue());
			mapAwb.put(SG_EMPRESA, e.getSgEmpresa());
			if(awb.getVlFrete() != null){
				mapAwb.put("vlFrete", awb.getVlFreteCalculado());
			} else {
				mapAwb.put("vlFrete", BigDecimal.ZERO);
			}
			mapAwb.put("idEmpresa", awb.getCiaFilialMercurio().getEmpresa().getIdEmpresa());
			mapAwb.put("idEmpresaCiaAerea", awb.getCiaFilialMercurio().getEmpresa().getIdEmpresa());
			listResult.add(mapAwb);
		}
		return listResult;
	}
	
	/**
	 * 
	 * @param parameters
	 * @return
	 */
	@SuppressWarnings("rawtypes")
	public ResultSetPage findPaginatedItemFaturaCiaAerea(Map parameters) {
		Long masterId = getMasterId(parameters);
		MasterEntry entry = getMasterFromSession(masterId, true);
		ItemList listaItemFaturaCiaAerea = entry.getItems("listaItemFaturaCiaAerea");

		if (!listaItemFaturaCiaAerea.isInitialized()) {
			listaItemFaturaCiaAerea.initialize(this.getFaturaCiaAereaService().findItemFaturaCiaAereaByIdFaturaCiaAerea(masterId));
		}else{
			for (Object item : listaItemFaturaCiaAerea.getItems()) {
				ItemFaturaCiaAerea ifc = (ItemFaturaCiaAerea)item;
				ifc.setDiferencaFrete(this.getFaturaCiaAereaService().setarImagemValor(ifc.getVlDiferencaFrete()));
			} 
		}

		return findPaginatedItemList(parameters, "listaItemFaturaCiaAerea");
	}

	/**
	 * Faz o getRowCount do filho Possui uma chamada 'interna' para o
	 * getRowCount contido dentro do 'createMasterConfig'
	 * 
	 * @param parameters
	 * @return Integer
	 */
	public Integer getRowCountItemFaturaCiaAerea(Map parameters) {
		return getRowCountItemList(parameters, "listaItemFaturaCiaAerea");
	}
	
	
    @ParametrizedAttribute(type = java.lang.Long.class)
    public void removeItemFaturaCiaAereaByIds (List ids) {
    	super.removeItemByIds(ids, "listaItemFaturaCiaAerea");
    }
	
	/**
     * Salva um item na sessão. chama o metodo populateNewItemInstance 
     * 
     * @param bean
     * @return Serializable
     */
	public void storeItemFaturaCiaAerea(Map parameters) {		
		saveItemInstance(parameters, "listaItemFaturaCiaAerea");	
    }
	
	/**
	 * 
	 * @param parameters
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public void storeItensFaturaCiaAereaByAWBs(Map parameters) {
		Long[] idsAwbsSelecionados = (Long[]) parameters.get("idsAwbsSelecionados");
		
		parameters.put("psCobrado", BigDecimal.ZERO);
		parameters.put("vlCobrado", BigDecimal.ZERO);
		parameters.put("vlDesconto", BigDecimal.ZERO);
		parameters.put("vlAcrescimo", BigDecimal.ZERO);
		parameters.put("executarRotinaValidacaoAwb", true);
		for (Long idAwb : idsAwbsSelecionados) {
			parameters.put("idAwb", idAwb);
			saveItemInstance(parameters, "listaItemFaturaCiaAerea");	
		}
    }
	
	/**
	 * 
	 * @param key
	 * @return
	 */
	public Object findByIdItemFaturaCiaAerea(MasterDetailKey key) {
		ItemFaturaCiaAerea itemFaturaCiaAerea = (ItemFaturaCiaAerea)findItemById(key, "listaItemFaturaCiaAerea");
		return converterItemFaturaCiaAereaParaMap(itemFaturaCiaAerea);
    }
	
	public Object findByIdIFaturaCiaAereaAnexo(MasterDetailKey key) {
		FaturaCiaAereaAnexo faturaCiaAereaAnexo = (FaturaCiaAereaAnexo)findItemById(key, "listaFaturaCiaAereaAnexo");
		return faturaCiaAereaAnexo;
    }
	
	/**
	 * Salva um registro na sessão. chama o metodo populateNewItemInstance 
	 * 
	 * @param bean
	 * @return Serializable
	 */
	public void storeFaturaCiaAereaAnexo(Map parameters) {
		saveItemInstance(parameters, "listaFaturaCiaAereaAnexo");	
	}
	
	/**
	 * 
	 * @param parameters
	 * @return
	 */
	@SuppressWarnings("rawtypes")
	public ResultSetPage findPaginatedFaturaCiaAereaAnexo(Map parameters) {
		Long masterId = getMasterId(parameters);
		MasterEntry entry = getMasterFromSession(masterId, true);
		ItemList listaFaturaCiaAereaAnexo = entry.getItems("listaFaturaCiaAereaAnexo");

		if (!listaFaturaCiaAereaAnexo.isInitialized()) {
			listaFaturaCiaAereaAnexo.initialize(this.getFaturaCiaAereaService().findFaturaCiaAereaAnexoByIdFaturaCiaAerea(masterId));
		}

		return findPaginatedItemList(parameters, "listaFaturaCiaAereaAnexo");
	}

	/**
	 * Faz o getRowCount do filho Possui uma chamada 'interna' para o
	 * getRowCount contido dentro do 'createMasterConfig'
	 * 
	 * @param parameters
	 * @return Integer
	 */
	public Integer getRowCountFaturaCiaAereaAnexo(Map parameters) {
		return getRowCountItemList(parameters, "listaFaturaCiaAereaAnexo");
	}
	
	
    @ParametrizedAttribute(type = java.lang.Long.class)
    public void removeFaturaCiaAereaAnexoByIds (List ids) {
    	super.removeItemByIds(ids, "listaFaturaCiaAereaAnexo");
    }
	
	/**
	 * É necessário buscar o "arquivo" do banco para que o mesmo sofra a
	 * conversão através do type "BinaryBlobUserType", pois este é o único modo
	 * que o componente de download funciona atualmente.
	 * 
	 * @param parameters
	 * @return
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public Map executeDownloadArquivo(Map parameters) {
		Map retorno = new HashMap();
		Long idFaturaCiaAereaAnexo = (Long) parameters.get("idFaturaCiaAereaAnexo");

		if (idFaturaCiaAereaAnexo != null && idFaturaCiaAereaAnexo.intValue() > 0) {
			FaturaCiaAereaAnexo faturaCiaAereaAnexo = getFaturaCiaAereaService().findFaturaCiaAereaAnexoById(idFaturaCiaAereaAnexo);
			retorno.put("dcArquivo", Base64Util.encode(faturaCiaAereaAnexo.getDcArquivo()));
		}

		return retorno;
	}
    
	/**
	 * 
	 * @param parameters
	 */
	public void validateAlteracaoFaturaCiaAerea(TypedFlatMap parameters){
		FaturaCiaAerea faturaCiaAerea = new FaturaCiaAerea();
		faturaCiaAerea = popularFaturaCiaAerea(parameters, faturaCiaAerea);
		getFaturaCiaAereaService().validateAlteracaoFaturaCiaAerea(faturaCiaAerea);
	}
	
	/**
	 * 
	 * @param map
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public TypedFlatMap calcularTotais(TypedFlatMap parameters){
		TypedFlatMap map = new TypedFlatMap();
		BigDecimal vlSomaAwbs = BigDecimal.ZERO;
		BigDecimal vlSomaDescontoAwbs = BigDecimal.ZERO;
		BigDecimal vlSomaAcrescimosAwbs = BigDecimal.ZERO;
		BigDecimal vlTotalFatura = BigDecimal.ZERO;
		
		BigDecimal vlDesconto = BigDecimal.ZERO;
		BigDecimal vlAcrescimo = BigDecimal.ZERO;
		
		Long masterId = getMasterId(parameters);
    	MasterEntry entry = getMasterFromSession(masterId, true);
		ItemList itemFaturaCiaAereaList = entry.getItems("listaItemFaturaCiaAerea");
		ItemListConfig itemFaturaCiaAereaConfig = getMasterConfig().getItemListConfig("listaItemFaturaCiaAerea");

		for (Iterator<ItemFaturaCiaAerea> it = itemFaturaCiaAereaList.iterator(masterId, itemFaturaCiaAereaConfig); it.hasNext();) {
			ItemFaturaCiaAerea itemFaturaCiaAerea =  it.next();
			if(itemFaturaCiaAerea.getAwb().getVlFreteCalculado() != null){
				vlSomaAwbs = vlSomaAwbs.add(itemFaturaCiaAerea.getAwb().getVlFreteCalculado());
			}
			
			if(itemFaturaCiaAerea.getVlDesconto() != null){
				vlSomaDescontoAwbs = vlSomaDescontoAwbs.add(itemFaturaCiaAerea.getVlDesconto());
			}
			
			if(itemFaturaCiaAerea.getVlAcrescimo() != null){
				vlSomaAcrescimosAwbs = vlSomaAcrescimosAwbs.add(itemFaturaCiaAerea.getVlAcrescimo());
			}
		}
		
		// Dados da aba master (detalhamento)
		if(parameters.getBigDecimal("vlDesconto") != null){
			vlDesconto = parameters.getBigDecimal("vlDesconto");
		}
		
		if(parameters.getBigDecimal("vlAcrescimo") != null){
			vlAcrescimo = parameters.getBigDecimal("vlAcrescimo");
		}
		
		// "Soma dos AWBs"  "Valor do desconto da fatura" (valor da aba "Detalhamento") + "Valor do acréscimo da fatura" (valor da aba "Acréscimo")  "Descontos AWBs" + "Acréscimos AWBs". 
		vlTotalFatura = vlSomaAwbs.subtract(vlDesconto).add(vlAcrescimo).subtract(vlSomaDescontoAwbs).add(vlSomaAcrescimosAwbs);
		
		map.put("vlSomaAwbs", vlSomaAwbs);
		map.put("vlSomaDescontosAwbs", vlSomaDescontoAwbs);
		map.put("vlSomaAcrescimosAwbs", vlSomaAcrescimosAwbs);
		map.put("vlTotalFatura", vlTotalFatura);
		return map;
	}
	
    /**
     *  Executa a importação arquivo CSV
     *  @param parameters
     */
    @SuppressWarnings({ "rawtypes", "unchecked" })
	public Map executeImportacao(TypedFlatMap parameters) {
    	Long masterId = parameters.getLong("idFaturaCiaAerea");
    	MasterEntry entry = getMasterFromSession(masterId, true);
		ItemList itemFaturaCiaAereaList = entry.getItems("listaItemFaturaCiaAerea");
		ItemListConfig itemFaturaCiaAereaConfig = getMasterConfig().getItemListConfig("listaItemFaturaCiaAerea");
		
		FaturaCiaAerea faturaCiaAerea = (FaturaCiaAerea)entry.getMaster(); 
		
		faturaCiaAerea = popularFaturaCiaAerea(parameters, faturaCiaAerea);
		Iterator<ItemFaturaCiaAerea> itItemFaturaCiaAerea = itemFaturaCiaAereaList.iterator(masterId, itemFaturaCiaAereaConfig);
		List<ItemFaturaCiaAerea> listaItemFaturaCiaAerea = IteratorUtils.toList(itItemFaturaCiaAerea);
		
    	Map result = getFaturaCiaAereaService().executeImportacao(parameters, listaItemFaturaCiaAerea, faturaCiaAerea);
    	String erros = (String) result.get("erros");
		List<ItemFaturaCiaAerea> listaItens = (List<ItemFaturaCiaAerea>) result.get("listaItens");
		
		Map param = new HashMap();
		if (faturaCiaAerea.getIdFaturaCiaAerea() != null) {
			param.put("masterId", faturaCiaAerea.getIdFaturaCiaAerea().toString());
		} else {
			param.put("masterId", null);
		}
		
		for (ItemFaturaCiaAerea itemFaturaCiaAerea : listaItens) {
			param.putAll(converterItemFaturaCiaAereaParaMap(itemFaturaCiaAerea));
			this.storeItemFaturaCiaAerea(param);
		}

		param.clear();
		param.put("erros", erros);
		return param;
    }

	public FaturaCiaAereaService getFaturaCiaAereaService() {
		return (FaturaCiaAereaService) super.getMasterService();
	}

	public void setFaturaCiaAereaService(FaturaCiaAereaService faturaCiaAereaService) {
		this.setMasterService(faturaCiaAereaService);
	}

	public EmpresaService getEmpresaService() {
		return empresaService;
	}

	public void setEmpresaService(EmpresaService empresaService) {
		this.empresaService = empresaService;
	}

	public AwbService getAwbService() {
		return awbService;
	}

	public void setAwbService(AwbService awbService) {
		this.awbService = awbService;
	}

	public UsuarioLMSService getUsuarioLMSService() {
		return usuarioLMSService;
	}

	public void setUsuarioLMSService(UsuarioLMSService usuarioLMSService) {
		this.usuarioLMSService = usuarioLMSService;
	}
}
