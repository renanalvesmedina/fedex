package com.mercurio.lms.prestcontasciaaerea.action;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.report.ReportExecutionManager;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.configuracoes.model.service.PessoaService;
import com.mercurio.lms.expedicao.model.Awb;
import com.mercurio.lms.expedicao.model.service.AwbService;
import com.mercurio.lms.municipios.model.Empresa;
import com.mercurio.lms.municipios.model.service.EmpresaService;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.prestcontasciaaerea.report.EmitirRelatorioAwbService;
import com.mercurio.lms.util.FormatUtils;

/**
 * Generated by: ADSM ActionGenerator
 * 
 * Não inserir documentação após ou remover a tag do XDoclet a seguir. O valor
 * do <code>id</code> informado abaixo deve ser utilizado para referenciar este
 * serviço.
 * 
 * @spring.bean id="lms.prestcontasciaaerea.swt.emitirRelatorioAWBAction"
 */

public class EmitirRelatorioAWBAction {
	private EmitirRelatorioAwbService emitirRelatorioAwbService;
	private EmpresaService empresaService;
	private AwbService awbService;
	private FilialService filialService;
	private PessoaService pessoaService;
	private ReportExecutionManager reportExecutionManager;

	/**
	 * Utilizado pela combo de cias aereas Faturas.
	 * 
	 * @param criteria
	 * @return
	 */
	@SuppressWarnings("rawtypes")
	public List findCiaAereaFatura(Map criteria) {
		return this.findCiaAerea(criteria, "idCiaAereaFatura",
				"nmCiaAereaFatura");
	}

	/**
	 * Utilizado pela combo de cias aereas Faturas.
	 * 
	 * @param criteria
	 * @return
	 */
	@SuppressWarnings("rawtypes")
	public List findCiaAereaAwb(Map criteria) {
		return this.findCiaAerea(criteria, "idCiaAereaAwb", "nmCiaAereaAwb");
	}

	/**
	 * Utilizado pela combo de cias aereas.
	 * 
	 * @param criteria
	 * @return
	 */
	@SuppressWarnings("rawtypes")
	public List findCiaAerea(Map criteria, String keyIdPessoa,
			String keyNmPessoa) {
		List empresas = empresaService.findCiaAerea(criteria);
		if (empresas != null && !empresas.isEmpty()) {
			List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();
			for (int i = 0; i < empresas.size(); i++) {
				Empresa empresa = (Empresa) empresas.get(i);
				Map<String, Object> e = new HashMap<String, Object>();
				e.put(keyIdPessoa, empresa.getIdEmpresa());
				e.put(keyNmPessoa, empresa.getPessoa().getNmPessoa());
				result.add(e);
			}
			return result;
		}
		return null;
	}

	@SuppressWarnings({ "rawtypes", "unchecked" })
	public List findLookupAwb(Map criteria) {
		Map ciaFilialMercurio = new HashMap();
		Map empresa = new HashMap();
		empresa.put("idEmpresa", criteria.get("idEmpresa"));
		ciaFilialMercurio.put("empresa", empresa);
		criteria.put("ciaFilialMercurio", ciaFilialMercurio);
		criteria.remove("idEmpresa");
		criteria.put("tpStatusAwb", "E");

		List listAwbs = awbService.findLookup(criteria);
		List listResult = new ArrayList();
		for (Iterator iter = listAwbs.iterator(); iter.hasNext();) {
			Awb awb = (Awb) iter.next();
			Map mapAwb = new HashMap();
			mapAwb.put("idAwb", awb.getIdAwb());
			mapAwb.put("nrAwb", awb.getNrAwb());
			mapAwb.put("dsSerieAwb", awb.getDsSerie());
			if (awb.getVlFrete() != null) {
				mapAwb.put("vlFrete", awb.getVlFrete());
			} else {
				mapAwb.put("vlFrete", BigDecimal.ZERO);
			}
			mapAwb.put("idEmpresa", awb.getCiaFilialMercurio().getEmpresa()
					.getIdEmpresa());
			listResult.add(mapAwb);
		}
		return listResult;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	public List findLookupFilial(Map criteria) {
		List list = filialService.findLookupFilial(criteria);
		List retorno = new ArrayList();
		if (list.size() > 0) {
			Map map = (Map) list.get(0);
			map.put("idFilial", map.get("idFilial"));
			map.put("nmFantasia",
					(String) ((Map) map.get("pessoa")).get("nmFantasia"));
			map.put("sgFilial", (String) map.get("sgFilial"));
			retorno.add(map);
		}
		return retorno;
	}

	public List findLookupPessoa(TypedFlatMap criteria) {
		Map pessoa = new HashMap();
		pessoa.put("nrIdentificacao", criteria.getString("nrIdentificacao"));

		List list =  this.getPessoaService().findLookup(pessoa);
		List retorno = new ArrayList();
		Map map = new HashMap();
		if(list.size() >0) {
			Pessoa p = (Pessoa) list.get(0);
			
			map.put("idPessoa", p.getIdPessoa());
			map.put("nmPessoa", p.getNmPessoa());
			map.put("nrIdentificacao", FormatUtils.formatIdentificacao(p.getTpIdentificacao(), p.getNrIdentificacao()));
			
			retorno.add(map);
		}
		
		return retorno;
	}

	public String execute(TypedFlatMap parameters) throws Exception {

		return getReportExecutionManager().generateReportLocator(
				emitirRelatorioAwbService, parameters);
	}

	/**
	 * @return the emitirRelatorioAwbService
	 */
	public EmitirRelatorioAwbService getEmitirRelatorioAwbService() {
		return emitirRelatorioAwbService;
	}

	/**
	 * @param emitirRelatorioAwbService
	 *            the emitirRelatorioAwbService to set
	 */
	public void setEmitirRelatorioAwbService(
			EmitirRelatorioAwbService emitirRelatorioAwbService) {
		this.emitirRelatorioAwbService = emitirRelatorioAwbService;
	}

	/**
	 * @return the empresaService
	 */
	public EmpresaService getEmpresaService() {
		return empresaService;
	}

	/**
	 * @param empresaService
	 *            the empresaService to set
	 */
	public void setEmpresaService(EmpresaService empresaService) {
		this.empresaService = empresaService;
	}

	/**
	 * @return the awbService
	 */
	public AwbService getAwbService() {
		return awbService;
	}

	/**
	 * @return the filialService
	 */
	public FilialService getFilialService() {
		return filialService;
	}

	/**
	 * @param awbService
	 *            the awbService to set
	 */
	public void setAwbService(AwbService awbService) {
		this.awbService = awbService;
	}

	/**
	 * @param filialService
	 *            the filialService to set
	 */
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	/**
	 * @return the reportExecutionManager
	 */
	public ReportExecutionManager getReportExecutionManager() {
		return reportExecutionManager;
	}

	/**
	 * @param reportExecutionManager
	 *            the reportExecutionManager to set
	 */
	public void setReportExecutionManager(
			ReportExecutionManager reportExecutionManager) {
		this.reportExecutionManager = reportExecutionManager;
	}

	/**
	 * @return the pessoaService
	 */
	public PessoaService getPessoaService() {
		return pessoaService;
	}

	/**
	 * @param pessoaService the pessoaService to set
	 */
	public void setPessoaService(PessoaService pessoaService) {
		this.pessoaService = pessoaService;
	}

}