package com.mercurio.lms.mww.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.BooleanUtils;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.CarregamentoDescarga;
import com.mercurio.lms.carregamento.model.ControleCarga;
import com.mercurio.lms.carregamento.model.DispositivoUnitizacao;
import com.mercurio.lms.carregamento.model.LacreControleCarga;
import com.mercurio.lms.carregamento.model.Manifesto;
import com.mercurio.lms.carregamento.model.service.CarregamentoDescargaService;
import com.mercurio.lms.carregamento.model.service.ControleCargaService;
import com.mercurio.lms.carregamento.model.service.DispositivoUnitizacaoService;
import com.mercurio.lms.carregamento.model.service.EquipeOperacaoService;
import com.mercurio.lms.carregamento.model.service.LacreControleCargaService;
import com.mercurio.lms.carregamento.model.service.ManifestoNacionalVolumeService;
import com.mercurio.lms.carregamento.model.service.ManifestoService;
import com.mercurio.lms.carregamento.model.service.UnitizacaoService;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.contratacaoveiculos.model.MeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteService;
import com.mercurio.lms.entrega.model.service.ManifestoEntregaVolumeService;
import com.mercurio.lms.entrega.model.service.OcorrenciaEntregaService;
import com.mercurio.lms.expedicao.model.VolumeNotaFiscal;
import com.mercurio.lms.expedicao.model.service.NotaFiscalConhecimentoService;
import com.mercurio.lms.expedicao.model.service.VolumeNotaFiscalService;
import com.mercurio.lms.municipios.model.RotaColetaEntrega;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.RotaColetaEntregaService;
import com.mercurio.lms.mww.model.service.DescargaMobileService;
import com.mercurio.lms.portaria.model.ControleQuilometragem;
import com.mercurio.lms.portaria.model.service.ControleQuilometragemService;
import com.mercurio.lms.sim.model.service.EventoVolumeService;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.mww.descargaMobileAction"
 */
public class DescargaMobileAction extends CrudAction {
	
	private DescargaMobileService descargaMobileService;
	private ControleCargaService controleCargaService;
	private MeioTransporteService meioTransporteService;
	private CarregamentoDescargaService carregamentoDescargaService;
	private LacreControleCargaService lacreControleCargaService;
	private VolumeNotaFiscalService volumeNotaFiscalService;
	private UnitizacaoService unitizacaoService;
	private DispositivoUnitizacaoService dispositivoUnitizacaoService;
	private EventoVolumeService eventoVolumeService;
	private NotaFiscalConhecimentoService notaFiscalConhecimentoService;
	private ManifestoNacionalVolumeService manifestoNacionalVolumeService;
	private ManifestoEntregaVolumeService manifestoEntregaVolumeService;
	private ConfiguracoesFacade configuracoesFacade;
	private FilialService filialService;
	private EquipeOperacaoService equipeOperacaoService;
	private OcorrenciaEntregaService ocorrenciaEntregaService;
	private ControleQuilometragemService controleQuilometragemService;
	private RotaColetaEntregaService rotaColetaEntregaService;
	private ManifestoService manifestoService;
	
	private Long getSessionIdFilial(){
		return SessionUtils.getFilialSessao().getIdFilial();
	}
	
	/**
	 * Busca meio de transporte para descarga de viagem
	 * @param nrCodigoBarras
	 * @return
	 */
	public Map findMeioTransporte(String nrCodigoBarras){
		return executeMeioTransportes(nrCodigoBarras, "V", "N");
	}
		
	
	
	/**
	 * Busca meio de transporte para descarga de coleta/entrega
	 * @param nrCodigoBarras
	 * @return
	 */
	public Map findMeioTranspDescEntrega(String nrCodigoBarras){
		return executeMeioTransportes(nrCodigoBarras, "C", "N");
		
	}
	
	public Map executeReabrirCarregamento(Map map){
		String nrCodigoBarras = map.get("nrCodigoBarras").toString();
		String tpControleCarga = map.get("tpControleCarga").toString();
		String blReabreCarregamento = map.get("blReabreCarregamento").toString();
		
		return executeMeioTransportes(nrCodigoBarras, tpControleCarga, blReabreCarregamento);
	}
	
	public Map executeMeioTransportes(String nrCodigoBarras, String tpControleCarga, String blReabreCarregamento){
		
		MeioTransporte meioTransporte =	meioTransporteService.findMeioTransporteByCodigoBarras(Long.parseLong(nrCodigoBarras));
		Map<String,Object> retorno = new HashMap<String, Object>();
		
		if(meioTransporte != null) {
		
			retorno.put("nrFrota", meioTransporte.getNrFrota());
			retorno.put("placa", meioTransporte.getNrIdentificador());
			retorno.put("idMeioTransporte", meioTransporte.getIdMeioTransporte());
			
			//tpcontrolecarga V ou C, viagem ou coleta/entrega
			ControleCarga controleCarga = descargaMobileService.findControleCargaViagem(meioTransporte.getIdMeioTransporte(), tpControleCarga, getSessionIdFilial());
			
			Map<String, Object> controleCargaMapped = new HashMap<String, Object>();
			if(controleCarga != null) {
				
				// LMS-5444
				if ("V".equals(controleCarga.getTpControleCarga().getValue())) {
										
					List<Manifesto> manifesto = manifestoService.findManifestoByControleCargaAndStatusAndFilialDestino(controleCarga, getSessionIdFilial());
					
					if (manifesto.isEmpty()) {
						throw new BusinessException("LMS-45204");
					}
				}
				
				CarregamentoDescarga carregamentoDescarga = 
					carregamentoDescargaService.findCarregamentoDescarga(controleCarga.getIdControleCarga(), getSessionIdFilial(), "D");
								
				//2.Se o Controle de Carga não possuir informação de Inicio de Descarga, então prosseguir com os procedimentos 
				//descritos no item Iniciar Descarga
				if(carregamentoDescarga != null){ 
					if(carregamentoDescarga.getDhInicioOperacao() == null ){
					    controleCargaMapped.put("descargaIniciada", false);
				
					//3.Se o Controle de Carga possuir informação de Inicio de Descarga e não possuir informação de Fim de Descarga, 
					//então prosseguir com os procedimentos descritos no item Durante a Descarga
					} else if(carregamentoDescarga.getDhInicioOperacao() != null && carregamentoDescarga.getDhFimOperacao() == null ){
						controleCargaMapped.put("descargaIniciada", true);
						
					} else if(carregamentoDescarga.getDhInicioOperacao() != null && carregamentoDescarga.getDhFimOperacao() != null ){
						//LMS-03009 - Descarga já finalizada para este veículo.
							throw new BusinessException("LMS-03009");
					}
					
					//Salva usuario na equipe do carregamento
					getEquipeOperacaoService().storeEquipeDescarga(controleCarga, carregamentoDescarga);

					if(carregamentoDescarga.getBox()!=null){
						Map<String, Object> boxMapped = new HashMap<String, Object>();
						boxMapped.put("idBox", carregamentoDescarga.getBox().getIdBox());
						boxMapped.put("nrBox", carregamentoDescarga.getBox().getNrBox());
						controleCargaMapped.put("box", boxMapped);
					}
					
					if("O".equals(carregamentoDescarga.getTpStatusOperacao().getValue()) && "N".equals(blReabreCarregamento)){
						throw new BusinessException("LMS-45097");
					}else if ("O".equals(carregamentoDescarga.getTpStatusOperacao().getValue()) && "S".equals(blReabreCarregamento)){
						carregamentoDescargaService.storeReabrirCarregamentoDescarga(carregamentoDescarga.getIdCarregamentoDescarga());
					}
				}
				
				controleCargaMapped.put("idControleCarga", controleCarga.getIdControleCarga());
				controleCargaMapped.put("nrControleCarga", controleCarga.getNrControleCarga());				
				controleCargaMapped.put("conhecimentos", descargaMobileService.findConhecimentosDescargaMapped(
						controleCarga.getIdControleCarga(), tpControleCarga));
				controleCargaMapped.put("dispositivos", descargaMobileService.findDispositivosDescarregados(
						controleCarga.getIdControleCarga(), tpControleCarga));
				
				controleCargaMapped.put("awbs", descargaMobileService.findAwbs(controleCarga.getIdControleCarga()));
				
				Map<String, Object> filialOrigem = new HashMap<String, Object>();
				filialOrigem.put("sgFilial", controleCarga.getFilialByIdFilialOrigem().getSgFilial());
				controleCargaMapped.put("filialOrigem", filialOrigem);
				
				if(controleCarga.getTpControleCarga().getValue().equals("V")){
					if(controleCarga.getRota() != null) {
						Map<String, Object> rotaMapped = new HashMap<String, Object>();
						rotaMapped.put("idRota", controleCarga.getRota().getIdRota());
						rotaMapped.put("dsRota", controleCarga.getRota().getDsRota());
						rotaMapped.put("nrRota", controleCarga.getRotaIdaVolta()!=null?controleCarga.getRotaIdaVolta().getNrRota():"");
						controleCargaMapped.put("rota", rotaMapped);
					}				
				}else if(controleCarga.getTpControleCarga().getValue().equals("C")){
					if(controleCarga.getRotaColetaEntrega() != null) {
						Map<String, Object> rotaMapped = new HashMap<String, Object>();
						rotaMapped.put("idRota", controleCarga.getRotaColetaEntrega().getIdRotaColetaEntrega());
						rotaMapped.put("dsRota", controleCarga.getRotaColetaEntrega().getDsRota());
						rotaMapped.put("nrRota", controleCarga.getRotaColetaEntrega()!=null?controleCarga.getRotaColetaEntrega().getNrRota():"");
						controleCargaMapped.put("rota", rotaMapped);
					}									
					//LMS-2594
					Long idFilial = getSessionIdFilial();
					Boolean blInformaKmPortaria = filialService.findBlInformaKmPortaria(idFilial);
					retorno.put("blInformaKmPortaria", blInformaKmPortaria);
					if (blInformaKmPortaria) {
						ControleQuilometragem controleQuilometragem = controleQuilometragemService.findControleQuilometragemByIdControleCargaByIdFilial(controleCarga.getIdControleCarga(), idFilial, false);
						retorno.put("nrQuilometragem", controleQuilometragem.getNrQuilometragem());
						retorno.put("blVirouHodometro", controleQuilometragem.getBlVirouHodometro());
					}
				}
				
				retorno.put("controleCarga", controleCargaMapped);
			}else{
				//Controle de carga não encontrado.
				throw new BusinessException("LMS-45001");
			}
		}else{
			//LMS-06018- Meio de transporte não encontrado.
			throw new BusinessException("LMS-06018");
		}

		return retorno;
	}

	public Map iniciarDescarga(Map map){

		/** Recebe Map  Long idControleCarga
		 * 			   Long idBox
		 * 			   Long km
		 * 			   Boolean virouHodometro
		 * 			   String lacres(numeroLacre divido por ";" e o situacaoLacre divido por "-" sendo "V"(violado) ou "C"(conferido))
		 */
		
		Long idControleCarga = Long.parseLong(map.get("idControleCarga").toString());
		
		Long idBox = Long.parseLong(map.get("idBox").toString());
		Long idFilial = getSessionIdFilial();
    	Boolean blVirouHodometro = Boolean.parseBoolean(map.get("virouHodometro").toString());
		String strNrQuilometragem = map.get("km").toString();
		Integer nrQuilometragem = null;
		if(!strNrQuilometragem.equals("")){
			nrQuilometragem = Integer.parseInt(strNrQuilometragem);
		}
		String lacres = map.get("lacres").toString();
	
		getDescargaMobileService().storeOcuparDesocuparBox(idControleCarga, idBox);
		
		ControleCarga controleCarga = controleCargaService.findByIdInitLazyProperties(idControleCarga, false);
		controleCargaService.validateControleCargaComOcorrenciaVinculada(idControleCarga);
		TypedFlatMap parameters = new TypedFlatMap();
		parameters.put("controleCarga.idControleCarga", idControleCarga);
		parameters.put("box.idBox", idBox);
		parameters.put("idFilial", idFilial);
		parameters.put("blVirouHodometro", blVirouHodometro);
		
		Map<String,Object> retorno = new HashMap<String,Object>();
		
		if("C".equals(controleCarga.getTpControleCarga().getValue())){
			//Valida se a quilometragem deve ser informada pela portaria, e se não foi informada na portaria e informada no MWW, 
			//salva a quilometragem se foi informada na portaria e foi informada no mww ignora o mww, se não foi informada na portaria 
			//e não foi informado no MWW da erro.
			Boolean blInformaKmPortaria = filialService.findBlInformaKmPortaria(idFilial);
			
			
			if(nrQuilometragem!=null){
					parameters.put("nrQuilometragem", nrQuilometragem);
			}
				
			if(!blInformaKmPortaria){
				
				//LMS-4572 Consulta se já existe registro de lançamento de quilometragem
				boolean isExisteLancamentoQuilometragem = controleCargaService.findLancamentoQuilometragem(controleCarga.getIdControleCarga(), 
						getSessionIdFilial(), Boolean.FALSE);
				
				//Caso a consulta não retorne registros, deverá informar a quilometragem.
				if (!isExisteLancamentoQuilometragem){
					Boolean blPortaria = Boolean.FALSE;
					Boolean blSaida = Boolean.FALSE;						
					String obControleQuilometragem = null;
					Long idMeioTransporte = controleCarga.getMeioTransporteByIdTransportado().getIdMeioTransporte();
					
					boolean isKMExcedida = validarKMExcedida(idMeioTransporte, blVirouHodometro, blSaida, nrQuilometragem, controleCarga.getIdControleCarga());
					
					if (isKMExcedida){
						obControleQuilometragem = (String) configuracoesFacade.getValorParametro("MWW_OBS_KM"); 
					}
					
					controleQuilometragemService.storeInformarQuilometragemMeioTransporte(getSessionIdFilial(), blPortaria, idMeioTransporte, blSaida,	
							nrQuilometragem, blVirouHodometro, controleCarga.getIdControleCarga(), null, obControleQuilometragem);							
				}	
			}
		}
		
		
		List<LacreControleCarga> listaLacres = listaLacresByString(lacres, controleCarga.getIdControleCarga());
				
		descargaMobileService.storeIniciarDescarga(controleCarga, parameters, listaLacres);

		return retorno;
	}
	
	public void desunitizaVolume(Long idVolume){
		VolumeNotaFiscal volumeNotaFiscal = volumeNotaFiscalService.findById(idVolume);
		descargaMobileService.desunitizaVolume(volumeNotaFiscal);
	}
	
	public void desunitizaDispositivo(Long idDispositivoUnitizacao){
		DispositivoUnitizacao dispositivoUnitizacao = dispositivoUnitizacaoService.findById(idDispositivoUnitizacao);
		descargaMobileService.desunitizaDispositivo(dispositivoUnitizacao);
	}
	
	/**
	 * Descarga volume lido valida se tem um disposititivo de unitizacao como pai.
	 * @param map
	 * @return
	 */
	public Map<String, Object> descargaVolume(Map<String, Object> map){
		return descargaMobileService.storeDescargaVolume(
				map.get("barcode").toString(), Long.valueOf(map.get("idControleCarga").toString()));
		}
		
	public Map descargaDispositivo(Map map){
		
		Long idControleCarga = Long.parseLong(map.get("idControleCarga").toString());

		String barcode = map.get("barcode").toString();
		
		return descargaMobileService.storeDescargaDispositivo(barcode, idControleCarga);
		
	}
					
	public Map descargaVolumeConfirmacao(Map map){
		Long idControleCarga = Long.parseLong(map.get("idControleCarga").toString());
		Long idVolumeNotaFiscal = Long.parseLong(map.get("idVolume").toString());

		return descargaMobileService.storeDescargaVolumeConfirmacao(idVolumeNotaFiscal, idControleCarga);
	}	
		
	public void descargaDispositivoConfirmacao(Map map){
		
		Long idDispositivoUnitizacao = Long.parseLong(map.get("idDispositivo").toString());
		Long idControleCarga = Long.parseLong(map.get("idControleCarga").toString());
		
		descargaMobileService.storeDescargaDispositivoConfirmacao(idDispositivoUnitizacao, idControleCarga);
			}
		
	public void concluirDescarga(Long idControleCarga) {
		ControleCarga controleCarga = controleCargaService.findByIdInitLazyProperties(idControleCarga, false);
		// Regra 45.03.04.05 2 a i 1 verifica se o controle de carga está em
		// descarga
		descargaMobileService.isControleCargaEmDescarga(controleCarga);
		
		// tpManifesto = V (Viagem) / C(Coleta), cdLocalizacaoMercadoria = 34
		// (Em Descarga)
		
		descargaMobileService.storeFimDescargaCarregamentoDescarga(getSessionIdFilial(), controleCarga);
	}
	
	public void concluirDescargaComDivergencia(Long idControleCarga){
		ControleCarga controleCarga = controleCargaService.findByIdInitLazyProperties(idControleCarga, false);
		/**
		 * Em caso da descarga ter sido reaberta por outra instancia informa o usuario que ele não pode concluir a descarga.
		 */
		descargaMobileService.storeFimDescargaCarregamentoDescargaComDivergencia(getSessionIdFilial(), controleCarga);
	}
	
	public void liberarDescarga(Long idControleCarga){
		descargaMobileService.executeChangeTPStatusControleCarga(idControleCarga, "ED");
		
	}
	
	/**
	 * Apos a confirmação ajusta a o evento e a localizacao
	 * @param map
	 */

		
		
	public Map findBoxesViagem(Long idControleCarga ){
		
		Map map = new HashMap();
		CarregamentoDescarga carregamentoDescarga = 
			carregamentoDescargaService.findCarregamentoDescarga(idControleCarga, getSessionIdFilial(), "D");
		
		List listaBox = descargaMobileService.findBoxVigente(getSessionIdFilial());
		map.put("boxes", listaBox);
		
		//retorna box sugerido
		if (carregamentoDescarga!=null) {
			if (carregamentoDescarga.getTpOperacao().getValue().equals("D")) {
				if (carregamentoDescarga.getTpStatusOperacao().getValue().equals("P")) {
					Long idBoxSugerido = carregamentoDescarga.getBox().getIdBox();
					map.put("idBoxSugerido", idBoxSugerido);
				}
			}
		}		
		
		return map;
	}
	
	
	
	/**
	 * String lacres(numeroLacre divido por ";" e o situacaoLacre divido por "-" sendo "V"(violado) ou "C"(conferido))
	 * @param strLstIdLacres
	 * @param idControleCarga
	 * @return
	 */
	private List<LacreControleCarga> listaLacresByString(String strLstIdLacres, Long idControleCarga){
		List<LacreControleCarga> listaLacres = new ArrayList<LacreControleCarga>();
		
		if (strLstIdLacres!=null && !strLstIdLacres.equals("")) {
			String strIdLacre[] = strLstIdLacres.split(";");
		
			for (String sIdLacre : strIdLacre) {
				
				String[] strSituacaoLacre = sIdLacre.split("-");
				String situacaoLacre = strSituacaoLacre[1];
				String nrLacres = String.valueOf(strSituacaoLacre[0]);		
				
				LacreControleCarga lacre = lacreControleCargaService.findLacreControleCargaByIdControleCargaAndNrLacre(idControleCarga, nrLacres);
				
				if (lacre != null) {
					//"C"(conferido)
				if(situacaoLacre.equals("C")){
					//CA (Conferido e Aberto)
					lacre.setTpStatusLacre(new DomainValue("CA"));
					//"V"(violado)
				}else if(situacaoLacre.equals("V")){
					lacre.setTpStatusLacre(new DomainValue("NC"));
				}
				listaLacres.add(lacre);				
				}else{
					//PODE RETORNAR A LISTA DE LACRES NÃO ENCONTRADOS SE FOR O DESEJADO
					
					//Antigo LMS-45053- Lacre não foi encontrado.
					//LMS-45053- Lacre não pertence a este carregamento.
					throw new BusinessException("LMS-45053");
			}
		}
		}
		return listaLacres;
	}
	
	private boolean validarKMExcedida(Long idMeioTransporte, Boolean blVirouHodometro, Boolean blSaida, Integer nrQuilometragem, Long idControleCarga) {
		boolean isKMExcedida = false;
		Integer ultimoNrQuilometragem = 0; 
		ControleQuilometragem controleQuilometragemReferencia = null;
		int diferencaQuilometragens = 0;
		
		if(BooleanUtils.isFalse(blSaida)){
			controleQuilometragemReferencia = controleQuilometragemService.findQuilometragemReferenciaMeioTransporte(idMeioTransporte, idControleCarga);
		}
		
		if(controleQuilometragemReferencia != null){
			ultimoNrQuilometragem = controleQuilometragemReferencia.getNrQuilometragem();
		}
		
		if (blVirouHodometro.booleanValue()){
			diferencaQuilometragens = (10000000 - ultimoNrQuilometragem) + nrQuilometragem;
		}else {
			diferencaQuilometragens = nrQuilometragem - ultimoNrQuilometragem;
		}
		
		RotaColetaEntrega rce =  rotaColetaEntregaService.findRotaColetaEntregaByControleCarga(idControleCarga); 
		if (rce != null && (diferencaQuilometragens > rce.getNrKm().intValue())){
			isKMExcedida = true;
		}

		return isKMExcedida;
	}
	
	public Map<String,Object> atualizaVolumesDescarregados(Map<String, Object> parametro) {
		Map<String, Object> controleCargaMapped = new HashMap<String, Object>();
		
		Long idControleCarga = Long.parseLong(parametro.get("idControleCarga").toString());
		
		controleCargaMapped.put("idControleCarga", idControleCarga);
		
		controleCargaMapped.put("conhecimentos", descargaMobileService.findConhecimentosDescargaMapped(idControleCarga, parametro.get("tpControleCarga").toString()));
		
		return controleCargaMapped;
	}
	
	public DescargaMobileService getDescargaMobileService() {
		return descargaMobileService;
	}

	public void setDescargaMobileService(DescargaMobileService descargaMobileService) {
		this.descargaMobileService = descargaMobileService;
	}
	
	public MeioTransporteService getMeioTransporteService() {
		return meioTransporteService;
	}

	public void setMeioTransporteService(MeioTransporteService meioTransporteService) {
		this.meioTransporteService = meioTransporteService;
	}

	public ControleCargaService getControleCargaService() {
		return controleCargaService;
	}

	public void setControleCargaService(ControleCargaService controleCargaService) {
		this.controleCargaService = controleCargaService;
	}

	public CarregamentoDescargaService getCarregamentoDescargaService() {
		return carregamentoDescargaService;
	}

	public void setCarregamentoDescargaService(
			CarregamentoDescargaService carregamentoDescargaService) {
		this.carregamentoDescargaService = carregamentoDescargaService;
	}

	public LacreControleCargaService getLacreControleCargaService() {
		return lacreControleCargaService;
	}

	public void setLacreControleCargaService(
			LacreControleCargaService lacreControleCargaService) {
		this.lacreControleCargaService = lacreControleCargaService;
	}

	public VolumeNotaFiscalService getVolumeNotaFiscalService() {
		return volumeNotaFiscalService;
	}

	public void setVolumeNotaFiscalService(
			VolumeNotaFiscalService volumeNotaFiscalService) {
		this.volumeNotaFiscalService = volumeNotaFiscalService;
	}

	public UnitizacaoService getUnitizacaoService() {
		return unitizacaoService;
	}

	public void setUnitizacaoService(UnitizacaoService unitizacaoService) {
		this.unitizacaoService = unitizacaoService;
	}

	public DispositivoUnitizacaoService getDispositivoUnitizacaoService() {
		return dispositivoUnitizacaoService;
	}

	public void setDispositivoUnitizacaoService(
			DispositivoUnitizacaoService dispositivoUnitizacaoService) {
		this.dispositivoUnitizacaoService = dispositivoUnitizacaoService;
	}

	public EventoVolumeService getEventoVolumeService() {
		return eventoVolumeService;
	}

	public void setEventoVolumeService(EventoVolumeService eventoVolumeService) {
		this.eventoVolumeService = eventoVolumeService;
	}

	public ConfiguracoesFacade getConfiguracoesFacade() {
		return configuracoesFacade;
	}

	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}

	public NotaFiscalConhecimentoService getNotaFiscalConhecimentoService() {
		return notaFiscalConhecimentoService;
	}

	public void setNotaFiscalConhecimentoService(
			NotaFiscalConhecimentoService notaFiscalConhecimentoService) {
		this.notaFiscalConhecimentoService = notaFiscalConhecimentoService;
	}

	public FilialService getFilialService() {
		return filialService;
	}


	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}


	public EquipeOperacaoService getEquipeOperacaoService() {
		return equipeOperacaoService;
	}


	public void setEquipeOperacaoService(EquipeOperacaoService equipeOperacaoService) {
		this.equipeOperacaoService = equipeOperacaoService;
	}

	public ManifestoEntregaVolumeService getManifestoEntregaVolumeService() {
		return manifestoEntregaVolumeService;
	}

	public void setManifestoEntregaVolumeService(
			ManifestoEntregaVolumeService manifestoEntregaVolumeService) {
		this.manifestoEntregaVolumeService = manifestoEntregaVolumeService;
	}

	public void setOcorrenciaEntregaService(OcorrenciaEntregaService ocorrenciaEntregaService) {
		this.ocorrenciaEntregaService = ocorrenciaEntregaService;
	}

	public OcorrenciaEntregaService getOcorrenciaEntregaService() {
		return ocorrenciaEntregaService;
	}

	public ManifestoNacionalVolumeService getManifestoNacionalVolumeService() {
		return manifestoNacionalVolumeService;
	}

	public void setManifestoNacionalVolumeService(
			ManifestoNacionalVolumeService manifestoNacionalVolumeService) {
		this.manifestoNacionalVolumeService = manifestoNacionalVolumeService;
	}

	public void setControleQuilometragemService(
			ControleQuilometragemService controleQuilometragemService) {
		this.controleQuilometragemService = controleQuilometragemService;
	}

	public void setRotaColetaEntregaService(
			RotaColetaEntregaService rotaColetaEntregaService) {
		this.rotaColetaEntregaService = rotaColetaEntregaService;
	}
	
	public void setManifestoService(ManifestoService manifestoService) {
		this.manifestoService = manifestoService;
	}
}