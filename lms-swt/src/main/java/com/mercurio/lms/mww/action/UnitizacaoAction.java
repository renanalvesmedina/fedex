package com.mercurio.lms.mww.action;

import java.math.BigDecimal;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.lms.carregamento.model.DispositivoUnitizacao;
import com.mercurio.lms.carregamento.model.service.DispositivoUnitizacaoService;
import com.mercurio.lms.carregamento.model.service.UnitizacaoService;
import com.mercurio.lms.expedicao.model.VolumeNotaFiscal;
import com.mercurio.lms.expedicao.model.service.VolumeNotaFiscalService;
import com.mercurio.lms.portaria.model.MacroZona;
import com.mercurio.lms.portaria.model.service.MacroZonaService;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.mww.unitizacaoAction"
 */
public class UnitizacaoAction extends CrudAction {
	private UnitizacaoService unitizacaoService;
	private MacroZonaService macroZonaService;
	private VolumeNotaFiscalService volumeNotaFiscalService;
	private DispositivoUnitizacaoService dispositivoUnitizacaoService;
	
	/**
	 * 
	 * @param barCode
	 * @return Map
	 */
	public Map<String, Object> findMapDispositivoUnitizacaoByBarcode(String barCode){		
		return unitizacaoService.findMapDispositivoUnitizacaoByBarcode(barCode);    	
    }
	
	public Map findDadosDispositivoUnitizacao(String barCode){
		return unitizacaoService.findDadosDispositivoUnitizacao(barCode);
	}
	
	public Map<String, Object> findLeituraNovoVolume(String barCode){
		return unitizacaoService.findLeituraNovoVolume(barCode);
	}
	
	public void storeUnitizacao(Map map){
		String idDispositivoPai = (String) map.get("idDispositivoPai");
		String idsVolumes = map.get("idsVolumes").toString();
		String idsDispositivos = map.get("idsDispositivos").toString();
		Boolean blSorter =(Boolean) map.get("blSorter");
		unitizacaoService.storeUnitizacao(idDispositivoPai, idsVolumes, idsDispositivos);
	}

	/**
	 * Atualiza o dispositivo, colocando ele na filial do usuário logado e setando a localização da mercadoria para ‘No Terminal’
	 */
	public void executeAtualizarFilialLocalizacaoDispositivo(long idDispositivoUnitizacao){	
		dispositivoUnitizacaoService.executeAtualizarFilialLocalizacaoDispositivo(idDispositivoUnitizacao);			
	}
	
	public java.io.Serializable executeEventoDispositivoUnitizado(Long idDispositivo){
		return unitizacaoService.executeEventoDispositivoUnitizado(idDispositivo);
	}
	
	public java.io.Serializable executeEventoDispositivoDesunitizado(Long idDispositivo) {
		return unitizacaoService.executeEventoDispositivoDesunitizado(idDispositivo);
	}
	
	public java.io.Serializable executeEventoDispositivoUnitizadoTpScan(Long idDispositivo, String TpScan){
		return unitizacaoService.executeEventoDispositivoUnitizadoTpScan(idDispositivo, TpScan);
	}
	
	public java.io.Serializable executeEventoDispositivoDesunitizadoTpScan(Long idDispositivo, String TpScan) {
		return unitizacaoService.executeEventoDispositivoDesunitizadoTpScan(idDispositivo, TpScan);
	}
		
	
	public java.io.Serializable executeEventoVolumeUnitizado(Long idVolumeNotaFiscal){
		return unitizacaoService.executeEventoVolumeUnitizado(idVolumeNotaFiscal);
	}
	
	public java.io.Serializable executeEventoVolumeDesunitizado(Long idVolumeNotaFiscal) {
		return unitizacaoService.executeEventoVolumeDesunitizado(idVolumeNotaFiscal);
	}
		
	public java.io.Serializable executeEventoVolumeUnitizadoTpScan(Long idVolumeNotaFiscal, String TpScan){
		return unitizacaoService.executeEventoVolumeUnitizadoTpScan(idVolumeNotaFiscal, TpScan);
	}
	
	public java.io.Serializable executeEventoVolumeDesunitizadoTpScan(Long idVolumeNotaFiscal, String TpScan) {
		return unitizacaoService.executeEventoVolumeDesunitizadoTpScan(idVolumeNotaFiscal, TpScan);
	}
	
	public Map findDadosVolumeNotaFiscal(Map map){
		String barCode= (String) map.get("barCode");
		String idDispUnit= (String)map.get("idDispositivoUnitizado");
		Long idDispositivoUnitizado = Long.parseLong(idDispUnit);
		return unitizacaoService.findDadosVolumeNotaFiscal(barCode, idDispositivoUnitizado);
	}
	
	public Map findDispositivoUnitizacaoByPai(Map map){
		String barCode = (String)map.get("barCode");
		String idDispUnit= (String)map.get("idDispositivoUnitizado");
		Long idDispositivoUnitizado = Long.parseLong(idDispUnit);
		return unitizacaoService.findDispositivoUnitizacaoByPai(barCode, idDispositivoUnitizado);
	}
	
	public Map storeDesunitizarTotal(Map map){
		String idDispUnit= (String)map.get("idDispositivoUnitizado");
		Long idDispositivoUnitizado = Long.parseLong(idDispUnit);
		List<VolumeNotaFiscal> idsVolumes = unitizacaoService.findVolumesByString(map.get("idsVolumes").toString());
		List<DispositivoUnitizacao> idsDispositivoUnitizacao = unitizacaoService.findDispositivoByString((String)map.get("idsDispositivoUnitizacao"));
	    return unitizacaoService.storeDesunitizarTotal(idDispositivoUnitizado, idsVolumes, idsDispositivoUnitizacao);
	}
	
	public Map storeDesunitizarTotalComDivergencias(Map map){
		String idDispUnit= (String)map.get("idDispositivoUnitizado");
		Long idDispositivoUnitizado = Long.parseLong(idDispUnit);
		List<VolumeNotaFiscal> idsVolumes = unitizacaoService.findVolumesByString(map.get("idsVolumes").toString());
		List<DispositivoUnitizacao> idsDispositivoUnitizacao = unitizacaoService.findDispositivoByString((String)map.get("idsDispositivoUnitizacao"));

		return unitizacaoService.storeDesunitizarTotalComDivergencia(idDispositivoUnitizado, idsVolumes, idsDispositivoUnitizacao);
	}
	
	public void storeDesunitizarParcial(Map map){
		String idDispUnit= (String)map.get("idDispositivoUnitizado");
		Long idDispositivoUnitizado = Long.parseLong(idDispUnit);
		List<VolumeNotaFiscal> idsVolumes = unitizacaoService.findVolumesByString(map.get("idsVolumes").toString());    
		List<DispositivoUnitizacao> idsDispositivoUnitizacao = unitizacaoService.findDispositivoByString((String)map.get("idsDispositivoUnitizacao"));
		unitizacaoService.storeDesunitizarParcial(idDispositivoUnitizado, idsVolumes, idsDispositivoUnitizacao);
	}

	public Map findEnderecoByBarcode(String barcode){
		return unitizacaoService.findEnderecoByBarcode(new BigDecimal(barcode));
	}
	
	public void storeAlocar(Map map){
		MacroZona macroZona = macroZonaService.findById(Long.parseLong((String)map.get("idEnderecoTerminal")));
		
		unitizacaoService.storeAlocar(macroZona, map.get("idsVolumes").toString(), map.get("idsDispositivoUnitizacao").toString());
	}
	
	public void storeDesalocar(Map map){
		MacroZona macroZona = null;
		
		Object idEnderecoTerminal = map.get("idEnderecoTerminal");
		
		if(idEnderecoTerminal != null) {
			macroZona = macroZonaService.findById(Long.parseLong((String)idEnderecoTerminal));
		}
		
		unitizacaoService.storeDesalocar(macroZona, map.get("idsVolumes").toString(), map.get("idsDispositivoUnitizacao").toString());
	}
	
	
	
	/**
	 * Método execute para que se o dispositivo não exista ele possa criá-lo
	 * @param barcode
	 * @return
	 */
	public Map<String, Object> executeFindDispositivoUnitizacaoByBarcode(String barcode){
		return unitizacaoService.executeFindDispositivoUnitizacaoByBarcode(barcode); 
	}
	
	/**
	 * @return the unitizacaoService
	 */
	public UnitizacaoService getUnitizacaoService() {
		return unitizacaoService;
	}
	/**
	 * @param unitizacaoService the unitizacaoService to set
	 */
	public void setUnitizacaoService(UnitizacaoService unitizacaoService) {
		this.unitizacaoService = unitizacaoService;
	}
	
	public void setMacroZonaService(MacroZonaService macroZonaService) {
		this.macroZonaService = macroZonaService;
	}
	
	public MacroZonaService getMacroZonaService() {
		return macroZonaService;
	}
	
	public void setVolumeNotaFiscalService(VolumeNotaFiscalService volumeNotaFiscalService) {
		this.volumeNotaFiscalService = volumeNotaFiscalService;
}

	public VolumeNotaFiscalService getVolumeNotaFiscalService() {
		return volumeNotaFiscalService;
	}

	public void setDispositivoUnitizacaoService(
			DispositivoUnitizacaoService dispositivoUnitizacaoService) {
		this.dispositivoUnitizacaoService = dispositivoUnitizacaoService;
	}

	public DispositivoUnitizacaoService getDispositivoUnitizacaoService() {
		return dispositivoUnitizacaoService;
	}	
	
}
