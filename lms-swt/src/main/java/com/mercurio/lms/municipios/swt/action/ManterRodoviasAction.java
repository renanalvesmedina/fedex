package com.mercurio.lms.municipios.swt.action;

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.municipios.model.Pais;
import com.mercurio.lms.municipios.model.Rodovia;
import com.mercurio.lms.municipios.model.UnidadeFederativa;
import com.mercurio.lms.municipios.model.service.PaisService;
import com.mercurio.lms.municipios.model.service.RodoviaService;
import com.mercurio.lms.municipios.model.service.UnidadeFederativaService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.municipios.swt.manterRodoviasAction"
 */

public class ManterRodoviasAction extends CrudAction {
	
	private PaisService paisService;
	private UnidadeFederativaService unidadeFederativaService;
	
	public void setRodovia(RodoviaService paisService) {
		this.defaultService = paisService;
	}
	public RodoviaService getRodoviaService() {
		return (RodoviaService)this.defaultService;
	}
    public void setPaisService(PaisService paisService) {
		this.paisService = paisService;
	}
	public void setUnidadeFederativaService(UnidadeFederativaService unidadeFederativaService) {
		this.unidadeFederativaService = unidadeFederativaService;
	}


	public void removeById(java.lang.Long id) {
        ((RodoviaService)defaultService).removeById(id);
    }

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	((RodoviaService)defaultService).removeByIds(ids);
    }

    public Rodovia findById(java.lang.Long id) {
    	return ((RodoviaService)defaultService).findById(id);
    }

    public ResultSetPage findPaginatedCustom(TypedFlatMap criteria) {
		ResultSetPage rsp = ((RodoviaService)defaultService).findPaginatedCustom( createFindCriteria(criteria) );
		for (Iterator iter = rsp.getList().iterator(); iter.hasNext();){
			TypedFlatMap tfm = (TypedFlatMap)iter.next();
			tfm.put("nmPais", tfm.get("pais.nmPais"));
			tfm.put("idUnidadeFederativa", tfm.get("unidadeFederativa.idUnidadeFederativa"));
			tfm.put("sgUnidadeFederativa", tfm.get("unidadeFederativa.sgUnidadeFederativa"));
			tfm.remove("pais.nmPais");
			tfm.remove("unidadeFederativa.idUnidadeFederativa");
			tfm.remove("unidadeFederativa.nmUnidadeFederativa");
		}
		return rsp;
	}

	public Integer getRowCountCustom(TypedFlatMap criteria) {
		return ((RodoviaService)defaultService).getRowCountCustom( createFindCriteria(criteria) );
	}


    /**
     * Cria mapa com filtros para pesquisa.
     * @param criteria
     * @return
     */
	private TypedFlatMap createFindCriteria(Map criteria) {
		TypedFlatMap tfm = new TypedFlatMap();
		tfm.put("_currentPage", criteria.get("_currentPage"));
		tfm.put("_pageSize", criteria.get("_pageSize"));
		tfm.put("_order", criteria.get("_order"));

		tfm.put("unidadeFederativa.idUnidadeFederativa", criteria.get("idUnidadeFederativa"));
		tfm.put("tpSituacao", criteria.get("tpSituacao"));
		tfm.put("dsRodovia", criteria.get("dsRodovia"));

		String sgRodovia = "%";
		if (criteria.get("sgRodovia") != null) {
			sgRodovia = (String)criteria.get("sgRodovia") + sgRodovia;
		}
		tfm.put("sgRodovia", sgRodovia);
		tfm.put("pais.idPais", criteria.get("idPais"));
    	return tfm;
	}

	
	public List findLookupPais(Map criteria){
		List lista = paisService.findLookup(criteria);
		if (!lista.isEmpty() && lista.size() == 1) {
			Pais pais = (Pais)lista.get(0);
			Map map = new HashMap();
			map.put("idPais", pais.getIdPais());
			map.put("nmPais", pais.getNmPais().toString());
			lista.add(map);
			lista.remove(pais);
		}
		return lista;
	}
	

	public List findLookupUF(Map criteria){
		if (criteria.get("idPais") != null){
			Map pais = new HashMap();
			pais.put("idPais", criteria.get("idPais"));
			criteria.put("pais", pais);
		}
		List lista = unidadeFederativaService.findLookup(criteria);
		if (!lista.isEmpty() && lista.size() == 1){
			UnidadeFederativa uf = (UnidadeFederativa)lista.get(0);
			Map map = new HashMap();
			map.put("idUnidadeFederativa", uf.getIdUnidadeFederativa());
			map.put("sgUnidadeFederativa", uf.getSgUnidadeFederativa());
			map.put("nmUnidadeFederativa", uf.getNmUnidadeFederativa());
			if (uf.getPais() != null) {
				map.put("idPais", uf.getPais().getIdPais());
				map.put("nmPais", uf.getPais().getNmPais().toString());
			}
			lista.add(map);
			lista.remove(uf);
		}
		return lista;
	}
}