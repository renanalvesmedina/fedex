package com.mercurio.lms.municipios.swt.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.lms.municipios.model.Pais;
import com.mercurio.lms.municipios.model.UnidadeFederativa;
import com.mercurio.lms.municipios.model.service.MunicipioService;
import com.mercurio.lms.municipios.model.service.PaisService;
import com.mercurio.lms.municipios.model.service.RegiaoGeograficaService;
import com.mercurio.lms.municipios.model.service.UnidadeFederativaService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.municipios.swt.manterUnidadesFederativasAction"
 */

public class ManterUnidadesFederativasAction extends CrudAction {
	private PaisService paisService;
	private RegiaoGeograficaService regiaoGeograficaService;
	private MunicipioService municipioService;
	private UnidadeFederativaService unidadeFederativaService;
	
	public void setMunicipioService(MunicipioService municipioService) {
		this.municipioService = municipioService;
	}
	public void setRegiaoGeograficaService(RegiaoGeograficaService regiaoGeograficaService) {
		this.regiaoGeograficaService = regiaoGeograficaService;
	}
	public void setPaisService(PaisService paisService) {
		this.paisService = paisService;
	}
	public void setUnidadeFederativa(UnidadeFederativaService unidadeFederativaService) {
		this.defaultService = unidadeFederativaService;
	}
	public void setUnidadeFederativaService(UnidadeFederativaService unidadeFederativaService) {
		this.unidadeFederativaService = unidadeFederativaService;
	}


    public List findLookupPais(Map criteria){
    	List lista = paisService.findLookup(criteria);
		if(!lista.isEmpty() && lista.size()==1){
			Pais pais = (Pais)lista.get(0);
			Map mapa = new HashMap();
			mapa.put("nmPais", pais.getNmPais().toString());
			mapa.put("idPais", pais.getIdPais());
			mapa.put("tpSituacao", pais.getTpSituacao().getDescription().toString());
			lista.add(mapa);
			lista.remove(pais);
		}
		return lista;
    }


    public List findRegiaoGeografica(Map criteria){
    	return regiaoGeograficaService.find(criteria);
    }


    public List findLookupCapital(Map criteria){
    	return municipioService.findLookup(criteria);
    }
    
    
	@Override
	public ResultSetPage findPaginated(Map criteria) {
		Map mapaCriteria = montaTypedFlatMapListagem(criteria);
		List listaNova = new ArrayList();
		ResultSetPage rs = unidadeFederativaService.findPaginated(mapaCriteria);
		
		for(Iterator iter = rs.getList().iterator();iter.hasNext();){
			UnidadeFederativa uf = (UnidadeFederativa)iter.next();
			Map mapaListagem = new HashMap();
			
			mapaListagem.put("idUnidadeFederativa", uf.getIdUnidadeFederativa());
			
			if(uf.getMunicipio()!= null){
				mapaListagem.put("nmMunicipio", uf.getMunicipio().getNmMunicipio());
			}
			
			if(uf.getRegiaoGeografica()!= null){
				mapaListagem.put("dsRegiaoGeografica", uf.getRegiaoGeografica().getDsRegiaoGeografica().toString());
			}
			
			if(uf.getSgUnidadeFederativa()!= null){
				mapaListagem.put("sgUnidadeFederativa", uf.getSgUnidadeFederativa());
			}
			
			if(uf.getNmUnidadeFederativa()!= null){
				mapaListagem.put("nmUnidadeFederativa", uf.getNmUnidadeFederativa());
			}
			
			if(uf.getPais()!= null){
				mapaListagem.put("idPais", uf.getPais().getIdPais());
				mapaListagem.put("nmPais", uf.getPais().getNmPais().toString());
				mapaListagem.put("tpSituacaoPais", uf.getPais().getTpSituacao().getDescription().toString());
			}
			
			if(uf.getBlCobraTas()!= null && uf.getBlCobraTas().booleanValue()== true){				
				mapaListagem.put("blCobraTas","/image/checked.gif");				
			}
			
			if (uf.getBlCobraSuframa() != null && uf.getBlCobraSuframa().booleanValue()== true) {               
                mapaListagem.put("blCobraSuframa","/image/checked.gif");               
           }
			
			if(uf.getBlIcmsPedagio()!= null && uf.getBlIcmsPedagio().booleanValue()== true){				
					mapaListagem.put("blIcmsPedagio","/image/checked.gif");				
			}
			
			if(uf.getTpSituacao()!= null){
				mapaListagem.put("tpSituacao", uf.getTpSituacao());
			}
			listaNova.add(mapaListagem);
		}
		rs.setList(listaNova);
 		return rs;
	}


	@Override
	public Integer getRowCount(Map criteria) {
		Map mapa = montaTypedFlatMapListagem(criteria);
		return unidadeFederativaService.getRowCount(mapa);
	}

    
    private Map montaTypedFlatMapListagem(Map criteria){
    	Map idPais = new HashMap();
		idPais.put("idPais",criteria.get("idPais"));
		criteria.put("pais", idPais);
	
		Map idMunicipio = new HashMap();
		idMunicipio.put("idMunicipio",criteria.get("idMunicipio"));
		criteria.put("municipio", idMunicipio);
	
		Map idRegiaoGeografica = new HashMap();
		idRegiaoGeografica.put("idRegiaoGeografica",criteria.get("idRegiaoGeografica"));
		criteria.put("regiaoGeografica", idRegiaoGeografica);
    	
		return criteria;
    }
    
    
	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		unidadeFederativaService.removeByIds(ids);
	}
}