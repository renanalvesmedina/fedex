package com.mercurio.lms.municipios.swt.action;

import static com.mercurio.lms.util.FormatUtils.formatIdentificacao;
import static java.util.Collections.EMPTY_LIST;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.FilterResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.contratacaoveiculos.model.Proprietario;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTranspProprietarioService;
import com.mercurio.lms.contratacaoveiculos.model.service.TipoMeioTransporteService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.RotaIdaVolta;
import com.mercurio.lms.municipios.model.RotaViagem;
import com.mercurio.lms.municipios.model.TrechoRotaIdaVolta;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.MeioTransporteRotaViagemService;
import com.mercurio.lms.municipios.model.service.MotivoParadaPontoTrechoService;
import com.mercurio.lms.municipios.model.service.MotoristaRotaViagemService;
import com.mercurio.lms.municipios.model.service.PontoParadaTrechoService;
import com.mercurio.lms.municipios.model.service.RotaIdaVoltaService;
import com.mercurio.lms.municipios.model.service.RotaService;
import com.mercurio.lms.municipios.model.service.RotaViagemService;
import com.mercurio.lms.municipios.model.service.TrechoRotaIdaVoltaService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.JTFormatUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.municipios.swt.consultarRotasViagemAction"
 */
public class ConsultarRotasViagemAction extends CrudAction {
    
    private RotaService rotaService;
    private RotaIdaVoltaService rotaIdaVoltaService;
    private MeioTransporteRotaViagemService meioTransporteRotaViagemService;
    private MotoristaRotaViagemService motoristaRotaViagemService;
    private TrechoRotaIdaVoltaService trechoRotaIdaVoltaService;
    private PontoParadaTrechoService pontoParadaTrechoService;
    private MotivoParadaPontoTrechoService motivoParadaPontoTrechoService;
    private FilialService filialService;
    private RotaViagemService rotaViagemService;
    private MeioTranspProprietarioService meioTranspProprietarioService;
    private TipoMeioTransporteService tipoMeioTransporteService;
	
    /*
     * Retorna tpRota para manipular comporamento a partir do tipo de rota 
     * EXPRESSA ou EVENTUAL na aba de Rota de Ida.
     */
    public Map<String, Object> findByIdRotaIda(Long id) {
    	Map<String, Object> map = rotaIdaVoltaService.findByIdToConsultarRotas(id, true);
    	prepareFindResult(map);
    	map.put("idRotaViagem", id);
    	return map;
    }
    
    /*
     * Find da aba rotaVolta.
     */
    public Map<String, Object> findByIdRotaVolta(Long idRotaViagem) {
    	Map<String, Object> map = rotaIdaVoltaService.findByIdToConsultarRotas(idRotaViagem, false);
    	prepareFindResult(map);		
    	return map;
    }
    
	public ResultSetPage findPaginated(Map filtros) {
		return rotaViagemService.findPaginatedToConsultarRotas(prepareCriteria(filtros));
	}

	/*
	 * GetRowCount da consulta principal.
	 * @see com.mercurio.adsm.framework.model.CrudAction#getRowCount(java.util.Map)
	 */
	public Integer getRowCount(Map criteria) {
		return rotaViagemService.getRowCountToConsultarRotas(prepareCriteria(criteria));
	}
	 
	/*
	 * Find da aba Meio de Tranporte Expressa.
	 */
	public List<Map<String, Object>> findMeioTranspExpressa(Long idRotaViagem) {
		List<Map<String, Object>> meios = meioTransporteRotaViagemService.findToConsultarRotas(idRotaViagem);
		List<Map<String, Object>> result = new ArrayList<Map<String,Object>>();
		for (Map<String, Object> meio : meios) {
			Long idMeioTransporte = (Long) meio.get("meioTransporte_idMeioTransporte");
			Proprietario proprietario = meioTranspProprietarioService.findProprietarioByIdMeioTransporte(idMeioTransporte, JTDateTimeUtils.getDataAtual());
			
			Map<String, Object> mapMeio = new HashMap<String, Object>();
			mapMeio.put("nrFrota",meio.get("meioTransporte_nrFrota"));
			mapMeio.put("nrIdentificador",meio.get("meioTransporte_nrIdentificador"));
			mapMeio.put("dsTipoMeioTransporte",meio.get("dsTipoMeioTransporte"));
			mapMeio.put("dsMarcaMeioTransporte",meio.get("dsMarcaMeioTransporte"));
			mapMeio.put("dsModeloMeioTransporte",meio.get("dsModeloMeioTransporte"));
			mapMeio.put("nrAnoFabricao",meio.get("meioTransporte_nrAnoFabricao"));
			mapMeio.put("dtVigenciaInicial",meio.get("dtVigenciaInicial"));
			mapMeio.put("dtVigenciaFinal",meio.get("dtVigenciaFinal"));
			if (proprietario != null) {
				mapMeio.put("nmProprietario", proprietario.getPessoa().getNmPessoa());
				mapMeio.put("tpIdentificacao", proprietario.getPessoa().getTpIdentificacao());
				mapMeio.put("nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(proprietario.getPessoa()));
			}
			result.add(mapMeio);
		}
		
		return result;
	}
	
	/*
	 * Find da aba Motoristas.
	 * Se pessoa possui nrIdentificacao e tpIdentificacao, formata a identificacao.
	 */
	public List<Map<String, Object>> findMotoristas(Long idRotaViagem) {
		List<Map<String, Object>> motoristas = motoristaRotaViagemService.findToConsultarRotas(idRotaViagem);
		for (Map<String, Object> motorista : motoristas) {
			DomainValue tpIdentificacao = (DomainValue) motorista.get("motorista_pessoa_tpIdentificacao");
			String nrIdentificacao = (String) motorista.get("motorista_pessoa_nrIdentificacao");
			if (nrIdentificacao != null) {
				if (tpIdentificacao != null) {
					motorista.put("nrIdentificacaoFormatado", formatIdentificacao(tpIdentificacao.getValue(), nrIdentificacao));
				} else {
					motorista.put("nrIdentificacaoFormatado", nrIdentificacao);
				}
			}
			motorista.put("tpIdentificacao", motorista.remove("motorista_pessoa_tpIdentificacao.description"));
			motorista.put("nmPessoa", motorista.remove("motorista_pessoa_nmPessoa"));
		}
		return motoristas;
	}
	
	/*
	 * Encontra trechos da rota. Primeira grid das abas Rota ida e Rota volta.
	 * Transforma nrOperacao e nrTempoViagem em horas (String) pois estão salvos no banco como minutos (String).
	 */
	public List findTrechosRota(Map criteria) {
		Long idRotaIdaVolta = (Long) criteria.get("idRotaIdaVolta");
		if (idRotaIdaVolta == null) {
			return EMPTY_LIST;
		}
		 
		List<Map<String, Object>> trechos = trechoRotaIdaVoltaService.findToConsultarRotas(idRotaIdaVolta);
		for (Map<String, Object> trecho : trechos) {
			Integer nrTempoOperacao = (Integer) trecho.get("nrTempoOperacao");
			if (nrTempoOperacao != null) {
				trecho.put("nrTempoOperacao", JTFormatUtils.formatTime((nrTempoOperacao.longValue() * 60), 2, 1));
			}
			
			Integer nrTempoViagem = (Integer) trecho.get("nrTempoViagem");
			if (nrTempoViagem != null) {
				trecho.put("nrTempoViagem", JTFormatUtils.formatTime((nrTempoViagem.longValue() * 60), 2, 1));
			}
		}
		return trechos;
	}
	
	/*
	 * Encontra Pontos de parada do trecho. Segunda grid das abas Rota ida e Rota volta.
	 * Transforma nrTempoParada em horas (String) pois está salvo no banco como minutos (String).
	 */
	public List findPontosParadaTrecho(Map criteria) {
		Long idTrechoRotaIdaVolta = (Long) criteria.get("idTrechoRotaIdaVolta");
		if (idTrechoRotaIdaVolta == null) { 
			return EMPTY_LIST;
		}
		
		List<Map<String, Object>> pontos = pontoParadaTrechoService.findToConsultarRotas(idTrechoRotaIdaVolta);
		for (Map<String, Object> ponto : pontos) {
			if (ponto.get("nrTempoParada") != null) {
				Integer nrTempoParada = (Integer) ponto.get("nrTempoParada");
				if (nrTempoParada != null) {
					ponto.put("nrTempoParada", JTFormatUtils.formatTime((nrTempoParada.longValue() * 60), 2, 1));
				}
			}
			ponto.put("sgRodovia", ponto.remove("rodovia_sgRodovia"));
			ponto.put("dsRodovia", ponto.remove("rodovia_dsRodovia"));
			ponto.put("nrKm", ponto.remove("pontoParada_nrKm"));
		}
		return pontos;
	}
	
	public List<Map<String, Object>> findLookupFilial(Map criteria) {
		List<Filial> filiais = filialService.findLookup(criteria);
		if (filiais != null) {
			List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();
			for (Filial filial : filiais) {
				Map<String, Object> mapFilial = new HashMap<String, Object>();
				mapFilial.put("sgFilial", filial.getSgFilial());
				mapFilial.put("idFilial", filial.getIdFilial());
				mapFilial.put("nmFantasia", filial.getPessoa().getNmFantasia());
				result.add(mapFilial);
			}
			return result;
		}
		return null;
    }
	
	public ResultSetPage findPaginatedRotaIdaVolta(TypedFlatMap criteria) {
		ResultSetPage rsp = rotaIdaVoltaService.findPaginatedCustom(criteria);
		
		FilterResultSetPage frsp = new FilterResultSetPage(rsp) {

			public Map filterItem(Object item) {
				RotaIdaVolta riv = (RotaIdaVolta)item;
				TypedFlatMap row = new TypedFlatMap();
				 
				row.put("idRotaIdaVolta",riv.getIdRotaIdaVolta());
				row.put("nrRota",riv.getNrRota());
				row.put("versao",riv.getVersao());
				row.put("rota.idRota",riv.getRota().getIdRota());
				row.put("rota.dsRota",riv.getRota().getDsRota());
				row.put("rotaViagem.idRotaViagem",riv.getRotaViagem().getIdRotaViagem());
				row.put("rotaViagem.versao",riv.getRotaViagem().getVersao());
				
				
				TrechoRotaIdaVolta triv = trechoRotaIdaVoltaService.findTrechoByIdRotaAndFilialOrigem(riv.getIdRotaIdaVolta());
				if (triv != null)
					row.put("hrSaida",triv.getHrSaida());
				
				RotaViagem rotaViagem = riv.getRotaViagem();
				row.put("dtVigenciaInicial",rotaViagem.getDtVigenciaInicial());
				row.put("dtVigenciaFinal",rotaViagem.getDtVigenciaFinal());
				
				row.put("tpRotaIdaVolta", riv.getTpRotaIdaVolta());
				row.put("vlFreteKm", riv.getVlFreteKm());
				row.put("nrDistancia", riv.getNrDistancia());
				row.put("moedaPais.moeda.idMoeda", riv.getMoedaPais().getMoeda().getIdMoeda());
				row.put("moedaPais.moeda.sgMoeda", riv.getMoedaPais().getMoeda().getSgMoeda());
				row.put("moedaPais.moeda.dsSimbolo", riv.getMoedaPais().getMoeda().getDsSimbolo());
				if (rotaViagem.getTipoMeioTransporte() != null) {
					row.put("rotaViagem.tipoMeioTransporte.idTipoMeioTransporte", rotaViagem.getTipoMeioTransporte().getIdTipoMeioTransporte());
				}
				return row;
			}
			
		};
		
		return (ResultSetPage)frsp.doFilter();
	}
	
	public Integer getRowCountRotaIdaVolta(TypedFlatMap criteria) {
		return rotaIdaVoltaService.getRowCountCustom(criteria);
	}
	
	/*
	 * Encontra Motivos do ponto de parada do trecho. Terceira grid das abas Rota ida e Rota volta.
	 */
	public List findMotivosPontosParadaTrecho(Map criteria) {
		Long idPontoParadaTrecho = (Long) criteria.get("idPontoParadaTrecho");
		if (idPontoParadaTrecho == null) {
			return EMPTY_LIST;
		}
		return motivoParadaPontoTrechoService.findToConsultarRotas(idPontoParadaTrecho);
	}
		
    /**
	 * Retorna dados para uma lookup de filial a partir de uma sigla.
	 * 
	 * @author Felipe Ferreira
	 * @param criteria
	 * @return
	 */
	public List findRotaLookup(Map criteria) {
		return rotaService.findLookup(criteria);
	}
	
	/**
	 * Popula a combo de tipos de meio de transporte na tela.
	 * 
	 * @param criteria
	 * @return
	 */
	public List<Map<String, Object>> findTipoMeioTransporte(Map criteria) {
		return tipoMeioTransporteService.findCombo(criteria);
	}
	
	/*
	 * METODOS PRIVADOS
	 */
	
	/**
	 * Prepara os criterios de pesquisa para a service.
	 */
	private TypedFlatMap prepareCriteria(Map<String, Object> criteria) {
		TypedFlatMap result = new TypedFlatMap();
		result.put("_currentPage", criteria.get("_currentPage"));
    	result.put("_pageSize", criteria.get("_pageSize"));
    	result.put("_order", criteria.get("_order"));
    	
    	result.put("filialOrigem.idFilial", criteria.get("idFilialOrigem"));
    	result.put("filialDestino.idFilial", criteria.get("idFilialDestino"));
    	result.put("filialIntermediaria.idFilial", criteria.get("idFilialIntermediaria"));
    	result.put("nrRota", criteria.get("nrRota"));
    	result.put("vigentes", criteria.get("vigentes"));
    	result.put("tpRota", criteria.get("tpRota"));
    	result.put("tpSistemaRota", criteria.get("tpSistemaRota"));
    	result.put("tipoMeioTransporte.idTipoMeioTransporte", criteria.get("idTipoMeioTransporte"));
    	result.put("hrSaida", criteria.get("hrSaida"));
    	
    	return result;
	}
	
	/**
     * Método private para simplificar as chamadas do valor do pedágio tanto 
     * para rota de ida quanto de volta.
     * 
     * @param idMoedaPais
     * @param idTipoMeioTransporte
     * @param idRota
     * @return
     */
    private BigDecimal findVlPedagio(Long idMoedaPais, Long idTipoMeioTransporte, Long idRotaIdaVolta){
    	BigDecimal vlPedagio = null;
    	vlPedagio = rotaViagemService.findVlPedagio(idMoedaPais, idTipoMeioTransporte, null, idRotaIdaVolta);
    	return vlPedagio;
    }
    
    /**
     * Método private para simplificar as chamadas do tempo de viagem para rota 
     * de ida quanto de volta.
     * 
     * @param idRota
     * @return
     */
    private String findTempoViagem(Long idRota) {
    	String nrTempoViagem = "";
		Integer nrTempo = rotaViagemService.findMaiorTempoViagemOfRota(idRota);
		nrTempoViagem = FormatUtils.converteMinutosParaHorasMinutos(Long.valueOf(nrTempo.longValue()),FormatUtils.ESCALA_HHH);
		return nrTempoViagem;
    }
    
    private void prepareFindResult(Map<String, Object> result) {
    	DomainValue tpRota = (DomainValue) result.get("tpRotaDominio");
    	DomainValue tpSistema = (DomainValue) result.get("tpSistemaRotaDominio");
    	result.put("tpRota", tpRota.getValue());
    	result.put("dsTpRota", tpRota.getDescription());
    	result.put("tpSistemaRota", tpSistema.getDescription());
    	result.put("hiddenTpSistemaRota", tpSistema.getValue());
    	BigDecimal vlPedagio = null;
		if (result.get("idTipoMeioTransporte") != null) {
			Long idMoedaPais = (Long) result.get("idMoedaPais");
			Long idRotaIdaVolta = (Long) result.get("idRotaIdaVolta");
			if (idMoedaPais != null && idRotaIdaVolta != null) {
		    	vlPedagio = findVlPedagio(idMoedaPais, (Long) result.get("idTipoMeioTransporte"), idRotaIdaVolta);
				result.put("vlPedagio", vlPedagio);
			}
		}	
		String dsMoeda = result.get("sgMoeda") + " " + result.get("dsSimbolo");
		result.put("nrTempoViagem", findTempoViagem((Long) result.get("idRotaIdaVolta")));
		result.put("dsMoeda", dsMoeda);
    }
	
	/*
	 * GETTERS E SETTERS
	 */
	public void setRotaService(RotaService rotaService) {
		this.rotaService = rotaService;
	}
	public void setRotaIdaVoltaService(RotaIdaVoltaService rotaIdaVoltaService) {
		this.rotaIdaVoltaService = rotaIdaVoltaService;
	}
	public void setMeioTransporteRotaViagemService(
			MeioTransporteRotaViagemService meioTransporteRotaViagemService) {
		this.meioTransporteRotaViagemService = meioTransporteRotaViagemService;
	}
	public void setMotoristaRotaViagemService(
			MotoristaRotaViagemService motoristaRotaViagemService) {
		this.motoristaRotaViagemService = motoristaRotaViagemService;
	}
	public void setMotivoParadaPontoTrechoService(
			MotivoParadaPontoTrechoService motivoParadaPontoTrechoService) {
		this.motivoParadaPontoTrechoService = motivoParadaPontoTrechoService;
	}
	public void setPontoParadaTrechoService(
			PontoParadaTrechoService pontoParadaTrechoService) {
		this.pontoParadaTrechoService = pontoParadaTrechoService;
	}
	public void setTrechoRotaIdaVoltaService(
			TrechoRotaIdaVoltaService trechoRotaIdaVoltaService) {
		this.trechoRotaIdaVoltaService = trechoRotaIdaVoltaService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	
    public void setRotaViagemService(RotaViagemService rotaViagemService) {
		this.rotaViagemService = rotaViagemService;
	}

	public void setMeioTranspProprietarioService(
			MeioTranspProprietarioService meioTranspProprietarioService) {
		this.meioTranspProprietarioService = meioTranspProprietarioService;
	}
	
	public TipoMeioTransporteService getTipoMeioTransporteService() {
		return tipoMeioTransporteService;
	}
	public void setTipoMeioTransporteService(
			TipoMeioTransporteService tipoMeioTransporteService) {
		this.tipoMeioTransporteService = tipoMeioTransporteService;
	}
}
