package com.mercurio.lms.municipios.swt.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.service.RecursoMensagemService;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.util.MapUtilsPlus;
import com.mercurio.lms.entrega.model.service.CalcularDiasUteisBloqueioAgendamentoService;
import com.mercurio.lms.entrega.util.ControladorEstadoCalculoDiasUteisBloqueioAgendamento;
import com.mercurio.lms.expedicao.model.DoctoServico;
import com.mercurio.lms.expedicao.model.service.DoctoServicoService;


/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.municipios.swt.recalcularDiasEntregaDocumentoServicoAction"
 */

public class RecalcularDiasEntregaDocumentoServicoAction extends CrudAction{
	
	/**
	 * Chaves dos parametros que vem do map do formbean swt
	 */
	private static final String ID_DOCTO_SERVICO = "idDoctoServico"; 
	private static final String SALVA = "blSalvarValorCalc";
	
	/**
	 * chave do map que bate com os valores das colunas da grid da classe ConsultarDiasEntregaDocumentoServicoList
	 */
	private static final String DATA_CALCULO = "dataCalculo";
	private static final String DIA = "dia";
	private static final String BLOQUEIO = "bloqueio";
	private static final String AGENDAMENTO = "agendamento";
	private static final String QTD_DIAS_UTEIS = "qtdDiasUteis";	
	
	/**
	 * Constante contendo o valor da chave para a lista de maps com os dados para grid da tela swt
	 */
	private static final String DADOS_GRID = "dadosGrid";
	
	/**
	 * Constantes com as chaves para os campos da tela que contem os dados do documento do serviço após calculo
	 */
	private static final String DIAS_REAIS = "diasReais";
	private static final String DIAS_BLOQUEIO = "diasBloqueio";
	private static final String DIAS_AGENDAMENTO = "diasAgendamento";
	private static final String DIAS_TENTATIVA_ENTREGA = "diasTentativaEntrega";
	private static final String DATA_PROJETADA_ENTREGA = "dataProjetadaEntrega";	
	
	private CalcularDiasUteisBloqueioAgendamentoService calcularDiasUteisBloqueioAgendamentoService;
	private DoctoServicoService doctoServicoService;
	private RecursoMensagemService recursoMensagemService;
	
	
	/**
	 * Método utilizado ao clicar no botão calcular da tela de Calcular dias.
	 * Retorna uma lista de listas de map. O primeiro indice da lista contem a lista de maps com os valores
	 * do documento de serviço(dias reais entrega, dias de bloqueio, dias de agendamento, dias de tentativas de entrega e data de entrega projetada)
	 * O segundo indice retorna uma lista de maps contendo os valores coma as datas e as situações de bloqueio, agendamento e quantidade de dias uteis
	 * 
	 * @param parameters
	 * @return List<List<Map<String, Object>>>
	 */
	@SuppressWarnings("unchecked")
	public List<Map<String, Object>> executeCalcular(Map parameters) {
		//Lista de retorno no primeiro indice retorna a lista que contem os dados do documento de serviço(dias reais entrega, bloqueio...)
		//No segundo indice os dados para a grid com a data e o status do bloqueio, agendamento e quantidade de dias uteis
		List<Map<String, Object>> retorno = new ArrayList<Map<String, Object>>();
				
		Map<String, Object> retornoCalculo = calcularDiasUteisBloqueioAgendamentoService
				.executeCalcularDiasUteisBloqueioAgendamento(MapUtilsPlus.getLong(parameters, ID_DOCTO_SERVICO), MapUtilsPlus.getBoolean(parameters, SALVA));
		DoctoServico documento = (DoctoServico) retornoCalculo.get("doctoServico");
		
		//map que vai conter os dados do documento de serviço		
		Map<String, Object> mapDadosDcotoServico = new HashMap<String, Object>();
		mapDadosDcotoServico.put(DIAS_REAIS, documento.getNrDiasRealEntrega());
		mapDadosDcotoServico.put(DIAS_BLOQUEIO, documento.getNrDiasBloqueio());
		mapDadosDcotoServico.put(DIAS_AGENDAMENTO, documento.getNrDiasAgendamento());
		mapDadosDcotoServico.put(DIAS_TENTATIVA_ENTREGA, documento.getNrDiasTentativasEntregas());
		mapDadosDcotoServico.put(DATA_PROJETADA_ENTREGA, documento.getDtProjetadaEntrega());
		retorno.add(mapDadosDcotoServico);
		
		//Lista que contem o map com os dados para a grid
		List<Map<String, Object>> dadosGrid= new ArrayList<Map<String, Object>>();		
		List<ControladorEstadoCalculoDiasUteisBloqueioAgendamento> listaControladores = (List<ControladorEstadoCalculoDiasUteisBloqueioAgendamento>) retornoCalculo.get("listaControlador");
		
		for(ControladorEstadoCalculoDiasUteisBloqueioAgendamento controlador : listaControladores) {
			Map<String, Object> mapControlador = new HashMap<String, Object>();			
			mapControlador.put(DATA_CALCULO, controlador.getDia());
			mapControlador.put(DIA, controlador.getEstadoDia() != null ? 
					recursoMensagemService.findByChave(controlador.getEstadoDia().getChave(), null) : null); 
			
			mapControlador.put(BLOQUEIO, controlador.getEstadoBloqueio() != null ? 
					recursoMensagemService.findByChave(controlador.getEstadoBloqueio().getChave(), null) : null); 
						
			mapControlador.put(AGENDAMENTO, controlador.getEstadoAgendamento() != null ? 
						recursoMensagemService.findByChave(controlador.getEstadoAgendamento().getChave(), null)  : null);
						
			mapControlador.put(QTD_DIAS_UTEIS, controlador.getNrDiasRealEntrega()); 
			dadosGrid.add(mapControlador);
		}
		Map<String, Object> mapGrid = new HashMap<String, Object>();
		mapGrid.put(DADOS_GRID, dadosGrid);
		retorno.add(mapGrid);
		
		return retorno;
	}
	
	/**
	 * Retorna um map contendo os valores carregado do banco dos dias reais entrega, dias de bloqueio, dias de agendamento,
	 *  dias de tentativas de entrega e data de entrega projetada
	 * @param criteria contendo o id do documento
	 * @return
	 */
	public TypedFlatMap findDadosAntigosDoctoServico(TypedFlatMap criteria) {
		TypedFlatMap result = new TypedFlatMap();
		
		Long idDoctoServico = criteria.getLong("idDoctoServico");
		DoctoServico documento = doctoServicoService.findById(idDoctoServico);
		
		result.put(DIAS_REAIS, documento.getNrDiasRealEntrega());
		result.put(DIAS_BLOQUEIO, documento.getNrDiasBloqueio());
		result.put(DIAS_AGENDAMENTO, documento.getNrDiasAgendamento());
		result.put(DIAS_TENTATIVA_ENTREGA, documento.getNrDiasTentativasEntregas());
		result.put(DATA_PROJETADA_ENTREGA, documento.getDtProjetadaEntrega());
		
		return result;
	}

	public List findDoctoServicoManual(Map criteria){
		criteria.put("idFilialOrigem", criteria.get("idFilial"));
		criteria.put("nrDoctoServico", criteria.get("nrDoctoServico"));
		criteria.put("dvConhecimento", criteria.get("dvConhecimento"));
		return doctoServicoService.findDoctoServicoManual(criteria);
	}
	
	public void setCalcularDiasUteisBloqueioAgendamentoService(
			CalcularDiasUteisBloqueioAgendamentoService calcularDiasUteisBloqueioAgendamentoService) {
		this.calcularDiasUteisBloqueioAgendamentoService = calcularDiasUteisBloqueioAgendamentoService;
	}

	public void setDoctoServicoService(DoctoServicoService doctoServicoService) {
		this.doctoServicoService = doctoServicoService;
	}

	public void setRecursoMensagemService(
			RecursoMensagemService recursoMensagemService) {
		this.recursoMensagemService = recursoMensagemService;
	}

}
