package com.mercurio.lms.municipios.swt.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.FilterResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.service.EnderecoPessoaService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.RotaColetaEntrega;
import com.mercurio.lms.municipios.model.RotaIntervaloCep;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.MunicipioFilialService;
import com.mercurio.lms.municipios.model.service.MunicipioService;
import com.mercurio.lms.municipios.model.service.OperacaoServicoLocalizaService;
import com.mercurio.lms.municipios.model.service.RotaColetaEntregaService;
import com.mercurio.lms.municipios.model.service.RotaIntervaloCepService;
import com.mercurio.lms.municipios.model.service.TipoDificuldadeAcessoService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.service.ClienteService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.municipios.swt.manterRotaIntervaloCEPAction"
 */

public class ManterRotaIntervaloCEPAction extends CrudAction {
	
	private TipoDificuldadeAcessoService tipoDificuldadeAcessoService;
	private MunicipioFilialService municipioFilialService;
	private MunicipioService municipioService;
	private OperacaoServicoLocalizaService operacaoServicoLocalizaService;
	private FilialService filialService;	
	private RotaColetaEntregaService rotaColetaEntregaService;
	private ClienteService clienteService;
	private EnderecoPessoaService enderecoPessoaService;
	
	 
	public void setEnderecoPessoaService(EnderecoPessoaService enderecoPessoaService) {
		this.enderecoPessoaService = enderecoPessoaService;
	}

	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}

	public void setRotaColetaEntregaService(RotaColetaEntregaService rotaColetaEntregaService) {
		this.rotaColetaEntregaService = rotaColetaEntregaService;
	}
	
	public void setMunicipioService(MunicipioService municipioService) {
		this.municipioService = municipioService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public void setService(RotaIntervaloCepService rotaIntervaloCepService) {
		this.defaultService = rotaIntervaloCepService; 
	}
	
	public Map store(TypedFlatMap bean) {
		TypedFlatMap mapBean = new TypedFlatMap();
		
		mapBean.put("idRotaIntervaloCep", bean.get("idRotaIntervaloCep"));
		mapBean.put("rotaColetaEntrega.filial.idFilial", bean.get("idFilial"));
		mapBean.put("rotaColetaEntrega.idRotaColetaEntrega", bean.get("idRotaColetaEntrega"));
		mapBean.put("municipio.idMunicipio", bean.get("idMunicipio"));
		mapBean.put("dsBairro", bean.get("dsBairro"));
		mapBean.put("nrOrdemOperacao", bean.get("nrOrdemOperacao"));
		mapBean.put("nrCepInicial", (bean.get("nrCepInicial") != null ? bean.get("nrCepInicial") : ""));
		mapBean.put("nrCepFinal", (bean.get("nrCepFinal") != null ? bean.get("nrCepFinal") : ""));
		mapBean.put("cliente.idCliente", bean.get("idCliente"));
		mapBean.put("enderecoCliente.idEnderecoPessoa", bean.get("idEnderecoPessoa"));
		mapBean.put("tpGrauRisco", new DomainValue((String)bean.get("tpGrauRisco")));		
		mapBean.put("tipoDificuldadeAcesso.idTipoDificuldadeAcesso", bean.get("idTipoDificuldadeAcesso"));
		mapBean.put("hrCorteSolicitacao", bean.get("hrCorteSolicitacao"));
		mapBean.put("hrCorteExecucao", bean.get("hrCorteExecucao"));
		mapBean.put("dtVigenciaInicial", bean.get("dtVigenciaInicial"));
		mapBean.put("dtVigenciaFinal", bean.get("dtVigenciaFinal"));
		mapBean.put("intervaloCep", bean.get("intervaloCep"));
		
		return ((RotaIntervaloCepService) this.defaultService).storeMap(mapBean); 
	}
	
	public Map findById(Long id) {
		TypedFlatMap tfmResult = ((RotaIntervaloCepService) this.defaultService).findByIdDetalhamento(id);
		Map mapResult = new HashMap();
		
		mapResult.put("idRotaIntervaloCep", tfmResult.get("idRotaIntervaloCep"));
		mapResult.put("idFilial", tfmResult.get("rotaColetaEntrega.filial.idFilial"));
		mapResult.put("sgFilial", tfmResult.get("rotaColetaEntrega.filial.sgFilial"));
		mapResult.put("nmFantasia", tfmResult.get("rotaColetaEntrega.filial.pessoa.nmFantasia"));
		mapResult.put("idRotaColetaEntrega", tfmResult.get("rotaColetaEntrega.idRotaColetaEntrega"));
		mapResult.put("nrRota", tfmResult.get("rotaColetaEntrega.nrRota"));
		mapResult.put("dsRota", tfmResult.get("rotaColetaEntrega.dsRota"));		
		mapResult.put("idMunicipio", tfmResult.get("municipio.idMunicipio"));
		mapResult.put("nmMunicipio", tfmResult.get("municipio.nmMunicipio"));		
		mapResult.put("dsBairro", tfmResult.get("dsBairro"));
		mapResult.put("nrOrdemOperacao", tfmResult.get("nrOrdemOperacao"));
		mapResult.put("nrCepInicial", tfmResult.get("nrCepInicial"));		
		mapResult.put("nrCepFinal", tfmResult.get("nrCepFinal"));
		mapResult.put("intervaloCep", tfmResult.get("intervaloCep"));
		mapResult.put("idCliente", tfmResult.get("cliente.idCliente"));
		mapResult.put("nrIdentificacao", tfmResult.get("cliente.pessoa.nrIdentificacao"));
		mapResult.put("nrIdentificacaoFormatado", tfmResult.get("cliente.pessoa.nrIdentificacaoFormatado"));
		mapResult.put("nmPessoa", tfmResult.get("cliente.pessoa.nmPessoa"));
		
		if (tfmResult.get("enderecoCliente.idEnderecoPessoa") != null) {
			List listEnderecoCliente = new ArrayList();
			Map mapEnderecoCliente = new HashMap();
			mapEnderecoCliente.put("idEnderecoPessoa", tfmResult.get("enderecoCliente.idEnderecoPessoa"));
			mapEnderecoCliente.put("dsEndereco", tfmResult.get("enderecoCliente.dsEndereco"));
			listEnderecoCliente.add(mapEnderecoCliente);
			mapResult.put("enderecoCliente", listEnderecoCliente);			
		}
		
		mapResult.put("tpGrauRisco", tfmResult.get("tpGrauRisco"));
		mapResult.put("idTipoDificuldadeAcesso", tfmResult.get("tipoDificuldadeAcesso.idTipoDificuldadeAcesso"));
		mapResult.put("dsTipoDificuldadeAcesso", tfmResult.get("tipoDificuldadeAcesso.dsTipoDificuldadeAcesso"));
		mapResult.put("hrCorteSolicitacao", tfmResult.get("hrCorteSolicitacao"));
		mapResult.put("hrCorteExecucao", tfmResult.get("hrCorteExecucao"));		
		mapResult.put("dtVigenciaInicial", tfmResult.get("dtVigenciaInicial"));
		mapResult.put("dtVigenciaFinal", tfmResult.get("dtVigenciaFinal"));
		mapResult.put("acaoVigenciaAtual", tfmResult.get("acaoVigenciaAtual"));
			
		return mapResult;
	}
	
	public void removeById(Long id) {
		((RotaIntervaloCepService) this.defaultService).removeById(id); 
	}
	
	public List findTipoDificuldadeAcesso(Map criteria){
		return getTipoDificuldadeAcessoService().find(criteria);
	}
	
	public List findOperacaoServicoLocalizacao(TypedFlatMap criteria) {
		criteria.put("municipioFilial.municipio.idMunicipio", criteria.get("idMunicipio"));
		criteria.put("municipioFilial.filial.idFilial", criteria.get("idFilial"));
		criteria.remove("idMunicipio");
		criteria.remove("idFilial");		
		
		List result = getOperacaoServicoLocalizaService().findOperacaoServicoPorMunicipio(criteria);
		for (Iterator iterator = result.iterator(); iterator.hasNext();) {
			Map mapResult = (Map) iterator.next();
			Map mapServico = (Map)mapResult.get("servico");
			if (mapServico != null) {
				mapResult.put("dsServico", mapServico.get("dsServico"));
				mapResult.remove("servico");
			}
		}		
		return result;
	}
	
	public List findMunicipioAtendido(Map criteria){ 
		Long idFilial = Long.valueOf((String)criteria.get("idFilial"));
		return getMunicipioFilialService().findMunicipioFilialVigenteByFilial(idFilial);
	}
	
	public ResultSetPage findPaginatedCustom(TypedFlatMap criteria) {
		ResultSetPage rsp = ((RotaIntervaloCepService) this.defaultService).findPaginatedCustom(createCriteria(criteria));		
		FilterResultSetPage frsp = new FilterResultSetPage(rsp) {
			public Map filterItem(Object item) {
				RotaIntervaloCep rotaIntervaloCep = (RotaIntervaloCep) item;
				TypedFlatMap row = new TypedFlatMap();

				row.put("idRotaIntervaloCep", rotaIntervaloCep.getIdRotaIntervaloCep()); 
				row.put("nrOrdemOperacao", rotaIntervaloCep.getNrOrdemOperacao()); 
				row.put("nmMunicipio", rotaIntervaloCep.getMunicipio().getNmMunicipio());
				row.put("nrCepFinal", rotaIntervaloCep.getNrCepFinal());
				row.put("nrCepInicial", rotaIntervaloCep.getNrCepInicial());
				row.put("tpGrauRisco", rotaIntervaloCep.getTpGrauRisco());
				
				if (rotaIntervaloCep.getRotaColetaEntrega() != null) {
					row.put("nrRota",rotaIntervaloCep.getRotaColetaEntrega().getNrRota());
					row.put("dsRota",rotaIntervaloCep.getRotaColetaEntrega().getDsRota());
				}
				
				if (rotaIntervaloCep.getTipoDificuldadeAcesso() != null) {
					row.put("dsTipoDificuldadeAcesso", 
							rotaIntervaloCep.getTipoDificuldadeAcesso().getDsTipoDificuldadeAcesso());
				}
				
				row.put("hrCorteExecucao", rotaIntervaloCep.getHrCorteExecucao());
				row.put("hrCorteSolicitacao", rotaIntervaloCep.getHrCorteSolicitacao());
				
				if (rotaIntervaloCep.getEnderecoPessoa() != null) {
					row.put("enderecoCliente", enderecoPessoaService.getEnderecoCompleto(rotaIntervaloCep.getEnderecoPessoa().getIdEnderecoPessoa()));
				}

				if (rotaIntervaloCep.getCliente() != null) { 
					row.put("tpIdentificacaoCliente", rotaIntervaloCep.getCliente().getPessoa().getTpIdentificacao());
					row.put("nrIdentificacaoCliente", FormatUtils.formatIdentificacao(rotaIntervaloCep.getCliente().getPessoa()));
					row.put("cliente", rotaIntervaloCep.getCliente().getPessoa().getNmPessoa());
				}
				
				return row;
			}
			
		};
		
		return (ResultSetPage)frsp.doFilter();
	}
	
	public Integer getRowCountCustom(TypedFlatMap criteria) {
		return ((RotaIntervaloCepService) this.defaultService).getRowCountCustom(createCriteria(criteria));
	}
	
	/**
	 * Cria os criterios para pesquisa.
	 * @param criteria
	 */
	private TypedFlatMap createCriteria(TypedFlatMap criteria) {
		TypedFlatMap tfmCriteria = new TypedFlatMap();		
		tfmCriteria.put("idRotaIntervaloCep", criteria.get("idRotaIntervaloCep"));
		tfmCriteria.put("rotaColetaEntrega.idRotaColetaEntrega", criteria.get("idRotaColetaEntrega"));
		tfmCriteria.put("rotaColetaEntrega.filial.idFilial", criteria.get("idFilial"));
		tfmCriteria.put("municipio.idMunicipio", criteria.get("idMunicipio"));
		tfmCriteria.put("nrCep", criteria.get("nrCep"));
		tfmCriteria.put("cliente.idCliente", criteria.get("idCliente"));
		tfmCriteria.put("enderecoCliente", criteria.get("idEnderecoPessoa"));
		tfmCriteria.put("tpGrauRisco", criteria.get("tpGrauRisco"));
		tfmCriteria.put("tipoDificuldadeAcesso.idTipoDificuldadeAcesso", criteria.get("idTipoDificuldadeAcesso"));
		tfmCriteria.put("_currentPage", criteria.get("_currentPage"));
		tfmCriteria.put("_pageSize", criteria.get("_pageSize"));
		tfmCriteria.put("_order", criteria.get("_order"));		
		return tfmCriteria;
	}

	
	/**
	 * Apaga várias entidades através do Id.
	 *
	 * @param ids lista com as entidades que deverão ser removida.
	 *
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		((RotaIntervaloCepService) this.defaultService).removeByIds(ids); 
	}

	/**
	 * @return Returns the tipoDificuldadeAcessoService.
	 */
	public TipoDificuldadeAcessoService getTipoDificuldadeAcessoService() {
		return tipoDificuldadeAcessoService;
	}

	/**
	 * @param tipoDificuldadeAcessoService The tipoDificuldadeAcessoService to set.
	 */
	public void setTipoDificuldadeAcessoService(TipoDificuldadeAcessoService tipoDificuldadeAcessoService) {
		this.tipoDificuldadeAcessoService = tipoDificuldadeAcessoService;
	}

	/**
	 * @return Returns the operacaoServicoLocalizaService.
	 */
	public OperacaoServicoLocalizaService getOperacaoServicoLocalizaService() {
		return operacaoServicoLocalizaService;
	}

	/**
	 * @param operacaoServicoLocalizaService The operacaoServicoLocalizaService to set.
	 */
	public void setOperacaoServicoLocalizaService(OperacaoServicoLocalizaService operacaoServicoLocalizaService) {
		this.operacaoServicoLocalizaService = operacaoServicoLocalizaService;
	}

	public MunicipioFilialService getMunicipioFilialService() {
		return municipioFilialService;
	}

	public void setMunicipioFilialService(MunicipioFilialService municipioFilialService) {
		this.municipioFilialService = municipioFilialService;
	}

	public List findLookupFilial(Map criteria) {		
		List list = filialService.findLookup(criteria);	
		
		List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		Filial f = (Filial)iter.next();
    		Filial filial = filialService.findById(f.getIdFilial());

    		Map mapResult = new HashMap();
    		mapResult.put("idFilial", filial.getIdFilial());
    		mapResult.put("sgFilial", filial.getSgFilial());
    		mapResult.put("nmFantasia", filial.getPessoa().getNmFantasia());
    		mapResult.put("idEmpresa", filial.getEmpresa().getIdEmpresa());
    		mapResult.put("nrIdentificacaoEmpresa", FormatUtils.formatIdentificacao(filial.getEmpresa().getPessoa()) );
    		mapResult.put("nmPessoaEmpresa", filial.getEmpresa().getPessoa().getNmPessoa());
    		retorno.add(mapResult);
    	}    	
    	return retorno;
		
	}
	
	public List findLookupMunicipio(Map criteria) {		
		return municipioService.findLookup(criteria);	
	}

    public List findLookupRotaColetaEntrega(Map criteria) {
    	Map filial = new HashMap();
    	filial.put("idFilial", criteria.get("idFilial"));    	
    	criteria.put("filial", filial);
    	criteria.remove("idFilial");
    	
    	List list = rotaColetaEntregaService.findLookup(criteria);    	
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		RotaColetaEntrega rotaColetaEntrega = (RotaColetaEntrega)iter.next();
    		Map mapResult = new HashMap();
    		mapResult.put("idRotaColetaEntrega", rotaColetaEntrega.getIdRotaColetaEntrega());
    		mapResult.put("nrRota", rotaColetaEntrega.getNrRota());
    		mapResult.put("dsRota", rotaColetaEntrega.getDsRota());
    		mapResult.put("idFilial", rotaColetaEntrega.getFilial().getIdFilial());
    		mapResult.put("sgFilial", rotaColetaEntrega.getFilial().getSgFilial());
    		mapResult.put("nmFantasia", rotaColetaEntrega.getFilial().getPessoa().getNmFantasia());
    		retorno.add(mapResult);
    	}    	
    	return retorno;
    }

	public List findLookupCliente(Map criteria) {
    	Map pessoa = new HashMap();
    	pessoa.put("nrIdentificacao", criteria.get("nrIdentificacao"));
    	criteria.clear();
    	criteria.put("pessoa", pessoa);
    	criteria.remove("nrIdentificacao");
    	
    	List clientes = clienteService.findLookup(criteria);	
		List retorno = new ArrayList();
		for (Iterator iter = clientes.iterator(); iter.hasNext();) {
			Map map = new HashMap();
			Cliente cliente = (Cliente) iter.next();
			map.put("idCliente", cliente.getIdCliente());
			map.put("tpSituacao", cliente.getTpSituacao());
			map.put("nmPessoa", cliente.getPessoa().getNmPessoa());
			map.put("nrIdentificacao", cliente.getPessoa().getNrIdentificacao());
			map.put("nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(cliente.getPessoa()));
			map.put("tpIdentificacao", cliente.getPessoa().getTpIdentificacao());
			map.put("tpCliente", cliente.getTpCliente());
			retorno.add(map);
		}
		return retorno;
	}
    
    public List findEnderecoByIdCliente(Map criteria) {
    	Map pessoa = new HashMap();
    	pessoa.put("idPessoa", criteria.get("idCliente"));
    	criteria.clear();
    	criteria.put("pessoa", pessoa);    	
    	return enderecoPessoaService.find(criteria);
    }    
	
}
