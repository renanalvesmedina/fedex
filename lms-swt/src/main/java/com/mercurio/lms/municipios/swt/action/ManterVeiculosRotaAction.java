package com.mercurio.lms.municipios.swt.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.contratacaoveiculos.model.MeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.MeioTransporteRodoviario;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTranspProprietarioService;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteRodoviarioService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.RotaMeioTransporteRodov;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.RotaColetaEntregaService;
import com.mercurio.lms.municipios.model.service.RotaMeioTransporteRodovService;
import com.mercurio.lms.util.FormatUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.municipios.swt.manterVeiculosRotaAction"
 */

public class ManterVeiculosRotaAction extends CrudAction {
	private MeioTransporteRodoviarioService meioTransporteRodoviarioService;
	private MeioTranspProprietarioService meioTranspProprietarioService;
	private RotaColetaEntregaService rotaColetaEntregaService;
	private FilialService filialService;
	
	public void setRotaMeioTransporteRodovService(RotaMeioTransporteRodovService rotaMeioTransporteRodovService) {
		this.defaultService = rotaMeioTransporteRodovService;
	}
	
    public void removeById(java.lang.Long id) {
        ((RotaMeioTransporteRodovService)defaultService).removeById(id);
    }

	public List findLookupFilial(Map criteria) {
		List list = filialService.findLookup(criteria);
		List retorno = new ArrayList();
		for (Iterator iter = list.iterator(); iter.hasNext();) {
			Filial filial = (Filial)iter.next();
			Map map = new HashMap();

			map.put("idFilial", filial.getIdFilial());
			map.put("sgFilial", filial.getSgFilial());
			map.put("nmFantasia", filial.getPessoa().getNmFantasia());
			retorno.add(map);
		}
		return retorno;
	}

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	((RotaMeioTransporteRodovService)defaultService).removeByIds(ids);
    }

    public RotaMeioTransporteRodov findById(java.lang.Long id) {
    	return ((RotaMeioTransporteRodovService)defaultService).findById(id);
    }
    
    /**
	 * Insere, caso o id seja <code>null</code> ou atualiza uma entidade, caso contrário.
	 *
	 * @param bean entidade a ser armazenada.
	 * @return entidade que foi armazenada.
	 */
    public Serializable store(RotaMeioTransporteRodov bean) {
        return ((RotaMeioTransporteRodovService)defaultService).store(bean);
    }
    
	public MeioTransporteRodoviarioService getMeioTransporteRodoviarioService() {
		return meioTransporteRodoviarioService;
	}
	
	public void setMeioTransporteRodoviarioService(MeioTransporteRodoviarioService meioTransporteRodoviarioService) {
		this.meioTransporteRodoviarioService = meioTransporteRodoviarioService;
	}
	
	public List findLookupMeioTransporteRodov(Map criteria) {
		Map mapMeioTransporte = new HashMap();
		String nrFrota = null;
		if (criteria.get("nrFrota") != null && !criteria.get("nrFrota").equals("")) {
			nrFrota = FormatUtils.fillNumberWithZero((String)criteria.get("nrFrota"), 6);			
		}
		mapMeioTransporte.put("nrFrota", nrFrota);
		criteria.remove("nrFrota");
		
		String nrIdentificador = null;
		if (criteria.get("nrIdentificador") != null && !criteria.get("nrIdentificador").equals("")) {
			nrIdentificador = (String)criteria.get("nrIdentificador");			
		}
		criteria.remove("nrIdentificador");		
		mapMeioTransporte.put("nrIdentificador", nrIdentificador);
		
		mapMeioTransporte.put("tpSituacao", criteria.get("tpSituacao"));
		criteria.remove("tpSituacao");
		
		Map mapModeloMeioTransporte = new HashMap();
		Map mapTipoMeioTransporte = new HashMap();
		mapTipoMeioTransporte.put("idTipoMeioTransporte", criteria.get("idTipoMeioTransporte"));
		mapModeloMeioTransporte.put("tipoMeioTransporte", mapTipoMeioTransporte);
		mapMeioTransporte.put("modeloMeioTransporte", mapModeloMeioTransporte);
		criteria.remove("idTipoMeioTransporte");
		
		criteria.put("meioTransporte", mapMeioTransporte);
				
		List result = meioTransporteRodoviarioService.findLookup(criteria);
		List listResult = new ArrayList();
		for (Iterator iterator = result.iterator(); iterator.hasNext();) {
			MeioTransporteRodoviario meioTransporteRodoviario = (MeioTransporteRodoviario) iterator.next();
			MeioTransporte meioTransporte = meioTransporteRodoviario.getMeioTransporte();
			
			Map mapResult = new HashMap();			
			mapResult.put("idMeioTransporte", meioTransporte.getIdMeioTransporte());
			mapResult.put("nrFrota", meioTransporte.getNrFrota());
			mapResult.put("nrIdentificador", meioTransporte.getNrIdentificador());
			mapResult.putAll(findProprietarioByMeioTransporte(meioTransporte.getIdMeioTransporte()));
			
			listResult.add(mapResult);
		}
		
        return listResult;
    }

	public MeioTranspProprietarioService getMeioTranspProprietarioService() {
		return meioTranspProprietarioService;
	}
	
	public void setMeioTranspProprietarioService(MeioTranspProprietarioService meioTranspProprietarioService) {
		this.meioTranspProprietarioService = meioTranspProprietarioService;
	}
		
	public ResultSetPage findPaginated(TypedFlatMap criteria) {
		return ((RotaMeioTransporteRodovService)defaultService).findPaginatedPrincipal(createCriteria(criteria));
	}
	
	public Integer getRowCount(TypedFlatMap criteria) {
		return ((RotaMeioTransporteRodovService)defaultService).getRowCountPrincipal(createCriteria(criteria));
	}
	
	/**
	 * Cria os criterios para pesquisa.
	 * @param criteria
	 */
	private TypedFlatMap createCriteria(TypedFlatMap criteria) {
		TypedFlatMap tfmCriteria = new TypedFlatMap();		
		tfmCriteria.put("meioTransporteRodoviario.idMeioTransporte", criteria.get("idMeioTransporte"));
		tfmCriteria.put("rotaTipoMeioTransporte.idRotaTipoMeioTransporte", criteria.get("idRotaTipoMeioTransporte"));
		tfmCriteria.put("modeloMeioTransporte.tipoMeioTransporte.idTipoMeioTransporte", criteria.get("idTipoMeioTransporte"));
		tfmCriteria.put("dtVigenciaInicial", criteria.get("dtVigenciaInicial"));
		tfmCriteria.put("dtVigenciaFinal", criteria.get("dtVigenciaFinal"));
		tfmCriteria.put("_currentPage", criteria.get("_currentPage"));
		tfmCriteria.put("_pageSize", criteria.get("_pageSize"));
		tfmCriteria.put("_order", criteria.get("_order"));
		return tfmCriteria;
	}

	public List findLookupRotaColetaEntrega(Map criteria){
		 return getRotaColetaEntregaService().findLookup(criteria);
	}
      	
	public Map findProprietarioByMeioTransporte(Long idMeioTransporte) {		
		Map retorno = new HashMap();
		Map aux = getMeioTranspProprietarioService().findInfoMeioTransporte(idMeioTransporte);
		if (aux != null){
			retorno.put("idProprietario",aux.get("idProprietario"));
			retorno.put("nmPessoa", aux.get("nmPessoa"));
		}
		return retorno;
    }
    
	public Map storeMap(Map criteria) {
		Map customCriteria = new HashMap();
		customCriteria.put("idRotaMeioTransporteRodov", criteria.get("idRotaMeioTransporteRodov"));

		Map	meioTransporteRodoviario = new HashMap();
		Map	meioTransporte = new HashMap();
		meioTransporteRodoviario.put("idMeioTransporte", criteria.get("idMeioTransporte"));
		meioTransporte.put("idMeioTransporte", criteria.get("idMeioTransporte"));
		meioTransporte.put("nrFrete", criteria.get("nrFrete"));
		meioTransporte.put("nrIdentificador", criteria.get("nrIdentificador"));
		meioTransporteRodoviario.put("meioTransporte", meioTransporte);
		customCriteria.put("meioTransporteRodoviario", meioTransporteRodoviario);
		
		Map	modeloMeioTransporte = new HashMap();
		Map	tipoMeioTransporte = new HashMap();
		tipoMeioTransporte.put("idTipoMeioTransporte", criteria.get("idTipoMeioTransporte"));
		tipoMeioTransporte.put("dsTipoMeioTransporte", criteria.get("dsTipoMeioTransporte"));
		modeloMeioTransporte.put("tipoMeioTransporte", tipoMeioTransporte);
		customCriteria.put("modeloMeioTransporte", modeloMeioTransporte);
		
		customCriteria.put("dtVigenciaInicial", criteria.get("dtVigenciaInicial"));
		customCriteria.put("dtVigenciaFinal", criteria.get("dtVigenciaFinal"));
		
		Map	proprietario = new HashMap();
		proprietario.put("nmPessoa", criteria.get("nmPessoa"));		
		customCriteria.put("proprietario", proprietario);
		
		Map	rotaTipoMeioTransporte = new HashMap();
		rotaTipoMeioTransporte.put("idRotaTipoMeioTransporte", criteria.get("idRotaTipoMeioTransporte"));
		rotaTipoMeioTransporte.put("tipoMeioTransporte", tipoMeioTransporte);
		customCriteria.put("rotaTipoMeioTransporte", rotaTipoMeioTransporte);
		
		Map bean = ((RotaMeioTransporteRodovService)defaultService).storeMap(customCriteria);

		Map mapResult = new HashMap();
		mapResult.put("idRotaMeioTransporteRodov", bean.get("idRotaMeioTransporteRodov"));
		mapResult.put("acaoVigenciaAtual", bean.get("acaoVigenciaAtual"));
		return mapResult;
	}
	    
	public Map findByIdDetalhamento(java.lang.Long id) {
		TypedFlatMap tfmResult = ((RotaMeioTransporteRodovService)defaultService).findByIdDetalhamento(id);
		Map mapResult = new HashMap();
        
        mapResult.put("idRotaTipoMeioTransporte", tfmResult.get("rotaTipoMeioTransporte.idRotaTipoMeioTransporte"));
		mapResult.put("idRotaMeioTransporteRodov", tfmResult.get("idRotaMeioTransporteRodov"));
		mapResult.put("idFilial", tfmResult.get("rotaTipoMeioTransporte.rotaColetaEntrega.filial.idFilial"));
		mapResult.put("sgFilial", tfmResult.get("rotaTipoMeioTransporte.rotaColetaEntrega.filial.sgFilial"));
		mapResult.put("nmFantasia", tfmResult.get("rotaTipoMeioTransporte.rotaColetaEntrega.filial.pessoa.nmFantasia"));
		mapResult.put("nrRota", tfmResult.get("rotaTipoMeioTransporte.rotaColetaEntrega.nrRota"));
		mapResult.put("dsRota", tfmResult.get("rotaTipoMeioTransporte.rotaColetaEntrega.dsRota"));		
		mapResult.put("idTipoMeioTransporte", tfmResult.get("rotaTipoMeioTransporte.tipoMeioTransporte.idTipoMeioTransporte"));
		mapResult.put("dsTipoMeioTransporte", tfmResult.get("rotaTipoMeioTransporte.tipoMeioTransporte.dsTipoMeioTransporte"));		
		mapResult.put("tpMeioTransporte", tfmResult.get("rotaTipoMeioTransporte.tipoMeioTransporte.tpMeioTransporte"));
		mapResult.put("idMeioTransporte", tfmResult.get("meioTransporteRodoviario.idMeioTransporte"));
		mapResult.put("nrFrota", tfmResult.get("meioTransporteRodoviario2.meioTransporte.nrFrota"));
		mapResult.put("nrIdentificador", tfmResult.get("meioTransporteRodoviario.meioTransporte.nrIdentificador"));		
		mapResult.put("nmPessoa", tfmResult.get("proprietario.nmPessoa"));
		mapResult.put("dtVigenciaInicial", tfmResult.get("dtVigenciaInicial"));
		mapResult.put("dtVigenciaFinal", tfmResult.get("dtVigenciaFinal"));
		mapResult.put("acaoVigenciaAtual", tfmResult.get("acaoVigenciaAtual"));
			
		return mapResult;		
	}
	
	public RotaColetaEntregaService getRotaColetaEntregaService() {
		return rotaColetaEntregaService;
	}
	
	public void setRotaColetaEntregaService(RotaColetaEntregaService rotaColetaEntregaService) {
		this.rotaColetaEntregaService = rotaColetaEntregaService;
	}
	
	public FilialService getFilialService() {
		return filialService;
	}
	
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	
	public TypedFlatMap findDadosVeiculo(Long idMeioTransporte) {
    	TypedFlatMap tfm = new TypedFlatMap();

    	Map mapResultado = meioTranspProprietarioService.findProprietarioByMeioTransporte(idMeioTransporte);
    	if (mapResultado != null) {
	    	Map mapProprietario = (Map)mapResultado.get("proprietario");
	    	if (mapProprietario != null) {
	    		tfm.put("idProprietario", mapProprietario.get("idProprietario"));
	    		Map mapPessoa = (Map)mapProprietario.get("pessoa");
	    		if (mapPessoa != null) {
		    		tfm.put("nmPessoa", mapPessoa.get("nmPessoa"));
		    	}
		    }
    	}
    	return tfm;
	}
}
