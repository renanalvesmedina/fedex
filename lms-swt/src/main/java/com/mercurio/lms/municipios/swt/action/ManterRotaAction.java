package com.mercurio.lms.municipios.swt.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.MapUtils;
import org.apache.commons.lang.StringUtils;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.Rota;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.RotaService;

/**
 * Generated by: ADSM ActionGenerator
 *
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.municipios.swt.manterRotaAction"
 */

public class ManterRotaAction extends CrudAction {
	private FilialService filialService ;

	//monta o map para pesquisar as rotas
	private TypedFlatMap mountFindPaginated(Map criteria) {
		TypedFlatMap tfmCriteria = new TypedFlatMap();
		String sgFilialOrigem = ((String)criteria.get("sgFilialOrigem")).toUpperCase();
		if (StringUtils.isNotBlank(sgFilialOrigem)) {
			sgFilialOrigem += "%";
		}
		String sgFilialDestino = ((String)criteria.get("sgFilialDestino")).toUpperCase();
		if(StringUtils.isNotBlank(sgFilialDestino)) {
			sgFilialDestino = "%" + sgFilialDestino;
		}

		List<Map> filiaisRota = (List)criteria.get("filialRotas");
		if( (filiaisRota != null) && (!filiaisRota.isEmpty()) ) {
			StringBuilder dsRotaConcatenada = new StringBuilder();
			for(Map filial : filiaisRota) {
				String sgFilial = MapUtils.getString(filial, "sgFilial").toUpperCase();
				dsRotaConcatenada.append(sgFilial).append("-");
			}
			dsRotaConcatenada.deleteCharAt(dsRotaConcatenada.length() - 1);
			tfmCriteria.put("dsRotaConcatenada", dsRotaConcatenada.toString());
		}
		tfmCriteria.put("dsRota", criteria.get("dsRota"));
		tfmCriteria.put("filialOrigem", sgFilialOrigem);
		tfmCriteria.put("filialDestino", sgFilialDestino);

		tfmCriteria.put("_currentPage", criteria.get("_currentPage"));
		tfmCriteria.put("_order", criteria.get("_order"));
		tfmCriteria.put("_pageSize", criteria.get("_pageSize"));
				
		return tfmCriteria;
	}

	public ResultSetPage findPaginated(Map criteria) {	
		return getRotaService().findPaginatedRotaViagemEventual(mountFindPaginated(criteria));
	}

	public Integer getRowCount(Map criteria) {
		return getRotaService().getRowCountRotaViagemEventual(mountFindPaginated(criteria));
	}

	/**
	 * Remove uma Rota pelo id passado por parâmetro
	 * @param id Identificador da Rota
	 */
	public void removeById(java.lang.Long id) {
		getRotaService().removeById(id);
	}

	/**
	 * Método que remove todos as Rota informados através das Rotas
	 * seus ids.
	 * @param ids Lista de ids das Rota
	 * 
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		getRotaService().removeByIds(ids);
	}

	/**
	 * Busca um Rota pelo id
	 * @param id Identificador da Rota a ser detalhado
	 * @return Rota encontrado na busca
	 */
	public Rota findById(java.lang.Long id) {
		return getRotaService().findByIdPersonalizado(id);
	}

	public List findLookupFilial(Map criteria){
    	List list = filialService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		Filial filial = (Filial)iter.next();
    		Map map = new HashMap();

       		map.put("idFilial", filial.getIdFilial());    		
    		map.put("sgFilial", filial.getSgFilial());
    		map.put("nmFantasia", filial.getPessoa().getNmFantasia());
    		retorno.add(map);
    	}
    	return retorno;
	}

	
	/**
	 * Seta o service para o manter Rota
	 * @param rota Service do manter Rota
	 */
	public void setRotaService(RotaService rotaService) {
		this.defaultService = rotaService;
	}
	private RotaService getRotaService() {
		return (RotaService)this.defaultService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

}