package com.mercurio.lms.municipios.swt.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.FilterResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.RegiaoColetaEntregaFilService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.municipios.swt.manterRegioesColetaEntregaFiliaisAction"
 */

public class ManterRegioesColetaEntregaFiliaisAction extends CrudAction {	
	private FilialService filialService;

	public void setService(RegiaoColetaEntregaFilService regiaoColetaEntregaFilService) {
		this.defaultService = regiaoColetaEntregaFilService; 
	}
	
	public List findFilialLookup(Map criteria){		
		List list = filialService.findLookup(criteria);
		List retorno = new ArrayList();
		for (Iterator iter = list.iterator(); iter.hasNext();) {
			Filial filial = (Filial)iter.next();
			Map map = new HashMap();

			map.put("idFilial", filial.getIdFilial());
			map.put("sgFilial", filial.getSgFilial());
			map.put("nmFantasia", filial.getPessoa().getNmFantasia());
			retorno.add(map);
		}
		return retorno;
	}
	
	public Map findByIdEValidaVigencias(Long id) {
		TypedFlatMap tfmResult = ((RegiaoColetaEntregaFilService) this.defaultService).findByIdEValidaVigencias(id);
		Map mapResult = new HashMap();
		
		mapResult.put("idRegiaoColetaEntregaFil", tfmResult.get("idRegiaoColetaEntregaFil"));
		mapResult.put("idFilial", tfmResult.get("filial.idFilial"));
		mapResult.put("sgFilial", tfmResult.get("filial.sgFilial"));
		mapResult.put("nmFantasia", tfmResult.get("filial.pessoa.nmFantasia"));
		mapResult.put("dsRegiaoColetaEntregaFil", tfmResult.get("dsRegiaoColetaEntregaFil"));
		mapResult.put("dtVigenciaInicial", tfmResult.get("dtVigenciaInicial"));
		mapResult.put("dtVigenciaFinal", tfmResult.get("dtVigenciaFinal"));
		mapResult.put("acaoVigenciaAtual", tfmResult.get("acaoVigenciaAtual"));
		
		return mapResult;
	}
	
	public Map storeMap(Map criteria) {
		Map filial = new HashMap();
		Map pessoaFilial = new HashMap();
		filial.put("idFilial", criteria.get("idFilial"));
		filial.put("sgFilial", criteria.get("sgFilial"));		
		pessoaFilial.put("nmFantasia", criteria.get("nmFantasia"));
		filial.put("pessoa", pessoaFilial);		
		criteria.put("filial", filial);

		Map bean = ((RegiaoColetaEntregaFilService) this.defaultService).storeMap(criteria);
		filial = (Map)bean.get("filial");
		pessoaFilial = (Map)filial.get("pessoa");
		bean.put("idFilial", filial.get("idFilial"));
		bean.put("sgFilial", filial.get("sgFilial"));
		bean.put("nmFantasia", pessoaFilial.get("nmFantasia"));
		
		return bean;
	}
		
	public Integer getRowCount(TypedFlatMap criteria) {
		return ((RegiaoColetaEntregaFilService) this.defaultService).getRowCount(criteria);
	}
	
	public ResultSetPage findPaginated(TypedFlatMap criteria) {
		Map filial = new HashMap();
		filial.put("idFilial", criteria.get("idFilial"));
		
		criteria.put("filial", filial);
		criteria.remove("idFilial");
		
		ResultSetPage resultSetPage = ((RegiaoColetaEntregaFilService) this.defaultService).findPaginated(criteria);		
		FilterResultSetPage frsp = new FilterResultSetPage(resultSetPage) {
			public Map filterItem(Object item) {
				Map map = (Map) item;
				Map mapRegiaoColetaEntregaFil = new HashMap();

				mapRegiaoColetaEntregaFil.put("idRegiaoColetaEntregaFil", map.get("idRegiaoColetaEntregaFil"));
				mapRegiaoColetaEntregaFil.put("dsRegiaoColetaEntregaFil", map.get("dsRegiaoColetaEntregaFil"));
				mapRegiaoColetaEntregaFil.put("dtVigenciaInicial", map.get("dtVigenciaInicial"));
				mapRegiaoColetaEntregaFil.put("dtVigenciaFinal", map.get("dtVigenciaFinal"));

				Map mapFilial = (HashMap)map.get("filial");
				if (mapFilial != null) {
					Map mapPessoaFilial = (HashMap)mapFilial.get("pessoa");
					mapRegiaoColetaEntregaFil.put("idFilial", mapFilial.get("idFilial"));
					mapRegiaoColetaEntregaFil.put("sgFilial", mapFilial.get("sgFilial"));
					mapRegiaoColetaEntregaFil.put("nmFantasia", mapPessoaFilial.get("nmFantasia"));
				}
				return mapRegiaoColetaEntregaFil;
			}
		};
		return (ResultSetPage)frsp.doFilter();	
	}
	
	public void removeById(Long id) { 
		((RegiaoColetaEntregaFilService) this.defaultService).removeById(id); 
	}
	
	/**
	 * Apaga várias entidades através do Id.
	 * @param ids lista com as entidades que deverão ser removida.
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		((RegiaoColetaEntregaFilService) this.defaultService).removeByIds(ids); 
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	
}
