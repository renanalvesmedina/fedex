package com.mercurio.lms.municipios.swt.action;

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.municipios.model.Municipio;
import com.mercurio.lms.municipios.model.Pais;
import com.mercurio.lms.municipios.model.UnidadeFederativa;
import com.mercurio.lms.municipios.model.service.MunicipioService;
import com.mercurio.lms.municipios.model.service.PaisService;
import com.mercurio.lms.municipios.model.service.UnidadeFederativaService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.municipios.swt.manterMunicipiosAction"
 */

public class ManterMunicipiosAction extends CrudAction {
	
	private UnidadeFederativaService unidadeFederativaService;
	private PaisService paisService;
	private MunicipioService municipioService;
	
	public void setMunicipioService(MunicipioService municipioService) {
		this.municipioService = municipioService;
	}
	public void setPaisService(PaisService paisService) {
		this.paisService = paisService;
	}
	public void setUnidadeFederativaService(UnidadeFederativaService unidadeFederativaService) {
		this.unidadeFederativaService = unidadeFederativaService;
	}
	public void setMunicipio(MunicipioService municipioService) {
		this.defaultService = municipioService;
	}


	public List findLookupUF(Map criteria){
		List lista = unidadeFederativaService.findLookup(criteria);
		
		if(!lista.isEmpty() && lista.size()==1){
			UnidadeFederativa uf = (UnidadeFederativa)lista.get(0);
			Map mapa = new HashMap();
			mapa.put("nmUnidadeFederativa", uf.getNmUnidadeFederativa());
			mapa.put("idUnidadeFederativa", uf.getIdUnidadeFederativa());
			mapa.put("sgUnidadeFederativa", uf.getSgUnidadeFederativa());
			mapa.put("nmPais", uf.getPais().getNmPais().toString());
			mapa.put("idPais", uf.getPais().getIdPais());
			lista.add(mapa);
			lista.remove(uf);
		}
		return lista;
	}


	public List findLookupPais(Map criteria){
		List lista = paisService.findLookup(criteria);
		if(!lista.isEmpty() && lista.size()==1){
			Pais pais = (Pais)lista.get(0);
			Map mapa = new HashMap();
			mapa.put("nmPais", pais.getNmPais().toString());
			mapa.put("idPais", pais.getIdPais());
			lista.add(mapa);
			lista.remove(pais);
		}
		return lista;
	}


	public List findLookupMunicipioDistrito(Map criteria){
		criteria.put("nmMunicipio", criteria.get("nmMunicipioDistrito"));
		List lista = municipioService.findLookup(criteria);
		if(!lista.isEmpty() && lista.size()==1){
			Municipio municipio = (Municipio)lista.get(0);
			Map mapa = new HashMap();
			mapa.put("nmMunicipioDistrito", municipio.getNmMunicipio());
			mapa.put("idMunicipioDistrito", municipio.getIdMunicipio());			
			lista.add(mapa);
			lista.remove(municipio);
		}
		return lista;
	}


    private TypedFlatMap montaTypedFlatMapListagem(TypedFlatMap criteria){
    	if(criteria.get("idPais")!= null){
    		criteria.put("unidadeFederativa.pais.idPais", criteria.get("idPais"));
    	}
    	if(criteria.get("idUnidadeFederativa")!= null){
    		criteria.put("unidadeFederativa.idUnidadeFederativa", criteria.get("idUnidadeFederativa"));
    	}
    	if(criteria.get("idMunicipioDistrito")!= null){
    		criteria.put("municipioDistrito.idMunicipio", criteria.get("idMunicipioDistrito"));
    	}
    	if(criteria.get("nmMunicipio") == null){
    		criteria.put("nmMunicipio","");
    	}
    	return criteria;
    }


    public ResultSetPage findPaginated(TypedFlatMap criteria){
		TypedFlatMap novoTypedFlatMap = montaTypedFlatMapListagem(criteria);
		ResultSetPage rs = municipioService.findPaginated(novoTypedFlatMap);
		for(Iterator iter = rs.getList().iterator();iter.hasNext();){
			Map mapa = (Map)iter.next();

			if(mapa.get("unidadeFederativa")!= null){
				mapa.put("idUnidadeFederativa",((Map)mapa.get("unidadeFederativa")).get("idUnidadeFederativa"));
				mapa.put("sgUnidadeFederativa",((Map)mapa.get("unidadeFederativa")).get("sgUnidadeFederativa"));
				mapa.put("nmUnidadeFederativa",((Map)mapa.get("unidadeFederativa")).get("nmUnidadeFederativa"));
				
				if(((Map)mapa.get("unidadeFederativa")).get("pais") != null) {
					mapa.put("idPais", ((Map)((Map)mapa.get("unidadeFederativa")).get("pais")).get("idPais"));
					mapa.put("nmPais", ((Map)((Map)mapa.get("unidadeFederativa")).get("pais")).get("nmPais"));
				}
			}
			if(mapa.get("blDistrito")!= null){
				Boolean blDistrito =(Boolean)mapa.get("blDistrito");
				if(blDistrito.compareTo(Boolean.FALSE)!= 0){
					mapa.put("blDistrito","/image/checked.gif");
				}
			}
			Map municipioDistrito = (Map) mapa.remove("municipioDistrito");
			if (municipioDistrito != null) {
				mapa.put("idMunicipioDistrito", municipioDistrito.get("idMunicipio"));
				mapa.put("nmMunicipioDistrito", municipioDistrito.get("nmMunicipio"));
			}
		}
		return rs;
	}


    public Integer getRowCount(TypedFlatMap criteria){
		TypedFlatMap novoTypedFlatMap = montaTypedFlatMapListagem(criteria);
		return municipioService.getRowCount(novoTypedFlatMap);
	}
}