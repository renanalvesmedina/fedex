package com.mercurio.lms.municipios.swt.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.FilterResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.HorarioPrevistoSaidaRota;
import com.mercurio.lms.municipios.model.RotaColetaEntrega;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.RotaColetaEntregaService;
import com.mercurio.lms.util.JTVigenciaUtils;

/**
 * Generated by: ADSM ActionGenerator
 *
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.municipios.swt.manterRotaColetaEntregaAction"
 */
public class ManterRotaColetaEntregaAction extends CrudAction {
	
	FilialService filialService;
	
	public List findFilialLookup(Map criteria){		
		List list = this.getFilialService().findLookup(criteria);
		List retorno = new ArrayList();
		for (Iterator iter = list.iterator(); iter.hasNext();) {
			Filial filial = (Filial)iter.next();
			Map map = new HashMap();

			map.put("idFilial", filial.getIdFilial());
			map.put("sgFilial", filial.getSgFilial());
			map.put("nmFantasia", filial.getPessoa().getNmFantasia());
			retorno.add(map);
		}
		return retorno;
	}

	public void setService(RotaColetaEntregaService rotaColetaEntregaService) {
		this.defaultService = rotaColetaEntregaService; 
	}
	
	public Serializable store(RotaColetaEntrega bean) {
		return ((RotaColetaEntregaService) this.defaultService).store(bean); 
	} 
	
	public Map storeMap(TypedFlatMap map) {
		map.put("filial.idFilial", map.get("idFilial"));
		map.remove("idFilial");
		return ((RotaColetaEntregaService) this.defaultService).storeMap(map); 
	}
	
	public RotaColetaEntrega findById(Long id) { 
		return ((RotaColetaEntregaService) this.defaultService).findById(id); 
	}

	public Map findByIdDetalhamento(Long id){
		RotaColetaEntrega rotaColetaEntrega = ((RotaColetaEntregaService) this.defaultService).findById(id);

		Map mapRotaColetaEntrega = new HashMap();
		Integer acaoVigencia = JTVigenciaUtils.getIntegerAcaoVigencia(rotaColetaEntrega);
		mapRotaColetaEntrega.put("acaoVigenciaAtual", acaoVigencia);

		mapRotaColetaEntrega.put("idFilial", rotaColetaEntrega.getFilial().getIdFilial()); 
		mapRotaColetaEntrega.put("sgFilial", rotaColetaEntrega.getFilial().getSgFilial()); 
		mapRotaColetaEntrega.put("nmFantasia", rotaColetaEntrega.getFilial().getPessoa().getNmFantasia());

		mapRotaColetaEntrega.put("nrRota", rotaColetaEntrega.getNrRota()); 
		mapRotaColetaEntrega.put("nrKm", rotaColetaEntrega.getNrKm()); 
		mapRotaColetaEntrega.put("dsRota", rotaColetaEntrega.getDsRota()); 
		mapRotaColetaEntrega.put("dtVigenciaInicial", rotaColetaEntrega.getDtVigenciaInicial()); 
		mapRotaColetaEntrega.put("dtVigenciaFinal", rotaColetaEntrega.getDtVigenciaFinal());
		mapRotaColetaEntrega.put("idRotaColetaEntrega", rotaColetaEntrega.getIdRotaColetaEntrega()); 

		List lista = new ArrayList();
		for (Iterator iter = rotaColetaEntrega.getHorarioPrevistoSaidaRotas().iterator(); iter.hasNext();){
			HorarioPrevistoSaidaRota horarioPrevistoSaidaRota = (HorarioPrevistoSaidaRota)iter.next();
			Map mapRotaColeta = new HashMap();			
			mapRotaColeta.put("hrPrevista",horarioPrevistoSaidaRota.getHrPrevista());
			lista.add(mapRotaColeta);
		}
		mapRotaColetaEntrega.put("horarioPrevistoSaidaRotas",lista);
		return mapRotaColetaEntrega;
	}
	
	public ResultSetPage findPaginated(Map criteria) {
		Map filial = new HashMap();
		filial.put("idFilial", criteria.get("idFilial"));
		criteria.put("filial", filial);
		criteria.remove("idFilial");

		ResultSetPage rsp = ((RotaColetaEntregaService) this.defaultService).findPaginated(criteria);
		FilterResultSetPage frsp = new FilterResultSetPage(rsp) {
			public Map filterItem(Object item) {
				RotaColetaEntrega rotaColetaEntrega = (RotaColetaEntrega) item;
				TypedFlatMap row = new TypedFlatMap();
				
				String dsRota = rotaColetaEntrega.getDsRota();
				dsRota = dsRota.replaceAll("\n", " ");
				dsRota = dsRota.replaceAll("\r", " ");

				row.put("idRotaColetaEntrega", rotaColetaEntrega.getIdRotaColetaEntrega()); 				
				row.put("dsRota", dsRota);
				row.put("nrKm", rotaColetaEntrega.getNrKm());
				row.put("numeroDescricaoRota", rotaColetaEntrega.getNumeroDescricaoRota());
				row.put("nrRota", rotaColetaEntrega.getNrRota());
				row.put("dtVigenciaInicial", rotaColetaEntrega.getDtVigenciaInicial());
				row.put("dtVigenciaFinal", rotaColetaEntrega.getDtVigenciaFinal());
				row.put("idFilial", rotaColetaEntrega.getFilial().getIdFilial());
				row.put("sgFilial", rotaColetaEntrega.getFilial().getSgFilial());
				row.put("nmFantasia", rotaColetaEntrega.getFilial().getPessoa().getNmFantasia());

				return row;
			}
		};

		return (ResultSetPage)frsp.doFilter();
	}
	
	public Integer getRowCount(TypedFlatMap criteria) {		
		return ((RotaColetaEntregaService) this.defaultService).getRowCount(criteria);
	}
	
	public void removeById(Long id) { 
		((RotaColetaEntregaService) this.defaultService).removeById(id); 
	}
	
	/**
	 * Apaga várias entidades através do Id.
	 * @param ids lista com as entidades que deverão ser removida.
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		((RotaColetaEntregaService) this.defaultService).removeByIds(ids); 
	}

	/**
	 * @return Returns the filialService.
	 */
	public FilialService getFilialService() {
		return filialService;
	}

	/**
	 * @param filialService The filialService to set.
	 */
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

}
