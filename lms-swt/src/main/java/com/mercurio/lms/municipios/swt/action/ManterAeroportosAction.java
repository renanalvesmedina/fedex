package com.mercurio.lms.municipios.swt.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.AeroportoService;
import com.mercurio.lms.municipios.model.service.FilialService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.municipios.swt.manterAeroportosAction"
 */ 

public class ManterAeroportosAction extends CrudAction {
	private FilialService filialService;
	
	public ResultSetPage findPaginatedCustom(Map criteria){
		ResultSetPage rsp = ((AeroportoService)defaultService).findPaginatedCustom(prepareCriteria(criteria));
		List<TypedFlatMap> aeroportos = rsp.getList();
		if (aeroportos != null) {
			List<Map<String, Object>> result = new ArrayList<Map<String,Object>>();
			for (TypedFlatMap aeroporto : aeroportos) {
				Map<String, Object> mapAeroporto = new HashMap<String, Object>();
				mapAeroporto.put("idAeroporto", aeroporto.get("idAeroporto"));
				mapAeroporto.put("tpIdentificacao", aeroporto.get("pessoa.tpIdentificacao"));
				mapAeroporto.put("nrIdentificacao", aeroporto.get("pessoa.nrIdentificacao"));
				mapAeroporto.put("nrIdentificacaoFormatado", aeroporto.get("pessoa.nrIdentificacaoFormatado"));
				mapAeroporto.put("nmPessoa", aeroporto.get("pessoa.nmPessoa"));
				mapAeroporto.put("sgAeroporto", aeroporto.get("sgAeroporto"));
				mapAeroporto.put("cdCidade", aeroporto.get("cdCidade"));
				mapAeroporto.put("tpSituacao", aeroporto.get("tpSituacao"));
				mapAeroporto.put("sgFilial", aeroporto.get("filial.sgFilial"));
				mapAeroporto.put("nmFantasia", aeroporto.get("filial.pessoa.nmFantasia"));
				mapAeroporto.put("municUltimoEndereco", aeroporto.get("municUltimoEndereco"));
				mapAeroporto.put("idPais", aeroporto.get("endereco.municipio.unidadeFederativa.pais.idPais"));
				mapAeroporto.put("nmPais", aeroporto.get("endereco.municipio.unidadeFederativa.pais.nmPais"));
				mapAeroporto.put("idZona", aeroporto.get("endereco.municipio.unidadeFederativa.pais.zona.idZona"));
				mapAeroporto.put("dsZona", aeroporto.get("endereco.municipio.unidadeFederativa.pais.zona.dsZona"));
				mapAeroporto.put("idUnidadeFederativa", aeroporto.get("endereco.municipio.unidadeFederativa.idUnidadeFederativa"));
				result.add(mapAeroporto);
			}
			rsp.setList(result);
		}
		return rsp;
	}
	
	public Integer getRowCountCustom(Map criteria){
		return ((AeroportoService)defaultService).getRowCountCustom(prepareCriteria(criteria));
	}
	
	public List findLookupFilial(Map criteria) {
		List<Filial> filiais = filialService.findLookup(criteria);
		if (filiais != null) {
			List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();
			for (Filial filial : filiais) {
				Map<String, Object> mapFilial = new HashMap<String, Object>();
				mapFilial.put("sgFilial", filial.getSgFilial());
				mapFilial.put("idFilial", filial.getIdFilial());
				mapFilial.put("nmFantasia", filial.getPessoa().getNmFantasia());
				result.add(mapFilial);
			}
			return result;
		}
		return null;
	}
	
	/*
	 * METODOS PRIVADOS
	 */
	private TypedFlatMap prepareCriteria(Map criteria) {
		TypedFlatMap result = new TypedFlatMap();
		result.put("pessoa.tpPessoa", criteria.get("tpPessoa"));
		if (criteria.get("tpIdentificacao") != null) {
			result.put("pessoa.tpIdentificacao", new DomainValue((String) criteria.get("tpIdentificacao")));
		}
		result.put("pessoa.nrIdentificacao", criteria.get("nrIdentificacao"));
		result.put("pessoa.nmPessoa", criteria.get("nmPessoa"));
		result.put("sgAeroporto", criteria.get("sgAeroporto"));
		result.put("cdCidade", criteria.get("cdCidade"));
		result.put("filial.idFilial", criteria.get("idFilial"));
		result.put("tpSituacao", criteria.get("tpSituacao"));
		result.put("_currentPage", criteria.get("_currentPage"));
		result.put("_order", criteria.get("_order"));
		result.put("_pageSize", criteria.get("_pageSize"));
		return result;
	}
	
	/*
	 * GETTERS E SETTERS
	 */
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public void setAeroporto(AeroportoService aeroportoService) {
		this.defaultService = aeroportoService;
	}
}
