package com.mercurio.lms.municipios.swt.action;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;


import com.mercurio.adsm.core.util.Base64Util;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Moeda;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.configuracoes.model.service.UsuarioService;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteService;
import com.mercurio.lms.municipios.model.Aeroporto;
import com.mercurio.lms.municipios.model.Empresa;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.FotoFilial;
import com.mercurio.lms.municipios.model.HistoricoFilial;
import com.mercurio.lms.municipios.model.Regional;
import com.mercurio.lms.municipios.model.service.DivisaoGrupoClassificacaoService;
import com.mercurio.lms.municipios.model.service.EmpresaService;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.GrupoClassificacaoService;
import com.mercurio.lms.municipios.model.service.HistoricoFilialService;
import com.mercurio.lms.municipios.model.service.RegionalFilialService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.PessoaUtils;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.municipios.swt.manterFiliaisAction"
 */

public class ManterFiliaisAction extends CrudAction {
	private FilialService filialService;
	private MeioTransporteService meioTransporteService;
	private RegionalFilialService regionalFilialService;
	private HistoricoFilialService historicoFilialService;
	private EmpresaService empresaService;
	private UsuarioService usuarioService;
	private GrupoClassificacaoService grupoClassificacaoService;
	private DivisaoGrupoClassificacaoService divisaoGrupoClassificacaoService;
	

    public FilialService getFilialService() {
		return filialService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public void removeById(java.lang.Long id) {
		getFilialService().removeById(id);
    }
 
	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	getFilialService().removeByIds(ids);
    }
    
    public List findTimeZones() {
    	return JTDateTimeUtils.getTimeZones();
    }

    public Map store(Map bean) {
    	return getFilialService().store(bean);
    }
    
	public ResultSetPage findPaginatedFilial(Map criteria) {		
		ResultSetPage rspFilial = this.getFilialService().findPaginated(createCriteria(criteria));
		
    	List listFilial = new ArrayList();
    	for(int i=0; i< rspFilial.getList().size(); i++) {
    		TypedFlatMap tfmFilial = (TypedFlatMap) rspFilial.getList().get(i);

    		Map mapFilial = new HashMap();
    		
    		mapFilial.put("idFilial", tfmFilial.get("idFilial"));
    		mapFilial.put("sgFilial", tfmFilial.get("sgFilial"));
    		mapFilial.put("cdFilial", tfmFilial.get("cdFilial"));
    		
    		mapFilial.put("nmPessoaEmpresa", tfmFilial.get("empresa.pessoa.nmPessoa"));
    		mapFilial.put("nrIdentificacaoEmpresa", tfmFilial.get("empresa.pessoa.nrIdentificacao"));
    		mapFilial.put("idEmpresa", tfmFilial.get("empresa.idEmpresa"));
    		    	
    		mapFilial.put("sgRegional", tfmFilial.get("lastRegional.sgRegional"));
    		mapFilial.put("dsRegional", tfmFilial.get("lastRegional.dsRegional"));
    		
    		mapFilial.put("tpIdentificacao", tfmFilial.get("pessoa.tpIdentificacao"));
    		mapFilial.put("nrIdentificacao", tfmFilial.get("pessoa.nrIdentificacao"));
    		mapFilial.put("nmFantasia", tfmFilial.get("pessoa.nmFantasia"));
    		
    		mapFilial.put("sgFilialResponsavel", tfmFilial.get("filialByIdFilialResponsavel.sgFilial"));
    		mapFilial.put("nmFantasiaResponsavel", tfmFilial.get("filialByIdFilialResponsavel.pessoa.nmFantasia"));
    		
    		mapFilial.put("sgFilialResponsavalAwb", tfmFilial.get("filialByIdFilialResponsavalAwb.sgFilial"));
    		mapFilial.put("nmFantasiaResponsavalAwb", tfmFilial.get("filialByIdFilialResponsavalAwb.pessoa.nmFantasia"));
    		
    		mapFilial.put("dtImplantacaoLMS", tfmFilial.get("dtImplantacaoLMS"));
    		    		
    		mapFilial.put("tpFilial", tfmFilial.get("lastHistoricoFilial.tpFilial"));    		
    		mapFilial.put("dtRealOperacaoInicial", tfmFilial.get("lastHistoricoFilial.dtRealOperacaoInicial"));
    		mapFilial.put("dtRealOperacaoFinal", tfmFilial.get("lastHistoricoFilial.dtRealOperacaoFinal"));
    		
    		listFilial.add(mapFilial);
    	}
    	
    	rspFilial.setList(listFilial);
    	
    	return rspFilial;
	}

	public Integer getRowCountFilial(Map criteria) {
		return this.getFilialService().getRowCount(createCriteria(criteria));
	}
	/**
	 * Método que configura o criterio a ser usado.
	 * @param criteria
	 * @return
	 */
	private TypedFlatMap createCriteria(Map criteria) {
		TypedFlatMap tfmCriteria = new TypedFlatMap();
		tfmCriteria.put("tpAcesso", criteria.get("tpAcesso"));
		tfmCriteria.put("sgFilial", criteria.get("sgFilial") != null ? criteria.get("sgFilial") + "%" : null);
		tfmCriteria.put("dtImplantacaoLMS", criteria.get("dtImplantacaoLMS"));
		tfmCriteria.put("historicoFiliais.vigenteEm", criteria.get("vigenteEm"));
		tfmCriteria.put("empresa.idEmpresa", criteria.get("idEmpresa"));
		tfmCriteria.put("empresa.tpEmpresa", criteria.get("tpEmpresa"));
		tfmCriteria.put("pessoa.tpPessoa", criteria.get("tpPessoa"));
		tfmCriteria.put("pessoa.tpIdentificacao", criteria.get("tpIdentificacao"));
		if (StringUtils.isNotBlank((String)criteria.get("nrIdentificacao"))) {
			tfmCriteria.put("pessoa.nrIdentificacao", PessoaUtils.validateIdentificacao((String)criteria.get("nrIdentificacao")));
		}	
		tfmCriteria.put("pessoa.nmFantasia", criteria.get("nmFantasiaFilial"));
		tfmCriteria.put("pessoa.nmPessoa", criteria.get("nmPessoaFilial"));
		tfmCriteria.put("historicoFiliais.tpFilial", criteria.get("tpFilial"));
		tfmCriteria.put("historicoFiliais.dtRealOperacaoInicial", criteria.get("dtRealOperacaoInicial"));
		tfmCriteria.put("historicoFiliais.dtRealOperacaoFinal", criteria.get("dtRealOperacaoFinal"));
		tfmCriteria.put("filialByIdFilialResponsavel.idFilial", criteria.get("idFilialResponsavel"));
		tfmCriteria.put("filialByIdFilialResponsavalAwb.idFilial", criteria.get("idFilialCiaAerea"));
		tfmCriteria.put("grupoClassificacaoFiliais.divisaoGrupoClassificacao.idDivisaoGrupoClassificacao", criteria.get("idDivisaoGrupoClassificacao"));
		tfmCriteria.put("grupoClassificacaoFiliais.divisaoGrupoClassificacao.grupoClassificacao.idGrupoClassificacao", criteria.get("idGrupoClassificacao"));
		tfmCriteria.put("flagBlSorter", criteria.get("flagBlSorter"));
		
    	tfmCriteria.put("_currentPage", criteria.get("_currentPage"));
    	tfmCriteria.put("_pageSize", criteria.get("_pageSize"));
    	tfmCriteria.put("_order", criteria.get("_order"));
		return tfmCriteria;
	}
	
	public TypedFlatMap findById(java.lang.Long id) {
    	Filial filial = getFilialService().findById(id);  
        TypedFlatMap result = new TypedFlatMap();

        Empresa empresa = filial.getEmpresa();
		//Pessoa de empresa
        Pessoa  pessoa  = empresa.getPessoa();
		result.put("empresa.tpEmpresa",empresa.getTpEmpresa().getValue());
		result.put("empresa.idEmpresa",empresa.getIdEmpresa());
		result.put("empresa.pessoa.nrIdentificacao",pessoa.getNrIdentificacao());
		result.put("empresa.pessoa.nrIdentificacaoFormatado",FormatUtils.formatIdentificacao(pessoa.getTpIdentificacao().getValue(),pessoa.getNrIdentificacao()));
		result.put("empresa.pessoa.nmPessoa",pessoa.getNmPessoa());
		//Pessoa da filial
		pessoa = filial.getPessoa();
		if (pessoa.getTpIdentificacao() != null) {
			result.put("pessoa.tpIdentificacao",pessoa.getTpIdentificacao().getValue());
			if (pessoa.getNrIdentificacao() != null)
				result.put("pessoa.nrIdentificacao",FormatUtils.formatIdentificacao(pessoa.getTpIdentificacao().getValue(),pessoa.getNrIdentificacao()));
		}
		
		result.put("pessoa.idPessoa",filial.getIdFilial());
		result.put("pessoa.dsEmail",pessoa.getDsEmail());
		result.put("pessoa.nmPessoa",pessoa.getNmPessoa());
		result.put("pessoa.nmFantasia",pessoa.getNmFantasia());
		result.put("pessoa.tpPessoa","J");
		
		result.put("idFilial",filial.getIdFilial());
		result.put("sgFilial",filial.getSgFilial());
		result.put("dtImplantacaoLMS",filial.getDtImplantacaoLMS());
		result.put("obAprovacao",filial.getObAprovacao());
		result.put("dsHomepage",filial.getDsHomepage());
		result.put("obFilial",filial.getObFilial());
		result.put("nrAreaTotal",filial.getNrAreaTotal());
		result.put("nrAreaArmazenagem",filial.getNrAreaArmazenagem());
		result.put("numeroDocas",null);
		result.put("numeroBoxes",null);
		result.put("blRecebeVeiculosSemColeta",filial.getBlRecebeVeiculosSemColeta());
		result.put("blInformaKmPortaria",filial.getBlInformaKmPortaria());
		result.put("blOrdenaEntregaValor",filial.getBlOrdenaEntregaValor());
		result.put("blObrigaBaixaEntregaOrdem",filial.getBlObrigaBaixaEntregaOrdem());
		result.put("blWorkflowKm",filial.getBlWorkflowKm());
		result.put("nrFranquiaKm",filial.getNrFranquiaKm());
		result.put("nrFranquiaPeso",filial.getNrFranquiaPeso());
		result.put("nrCentroCusto",filial.getNrCentroCusto());
		result.put("nrPrazoCobranca",filial.getNrPrazoCobranca());
		result.put("vlCustoReembarque",filial.getVlCustoReembarque());
		result.put("pcJuroDiario",filial.getPcJuroDiario());
		result.put("pcFreteCarreteiro",filial.getPcFreteCarreteiro());
		result.put("blEmiteBoletoFaturamento",filial.getBlEmiteBoletoFaturamento());
		result.put("blEmiteBoletoEntrega",filial.getBlEmiteBoletoEntrega());
		result.put("blEmiteReciboFrete",filial.getBlEmiteReciboFrete());
		result.put("dsTimezone",filial.getDsTimezone());
		
		Moeda moeda = filial.getMoeda();
		if (moeda != null)
			result.put("moeda.idMoeda",moeda.getIdMoeda());
		
		Aeroporto aeroporto = filial.getAeroporto();
		if (aeroporto != null) {
			result.put("aeroporto.idAeroporto",aeroporto.getIdAeroporto());
			result.put("aeroporto.sgAeroporto",aeroporto.getSgAeroporto());
			pessoa = aeroporto.getPessoa();
			result.put("aeroporto.pessoa.nmPessoa",pessoa.getNmPessoa());
		}
		
		Empresa franqueado = filial.getFranqueado();
		if (franqueado != null) {
			Pessoa pessoaF  = franqueado.getPessoa();
			result.put("franqueado.idEmpresa",franqueado.getIdEmpresa());
			result.put("franqueado.pessoa.nrIdentificacao",pessoaF.getNrIdentificacao());
			result.put("franqueado.pessoa.nrIdentificacaoFormatado",FormatUtils.formatIdentificacao(pessoaF.getTpIdentificacao(),pessoaF.getNrIdentificacao()));
			result.put("franqueado.pessoa.nmPessoa",pessoaF.getNmPessoa());
		}

		Filial filial2 = filial.getFilialByIdFilialResponsavel();
		if (filial2 != null) {
			result.put("filialByIdFilialResponsavel.idFilial",filial2.getIdFilial());
			result.put("filialByIdFilialResponsavel.sgFilial",filial2.getSgFilial());
			pessoa = filial2.getPessoa();
			result.put("filialByIdFilialResponsavel.pessoa.nmFantasia",pessoa.getNmFantasia());
		}
		filial2 = filial.getFilialByIdFilialResponsavalAwb();
		if (filial2 != null) {
			result.put("filialByIdFilialResponsavalAwb.idFilial",filial2.getIdFilial());
			result.put("filialByIdFilialResponsavalAwb.sgFilial",filial2.getSgFilial());
			pessoa = filial2.getPessoa();
			result.put("filialByIdFilialResponsavalAwb.pessoa.nmFantasia",pessoa.getNmFantasia());
		}
		if (filial.getCedenteByIdCedenteBloqueto() != null)
			result.put("cedenteByIdCedenteBloqueto.idCedente",filial.getCedenteByIdCedenteBloqueto().getIdCedente());
		
		if (filial.getCedenteByIdCedente() != null)
			result.put("cedenteByIdCedente.idCedente",filial.getCedenteByIdCedente().getIdCedente());
		
		if (filial.getPendencia() != null)
			result.put("pendencia.idPendencia",filial.getPendencia().getIdPendencia());
          																																																																																																																				        
        Regional regional = regionalFilialService.findLastRegionalVigente(id);
        if (regional != null) {
    		result.put("lastRegional.sgRegional",regional.getSgRegional());
    		result.put("lastRegional.dsRegional",regional.getDsRegional());
        }
		
		HistoricoFilial historicoFilial = historicoFilialService.findUltimoHistoricoFilial(id);
		if (historicoFilial != null) {
			result.put("lastHistoricoFilial.tpFilial",historicoFilial.getTpFilial().getValue());
			result.put("lastHistoricoFilial.dtPrevisaoOperacaoInicial",historicoFilial.getDtPrevisaoOperacaoInicial());
			result.put("lastHistoricoFilial.dtPrevisaoOperacaoFinal",historicoFilial.getDtPrevisaoOperacaoFinal());
			result.put("lastHistoricoFilial.dtRealOperacaoInicial",historicoFilial.getDtRealOperacaoInicial());
			result.put("lastHistoricoFilial.dtRealOperacaoFinal",historicoFilial.getDtRealOperacaoFinal());
			result.put("fieldBlockade",Boolean.TRUE); 
			
			}

		result.put("meioTransporteProprioCount",meioTransporteService.getRowCountByType("P",filial.getIdFilial()));
		result.put("meioTransporteAgregadoCount",meioTransporteService.getRowCountByType("A",filial.getIdFilial()));
		
		if (filial.getFotoFiliais() != null && !filial.getFotoFiliais().isEmpty()) {
    		result.put("imFilial", Base64Util.encode(((FotoFilial)filial.getFotoFiliais().get(0)).getImFilial()));
    	}
		
		getFilialService().findContatoView(filial.getIdFilial(),"gerente","GE",result,empresa.getTpEmpresa().getValue().equals("M"));
		getFilialService().findContatoView(filial.getIdFilial(),"comercial","CC",result,empresa.getTpEmpresa().getValue().equals("M"));
		getFilialService().findContatoView(filial.getIdFilial(),"administrativo","CA",result,empresa.getTpEmpresa().getValue().equals("M"));
		getFilialService().findContatoView(filial.getIdFilial(),"operacional","CO",result,empresa.getTpEmpresa().getValue().equals("M"));

        result.put("numeroDocas",getFilialService().getRowCountDocasByFilial(filial.getIdFilial()));
        result.put("numeroBoxes",getFilialService().getRowCountBoxByFilial(filial.getIdFilial()));
        
    	return result;
    }

    public List<Map<String, Object>> findLookup(Map criteria) {
    	if (criteria.get("idEmpresa") != null) {
    		Map<String, Object> empresa = new HashMap<String, Object>();
    		empresa.put("idEmpresa", criteria.get("idEmpresa"));
    		criteria.put("empresa", empresa);
    	}
		List<Filial> filiais = filialService.findLookup(criteria);
		if (filiais != null) {
			List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();
			for (Filial filial : filiais) {
				Map<String, Object> mapFilial = new HashMap<String, Object>();
				mapFilial.put("sgFilial", filial.getSgFilial());
				mapFilial.put("idFilial", filial.getIdFilial());
				mapFilial.put("nmFantasia", filial.getPessoa().getNmFantasia());
				result.add(mapFilial);
			}
			return result;
		}
		return null;
    }
    
    public List findLookupBySgFilial(Map map){
    	return getFilialService().findLookupBySgFilial((String)map.get("sgFilial"),(String)map.get("tpAcesso"));
    }
	public void setHistoricoFilialService(
			HistoricoFilialService historicoFilialService) {
		this.historicoFilialService = historicoFilialService;
	}
	public void setMeioTransporteService(MeioTransporteService meioTransporteService) {
		this.meioTransporteService = meioTransporteService;
	}
	public void setRegionalFilialService(RegionalFilialService regionalFilialService) {
		this.regionalFilialService = regionalFilialService;
	}
	
	public List findLookupUsuarioFuncionario(TypedFlatMap criteria) {
		Long idUsuario = criteria.getLong("idUsuario");
		String nrMatricula = criteria.getString("nrMatricula");
		Long idFilial = criteria.getLong("filial.idFilial");
		
		String cdSetor = criteria.getString("codSetor.codigo");
		if (StringUtils.isBlank(cdSetor))
			cdSetor = null;
		
		return usuarioService.findLookupUsuarioFuncionario(idUsuario,nrMatricula,idFilial,null,null,cdSetor,true);
	}
    
    public List findLookupEmpresa(Map criteria) {
    	Map nrIdentificacao = new HashMap();
    	nrIdentificacao.put("nrIdentificacao", criteria.get("nrIdentificacao"));
    	criteria.put("pessoa", nrIdentificacao);
    	criteria.remove("nrIdentificacao");
    	
    	List list = this.empresaService.findLookupFilial(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		Empresa empresa = (Empresa)iter.next();
    		Map mapEmpresa = new HashMap();

    		mapEmpresa.put("idEmpresa", empresa.getIdEmpresa());
    		mapEmpresa.put("nrIdentificacao", FormatUtils.formatIdentificacao(empresa.getPessoa()));
    		mapEmpresa.put("nmEmpresa", empresa.getPessoa().getNmPessoa());
    		mapEmpresa.put("tpEmpresa", empresa.getTpEmpresa().getValue());
    		retorno.add(mapEmpresa);
    	}
    	return retorno;
    }
    
    
	/**
	 * Find da combo de Grupo de Classificação.
	 * @param criteria
	 * @return resultado do find padrão do framework.
	 */	
    public List findGrupoClassificacao(Map criteria) {
    	return this.grupoClassificacaoService.find(criteria);
    }
    
	/**
	 * Find da combo de Divisão do Grupo de Classificação.
	 * @param criteria
	 * @return resultado do find padrão do framework se receber no map a chave 'grupoClassificacao.idGrupoClassificacao'.
	 * 		NOTA: está usando maps aninhados.
	 */
	public List findDivisaoGrupoClassificacao(Map criteria) {
		if (criteria.get("idGrupoClassificacao") != null) {
			Map grupoClassificacao = new HashMap();
			grupoClassificacao.put("grupoClassificacao", criteria);
			return this.divisaoGrupoClassificacaoService.find(grupoClassificacao);				
		}
		
		return Collections.EMPTY_LIST;		
	}
    
	public void setEmpresaService(EmpresaService empresaService) {
		this.empresaService = empresaService;
	}
	public void setUsuarioService(UsuarioService usuarioService) {
		this.usuarioService = usuarioService;
	}
	public void setGrupoClassificacaoService(GrupoClassificacaoService grupoClassificacaoService) {
		this.grupoClassificacaoService = grupoClassificacaoService;
	}
	public void setDivisaoGrupoClassificacaoService(
			DivisaoGrupoClassificacaoService divisaoGrupoClassificacaoService) {
		this.divisaoGrupoClassificacaoService = divisaoGrupoClassificacaoService;
	}
	
}
