package com.mercurio.lms.municipios.swt.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.FilterResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.contratacaoveiculos.model.service.TipoMeioTransporteService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.RotaColetaEntrega;
import com.mercurio.lms.municipios.model.RotaTipoMeioTransporte;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.RotaColetaEntregaService;
import com.mercurio.lms.municipios.model.service.RotaTipoMeioTransporteService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.municipios.swt.manterTiposVeiculoRotaAction"
 */

public class ManterTiposVeiculoRotaAction extends CrudAction {
	private RotaColetaEntregaService rotaColetaEntregaService;
	private TipoMeioTransporteService tipoMeioTransporteService;
	private FilialService filialService;
	
	
	public void setRotaTipoMeioTransporteService(RotaTipoMeioTransporteService rotaTipoMeioTransporteService) {
		this.defaultService = rotaTipoMeioTransporteService;
	}
    public void removeById(java.lang.Long id) {
        ((RotaTipoMeioTransporteService)defaultService).removeById(id);
    }

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	((RotaTipoMeioTransporteService)defaultService).removeByIds(ids);
    }

    public RotaTipoMeioTransporte findById(java.lang.Long id) {
    	return ((RotaTipoMeioTransporteService)defaultService).findById(id);
    }
    
    public Serializable store(RotaTipoMeioTransporte bean) {
        return ((RotaTipoMeioTransporteService)defaultService).store(bean);
    }
    
    public Map storeMap(Map criteria) {
		Map filial = new HashMap();
		Map pessoaFilial = new HashMap();
		Map rotaColetaEntrega = new HashMap();
		Map tipoMeioTransporte = new HashMap();
		
		filial.put("idFilial", criteria.get("idFilial"));
		filial.put("sgFilial", criteria.get("sgFilial"));
		pessoaFilial.put("nmFantasia", criteria.get("nmFantasia"));
		filial.put("pessoa", pessoaFilial);
		
		rotaColetaEntrega.put("idRotaColetaEntrega", criteria.get("idRotaColetaEntrega"));
		rotaColetaEntrega.put("nrRota", criteria.get("nrRota"));
		rotaColetaEntrega.put("dsRota", criteria.get("dsRota"));
		rotaColetaEntrega.put("filial", filial);		
		criteria.put("rotaColetaEntrega", rotaColetaEntrega);

		tipoMeioTransporte.put("idTipoMeioTransporte", criteria.get("idTipoMeioTransporte"));
		criteria.put("tipoMeioTransporte", tipoMeioTransporte);
		
		criteria.remove("idFilial");
		criteria.remove("sgFilial");
		criteria.remove("nmFantasia");		
		criteria.remove("idRotaColetaEntrega");
		criteria.remove("nrRota");
		criteria.remove("dsRota");
		criteria.remove("idTipoMeioTransporte");
    	
		Map bean = ((RotaTipoMeioTransporteService) this.defaultService).storeMap(criteria);
		
		rotaColetaEntrega = (Map)bean.get("rotaColetaEntrega");
		bean.put("idRotaColetaEntrega", rotaColetaEntrega.get("idRotaColetaEntrega"));
		bean.put("nrRota", rotaColetaEntrega.get("nrRota"));
		bean.put("dsRota", rotaColetaEntrega.get("dsRota"));		
		
		filial = (Map)rotaColetaEntrega.get("filial");
		pessoaFilial = (Map)filial.get("pessoa");
		bean.put("idFilial", filial.get("idFilial"));
		bean.put("sgFilial", filial.get("sgFilial"));
		bean.put("nmFantasia", pessoaFilial.get("nmFantasia"));
		
		tipoMeioTransporte = (Map)bean.get("tipoMeioTransporte");
		bean.put("idTipoMeioTransporte", tipoMeioTransporte.get("idTipoMeioTransporte"));
		bean.remove("rotaColetaEntrega");
		bean.remove("tipoMeioTransporte");
		
		return bean;
    }
    
    public Map findByIdDetalhamento(java.lang.Long id) { 
		TypedFlatMap tfmResult = ((RotaTipoMeioTransporteService)defaultService).findByIdDetalhamento(id);
		Map mapResult = new HashMap();
		
		mapResult.put("idRotaTipoMeioTransporte", tfmResult.get("idRotaTipoMeioTransporte"));
		mapResult.put("idFilial", tfmResult.get("rotaColetaEntrega.filial.idFilial"));
		mapResult.put("sgFilial", tfmResult.get("rotaColetaEntrega.filial.sgFilial"));
		mapResult.put("nmFantasia", tfmResult.get("rotaColetaEntrega.filial.pessoa.nmFantasia"));
		mapResult.put("idRotaColetaEntrega", tfmResult.get("rotaColetaEntrega.idRotaColetaEntrega"));
		mapResult.put("nrRota", tfmResult.get("rotaColetaEntrega.nrRota"));
		mapResult.put("dsRota", tfmResult.get("rotaColetaEntrega.dsRota"));		
		mapResult.put("idTipoMeioTransporte", tfmResult.get("tipoMeioTransporte.idTipoMeioTransporte"));
		mapResult.put("dsTipoMeioTransporte", tfmResult.get("tipoMeioTransporte.dsTipoMeioTransporte"));
		mapResult.put("tpMeioTransporte", tfmResult.get("tipoMeioTransporte.tpMeioTransporte"));
		mapResult.put("dtVigenciaInicial", tfmResult.get("dtVigenciaInicial"));
		mapResult.put("dtVigenciaFinal", tfmResult.get("dtVigenciaFinal"));
		mapResult.put("acaoVigenciaAtual", tfmResult.get("acaoVigenciaAtual"));
		
		return mapResult;
	}
    
    public ResultSetPage findPaginated(Map criteria) {		
    	ResultSetPage rsp = super.findPaginated(createCriteria(criteria));    	
    	FilterResultSetPage frsp = new FilterResultSetPage(rsp) {
			public Map filterItem(Object item) {
				RotaTipoMeioTransporte rotaTipoMeioTransporte = (RotaTipoMeioTransporte) item;
				TypedFlatMap row = new TypedFlatMap();
				
				row.put("idRotaTipoMeioTransporte", rotaTipoMeioTransporte.getIdRotaTipoMeioTransporte()); 	
				row.put("nrRota", rotaTipoMeioTransporte.getRotaColetaEntrega().getNrRota());
				row.put("dsRota", rotaTipoMeioTransporte.getRotaColetaEntrega().getDsRota());
				row.put("dsTipoMeioTransporte",  rotaTipoMeioTransporte.getTipoMeioTransporte().getDsTipoMeioTransporte());
				row.put("dtVigenciaInicial",rotaTipoMeioTransporte.getDtVigenciaInicial());  
				row.put("dtVigenciaFinal", rotaTipoMeioTransporte.getDtVigenciaFinal());
																		
				return row;
			}			
		};
		
		return (ResultSetPage)frsp.doFilter();
    }
        
	public Integer getRowCount(Map criteria) {
		return super.getRowCount(criteria);
	}
	
	/**
	 * Cria os criterios para pesquisa.
	 * @param criteria
	 */
	private Map createCriteria(Map criteria) {
		Map filial = new HashMap();
		Map rotaColetaEntrega = new HashMap();
		filial.put("idFilial", criteria.get("idFilial"));
		rotaColetaEntrega.put("idRotaColetaEntrega", criteria.get("idRotaColetaEntrega"));
		rotaColetaEntrega.put("filial", filial);
		criteria.put("rotaColetaEntrega", rotaColetaEntrega);
		criteria.remove("idFilial");
		criteria.remove("idRotaColetaEntrega");		
		
		Map tipoMeioTransporte = new HashMap();
		tipoMeioTransporte.put("idTipoMeioTransporte", criteria.get("idTipoMeioTransporte"));
		criteria.put("tipoMeioTransporte", tipoMeioTransporte);
		criteria.remove("idTipoMeioTransporte");
		
		return criteria;
	}
	
	public RotaColetaEntregaService getRotaColetaEntregaService() {
		return rotaColetaEntregaService;
	}
    
	public void setRotaColetaEntregaService(RotaColetaEntregaService rotaColetaEntregaService) {
		this.rotaColetaEntregaService = rotaColetaEntregaService;
	}
	
	public List findLookupRotaColetaEntrega(Map criteria) {
		Map mapFilial = new HashMap();
		mapFilial.put("idFilial", criteria.get("idFilial"));
		mapFilial.put("sgFilial", criteria.get("sgFilial"));
		mapFilial.put("nmFantasia", criteria.get("nmFantasia"));
		criteria.put("filial", mapFilial);
		criteria.remove("idFilial");
		criteria.remove("sgFilial");
		criteria.remove("nmFantasia");
		
		List listRotaColetaEntrega = rotaColetaEntregaService.findLookup(criteria);
		List listResult = new ArrayList();
		for (Iterator iterator = listRotaColetaEntrega.iterator(); iterator.hasNext();) {
			RotaColetaEntrega rotaColetaEntrega = (RotaColetaEntrega) iterator.next();
			Map mapResult = new HashMap();
			mapResult.put("idRotaColetaEntrega", rotaColetaEntrega.getIdRotaColetaEntrega());
			mapResult.put("nrRota", rotaColetaEntrega.getNrRota());
			mapResult.put("dsRota", rotaColetaEntrega.getDsRota());
			mapResult.put("idFilial", rotaColetaEntrega.getFilial().getIdFilial());
			mapResult.put("sgFilial", rotaColetaEntrega.getFilial().getSgFilial());
			mapResult.put("nmFantasia", rotaColetaEntrega.getFilial().getPessoa().getNmFantasia());
			
			listResult.add(mapResult);
		}
		
		return listResult;
	}
	
	public TipoMeioTransporteService getTipoMeioTransporteService() {
		return tipoMeioTransporteService;
	}
	public void setTipoMeioTransporteService(TipoMeioTransporteService tipoMeioTransporteService) {
		this.tipoMeioTransporteService = tipoMeioTransporteService;
	}
	
	 public List findTipoMeioTransporte(Map criteria) {
		 if (criteria == null)
			 criteria = new HashMap();
		 criteria.put("tpMeioTransporte","R");
		 return getTipoMeioTransporteService().findCombo(criteria);
	 }
	 
	public List findLookupFilial(Map criteria) {
		List list = filialService.findLookup(criteria);
		List retorno = new ArrayList();
		for (Iterator iter = list.iterator(); iter.hasNext();) {
			Filial filial = (Filial)iter.next();
			Map map = new HashMap();

			map.put("idFilial", filial.getIdFilial());
			map.put("sgFilial", filial.getSgFilial());
			map.put("nmFantasia", filial.getPessoa().getNmFantasia());
			retorno.add(map);
		}
		return retorno;
	}
	public FilialService getFilialService() {
		return filialService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}


}
