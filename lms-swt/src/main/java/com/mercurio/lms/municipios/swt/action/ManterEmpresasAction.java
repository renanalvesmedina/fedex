package com.mercurio.lms.municipios.swt.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.lms.municipios.model.Empresa;
import com.mercurio.lms.municipios.model.service.EmpresaService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.PessoaUtils;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.municipios.swt.manterEmpresasAction"
 */

public class ManterEmpresasAction extends CrudAction {
		
	public void setEmpresaService(EmpresaService empresaService) {
		this.defaultService = empresaService;
	}
	
	public EmpresaService getEmpresaService() {
		return (EmpresaService) super.defaultService;
	}
    
	public void removeById(java.lang.Long id) {
        ((EmpresaService)defaultService).removeById(id);        
    }

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	((EmpresaService)defaultService).removeByIds(ids);
    }

    public Empresa findById(java.lang.Long id) {
    	return ((EmpresaService)defaultService).findById(id);
    }
    
    /**
     * Método responsável por inserir ou editar um pojo Cedente
     * @param bean
     * @return Serializable
     */
    public Serializable store(Empresa bean) {
    	return ((EmpresaService)defaultService).store(bean);
    }
   
    /**
     * FindPaginated da Empresa.
     * @param criteria
     * @return
     */
    public ResultSetPage findPaginated(Map criteria) {
    	criteria.put("tpPessoa", "J");
    	Map mapCriteria = createFindCriteria(criteria);
    	
		ResultSetPage resultSetPage = getEmpresaService().findPaginated(mapCriteria);
		List listReturn = new ArrayList();
		
		for (Iterator iter = resultSetPage.getList().iterator(); iter.hasNext();) {
			Map map = (HashMap) iter.next();
			
			Map mapReturn = new HashMap();			
			mapReturn.put("idEmpresa", map.get("idEmpresa"));
			mapReturn.put("sgEmpresa", map.get("sgEmpresa"));			
			mapReturn.put("tpEmpresa", ((Map)map.get("tpEmpresa")).get("value"));
			mapReturn.put("tpEmpresaDesc", ((Map)map.get("tpEmpresa")).get("description"));
			mapReturn.put("tpSituacao", ((Map)map.get("tpSituacao")).get("description"));
			
			Map pessoa = (Map)map.get("pessoa"); 
			mapReturn.put("tpIdentificacao", ((Map)pessoa.get("tpIdentificacao")).get("description"));
			mapReturn.put("nrIdentificacao", pessoa.get("nrIdentificacao"));
			mapReturn.put("nrIdentificacaoFormatado", pessoa.get("nrIdentificacaoFormatado"));
			mapReturn.put("nmPessoa", pessoa.get("nmPessoa"));
			mapReturn.put("nmFantasia", pessoa.get("nmFantasia"));
			mapReturn.put("nmEmpresa", pessoa.get("nmFantasia"));
						
			listReturn.add(mapReturn);
		}
		resultSetPage.setList(listReturn);
		return resultSetPage;
    }
    
    /**
     * getRowCount da Empresa.
     * @param criteria
     * @return
     */
    public Integer getRowCount(Map criteria) {
    	criteria.put("tpPessoa", "J");
    	Map mapCriteria = createFindCriteria(criteria);
    	return getEmpresaService().getRowCount(mapCriteria);
    }    
    
    
    
    /**
     * FindPaginated de Filiais da Empresa.
     * @param criteria
     * @return
     */
    public ResultSetPage findPaginatedFilial(Map criteria) {
    	criteria.put("tpPessoa", "J");
    	Map mapCriteria = createFindCriteria(criteria);
		ResultSetPage resultSetPage = getEmpresaService().findPaginatedFilial(mapCriteria);
		List listReturn = new ArrayList();
		
		for (Iterator iter = resultSetPage.getList().iterator(); iter.hasNext();) {
			Empresa empresa = (Empresa) iter.next();
			
			Map mapReturn = new HashMap();			
			mapReturn.put("idEmpresa", empresa.getIdEmpresa());
			mapReturn.put("tpEmpresa", empresa.getTpEmpresa().getValue());
			mapReturn.put("tpEmpresaDesc", empresa.getTpEmpresa().getDescription());
			mapReturn.put("tpSituacao", empresa.getTpSituacao().getDescription());			
			mapReturn.put("tpIdentificacao", empresa.getPessoa().getTpIdentificacao().getDescription());
			mapReturn.put("nrIdentificacao", empresa.getPessoa().getNrIdentificacao());
			mapReturn.put("nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(empresa.getPessoa()));
			mapReturn.put("nmPessoa", empresa.getPessoa().getNmPessoa());
			mapReturn.put("nmFantasia", empresa.getPessoa().getNmFantasia());
			mapReturn.put("nmEmpresa", empresa.getPessoa().getNmFantasia());			
			
			listReturn.add(mapReturn);
		}
		resultSetPage.setList(listReturn);
		return resultSetPage;
    }
    
    /**
     * getRowCount de Filiais da Empresa.
     * @param criteria
     * @return
     */
    public Integer getRowCountFilial(Map criteria) {
    	criteria.put("tpPessoa", "J");
    	Map mapCriteria = createFindCriteria(criteria);
    	return getEmpresaService().getRowCountFilial(mapCriteria);
    }
    
    
    /**
     * Cria mapa com filtros para pesquisa.
     * @param criteria
     * @return
     */
	private Map createFindCriteria(Map criteria) {
		Map mapCriteria = new HashMap();
		mapCriteria.put("_currentPage", criteria.get("_currentPage"));
    	mapCriteria.put("_pageSize", criteria.get("_pageSize"));
    	mapCriteria.put("_order", criteria.get("_order"));
		
		mapCriteria.put("tpEmpresa", criteria.get("tpEmpresa"));
		mapCriteria.put("tpSituacao", criteria.get("tpSituacao"));
		mapCriteria.put("sgEmpresa", criteria.get("sgEmpresa"));
		
		Map mapPessoa = new HashMap();
		mapPessoa.put("tpPessoa", criteria.get("tpPessoa"));
		mapPessoa.put("tpIdentificacao", criteria.get("tpIdentificacao"));
		if (StringUtils.isNotBlank((String)criteria.get("nrIdentificacao"))) {
			mapPessoa.put("nrIdentificacao", PessoaUtils.validateIdentificacao((String)criteria.get("nrIdentificacao")));
		}
		mapPessoa.put("nmPessoa", criteria.get("nmPessoa"));
		mapPessoa.put("nmFantasia", criteria.get("nmFantasia"));
		
		mapCriteria.put("pessoa", mapPessoa);
		
    	return mapCriteria;
	}    
    
}
