package com.mercurio.lms.municipios.swt.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.BooleanUtils;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.municipios.model.Empresa;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.Municipio;
import com.mercurio.lms.municipios.model.UnidadeFederativa;
import com.mercurio.lms.municipios.model.service.EmpresaService;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.MunicipioFilialService;
import com.mercurio.lms.municipios.model.service.MunicipioService;
import com.mercurio.lms.municipios.model.service.PaisService;
import com.mercurio.lms.municipios.model.service.UnidadeFederativaService;
import com.mercurio.lms.util.FormatUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.municipios.swt.manterMunicipiosAtendidosAction"
 */ 

public class ManterMunicipiosAtendidosAction extends CrudAction {
	private EmpresaService empresaService;
	private FilialService filialService;
	private MunicipioService municipioService;
	private UnidadeFederativaService unidadeFederativaService;
	private PaisService paisService;
	private MunicipioFilialService municipioFilialService;

    public ResultSetPage findPaginatedCustom(Map criteria) {
    	ResultSetPage rsp = municipioFilialService.findPaginatedCustom(prepareCriteria(criteria));
    	List<Map> result = rsp.getList();
    	if (result != null) {
    		for (Map municipioFilial : result) {    			
    			municipioFilial.put("idMunicipioFilial", municipioFilial.remove("idMunicipioFilial"));
				municipioFilial.put("dsFilial", municipioFilial.remove("filial.siglaNomeFilial"));
				municipioFilial.put("idFilial", municipioFilial.remove("filial.idFilial"));
				municipioFilial.put("sgFilial", municipioFilial.remove("filial.sgFilial"));				
				municipioFilial.put("nmFantasia", municipioFilial.remove("filial.pessoa.nmFantasia"));				
				municipioFilial.put("nmMunicipio", municipioFilial.remove("municipio.nmMunicipio"));
				municipioFilial.put("idMunicipio", municipioFilial.remove("municipio.idMunicipio"));
				municipioFilial.put("sgUnidadeFederativa", municipioFilial.remove("municipio.unidadeFederativa.sgUnidadeFederativa"));
				municipioFilial.put("idUnidadeFederativa", municipioFilial.remove("municipio.unidadeFederativa.idUnidadeFederativa"));				
				municipioFilial.put("nmUnidadeFederativa", municipioFilial.remove("municipio.unidadeFederativa.nmUnidadeFederativa"));				
				municipioFilial.put("nmPais", municipioFilial.remove("municipio.unidadeFederativa.pais.nmPais"));
				municipioFilial.put("idPais", municipioFilial.remove("municipio.unidadeFederativa.pais.idPais"));
				Boolean blDistrito = (Boolean) municipioFilial.remove("municipio.blDistrito");
				if (BooleanUtils.toBoolean(blDistrito)) {
					municipioFilial.put("blDistrito", "S");
				} else {
					municipioFilial.put("blDistrito", "");
				}
				municipioFilial.put("nrDistanciaChao", municipioFilial.remove("nrDistanciaChao"));
				municipioFilial.put("nrDistanciaAsfalto", municipioFilial.remove("nrDistanciaAsfalto"));
				municipioFilial.put("nmMunicipioDistrito", municipioFilial.remove("municipio.municipioDistrito.nmMunicipio"));
			}
    	}
    	return rsp;
    }

    public Integer getRowCountCustom(Map criteria) {
    	return municipioFilialService.getRowCountCustom(prepareCriteria(criteria));
    }
    
    public List findLookupEmpresa(Map criteria) {
		Map<String, Object> pessoa = new HashMap<String, Object>();
		pessoa.put("nrIdentificacao", criteria.remove("nrIdentificacao"));
		criteria.put("pessoa", pessoa);
		List<Empresa> empresas = empresaService.findLookup(criteria);
		if (empresas != null) {
			List<Map<String, Object>> result = new ArrayList<Map<String,Object>>();
			for(Empresa empresa : empresas) {
				Map<String, Object> mapEmpresa = new HashMap<String, Object>();
				String nrIdentificacaoFormatado = FormatUtils.formatIdentificacao(empresa.getPessoa());
				
				mapEmpresa.put("idEmpresa", empresa.getIdEmpresa());
				mapEmpresa.put("nrIdentificacao", nrIdentificacaoFormatado);
				mapEmpresa.put("nmPessoa", empresa.getPessoa().getNmPessoa());
				result.add(mapEmpresa);
			}
			return result;
		}
		return null;
    }
    
    public List findLookupFilial(Map criteria) {
    	if (criteria.get("idEmpresa") != null) {
    		Map<String, Object> empresa = new HashMap<String, Object>();
    		empresa.put("idEmpresa", criteria.remove("idEmpresa"));
    		criteria.put("empresa", empresa);
    	}
    	List<Filial> filiais = filialService.findLookup(criteria);
		if (filiais != null) {
			List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();
			for (Filial filial : filiais) {
				Empresa empresa =  empresaService.findById(filial.getEmpresa().getIdEmpresa());
				Map<String, Object> mapFilial = new HashMap<String, Object>();
				mapFilial.put("sgFilial", filial.getSgFilial());
				mapFilial.put("idFilial", filial.getIdFilial());
				mapFilial.put("nmFantasia", filial.getPessoa().getNmFantasia());
				mapFilial.put("idEmpresa", empresa.getIdEmpresa());
				mapFilial.put("nrIdentificacao", FormatUtils.formatIdentificacao(empresa.getPessoa()));
				mapFilial.put("nmPessoa", empresa.getPessoa().getNmPessoa());
				result.add(mapFilial);
			}
			return result;
		}
		return null;
    }
    
    public List findLookupMunicipio(Map criteria) {
    	List<Municipio> municipios = municipioService.findLookup(criteria);
    	if (municipios != null) {
    		List<Map<String, Object>> result = new ArrayList<Map<String,Object>>();
    		for (Municipio municipio : municipios) {
    			Map<String, Object> mapMunicipio = new HashMap<String, Object>();
    			mapMunicipio.put("idMunicipio", municipio.getIdMunicipio());
    			mapMunicipio.put("nmMunicipio", municipio.getNmMunicipio());
    			mapMunicipio.put("idUnidadeFederativa", municipio.getUnidadeFederativa().getIdUnidadeFederativa());
    			mapMunicipio.put("sgUnidadeFederativa", municipio.getUnidadeFederativa().getSgUnidadeFederativa());
    			mapMunicipio.put("nmUnidadeFederativa", municipio.getUnidadeFederativa().getNmUnidadeFederativa());
    			mapMunicipio.put("idPais", municipio.getUnidadeFederativa().getPais().getIdPais());
    			mapMunicipio.put("nmPais", municipio.getUnidadeFederativa().getPais().getNmPais().getValue());
    			if (BooleanUtils.toBoolean(municipio.getBlDistrito())) {
    				mapMunicipio.put("blDistrito", "S");
    			} else {
    				mapMunicipio.put("blDistrito", "N");
    			}
    			Municipio municipioDistrito = municipio.getMunicipioDistrito();
    			if (municipioDistrito != null) {
	    			mapMunicipio.put("idMunicipioDistrito", municipio.getMunicipioDistrito().getIdMunicipio());
	    			mapMunicipio.put("nmMunicipioDistrito", municipio.getMunicipioDistrito().getNmMunicipio());
    			}
    			result.add(mapMunicipio);
    		}
    		return result;
    	}
    	return null;
    }
    
    public List findLookupUnidadeFederativa(Map criteria) {
    	List<UnidadeFederativa> ufs = unidadeFederativaService.findLookup(criteria);
    	if (ufs != null) {
    		List<Map<String, Object>> result = new ArrayList<Map<String,Object>>();
    		for (UnidadeFederativa uf : ufs) {
    			Map<String, Object> mapUf = new HashMap<String, Object>();
    			mapUf.put("idUnidadeFederativa", uf.getIdUnidadeFederativa());
    			mapUf.put("sgUnidadeFederativa", uf.getSgUnidadeFederativa());
    			mapUf.put("nmUnidadeFederativa", uf.getNmUnidadeFederativa());
    			mapUf.put("idPais", uf.getPais().getIdPais());
    			mapUf.put("nmPais", uf.getPais().getNmPais().getValue());
    			result.add(mapUf);
    		}
    		return result;
    	}
    	return null;
    }
    
    public List findLookupPais(Map criteria) {
    	return paisService.findLookup(criteria);
    }
    
    /*
     * METODOS PRIVADOS
     */
    private TypedFlatMap prepareCriteria(Map criteria) {
    	TypedFlatMap result = new TypedFlatMap();
    	result.put("_currentPage", criteria.get("_currentPage"));
		result.put("_order", criteria.get("_order"));
		result.put("_pageSize", criteria.get("_pageSize"));
		result.put("filial.empresa.idEmpresa", criteria.get("idEmpresa"));
		result.put("filial.idFilial", criteria.get("idFilial"));
		result.put("municipio.idMunicipio", criteria.get("idMunicipio"));
		result.put("municipio.unidadeFederativa.pais.idPais", criteria.get("idPais"));
		result.put("municipio.unidadeFederativa.idUnidadeFederativa", criteria.get("idUnidadeFederativa"));
		result.put("municipioDistrito.idMunicipio", criteria.get("idMunicipioDistrito"));
		result.put("municipio.nmMunicipio", criteria.get("nmMunicipio"));
		result.put("municipio.blDistrito", criteria.get("blDistrito"));
		result.put("blRecebeColetaEventual", criteria.get("blRecebeColetaEventual"));
		result.put("blDificuldadeEntrega", criteria.get("blDificuldadeEntrega"));		
		result.put("blPadraoMcd", criteria.get("blPadraoMcd"));
		result.put("blRestricaoAtendimento", criteria.get("blRestricaoAtendimento"));
		result.put("blRestricaoTransporte", criteria.get("blRestricaoTransporte"));
		result.put("dtVigenciaInicial", criteria.get("dtVigenciaInicial"));		
		result.put("dtVigenciaFinal", criteria.get("dtVigenciaFinal"));		
		result.put("vigentes", criteria.get("vigentes"));
    	return result;
    }
    
    /*
     * GETTERS E SETTERS
     */
	public void setEmpresaService(EmpresaService empresaService) {
		this.empresaService = empresaService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public void setMunicipioService(MunicipioService municipioService) {
		this.municipioService = municipioService;
	}
	public void setUnidadeFederativaService(UnidadeFederativaService unidadeFederativaService) {
		this.unidadeFederativaService = unidadeFederativaService;
	}
	public void setPaisService(PaisService paisService) {
		this.paisService = paisService;
	}
	public void setMunicipioFilialService(MunicipioFilialService municipioFilialService) {
		this.municipioFilialService = municipioFilialService;
	}
}
