package com.mercurio.lms.municipios.swt.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.FilterResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.contratacaoveiculos.model.Proprietario;
import com.mercurio.lms.contratacaoveiculos.model.TipoMeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteService;
import com.mercurio.lms.contratacaoveiculos.model.service.ProprietarioService;
import com.mercurio.lms.contratacaoveiculos.model.service.TipoMeioTransporteService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.Regional;
import com.mercurio.lms.municipios.model.RotaIdaVolta;
import com.mercurio.lms.municipios.model.RotaViagem;
import com.mercurio.lms.municipios.model.TrechoRotaIdaVolta;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.RegionalService;
import com.mercurio.lms.municipios.model.service.RotaIdaVoltaService;
import com.mercurio.lms.municipios.model.service.TrechoRotaIdaVoltaService;
import com.mercurio.lms.util.FormatUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.municipios.swt.consultarRotasIdaVoltaAction"
 */
public class ConsultarRotasIdaVoltaAction extends CrudAction {

	private RegionalService regionalService;
	private TipoMeioTransporteService tipoMeioTransporteService;
    private FilialService filialService;
	private ProprietarioService proprietarioService;
	private MeioTransporteService meioTransporteService;
    private TrechoRotaIdaVoltaService trechoRotaIdaVoltaService;
    private RotaIdaVoltaService rotaIdaVoltaService;
    
    public void setRotaIdaVoltaService(RotaIdaVoltaService rotaIdaVoltaService) {
		this.rotaIdaVoltaService = rotaIdaVoltaService;
	}

	public void setTrechoRotaIdaVoltaService(TrechoRotaIdaVoltaService trechoRotaIdaVoltaService) {
		this.trechoRotaIdaVoltaService = trechoRotaIdaVoltaService;
	}

	public void setMeioTransporteService(MeioTransporteService meioTransporteService) {
		this.meioTransporteService = meioTransporteService;
	}

	public void setProprietarioService(ProprietarioService proprietarioService) {
		this.proprietarioService = proprietarioService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public void setTipoMeioTransporteService(TipoMeioTransporteService tipoMeioTransporteService) {
		this.tipoMeioTransporteService = tipoMeioTransporteService;
	}

	public void setRegionalService(RegionalService regionalService) {
		this.regionalService = regionalService;
	}

	public List findComboRegionalOrigem(Map criteria) {
		return regionalServiceFind(criteria, "idRegionalOrigem");
	}

	public List findComboRegionalDestino(Map criteria) {
		return regionalServiceFind(criteria, "idRegionalDestino");
	}	
	
	private List regionalServiceFind(Map criteria, String idRegionalCustom) {
		List<Regional> list = regionalService.find(criteria);
		List<Map> regionalListAux = new ArrayList();

		for (Regional regional : list) {
			Map regionalAux = new HashMap();

			regionalAux.put(idRegionalCustom, regional.getIdRegional());
			regionalAux.put("dsRegional", regional.getDsRegional());
			regionalAux.put("sgRegional", regional.getSgRegional());
			regionalAux.put("dtVigenciaInicial", regional.getDtVigenciaInicial());
			regionalAux.put("dtVigenciaFinal", regional.getDtVigenciaFinal());
			regionalAux.put("siglaDescricao", regional.getSiglaDescricao());						
			
			regionalListAux.add(regionalAux);			
		}
		return regionalListAux;
	}
	
	public List findComboTipoMeioTransporte(Map criteria) {
		List<TipoMeioTransporte> tipoMeioTransporteList = tipoMeioTransporteService.find(criteria);
		List tipoMeioTransporteListAux = new ArrayList();
		
		for (TipoMeioTransporte tipoMeioTransporte : tipoMeioTransporteList) {
			TipoMeioTransporte tipoMeioTransporteAux = new TipoMeioTransporte();
			
			tipoMeioTransporteAux.setIdTipoMeioTransporte(tipoMeioTransporte.getIdTipoMeioTransporte());
			tipoMeioTransporteAux.setDsTipoMeioTransporte(tipoMeioTransporte.getDsTipoMeioTransporte());
			
			tipoMeioTransporteListAux.add(tipoMeioTransporteAux);
		}
		return tipoMeioTransporteListAux;
	}

	public List findLookupFilial(Map criteria) {
		List list = filialService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		Filial filial = (Filial)iter.next();
    		Map map = new HashMap();

       		map.put("idFilial", filial.getIdFilial());    		
    		map.put("sgFilial", filial.getSgFilial());
    		map.put("nmFantasia", filial.getPessoa().getNmFantasia());
    		retorno.add(map);
    	}
    	return retorno;
	}

    public List findLookupProprietario(Map criteria) {
    	Map mapPessoa = new HashMap();
    	mapPessoa.put("nrIdentificacao", criteria.get("nrIdentificacao"));
    	criteria.put("pessoa", mapPessoa);
    	criteria.remove("nrIdentificacao");
    	List<Proprietario> list = proprietarioService.findLookup(criteria);
    	List listReturn = new ArrayList();
    	for (Proprietario proprietario : list) {
    		Map mapRetorno = new HashMap();
    		mapRetorno.put("idProprietario", proprietario.getIdProprietario());
    		mapRetorno.put("nrIdentificacao", FormatUtils.formatIdentificacao(proprietario.getPessoa()));
    		mapRetorno.put("nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(proprietario.getPessoa()));
    		mapRetorno.put("nmProprietario", proprietario.getPessoa().getNmPessoa());
    		listReturn.add(mapRetorno);
		}
    	
    	return listReturn; 
    }
    
	public List findLookupMeioTransporte(Map criteria) {
		TypedFlatMap tfmCriteria = new TypedFlatMap();
		tfmCriteria.put("idMeioTransporte", criteria.get("idMeioTransporte"));
		tfmCriteria.put("nrIdentificador", criteria.get("nrIdentificador"));
		tfmCriteria.put("nrFrota", criteria.get("nrFrota"));
		tfmCriteria.put("proprietario.idProprietario", criteria.get("idProprietario"));
				
    	List list = meioTransporteService.findLookupWithProprietario(tfmCriteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		TypedFlatMap tfmMeioTransporte = (TypedFlatMap)iter.next();
    		Map map = new HashMap();
    		map.put("idMeioTransporte", tfmMeioTransporte.get("idMeioTransporte"));
    		map.put("nrIdentificador", tfmMeioTransporte.get("nrIdentificador"));
    		map.put("nrFrota", tfmMeioTransporte.get("nrFrota"));
    		map.put("tpVinculo", tfmMeioTransporte.get("tpVinculo.value"));
    		map.put("tpMeioTransporte", tfmMeioTransporte.get("modeloMeioTransporte.tipoMeioTransporte.tpMeioTransporte.value"));
    		map.put("idTipoMeioTransporte", tfmMeioTransporte.get("modeloMeioTransporte.tipoMeioTransporte.idTipoMeioTransporte"));
    		map.put("nrRastreador", tfmMeioTransporte.get("meioTransporteRodoviario.nrRastreador"));
    		retorno.add(map);
    	}
    	return retorno;
    }
	
	public ResultSetPage findPaginatedRotaIdaVolta(TypedFlatMap criteria) {
		criteria = montaCriteria(criteria);

		ResultSetPage rsp = rotaIdaVoltaService.findPaginatedCustom(criteria);

		FilterResultSetPage frsp = new FilterResultSetPage(rsp) {

			public Map filterItem(Object item) {
				RotaIdaVolta riv = (RotaIdaVolta)item;
				TypedFlatMap row = new TypedFlatMap();

				row.put("idRota",riv.getRota().getIdRota());
				row.put("nrRota", riv.getNrRota());
				row.put("dsRota",riv.getRota().getDsRota());
				row.put("idRotaIdaVolta",riv.getIdRotaIdaVolta());
				row.put("tpRotaIdaVolta", riv.getTpRotaIdaVolta() != null ? riv.getTpRotaIdaVolta().getDescription() : null);
				row.put("vlFreteKm", riv.getVlFreteKm());
				row.put("vlFreteCarreteiro", riv.getVlFreteCarreteiro());
				row.put("nrDistancia", riv.getNrDistancia());
				row.put("sgMoeda", riv.getMoedaPais().getMoeda().getSgMoeda());
				row.put("dsSimbolo", riv.getMoedaPais().getMoeda().getDsSimbolo());
				row.put("idRotaViagem", riv.getRotaViagem().getIdRotaViagem());
				row.put("idTipoMeioTransporte", riv.getRotaViagem().getTipoMeioTransporte().getIdTipoMeioTransporte());
				TrechoRotaIdaVolta triv = trechoRotaIdaVoltaService.findTrechoByIdRotaAndFilialOrigem(riv.getIdRotaIdaVolta());
				if (triv != null) {
					row.put("hrSaida",triv.getHrSaida());
				}
				RotaViagem rotaViagem = riv.getRotaViagem();
				row.put("dtVigenciaInicial",rotaViagem.getDtVigenciaInicial());
				row.put("dtVigenciaFinal",rotaViagem.getDtVigenciaFinal());
				return row;
			}
		};
		return (ResultSetPage)frsp.doFilter();
	}
	
	public Integer getRowCountRotaIdaVolta(TypedFlatMap criteria) {
		return rotaIdaVoltaService.getRowCountCustom(montaCriteria(criteria));
	}
	
	private TypedFlatMap montaCriteria(TypedFlatMap criteria) {
    	criteria.put("filialOrigem.idFilial", criteria.get("idFilialOrigem"));
    	criteria.put("filialDestino.idFilial", criteria.get("idFilialDestino"));
    	criteria.put("filialIntermediaria.idFilial", criteria.get("idFilialIntegrante"));    	
    	criteria.put("vigentes", criteria.get("vigentes"));    	
    	criteria.put("regionalOrigem.idRegional", criteria.get("idRegionalOrigem"));
    	criteria.put("regionalDestino.idRegional", criteria.get("idRegionalDestino"));
    	criteria.put("tpRota", criteria.get("tpRota"));
    	criteria.put("proprietario.idProprietario", criteria.get("idProprietario"));
    	
    	criteria.put("tipoMeioTransporte.idTipoMeioTransporte", criteria.get("idTipoMeioTransporte"));
    	criteria.put("meioTransporte.idMeioTransporte", criteria.get("idMeioTransporte"));		
		
		return criteria;
	}	
}
