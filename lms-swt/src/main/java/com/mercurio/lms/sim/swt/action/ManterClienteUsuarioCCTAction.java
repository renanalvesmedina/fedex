package com.mercurio.lms.sim.swt.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.PaginatedQuery;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.UsuarioLMS;
import com.mercurio.lms.configuracoes.model.service.UsuarioService;
import com.mercurio.lms.sim.model.UsuarioResponsavelClienteCCT;
import com.mercurio.lms.sim.model.service.ClienteUsuarioCCTService;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.service.ClienteService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.sim.swt.manterClienteUsuarioCCTAction"
 */
public class ManterClienteUsuarioCCTAction extends CrudAction{
	
	private ClienteService clienteService;
	private UsuarioService usuarioService; 
	private ClienteUsuarioCCTService clienteUsuarioCCTService;
	
	public UsuarioService getUsuarioService() {
		return usuarioService;
	}

	public void setUsuarioService(UsuarioService usuarioService) {
		this.usuarioService = usuarioService;
	}

	public ClienteService getClienteService() {
		return clienteService;
	}
	
	public ClienteUsuarioCCTService getClienteUsuarioCCTService() {
		return clienteUsuarioCCTService;
	}

	public void setClienteUsuarioCCTService(
			ClienteUsuarioCCTService clienteUsuarioCCTService) {
		this.clienteUsuarioCCTService = clienteUsuarioCCTService;
	}

	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}

	public void setService(ClienteUsuarioCCTService clienteUsuarioCCTService) {
		this.defaultService = clienteUsuarioCCTService;
	}
	
	public ClienteUsuarioCCTService getService() {
		return (ClienteUsuarioCCTService) this.defaultService;
	}

	@SuppressWarnings({ "rawtypes", "unchecked" })
	public List<Map<String, Object>> findLookupCliente(Map criteria) {
		List<Map<String, Object>> clientes = clienteService.findClienteByNrIdentificacao((String) criteria.get("nrIdentificacao"));
		if (clientes != null) {
			for(Map cliente : clientes) {
				cliente.remove("tpCliente");
				Map pessoa = (Map) cliente.remove("pessoa");
				if (pessoa != null) {
					cliente.put("nmPessoa", pessoa.get("nmPessoa"));
					cliente.put("nrIdentificacao", pessoa.remove("nrIdentificacaoFormatado"));
				}
			}
		}
		return clientes;
	}
	
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@Override
	public ResultSetPage<Map<String, Object>> findPaginated(Map criteria) {
		ResultSetPage rsp = getClienteUsuarioCCTService().findPaginated(new PaginatedQuery(criteria));
    	
    	List<HashMap<String, Object>> list = rsp.getList();		
		List<Map<String, Object>> retorno = new ArrayList<Map<String,Object>>(list.size());
		
		for(Map<String, Object> hash : list){	
			Map<String,Object> map = new HashMap<String, Object>();
			map.put("idUsuarioResponsavelClienteCCT", hash.get("idUsuarioResponsavelClienteCCT"));
			map.put("idCliente", hash.get("idCliente"));
			map.put("idUsuario", hash.get("idUsuario"));
			map.put("nmPessoa", hash.get("nmCliente"));
			map.put("nmUsuario", hash.get("nmUsuario"));
			retorno.add(map);	
		}
		rsp.setList(retorno);
		return rsp;	
	}
	
	public Integer getRowCount(Map filtros) {		
		return clienteUsuarioCCTService.getRowCount(new TypedFlatMap(filtros));
	}	
	
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
		clienteUsuarioCCTService.removeByIds(ids);
    }
	
	public void removeById(java.lang.Long id) {
		clienteUsuarioCCTService.removeById(id);
    }
	
	public Map store(Map map) {
		UsuarioResponsavelClienteCCT usuarioResponsavelClienteCCT = new UsuarioResponsavelClienteCCT();
		usuarioResponsavelClienteCCT.setIdUsuarioResponsavelClienteCCT((Long) map.get("idUsuarioResponsavelClienteCCT"));
		Cliente cliente = new Cliente();
		cliente.setIdCliente((Long) map.get("idCliente"));
		usuarioResponsavelClienteCCT.setCliente(cliente);
		UsuarioLMS usuario = new UsuarioLMS();
		usuario.setIdUsuario((Long) map.get("idUsuario"));
		usuarioResponsavelClienteCCT.setUsuario(usuario);
		
		getClienteUsuarioCCTService().store(usuarioResponsavelClienteCCT);
		
		Map retorno = new HashMap();
		retorno = findById(usuarioResponsavelClienteCCT.getIdUsuarioResponsavelClienteCCT());
    	return retorno;
    }
	
	@SuppressWarnings({ "rawtypes", "unchecked", "deprecation" })
	public Map findById(java.lang.Long id) {
		String[] fetches = new String[] { "usuario",
				"usuario.usuarioADSM", "cliente",
				"cliente.pessoa"};
		
		UsuarioResponsavelClienteCCT usuarioResponsavelClienteCCT = getClienteUsuarioCCTService().findById(id, fetches);
    	
    	Map retorno = new HashMap();
    	retorno.put("idUsuarioResponsavelClienteCCT", usuarioResponsavelClienteCCT.getIdUsuarioResponsavelClienteCCT());
    	retorno.put("idCliente", usuarioResponsavelClienteCCT.getCliente().getIdCliente());
    	retorno.put("idUsuario", usuarioResponsavelClienteCCT.getUsuario().getIdUsuario());
    	retorno.put("nmPessoa", usuarioResponsavelClienteCCT.getCliente().getPessoa().getNmPessoa());
    	retorno.put("nmUsuario", usuarioResponsavelClienteCCT.getUsuario().getUsuarioADSM().getNmUsuario());
    	retorno.put("nrMatricula", usuarioResponsavelClienteCCT.getUsuario().getUsuarioADSM().getNrMatricula());
    	retorno.put("nrIdentificacao", usuarioResponsavelClienteCCT.getCliente().getPessoa().getNrIdentificacaoFormatado());
    	
    	return retorno;
    }
	
	public List findLookupUsuarioFuncionario(TypedFlatMap criteria) {
		return usuarioService.findLookupUsuarioFuncionario(null,criteria.getString("nrMatricula"),null,null,null,null,true); 
	}
}
