package com.mercurio.lms.sim.swt.action;

import static com.mercurio.lms.util.IntegerUtils.ZERO;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.joda.time.DateTime;
import org.joda.time.YearMonthDay;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.FilterResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.expedicao.model.Conhecimento;
import com.mercurio.lms.expedicao.model.DoctoServico;
import com.mercurio.lms.expedicao.model.NotaFiscalConhecimento;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.model.service.DoctoServicoService;
import com.mercurio.lms.expedicao.model.service.NotaFiscalConhecimentoService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.sim.model.RegistroPriorizacaoDocto;
import com.mercurio.lms.sim.model.RegistroPriorizacaoEmbarq;
import com.mercurio.lms.sim.model.service.RegistroPriorizacaoDoctoService;
import com.mercurio.lms.sim.model.service.RegistroPriorizacaoEmbarqService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.service.ClienteService;

/** 
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.sim.swt.registrarSolicitacoesEmbarqueAction"
 */

public class RegistrarSolicitacoesEmbarqueAction extends CrudAction {
	private DoctoServicoService doctoServicoService;
	private RegistroPriorizacaoDoctoService registroPriorizacaoDoctoService;
	private FilialService filialService;
	private ClienteService clienteService;
	private ConfiguracoesFacade configuracoesFacade;
	private NotaFiscalConhecimentoService notaFiscalConhecimentoService;
	private RegistroPriorizacaoEmbarqService registroPriorizacaoEmbarqService;
	private ConhecimentoService conhecimentoService;

    public void removeById(java.lang.Long id) {
        registroPriorizacaoEmbarqService.removeById(id);
    }

	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	registroPriorizacaoEmbarqService.removeByIds(ids);
    }

    public Map<String, Object> findById(java.lang.Long id) {
    	RegistroPriorizacaoEmbarq bean = registroPriorizacaoEmbarqService.findById(id);
    	Map<String, Object> result = new HashMap<String, Object>();
    	
    	Filial filial = bean.getFilial();
    	result.put("idFilial", filial.getIdFilial());
    	result.put("sgFilial", filial.getSgFilial());
    	result.put("nmFantasia", filial.getPessoa().getNmFantasia());
    	
    	if (bean.getRemetente() != null) {
	    	Cliente remetente = bean.getRemetente();
	    	result.put("idClienteRemetente", remetente.getIdCliente());
	    	result.put("nrIdentificacaoRemetente", FormatUtils.formatIdentificacao(remetente.getPessoa()));
	    	result.put("nmPessoaRemetente", remetente.getPessoa().getNmPessoa());
    	}
    	
    	if (bean.getDestinatario() != null) {
	    	Cliente destinatario = bean.getDestinatario();
	    	result.put("idClienteDestinatario", destinatario.getIdCliente());
	    	result.put("nrIdentificacaoDestinatario", FormatUtils.formatIdentificacao(destinatario.getPessoa()));
	    	result.put("nmPessoaDestinatario", destinatario.getPessoa().getNmPessoa());
    	}
    	
    	result.put("nmSolicitante", bean.getNmSolicitante());
    	result.put("obPriorizacao", bean.getObPriorizacao());
    	result.put("dhRegistroEmbarque", bean.getDhRegistroEmbarque());
    	result.put("dhRegistro", bean.getDhRegistro());
    	result.put("dhCancelamento", bean.getDhCancelamento());
    	result.put("obCancelamanto", bean.getObCancelamanto());
    	result.put("idRegistroPriorizacaoEmbarq", bean.getIdRegistroPriorizacaoEmbarq());
    	
    	Usuario criacao = bean.getUsuarioCriacao();
    	result.put("idUsuarioCriacao", criacao.getIdUsuario());
    	result.put("nmUsuarioCriacao", criacao.getNmUsuario());
  
    	if (Hibernate.isInitialized(bean.getUsuarioCancelamento()) && bean.getUsuarioCancelamento() != null) {
    		Usuario cancelamento = bean.getUsuarioCancelamento();
    		result.put("idUsuarioCancelamento", cancelamento.getIdUsuario());
        	result.put("nmUsuarioCancelamento", cancelamento.getNmUsuario());
    	}
    	List<RegistroPriorizacaoDocto> doctosDb = bean.getRegistroPriorizacaoDocto();
    	List<Map<String, Object>> doctos = new ArrayList<Map<String, Object>>();
    	for (RegistroPriorizacaoDocto doctoPriorizacao : doctosDb) {
    		Map<String, Object> mapDoctoServico = new HashMap<String, Object>();
    		DoctoServico doctoServico = doctoServicoService.findByIdJoinFilial(doctoPriorizacao.getDoctoServico().getIdDoctoServico());
    		Hibernate.initialize(doctoServico);
    		Filial filialO = doctoServico.getFilialByIdFilialOrigem();
    		Hibernate.initialize(filialO);
    		DomainValue tpDoctoServico = doctoServico.getTpDocumentoServico();
			mapDoctoServico.put("tpDocumentoServicoValue", tpDoctoServico.getValue());
    		mapDoctoServico.put("tpDocumentoServicoDescription", tpDoctoServico.getDescription());
    		mapDoctoServico.put("tpDocumentoServico", tpDoctoServico.getValue());
			mapDoctoServico.put("idFilialOrigem", filialO.getIdFilial());
    		mapDoctoServico.put("sgFilialOrigem", filialO.getSgFilial());
    		mapDoctoServico.put("nmFantasiaOrigem", filialO.getPessoa().getNmFantasia());
    		mapDoctoServico.put("idDoctoServico", doctoServico.getIdDoctoServico());
    		mapDoctoServico.put("nrDoctoServico", doctoServico.getNrDoctoServico());
    		
    		StringBuilder nmDoctoServico = new StringBuilder()
    		.append(doctoServico.getTpDocumentoServico().getDescription().getValue()).append(" - ")
    		.append(filialO.getSgFilial()).append(" - ")
    		.append(FormatUtils.fillNumberWithZero(doctoServico.getNrDoctoServico().toString(), 8));
    		
    		mapDoctoServico.put("nmDoctoServico",  nmDoctoServico.toString());
    		doctos.add(mapDoctoServico);
    	}
    	result.put("registroPriorizacaoDocto", doctos);
    	return result;   
    }

    public void validateAddDoctoServico(Map parameters) {
    	Long idDoctoServico = (Long) parameters.get("idDoctoServico");
    	Long idPriorizaoEmbarque = (Long) parameters.get("id");
    	
    	if (registroPriorizacaoDoctoService.findByIdDocto(idDoctoServico, Boolean.FALSE, idPriorizaoEmbarque).size() > 0)
    		throw new BusinessException("LMS-10032");
    	if (registroPriorizacaoEmbarqService.getRowCountDoctoServicoEntregues(idDoctoServico).intValue() > 0)
    		throw new BusinessException("LMS-10030");
    	if (registroPriorizacaoEmbarqService.getRowCountDoctoServicoManifesto(idDoctoServico).intValue() > 0)
    		throw new BusinessException("LMS-10029");    	
    }

    public List<Map<String, Object>> findNotasFiscais(Map<String, Object> parameters) {
    	List<Map<String, Object>> registroPriorizacaoDocto = (List<Map<String, Object>>) parameters.get("registroPriorizacaoDocto");
    	if (registroPriorizacaoDocto != null && !registroPriorizacaoDocto.isEmpty()) {
    		Long[] ids = new Long[registroPriorizacaoDocto.size()];
    		for (int i = 0; i < registroPriorizacaoDocto.size(); i++) {
    			Map<String, Object> registro = registroPriorizacaoDocto.get(i);
    			ids[i] = (Long) registro.get("idDoctoServico");
    		}
    		return findNotasFiscaisByConhecimentos(ids);
    	}
    	return null;
    }
    
    public Map<String, Object> findConhecimentosNotasFiscais(Long idNotaFiscal) {
    	Map<String, Object> result = new HashMap<String, Object>();
    	Conhecimento conhecimento = conhecimentoService.findConhecimentoByNotaFiscal(idNotaFiscal);
    	if (conhecimento != null) {
    		result.put("idDoctoServico", conhecimento.getIdDoctoServico());
    		result.put("nrDoctoServico", conhecimento.getNrDoctoServico());
    		result.put("sgFilialOrigem", conhecimento.getFilialOrigem().getSgFilial());
    		result.put("idFilialOrigem", conhecimento.getFilialOrigem().getIdFilial());
    		result.put("dvConhecimento", conhecimento.getDvConhecimento());
    		Long[] ids = new Long[] {conhecimento.getIdDoctoServico()};
    		result.put("notasFiscais", findNotasFiscaisByConhecimentos(ids));
    	}
    	return result;
    }
    
    private List<Map<String, Object>> findNotasFiscaisByConhecimentos(Long[] ids) {
    	List<NotaFiscalConhecimento> nfcs = registroPriorizacaoEmbarqService.findNotasFiscaisByIdDocto(ids);
		if (nfcs != null && !nfcs.isEmpty()) {
			List<Map<String, Object>> result = new ArrayList<Map<String,Object>>();
    		for (NotaFiscalConhecimento nfc : nfcs) {
				Map<String, Object> mapNfc = new HashMap<String, Object>();
				mapNfc.put("idDoctoServico", nfc.getConhecimento().getIdDoctoServico());
				mapNfc.put("nrNotaFiscal", nfc.getNrNotaFiscal());
				result.add(mapNfc);
			}
    		return result;
		}
		return null;
    }

    public Map<String, Object> cancelaRegistro(Map<String, Object> parameters) {
    	registroPriorizacaoEmbarqService.cancelaRegistro((Long) parameters.get("idRegistroPriorizacaoEmbarq"), (String) parameters.get("obCancelamanto"));
    	Map<String, Object> result = new HashMap<String, Object>();
    	result.put("dhCancelamento", JTDateTimeUtils.getDataHoraAtual());
    	result.put("usuarioCancelamento.idUsuario", SessionUtils.getUsuarioLogado().getIdUsuario());
    	result.put("usuarioCancelamento.nmUsuario", SessionUtils.getUsuarioLogado().getNmUsuario());
    	return result;
    }

    public List<Map<String, Object>> findLookupFilial(Map criteria) {
		List<Filial> filiais = filialService.findLookup(criteria);
		if (filiais != null) {
			List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();
			for (Filial filial : filiais) {
				Map<String, Object> mapFilial = new HashMap<String, Object>();
				mapFilial.put("sgFilial", filial.getSgFilial());
				mapFilial.put("idFilial", filial.getIdFilial());
				mapFilial.put("nmFantasia", filial.getPessoa().getNmFantasia());
				result.add(mapFilial);
			}
			return result;
		}
		return null;
    }

    public List findLookupCliente(Map criteria) {
		List<Map> clientes = clienteService.findClienteByNrIdentificacao((String) criteria.get("nrIdentificacao"));
		if (clientes != null && !clientes.isEmpty()) {
			for(Map cliente : clientes) {
				cliente.remove("tpCliente");
				
				Map pessoa = (Map) cliente.remove("pessoa");
				if (pessoa != null) {
					cliente.put("nmPessoa", pessoa.get("nmPessoa"));
					cliente.put("nrIdentificacao", pessoa.remove("nrIdentificacaoFormatado"));
				}
			}
		}
		
		return clientes;
	}
    
    public ResultSetPage findPaginated(Map criteria) {
    	FilterResultSetPage filter = new FilterResultSetPage(registroPriorizacaoEmbarqService.findPaginated(prepareCriteria(criteria))) {
    		public Map filterItem(Object item) {
    			RegistroPriorizacaoEmbarq registro = (RegistroPriorizacaoEmbarq) item;
    			Cliente remetente = registro.getRemetente();
				Cliente destinatario = registro.getDestinatario();
				
				Map<String, Object> result = new HashMap<String, Object>();
				result.put("dhRegistro", registro.getDhRegistro());
    			result.put("idRegistroPriorizacaoEmbarq", registro.getIdRegistroPriorizacaoEmbarq());
    			if (remetente != null) {
    				Pessoa pessoaRemetente = remetente.getPessoa();
    				result.put("tpIdentificacaoRemetente", pessoaRemetente.getTpIdentificacao());
        			result.put("nrIdentificacaoFormatadoRemetente", FormatUtils.formatIdentificacao(pessoaRemetente));
        			result.put("nmPessoaRemetente", pessoaRemetente.getNmPessoa());
    			}
    			if (destinatario != null) {
					Pessoa pessoaDestinatario = destinatario.getPessoa();
					result.put("tpIdentificacaoDestinatario", pessoaDestinatario.getTpIdentificacao());
	    			result.put("nrIdentificacaoFormatadoDestinatario", FormatUtils.formatIdentificacao(pessoaDestinatario));
	    			result.put("nmPessoaDestinatario", pessoaDestinatario.getNmPessoa());
    			}
    			
    			if (registro.getDhCancelamento() != null) {
    				result.put("tpStatus", configuracoesFacade.getMensagem("cancelada"));
    			} else {
    				Integer faltando = registroPriorizacaoEmbarqService.getRowCountDoctoServiceFaltaEntreguar(registro.getIdRegistroPriorizacaoEmbarq());
    				if (faltando.equals(ZERO)) {
    					result.put("tpStatus", configuracoesFacade.getMensagem("entregue"));
    				} else {
    					result.put("tpStatus", configuracoesFacade.getMensagem("aberta"));
    				}
    			}
    			return result;
    		}
    	};
    	return (ResultSetPage) filter.doFilter();
    }

    public Integer getRowCount(Map criteria) {
    	return registroPriorizacaoEmbarqService.getRowCount(prepareCriteria(criteria));
    }

    public List findLookup(TypedFlatMap criteria) {
    	return registroPriorizacaoEmbarqService.findLookup(criteria);
    }

    public Map<String, YearMonthDay> findDataSession() {
    	Map<String, YearMonthDay> result = new HashMap<String, YearMonthDay>();
    	result.put("dtRegistroInicial", JTDateTimeUtils.getDataAtual().minusDays(31));
    	result.put("dtRegistroFinal", JTDateTimeUtils.getDataAtual());
    	return result;
    }

    public Map<String, Long> store(Map<String, Object> parameters) {
    	RegistroPriorizacaoEmbarq bean = new RegistroPriorizacaoEmbarq();
    	
    	Filial filial = new Filial();
    	filial.setIdFilial((Long) parameters.get("idFilial"));
    	
    	Usuario usuario = new Usuario();
    	usuario.setIdUsuario((Long) parameters.get("idUsuarioCriacao"));
    	
    	if (parameters.get("idClienteRemetente") != null) {
    		Cliente remetente = new Cliente();
    		remetente.setIdCliente((Long) parameters.get("idClienteRemetente"));
    		bean.setRemetente(remetente);
    	}
    	if (parameters.get("idClienteDestinatario") != null) {
    		Cliente destinatario = new Cliente();
    		destinatario.setIdCliente((Long) parameters.get("idClienteDestinatario"));
    		bean.setDestinatario(destinatario);
    	}
    	
    	bean.setIdRegistroPriorizacaoEmbarq((Long) parameters.get("idRegistroPriorizacaoEmbarq"));
    	bean.setFilial(filial);
    	bean.setUsuarioCriacao(usuario);
    	bean.setNmSolicitante((String) parameters.get("nmSolicitante"));
    	bean.setObPriorizacao((String) parameters.get("obPriorizacao"));
    	bean.setDhRegistroEmbarque((DateTime) parameters.get("dhRegistroEmbarque"));
    	    	
    	List<Map<String, Object>> doctosView = (List<Map<String, Object>>) parameters.get("registroPriorizacaoDocto");
    	if (doctosView != null && !doctosView.isEmpty()) {
    		List<RegistroPriorizacaoDocto> doctos = new ArrayList<RegistroPriorizacaoDocto>();
    		for (Map<String, Object> mapDocto : doctosView) {
    			DoctoServico doctoServico = new DoctoServico();
    			doctoServico.setIdDoctoServico((Long) mapDocto.get("idDoctoServico"));
    			
    			RegistroPriorizacaoDocto registroPriorizacaoDocto = new RegistroPriorizacaoDocto();
    			registroPriorizacaoDocto.setDoctoServico(doctoServico);
    			registroPriorizacaoDocto.setRegistroPriorizacaoEmbarq(bean);
    			doctos.add(registroPriorizacaoDocto);
    		}
    		bean.setRegistroPriorizacaoDocto(doctos);
    	}
    	
    	if (bean.getRemetente() == null && bean.getDestinatario() == null)
    		throw new BusinessException("LMS-10057");
	
    	registroPriorizacaoEmbarqService.store(bean);
    	
    	Map<String, Long> result = new HashMap<String, Long>();
    	result.put("idRegistroPriorizacaoEmbarq", bean.getIdRegistroPriorizacaoEmbarq());
    	return result;
    }

	public List find(Map criteria) {
		return clienteService.find(criteria);
	}

	public List findLookupNotaFiscalCliente(TypedFlatMap criteria) {
		if(criteria.getLong("remetente.idCliente") == null) {
			throw new BusinessException("LMS-09111");
		}
		return notaFiscalConhecimentoService.findLookupNotaFiscalCliente(criteria); 
	}
	
	/*
	 * METODOS PRIVADOS
	 */
	private TypedFlatMap prepareCriteria(Map criteria) {
		TypedFlatMap result = new TypedFlatMap();
		result.put("_currentPage", criteria.get("_currentPage"));
		result.put("_pageSize", criteria.get("_pageSize"));
		result.put("_order", criteria.get("_order"));
		
		result.put("filial.idFilial", criteria.get("idFilialSolicitante"));
		result.put("remetente.idCliente", criteria.get("idClienteRemetente"));
		result.put("destinatario.idCliente", criteria.get("idClienteDestinatario"));
		result.put("dtRegistroInicial", criteria.get("dtRegistroInicial"));
		result.put("dtRegistroFinal", criteria.get("dtRegistroFinal"));
		result.put("dhRegistroEmbarqueInicial", criteria.get("dhRegistroEmbarqueInicial"));
		result.put("dhRegistroEmbarqueFinal", criteria.get("dhRegistroEmbarqueFinal"));
		result.put("idDoctoServico", criteria.get("idDoctoServico"));
		result.put("doctoServico.filialByIdFilialOrigem.idFilial", criteria.get("idFilialOrigem"));
		result.put("doctoServico.tpDocumentoServico", criteria.get("tpDocumentoServico"));
		result.put("notaFiscalConhecimento.nrNotaFiscal", criteria.get("nrNotaFiscal"));
		result.put("isSomenteEntregasNaoEfetuadas", criteria.get("isSomenteEntregasNaoEfetuadas"));
		return result;
	}

	/*
	 * GETTERS E SETTER
	 */
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}
	public void setRegistroPriorizacaoDoctoService(RegistroPriorizacaoDoctoService registroPriorizacaoDoctoService) {
		this.registroPriorizacaoDoctoService = registroPriorizacaoDoctoService;
	}
	public void setDoctoServicoService(DoctoServicoService doctoServicoService) {
		this.doctoServicoService = doctoServicoService;
	}
	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}
	public void setNotaFiscalConhecimentoService(NotaFiscalConhecimentoService notaFiscalConhecimentoService) {
		this.notaFiscalConhecimentoService = notaFiscalConhecimentoService;
	}
	public void setRegistroPriorizacaoEmbarqService(RegistroPriorizacaoEmbarqService registroPriorizacaoEmbarqService) {
		this.registroPriorizacaoEmbarqService = registroPriorizacaoEmbarqService;
	}

	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
	}
}
