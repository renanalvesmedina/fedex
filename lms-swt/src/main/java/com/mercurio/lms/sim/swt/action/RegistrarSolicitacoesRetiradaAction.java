package com.mercurio.lms.sim.swt.action;

import java.io.Serializable;
import java.text.Collator;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.springframework.context.i18n.LocaleContextHolder;

import com.mercurio.adsm.core.util.ReflectionUtils;
import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.masterdetail.ItemList;
import com.mercurio.adsm.framework.model.masterdetail.ItemListConfig;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailAction;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailFactory;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailKey;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntry;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntryConfig;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.util.FilterResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.configuracoes.model.service.UsuarioService;
import com.mercurio.lms.entrega.model.service.ManifestoEntregaService;
import com.mercurio.lms.entrega.model.service.OcorrenciaEntregaService;
import com.mercurio.lms.entrega.model.service.ReciboReembolsoService;
import com.mercurio.lms.expedicao.model.Conhecimento;
import com.mercurio.lms.expedicao.model.DoctoServico;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.model.service.CtoInternacionalService;
import com.mercurio.lms.expedicao.model.service.DoctoServicoService;
import com.mercurio.lms.expedicao.model.service.NotaFiscalConhecimentoService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.pendencia.model.service.MdaService;
import com.mercurio.lms.sim.ConstantesSim;
import com.mercurio.lms.sim.model.DocumentoServicoRetirada;
import com.mercurio.lms.sim.model.SolicitacaoRetirada;
import com.mercurio.lms.sim.model.service.SolicitacaoRetiradaService;
import com.mercurio.lms.util.AliasToTypedFlatMapResultTransformer;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.service.ClienteService;
import com.mercurio.lms.workflow.model.service.WorkflowPendenciaService;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;


/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.sim.swt.registrarSolicitacoesRetiradaAction"
 */

public class RegistrarSolicitacoesRetiradaAction extends MasterDetailAction {
	
	private FilialService filialService;
	private ClienteService clienteService;
	private DomainValueService domainValueService;
	private ReciboReembolsoService reciboReembolsoService;
	private ConhecimentoService conhecimentoService;
	private CtoInternacionalService ctoInternacionalService;
	private MdaService mdaService;
	private UsuarioService usuarioService;
	private ManifestoEntregaService manifestoEntregaService;
	private OcorrenciaEntregaService ocorrenciaEntregaService;	
	private NotaFiscalConhecimentoService notaFiscalConhecimentoService;
	private WorkflowPendenciaService pendenciaService;
	private DoctoServicoService doctoServicoService;
	private SolicitacaoRetiradaService solicitacaoRetiradaService;
	
	
	public void setSolicitacaoRetiradaService(
			SolicitacaoRetiradaService solicitacaoRetiradaService) {
		this.solicitacaoRetiradaService = solicitacaoRetiradaService;
	}

	/**
	 * Salva registro pai e filhos
	 * @param parameters
	 * @return
	 */
	public TypedFlatMap store(TypedFlatMap parameters) {
		MasterEntry entry = getMasterFromSession(parameters.getLong("idSolicitacaoRetirada"), true);
		SolicitacaoRetirada sr = (SolicitacaoRetirada)entry.getMaster();
		
		if (parameters.getLong("destinatario.idCliente") == null
		    && parameters.getLong("consignatario.idCliente") == null){
			throw new BusinessException("LMS-10022");
		}
		
		ItemList list = getItemsFromSession(entry, "doc");
		if (!list.hasItems()){
			throw new BusinessException("LMS-10023");
		}
				
		Long idFilialRetirada = parameters.getLong("filialRetirada.idFilial");
		Long idFilial = parameters.getLong("filial.idFilial");
		
		validateFiliais(idFilialRetirada, idFilial);
		validateDoctoServicoParaInclusao(sr.getIdSolicitacaoRetirada(), (list.iterator(sr.getIdSolicitacaoRetirada(),getMasterConfig().getItemListConfig("doc"))));
				
		sr.setIdSolicitacaoRetirada(parameters.getLong("idSolicitacaoRetirada"));
		sr.setNrSolicitacaoRetirada(parameters.getLong("nrSolicitacaoRetirada"));
		sr.setTpRegistroLiberacao(new DomainValue(parameters.getString("tpRegistroLiberacao")));		
		sr.setDsFuncaoResponsavelAutoriza(parameters.getString("dsFuncaoResponsavelAutoriza"));
		sr.setNrTelefoneAutorizador(parameters.getString("nrTelefoneAutorizador"));
		sr.setNrDDDAutorizador(parameters.getString("nrDDDAutorizador"));
		sr.setTpSituacao(new DomainValue(parameters.getString("tpSituacao")));
		sr.setNmRetirante(parameters.getString("nmRetirante"));
		sr.setTpIdentificacao(new DomainValue(parameters.getString("tpIdentificacao")));
		sr.setNrCnpj(Long.valueOf(FormatUtils.filterNumber(parameters.getString("nrIdentificacao"))));
		sr.setNrRg(parameters.getString("nrRg"));
		sr.setNrPlaca(parameters.getString("nrPlaca"));
		sr.setNrPlacaSemiReboque(parameters.getString("nrPlacaSemiReboque"));
		sr.setDhPrevistaRetirada(parameters.getDateTime("dhPrevistaRetirada"));
		sr.setNrDdd(parameters.getString("nrDdd"));
		sr.setNrTelefone(parameters.getString("nrTelefone"));
				
		Filial filial = new Filial();
		filial.setIdFilial(parameters.getLong("filial.idFilial"));
		sr.setFilial(filial);
		
		if (parameters.getLong("remetente.idCliente") != null) {
			Cliente remetente = new Cliente();
			remetente.setIdCliente(parameters.getLong("remetente.idCliente"));
			sr.setRemetente(remetente);
		} else {
			sr.setRemetente(null);
		}
		
		if (parameters.getLong("destinatario.idCliente") != null){
			Cliente destinatario = new Cliente();
			destinatario.setIdCliente(parameters.getLong("destinatario.idCliente"));
			sr.setDestinatario(destinatario);
		} else {
			sr.setDestinatario(null);
		}
		
		if (parameters.getLong("consignatario.idCliente") != null){
			Cliente consignatario = new Cliente();
			consignatario.setIdCliente(parameters.getLong("consignatario.idCliente"));
			sr.setConsignatario(consignatario);
		} else {
			sr.setConsignatario(null);
		}
		
		Filial filialRetirada = new Filial();
		filialRetirada.setIdFilial(parameters.getLong("filialRetirada.idFilial"));
		filialRetirada.setSgFilial(parameters.getString("filialRetirada.sgFilial"));
		Pessoa pessoaFilial = new Pessoa();
		pessoaFilial.setNmFantasia(parameters.getString("filialRetirada.pessoa.nmFantasia"));		
		filialRetirada.setPessoa(pessoaFilial);
		sr.setFilialRetirada(filialRetirada);
		
		Usuario usuario = new Usuario();
		usuario.setIdUsuario(parameters.getLong("usuarioCriacao.idUsuario"));
		usuario.setNmUsuario(parameters.getString("usuarioCriacao.nmUsuario"));
		sr.setUsuarioCriacao(usuario);
		
		if (parameters.getLong("usuarioAutorizacao.idUsuario") != null){ 
			Usuario usuarioAutorizacao = new Usuario();
			usuarioAutorizacao.setIdUsuario(parameters.getLong("usuarioAutorizacao.idUsuario"));
			sr.setUsuarioAutorizacao(usuarioAutorizacao);
		} else {
			sr.setNmResponsavelAutorizacao(parameters.getString("nmResponsavelAutorizacao"));	
		}
		
		ItemList items = getItemsFromSession(entry, "doc");
		
		sr = (SolicitacaoRetirada)getService().store(sr,items);
    	
		items.resetItemsState();
    	
		updateMasterInSession(entry);
		
		TypedFlatMap retorno = new TypedFlatMap();
		retorno.put("usuarioCriacao.nmUsuario", sr.getUsuarioCriacao().getNmUsuario());
		retorno.put("usuarioCriacao.idUsuario", sr.getUsuarioCriacao().getIdUsuario());		
		retorno.put("dhSolicitacao", sr.getDhSolicitacao());
		retorno.put("idSolicitacaoRetirada", sr.getIdSolicitacaoRetirada());
		retorno.put("nrSolicitacaoRetirada", sr.getNrSolicitacaoRetirada());
		
		return retorno;
	}
	
	private void validateDoctoServicoParaInclusao(Long idSolicitacaoRetirada, Iterator iterator){
		while (iterator.hasNext()){
			
			DocumentoServicoRetirada dsr = (DocumentoServicoRetirada) iterator.next();
			Long idDoctoServico = dsr.getDoctoServico().getIdDoctoServico();
			
			if (getService().validateDoctoServicoInclusao(idSolicitacaoRetirada, idDoctoServico)){
				throw new BusinessException("LMS-10049");
			}		
		}
	}
	
	private void validateFluxoDocumentosServico(String sgFilial, Long idDoctoServico){
					
		String dsFluxo = getService().findFluxoDoctoServico(idDoctoServico);			
		if (dsFluxo != null && !dsFluxo.contains(sgFilial)){
			throw new BusinessException("LMS-10051");
		}
	}
	
	/**
	 * Consulta registro de solicitacao de retirada
	 * @param id
	 * @return
	 */
	public TypedFlatMap findByIdCustom(Long id){
		SolicitacaoRetirada solicitacaoRetirada = this.getService().findById(id);
		putMasterInSession(solicitacaoRetirada);
		
		TypedFlatMap map = new TypedFlatMap();
		
		map.put("idSolicitacaoRetirada", solicitacaoRetirada.getIdSolicitacaoRetirada());
		map.put("nrSolicitacaoRetirada", solicitacaoRetirada.getNrSolicitacaoRetirada());
		map.put("dhPrevistaRetirada", solicitacaoRetirada.getDhPrevistaRetirada());
		map.put("dhSolicitacao", solicitacaoRetirada.getDhSolicitacao());
		
		if (solicitacaoRetirada.getUsuarioAutorizacao() != null)
			map.put("nmResponsavelAutorizacao", solicitacaoRetirada.getUsuarioAutorizacao().getNmUsuario());
		else
			map.put("nmResponsavelAutorizacao", solicitacaoRetirada.getNmResponsavelAutorizacao());
		
		map.put("dsFuncaoResponsavelAutoriza", solicitacaoRetirada.getDsFuncaoResponsavelAutoriza());		
		map.put("nmRetirante", solicitacaoRetirada.getNmRetirante());
		map.put("nrIdentificacao", FormatUtils.formatIdentificacao(solicitacaoRetirada.getTpIdentificacao(), solicitacaoRetirada.getNrCnpj().toString()));
		map.put("nrDdd", solicitacaoRetirada.getNrDdd());
		map.put("nrPlaca", solicitacaoRetirada.getNrPlaca());
		map.put("nrPlacaSemiReboque", solicitacaoRetirada.getNrPlacaSemiReboque());
		map.put("nrRg", solicitacaoRetirada.getNrRg());
		map.put("nrTelefone", solicitacaoRetirada.getNrTelefone());
		map.put("nrDDDAutorizador", solicitacaoRetirada.getNrDDDAutorizador());
		map.put("nrTelefoneAutorizador", solicitacaoRetirada.getNrTelefoneAutorizador());
		map.put("nrVersao", solicitacaoRetirada.getVersao());
		map.put("tpIdentificacao", solicitacaoRetirada.getTpIdentificacao().getValue());
		map.put("tpSituacao", solicitacaoRetirada.getTpSituacao().getValue());
		map.put("tpRegistroLiberacao", solicitacaoRetirada.getTpRegistroLiberacao().getValue());
		
		Cliente consignatario = solicitacaoRetirada.getConsignatario();
		if (consignatario != null){
			map.put("consignatario.idCliente", consignatario.getIdCliente());
			map.put("consignatario.pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(consignatario.getPessoa().getTpIdentificacao(), consignatario.getPessoa().getNrIdentificacao()));
			map.put("consignatario.pessoa.nrIdentificacao", consignatario.getPessoa().getNrIdentificacao());
			map.put("consignatario.pessoa.nmPessoa", consignatario.getPessoa().getNmPessoa());
		}
		
		Cliente destinatario = solicitacaoRetirada.getDestinatario();
		if (destinatario != null){
			map.put("destinatario.idCliente", destinatario.getIdCliente());
			map.put("destinatario.pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(destinatario.getPessoa().getTpIdentificacao(), destinatario.getPessoa().getNrIdentificacao()));
			map.put("destinatario.pessoa.nrIdentificacao", destinatario.getPessoa().getNrIdentificacao());
			map.put("destinatario.pessoa.nmPessoa", destinatario.getPessoa().getNmPessoa());
		}
		
		Cliente remetente = solicitacaoRetirada.getRemetente();
		if (remetente != null){
			map.put("remetente.idCliente", remetente.getIdCliente());
			map.put("remetente.pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(remetente.getPessoa().getTpIdentificacao(), remetente.getPessoa().getNrIdentificacao()));
			map.put("remetente.pessoa.nrIdentificacao", remetente.getPessoa().getNrIdentificacao());
			map.put("remetente.pessoa.nmPessoa", remetente.getPessoa().getNmPessoa());
		}
		
		Filial filial = solicitacaoRetirada.getFilial();
		map.put("filial.idFilial", filial.getIdFilial());
		map.put("filial.sgFilial", filial.getSgFilial());
		map.put("filial.pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
		
		Filial filialRetirada = solicitacaoRetirada.getFilialRetirada();
		map.put("filialRetirada.idFilial", filialRetirada.getIdFilial());
		map.put("filialRetirada.sgFilial", filialRetirada.getSgFilial());
		map.put("filialRetirada.pessoa.nmFantasia", filialRetirada.getPessoa().getNmFantasia());
		
		Usuario usuario = solicitacaoRetirada.getUsuarioAutorizacao();
		if (usuario != null) {
			map.put("usuarioAutorizacao.idUsuario", usuario.getIdUsuario());
			map.put("usuarioAutorizacao.nrMatricula", usuario.getNrMatricula());
			map.put("usuarioAutorizacao.nmUsuario", usuario.getNmUsuario());
		}
		
		Usuario usuarioCriacao = solicitacaoRetirada.getUsuarioCriacao();
		map.put("usuarioCriacao.idUsuario", usuarioCriacao.getIdUsuario());
		map.put("usuarioCriacao.nmUsuario", usuarioCriacao.getNmUsuario());
		
		List manifestos = manifestoEntregaService.findManifestoByIdSolicitacaoRetirada(solicitacaoRetirada.getIdSolicitacaoRetirada());
		if (!manifestos.isEmpty()){
			Map manifesto = (Map) manifestos.get(0);
						
			map.put("manifestoEntrega.filial.sgFilial", manifesto.get("sgFilialManifestoEntrega"));
			map.put("manifestoEntrega.idManifestoEntrega", manifesto.get("idManifestoEntrega"));
			map.put("manifestoEntrega.nrManifestoEntrega", manifesto.get("nrManifestoEntrega"));			
			map.put("manifesto.filial.sgFilial", manifesto.get("sgFilialManifesto"));
			map.put("manifesto.nrPreManifesto", manifesto.get("nrPreManifesto"));						
			map.put("manifesto.dhEmissaoManifesto", manifesto.get("dhEmissaoManifesto"));
			map.put("manifestoEntrega.dhFechamento", manifesto.get("dhFechamento"));	    	
		}	
						
		return map;
	}
	
    public void removeById(Long id) {
    	getService().removeByIdComplete((Long)id);
		newMaster();
	}
	
	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		getService().removeByIdsComplete(ids);
	}
	
	/**
	 * Salva uma instancia de documento de servico de retirada na sessao
	 * @param parameters
	 * @return
	 */
    public Serializable saveDoc(TypedFlatMap parameters) {    	
    	return saveItemInstance(parameters, "doc");
    }
    
    /**
     * Retorna uma instancia da sessao de documento de servico de retirada
     * @param key
     * @return
     */
    public Object findByIdDoc(MasterDetailKey key) {
    	DocumentoServicoRetirada dsr = (DocumentoServicoRetirada) findItemById(key, "doc");
		TypedFlatMap retorno = new TypedFlatMap();
		
		retorno.put("idDocumentoServicoRetirada", dsr.getIdDocumentoServicoRetirada());
		DoctoServico ds = dsr.getDoctoServico();
		retorno.put("doctoServico.tpDocumentoServico",ds.getTpDocumentoServico().getValue()); 
		retorno.put("doctoServico.filialByIdFilialOrigem.sgFilial", ds.getFilialByIdFilialOrigem().getSgFilial());
		retorno.put("doctoServico.filialByIdFilialOrigem.idFilial", ds.getFilialByIdFilialOrigem().getIdFilial());		
		retorno.put("doctoServico.idDoctoServico", ds.getIdDoctoServico());
		retorno.put("doctoServico.nrDoctoServico", ds.getNrDoctoServico());
		
		return retorno;
	}
    
    /**
     * Valida se o documento de servico pode ser utilizado de acordo com os parametros informados
     * @param map
     * @return
     */
	public TypedFlatMap validateDoctoServico(TypedFlatMap map){
		return verificaDoctoServico(map.getLong("idDoctoServico"), 
									map.getLong("idSolicitacaoRetirada"), 
									map.getLong("idFilial"),
									map.getString("sgFilial"));
	}
	
	/**
	 * Valida se o documento de servico pode ser utilizado de acordo com os parametros informados
	 * @param idDoctoServico
	 * @param idFilialRetirada
	 * @return
	 */
	public TypedFlatMap verificaDoctoServico(Long idDoctoServico, Long idSolicitacaoRetirada, Long idFilialRetirada, String sgFilial){
		    	
    	if (!validaItemNovo(idSolicitacaoRetirada, idDoctoServico)){
    		throw new BusinessException("LMS-10046");
    	}
		
    	validateFluxoDocumentosServico(sgFilial, idDoctoServico);
    	
    	if (ocorrenciaEntregaService.validateDoctoServicoEntregue(idDoctoServico).intValue() > 0){
			throw new BusinessException("LMS-10030");
		}
	
		if (manifestoEntregaService.validateDoctoServicoNaoFinalizado(idDoctoServico)){
			throw new BusinessException("LMS-10029");
		}
		
		Conhecimento conhecimento = getService().findConhecimento(idDoctoServico);
		
		if (conhecimento != null && conhecimento.getTpSituacaoConhecimento().getValue().equals("C"))
			throw new BusinessException("LMS-09042");
		
		if (conhecimento.getLocalizacaoMercadoria() != null && conhecimento.getLocalizacaoMercadoria().getCdLocalizacaoMercadoria().equals(Short.valueOf((short)32)))
			throw new BusinessException("LMS-10056");
		
		Filial filial = doctoServicoService.findFilialDestinoOperacionalById(idDoctoServico);
		if (filial != null){
			if (!filial.getIdFilial().equals(idFilialRetirada)){					
				if (!getService().validateLocalizacaoMercadoria(idDoctoServico)) {
					DoctoServico ds = doctoServicoService.findByIdJoinFilial(idDoctoServico);					
					String nrDoctoServico = FormatUtils.formatSgFilialWithLong(ds.getFilialByIdFilialOrigem().getSgFilial(), ds.getNrDoctoServico());
					
					throw new BusinessException("LMS-10027", new Object[]{nrDoctoServico});
					
				} else if (!getService().validateFilialLocalizacaoMercadoria(idDoctoServico, idFilialRetirada)) {
					throw new BusinessException("LMS-10028");
				}
			}
		}
		
		TypedFlatMap retorno = new TypedFlatMap();
		retorno.put("idDoctoServico", idDoctoServico);
		List nf = notaFiscalConhecimentoService.findNFByIdConhecimento(idDoctoServico);
		if (!nf.isEmpty()){
			retorno.put("nrNotaFiscal", (Integer)nf.get(0));
		}
		
		return retorno;
	}
	
	public void setService(SolicitacaoRetiradaService solicitacaoRetiradaService) {
		this.setMasterService(solicitacaoRetiradaService);
	}

	public SolicitacaoRetiradaService getService() {
		return (SolicitacaoRetiradaService)this.getMasterService();
	}
	
	public TypedFlatMap findFilialUsuarioLogado(){
		Filial f = SessionUtils.getFilialSessao();
		TypedFlatMap retorno = new TypedFlatMap();
		retorno.put("idFilial", f.getIdFilial());
		retorno.put("sgFilial", f.getSgFilial());
		retorno.put("nmFantasia", f.getPessoa().getNmFantasia());
		
		retorno.put("dhSolicitacaoInicial", JTDateTimeUtils.getDataAtual().minusDays(15));
		retorno.put("dhSolicitacaoFinal", JTDateTimeUtils.getDataAtual());
		
		return retorno;
	}
	
	public List findLookupFilial(Map criteria) {
		List<Filial> filiais = filialService.findLookup(criteria);
		if (filiais != null) {
			List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();
			for (Filial filial : filiais) {
				Map<String, Object> mapFilial = new HashMap<String, Object>();
				mapFilial.put("sgFilial", filial.getSgFilial());
				mapFilial.put("idFilial", filial.getIdFilial());
				mapFilial.put("nmFantasia", filial.getPessoa().getNmFantasia());
				result.add(mapFilial);
			}
			return result;
		}
		return null;
	}
	
	public List findLookupManifestoEntrega(TypedFlatMap criteria){
		return manifestoEntregaService.findLookupCustom(criteria); 
	}

	public List findLookupNotaFiscal(Map criteria){
		TypedFlatMap tfmCriteria = new TypedFlatMap();
		tfmCriteria.put("nrNotaFiscal", criteria.get("nrNotaFiscal"));
		return notaFiscalConhecimentoService.findLookupNotaFiscalCliente(tfmCriteria);
	}
	
	public List findLookupCliente(Map criteria){
		
		Map<String, Object> pessoa = new HashMap<String, Object>();
		pessoa.put("nrIdentificacao", criteria.remove("nrIdentificacao"));
		criteria.put("pessoa", pessoa);
		
		List result = clienteService.findLookup(criteria);
		List newResult = new ArrayList();
		if (!result.isEmpty()){
			Cliente cliente = (Cliente) result.get(0);
			
			TypedFlatMap item = new TypedFlatMap();
			item.put("idCliente", cliente.getIdCliente());
			item.put("nrIdentificacao", cliente.getPessoa().getNrIdentificacao());
			item.put("nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(cliente.getPessoa().getTpIdentificacao(), cliente.getPessoa().getNrIdentificacao()));
			item.put("nmPessoa", cliente.getPessoa().getNmPessoa());
			
			newResult.add(item);
		}
		
		return newResult;
	}
	
	/**
	 * Pelo menos uma das filiais deve ser igual a filial do usuario logado
	 * 
	 * @param parametros
	 * @return
	 */
	private void validateFiliais(Long idFilialRetirada, Long idFilial){
				
		long idFilialSessao = SessionUtils.getFilialSessao().getIdFilial().longValue();
			
		if (idFilialRetirada.longValue() != idFilialSessao && 
			idFilial.longValue() != idFilialSessao){
				throw new BusinessException("LMS-10052");
		}	
	}
	
	/**
	 * Consulta da grid principal 
	 * @param criteria
	 * @return
	 */
	public ResultSetPage findPaginatedCustom(Map criteria) {	
		TypedFlatMap tfmCriteria = new TypedFlatMap();

		tfmCriteria.put("filial.idFilial", criteria.get("idFilialSolicitacao"));
		tfmCriteria.put("nrSolicitacaoRetirada", criteria.get("nrSolicitacaoRetirada"));
		tfmCriteria.put("remetente.idCliente", criteria.get("idClienteRemetente"));
		tfmCriteria.put("destinatario.idCliente", criteria.get("idClienteDestinatario"));
		tfmCriteria.put("consignatario.idCliente", criteria.get("idClienteConsignatario"));
		tfmCriteria.put("filialRetirada.idFilial", criteria.get("idFilialRetirada"));
		tfmCriteria.put("filialDestino.idFilial", criteria.get("idFilialDestino"));
		tfmCriteria.put("dhSolicitacaoInicial", criteria.get("dhSolicitacaoInicial"));
		tfmCriteria.put("dhSolicitacaoFinal", criteria.get("dhSolicitacaoFinal"));
		tfmCriteria.put("idDoctoServico", criteria.get("idDoctoServico"));
		tfmCriteria.put("_currentPage", criteria.get("_currentPage"));
		tfmCriteria.put("_pageSize", criteria.get("_pageSize"));
		tfmCriteria.put("_order", criteria.get("_order"));

		return this.getService().findPaginated(tfmCriteria);
	}
	
	public Integer getRowCountCustom(Map criteria){
		TypedFlatMap tfmCriteria = new TypedFlatMap();

		tfmCriteria.put("filial.idFilial", criteria.get("idFilialSolicitacao"));
		tfmCriteria.put("nrSolicitacaoRetirada", criteria.get("nrSolicitacaoRetirada"));
		tfmCriteria.put("remetente.idCliente", criteria.get("idClienteRemetente"));
		tfmCriteria.put("destinatario.idCliente", criteria.get("idClienteDestinatario"));
		tfmCriteria.put("consignatario.idCliente", criteria.get("idClienteConsignatario"));
		tfmCriteria.put("filialRetirada.idFilial", criteria.get("idFilialRetirada"));
		tfmCriteria.put("filialDestino.idFilial", criteria.get("idFilialDestino"));
		tfmCriteria.put("dhSolicitacaoInicial", criteria.get("dhSolicitacaoInicial"));
		tfmCriteria.put("dhSolicitacaoFinal", criteria.get("dhSolicitacaoFinal"));
		tfmCriteria.put("idDoctoServico", criteria.get("idDoctoServico"));
		tfmCriteria.put("_currentPage", criteria.get("_currentPage"));
		tfmCriteria.put("_pageSize", criteria.get("_pageSize"));
		tfmCriteria.put("_order", criteria.get("_order"));
		
		return this.getService().getRowCountCustom(tfmCriteria);

	}
	
	/**
	 * Verifica se o documento sendo incluido ja nao estava na sessao
	 * 
	 * @param idSolicitacaoRetirada
	 * @param idDoctoServico
	 * @return
	 */
	private boolean validaItemNovo(Long idSolicitacaoRetirada, Long idDoctoServico){
	   boolean isNovo = true;
		
	   MasterEntry entry = getMasterFromSession(idSolicitacaoRetirada, false);
       ItemList items = getItemsFromSession(entry, "doc");
       ItemListConfig config = getMasterConfig().getItemListConfig("doc");
        
	   for (Iterator i = items.iterator(idSolicitacaoRetirada, config) ; i.hasNext() ; ) {
		   DocumentoServicoRetirada dsr = (DocumentoServicoRetirada) i.next();
       	   if (idDoctoServico.equals(dsr.getDoctoServico().getIdDoctoServico())){
       		   isNovo = false;
       		   break;
       	   }
       }
	   
	   return isNovo;
	}
	
	/**
	 * Consulta da grid de documentos  de servico da pop-up de documentos
	 * @param criteria
	 * @return
	 */
	public List findPaginatedDoctoServico(TypedFlatMap criteria) {		
		List result =  this.getService().findGridDoctoServicoPaginated(criteria);
		List grid = new ArrayList();
		
		Long idFilialRetirada = criteria.getLong("filialRetirada.idFilial");
		Long idSolicitacaoRetirada = criteria.getLong("idSolicitacaoRetirada");
		Short cdMercadoriaNoTerminal = Short.valueOf(ConstantesSim.CD_MERCADORIA_NO_TERMINAL.shortValue());
		
		for (Iterator it = result.iterator(); it.hasNext();){
			Object[] item = (Object[]) it.next();
			boolean remove = false;
			          
            Long idDoctoServico = (Long) item[3];
            
            if (!validaItemNovo(idSolicitacaoRetirada, idDoctoServico))
            	remove = true;
			            
			Long idFilialDestinoOperacional = (Long) item[4];
			
			if (!remove) {
				if (idFilialDestinoOperacional != null){
					if (!idFilialDestinoOperacional.equals(idFilialRetirada)){
						Short cdLocalizacao = (Short) item[8];
						Long idFilialLocalizacao = (Long) item[9];
														
						if (cdLocalizacao == null || 
							(!(cdLocalizacao.equals(cdMercadoriaNoTerminal)
							   && idFilialRetirada.equals(idFilialLocalizacao)))
							) {
								remove = true;
						} 
					}
				} else {
					remove = true;
				}
			}
			
			if (!remove){
				TypedFlatMap linha = new TypedFlatMap();
				int i = 0;
				
				linha.put("sgFilialOrigem", item[i++]);
				linha.put("nrDoctoServico", item[i++]); 			
				linha.put("tpDocumentoServico", item[i++]);	
    			linha.put("idDoctoServico", item[i++]);
    			linha.put("idFilialDestinoOperacional", item[i++]);    			
    			linha.put("nmPessoa", item[i++]);
    			
    			String tpIdentificacao = (String) item[i++];
    			String nrIdentificacao = (String) item[i++];
    			
    			if (nrIdentificacao != null){
    				linha.put("tpIdentificacao", tpIdentificacao);    			
    				linha.put("nrIdentificacao", FormatUtils.formatIdentificacao(tpIdentificacao, nrIdentificacao));
    			}
    			
    			linha.put("cdLocalizacaoMercadoria", item[i++]);
    			linha.put("idFilialLocalizacao", item[i++]);
    			linha.put("blPrioridadeCarregamento", item[i++]);		    			
    			linha.put("nrNotaFiscal", item[i++]);
    					
				grid.add(linha);
			}
		
		}
		
		return grid;
	}
	
	/**
	 * Insere os registros de documentos de servicos selecionados na pop-up na sessao, criando novas instancias de DocumentoServicoRetirada
	 * @param values
	 */
	public void confirmarDocumentos(TypedFlatMap values) {
		Long idSolicitacaoRetirada = values.getLong("idSolicitacaoRetirada");
		List ids = values.getList("ids");
		if (ids != null) {
			Iterator i = ids.iterator();
			while (i.hasNext()) {
				Long id = Long.valueOf((String)i.next());
				DoctoServico ds = getService().findDocumentoServicoRetiradaById(id);
				DocumentoServicoRetirada dsr = new DocumentoServicoRetirada();
				dsr.setDoctoServico(ds);
				this.saveItemInstanceOnSession(idSolicitacaoRetirada,dsr,"doc");
			}
		}
	}

    public List findTipoDocumentoServico(Map criteria) {
    	List dominiosValidos = new ArrayList();
    	dominiosValidos.add("CTR");
    	dominiosValidos.add("CRT");
    	dominiosValidos.add("MDA");
    	dominiosValidos.add("RRE");
    	dominiosValidos.add("NFT");
    	List retorno = domainValueService.findByDomainNameAndValues("DM_TIPO_DOCUMENTO_SERVICO", dominiosValidos);
    	return retorno;
    }
    
    public List findLookupUsuarioFuncionario(TypedFlatMap tfm){
    	return usuarioService.findLookupUsuarioFuncionario(tfm.getLong("idUsuario"), tfm.getString("nrMatricula"), null, null, null, null, true);
    }
    
    public List findLookupServiceDocumentFilialRRE(Map criteria){
		return findLookupFilialByDocumentoServico(criteria);
	}
	
	public List findLookupServiceDocumentFilialCTR(Map criteria) {
		return findLookupFilialByDocumentoServico(criteria);		
	}
	
	 public List findLookupServiceDocumentFilialCRT(Map criteria) {
	   	return findLookupFilialByDocumentoServico(criteria);
	 }

	public List findLookupServiceDocumentFilialMDA(Map criteria) {
	   	return findLookupFilialByDocumentoServico(criteria);
	}
	
	 public List findLookupFilialByDocumentoServico(Map criteria) {
	    	List list = filialService.findLookup(criteria);
	    	List retorno = new ArrayList();
	    	for (Iterator iter = list.iterator(); iter.hasNext();) {
	    		Filial filial = (Filial)iter.next();
	    		TypedFlatMap typedFlatMap = new TypedFlatMap();
	    		typedFlatMap.put("idFilial", filial.getIdFilial());
	    		typedFlatMap.put("sgFilial", filial.getSgFilial());
	    		typedFlatMap.put("pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
	    		retorno.add(typedFlatMap);
	    	}
	    	return retorno;
	}
			
	public List findLookupServiceDocumentNumberRRE(TypedFlatMap criteria){
		 criteria.put("blBloqueado","N");
		 List listaRecibo = reciboReembolsoService.findLookupCustom(criteria);
		 AliasToTypedFlatMapResultTransformer a = new AliasToTypedFlatMapResultTransformer();
		 return a.transformListResult(listaRecibo);
	 }
	public List findLookupServiceDocumentNumberNFT(Map criteria) {
		return conhecimentoService.findLookup(criteria);
	}
	
	 public List findLookupServiceDocumentNumberCTR(Map criteria) {
		criteria.put("blBloqueado","N");
		return conhecimentoService.findLookup(criteria);	    
	 }

	 public List findLookupServiceDocumentNumberCRT(Map criteria) {
		    criteria.put("blBloqueado","N");
	    	return ctoInternacionalService.findLookup(criteria);
	 }

	 public List findLookupServiceDocumentNumberMDA(Map criteria) {
		    criteria.put("blBloqueado","N");
	    	return mdaService.findLookup(criteria);
	 }
	 
	 /**
	  * Grid de documentos de servico de retirada
	  * @param parameters
	  * @return
	  */
	 public ResultSetPage findPaginatedDoc(Map parameters){
		 ResultSetPage rsp = findPaginatedItemList(parameters, "doc");
		 
		 FilterResultSetPage filter = new FilterResultSetPage(rsp) {
			 
			 	public Map filterItem(Object item) {
			 		
			 		TypedFlatMap map = new TypedFlatMap();
			 		DocumentoServicoRetirada documentoServicoRetirada = (DocumentoServicoRetirada) item;
			 		map.put("idDocumentoServicoRetirada", documentoServicoRetirada.getIdDocumentoServicoRetirada());
			 		
			 		DoctoServico ds = documentoServicoRetirada.getDoctoServico();
			 		map.put("doctoServico.nrDoctoServico", ds.getNrDoctoServico());
			 		map.put("doctoServico.tpDocumentoServico", ds.getTpDocumentoServico());
			 		map.put("doctoServico.filialByIdFilialOrigem.idFilial", ds.getFilialByIdFilialOrigem().getIdFilial());
			 		map.put("doctoServico.filialByIdFilialOrigem.sgFilial", ds.getFilialByIdFilialOrigem().getSgFilial());			 					 		
			 		map.put("doctoServico.filialByIdFilialDestino.sgFilial", ds.getFilialByIdFilialDestino().getSgFilial());
			 		map.put("doctoServico.filialByIdFilialDestino.pessoa.nmFantasia", ds.getFilialByIdFilialDestino().getPessoa().getNmFantasia());			 		
			 		map.put("blPriorizado", ds.getBlPrioridadeCarregamento());
			 		Pessoa pessoa = ds.getClienteByIdClienteRemetente().getPessoa();
			 		map.put("remetente.pessoa.tpIdentificacao", pessoa.getTpIdentificacao().getDescription()); 
			 		map.put("remetente.pessoa.nrIdentificacao", FormatUtils.formatIdentificacao(pessoa.getTpIdentificacao(), pessoa.getNrIdentificacao()));
			 		map.put("remetente.pessoa.nmPessoa", pessoa.getNmPessoa());			 				 		
			 		
			 		List nf = notaFiscalConhecimentoService.findNFByIdConhecimento(ds.getIdDoctoServico());
					if (!nf.isEmpty()){
						map.put("nrNotaFiscal", (Integer)nf.get(0));
					}					
			 		
			 		return map;
			 	};
			 };
			 
		 return (ResultSetPage) filter.doFilter(); 
	 }
	 
	 public Integer getRowCountDoc(Map parameters) {
	   	return getRowCountItemList(parameters, "doc");
	 }
	 
	  
	
	protected MasterEntryConfig createMasterConfig(MasterDetailFactory masterFactory) {
		MasterEntryConfig config = masterFactory.createMasterEntryConfig(SolicitacaoRetirada.class);
		
		Comparator descComparator = new Comparator() {
			public int compare(Object o1, Object o2) {
	    		Collator collator = Collator.getInstance(LocaleContextHolder.getLocale());
	    		
				if ((o1 instanceof Comparable) && (o2 instanceof Comparable)) {
					return ((Comparable)o1).compareTo(o2);
				} else {
					String strComp1 = null;
					String strComp2 = null;
					
					strComp1 = "";
			
					strComp2 = "";
					
					if (strComp1 == null || strComp2 == null)
						return 0;
					return collator.compare(strComp1,strComp2);
				}
			}
    	};
		
		
    	ItemListConfig itemInitDoc= new ItemListConfig() {
    		
			public void setMasterOnItem(Object master, Object itemBean) {
				SolicitacaoRetirada sr = (SolicitacaoRetirada)master; // Pai
    			DocumentoServicoRetirada dsr = (DocumentoServicoRetirada)itemBean; // filho
    			dsr.setSolicitacaoRetirada(sr);
    		}

    		public List initialize(Long masterId, Map parameters) {
    			if (masterId != null) {
    				return getService().findDocsBySolicitacaoRetirada(masterId);
    			} else
    				return new ArrayList(0);
    		}
    		
    		public Integer getRowCount(Long masterId, Map parameters) {
    			if (masterId != null) {
    				return getService().getRowCountDocsBySolicitacaoRetirada(masterId);
    			} else
    				return Integer.valueOf(0);
    		}
    		
			public void modifyItemValues(Object newValues, Object bean) {
				Set ignore = new HashSet();
				ignore.add("nrVersao");
				ReflectionUtils.syncObjectProperties(bean, newValues);
			}
			
			public Map configItemDomainProperties() {
				return null;
			}
	
			public Object populateNewItemInstance(Map params, Object bean) {
				TypedFlatMap p = (TypedFlatMap)params;
				
				DocumentoServicoRetirada documentoServicoRetirada = new DocumentoServicoRetirada();
				documentoServicoRetirada.setIdDocumentoServicoRetirada(p.getLong("idDocumentoServicoRetirada"));
				
				DoctoServico doctoServico = new DoctoServico();
				
				if( p.getLong("idDoctoServico") != null){
				doctoServico.setIdDoctoServico(p.getLong("idDoctoServico"));
				}else if(p.getLong("doctoServico.idDoctoServico") != null){
					doctoServico.setIdDoctoServico(p.getLong("doctoServico.idDoctoServico"));
				}else if(p.getLong("doctoServico.conhecimento.idDoctoServico") != null){
					doctoServico.setIdDoctoServico( p.getLong("doctoServico.conhecimento.idDoctoServico") );
				}
				
				Filial filial = new Filial();
				filial.setSgFilial(p.getString("doctoServico.filialByIdFilialOrigem.sgFilial"));
				filial.setIdFilial(p.getLong("doctoServico.filialByIdFilialOrigem.idFilial"));
				Pessoa pessoaFilial = new Pessoa();
				pessoaFilial.setNmFantasia(p.getString("doctoServico.filialByIdFilialOrigem.pessoa.nmFantasia"));
				filial.setPessoa(pessoaFilial);
				doctoServico.setFilialByIdFilialOrigem(filial);	
				
				DomainValue dm = domainValueService.findDomainValueByValue("DM_TIPO_DOCUMENTO_SERVICO", p.getString("doctoServico.tpDocumentoServico"));
				
				doctoServico.setTpDocumentoServico(dm);
				
				if( doctoServico.getIdDoctoServico() == null){
					throw new BusinessException("LMS-10062");
				}
				
				Map ds = getService().findDadosDoctoServico(doctoServico.getIdDoctoServico());
				
				doctoServico.setNrDoctoServico((Long) ds.get("nrDoctoServico"));
				doctoServico.setBlPrioridadeCarregamento((Boolean) ds.get("blPrioridadeCarregamento"));
				
				Filial filialDestino = new Filial();
				filialDestino.setIdFilial((Long) ds.get("idFilial"));
				filialDestino.setSgFilial((String) ds.get("sgFilial"));
				Pessoa pessoaFilDestino = new Pessoa();
				pessoaFilDestino.setNmFantasia((String) ds.get("nmFantasia"));
				filialDestino.setPessoa(pessoaFilDestino);
				doctoServico.setFilialByIdFilialDestino(filialDestino);
				
				Cliente cliente = new Cliente();
				cliente.setIdCliente((Long) ds.get("idCliente"));
				Pessoa pessoa = new Pessoa();
				pessoa.setIdPessoa((Long) ds.get("idCliente"));
				pessoa.setTpIdentificacao((DomainValue) ds.get("tpIdentificacao"));
				pessoa.setNmPessoa((String) ds.get("nmPessoa"));
				pessoa.setNrIdentificacao((String) ds.get("nrIdentificacao"));
				cliente.setPessoa(pessoa);
				doctoServico.setClienteByIdClienteRemetente(cliente);				
				
				documentoServicoRetirada.setDoctoServico(doctoServico);
				
				documentoServicoRetirada.setVersao(p.getInteger("versao"));
				
				return documentoServicoRetirada;
			}
    	};
    	
    	config.addItemConfig("doc",DocumentoServicoRetirada.class, itemInitDoc, descComparator);
		
		return config;
	}
		
	/**
	 * Cancela a solicitacao de retirada
	 * @param parametros
	 */
	public void executeCancelar(TypedFlatMap parametros){		
		Long idSolicitacaoRetirada = parametros.getLong("idSolicitacaoRetirada");
		
		MasterEntry entry = getMasterFromSession(idSolicitacaoRetirada, false);
		
		ItemList list = entry.getItems("doc");
		if (!list.isInitialized())
			list.initialize(getService().findDocsBySolicitacaoRetirada(idSolicitacaoRetirada));

		SolicitacaoRetirada solicitacaoRetirada = solicitacaoRetiradaService.findById(idSolicitacaoRetirada);		
		Filial filialUsuario = SessionUtils.getFilialSessao();
		
		validateDoctoServicoParaCancelamento((list.iterator(idSolicitacaoRetirada,getMasterConfig().getItemListConfig("doc"))), solicitacaoRetirada, filialUsuario);
		getService().executeCancelarSolicitacaoRetirada(idSolicitacaoRetirada);		
		cancelaDocumentosWorkflow(list.iterator(idSolicitacaoRetirada,getMasterConfig().getItemListConfig("doc")));
		
	}
	
	/**
	 * Valida se os documentos nao esta entregues ou finalizados 
	 * 
	 * @param iterator
	 */
	private void validateDoctoServicoParaCancelamento(Iterator iterator, SolicitacaoRetirada solicitacaoRetirada, Filial filialUsuario){
		while (iterator.hasNext()){
			
			DocumentoServicoRetirada dsr = (DocumentoServicoRetirada) iterator.next();
			Long idDoctoServico = dsr.getDoctoServico().getIdDoctoServico();
			
			if (!(dsr.getDoctoServico().getFilialByIdFilialOrigem().getIdFilial().equals(filialUsuario.getIdFilial()) ||
				  dsr.getDoctoServico().getFilialDestinoOperacional().getIdFilial().equals(filialUsuario.getIdFilial()) ||
				  solicitacaoRetirada.getFilial().getIdFilial().equals(filialUsuario.getIdFilial()) ||
				  solicitacaoRetirada.getFilialRetirada().getIdFilial().equals(filialUsuario.getIdFilial()))) {
				
				throw new BusinessException("LMS-10053");				
			}			
			
			if (ocorrenciaEntregaService.validateDoctoServicoEntregue(idDoctoServico).intValue() > 0){
				throw new BusinessException("LMS-10030");
			}
		
			if (manifestoEntregaService.validateDoctoServicoNaoFinalizado(idDoctoServico)){
				throw new BusinessException("LMS-10029");
			}
		}
	}
	
	/**
	 *  Cancela no worflow cada pendencia associada aos documentos de servico de retirada
	 * @param iterator
	 */
	private void cancelaDocumentosWorkflow(Iterator iterator){
		
		while (iterator.hasNext()){
			DocumentoServicoRetirada dsr = (DocumentoServicoRetirada) iterator.next();
			if (dsr.getPendencia() != null) {
				pendenciaService.cancelPendencia(dsr.getPendencia().getIdPendencia());
			}
		}
	}
	
	
	public Map findDadosSessao() {
		Map<String, Object> retorno = new HashMap<String, Object>();
		Filial filial = SessionUtils.getFilialSessao();
		retorno.put("sgFilial", filial.getSgFilial());
		retorno.put("idFilial", filial.getIdFilial());
		retorno.put("nmFantasia", filial.getPessoa().getNmFantasia());
		return retorno;
	}
	
	public List findLookupUsuarioFuncionario(Map criteria){
		return usuarioService.findLookupUsuarioFuncionario(
			null,
			FormatUtils.fillNumberWithZero(((Integer)criteria.get("nrMatricula")).toString(), 9),
			(Long)criteria.get("idFilial"),
			null,
			null,
			null,
			true
		);
	}
	
	
    /** 
	 *
     */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIdsDoc(List ids) {
    	super.removeItemByIds(ids, "doc");
    }
    
	/**
	 * @param filialService The filialService to set.
	 */
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	/**
	 * @param clienteService The clienteService to set.
	 */
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}

	/**
	 * @param domainValueService The domainValueService to set.
	 */
	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}

	/**
	 * @param reciboReembolsoService The reciboReembolsoService to set.
	 */
	public void setReciboReembolsoService(
			ReciboReembolsoService reciboReembolsoService) {
		this.reciboReembolsoService = reciboReembolsoService;
	}

	/**
	 * @param conhecimentoService The conhecimentoService to set.
	 */
	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
	}

	/**
	 * @param ctoInternacionalService The ctoInternacionalService to set.
	 */
	public void setCtoInternacionalService(
			CtoInternacionalService ctoInternacionalService) {
		this.ctoInternacionalService = ctoInternacionalService;
	}

	/**
	 * @param mdaService The mdaService to set.
	 */
	public void setMdaService(MdaService mdaService) {
		this.mdaService = mdaService;
	}

	/**
	 * @param usuarioService The usuarioService to set.
	 */
	public void setUsuarioService(UsuarioService usuarioService) {
		this.usuarioService = usuarioService;
	}


	/**
	 * @param manifestoEntregaService The manifestoEntregaService to set.
	 */
	public void setManifestoEntregaService(
			ManifestoEntregaService manifestoEntregaService) {
		this.manifestoEntregaService = manifestoEntregaService;
	}

	/**
	 * @param ocorrenciaEntregaService The ocorrenciaEntregaService to set.
	 */
	public void setOcorrenciaEntregaService(
			OcorrenciaEntregaService ocorrenciaEntregaService) {
		this.ocorrenciaEntregaService = ocorrenciaEntregaService;
	}


	/**
	 * @param notaFiscalConhecimentoService The notaFiscalConhecimentoService to set.
	 */
	public void setNotaFiscalConhecimentoService(
			NotaFiscalConhecimentoService notaFiscalConhecimentoService) {
		this.notaFiscalConhecimentoService = notaFiscalConhecimentoService;
	}

	/**
	 * @param pendenciaService The pendenciaService to set.
	 */
	public void setPendenciaService(WorkflowPendenciaService pendenciaService) {
		this.pendenciaService = pendenciaService;
	}

	/**
	 * @param doctoServicoService The doctoServicoService to set.
	 */
	public void setDoctoServicoService(DoctoServicoService doctoServicoService) {
		this.doctoServicoService = doctoServicoService;
	}

	
}
