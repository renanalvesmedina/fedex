package com.mercurio.lms.sim.swt.action;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.core.util.Base64Util;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.PaginatedQuery;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.sim.model.TemplateRelatorio;
import com.mercurio.lms.sim.model.service.TemplateRelatorioService;
import com.mercurio.lms.util.ArquivoUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.sim.swt.manterTemplateRelatorioAction"
 */
public class ManterTemplateRelatorioAction extends CrudAction {

	private Logger log = LogManager.getLogger(this.getClass());
	private TemplateRelatorioService templateRelatorioService;

	public void setTemplateRelatorioService(TemplateRelatorioService templateRelatorioService) {
		this.templateRelatorioService = templateRelatorioService;
	}

	public TemplateRelatorioService getTemplateRelatorioService() {
		return templateRelatorioService;
	}
	
	public void setService(TemplateRelatorioService templateRelatorioService) {
		this.defaultService = templateRelatorioService;
	}

	public TemplateRelatorioService getService() {
		return (TemplateRelatorioService) this.defaultService;
	}

	@SuppressWarnings({ "rawtypes", "unchecked" })
	@Override
	public ResultSetPage<Map<String, Object>> findPaginated(Map criteria) {
		ResultSetPage rsp = getTemplateRelatorioService().findPaginated(new PaginatedQuery(criteria));
    	
    	List<TemplateRelatorio> list = rsp.getList();		
		List<Map<String, Object>> retorno = new ArrayList<Map<String,Object>>(list.size());
		
		for(TemplateRelatorio templateRelatorio : list){	
			Map<String,Object> map = new HashMap<String, Object>();
			map.put("idTemplate", templateRelatorio.getIdTemplate());
			map.put("nmTemplate", templateRelatorio.getNmTemplate());
			map.put("tpRelatorio", templateRelatorio.getTpRelatorio().getDescriptionAsString());
			map.put("dcArquivo", templateRelatorio.getDcArquivo());
			retorno.add(map);	
		}
		rsp.setList(retorno);
		return rsp;	
	}
	
	public Integer getRowCount(TypedFlatMap criteria) {		
		return getTemplateRelatorioService().getRowCount(criteria); 
	}
	
	public Map store(Map map) {
		TemplateRelatorio templateRelatorio = new TemplateRelatorio();
		templateRelatorio.setIdTemplate((Long)map.get("idTemplate"));
		templateRelatorio.setNmTemplate((String)map.get("nmTemplate"));
		templateRelatorio.setTpRelatorio(new DomainValue((String)map.get("tpRelatorio")));
		
		if(map.get("dcArquivo") != null){
			try {
				templateRelatorio.setDcArquivo(Base64Util.decode((String)map.get("dcArquivo")));
			} catch (IOException e) {
				log.error(e);
			}
		}
		getTemplateRelatorioService().store(templateRelatorio);

		Map retorno = new HashMap();
		retorno = findById(templateRelatorio.getIdTemplate());
    	return retorno;
    }
	
	public void removeById(java.lang.Long id) {
		templateRelatorioService.removeById(id);
    }
	
	public Map findById(java.lang.Long id) {
    	TemplateRelatorio templateRelatorio = getTemplateRelatorioService().findById(id);
    	
    	Map retorno = new HashMap();
    	retorno.put("idTemplate", templateRelatorio.getIdTemplate());
    	retorno.put("nmTemplate", templateRelatorio.getNmTemplate());
    	retorno.put("tpRelatorio", templateRelatorio.getTpRelatorio().getValue());
    	retorno.put("dcArquivo", "");
    	retorno.put("nmArquivo", ArquivoUtils.getNomeArquivo(templateRelatorio.getDcArquivo()));
    	return retorno;
    }
	
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
		getTemplateRelatorioService().removeByIds(ids);
    }
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public Map executeDownloadArquivo(Map parameters) {
		Map retorno = new HashMap();
		Long idTemplate = (Long) parameters.get("idTemplate");

		if (idTemplate != null && idTemplate.intValue() > 0) {
			TemplateRelatorio template =  getTemplateRelatorioService().findById(idTemplate);
			retorno.put("dcArquivo", Base64Util.encode(template.getDcArquivo()));
		}

		return retorno;
	}
	
	
}
