package com.mercurio.lms.franqueado.swt.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Moeda;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.configuracoes.model.service.UsuarioService;
import com.mercurio.lms.franqueados.model.Franquia;
import com.mercurio.lms.franqueados.model.service.FranquiaService;
import com.mercurio.lms.municipios.model.Aeroporto;
import com.mercurio.lms.municipios.model.Empresa;
import com.mercurio.lms.municipios.model.HistoricoFilial;
import com.mercurio.lms.municipios.model.service.EmpresaService;
import com.mercurio.lms.municipios.model.service.HistoricoFilialService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.PessoaUtils;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.municipios.swt.manterFiliaisAction"
 */
public class ManterFranquiaAction extends CrudAction {

	private FranquiaService franquiaService;
	private HistoricoFilialService historicoFilialService;
	private EmpresaService empresaService;
	private UsuarioService usuarioService;

    public FranquiaService getFranquiaService() {
		return franquiaService;
	}

	public void setfranquiaService(FranquiaService franquiaService) {
		this.franquiaService = franquiaService;
	}

	public void removeById(java.lang.Long id) {
	}
 
    public List findTimeZones() {
    	return JTDateTimeUtils.getTimeZones();
    }

	public ResultSetPage findPaginatedFranqueado(Map criteria) {		
		if(criteria.get("idEmpresa") == null) {
			criteria.put("idEmpresa", SessionUtils.getEmpresaSessao().getIdEmpresa());
		}

    	return this.getFranquiaService().findPaginated(createCriteria(criteria));
	}

	public Integer getRowCountFranqueado(Map criteria) {
		return this.getFranquiaService().getRowCount(createCriteria(criteria));
	}

	/**
	 * Método que configura o criterio a ser usado.
	 * @param criteria
	 * @return
	 */
	private TypedFlatMap createCriteria(Map criteria) {
		TypedFlatMap tfmCriteria = new TypedFlatMap();
		tfmCriteria.put("tpAcesso", criteria.get("tpAcesso"));
		tfmCriteria.put("sgFilial", criteria.get("filial.sgFilial") != null ? criteria.get("filial.sgFilial") + "%" : null);
		tfmCriteria.put("vigenteEm", criteria.get("vigenteEm"));
		tfmCriteria.put("empresa.id", criteria.get("idEmpresa"));
		tfmCriteria.put("tpEmpresa", criteria.get("tpEmpresa"));
		tfmCriteria.put("tpPessoa", criteria.get("tpPessoa"));
		tfmCriteria.put("tpIdentificacao", criteria.get("tpIdentificacao"));
		if (StringUtils.isNotBlank((String)criteria.get("nrIdentificacao"))) {
			tfmCriteria.put("nrIdentificacao", PessoaUtils.validateIdentificacao((String)criteria.get("nrIdentificacao")));
		}	
		tfmCriteria.put("nmFantasia", criteria.get("nmFantasiaFilial"));
		tfmCriteria.put("nmPessoa", criteria.get("nmPessoaFilial"));
		tfmCriteria.put("tpFilial", criteria.get("tpFilial"));
		tfmCriteria.put("dtRealOperacaoInicial", criteria.get("dtRealOperacaoInicial"));
		tfmCriteria.put("dtRealOperacaoFinal", criteria.get("dtRealOperacaoFinal"));
		
    	tfmCriteria.put("_currentPage", criteria.get("_currentPage"));
    	tfmCriteria.put("_pageSize", criteria.get("_pageSize"));
    	tfmCriteria.put("_order", criteria.get("_order"));
		return tfmCriteria;
	}
	
	public TypedFlatMap findById(java.lang.Long id) {
    	Franquia franquia = getFranquiaService().findById(id);  
        TypedFlatMap result = new TypedFlatMap();

        Empresa empresa = franquia.getFilial().getEmpresa();
		//Pessoa de empresa
        Pessoa  pessoa  = empresa.getPessoa();
		result.put("filial.empresa.tpEmpresa",empresa.getTpEmpresa().getValue());
		result.put("filial.empresa.idEmpresa",empresa.getIdEmpresa());
		result.put("filial.empresa.pessoa.nrIdentificacao",pessoa.getNrIdentificacao());
		result.put("filial.empresa.pessoa.nrIdentificacaoFormatado",FormatUtils.formatIdentificacao(pessoa.getTpIdentificacao().getValue(),pessoa.getNrIdentificacao()));
		result.put("filial.empresa.pessoa.nmPessoa",pessoa.getNmPessoa());
		//Pessoa da filial
		pessoa = franquia.getFilial().getPessoa();
		if (pessoa.getTpIdentificacao() != null) {
			result.put("filial.pessoa.tpIdentificacao",pessoa.getTpIdentificacao().getValue());
			if (pessoa.getNrIdentificacao() != null) {
				result.put("filial.pessoa.nrIdentificacao",FormatUtils.formatIdentificacao(pessoa.getTpIdentificacao().getValue(),pessoa.getNrIdentificacao()));
			}
		}
		
		result.put("filial.pessoa.idPessoa",franquia.getFilial().getIdFilial());
		result.put("filial.pessoa.dsEmail",pessoa.getDsEmail());
		result.put("filial.pessoa.nmPessoa",pessoa.getNmPessoa());
		result.put("filial.pessoa.nmFantasia",pessoa.getNmFantasia());
		result.put("filial.pessoa.tpPessoa","J");
		
		result.put("idFilial",franquia.getIdFranquia());
		result.put("filial.sgFilial",franquia.getFilial().getSgFilial());
		result.put("filial.obAprovacao",franquia.getFilial().getObAprovacao());
		result.put("filial.dsHomepage",franquia.getFilial().getDsHomepage());
		result.put("filial.obFilial",franquia.getFilial().getObFilial());
		result.put("filial.nrAreaTotal",franquia.getFilial().getNrAreaTotal());
		result.put("filial.nrAreaArmazenagem",franquia.getFilial().getNrAreaArmazenagem());
		result.put("filial.numeroDocas",null);
		result.put("filial.numeroBoxes",null);
		result.put("filial.blRecebeVeiculosSemColeta",franquia.getFilial().getBlRecebeVeiculosSemColeta());
		result.put("filial.blInformaKmPortaria",franquia.getFilial().getBlInformaKmPortaria());
		result.put("filial.blOrdenaEntregaValor",franquia.getFilial().getBlOrdenaEntregaValor());
		result.put("filial.blObrigaBaixaEntregaOrdem",franquia.getFilial().getBlObrigaBaixaEntregaOrdem());
		result.put("filial.blWorkflowKm",franquia.getFilial().getBlWorkflowKm());
		result.put("filial.nrFranquiaKm",franquia.getFilial().getNrFranquiaKm());
		result.put("filial.nrFranquiaPeso",franquia.getFilial().getNrFranquiaPeso());
		result.put("filial.nrCentroCusto",franquia.getFilial().getNrCentroCusto());
		result.put("filial.nrPrazoCobranca",franquia.getFilial().getNrPrazoCobranca());
		result.put("filial.vlCustoReembarque",franquia.getFilial().getVlCustoReembarque());
		result.put("filial.pcJuroDiario",franquia.getFilial().getPcJuroDiario());
		result.put("filial.pcFreteCarreteiro",franquia.getFilial().getPcFreteCarreteiro());
		result.put("filial.blEmiteBoletoFaturamento",franquia.getFilial().getBlEmiteBoletoFaturamento());
		result.put("filial.blEmiteBoletoEntrega",franquia.getFilial().getBlEmiteBoletoEntrega());
		result.put("filial.blEmiteReciboFrete",franquia.getFilial().getBlEmiteReciboFrete());
		result.put("filial.dsTimezone",franquia.getFilial().getDsTimezone());
		
		Moeda moeda = franquia.getFilial().getMoeda();
		if (moeda != null) {
			result.put("filial.moeda.idMoeda",moeda.getIdMoeda());
		}
		
		Aeroporto aeroporto = franquia.getFilial().getAeroporto();
		if (aeroporto != null) {
			result.put("aeroporto.idAeroporto",aeroporto.getIdAeroporto());
			result.put("aeroporto.sgAeroporto",aeroporto.getSgAeroporto());
			pessoa = aeroporto.getPessoa();
			result.put("aeroporto.pessoa.nmPessoa",pessoa.getNmPessoa());
		}
		
		Empresa franqueado = franquia.getFilial().getFranqueado();
		if (franqueado != null) {
			Pessoa pessoaF  = franqueado.getPessoa();
			result.put("franqueado.idEmpresa",franqueado.getIdEmpresa());
			result.put("franqueado.pessoa.nrIdentificacao",pessoaF.getNrIdentificacao());
			result.put("franqueado.pessoa.nrIdentificacaoFormatado",FormatUtils.formatIdentificacao(pessoaF.getTpIdentificacao(),pessoaF.getNrIdentificacao()));
			result.put("franqueado.pessoa.nmPessoa",pessoaF.getNmPessoa());
		}

		HistoricoFilial historicoFilial = historicoFilialService.findUltimoHistoricoFilial(id);
		if (historicoFilial != null) {
			result.put("filial.lastHistoricoFilial.tpFilial",historicoFilial.getTpFilial().getValue());
			result.put("filial.lastHistoricoFilial.dtPrevisaoOperacaoInicial",historicoFilial.getDtPrevisaoOperacaoInicial());
			result.put("filial.lastHistoricoFilial.dtPrevisaoOperacaoFinal",historicoFilial.getDtPrevisaoOperacaoFinal());
			result.put("filial.lastHistoricoFilial.dtRealOperacaoInicial",historicoFilial.getDtRealOperacaoInicial());
			result.put("filial.lastHistoricoFilial.dtRealOperacaoFinal",historicoFilial.getDtRealOperacaoFinal());
			result.put("fieldBlockade",Boolean.TRUE); 
    	}

		return result;
    }

    @Override
	public List<Map<String, Object>> findLookup(Map criteria) {
		return franquiaService.findLookupFranquia(criteria);
    }
    
    public List findLookupUsuarioFuncionario(TypedFlatMap criteria) {
		Long idUsuario = criteria.getLong("idUsuario");
		String nrMatricula = criteria.getString("nrMatricula");
		Long idFilial = criteria.getLong("filial.idFilial");
		
		String cdSetor = criteria.getString("codSetor.codigo");
		if (StringUtils.isBlank(cdSetor)) {
			cdSetor = null;
		}
		
		return usuarioService.findLookupUsuarioFuncionario(idUsuario,nrMatricula,idFilial,null,null,cdSetor,true);
	}
    
    public List findLookupEmpresa(Map criteria) {
    	Map nrIdentificacao = new HashMap();
    	nrIdentificacao.put("nrIdentificacao", criteria.get("nrIdentificacao"));
    	criteria.put("pessoa", nrIdentificacao);
    	criteria.remove("nrIdentificacao");
    	
    	List list = this.empresaService.findLookupFilial(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		Empresa empresa = (Empresa)iter.next();
    		Map mapEmpresa = new HashMap();

    		mapEmpresa.put("empresa.idEmpresa", empresa.getIdEmpresa());
    		mapEmpresa.put("empresa.nrIdentificacao", FormatUtils.formatIdentificacao(empresa.getPessoa()));
    		mapEmpresa.put("empresa.nmEmpresa", empresa.getPessoa().getNmPessoa());
    		mapEmpresa.put("empresa.tpEmpresa", empresa.getTpEmpresa().getValue());
    		retorno.add(mapEmpresa);
    	}
    	return retorno;
    }
    
	public void setEmpresaService(EmpresaService empresaService) {
		this.empresaService = empresaService;
	}

	public void setUsuarioService(UsuarioService usuarioService) {
		this.usuarioService = usuarioService;
	}
	
}
