package com.mercurio.lms.contratacaoveiculos.swt.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.contratacaoveiculos.model.Proprietario;
import com.mercurio.lms.contratacaoveiculos.model.service.MotoristaService;
import com.mercurio.lms.contratacaoveiculos.model.service.ProprietarioService;
import com.mercurio.lms.municipios.model.RotaIdaVolta;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.MunicipioService;
import com.mercurio.lms.municipios.model.service.RotaIdaVoltaService;
import com.mercurio.lms.municipios.model.service.UnidadeFederativaService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.PessoaUtils;
import com.mercurio.lms.util.session.SessionUtils;


/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contratacaoveiculos.swt.manterMotoristasAction"
 */

public class ManterMotoristasAction extends CrudAction {
	private RotaIdaVoltaService rotaIdaVoltaService;
	private MotoristaService motoristaService;
	private FilialService filialService;
	private ProprietarioService proprietarioService;
	private MunicipioService municipioService;
	private UnidadeFederativaService unidadeFederativaService;
	private ConfiguracoesFacade configuracoesFacade;
	
	public void setUnidadeFederativaService(
			UnidadeFederativaService unidadeFederativaService) {
		this.unidadeFederativaService = unidadeFederativaService;
	}


	public void setMunicipioService(MunicipioService municipioService) {
		this.municipioService = municipioService;
	}


	public void setProprietarioService(ProprietarioService proprietarioService) {
		this.proprietarioService = proprietarioService;
	}

	
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public void setMotoristaService(MotoristaService motoristaService) {
		this.motoristaService = motoristaService;
	}

	public List findLookupRotasViagem(Map criteria) {
    	TypedFlatMap tfmCriteria = new TypedFlatMap();
    	tfmCriteria.put("nrRota", (Integer)criteria.get("nrRota"));
    			
    	List list = rotaIdaVoltaService.findLookupRotaIdaVolta(tfmCriteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		RotaIdaVolta rotaIdaVolta = (RotaIdaVolta)iter.next();
    		Map map = new HashMap();
    		map.put("idRotaIdaVolta", rotaIdaVolta.getIdRotaIdaVolta());
    		map.put("nrRota", rotaIdaVolta.getNrRota());
    		map.put("dsRota", rotaIdaVolta.getRota().getDsRota());
    		retorno.add(map);
    	}
    	return retorno;
	}
	
	public List findLookupFilial(Map criteria) {
	      return filialService.findLookup(criteria);
	}
	
	public List findLookupUF(Map criteria) {
	      return unidadeFederativaService.findLookup(criteria);
	}
		
	public List findLookupProprietario(Map criteria) {
		Map nrIdentificacao = new HashMap();
		nrIdentificacao.put("nrIdentificacao", criteria.get("nrIdentificacaoProprietario"));
		criteria.put("pessoa", nrIdentificacao);
		criteria.remove("nrIdentificacaoProprietario");
		
		List listResult = proprietarioService.findLookup(criteria);
		List listProprietario = new ArrayList();
		for (Iterator iter = listResult.iterator(); iter.hasNext();) {
			Proprietario proprietario = (Proprietario) iter.next();
			Map mapProprietario = new HashMap();
			mapProprietario.put("idProprietario", proprietario.getIdProprietario());
			mapProprietario.put("nrIdentificacaoProprietario", FormatUtils.formatIdentificacao(proprietario.getPessoa()));
			mapProprietario.put("nmPessoaProprietario", proprietario.getPessoa().getNmPessoa());
			
			listProprietario.add(mapProprietario);
		}
		
		return listProprietario;
	}
	
	public List findLookupMunicipio(Map criteria) {
	      return municipioService.findLookup(criteria);
	}
	
	public Map findByIdDetalhamento(java.lang.Long id) {
		return motoristaService.findByIdDetalhamento(id);
	}
	
	public List findLookupUsuarioFuncionario(TypedFlatMap tfm){
		return motoristaService.findLookupUsuarioFuncionario(tfm);
	}
	
	public TypedFlatMap validateVinculo(TypedFlatMap criteria) {
		String tpVinculo = criteria.getString("tpVinculo");
		TypedFlatMap retorno = new TypedFlatMap();
		
		if (!this.validateVinculo(tpVinculo)) {
			retorno.put("mensagem",configuracoesFacade.getMensagem("LMS-26095"));
		}
		
		return retorno;
	}
	
	/**
	 * Somente usuário Matriz pode manipular dados de um motorista com vínculo Funcionário.
	 * @param tpVinculo
	 * @return
	 */
	private boolean validateVinculo(String tpVinculo) {
		boolean isMatriz = SessionUtils.isFilialSessaoMatriz();
		return (isMatriz || !tpVinculo.equals("F"));
	}
	
	public Pessoa validateIdentificacao(Map map) {
		return motoristaService.validateIdentificacao(map);
	}
	
	public Serializable storeMap(TypedFlatMap map) {
		String tpVinculo = map.getString("tpVinculo");		
		if (!this.validateVinculo(tpVinculo)) {
			throw new BusinessException("LMS-26095");
		}
		
		return motoristaService.storeMap(map);
	}
	
	public ResultSetPage findPaginatedCustom(Map criteria) {
		ResultSetPage resultSetPage = motoristaService.findPaginatedCustom(createFindCriteria(criteria));
		List listReturn = new ArrayList();
		for (Iterator iter = resultSetPage.getList().iterator(); iter.hasNext();) {
			TypedFlatMap tfmReturn = (TypedFlatMap) iter.next();			
			Map mapReturn = new HashMap();			
			mapReturn.put("idMotorista", tfmReturn.get("idMotorista"));			
			mapReturn.put("sgFilial", tfmReturn.get("filial.sgFilial"));
			mapReturn.put("nmFantasiaFilial", tfmReturn.get("filial.pessoa.nmFantasia"));
			mapReturn.put("tpIdentificacao", tfmReturn.get("pessoa.tpIdentificacao"));
			mapReturn.put("nrIdentificacao", tfmReturn.get("pessoa.nrIdentificacaoFormatado"));
			mapReturn.put("nrIdentificacaoFormatado", tfmReturn.get("pessoa.nrIdentificacaoFormatado"));
			mapReturn.put("nmPessoa", tfmReturn.get("pessoa.nmPessoa"));
			mapReturn.put("nrMatricula", tfmReturn.get("usuarioMotorista.nrMatricula"));
			mapReturn.put("tpVinculo", tfmReturn.get("tpVinculo"));
			mapReturn.put("tpSituacao", tfmReturn.get("tpSituacao"));			
			
			listReturn.add(mapReturn);
		}
		
		resultSetPage.setList(listReturn);		
		return resultSetPage;
	}
	
	public Integer getRowCountCustom(Map criteria) {
		criteria.put("isRowCount", true);
		return motoristaService.getRowCountCustom(createFindCriteria(criteria));
	}
	
	public ResultSetPage findPaginatedInstrutoresCustom(TypedFlatMap criteria) {
		final String cdCargoInstrutores = "025";
		final List<String> cdFuncoesInstrutores = new ArrayList<String>();
		cdFuncoesInstrutores.add("025.0002");
		cdFuncoesInstrutores.add("025.0004");
		cdFuncoesInstrutores.add("025.0015");
		
		criteria.put("cdCargo", cdCargoInstrutores);
		criteria.put("cdFuncoes", cdFuncoesInstrutores);
		
		return findPaginatedCustom(criteria);
	}
	
	public Integer getRowCountInstrutoresCustom(Map criteria) {
		final String cdCargoInstrutores = "025"; 
		final List<String> cdFuncoesInstrutores = new ArrayList<String>();
		cdFuncoesInstrutores.add("025.0002");
		cdFuncoesInstrutores.add("025.04");
		
		criteria.put("cdCargo", cdCargoInstrutores);
		criteria.put("cdFuncoes", cdFuncoesInstrutores);
		criteria.put("isRowCount", true);
		
		return motoristaService.getRowCountCustom(createFindCriteria(criteria));
	}
	
    /**
     * Cria mapa com filtros para pesquisa.
     * @param criteria
     * @return
     */
	private TypedFlatMap createFindCriteria(Map criteria) {
		TypedFlatMap mapCriteria = new TypedFlatMap();
		mapCriteria.put("_currentPage", criteria.get("_currentPage"));
    	mapCriteria.put("_pageSize", criteria.get("_pageSize"));
    	mapCriteria.put("_order", criteria.get("_order"));
    	mapCriteria.put("filial.idFilial", criteria.get("idFilial"));
    	mapCriteria.put("tpVinculo", criteria.get("tpVinculo"));
    	mapCriteria.put("pessoa.tpIdentificacao", criteria.get("tpIdentificacao"));
		if (StringUtils.isNotBlank((String)criteria.get("nrIdentificacao"))) {
			if (criteria.get("isRowCount") != null && (Boolean)criteria.get("isRowCount"))
				mapCriteria.put("pessoa.nrIdentificacao", PessoaUtils.clearIdentificacao((String)criteria.get("nrIdentificacao") + "%"));
			else
				mapCriteria.put("pessoa.nrIdentificacao", PessoaUtils.validateIdentificacao((String)criteria.get("nrIdentificacao") + "%"));
		}
    	mapCriteria.put("pessoa.nmPessoa", criteria.get("nmPessoa"));
    	mapCriteria.put("proprietario.idProprietario", criteria.get("idProprietario"));    	
    	mapCriteria.put("blBloqueado", criteria.get("blBloqueado"));
    	mapCriteria.put("tpSituacao", criteria.get("tpSituacao"));    	
    	mapCriteria.put("dtVencimentoHabilitacaoInicial", criteria.get("dtVencimentoHabilitacaoInicial"));
    	mapCriteria.put("dtVencimentoHabilitacaoFinal", criteria.get("dtVencimentoHabilitacaoFinal"));
    	mapCriteria.put("dtAtualizacaoInicial", criteria.get("dtAtualizacaoInicial"));
    	mapCriteria.put("dtAtualizacaoFinal", criteria.get("dtAtualizacaoFinal"));
    	mapCriteria.put("idRotaViagem", criteria.get("idRotaIdaVolta"));
		mapCriteria.put("cdCargo", criteria.get("cdCargo"));
		mapCriteria.put("cdFuncoes", criteria.get("cdFuncoes"));
    			
    	return mapCriteria;
	}  	
	
	
	/**
	 * Apaga várias entidades através do Id.
	 *
	 * @param ids lista com as entidades que deverão ser removida.
	 *
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		motoristaService.removeByIds(ids);
	}
	
	/**
	 * Apaga uma entidade através do Id.
	 *
	 * @param id indica a entidade que deverá ser removida.
	 */
	 public void removeById(java.lang.Long id) {
		 motoristaService.removeById(id);
	 }

	/**
	 * @param rotaIdaVoltaService The rotaIdaVoltaService to set.
	 */
	public void setRotaIdaVoltaService(RotaIdaVoltaService rotaIdaVoltaService) {
		this.rotaIdaVoltaService = rotaIdaVoltaService;
	}

	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}
}
