package com.mercurio.lms.contratacaoveiculos.swt.action;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;

import org.apache.commons.lang.StringUtils;
import org.joda.time.YearMonthDay;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.EnderecoPessoa;
import com.mercurio.lms.configuracoes.model.MoedaPais;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.configuracoes.model.service.EnderecoPessoaService;
import com.mercurio.lms.configuracoes.model.service.UsuarioService;
import com.mercurio.lms.contratacaoveiculos.model.MeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.SolicitacaoContratacao;
import com.mercurio.lms.contratacaoveiculos.model.TipoMeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.service.EventoPuxadaService;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteService;
import com.mercurio.lms.contratacaoveiculos.model.service.SolicitacaoContratacaoService;
import com.mercurio.lms.contratacaoveiculos.model.service.TipoMeioTransporteService;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.ParcelaTabelaCe;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.TabelaColetaEntrega;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.service.ParcelaTabelaCeService;
import com.mercurio.lms.fretecarreteiroviagem.model.service.ReferenciaFreteCarreteiroService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.Rota;
import com.mercurio.lms.municipios.model.RotaIdaVolta;
import com.mercurio.lms.municipios.model.TipoMeioTranspRotaEvent;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.FluxoFilialService;
import com.mercurio.lms.municipios.model.service.RotaIdaVoltaService;
import com.mercurio.lms.municipios.model.service.RotaService;
import com.mercurio.lms.municipios.model.service.RotaViagemService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.workflow.model.Acao;
import com.mercurio.lms.workflow.model.Pendencia;
import com.mercurio.lms.workflow.model.service.AcaoService;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;


/**
 * Generated by: ADSM ActionGenerator
 *
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contratacaoveiculos.swt.manterSolicitacoesContratacaoAction"
 */ 

public class ManterSolicitacoesContratacaoAction extends CrudAction {
	private TipoMeioTransporteService tipoMeioTransporteService;
	private FilialService filialService;
	private UsuarioService usuarioService;
	private DomainValueService domainValueService;
	private ReferenciaFreteCarreteiroService referenciaFreteCarreteiroService;
	private MeioTransporteService meioTransporteService;
	private EnderecoPessoaService enderecoPessoaService;
	private RotaService rotaService;
	private ParcelaTabelaCeService parcelaTabelaCeService;
	private ConfiguracoesFacade configuracoesFacade;
	private RotaIdaVoltaService rotaIdaVoltaService;
	private FluxoFilialService fluxoFilialService;
	private AcaoService acaoService;
	private RotaViagemService rotaViagemService;
	private EventoPuxadaService eventoPuxadaService;
	public void setService(SolicitacaoContratacaoService serviceService) {
		this.defaultService = serviceService;
	}
	public SolicitacaoContratacaoService getSolicitacaoContratacaoService() {
		return (SolicitacaoContratacaoService)defaultService;
	}	
	
	public void removeById(java.lang.Long id) {
		getSolicitacaoContratacaoService().removeById(id);
	}
	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		getSolicitacaoContratacaoService().removeByIds(ids);
	}

	public Map findById(java.lang.Long id) {
		Map result = getSolicitacaoContratacaoService().findByIdView(id);
		MeioTransporte meioTransporte = null;
		if (result.get("nrIdentificacaoMeioTransp") != null) {
			meioTransporte = meioTransporteService.findMeioTransporteByIdentificacao((String)((Map)result.get("nrIdentificacaoMeioTransp")).get("nrPlaca"));
			if(meioTransporte != null) {
				Map nrIdentificacaoMeioTransp = ((Map)result.get("nrIdentificacaoMeioTransp"));
					nrIdentificacaoMeioTransp.put("nrFrota", meioTransporte.getNrFrota());
				result.put("nrIdentificacaoMeioTransp",nrIdentificacaoMeioTransp);
			}
		}
		if (result.get("nrIdentificacaoSemiReboque") != null) {
			meioTransporte = meioTransporteService.findMeioTransporteByIdentificacao((String)((Map)result.get("nrIdentificacaoSemiReboque")).get("nrPlaca"));
			if(meioTransporte != null) {
				Map nrIdentificacaoSemiReboque = ((Map)result.get("nrIdentificacaoSemiReboque"));
					nrIdentificacaoSemiReboque.put("nrFrota", meioTransporte.getNrFrota());
				result.put("nrIdentificacaoSemiReboque",nrIdentificacaoSemiReboque);
			}
		}
		Map tipoMeioTransporte = (Map)result.get("tipoMeioTransporte");
		if (tipoMeioTransporte != null) {
			result.put("idTipoMeioTransporteTemp",tipoMeioTransporte.get("idTipoMeioTransporte"));
			result.put("dsTipoMeioTransporteTemp",tipoMeioTransporte.get("dsTipoMeioTransporte"));
		}
		result.put("tpVinculoContratacao",((Map)result.get("tpVinculoContratacao")).get("value"));

		//Regras 3.8 .. 3.10
		String tpSituacaoContratacao = (String)((Map)result.get("tpSituacaoContratacao")).get("value");
		result.put("behavior",validBehavior(tpSituacaoContratacao,(Long)result.get("idPendencia")));

		if (result.get("idAcao") != null) {
			Acao acao = acaoService.findById((Long)result.get("idAcao"));
			Map usuarioMap = new HashMap();
			if(acao.getUsuario() != null) {
				usuarioMap.put("nmUsuario",acao.getUsuario().getNmUsuario());
				usuarioMap.put("nrMatricula",acao.getUsuario().getNrMatricula());
			}

			Map acaoMap = new HashMap();
			acaoMap.put("dhAcao",acao.getDhAcao());
			acaoMap.put("obAcao",acao.getObAcao());
			acaoMap.put("usuario",usuarioMap);

			result.put("acao",acaoMap);
		}

		if (((String)((Map)result.get("tpSolicitacaoContratacao")).get("value")).equals("V")) {
			//VIAGEM
			if (result.get("rota") != null) {
				StringTokenizer st = new StringTokenizer(rotaService.findById((Long)((Map)result.get("rota")).get("idRota")).getDsRota(), "-");
				List rotas = new ArrayList();

				while (st.hasMoreElements()) {
					Filial filial = filialService.findFilialPessoaBySgFilial((String)st.nextElement(),Boolean.TRUE);
					if (filial != null) {
						Map filialMap = new HashMap();
							filialMap.put("sgFilial",filial.getSgFilial());
							filialMap.put("idFilial",filial.getIdFilial());

						Map rotasMap = new HashMap();
							rotasMap.put("nmFilial",filial.getPessoa().getNmFantasia());
							rotasMap.put("filial",filialMap);
						rotas.add(rotasMap);
					}
				}
				result.put("rotas",rotas);
			}else if (result.get("idRotaIdaVolta") != null) {
				RotaIdaVolta r = rotaIdaVoltaService.findById((Long)result.get("idRotaIdaVolta"));
				Map rotaIdaVolta = new HashMap();
				rotaIdaVolta.put("idRotaIdaVolta",result.get("idRotaIdaVolta"));
				rotaIdaVolta.put("nrRota",r.getNrRota());
				rotaIdaVolta.put("dsRota",r.getRota().getDsRota());
				result.put("rotaIdaVolta",rotaIdaVolta);
				result.remove("idRotaIdaVolta");
			}
			result.remove("rota");
		}else{
			//COLETA ENTREGA
			TabelaColetaEntrega tce = getSolicitacaoContratacaoService().findTabelaCEByIdSolicitacao((Long)result.get("idSolicitacaoContratacao"));
			if (tce != null) {
				Map tabelaColetaEntregaMap = new HashMap();
				tabelaColetaEntregaMap.put("blDomingo",tce.getBlDomingo());
				tabelaColetaEntregaMap.put("blSegunda",tce.getBlSegunda());
				tabelaColetaEntregaMap.put("blTerca",tce.getBlTerca());
				tabelaColetaEntregaMap.put("blQuarta",tce.getBlQuarta());
				tabelaColetaEntregaMap.put("blQuinta",tce.getBlQuinta());
				tabelaColetaEntregaMap.put("blSexta",tce.getBlSexta());
				tabelaColetaEntregaMap.put("blSabado",tce.getBlSabado());
				
				tabelaColetaEntregaMap.put("dtVigenciaFinal",tce.getDtVigenciaFinal());
				tabelaColetaEntregaMap.put("dtVigenciaInicial",tce.getDtVigenciaInicial());
				tabelaColetaEntregaMap.put("hrDiariaInicial",tce.getHrDiariaInicial());
				tabelaColetaEntregaMap.put("idTabelaColetaEntrega",tce.getIdTabelaColetaEntrega());
				result.put("tabelaColetaEntrega",tabelaColetaEntregaMap);
			}
		}
		return result;
	}
	private Integer validBehavior(String tpSituacaoContratacao, Long idPendencia) {
		if (tpSituacaoContratacao.equals("SA")) {
			if (idPendencia != null) {
				List acoes = acaoService.findByPendencia(idPendencia);
				if (acoes.size() > 0)
					return Integer.valueOf("8");
				else
					return Integer.valueOf("0");
			}
			return null;
		}else if (tpSituacaoContratacao.equals("AN"))
			return Integer.valueOf("9");
		else if (tpSituacaoContratacao.equals("AP") || tpSituacaoContratacao.equals("RE") || tpSituacaoContratacao.equals("CA"))
			return Integer.valueOf("10");
		else 
			return Integer.valueOf("0");
	}

	public List findComboTpMeioTransporte(Map criteria) {
		List rs = tipoMeioTransporteService.find(criteria);
		List filtrado = new ArrayList();
		for (Iterator ie = rs.iterator(); ie.hasNext();) {
			TipoMeioTransporte tpMT = (TipoMeioTransporte)ie.next();
			Map result = new HashMap();
			result.put("idTipoMeioTransporte",tpMT.getIdTipoMeioTransporte());
			result.put("tpSituacao",tpMT.getTpSituacao());
			result.put("dsTipoMeioTransporte",tpMT.getDsTipoMeioTransporte());
			filtrado.add(result);
		}
		return filtrado;
	}
	
	public List findLookupFilial(Map criteria) {
		return filialService.findLookupFilial(criteria);
	}
	
	public List findLookupRotasViagem(TypedFlatMap tfm) {
		return rotaIdaVoltaService.findLookupRotaIdaVolta(tfm);
	}
 
	public List findLookupUsuario(TypedFlatMap tfm) {
		return usuarioService.findLookupUsuarioFuncionario(tfm.getLong("idUsuario"), tfm.getString("nrMatricula"), null, null, null, null, true);
	}
	public List findComboMoedaPais(TypedFlatMap criteria) {
		return configuracoesFacade.getMoedasPais(enderecoPessoaService.findEnderecoPessoaPadrao(criteria.getLong("idFilial")).getMunicipio().getUnidadeFederativa().getPais().getIdPais(),Boolean.TRUE);
	}
	
	public List findTpVeiculo(String tpSolicitacaoContratacao) {
		if (StringUtils.isBlank(tpSolicitacaoContratacao))
			return Collections.EMPTY_LIST;
		
		List list = domainValueService.findDomainValues("DM_TIPO_VINCULO_VEICULO",Boolean.TRUE);
		if (tpSolicitacaoContratacao.equals("C")) {
			for(int x = 0; x < list.size(); x++) {
				if (((DomainValue)list.get(x)).getValue().equals("P"))
					list.remove(x);
			}
		}
		return list;
	}
	public List findGridParcelas(TypedFlatMap criteria) {
		Long idTabelaColetaEntrega = criteria.getLong("idTabelaColetaEntrega");
		Long idTipoMeioTransporte = criteria.getLong("idTipoMeioTransporte");
		Long idFilial = criteria.getLong("idFilial");
		YearMonthDay date = criteria.getYearMonthDay("dtVigenciaInicial");

		if (date == null)
			date = JTDateTimeUtils.getDataAtual();

		List result = new ArrayList();

		//INCLUSAO
		for (int x = 0;x < SolicitacaoContratacaoService.values.length; x++) {
			TypedFlatMap resultT = new TypedFlatMap();
			resultT.put("tpParcela",domainValueService.findDomainValueByValue("DM_TIPO_PARCELA_FRETE_COLETA_ENTREGA",SolicitacaoContratacaoService.values[x]));

			if (idTabelaColetaEntrega == null) {
				if (idTipoMeioTransporte != null && idFilial != null) {

					ParcelaTabelaCe parcelas = getSolicitacaoContratacaoService().findParcelaTabelaCeByTpParcela(resultT.getDomainValue("tpParcela").getValue(),idTipoMeioTransporte,date,idFilial);
					if (parcelas != null)
						resultT.put("vlFreteReferencia",parcelas.getVlDefinido());
				}
			} else {
				ParcelaTabelaCe parcela = parcelaTabelaCeService.findParcelaTabelaCeByTpParcelaAndTabelaCE(resultT.getDomainValue("tpParcela").getValue(),idTabelaColetaEntrega);
				if (parcela == null) {
					if (idTipoMeioTransporte != null && date != null) {
						ParcelaTabelaCe parcelas = getSolicitacaoContratacaoService().findParcelaTabelaCeByTpParcela(resultT.getDomainValue("tpParcela").getValue(),idTabelaColetaEntrega,null,null);
						if (parcelas != null)
							resultT.put("vlFreteReferencia",parcelas.getVlDefinido());
					}
				} else {
					resultT.put("idParcelaTabelaCe",parcela.getIdParcelaTabelaCe());
					resultT.put("vlSugerido",parcela.getVlSugerido());
					resultT.put("vlMaximoAprovado",parcela.getVlMaximoAprovado());
					resultT.put("vlNegociado",parcela.getVlNegociado());
					resultT.put("vlFreteReferencia",parcela.getVlReferencia());
				}
			}
			result.add(resultT);
		}
		return result; 
	}

	public Integer getRowCountGridParcelas(TypedFlatMap criteria) {
		return Integer.valueOf(SolicitacaoContratacaoService.values.length);
	}

	public ResultSetPage findPaginated(Map criteria) {
		ResultSetPage resultSetPage = getSolicitacaoContratacaoService().findPaginated(createFindCriteria(criteria));
		List listReturn = new ArrayList();
		for (Iterator iter = resultSetPage.getList().iterator(); iter.hasNext();) {
			Map map = (HashMap) iter.next();			
			Map mapReturn = new HashMap();

			Map tipoMeioTransporte = (Map)map.get("tipoMeioTransporte");
			Map usuarioSolicitador = (Map)map.get("usuarioSolicitador");
			mapReturn.put("idSolicitacaoContratacao", map.get("idSolicitacaoContratacao"));
			mapReturn.put("tpSolicitacaoContratacao", map.get("tpSolicitacaoContratacao"));
			mapReturn.put("nrSolicitacaoContratacao", map.get("nrSolicitacaoContratacao"));
			mapReturn.put("tpMeioTransporte", tipoMeioTransporte.get("tpMeioTransporte"));
			mapReturn.put("dsTipoMeioTransporte", tipoMeioTransporte.get("dsTipoMeioTransporte"));
			mapReturn.put("nrFrota", map.get("nrFrota"));
			mapReturn.put("nrIdentificacaoMeioTransp", map.get("nrIdentificacaoMeioTransp"));
			mapReturn.put("nmUsuario", usuarioSolicitador.get("nmUsuario"));
			mapReturn.put("dtCriacao", map.get("dtCriacao"));
			mapReturn.put("tpSituacaoContratacao", map.get("tpSituacaoContratacao"));
			
			Map mapFilial = (Map)map.get("filial");
			Map mapPessoaFilial = (Map)mapFilial.get("pessoa");
			mapReturn.put("idFilial", mapFilial.get("idFilial"));
			mapReturn.put("sgFilial", mapFilial.get("sgFilial"));
			mapReturn.put("nmFantasia", mapPessoaFilial.get("nmFantasia"));
			listReturn.add(mapReturn);
		}

		resultSetPage.setList(listReturn);		
		return resultSetPage;		
	}

	public Integer getRowCount(TypedFlatMap criteria) {
		return getSolicitacaoContratacaoService().getRowCount(createFindCriteria(criteria));
	}

	/**
	 * Cria mapa com filtros para pesquisa.
	 * @param criteria
	 * @return
	 */
	private TypedFlatMap createFindCriteria(Map criteria) {
		TypedFlatMap mapCriteria = new TypedFlatMap();
		mapCriteria.put("_currentPage", criteria.get("_currentPage"));
		mapCriteria.put("_pageSize", criteria.get("_pageSize"));
		mapCriteria.put("_order", criteria.get("_order"));

		mapCriteria.put("filial.idFilial", criteria.get("idFilial"));
		mapCriteria.put("tpSolicitacaoContratacao", criteria.get("tpSolicitacaoContratacao"));
		mapCriteria.put("nrSolicitacaoContratacao", criteria.get("nrSolicitacaoContratacao"));
		mapCriteria.put("nrIdentificacaoMeioTransp.nrFrota", criteria.get("nrFrotaMeioTransporte"));
		mapCriteria.put("nrIdentificacaoMeioTransp.nrPlaca", criteria.get("nrPlacaMeioTransporte"));
		mapCriteria.put("nrIdentificacaoMeioTransp.anoFabricacao", criteria.get("anoFabricacaoMeioTransporte"));
		mapCriteria.put("nrIdentificacaoSemiReboque.nrFrota", criteria.get("nrFrotaSemiRebocado"));
		mapCriteria.put("nrIdentificacaoSemiReboque.nrPlaca", criteria.get("nrPlacaSemiRebocado"));
		mapCriteria.put("nrIdentificacaoSemiReboque.anoFabricacao", criteria.get("anoFabricacaoSemiRebocado"));
		mapCriteria.put("tipoMeioTransporte.idTipoMeioTransporte", criteria.get("idTipoMeioTransporte"));
		mapCriteria.put("tipoMeioTransporte.tpMeioTransporte", criteria.get("tpMeioTransporte"));
		mapCriteria.put("dtInicioContratacao", criteria.get("dtInicioContratacao"));
		mapCriteria.put("dtFimContratacao", criteria.get("dtFimContratacao"));
		mapCriteria.put("blIndicadorRastreamento", criteria.get("blIndicadorRastreamento"));
 		mapCriteria.put("usuario.idUsuario", criteria.get("idUsuario"));
		mapCriteria.put("tpSituacaoContratacao", criteria.get("tpSituacaoContratacao"));

		return mapCriteria;
	}

	public TypedFlatMap store(TypedFlatMap parameters) {
		List list = new ArrayList();

		Filial filial = new Filial();
		filial.setIdFilial(parameters.getLong("filial.idFilial"));

		MoedaPais moedaPais = new MoedaPais();
		moedaPais.setIdMoedaPais(parameters.getLong("moedaPais.idMoedaPais"));

		TipoMeioTransporte tipoMeioTransporte = new TipoMeioTransporte();
		tipoMeioTransporte.setIdTipoMeioTransporte(parameters.getLong("tipoMeioTransporte.idTipoMeioTransporte"));

		RotaIdaVolta rotaIdaVolta = null;
		if (parameters.getLong("rotaIdaVolta.idRotaIdaVolta") != null) {
			rotaIdaVolta = rotaIdaVoltaService.findById(parameters.getLong("rotaIdaVolta.idRotaIdaVolta"));
		}

		SolicitacaoContratacao bean = new SolicitacaoContratacao();
		bean.setIdSolicitacaoContratacao(parameters.getLong("idSolicitacaoContratacao"));
		bean.setTpSolicitacaoContratacao(parameters.getDomainValue("tpSolicitacaoContratacao"));
		bean.setTpVinculoContratacao(parameters.getDomainValue("tpVinculoContratacao"));
		bean.setNrSolicitacaoContratacao(parameters.getLong("nrSolicitacaoContratacao"));
		bean.setBlIndicadorRastreamento(parameters.getBoolean("blIndicadorRastreamento"));
		bean.setObObservacao(parameters.getString("obObservacao"));
		bean.setDtCriacao(parameters.getYearMonthDay("dtCriacao"));
		bean.setTpRotaSolicitacao(parameters.getDomainValue("tpRotaSolicitacao"));
		bean.setFilial(filial);
		bean.setRotaIdaVolta(rotaIdaVolta);
		bean.setTipoMeioTransporte(tipoMeioTransporte);
		bean.setMoedaPais(moedaPais);
		bean.setNrIdentificacaoMeioTransp(parameters.getString("nrIdentificacaoMeioTransp.nrPlaca"));
		bean.setNrIdentificacaoSemiReboque(parameters.getString("nrIdentificacaoSemiReboque.nrPlaca"));
		bean.setNrAnoFabricacaoMeioTransporteSemiReboque(parameters.getLong("nrAnoFabricacaoMeioTransporteSemiReboque"));
		bean.setNrAnoFabricacaoMeioTransporte(parameters.getLong("nrAnoFabricacaoMeioTransporte"));
		bean.setTpSituacaoContratacao(parameters.getDomainValue("tpSituacaoContratacao"));
		bean.setNrDddSolicitante(parameters.getString("nrDddSolicitante"));
		bean.setNrTelefoneSolicitante(parameters.getString("nrTelefoneSolicitante"));

		if (parameters.getLong("usuarioSolicitador.idUsuario") != null) {
			Usuario usuario = new Usuario();
			usuario.setIdUsuario(parameters.getLong("usuarioSolicitador.idUsuario"));
			bean.setUsuarioSolicitador(usuario);
		}

		if (parameters.getLong("idPendencia") != null) {
			Pendencia pendencia = new Pendencia();
			pendencia.setIdPendencia(parameters.getLong("idPendencia"));
			bean.setPendencia(pendencia);
		}

		if (parameters.getLong("idAcao") != null) {
			Acao acao = new Acao();
			acao.setIdAcao(parameters.getLong("idAcao"));
			bean.setAcao(acao);
		}

		if (bean.getTpSolicitacaoContratacao().getValue().equals("V")) {
			bean.setDtViagem(parameters.getYearMonthDay("dtViagem"));
			bean.setVlFreteSugerido(parameters.getBigDecimal("vlFreteSugerido"));
			bean.setVlFreteMaximoAutorizado(parameters.getBigDecimal("vlFreteMaximoAutorizado"));
			bean.setVlFreteNegociado(parameters.getBigDecimal("vlFreteNegociado"));

			if (parameters.getString("tpRotaSolicitacao") != null && parameters.getString("tpRotaSolicitacao").equals("EV")) {
				List tempRota = parameters.getList("rotas");

				if (tempRota == null || tempRota.size() < 2)
					throw new BusinessException("LMS-26066");

				if (!bean.getFilial().getIdFilial().equals(((TypedFlatMap)tempRota.get(0)).getLong("filial.idFilial")))
					throw new BusinessException("LMS-26071");

				StringBuffer dsRota = new StringBuffer();
				for(Iterator ie = tempRota.iterator(); ie.hasNext();) {
					TypedFlatMap filialMap = (TypedFlatMap)ie.next();
					Filial filial2 = new Filial();
					filial2.setIdFilial(filialMap.getLong("filial.idFilial"));
					filial2.setSgFilial(filialMap.getString("filial.sgFilial"));

					list.add(filial2);
					dsRota.append(((dsRota.length() != 0) ? "-" : "")).append(filial2.getSgFilial());
				}

				Rota rota = rotaService.storeValidaByFiliais(list);
				if(rota.getIdRota() != null) {
					rota.setIdRota(rota.getIdRota());
					bean.setRota(rota);
				}
			}
		} else {
			bean.setNrIdentificacaoMeioTransp(parameters.getString("nrIdentificacaoMeioTransp.nrPlaca"));
			bean.setNrAnoFabricacaoMeioTransporte(parameters.getLong("nrAnoFabricacaoMeioTransporte"));
			bean.setNrIdentificacaoSemiReboque(parameters.getString("nrIdentificacaoSemiReboque.nrPlaca"));
			bean.setNrAnoFabricacaoMeioTransporteSemiReboque(parameters.getLong("nrAnoFabricacaoMeioTransporteSemiReboque"));

			if (!bean.getTpVinculoContratacao().getValue().equals("A")) {
				TabelaColetaEntrega tabelaColetaEntrega = new TabelaColetaEntrega();
				tabelaColetaEntrega.setIdTabelaColetaEntrega(parameters.getLong("tabelaColetaEntrega.idTabelaColetaEntrega"));
				tabelaColetaEntrega.setBlDomingo(parameters.getBoolean("tabelaColetaEntrega.blDomingo"));
				tabelaColetaEntrega.setBlSegunda(parameters.getBoolean("tabelaColetaEntrega.blSegunda"));
				tabelaColetaEntrega.setBlTerca(parameters.getBoolean("tabelaColetaEntrega.blTerca"));
				tabelaColetaEntrega.setBlQuarta(parameters.getBoolean("tabelaColetaEntrega.blQuarta"));
				tabelaColetaEntrega.setBlQuinta(parameters.getBoolean("tabelaColetaEntrega.blQuinta"));
				tabelaColetaEntrega.setBlSexta(parameters.getBoolean("tabelaColetaEntrega.blSexta"));
				tabelaColetaEntrega.setBlSabado(parameters.getBoolean("tabelaColetaEntrega.blSabado"));
				tabelaColetaEntrega.setHrDiariaInicial(parameters.getTimeOfDay("tabelaColetaEntrega.hrDiariaInicial"));
				tabelaColetaEntrega.setDtVigenciaInicial(parameters.getYearMonthDay("tabelaColetaEntrega.dtVigenciaInicial"));
				tabelaColetaEntrega.setDtVigenciaFinal(parameters.getYearMonthDay("tabelaColetaEntrega.dtVigenciaFinal"));
				tabelaColetaEntrega.setTipoMeioTransporte(tipoMeioTransporte);
				if(!tabelaColetaEntrega.getBlDomingo().booleanValue() && !tabelaColetaEntrega.getBlQuarta().booleanValue() &&
						!tabelaColetaEntrega.getBlQuinta().booleanValue() && !tabelaColetaEntrega.getBlSabado().booleanValue() &&
						!tabelaColetaEntrega.getBlSegunda().booleanValue() && !tabelaColetaEntrega.getBlSexta().booleanValue() &&
						!tabelaColetaEntrega.getBlTerca().booleanValue())
						throw new BusinessException("LMS-29020");

				if (tabelaColetaEntrega.getDtVigenciaInicial() == null || tabelaColetaEntrega.getDtVigenciaFinal() == null)
					throw new BusinessException("LMS-29153");

				if (parameters.getList("ParcelaTabelaCe") != null) {
					for (int x = 0; x < SolicitacaoContratacaoService.values.length; x++) {
						if (parameters.getBigDecimal((new StringBuffer("ParcelaTabelaCe:")).append(x).append(".vlSugerido").toString()) != null) {
							ParcelaTabelaCe parcelaTabelaCe = new ParcelaTabelaCe();
											Long id = parameters.getLong((new StringBuffer("ParcelaTabelaCe:")).append(x).append(".id").toString());
											DomainValue tpParcela = parameters.getDomainValue((new StringBuffer("ParcelaTabelaCe:")).append(x).append(".tpParcela.value").toString());
											parcelaTabelaCe.setIdParcelaTabelaCe(id);
											parcelaTabelaCe.setTpParcela(tpParcela);

											if (id == null) {
												ParcelaTabelaCe parcelas = getSolicitacaoContratacaoService().findParcelaTabelaCeByTpParcela(tpParcela.getValue(),tabelaColetaEntrega.getTipoMeioTransporte().getIdTipoMeioTransporte(),tabelaColetaEntrega.getDtVigenciaInicial(),filial.getIdFilial());
												if (parcelas != null)
													parcelaTabelaCe.setVlReferencia(parcelas.getVlDefinido());
											} else	
												parcelaTabelaCe.setVlReferencia(parameters.getBigDecimal(
														(new StringBuffer("ParcelaTabelaCe:")).append(x).append(".vlFreteReferencia").toString()));

											parcelaTabelaCe.setVlSugerido(parameters.getBigDecimal(
													(new StringBuffer("ParcelaTabelaCe:")).append(x).append(".vlSugerido").toString()));
											parcelaTabelaCe.setVlMaximoAprovado(parameters.getBigDecimal(
													(new StringBuffer("ParcelaTabelaCe:")).append(x).append(".vlMaximoAprovado").toString()));
											parcelaTabelaCe.setVlNegociado(parameters.getBigDecimal(
													(new StringBuffer("ParcelaTabelaCe:")).append(x).append(".vlNegociado").toString()));
											parcelaTabelaCe.setTabelaColetaEntrega(tabelaColetaEntrega);
						list.add(parcelaTabelaCe);
						}
					}
				} else
					list.add(tabelaColetaEntrega);

				if (list.size() != SolicitacaoContratacaoService.values.length || list.get(0) instanceof TabelaColetaEntrega)
					throw new BusinessException("LMS-26036");
			}
		}
		
		SolicitacaoContratacao sc = getSolicitacaoContratacaoService().store(bean,list);
		
		if("P".equals(sc.getTpSolicitacaoContratacao().getValue())){
			eventoPuxadaService.generateEventoPuxada(sc, "GE");
		}

		TypedFlatMap result = new TypedFlatMap();

		if (parameters.getDomainValue("tpSituacaoContratacao") != null &&
				parameters.getDomainValue("tpSituacaoContratacao").getValue().equals("SA")) {

			if (bean.getTpSolicitacaoContratacao().getValue().equals("V")) {
				if (bean.getVlFreteMaximoAutorizado() != null &&
						bean.getVlFreteSugerido() != null &&
						bean.getVlFreteMaximoAutorizado().compareTo(bean.getVlFreteSugerido()) > 0)
					result.put("excedeuSugerido",Boolean.TRUE);
			} else {
				for (Iterator i = list.iterator(); i.hasNext();) {
					ParcelaTabelaCe parcela = (ParcelaTabelaCe)i.next();
					if (parcela.getVlSugerido() != null &&
							parcela.getVlMaximoAprovado() != null &&
							parcela.getVlMaximoAprovado().compareTo(parcela.getVlSugerido()) > 0) {
							result.put("excedeuSugerido",Boolean.TRUE);
							break;
					}
				}
			}
		}
		result.put("tpSituacaoContratacao",bean.getTpSituacaoContratacao().getValue());
		result.put("idSolicitacaoContratacao",bean.getIdSolicitacaoContratacao());
		result.put("nrSolicitacaoContratacao",bean.getNrSolicitacaoContratacao());
		result.put("nrAnoFabricacaoMeioTransporte",bean.getNrAnoFabricacaoMeioTransporte());
		result.put("nrAnoFabricacaoMeioTransporteSemiReboque",bean.getNrAnoFabricacaoMeioTransporteSemiReboque());
		result.put("dtCriacao",bean.getDtCriacao());
		result.put("behavior",validBehavior(bean.getTpSituacaoContratacao().getValue(),((bean.getPendencia() == null) ? null : bean.getPendencia().getIdPendencia())));

		if (bean.getPendencia() != null)
			result.put("idPendencia",bean.getPendencia().getIdPendencia());
		if (list != null && list.size() > 0 && list.get(0) instanceof ParcelaTabelaCe) {
			List parcelas = new ArrayList();
			result.put("tabelaColetaEntrega.idTabelaColetaEntrega",((ParcelaTabelaCe)list.get(0)).getTabelaColetaEntrega().getIdTabelaColetaEntrega());
			for(int x = 0; x < list.size(); x++) {
				ParcelaTabelaCe parcela = (ParcelaTabelaCe)list.get(x);
				TypedFlatMap row = new TypedFlatMap();
				row.put("id",parcela.getIdParcelaTabelaCe());
				row.put("vlRef",parcela.getVlReferencia());
				parcelas.add(row);
			}
			result.put("Parcela",parcelas);
		}else if (list != null && list.size() > 0 && list.get(0) instanceof TabelaColetaEntrega)
			result.put("tabelaColetaEntrega.idTabelaColetaEntrega",((TabelaColetaEntrega)list.get(0)).getIdTabelaColetaEntrega());
		return result;
	}

	public TypedFlatMap validateTipoMeioTransporte(Long idTipoMeioTransporte) {
		TypedFlatMap result = new TypedFlatMap();
		TipoMeioTransporte tpMeioTransporte = tipoMeioTransporteService.findById(idTipoMeioTransporte);
		if (tpMeioTransporte.getTipoMeioTransporte() != null)
			result.put("idComposto",tpMeioTransporte.getTipoMeioTransporte().getIdTipoMeioTransporte());

		return result;
	}

	public List<Map<String, Object>> findMeioTransporte(String nrIdentificador) {
		nrIdentificador = nrIdentificador.toUpperCase();
		Map<String, Object> map = new HashMap();
		List<Map<String, Object>> result = new ArrayList<Map<String,Object>>(1);

		MeioTransporte meioTransporte = meioTransporteService.findMeioTransporteByIdentificacao(nrIdentificador);
		if(meioTransporte != null) {
			map.put("nrFrotaMeioTransporte", meioTransporte.getNrFrota());
			map.put("nrPlacaMeioTransporte", meioTransporte.getNrIdentificador());
			map.put("anoFabricacaoMeioTransporte", meioTransporte.getNrAnoFabricao());
			map.put("idTipoMeioTransporte", meioTransporte.getModeloMeioTransporte().getTipoMeioTransporte().getIdTipoMeioTransporte());
			map.put("tpVinculoMeioTransporte", meioTransporte.getTpVinculo().getValue());
			result.add(map);
		}
		return result;
	}

	public List findSemiRebocado(String nrIdentificador) {
		nrIdentificador = nrIdentificador.toUpperCase();
		Map<String, Object> map = new HashMap();
		List<Map<String, Object>> result = new ArrayList<Map<String,Object>>(1);
		MeioTransporte meioTransporte = meioTransporteService.findMeioTransporteByIdentificacao(nrIdentificador);
		if(meioTransporte != null) {
			map.put("nrFrotaSemiRebocado", meioTransporte.getNrFrota());
			map.put("nrPlacaSemiRebocado", meioTransporte.getNrIdentificador());
			map.put("anoFabricacaoSemiRebocado", meioTransporte.getNrAnoFabricao());
			map.put("idTipoSemiRebocado", meioTransporte.getModeloMeioTransporte().getTipoMeioTransporte().getIdTipoMeioTransporte());
			map.put("tpVinculoSemiRebocado", meioTransporte.getTpVinculo().getValue());
			result.add(map);
		}
		return result;
	}	

	public TypedFlatMap findVlSugeridoToRota(TypedFlatMap criteria) {
		String dsRota = criteria.getString("dsRota");
		String idFiliais = criteria.getString("idFiliais");
		Long idTipoMeioTransporte = criteria.getLong("tpMeioTransporte");
		Long idMoedaPais = criteria.getLong("idMoedaPais");

		TypedFlatMap result = new TypedFlatMap();

		List list = new ArrayList();
		String[] ids = idFiliais.split("-");
		Integer nrDistancia = Integer.valueOf(0);
		if (ids.length > 1) {
			for(int x = 0; x < ids.length; x++) {
				Filial bean = new Filial();
				bean.setIdFilial(Long.valueOf(ids[x]));
				list.add(bean);
			}
			nrDistancia = fluxoFilialService.findDistanciaTotalFluxoFilialOrigemDestino(list,JTDateTimeUtils.getDataAtual());
			BigDecimal tempoViagem = new BigDecimal(nrDistancia.doubleValue()).divide((BigDecimal)configuracoesFacade.getValorParametro("RELACAO_TEMPO_DISTANCIA_PADRAO"),2,BigDecimal.ROUND_UP);
			if (tempoViagem != null) {
				Long tpViagem = Long.valueOf(tempoViagem.multiply(BigDecimal.valueOf(60)).setScale(0,BigDecimal.ROUND_HALF_UP).longValue());
				if (!tpViagem.equals(Long.valueOf(0)))
					result.put("hrTempViagem",FormatUtils.converteMinutosParaHorasMinutos(tpViagem,FormatUtils.ESCALA_HHH));
				else
					result.put("hrTempViagem","");
			}
			if (nrDistancia != null && !nrDistancia.equals(Integer.valueOf(0)))
				result.put("nrDistancia",nrDistancia);
			else
				result.put("nrDistancia","");
		}

		String vlFrete = "vlFreteReferencia";

		//findReferenciaFreteCarreteiro(Long idUfOrigem, Long idUfDestino, Long idFilialOrigem, Long idFilialDestino, Long idMoeda)
		//3.3
		List rs = getSolicitacaoContratacaoService().findRotaViagemVigente(idTipoMeioTransporte,dsRota,idMoedaPais);
		if (rs.size() != 0) {
			TipoMeioTranspRotaEvent tipoMeioTranspRotaEvent = (TipoMeioTranspRotaEvent)rs.get(0);
			result.put(vlFrete,
					tipoMeioTranspRotaEvent.getVlFrete().multiply(new BigDecimal(tipoMeioTranspRotaEvent.getRotaIdaVolta().getNrDistancia().intValue())));
			return result;
		} else {
			String[] idFilial = idFiliais.split("-");
			BigDecimal vlFreteSugerido;

			vlFreteSugerido = referenciaFreteCarreteiroService.findValorFreteCarreteiroByUfsFiliais(
					null,
					null,
					Long.valueOf(idFilial[0]),
					Long.valueOf(idFilial[idFilial.length - 1]),
					idMoedaPais,
					idTipoMeioTransporte,
					null
			);
			if (vlFreteSugerido != null)
				result.put(vlFrete,vlFreteSugerido);	
			else{
				//3.5
				EnderecoPessoa epO = enderecoPessoaService.findEnderecoPessoaPadrao(Long.valueOf(idFilial[0]));
				EnderecoPessoa epD = enderecoPessoaService.findEnderecoPessoaPadrao(Long.valueOf(idFilial[idFilial.length - 1]));
				Long idEpO = ((epO != null) ? epO.getMunicipio().getUnidadeFederativa().getIdUnidadeFederativa() : null);
				Long idEpD = ((epD != null) ? epD.getMunicipio().getUnidadeFederativa().getIdUnidadeFederativa() : null);
				vlFreteSugerido	= referenciaFreteCarreteiroService.findValorFreteCarreteiroByUfsFiliais(
						idEpO,
						idEpD,
						null,
						null,
						idMoedaPais,
						idTipoMeioTransporte,
						nrDistancia
				);
				if (vlFreteSugerido != null)
					result.put(vlFrete,vlFreteSugerido);
				else{
					//3.6
					vlFreteSugerido	= referenciaFreteCarreteiroService.findValorFreteCarreteiroByUfsFiliais(
							null,
							null,
							null,
							null,
							idMoedaPais,
							idTipoMeioTransporte,
							nrDistancia
					);
					if (vlFreteSugerido != null)
						result.put(vlFrete,vlFreteSugerido);
				}
			}
			BigDecimal vlFreteTemp = result.getBigDecimal(vlFrete);
			if (vlFreteTemp == null || vlFreteTemp.equals(BigDecimal.ZERO))
				result.put(vlFrete,"");
		}
		return result;
	}

	public TypedFlatMap findVlSugeridoToRotaExpressa(Long idRotaIdaVolta) {
		RotaIdaVolta rota = rotaIdaVoltaService.findById(idRotaIdaVolta);

		TypedFlatMap result = new TypedFlatMap();
		BigDecimal vlFreteKm = rota.getVlFreteKm();
		if (vlFreteKm == null)
			vlFreteKm = BigDecimal.valueOf(0);
		BigDecimal value = vlFreteKm.multiply(new BigDecimal(rota.getNrDistancia().doubleValue()));
		if (value != null && !value.equals(BigDecimal.ZERO))
			result.put("vlFreteReferencia",value);
		else
			result.put("vlFreteReferencia","");

		result.put("vlFreteSugerido",value);

		if (rota.getNrDistancia() != null && !rota.getNrDistancia().equals(Integer.valueOf(0)))
			result.put("nrDistancia",rota.getNrDistancia());
		else
			result.put("nrDistancia","");

		Integer nrTempoViagem = rotaViagemService.findMaiorTempoViagemOfRota(idRotaIdaVolta);
		if (!nrTempoViagem.equals(Integer.valueOf(0))) {
			result.put("hrTempViagem",FormatUtils.converteMinutosParaHorasMinutos(
						Long.valueOf(nrTempoViagem.longValue()),FormatUtils.ESCALA_HHH));
		} else {
			result.put("hrTempViagem","");
		}

		return result;
	}

	public TypedFlatMap findDataSession() {
		Usuario usuario = SessionUtils.getUsuarioLogado();
		Filial filial = SessionUtils.getFilialSessao();
		TypedFlatMap result = new TypedFlatMap();
		result.put("usuario.idUsuario",usuario.getIdUsuario());
		result.put("usuario.nmUsuario",usuario.getNmUsuario());
		result.put("usuario.nrMatricula",usuario.getNrMatricula());
		result.put("filial.idFilial",filial.getIdFilial());
		result.put("filial.sgFilial",filial.getSgFilial());
		result.put("filial.pessoa.nmFantasia",filial.getPessoa().getNmFantasia());
		return result;
	}

	public TypedFlatMap executeCancel(Long idSolicitacaoContratacao) {
		getSolicitacaoContratacaoService().executeCancel(idSolicitacaoContratacao);
		TypedFlatMap result = new TypedFlatMap();
		DomainValue cancelado = domainValueService.findDomainValueByValue("DM_SITUACAO_SOLICITACAO_CONTRATACAO","CA");

		result.put("behavior",validBehavior(cancelado.getValue(),null));
		result.put("tpSituacaoContratacao.value",cancelado.getValue());
		result.put("tpSituacaoContratacao.description",cancelado.getDescription());

		return result;
	}

	public void setTipoMeioTransporteService(TipoMeioTransporteService tipoMeioTransporteService) {
		this.tipoMeioTransporteService = tipoMeioTransporteService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}
	public void setReferenciaFreteCarreteiroService(ReferenciaFreteCarreteiroService referenciaFreteCarreteiroService) {
		this.referenciaFreteCarreteiroService = referenciaFreteCarreteiroService;
	}
	public void setMeioTransporteService(MeioTransporteService meioTransporteService) {
		this.meioTransporteService = meioTransporteService;
	}
	public void setEnderecoPessoaService(EnderecoPessoaService enderecoPessoaService) {
		this.enderecoPessoaService = enderecoPessoaService;
	}
	public void setRotaService(RotaService rotaService) {
		this.rotaService = rotaService; 
	}
	public void setParcelaTabelaCeService(ParcelaTabelaCeService parcelaTabelaCeService) {
		this.parcelaTabelaCeService = parcelaTabelaCeService;
	}
	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}
	public void setRotaIdaVoltaService(RotaIdaVoltaService rotaIdaVoltaService) {
		this.rotaIdaVoltaService = rotaIdaVoltaService;
	}
	public void setFluxoFilialService(FluxoFilialService fluxoFilialService) {
		this.fluxoFilialService = fluxoFilialService;
	}
	public void setAcaoService(AcaoService acaoService) {
		this.acaoService = acaoService;
	}
	public void setRotaViagemService(RotaViagemService rotaViagemService) {
		this.rotaViagemService = rotaViagemService;
	}
	public void setUsuarioService(UsuarioService usuarioService) {
		this.usuarioService = usuarioService;
	}
	/**
	 * @param eventoPuxadaService the eventoPuxadaService to set
	 */
	public void setEventoPuxadaService(EventoPuxadaService eventoPuxadaService) {
		this.eventoPuxadaService = eventoPuxadaService;
	}
	
}
