package com.mercurio.lms.contratacaoveiculos.swt.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.contratacaoveiculos.model.Proprietario;
import com.mercurio.lms.contratacaoveiculos.model.service.ProprietarioService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.PessoaUtils;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contratacaoveiculos.swt.manterProprietariosAction"
 */
 
public class ManterProprietariosAction extends CrudAction {
	private FilialService filialService;
	
	public void setProprietario(ProprietarioService proprietarioService) {
		this.defaultService = proprietarioService;
	}
	 
	public Map findByIdDetalhamento(Long id) {
		return getProprietarioService().findByIdDetalhamento(id);
	}
	
	public ResultSetPage findPaginatedCustom(Map criteria) {
		ResultSetPage resultSetPage = getProprietarioService().findPaginatedCustom(createFindCriteria(criteria));
		List listReturn = new ArrayList();
		for (Iterator iter = resultSetPage.getList().iterator(); iter.hasNext();) {
			TypedFlatMap tfmReturn = (TypedFlatMap) iter.next();			
			Map mapReturn = new HashMap();

			mapReturn.put("idProprietario", tfmReturn.get("idProprietario"));			
			mapReturn.put("sgFilial", tfmReturn.get("filial.sgFilial"));
			mapReturn.put("nmFantasiaFilial", tfmReturn.get("filial.pessoa.nmFantasia"));
			mapReturn.put("tpIdentificacaoPessoa", tfmReturn.get("pessoa.tpIdentificacao.description"));
			mapReturn.put("nrIdentificacao", tfmReturn.get("pessoa.nrIdentificacaoFormatado"));
			mapReturn.put("nrIdentificacaoFormatadoPessoa", tfmReturn.get("pessoa.nrIdentificacaoFormatado"));
			mapReturn.put("nmPessoa", tfmReturn.get("pessoa.nmPessoa"));
			mapReturn.put("tpSituacao", tfmReturn.get("tpSituacao.description"));
			mapReturn.put("tpPeriodoPagto", tfmReturn.get("tpPeriodoPagto.description"));
			mapReturn.put("diaSemana", tfmReturn.get("diaSemana.description"));
			
			listReturn.add(mapReturn);
		}
		
		resultSetPage.setList(listReturn);		
		return resultSetPage;
	}
	
	public Integer getRowCountCustom(Map criteria) {
		return getProprietarioService().getRowCountCustom(createFindCriteria(criteria));
	}
	
    /**
     * Cria mapa com filtros para pesquisa.
     * @param criteria
     * @return
     */
	private TypedFlatMap createFindCriteria(Map criteria) {
		TypedFlatMap mapCriteria = new TypedFlatMap();
		mapCriteria.put("_currentPage", criteria.get("_currentPage"));
    	mapCriteria.put("_pageSize", criteria.get("_pageSize"));
    	mapCriteria.put("_order", criteria.get("_order"));
    	
    	mapCriteria.put("tpSituacao", criteria.get("tpSituacao"));
    	mapCriteria.put("filial.idFilial", criteria.get("idFilial"));
    	mapCriteria.put("tpPeriodoPagto", criteria.get("tpPeriodoPagto"));
    	mapCriteria.put("tpProprietario", criteria.get("tpProprietario"));
    	mapCriteria.put("pessoa.tpPessoa", criteria.get("tpPessoa"));
    	mapCriteria.put("pessoa.tpIdentificacao", criteria.get("tpIdentificacao"));
		if (StringUtils.isNotBlank((String)criteria.get("nrIdentificacao"))) {
			mapCriteria.put("pessoa.nrIdentificacao", PessoaUtils.validateIdentificacao((String)criteria.get("nrIdentificacao")));
		}
    	mapCriteria.put("pessoa.nmPessoa", criteria.get("nmPessoa"));
    	mapCriteria.put("beneficiario.idBeneficiario", criteria.get("idBeneficiario"));    	
    	mapCriteria.put("diaSemana", criteria.get("diaSemana"));
    	mapCriteria.put("dtAtualizacaoInicial", criteria.get("dtAtualizacaoInicial"));
    	mapCriteria.put("dtAtualizacaoFinal", criteria.get("dtAtualizacaoFinal"));
    	mapCriteria.put("beneficiario.idBeneficiario", criteria.get("idBeneficiario"));
    			
    	return mapCriteria;
	}  	
	
	
	/**
	 * @param bean entidade a ser armazenada.
	 * @return entidade que foi armazenada.
	 */
    public Map store(Proprietario bean) {
		return getProprietarioService().store(bean);
	}
	
	/**
	 * @param id indica a entidade que deverá ser removida.
	 */
    public void removeById(Serializable id) {
		getProprietarioService().removeById((Long)id);
	}
	
	/**
     * @param ids Lista de ids das Rota
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	getProprietarioService().removeByIds(ids);
    }
	
	private ProprietarioService getProprietarioService() {
		return (ProprietarioService)defaultService;
	}
	
	public List findLookupFilial(Map criteria) {
		return filialService.findLookup(criteria);
	}
	
	public List validateIdentificacao(TypedFlatMap map) {
		return getProprietarioService().validateIdentificacao(map);
	}
	
	public List findDiasUteisPagamentoSemanal() {
		return getProprietarioService().findDiasUteisPagamentoSemanal();
	}
	
	public Map validateBloqueiosVigentes(Long idProprietario) {
		return getProprietarioService().validateBloqueiosVigentes(idProprietario);
	}
	
	public void removeProprietarioById(Long id) { 
		getProprietarioService().removeProprietarioById(id);
	}
	
	public TypedFlatMap findFilialUsuarioLogado() { 
		Filial bean = SessionUtils.getFilialSessao();
		TypedFlatMap result = new TypedFlatMap(); 
		
		result.put("idFilial",bean.getIdFilial());
		result.put("sgFilial",bean.getSgFilial());
		result.put("pessoa.nmFantasia",bean.getPessoa().getNmFantasia());

		return result;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	}
