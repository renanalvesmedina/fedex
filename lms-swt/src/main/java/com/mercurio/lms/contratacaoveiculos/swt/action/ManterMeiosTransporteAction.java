package com.mercurio.lms.contratacaoveiculos.swt.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;


import com.mercurio.adsm.core.util.Base64Util;
import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.contratacaoveiculos.model.EixosTipoMeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.FotoMeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.MarcaMeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.MeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.MeioTransporteRodoviario;
import com.mercurio.lms.contratacaoveiculos.model.ModeloMeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.OperadoraMct;
import com.mercurio.lms.contratacaoveiculos.model.Proprietario;
import com.mercurio.lms.contratacaoveiculos.model.SolicitacaoContratacao;
import com.mercurio.lms.contratacaoveiculos.model.TipoMeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.service.BloqueioMotoristaPropService;
import com.mercurio.lms.contratacaoveiculos.model.service.EixosTipoMeioTransporteService;
import com.mercurio.lms.contratacaoveiculos.model.service.MarcaMeioTransporteService;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteRodoviarioService;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteService;
import com.mercurio.lms.contratacaoveiculos.model.service.ModeloMeioTransporteService;
import com.mercurio.lms.contratacaoveiculos.model.service.OperadoraMctService;
import com.mercurio.lms.contratacaoveiculos.model.service.PerifericoRastreadorService;
import com.mercurio.lms.contratacaoveiculos.model.service.ProprietarioService;
import com.mercurio.lms.contratacaoveiculos.model.service.TipoMeioTransporteService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.Municipio;
import com.mercurio.lms.municipios.model.Pais;
import com.mercurio.lms.municipios.model.UnidadeFederativa;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.MunicipioService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contratacaoveiculos.swt.manterMeiosTransporteAction"
 */

public class ManterMeiosTransporteAction extends CrudAction {
	
	private FilialService filialService;
	private TipoMeioTransporteService tipoMeioTransporteService;
	private BloqueioMotoristaPropService bloqueioMotoristaPropService;
	private ConfiguracoesFacade configuracoesFacade;
	private ProprietarioService proprietarioService;
	private MarcaMeioTransporteService marcaMeioTransporteService;
	private ModeloMeioTransporteService modeloMeioTransporteService;
	private OperadoraMctService operadoraMctService;
	private MeioTransporteRodoviarioService meioTransporteRodoviarioService;
	private MunicipioService municipioService;
	private EixosTipoMeioTransporteService eixosTipoMeioTransporteService;
	private PerifericoRastreadorService perifericoRastreadorService;
	
	public Serializable findByIdCustom(Long id) {
		MeioTransporte meioTransporte = getService().findByIdCustom(id);
		Filial filial = meioTransporte.getFilial();
		Filial filialAgregadoCe = meioTransporte.getFilialAgregadoCe();
		ModeloMeioTransporte modelo = meioTransporte.getModeloMeioTransporte();
		MarcaMeioTransporte marca = modelo.getMarcaMeioTransporte();
		TipoMeioTransporte tipo = modelo.getTipoMeioTransporte();
		MeioTransporteRodoviario meioTransporteRodoviario = meioTransporte.getMeioTransporteRodoviario();
		
		TypedFlatMap retorno = new TypedFlatMap();

		retorno.put("idMeioTransporte", meioTransporte.getIdMeioTransporte());
		retorno.put("filial.idFilial", filial.getIdFilial());
		retorno.put("filial.sgFilial", filial.getSgFilial());
		retorno.put("filial.pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
		if (filialAgregadoCe != null) {
			retorno.put("filialAgregadoCe.idFilial", filialAgregadoCe.getIdFilial());
			retorno.put("filialAgregadoCe.sgFilial", filialAgregadoCe.getSgFilial());
			retorno.put("filialAgregadoCe.pessoa.nmFantasia", filialAgregadoCe.getPessoa().getNmFantasia());
		}
		retorno.put("nrIdentificador", meioTransporte.getNrIdentificador());
		retorno.put("tpVinculo.value", meioTransporte.getTpVinculo().getValue());
		retorno.put("nrAnoFabricao", meioTransporte.getNrAnoFabricao());
		retorno.put("qtPortas", meioTransporte.getQtPortas());
		retorno.put("nrCapacidadeKg", meioTransporte.getNrCapacidadeKg());
		retorno.put("nrCapacidadeM3", meioTransporte.getNrCapacidadeM3());
		retorno.put("tpSituacao.value", meioTransporte.getTpSituacao().getValue());
		retorno.put("nrFrota", meioTransporte.getNrFrota());
		//Data de atualização do registro
		retorno.put("dtAtualizacao", meioTransporte.getDtAtualizacao());
		retorno.put("usuarioAtualizacao.nmUsuario", meioTransporte.getUsuarioAtualizacao().getNmUsuario());
		retorno.put("tpModal.value", meioTransporte.getTpModal().getValue());
		retorno.put("modeloMeioTransporte.tipoMeioTransporte.tpMeioTransporte.value",
				tipo.getTpMeioTransporte().getValue());
		retorno.put("modeloMeioTransporte.idModeloMeioTransporte", modelo.getIdModeloMeioTransporte());
		retorno.put("modeloMeioTransporte.tipoMeioTransporte.idTipoMeioTransporte",
				tipo.getIdTipoMeioTransporte());

		Long idTipoComposto = this.findPrimeiroCompostoByTipoMeioTransporte(tipo.getIdTipoMeioTransporte());
		if (idTipoComposto != null) {
			retorno.put("modeloMeioTransporte.tipoMeioTransporte.tipoMeioTransporte.idTipoMeioTransporte",idTipoComposto);
		}

		retorno.put("dsTipoMeioTransporteTemp", tipo.getDsTipoMeioTransporte());
		retorno.put("modeloMeioTransporte.marcaMeioTransporte.idMarcaMeioTransporte",
				marca.getIdMarcaMeioTransporte());
 
		if (meioTransporteRodoviario != null) {
			retorno.put("meioTransporteRodoviario.idMeioTransporte",
					meioTransporteRodoviario.getIdMeioTransporte());
			retorno.put("meioTransporteRodoviario.blControleTag",
					meioTransporteRodoviario.getBlControleTag());
			retorno.put("meioTransporteRodoviario.nrTag",
					meioTransporteRodoviario.getNrTag());
			retorno.put("meioTransporteRodoviario.blPossuiPlataforma",
					meioTransporteRodoviario.getBlPossuiPlataforma());
			retorno.put("meioTransporteRodoviario.vlAlturaBau",
					meioTransporteRodoviario.getVlAlturaBau());
			retorno.put("meioTransporteRodoviario.vlLarguraBau",
					meioTransporteRodoviario.getVlLarguraBau());
			retorno.put("meioTransporteRodoviario.vlProfundidadeBau",
					meioTransporteRodoviario.getVlProfundidadeBau());
			EixosTipoMeioTransporte eixos = meioTransporteRodoviario
					.getEixosTipoMeioTransporte();
			if (eixos != null) {
				retorno.put("meioTransporteRodoviario.eixosTipoMeioTransporte.idEixosTipoMeioTransporte",
						eixos.getIdEixosTipoMeioTransporte());
			}
			if (meioTransporteRodoviario.getNrRastreador()!=null){
				retorno.put("meioTransporteRodoviario.nrRastreador",meioTransporteRodoviario.getNrRastreador());
			}
			retorno.put("meioTransporteRodoviario.psTara",
					meioTransporteRodoviario.getPsTara());
			retorno.put("meioTransporteRodoviario.nrDddCelular",
					meioTransporteRodoviario.getNrDddCelular());
			retorno.put("meioTransporteRodoviario.nrCelular",
					meioTransporteRodoviario.getNrCelular());
			retorno.put("meioTransporteRodoviario.cdRenavam",
					meioTransporteRodoviario.getCdRenavam());
			retorno.put("meioTransporteRodoviario.nrCertificado",
					meioTransporteRodoviario.getNrCertificado());
			retorno.put("meioTransporteRodoviario.dtEmissao",
					meioTransporteRodoviario.getDtEmissao());
			retorno.put("meioTransporteRodoviario.nrChassi",
					meioTransporteRodoviario.getNrChassi());
			retorno.put("meioTransporteRodoviario.nrBilheteSeguro",
					meioTransporteRodoviario.getNrBilheteSeguro());
			retorno.put("meioTransporteRodoviario.dtVencimentoSeguro",
					meioTransporteRodoviario.getDtVencimentoSeguro());

			OperadoraMct operadoraMct = meioTransporteRodoviario.getOperadoraMct();
			if (operadoraMct != null) {
				retorno.put("meioTransporteRodoviario.operadoraMct.idOperadoraMct",
						operadoraMct.getIdOperadoraMct());
				retorno.put("meioTransporteRodoviario.operadoraMct.pessoa.nmPessoa",
						operadoraMct.getPessoa().getNmPessoa());
			}

			MeioTransporteRodoviario meioTransporteTracionador = meioTransporteRodoviario
					.getMeioTransporteRodoviario();
			if (meioTransporteTracionador != null) {
				MeioTransporte tracionador = meioTransporteTracionador.getMeioTransporte();
				retorno.put("meioTransporteRodoviario.meioTransporteRodoviario.idMeioTransporte",
						tracionador.getIdMeioTransporte());
				retorno.put("meioTransporteRodoviario.meioTransporteRodoviario.meioTransporte.nrIdentificador",
						tracionador.getNrIdentificador());
				retorno.put("meioTransporteRodoviario.meioTransporteRodoviario.meioTransporte.nrFrota",
						tracionador.getNrFrota());
				retorno.put("meioTransporteRodoviario.meioTransporteRodoviario.meioTransporte.nrAnoFabricao",
						tracionador.getNrAnoFabricao());
			}

			Municipio municipio = meioTransporteRodoviario.getMunicipio();
			if (municipio != null) {
				retorno.put("meioTransporteRodoviario.municipio.idMunicipio",
						municipio.getIdMunicipio());
				retorno.put("meioTransporteRodoviario.municipio.nmMunicipio",
						municipio.getNmMunicipio());
				UnidadeFederativa uf = municipio.getUnidadeFederativa();
				retorno.put("meioTransporteRodoviario.municipio.unidadeFederativa.nmUnidadeFederativa",
						uf.getNmUnidadeFederativa());
				Pais pais = uf.getPais();
				retorno.put("meioTransporteRodoviario.municipio.unidadeFederativa.pais.nmPais",
						pais.getNmPais().getValue());
				retorno.put("meioTransporteRodoviario.municipio.unidadeFederativa.pais.sgPais",
						pais.getSgPais());
			}

		}

		List fotoMeioTransportes = meioTransporte.getFotoMeioTransportes();
		if (fotoMeioTransportes != null && !fotoMeioTransportes.isEmpty()) {
			retorno.put("imMeioTransporte", Base64Util.encode(((FotoMeioTransporte) fotoMeioTransportes.get(0))
					.getImMeioTransporte()));
		}

		if (bloqueioMotoristaPropService.validateBloqueiosVigentes(meioTransporte)) {
			retorno.put("captionBloquear", configuracoesFacade.getMensagem("liberar"));
			retorno.put("tpStatus", configuracoesFacade.getMensagem("bloqueado"));
		} else {
			retorno.put("captionBloquear", configuracoesFacade.getMensagem("bloquear"));
			retorno.put("tpStatus", configuracoesFacade.getMensagem("liberado"));
		}
		
		retorno.put("meioTransportePerifericos", getService().findMeioTransportePerifericos(meioTransporte));
		
		return retorno;
	}
	
	public ResultSetPage findPaginatedCustom(Map criteria) {				
		ResultSetPage resultSetPage = getService().findPaginatedCustom(createFindCriteria(criteria));
		List listReturn = new ArrayList();
		for (Iterator iter = resultSetPage.getList().iterator(); iter.hasNext();) {
			TypedFlatMap tfmReturn = (TypedFlatMap) iter.next();			
			Map mapReturn = new HashMap();
			
			mapReturn.put("idMeioTransporte", tfmReturn.get("idMeioTransporte"));
			mapReturn.put("sgFilial", tfmReturn.get("filial.sgFilial"));
			mapReturn.put("nmFantasiaFilial", tfmReturn.get("filial.pessoa.nmFantasia"));
			mapReturn.put("dsModeloMeioTransporte", tfmReturn.get("modeloMeioTransporte.dsModeloMeioTransporte"));
			mapReturn.put("idTipoMeioTransporte", tfmReturn.get("modeloMeioTransporte.tipoMeioTransporte.idTipoMeioTransporte"));
			mapReturn.put("tpMeioTransporte", tfmReturn.get("modeloMeioTransporte.tipoMeioTransporte.tpMeioTransporte.value"));
			mapReturn.put("tpMeioTransporteDescription", tfmReturn.get("modeloMeioTransporte.tipoMeioTransporte.tpMeioTransporte.description"));
			mapReturn.put("dsTipoMeioTransporte", tfmReturn.get("modeloMeioTransporte.tipoMeioTransporte.dsTipoMeioTransporte"));
			mapReturn.put("dsMarcaMeioTransporte", tfmReturn.get("modeloMeioTransporte.marcaMeioTransporte.dsMarcaMeioTransporte"));
			mapReturn.put("tpVinculo", tfmReturn.get("tpVinculo.value"));
			mapReturn.put("tpVinculoDescription", tfmReturn.get("tpVinculo.description"));			
			mapReturn.put("nrFrota", tfmReturn.get("nrFrota"));
			mapReturn.put("nrIdentificador", tfmReturn.get("nrIdentificador"));
			mapReturn.put("nrAnoFabricao", tfmReturn.get("nrAnoFabricao"));
			mapReturn.put("nrCodigoBarra", tfmReturn.get("nrCodigoBarra"));
			mapReturn.put("tpStatus", tfmReturn.get("tpStatus"));
			mapReturn.put("tpSituacao", tfmReturn.get("tpSituacao.description"));
			mapReturn.put("nrRastreador", tfmReturn.get("meioTransporteRodoviario.nrRastreador"));

			listReturn.add(mapReturn);
		}
		
		resultSetPage.setList(listReturn);		
		return resultSetPage;		
	}
	
	public Integer getRowCountCustom(Map criteria) {
		return getService().getRowCountCustom(createFindCriteria(criteria));
	}
	
	
    /**
     * Cria mapa com filtros para pesquisa.
     * @param criteria
     * @return
     */
	private TypedFlatMap createFindCriteria(Map criteria) {
		TypedFlatMap mapCriteria = new TypedFlatMap();
		mapCriteria.put("_currentPage", criteria.get("_currentPage"));
    	mapCriteria.put("_pageSize", criteria.get("_pageSize"));
    	mapCriteria.put("_order", criteria.get("_order"));
    	
    	mapCriteria.put("tpSituacao", criteria.get("tpSituacao"));
    	mapCriteria.put("modeloMeioTransporte.tipoMeioTransporte.tpMeioTransporte", criteria.get("tpMeioTransporte"));
    	mapCriteria.put("dtAtualizacaoInicial", criteria.get("dtAtualizacaoInicial"));
    	mapCriteria.put("dtAtualizacaoFinal", criteria.get("dtAtualizacaoFinal"));
    	mapCriteria.put("tpVinculo", criteria.get("tpVinculo"));
    	mapCriteria.put("modeloMeioTransporte.tipoMeioTransporte.idTipoMeioTransporte", criteria.get("idTipoMeioTransporte"));
    	mapCriteria.put("proprietario.idProprietario", criteria.get("idProprietario"));
    	mapCriteria.put("filial.idFilial", criteria.get("idFilial"));
    	mapCriteria.put("tpStatus", criteria.get("tpStatus"));
    	mapCriteria.put("modeloMeioTransporte.idModeloMeioTransporte", criteria.get("idModeloMeioTransporte"));
    	mapCriteria.put("nrFrota", criteria.get("nrFrota"));
    	mapCriteria.put("modeloMeioTransporte.marcaMeioTransporte.idMarcaMeioTransporte", criteria.get("idMarcaMeioTransporte"));
    	mapCriteria.put("nrAnoFabricao", criteria.get("nrAnoFabricao"));
    	mapCriteria.put("nrCodigoBarra", criteria.get("nrCodigoBarra"));
    	mapCriteria.put("tpModal", criteria.get("tpModal"));
    	mapCriteria.put("nrIdentificador", criteria.get("nrIdentificador"));
    			
    	return mapCriteria;
	}  

	public List findLookupFilial(Map criteria) { 
		TypedFlatMap tfmCriteria = new TypedFlatMap();
		Map mapEmpresa = new HashMap();
		mapEmpresa.put("tpEmpresa", criteria.get("tpEmpresa"));
		criteria.put("empresa", mapEmpresa);
		criteria.remove("tpEmpresa");
		tfmCriteria.putAll(criteria);
		return filialService.findLookupAsPaginated(tfmCriteria);
	}
	
	public List findComboTipoMeioTransporte(Map map) {
		return tipoMeioTransporteService.findCombo(map);
	}
	
	public List findComboTipoMeioTransporteAtivo(Map map) {
		map.put("tpSituacao","A");
		return tipoMeioTransporteService.findCombo(map);
	}
	
	public List findLookupProprietario(Map criteria) {
		if (criteria.get("nrIdentificacao") != null) {
			Map mapNrIdentificacao = new HashMap();
			mapNrIdentificacao.put("nrIdentificacao", criteria.get("nrIdentificacao"));
			criteria.put("pessoa", mapNrIdentificacao);
			criteria.remove("nrIdentificacao");
		}		
		
    	List<Proprietario> list = proprietarioService.findLookup(criteria);
    	List listReturn = new ArrayList();
    	for (Proprietario proprietario : list) {
    		Map mapRetorno = new HashMap();
    		mapRetorno.put("idProprietario", proprietario.getIdProprietario());
    		mapRetorno.put("nrIdentificacaoProprietario", FormatUtils.formatIdentificacao(proprietario.getPessoa()));
    		mapRetorno.put("nmProprietario", proprietario.getPessoa().getNmPessoa());
    		listReturn.add(mapRetorno);
		}
    	
    	return listReturn; 
	}
	
	public List findComboMarcaMeioTransporte(Map map) {
		return marcaMeioTransporteService.find(map);
	}
		
	public List findComboModeloMeioTransporte(Map map) {
		if (map.get("idMarcaMeioTransporte") != null) {
			Map mapIdMarca = new HashMap();
			mapIdMarca.put("idMarcaMeioTransporte", map.get("idMarcaMeioTransporte"));
			map.put("marcaMeioTransporte", mapIdMarca);
			map.remove("idMarcaMeioTransporte");
		}
		if (map.get("idTipoMeioTransporte") != null) {
			Map mapIdTipo = new HashMap();
			mapIdTipo.put("idTipoMeioTransporte", map.get("idTipoMeioTransporte"));
			map.put("tipoMeioTransporte", mapIdTipo);
			map.remove("idTipoMeioTransporte");
		}
		
		if (map.get("marcaMeioTransporte") != null || map.get("tipoMeioTransporte") != null) {
			return modeloMeioTransporteService.find(map);
		} else {				
			return Collections.EMPTY_LIST;
		}
	}
	
	public List findComboOperadoraMct(Map map) {
		return operadoraMctService.find(map);
	}
	
	public List findLookupRodo(Map map) {
		return meioTransporteRodoviarioService.findLookup(map);
	}
	
	public List findLookupMunicipio(Map map) {
		return municipioService.findLookup(map);
	}
	
	public List findComboEixosTipoMeioTransporte(Long idTipoMeioTransporte) {
		List l = eixosTipoMeioTransporteService.findEixosByTpMeioTransp(idTipoMeioTransporte);
		List newList = new ArrayList();
		for (Iterator i = l.iterator(); i.hasNext();) {
			EixosTipoMeioTransporte eixo = (EixosTipoMeioTransporte) i.next();
			TypedFlatMap row = new TypedFlatMap();
			row.put("qtEixos", eixo.getQtEixos());
			row.put("idEixosTipoMeioTransporte", eixo.getIdEixosTipoMeioTransporte());
			newList.add(row);
		}
		return newList;
	}
	
	/**
	 * Retorna para a tela a filial do usuário logado.
	 * @return
	 */
	public TypedFlatMap findFilialUsuarioLogado() {
		TypedFlatMap retorno = new TypedFlatMap();

		Filial f = SessionUtils.getFilialSessao();
		retorno.put("idFilial", f.getIdFilial());
		retorno.put("sgFilial", f.getSgFilial());
		retorno.put("pessoa.nmFantasia", f.getPessoa().getNmFantasia());

		return retorno;
	}
		
	/**
	 * Retorna a lista de perifericos de rastreador
	 * @param criteria
	 * @return
	 */
	public List findPerifericoRastreador(Map criteria) {
		return perifericoRastreadorService.find(criteria);
	}
	
	/**
	 * Valida se tipo de meio de transporte é composto 
	 * @param params
	 * @return
	 */
	public TypedFlatMap validateTipoMeioTransporte(TypedFlatMap params) {
		TypedFlatMap retorno = new TypedFlatMap();
		retorno.put("idComposto", this.findPrimeiroCompostoByTipoMeioTransporte(params.getLong("id")));
		return retorno;
	}

	public Long findPrimeiroCompostoByTipoMeioTransporte(Long id) {
		List l = tipoMeioTransporteService.findComposicoesByTipo(id);
		if (!l.isEmpty()) {
			TipoMeioTransporte t = (TipoMeioTransporte) l.get(0);
			return t.getIdTipoMeioTransporte();
		}
		return null;
	}

	public List findAtributosByModelo(TypedFlatMap map) {
		return getService().findAtributosByModelo(map);
	}
	
	public String calculaCapacidade(TypedFlatMap values) {
		return meioTransporteRodoviarioService.calculaCapacidade(values);
	}
	
	/**
	 * Verifica se proprietario possui bloqueios vigentes. 
	 * Em caso afirmativo retorna <i>desbloquear</i>.
	 * Em caso negativo, retorna <i>bloquear</i>.
	 * @param idProprietario
	 * @author luisfco
	 */
	public Map validateBloqueiosVigentes(Long idMeioTransporte) {
		Map map = new HashMap();
		MeioTransporte mt = new MeioTransporte();
		mt.setIdMeioTransporte(idMeioTransporte);
		if (mt != null && bloqueioMotoristaPropService.validateBloqueiosVigentes(mt))
			map.put("valorBotaoBloqueio", "desbloquear");
		else
			map.put("valorBotaoBloqueio", "bloquear");
		return map;
	}
	
	public TypedFlatMap validateInfoMeioTransporteByNrPlaca(TypedFlatMap criteria) {
		String tpVinculo = criteria.getString("tpVinculo");
		Long idTipoMeioTransporte = criteria.getLong("idTipoMeioTransporte");
		
		String nrIdentificador = criteria.getString("nrIdentificador");
		List l = getService().findInfoMeioTransporteSolicitacaoByNrPlaca(nrIdentificador);
		
		class MapRetorno extends TypedFlatMap {
			
			void putCustom(SolicitacaoContratacao sc) {
				this.put("nrAnoFabricao",sc.getNrAnoFabricacaoMeioTransporte());
				this.put("tpVinculo.value",sc.getTpVinculoContratacao().getValue());
				TipoMeioTransporte tipoMeioTransporte = sc.getTipoMeioTransporte();
				this.put("modeloMeioTransporte.tipoMeioTransporte.idTipoMeioTransporte",
						tipoMeioTransporte.getIdTipoMeioTransporte());
				this.put("modeloMeioTransporte.tipoMeioTransporte.tpMeioTransporte.value",
						tipoMeioTransporte.getTpMeioTransporte().getValue());
				this.put("dsTipoMeioTransporteTemp",
						tipoMeioTransporte.getDsTipoMeioTransporte());
			}
			
		}
		
		MapRetorno retorno = new MapRetorno();
		if (!l.isEmpty()) {
			if (StringUtils.isEmpty(tpVinculo) && idTipoMeioTransporte == null) {
				SolicitacaoContratacao sc = (SolicitacaoContratacao)l.get(0);
				retorno.putCustom(sc);
			} else {
				Iterator it = l.iterator();
				SolicitacaoContratacao sc = null;
				String tpVinculoSolicitacao = "";
				Long idTipoSolicitacao = -1L;
								
				while (it.hasNext() &&
						(tpVinculo.equals("") || !tpVinculo.equals(tpVinculoSolicitacao)) &&
						(idTipoMeioTransporte == null || !idTipoMeioTransporte.equals(idTipoSolicitacao))) {
					sc = (SolicitacaoContratacao)it.next();
					tpVinculoSolicitacao = sc.getTpVinculoContratacao().getValue();
					idTipoSolicitacao = sc.getTipoMeioTransporte().getIdTipoMeioTransporte();
				}
				
				if (StringUtils.isEmpty(tpVinculo) || tpVinculo.equals(tpVinculoSolicitacao) &&
						(idTipoMeioTransporte == null || idTipoMeioTransporte.equals(idTipoSolicitacao))) {
					retorno.putCustom(sc);
				} else if (StringUtils.isNotEmpty(tpVinculo) &&
						!tpVinculo.equals(tpVinculoSolicitacao)) {
					throw new BusinessException("LMS-26091",new Object[]{sc.getTpVinculoContratacao().getDescription()});
				} else if (idTipoMeioTransporte != null &&
						!idTipoMeioTransporte.equals(idTipoSolicitacao)) {
					throw new BusinessException("LMS-26094",new Object[]{sc.getTipoMeioTransporte().getDsTipoMeioTransporte()});
				}
			}
		}
		
		if (retorno.isEmpty())
			retorno.put("flag","flag");
		
		return retorno;
	}
	
	@Override
	protected void removeById(Serializable id) {
		getService().removeById((Long)id);
	}
	
	@Override
	protected void removeByIds(List ids) {
		getService().removeByIds(ids);
	}
	
	//************************************GETTERs AND SETTERs******************************************//
	public void setService(MeioTransporteService meioTransporteService) {
		this.defaultService = meioTransporteService;
	}
	
	private MeioTransporteService getService() {
		return (MeioTransporteService)this.defaultService;
	}
	
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public void setTipoMeioTransporteService(TipoMeioTransporteService tipoMeioTransporteService) {
		this.tipoMeioTransporteService = tipoMeioTransporteService;
	}

	public void setBloqueioMotoristaPropService(
			BloqueioMotoristaPropService bloqueioMotoristaPropService) {
		this.bloqueioMotoristaPropService = bloqueioMotoristaPropService;
	}

	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}

	public void setProprietarioService(ProprietarioService proprietarioService) {
		this.proprietarioService = proprietarioService;
	}

	public void setMarcaMeioTransporteService(
			MarcaMeioTransporteService marcaMeioTransporteService) {
		this.marcaMeioTransporteService = marcaMeioTransporteService;
	}

	public void setMeioTransporteRodoviarioService(
			MeioTransporteRodoviarioService meioTransporteRodoviarioService) {
		this.meioTransporteRodoviarioService = meioTransporteRodoviarioService;
	}

	public void setModeloMeioTransporteService(
			ModeloMeioTransporteService modeloMeioTransporteService) {
		this.modeloMeioTransporteService = modeloMeioTransporteService;
	}

	public void setMunicipioService(MunicipioService municipioService) {
		this.municipioService = municipioService;
	}

	public void setOperadoraMctService(OperadoraMctService operadoraMctService) {
		this.operadoraMctService = operadoraMctService;
	}

	public void setEixosTipoMeioTransporteService(
			EixosTipoMeioTransporteService eixosTipoMeioTransporteService) {
		this.eixosTipoMeioTransporteService = eixosTipoMeioTransporteService;
	}

	public void setPerifericoRastreadorService(
			PerifericoRastreadorService perifericoRastreadorService) {
		this.perifericoRastreadorService = perifericoRastreadorService;
	}

}
 