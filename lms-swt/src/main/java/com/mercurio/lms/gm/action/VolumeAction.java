package com.mercurio.lms.gm.action;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.lms.configuracoes.model.service.UsuarioLMSService;
import com.mercurio.lms.gm.model.service.VolumeService;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 * 
 * Não inserir documentação após ou remover a tag do XDoclet a seguir. O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * 
 * @spring.bean id="lms.gm.volumeAction"
 */
public class VolumeAction extends CrudAction {
	private VolumeService volumeService;
	private UsuarioLMSService usuarioLMSService;

	public VolumeService getVolumeService() {
		return volumeService;
	}

	public void setVolumeService(VolumeService volumeService) {
		this.volumeService = volumeService;
	}

	public Map<String, Object> findRotaMasterBySiglaDescricao(Map map) {
		String codigoVolume = (String) map.get("codigoVolume");

		return volumeService.findVolumeByCodigoVolume(codigoVolume);
	}

	// Retorna o historico do volume
	public Map<String, Object> findListaHistoricoVolumeByVolume(Map param) {
		Map<String, Object> mapRoot = new HashMap<String, Object>();

		List<Map<String, Object>> listaHistoricoVolume = volumeService.findListaHistoricoVolumeByVolume(param);

		mapRoot.put("listaHistoricoVolume", listaHistoricoVolume);

		return mapRoot;
	}

	public Map<String, Object> getDetalhesVolume(Map map) {
		String codigoVolume = (String) map.get("codigoVolume");

		return volumeService.findVolumeByCodigoVolume(codigoVolume);
	}

	// valida meio de transporte para a tela de carregamento de volumes
	public Map<String, Object> findMeioTransporteByBarcode(Map map) {
		String barcode = (String) map.get("barcode");
		Long codigoBarrasVeiculo = Long.parseLong(barcode);

		return volumeService.findMeioTransporteByBarcode(codigoBarrasVeiculo);
	}

	// valida volume para a tela de carregamento de volume
	public Map<String, Object> validateCarregarVolume(Map map) {
		String codigoVolume = (String) map.get("codigoVolume");
		String usuario = (String) map.get("matriculaChefia");
		Long usuarioLogado = Long.parseLong(usuario);
		String id = (String) map.get("idCarregamento");
		Long idCarregamento = Long.parseLong(id);
		String mpc = (String) map.get("mapaCarregamento");
		Long mpcDaConferencia = null;

		if (!mpc.equals(String.valueOf(0))) {
			mpcDaConferencia = Long.parseLong(mpc);
		} else {
			mpcDaConferencia = null;
		}
		map = volumeService.executeVolumeByCodigo(codigoVolume, idCarregamento, usuarioLogado, mpcDaConferencia);

		return map;
	}

	/**
	 * Método responsável por fazer o "cancelamento" de um carregamento. O método chama o serviço que recebe o numero do carregamento, o numero do mapa e o usuário logado. O serviço então passa todos os volumes do mapa referido para status = 4(descarregado), e gera um histórico.
	 * 
	 * @param map
	 * @return
	 */
	public Map<String, Object> desconsiderarMpC(Map map) {
		String codigoVolume = (String) map.get("codigoVolume");
		String usuario = (String) map.get("matriculaChefia");
		Long usuarioLogado = Long.parseLong(usuario);
		String id = (String) map.get("idCarregamento");
		Long idCarregamento = Long.parseLong(id);
		String mpc = (String) map.get("mapaCarregamento");
		Long mpcDaConferencia = null;
		String cnpjRemetenteCliente = (String) map.get("cnpjRemetenteCliente");
		Long cnpj = Long.parseLong(cnpjRemetenteCliente);

		if (!mpc.equals(String.valueOf(0))) {
			mpcDaConferencia = Long.parseLong(mpc);
		} else {
			mpcDaConferencia = null;
		}
		map = volumeService.executeDescarregarVolumesMpC(idCarregamento, usuarioLogado, mpcDaConferencia, cnpj);

		return map;
	}

	// valida meio de transporte para a tela de descarregamento de volumes e
	// marcar defeito avaria
	public Map<String, Object> validateMeioTransporteByBarcode(Map map) {
		String barcode = (String) map.get("barcode");
		Long codigoBarrasVeiculo = Long.parseLong(barcode);

		return volumeService.validateMeioTransporteByBarcode(codigoBarrasVeiculo);
	}

	public Map<String, Object> getVolume(String codigoVolume) {
		return volumeService.executeValidateVolume(codigoVolume);
	}

	public Map<String, Object> getVolumeAvariaDefeito(Map map) {
		String volume = (String) map.get("codigoVolume");
		Long usuarioLogado = Long.parseLong(SessionUtils.getUsuarioLogado().getNrMatricula());

		return volumeService.executeValidateVolumeAvariaDefeito(volume, usuarioLogado);
	}

	/**
	 * Metodo responsavel por chamar o serviço que vai salvar o carregamento. O carregamento é fechado quando todos os volumes do mps são lidos.
	 * 
	 * Demanda LMS-2772 (Carregar)
	 */
	public Map<String, Object> storeCarregarVolumes(Map map) {
		String usuario = (String) map.get("matriculaChefia");
		Long usuarioLogado = Long.parseLong(usuario);
		String id = (String) map.get("idCarregamento");
		Long idCarregamento = Long.parseLong(id);
		String mpc = (String) map.get("mapaCarregamento");
		Long mpcDaConferencia = null;

		if (mpc != null) {
			mpcDaConferencia = Long.parseLong(mpc);
		}

		return volumeService.storeCarregamentoVolumes(idCarregamento, usuarioLogado, mpcDaConferencia, null);
	}

	/**
	 * Método responsavel por gravar o histórico do carregamento.
	 * 
	 * Demanda LMS-2772 (Carregar)
	 * 
	 * @param map
	 * @return
	 */
	public Map<String, Object> storeHistoricoCarregamento(Map map) {
		String usuario = (String) map.get("matriculaChefia");
		Long usuarioLogado = Long.parseLong(usuario);
		String id = (String) map.get("idCarregamento");
		Long idCarregamento = Long.parseLong(id);
		String mpc = (String) map.get("mapaCarregamento");
		Long mpcDaConferencia = null;
		String cnpjRemetenteCliente = (String) map.get("cnpjRemetenteCliente");
		Long cnpj = Long.parseLong(cnpjRemetenteCliente);

		if (mpc != null) {
			mpcDaConferencia = Long.parseLong(mpc);
		}

		return volumeService.storeHistoricoCarregamento(idCarregamento, usuarioLogado, mpcDaConferencia, cnpj);
	}

	// valida volume para tela de descarregamento de volume e marcar defeito
	// avaria
	public void validateDescarregarVolume(Map map) {
		String volume = (String) map.get("idVolume");
		Long idVolume = Long.parseLong(volume);

		String carregamento = (String) map.get("idCarregamento");
		Long idCarregamento = Long.parseLong(carregamento);

		String usuario = (String) map.get("matriculaChefia");
		Long usuarioLogado = Long.parseLong(usuario);

		volumeService.executeVolumeDescarga(idVolume, idCarregamento, usuarioLogado);
	}

	public Map<String, Object> marcarAvariaDefeito(Map params) {

		Map map = new HashMap();

		boolean exigiuAutorizacao = Boolean.parseBoolean((String) params.get("exigiuAutorizacao"));

		String volume = (String) params.get("idVolume");
		Long idVolume = Long.parseLong(volume);

		String carregamento = (String) params.get("idCarregamento");
		Long idCarregamento = Long.parseLong(carregamento);

		String codigoVolume = (String) params.get("codigoVolume");

		String status = (String) params.get("codigoStatus");
		Short codigoStatus = Short.parseShort(status);

		String rejeitoMpc = (String) params.get("idRejeitoMpc");
		Long idRejeitoMpc = Long.parseLong(rejeitoMpc);

		String responsavel = (String) params.get("matriculaResponsavel");
		Long matriculaResponsavel = Long.parseLong(responsavel);

		String autorizador = null;
		
		if(exigiuAutorizacao) {
			Long idAutorizador = Long.parseLong(params.get("matriculaResponsavel").toString());
			autorizador = usuarioLMSService.findById(idAutorizador).getUsuarioADSM().getNrMatricula();
		}		

		String message = volumeService.executeVolumeAvaria(exigiuAutorizacao, idVolume, idCarregamento, codigoVolume, codigoStatus, idRejeitoMpc, matriculaResponsavel, autorizador);

		map.put("Message", message);

		return map;
	}

	/**
	 * Carrega os dados mostrados na tela de consultar MpC LMS-2790
	 * 
	 * @param criteria
	 * @return Map<String,Object>
	 */
	public Map<String, Object> findDadosCabecalhoConsultarMpC(Map criteria) {
		return volumeService.findDadosCabecalhoConsultarMpC(criteria);
	}

	/**
	 * Carrega os dados para a listagem da tela de consultar MpC LMS-2790
	 * 
	 * @param criteria
	 * @return
	 */
	public Map<String, Object> findConsultaMpc(Map criteria) {
		return volumeService.findConsultaMpc(criteria);
	}

	public void setUsuarioLMSService(UsuarioLMSService usuarioLMSService) {
		this.usuarioLMSService = usuarioLMSService;
	}

}
