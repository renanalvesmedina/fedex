package com.mercurio.lms.portaria.swt.action;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.PaginatedQuery;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.service.DispositivoUnitizacaoService;
import com.mercurio.lms.expedicao.model.service.VolumeNotaFiscalService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.portaria.model.MacroZona;
import com.mercurio.lms.portaria.model.Terminal;
import com.mercurio.lms.portaria.model.service.MacroZonaService;
import com.mercurio.lms.portaria.model.service.TerminalService;
import com.mercurio.lms.util.session.SessionUtils;


/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.portaria.swt.manterMacroZonasAction"
 */

public class ManterMacroZonasAction {

    private FilialService filialService;
    private MacroZonaService macroZonaService;
    private TerminalService terminalService;
    private VolumeNotaFiscalService volumeNotaFiscalService;
    private DispositivoUnitizacaoService dispositivoUnitizacaoService;

    public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public void setMacroZonaService(MacroZonaService macroZonaService) {
		this.macroZonaService = macroZonaService;
	}

	public void setTerminalService(TerminalService terminalService) {
		this.terminalService = terminalService;
	}

	public void removeById(java.lang.Long id) {
		macroZonaService.removeById(id);
    }
    
    public void setVolumeNotaFiscalService(
			VolumeNotaFiscalService volumeNotaFiscalService) {
		this.volumeNotaFiscalService = volumeNotaFiscalService;
	}

	public void setDispositivoUnitizacaoService(
			DispositivoUnitizacaoService dispositivoUnitizacaoService) {
		this.dispositivoUnitizacaoService = dispositivoUnitizacaoService;
	}
	
    /**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
		macroZonaService.removeByIds(ids);
    }

    public Map findById(java.lang.Long id) {
    	MacroZona macroZona = macroZonaService.findById(id);
    	Terminal terminal = macroZona.getTerminal();
    	Filial filial = terminal.getFilial();
    	
    	Map retorno = new HashMap();
    	retorno.put("idMacroZona", macroZona.getIdMacroZona());
    	retorno.put("idFilial", filial.getIdFilial());
    	retorno.put("sgFilial", filial.getSgFilial());
    	retorno.put("nmFantasia",filial.getPessoa().getNmFantasia());
    	retorno.put("idTerminal",terminal.getIdTerminal());
    	retorno.put("dsMacroZona", macroZona.getDsMacroZona());
    	retorno.put("nrCodigoBarras", macroZona.getNrCodigoBarras());
    	retorno.put("tpSituacao", macroZona.getTpSituacao().getValue());
    	return retorno;
    }
    
    public Map findFilialUsuarioLogado() {
    	Filial f = SessionUtils.getFilialSessao();
    	Map result = new HashMap();
    	result.put("idFilial",f.getIdFilial());
    	result.put("sgFilial",f.getSgFilial());
    	result.put("nmFantasia",f.getPessoa().getNmFantasia());
    	return result;
    }
        
    public ResultSetPage<Map<String, Object>> findPaginated(Map<String, Object> criteria) {
    	ResultSetPage rsp = macroZonaService.findPaginated(new PaginatedQuery(criteria));
    	
    	List<MacroZona> list = rsp.getList();		
		List<Map<String, Object>> retorno = new ArrayList<Map<String,Object>>(list.size());
		
		for(MacroZona macroZona : list){	
			Map<String,Object> map = new HashMap<String, Object>();
			map.put("idMacroZona", macroZona.getIdMacroZona());
			map.put("dsMacroZona", macroZona.getDsMacroZona());
			map.put("sgFilial", macroZona.getTerminal().getFilial().getSgFilial());
			map.put("nmPessoaTerminal", macroZona.getTerminal().getPessoa().getNmPessoa());
			map.put("nrCodigoBarras", macroZona.getNrCodigoBarras());
			retorno.add(map);	
		}
		rsp.setList(retorno);
		return rsp;	
    }

    /**
     * find da combo de terminais vigentes.
     * @param criteria
     * @return
     */
	public List findTerminaisComboVigentes(TypedFlatMap criteria) {
		List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();
		List<Terminal> listaTerminal = new ArrayList<Terminal>();

		if (criteria.getLong("idTerminal") != null){
			listaTerminal = terminalService.findTerminalVigenteByFilial(criteria.getLong("filial.idFilial"), criteria.getLong("idTerminal"));
		}
		else {
			listaTerminal = terminalService.findTerminalVigenteByFilial(criteria.getLong("filial.idFilial"));
		}

		if (listaTerminal != null) {
			for (Terminal terminal : listaTerminal) {
				Map<String, Object> mapTerminal = new HashMap<String, Object>();
				mapTerminal.put("idTerminal", terminal.getIdTerminal());
				mapTerminal.put("nmPessoaTerminal", terminal.getPessoa().getNmPessoa());
				result.add(mapTerminal);
			}
		}
		return result;
	}
	
	/**
     * find da combo de terminais.
     * @param criteria
     * @return
     */
	public List findTerminaisCombo(TypedFlatMap criteria) {
		List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();
		List<Terminal> listaTerminal = terminalService.findCombo(criteria);
		if (listaTerminal != null) {
			for (Terminal terminal : listaTerminal) {
				Map<String, Object> mapTerminal = new HashMap<String, Object>();
				mapTerminal.put("idTerminal", terminal.getIdTerminal());
				mapTerminal.put("nmPessoaTerminal", terminal.getPessoa().getNmPessoa());
				result.add(mapTerminal);
			}
		}
		return result;
	}
 
	public List findLookupFilial(Map criteria) {
		List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();
		List<Filial> filiais = filialService.findLookup(criteria);
		if (filiais != null) {
			for (Filial filial : filiais) {
				Map<String, Object> mapFilial = new HashMap<String, Object>();
				mapFilial.put("sgFilial", filial.getSgFilial());
				mapFilial.put("idFilial", filial.getIdFilial());
				mapFilial.put("nmFantasia", filial.getPessoa().getNmFantasia());
				result.add(mapFilial);
			}
		}
		return result;
	}

	
    public Map store(Map map) {
		Terminal terminal = new Terminal();
		terminal.setIdTerminal((Long)map.get("idTerminal"));

		MacroZona bean = new MacroZona();
		bean.setIdMacroZona((Long)map.get("idMacroZona"));
		bean.setDsMacroZona((String)map.get("dsMacroZona"));
		bean.setNrCodigoBarras((BigDecimal)map.get("nrCodigoBarras"));
		bean.setTerminal(terminal);
		bean.setTpSituacao(new DomainValue((String)map.get("tpSituacao")));
		macroZonaService.store(bean);

		Map retorno = new HashMap();
    	retorno.put("idMacroZona",bean.getIdMacroZona());
    	return retorno;
    }
    
    public ResultSetPage<Map<String, Object>> findPaginatedVolumesByMacroZona(Map<String, Object> criteria) {
    	return volumeNotaFiscalService.findPaginatedMap(new PaginatedQuery(criteria));    	
    }
    
    public Integer getRowCountVolumesByMacroZona(Map<String,Object> criteria) {
    	return volumeNotaFiscalService.getRowCount(criteria);    	
    }
    
    public ResultSetPage<Map<String, Object>> findPaginatedDispositivosByMacroZona(Map<String, Object> criteria) {    	
		return dispositivoUnitizacaoService.findPaginatedMap(new PaginatedQuery(criteria));	
    }
    
    public Integer getRowCountDispositivosByMacroZona(Map<String,Object> criteria) {
    	return dispositivoUnitizacaoService.getRowCount(criteria);    	
    }
}