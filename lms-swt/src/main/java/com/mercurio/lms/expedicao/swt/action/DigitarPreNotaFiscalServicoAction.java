package com.mercurio.lms.expedicao.swt.action;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.MapUtils;
import org.apache.commons.lang.StringUtils;
import org.joda.time.YearMonthDay;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.hibernate.VarcharI18n;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.InscricaoEstadual;
import com.mercurio.lms.configuracoes.model.Servico;
import com.mercurio.lms.configuracoes.model.ServicoAdicional;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.configuracoes.model.service.ConteudoParametroFilialService;
import com.mercurio.lms.configuracoes.model.service.ServicoService;
import com.mercurio.lms.configuracoes.model.service.TipoTributacaoIEService;
import com.mercurio.lms.contasreceber.model.param.DivisaoClienteParam;
import com.mercurio.lms.expedicao.DocumentoServicoFacade;
import com.mercurio.lms.expedicao.model.CalculoNFServico;
import com.mercurio.lms.expedicao.model.DoctoServico;
import com.mercurio.lms.expedicao.model.ImpostoServico;
import com.mercurio.lms.expedicao.model.NotaFiscalServico;
import com.mercurio.lms.expedicao.model.ObservacaoDoctoServico;
import com.mercurio.lms.expedicao.model.ParcelaServico;
import com.mercurio.lms.expedicao.model.ParcelaServicoAdicional;
import com.mercurio.lms.expedicao.model.ServAdicionalDocServ;
import com.mercurio.lms.expedicao.model.service.DoctoServicoService;
import com.mercurio.lms.expedicao.model.service.ImpostoServicoService;
import com.mercurio.lms.expedicao.model.service.MonitoramentoDocEletronicoService;
import com.mercurio.lms.expedicao.model.service.NFEConjugadaService;
import com.mercurio.lms.expedicao.model.service.NotaFiscalServicoService;
import com.mercurio.lms.expedicao.model.service.ServAdicionalDocServService;
import com.mercurio.lms.expedicao.report.EmitirNFSService;
import com.mercurio.lms.expedicao.report.GerarNFSService;
import com.mercurio.lms.expedicao.util.CalculoFreteUtils;
import com.mercurio.lms.expedicao.util.ConstantesExpedicao;
import com.mercurio.lms.expedicao.util.ExpedicaoUtils;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.Municipio;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.MunicipioService;
import com.mercurio.lms.tabelaprecos.model.ParcelaPreco;
import com.mercurio.lms.tabelaprecos.model.RestricaoRota;
import com.mercurio.lms.tabelaprecos.model.service.ParcelaPrecoService;
import com.mercurio.lms.tributos.model.TipoTributacaoIE;
import com.mercurio.lms.tributos.model.service.AliquotaIssMunicipioServService;
import com.mercurio.lms.tributos.model.service.ParametroIssMunicipioService;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.LongUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.Cotacao;
import com.mercurio.lms.vendas.model.DivisaoCliente;
import com.mercurio.lms.vendas.model.service.ClienteService;
import com.mercurio.lms.vendas.model.service.CotacaoService;
import com.mercurio.lms.vendas.model.service.DivisaoClienteService;
import com.mercurio.lms.vendas.util.ClienteUtils;
import com.mercurio.lms.vendas.util.ConstantesVendas;

/**
 * Generated by: ADSM ActionGenerator
 * 
 * Não inserir documentação após ou remover a tag do XDoclet a seguir. O valor
 * do <code>id</code> informado abaixo deve ser utilizado para referenciar
 * este serviço.
 * 
 * @spring.bean id="lms.expedicao.swt.digitarPreNotaFiscalServicoAction"
 */
public class DigitarPreNotaFiscalServicoAction extends CrudAction {
	private AliquotaIssMunicipioServService aliquotaIssMunicipioServService;
	private ClienteService clienteService;
	private DoctoServicoService doctoServicoService;
	private DocumentoServicoFacade documentoServicoFacade;
	private DomainValueService domainValueService;
	private ConfiguracoesFacade configuracoesFacade;
	private ImpostoServicoService impostoServicoService;
	private ServAdicionalDocServService servAdicionalDocServService;
	private FilialService filialService;
	private NFEConjugadaService nfeConjugadaService;

	private MunicipioService municipioService;
	private ServicoService servicoService;
	private ParcelaPrecoService parcelaPrecoService;
	private DivisaoClienteService divisaoClienteService;
	private CotacaoService cotacaoService;
	private GerarNFSService gerarNFSService;
	private TipoTributacaoIEService tipoTributacaoIEService;
	private EmitirNFSService emitirNFSService;
	private ParametroIssMunicipioService parametroIssMunicipioService;
	private MonitoramentoDocEletronicoService monitoramentoDocEletronicoService;
	private ConteudoParametroFilialService conteudoParametroFilialService;

	/**
	 * Busca Filial da Sessao
	 * @return
	 */
	public Map<String, Object> findDadaSession() {
		Filial filialSessao = SessionUtils.getFilialSessao();
		Map<String, Object> toReturn = new HashMap<String, Object>();
		toReturn.put("idFilial", filialSessao.getIdFilial());
		toReturn.put("sgFilial", filialSessao.getSgFilial());
		toReturn.put("nmFantasia", filialSessao.getPessoa().getNmFantasia());
		toReturn.put("bloquearDigitacaoNota",  configuracoesFacade.getValorParametro(filialSessao.getIdFilial(), "BLQ_DIGITA_NF"));
		return toReturn;
	}

	/**
	 * Busca Nota Fiscal de Servico.
	 * @param criteria
	 * @return
	 */
	public Map findNFServico(Map criteria) {
		/** Caso Calculo Manual */
		CalculoNFServico calculoNFServico = new CalculoNFServico();
		if (criteria != null && criteria.containsKey("valor")) {
			if (((BigDecimal) criteria.get("valor")).doubleValue() <= 0.0) {
				throw new BusinessException("requiredField", new Object[]{configuracoesFacade.getMensagem("valor")});
			}
			calculoNFServico.addServicoAdicional(getParcelaServicoCalculoManual(criteria));			
		}
		calculoNFServico.setIdParcelaPreco(MapUtils.getLong(criteria, "idParcelaPreco"));

		/** Busca NFS da Sessao */
		NotaFiscalServico notaFiscalServico = ExpedicaoUtils.getNFSInSession();
		/** Carrega Parametros p/ Calculo */
		preparaParametrosCalculoNF(calculoNFServico, notaFiscalServico);
		/** Busca Calculo da NFS */
		documentoServicoFacade.executeCalculoNotaFiscalServico(calculoNFServico);
		/** 2º Fase Atribui Dados ha Nota Fiscal de Servico */
		CalculoFreteUtils.copyResult(notaFiscalServico, calculoNFServico);
		/** Grava Dados na Sessao */
		ExpedicaoUtils.setNFSInSession(notaFiscalServico);
		ExpedicaoUtils.setCalculoNFSInSession(calculoNFServico);

		List tributos = new ArrayList();
		if(calculoNFServico.getTributos() != null) {
			for (Iterator it = calculoNFServico.getTributos().iterator(); it.hasNext();) {
				ImpostoServico impostoServico = (ImpostoServico) it.next();
				Map data = new HashMap();
				data.put("nome", impostoServico.getTpImposto().getDescription().toString());
				data.put("valor", impostoServico.getVlImposto());
				tributos.add(data);
			}
		}
		ParcelaServico parcelaServico = (ParcelaServico) calculoNFServico.getServicosAdicionais().get(0);
		
		Map result = new HashMap();
		result.put("tributos", tributos);
		result.put("totalTributos", calculoNFServico.getVlTotalTributos());
		result.put("valorTotal", calculoNFServico.getVlTotal());
		result.put("valor", parcelaServico.getVlParcela());
		result.put("valorLiquido", calculoNFServico.getVlDevido());
		return result;
	}

	/**
	 * Parametros para Calculo da NFS.
	 * 
	 * @param calculoNFServico
	 * @param notaFiscalServico
	 */
	private void preparaParametrosCalculoNF(CalculoNFServico calculoNFServico, NotaFiscalServico notaFiscalServico) {
		calculoNFServico.setTpModal(notaFiscalServico.getServico().getTpModal().getValue());
		calculoNFServico.setTpAbrangencia(notaFiscalServico.getServico().getTpAbrangencia().getValue());
		calculoNFServico.setTpConhecimento(ConstantesExpedicao.CONHECIMENTO_NORMAL);

		calculoNFServico.setTpCalculo(notaFiscalServico.getTpCalculoPreco().getValue());
		calculoNFServico.setBlCalculaParcelas(Boolean.FALSE);
		calculoNFServico.setBlCalculaServicosAdicionais(Boolean.TRUE);
		calculoNFServico.setClienteBase(notaFiscalServico.getClienteByIdClienteDestinatario());
		if (notaFiscalServico.getDivisaoCliente() != null) {
			calculoNFServico.setIdDivisaoCliente(notaFiscalServico.getDivisaoCliente().getIdDivisaoCliente());
		}

		List cotacoes = notaFiscalServico.getCotacoes();
		if (cotacoes != null && !cotacoes.isEmpty()) {
			Cotacao cotacao = (Cotacao)cotacoes.get(0);
			calculoNFServico.setIdCotacao(cotacao.getIdCotacao());	
		}
		calculoNFServico.setIdServico(notaFiscalServico.getServico().getIdServico());
		calculoNFServico.setPsReferencia(notaFiscalServico.getPsReferenciaCalculo());
		calculoNFServico.setServAdicionalDoctoServico(notaFiscalServico.getServAdicionalDocServs());

		RestricaoRota restricaoRotaOrigem = calculoNFServico.getRestricaoRotaOrigem();
		restricaoRotaOrigem.setIdMunicipio(SessionUtils.getFilialSessao().getPessoa().getEnderecoPessoa().getMunicipio().getIdMunicipio());

		RestricaoRota restricaoRotaDestino = calculoNFServico.getRestricaoRotaDestino();
		restricaoRotaDestino.setIdMunicipio(notaFiscalServico.getMunicipio().getIdMunicipio());
		
		calculoNFServico.setDoctoServico(notaFiscalServico);
	}

	/**
	 * Parcela Calculo Manual.
	 * 
	 * @param params
	 * @return
	 */
	private ParcelaServicoAdicional getParcelaServicoCalculoManual(Map params) {
		BigDecimal valor = (BigDecimal) params.get("valor");
		Long idServicoAdicional = (Long) params.get("idServicoAdicional");
		Long idParcelaPreco = (Long) params.get("idParcelaPreco");

		ServicoAdicional servicoAdicional = new ServicoAdicional();
		servicoAdicional.setIdServicoAdicional(idServicoAdicional);

		ParcelaPreco parcelaPreco = new ParcelaPreco();
		parcelaPreco.setIdParcelaPreco(idParcelaPreco);
		parcelaPreco.setServicoAdicional(servicoAdicional);

		ParcelaServicoAdicional parcelaServicoAdicional = new ParcelaServicoAdicional(parcelaPreco);
		parcelaServicoAdicional.setVlBrutoParcela(valor);
		return parcelaServicoAdicional;
	}

	public Map<String, Object> storeAndPressNF(Map<String, Object> params) {
		Long nrProximoFormulario = (Long) params.get("numFormulario");
		String dsMacAddress = (String) params.get("dsMacAddress");
		NotaFiscalServico notaFiscalServico = ExpedicaoUtils.getNFSInSession();
		Filial filialLogada = SessionUtils.getFilialSessao();

		Long idDoctoServico = null;
		Map<String, Object> result = new HashMap<String, Object>();
		if (!ConstantesExpedicao.NOTA_FISCAL_SERVICO_SITUACAO_GERADA.equals(notaFiscalServico.getTpSituacaoNf().getValue())) {
		Long idServicoTributo = LongUtils.getLong((BigDecimal) configuracoesFacade.getValorParametro(ConstantesExpedicao.ID_SERVICO_TRIBUTO_NFT));
			Long idMunicipioSede = filialLogada.getPessoa().getEnderecoPessoa().getMunicipio().getIdMunicipio();
		Long idMunicipioServico = notaFiscalServico.getMunicipio().getIdMunicipio();

		if (notaFiscalServico.getServAdicionalDocServs() != null && !notaFiscalServico.getServAdicionalDocServs().isEmpty()) {
			BigDecimal vlMercadoria = notaFiscalServico.getServAdicionalDocServs().get(0).getVlMercadoria();
			BigDecimal vlFrete = notaFiscalServico.getServAdicionalDocServs().get(0).getDoctoServico().getVlTotalDocServico();
			if (vlMercadoria != null && vlFrete != null) {
				
				TypedFlatMap map = new TypedFlatMap();
				map.put("vlMercadoria", vlMercadoria);
				map.put("vlFrete", vlFrete);
				
				doctoServicoService.executeValidacaoLimiteValorFrete(map);
			}
		}

		TypedFlatMap emiteNfServico = aliquotaIssMunicipioServService.findEmiteNfServico(null, idServicoTributo, idMunicipioSede, idMunicipioServico);
		if( Boolean.FALSE.equals(emiteNfServico.getBoolean("BlEmiteNota")) ){
			throw new BusinessException("LMS-04340");
		}
		
		notaFiscalServico.setTpDocumentoServico(new DomainValue("NFS"));
		notaFiscalServico.setTpNotaFiscalServico(new DomainValue("NFS"));

		if( Boolean.TRUE.equals(emiteNfServico.getBoolean("BlEmiteNFeletronica")) ){
			notaFiscalServico.setTpDocumentoServico(new DomainValue("NSE"));
			notaFiscalServico.setTpNotaFiscalServico(new DomainValue("NSE"));
			
			//LMS-4097 - Se for uma geração de NSE verificar se a filial do usuário logado possui a informação da 
			//inscrição municipal (PESSOA.NR_INSCRICAO_MUNICI-PAL <> NULL para PESSOA.ID_PESSOA = FILIAL.ID_FILIAL).
			//Se não possuir visualizar a mensagem LMS-04379, não permitindo a geração da nota.
			if (filialLogada.getPessoa() != null && StringUtils.isBlank(filialLogada.getPessoa().getNrInscricaoMunicipal())) {
			    throw new BusinessException("LMS-04379");
			}
		
			//LMS-4097 - Se for uma geração de NSE verificar se o cliente informado no campo Destinatário possui a 
			//informação da inscrição municipal (PESSOA.NR_INSCRICAO_MUNICIPAL <> NULL 
			//para PESSOA.ID_PESSOA = CLIENTE.ID_CLIENTE). Se não possuir visualizar a mensagem LMS-04380, não permitindo a geração da nota.
		
			Cliente cliente = notaFiscalServico.getClienteByIdClienteDestinatario();
			if (cliente != null) { 
				cliente = clienteService.findByIdInitLazyProperties(cliente.getIdCliente(), true);
				if (StringUtils.isBlank(cliente.getPessoa().getNrInscricaoMunicipal())) {
					throw new BusinessException("LMS-04380");
		}
            }
		}
		
			//LMS-7141
			if(notaFiscalServico.getTpDocumentoServico().getValue().equals(ConstantesExpedicao.NOTA_FISCAL_SERVICO) 
					|| notaFiscalServico.getTpDocumentoServico().getValue().equals(ConstantesExpedicao.NOTA_FISCAL_SERVICO_ELETRONICA)){
				if(notaFiscalServico.getDevedorDocServs() != null && !notaFiscalServico.getDevedorDocServs().isEmpty() && notaFiscalServico.getDevedorDocServs().get(0).getCliente().getIdCliente().longValue() == SessionUtils.getFilialSessao().getIdFilial().longValue()){
					throw new BusinessException("LMS-04518");
				}
			}
		
			idDoctoServico = this.emitirNFSService.storeNFS(notaFiscalServico, filialLogada.getIdFilial(), ConstantesExpedicao.CD_EMISSAO, nrProximoFormulario, dsMacAddress );
		
		} else {
			notaFiscalServico.setDhEmissao(JTDateTimeUtils.getDataHoraAtual());
			idDoctoServico = this.emitirNFSService.executeEmitirNFS(
					notaFiscalServico, filialLogada.getIdFilial(),
					ConstantesExpedicao.CD_EMISSAO, nrProximoFormulario,
					dsMacAddress);
		}
		
		//TODO LMS-4097 5.10
		if( ConstantesExpedicao.NOTA_FISCAL_SERVICO.equalsIgnoreCase(notaFiscalServico.getTpDocumentoServico().getValue()) ){
			result.put( "nfs", gerarNFSService.generateNFS(notaFiscalServico.getIdDoctoServico()) );
		}else if( ConstantesExpedicao.NOTA_FISCAL_SERVICO_ELETRONICA.equalsIgnoreCase(notaFiscalServico.getTpDocumentoServico().getValue()) && !nfeConjugadaService.isAtivaNfeConjugada(notaFiscalServico.getFilialByIdFilialOrigem().getIdFilial()) ){
			result.put( "nfs", monitoramentoDocEletronicoService.executeMontarInfNse(notaFiscalServico.getIdDoctoServico()) );
			Object nrVias = configuracoesFacade.getValorParametro(filialLogada.getIdFilial(), "NRO_VIAS_RPS");
			result.put( "nrViasRps", nrVias == null ? 1 : Integer.valueOf(nrVias.toString()) );
		}
		
		notaFiscalServico = getNotaFiscalServicoService().findById(idDoctoServico);
		result.put("nr", notaFiscalServico.getNrNotaFiscalServico());
		result.put("dhEmissao", notaFiscalServico.getDhEmissao());
		result.put("tpSituacao", notaFiscalServico.getTpSituacaoNf().getValue());
		result.put("tpSituacaoNfLabel", notaFiscalServico.getTpSituacaoNf().getDescription().getValue());
		result.put("nrNotaFiscalServico", notaFiscalServico.getNrNotaFiscalServico());
		result.put("idNotaFiscalServico", notaFiscalServico.getIdDoctoServico());
		result.put("tpDocumentoServico", notaFiscalServico.getTpDocumentoServico().getValue());
		if(nfeConjugadaService.isAtivaNfeConjugada(notaFiscalServico.getFilialByIdFilialOrigem().getIdFilial())){
			result.put("nfeConjugada", true);
		}
		if(notaFiscalServico.getTpDocumentoServico() != null)  result.put("tpDocumentoServico", notaFiscalServico.getTpDocumentoServico().getValue());
		ExpedicaoUtils.removeNFSFromSession();
		ExpedicaoUtils.removeCalculoFreteFromSession();
		
		return result;
	}

	public Map findEmiteNFSE(Map params) {
		NotaFiscalServico notaFiscalServico = ExpedicaoUtils.getNFSInSession();

		Long idServicoTributo = LongUtils.getLong((BigDecimal) configuracoesFacade.getValorParametro(ConstantesExpedicao.ID_SERVICO_TRIBUTO_NFT));
		Long idMunicipioSede = SessionUtils.getFilialSessao().getPessoa().getEnderecoPessoa().getMunicipio().getIdMunicipio();
		Long idMunicipioServico = notaFiscalServico.getMunicipio().getIdMunicipio();

		TypedFlatMap emiteNfServico = aliquotaIssMunicipioServService.findEmiteNfServico(null, idServicoTributo, idMunicipioSede, idMunicipioServico);
		Boolean blEmiteNFServicoEletronica = Boolean.TRUE.equals(emiteNfServico.getBoolean("BlEmiteNFeletronica"));

		Map result = new HashMap();
		result.put("blEmiteNFServicoEletronica", blEmiteNFServicoEletronica);
		return result;
	}

	public Map obtemDadosPopupModoConsulta(Map params) {
		Long idNotaFiscalServico = (Long) params.get("idNotaFiscalServico");

		/** Impostos(tributos) */
		List impostosServico = impostoServicoService.findNFServicoAdicionalValores(idNotaFiscalServico);
		ArrayList tributos = new ArrayList();
		for (Iterator it = impostosServico.iterator(); it.hasNext();) {
			Map impostoServicoMap = (Map) it.next();
			Map m = new HashMap();
			m.put("nome", ((DomainValue) impostoServicoMap.get("tpImposto")).getDescription().toString());
			m.put("valor", impostoServicoMap.get("vlImposto"));
			tributos.add(m);
		}

		/** Servicos Adicionais */
		List servicosAdicionais = servAdicionalDocServService.findNFServicoAdicionalValores(idNotaFiscalServico);
		Map servicoAdicionalMap = (Map) servicosAdicionais.get(0);

		Map result = new HashMap();
		result.put("tributos", tributos);
		result.put("totalTributos", servicoAdicionalMap.get("vlImposto"));
		result.put("valorTotal", servicoAdicionalMap.get("vlTotalDocServico"));
		result.put("dsServicoAdicional", servicoAdicionalMap.get("dsServicoAdicional"));
		result.put("valor", servicoAdicionalMap.get("vlTotalServicos"));
		result.put("valorLiquido", servicoAdicionalMap.get("vlLiquido"));
		return result;
	}

	/**
	 * 1º Fase Calculo Nota Fiscal Servico.
	 * 
	 * @param params
	 */
	public void calculaNFServicoPrimeiraFase(Map params) {
		ExpedicaoUtils.removeNFSFromSession();
		ExpedicaoUtils.removeCalculoFreteFromSession();

		verificaMunicipioEmiteNFServicoAdicional(params);
		NotaFiscalServico notaFiscalServico;
		if (ConstantesExpedicao.NOTA_FISCAL_SERVICO_SITUACAO_GERADA.equals(params.get("tpSituacaoNf"))) {
			notaFiscalServico = getNotaFiscalServicoService().findById((Long)params.get("idNotaFiscalServico"));
		} else {
			notaFiscalServico = createNFInSessionPrimeiraFase(params);
		}

		ExpedicaoUtils.setNFSInSession(notaFiscalServico);
	}

	/**
	 * 1º Fase: createNFInSession.
	 * - Adiciona dados em DoctoServico
	 * - Adiciona dados em NotaFiscalServico
	 * 
	 * @param parameters
	 * @return
	 */
	private NotaFiscalServico createNFInSessionPrimeiraFase(Map parameters) {
		NotaFiscalServico notaFiscalServico = (NotaFiscalServico) createDoctoServicoInSessionPrimeiraFase(parameters);
		Filial filial = new Filial();
		filial.setIdFilial((Long) parameters.get("idFilial"));
		notaFiscalServico.setFilial(filial);

		Municipio municipio = new Municipio();
		municipio.setIdMunicipio((Long) parameters.get("idMunicipioServico"));
		notaFiscalServico.setMunicipio(municipio);

		notaFiscalServico.setDtInicial((YearMonthDay) parameters.get("dtInicial"));
		notaFiscalServico.setDtFinal((YearMonthDay) parameters.get("dtFinal"));
		notaFiscalServico.setDsSerie(null);
		notaFiscalServico.setTpSituacaoNf(new DomainValue(ConstantesExpedicao.DOCUMENTO_SERVICO_EMITIDO));
		notaFiscalServico.setPaisOrigem(SessionUtils.getPaisSessao());
		return notaFiscalServico;
	}

	/**
	 * 1º Fase: createDoctoServicoInSession.
	 * 
	 * @param parameters
	 * @return
	 */
	private DoctoServico createDoctoServicoInSessionPrimeiraFase(Map parameters) {
		/** ServAdicionalDocServ */
		ServAdicionalDocServ servicoAdicionalDoctoServico = createServAdicionalDocServInSessionPrimeiraFase(parameters);
		/** DoctoServico */
		DoctoServico doctoServico = new NotaFiscalServico();
		servicoAdicionalDoctoServico.setDoctoServico(doctoServico);
		/** ServicoAdicional */
		ServicoAdicional servicoAdicional = new ServicoAdicional();
		servicoAdicional.setIdServicoAdicional((Long) parameters.get("idServicoAdicional"));
		servicoAdicional.setDsServicoAdicional(new VarcharI18n((String) parameters.get("dsServicoAdicional")));
		servicoAdicionalDoctoServico.setServicoAdicional(servicoAdicional);

		List<ServAdicionalDocServ> servicosAdicionaisDoctoServico = new ArrayList<ServAdicionalDocServ>(1);
		servicosAdicionaisDoctoServico.add(servicoAdicionalDoctoServico);
		doctoServico.setServAdicionalDocServs(servicosAdicionaisDoctoServico);

		/** Moeda */
		doctoServico.setMoeda(SessionUtils.getMoedaSessao());
		/** Cliente */
		Cliente cliente = clienteService.findByIdInitLazyProperties((Long) parameters.get("idClienteDestinatario"), false);
		doctoServico.setClienteByIdClienteDestinatario(cliente);
		doctoServico.setClienteByIdClienteRemetente(cliente);

		/** InscricaoEstadual */
		Long idInscricaoEstadual = (Long) parameters.get("idInscricaoEstadualDestinatario");
		if (idInscricaoEstadual != null) {
			InscricaoEstadual inscricaoEstadual = new InscricaoEstadual();
			inscricaoEstadual.setIdInscricaoEstadual(idInscricaoEstadual);
			doctoServico.setInscricaoEstadualDestinatario(inscricaoEstadual);
			doctoServico.setInscricaoEstadualRemetente(inscricaoEstadual);
		}
		/** Servico */
		Servico servico = new Servico();
		servico.setIdServico((Long) parameters.get("idServico"));
		servico.setTpAbrangencia(new DomainValue((String) parameters.get("tpAbrangencia")));
		servico.setTpModal(new DomainValue((String) parameters.get("tpModal")));
		doctoServico.setServico(servico);

		/** Usuario */
		doctoServico.setUsuarioByIdUsuarioInclusao(SessionUtils.getUsuarioLogado());
		/** Filial */
		doctoServico.setFilialByIdFilialOrigem(SessionUtils.getFilialSessao());
		/** Divisao */
		Long idDivisaoCliente = (Long) parameters.get("idDivisaoCliente");
		if(idDivisaoCliente != null) {
			DivisaoCliente divisaoCliente = new DivisaoCliente();
			divisaoCliente.setIdDivisaoCliente(idDivisaoCliente);
			doctoServico.setDivisaoCliente(divisaoCliente);
		}
		/** Cotacao */
		Long idCotacao = (Long) parameters.get("idCotacao");
		if(idCotacao != null) {
			Cotacao cotacao = new Cotacao();
			cotacao.setDoctoServico(doctoServico);
			cotacao.setIdCotacao(idCotacao);
			List<Cotacao> cotacoes = new ArrayList(1);
			cotacoes.add(cotacao);
			doctoServico.setCotacoes(cotacoes);
		}
		/** Observacoes DoctoServico */
		int z = 4;
		List<ObservacaoDoctoServico> observacoesDoctoServico = new ArrayList(z);
		for (int i = 0; i < z; i++) {
			ObservacaoDoctoServico observacaoDoctoServico = createObservacaoDoctoServicoInSessionPrimeiraFase(parameters, "" + i);
			if(observacaoDoctoServico != null) {
				observacaoDoctoServico.setDoctoServico(doctoServico);
				observacoesDoctoServico.add(observacaoDoctoServico);
			}
		}
		if(!observacoesDoctoServico.isEmpty()) {
			doctoServico.setObservacaoDoctoServicos(observacoesDoctoServico);
		}
		/** Dados Gerais */
		doctoServico.setVlTotalParcelas(null);
		doctoServico.setDhEmissao(JTDateTimeUtils.getDataHoraAtual());
		doctoServico.setDhInclusao(JTDateTimeUtils.getDataHoraAtual());
		doctoServico.setTpDocumentoServico(new DomainValue(ConstantesExpedicao.NOTA_FISCAL_SERVICO));
		doctoServico.setBlBloqueado(Boolean.FALSE);

		doctoServico.setNrCfop(null);
		doctoServico.setPsReal((BigDecimal) parameters.get("psMercadoria"));
		doctoServico.setPsReferenciaCalculo(doctoServico.getPsReal());
		doctoServico.setDhAlteracao(null);
		doctoServico.setDhEntradaSetorEntrega(null);
		doctoServico.setTpCalculoPreco(new DomainValue((String) parameters.get("tpCalculoPreco")));
		doctoServico.setBlPrioridadeCarregamento(Boolean.FALSE);
		doctoServico.setNrAidf(null);
		doctoServico.setPcAliquotaIcms(null);
		return doctoServico;
	}

	/**
	 * 1º Fase: createObservacaoDoctoServicoInSession.
	 * 
	 * @param parameters
	 * @param suffix
	 * @return
	 */
	private ObservacaoDoctoServico createObservacaoDoctoServicoInSessionPrimeiraFase(Map parameters, String suffix) {
		ObservacaoDoctoServico obs = null;
		if (StringUtils.isNotEmpty((String) parameters.get("obs" + suffix))) {
			obs = new ObservacaoDoctoServico();
			obs.setDsObservacaoDoctoServico((String) parameters.get("obs" + suffix));
			obs.setBlPrioridade(Boolean.FALSE);
		}
		return obs;
	}

	/**
	 * 1º Fase: createServAdicionalDocServInSession.
	 * 
	 * @param parameters
	 * @return
	 */
	private ServAdicionalDocServ createServAdicionalDocServInSessionPrimeiraFase(Map parameters) {
		ServAdicionalDocServ servAdicionalDocServ = new ServAdicionalDocServ();
		servAdicionalDocServ.setCdParcelaPreco((String)parameters.get("cdParcelaPreco"));
		servAdicionalDocServ.setQtDias((Integer) parameters.get("qtDias"));
		servAdicionalDocServ.setQtSegurancasAdicionais((Integer) parameters.get("qtSegurancasAdicionais"));
		servAdicionalDocServ.setQtColetas((Integer) parameters.get("qtColetas"));
		servAdicionalDocServ.setQtPaletes((Integer) parameters.get("qtPaletes"));
		servAdicionalDocServ.setNrKmRodado((Integer) parameters.get("nrKmRodado"));
		servAdicionalDocServ.setVlMercadoria((BigDecimal) parameters.get("vlMercadoria"));
		servAdicionalDocServ.setVlFrete((BigDecimal) parameters.get("vlFrete"));
		servAdicionalDocServ.setQtCheques((Integer) parameters.get("qtCheques"));
		servAdicionalDocServ.setDtPrimeiroCheque((YearMonthDay) parameters.get("dtPrimeiroCheque"));
		return servAdicionalDocServ;
	}

	/**
	 * Verifica se Municipio Emite NFS para o Servico Adicional Informado.
	 * 
	 * @param params
	 */
	public void verificaMunicipioEmiteNFServicoAdicional(Map params) {
		Long idServicoAdicional = (Long) params.get("idServicoAdicional");
		Long idMunicipioSede = (Long) params.get("idMunicipioSede");
		Long idMunicipioServico = (Long) params.get("idMunicipioServico");
		getNotaFiscalServicoService().validateMunicipioEmiteNFServicoAdicional(
			idServicoAdicional,
			idMunicipioSede,
			idMunicipioServico);
	}

	/**
	 * Reemissao Nota Fiscal de Servico.
	 * 
	 * @param params
	 * @return
	 */
	public Map reemiteNF(Map params) {
		Long idNotaFiscalServico = (Long) params.get("idNotaFiscalServico");
		Long idFilial = SessionUtils.getFilialSessao().getIdFilial();
		Long nrProximoFormulario = (Long) params.get("nrProximoFormulario");
		String dsMacAddress = (String) params.get("dsMacAddress");

		NotaFiscalServico notaFiscalServico = this.emitirNFSService.executeReemitirNFS(
			idNotaFiscalServico
			,idFilial
			,nrProximoFormulario
			,dsMacAddress
		);

		Map result = new HashMap();
		if( ConstantesExpedicao.NOTA_FISCAL_SERVICO.equalsIgnoreCase(notaFiscalServico.getTpDocumentoServico().getValue()) ){
			result.put( "nfs", gerarNFSService.generateNFS(notaFiscalServico.getIdDoctoServico()) );
		}else if( ConstantesExpedicao.NOTA_FISCAL_SERVICO_ELETRONICA.equalsIgnoreCase(notaFiscalServico.getTpDocumentoServico().getValue()) ){
			result.put("nfs", monitoramentoDocEletronicoService.executeMontarInfNse(notaFiscalServico.getIdDoctoServico()) );
		}
		result.put("tpDocumentoServico", notaFiscalServico.getTpDocumentoServico().getValue());
		result.put("dhEmissao", notaFiscalServico.getDhEmissao());
		return result;
	}

	/**
	 * Cancelamento Nota Fiscal de Servico.
	 * 
	 * @param params
	 * @return
	 */
	public Map cancelaNF(Map params) {
		Long idNotaFiscalServico = (Long) params.get("idNotaFiscalServico");
		NotaFiscalServico notaFiscalServico = getNotaFiscalServicoService().removeCancelaNF(idNotaFiscalServico);

		Map result = new HashMap();
		result.put("tpSituacaoNf", notaFiscalServico.getTpSituacaoNf().getValue());
		String tpSituacaoLabelNf = domainValueService.findDomainValueDescription("DM_STATUS_NOTA_FISCAL", notaFiscalServico.getTpSituacaoNf().getValue());
		result.put("tpSituacaoNfLabel", tpSituacaoLabelNf);
		return result;
	}

	/**
	 * Verifica se Filial pode Emitir Nota Fiscal de Servico.
	 * 
	 * @param idFilialEmissao
	 */
	public void verificaPossibilidadeEmissaoNotaFiscal(Long idFilialEmissao) {
		getNotaFiscalServicoService().findPossibilidadeEmissaoNotaFiscal(idFilialEmissao);
	}

	/**
	 * Chamada Default para buscar dados afim de evitar Multiplas chamadas.
	 * @author Andre Valadas
	 * 
	 * @return
	 */
	public Map findDefaultParameters() {
		Map result = new HashMap();
		Usuario usuario = SessionUtils.getUsuarioLogado();
		result.put("idUsuarioLogado", usuario.getIdUsuario());
		result.put("nmPessoaUsuarioLogado", usuario.getNmUsuario());
		result.put("nrIdentificacaoUsuarioLogado", usuario.getNrMatricula());

		Filial filial = SessionUtils.getFilialSessao();
		result.put("idFilialUsuarioLogado", filial.getIdFilial());
		result.put("sgFilialUsuarioLogado", filial.getSgFilial());
		result.put("nmFantasiaFilialUsuarioLogado", filial.getPessoa().getNmFantasia());

		result.put("idMunicipioFilialUsuarioLogado", SessionUtils.getFilialSessao().getPessoa().getEnderecoPessoa().getMunicipio().getIdMunicipio());

		Long idServicoPadrao = LongUtils.getLong(configuracoesFacade.getValorParametro("SERVICO_PADRAO"));
		Servico servico = servicoService.findById(idServicoPadrao);
		result.put("idServico", servico.getIdServico());
		result.put("dsServico", servico.getDsServico());
		result.put("tpAbrangencia", servico.getTpAbrangencia().getValue());
		result.put("tpModal", servico.getTpModal().getValue());
		return result;
	}

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		getNotaFiscalServicoService().removeByIds(ids);
	}

	public Map findById(java.lang.Long id) {
		Map result = getNotaFiscalServicoService().findNotaFiscalServicoById(id);
		Map tpSituacao = (Map) result.get("tpSituacaoNf");
		Filial filial = SessionUtils.getFilialSessao();
		Map filialEmissao = (Map) result.remove("filial");
		Map pessoaFilialEmissao = (Map) filialEmissao.remove("pessoa");
		Map destinatario = (Map) result.remove("clienteByIdClienteDestinatario");
		Map pessoaDestinatario = (Map) destinatario.remove("pessoa");
		Map enderecoDestinatario = (Map) destinatario.remove("endereco");
		Map servico = (Map) result.remove("servico");
		Map tpAbrangencia = (Map) servico.remove("tpAbrangencia");
		Map tpModal = (Map) servico.remove("tpModal");
		Map municipioServico = (Map) result.remove("municipio");
		Map tpCalculoPreco = (Map) result.remove("tpCalculoPreco");
		Map servicoAdicional = (Map) result.remove("servicoAdicional");
		Map divisaoCliente = (Map) result.remove("divisaoCliente");
		Map cotacao = (Map) result.remove("cotacao");
		Map parcelaPreco = (Map) result.remove("parcelaPreco");
		Map tpDocumentoServico = (Map) result.remove("tpDocumentoServico");
		
		result.put("tpSituacaoNf", tpSituacao.get("value"));
		result.put("tpSituacaoNfLabel", tpSituacao.get("description"));
		result.put("nmPessoaUsuarioLogado", result.get("nmPessoaUsuario"));
		result.put("idFilialUsuarioLogado", filial.getIdFilial());
		result.put("sgFilial", filialEmissao.get("sgFilial"));
		result.put("idFilial", filialEmissao.get("idFilial"));
		result.put("nmFantasia", pessoaFilialEmissao.get("nmFantasia"));
		result.put("idCliente", destinatario.get("idCliente"));
		result.put("nrIdentificacao", pessoaDestinatario.get("nrIdentificacaoFormatado"));
		result.put("nmPessoa", pessoaDestinatario.get("nmPessoa"));
		result.put("idInscricaoEstadual", destinatario.get("idInscricaoEstadual"));
		result.put("nrInscricaoEstadual", destinatario.get("nrInscricaoEstadual"));
		if (enderecoDestinatario != null) {
			result.put("dsEndereco", enderecoDestinatario.get("dsEndereco"));
			result.put("nrEndereco", enderecoDestinatario.get("nrEndereco"));
			result.put("dsComplemento", enderecoDestinatario.get("dsComplemento"));
			result.put("nmMunicipio", enderecoDestinatario.get("nmMunicipio"));
			result.put("sgUnidadeFederativa", enderecoDestinatario.get("sgUnidadeFederativa"));
			result.put("nrCep", enderecoDestinatario.get("nrCep"));
		}
		result.put("idMunicipioServico", municipioServico.get("idMunicipio"));
		result.put("nmMunicipioServico", municipioServico.get("nmMunicipio"));
		if (divisaoCliente != null) {
			result.put("idDivisaoCliente", divisaoCliente.get("idDivisaoCliente"));
			result.put("dsDivisaoCliente", divisaoCliente.get("dsDivisaoCliente"));
		}
		result.put("tpCalculoPreco", tpCalculoPreco.get("value"));
		if (cotacao != null) {
			result.put("idCotacao", cotacao.get("idCotacao"));
			result.put("nrCotacao", cotacao.remove("sgFilial") + "-" + cotacao.get("nrCotacao"));
		}
		result.put("idServico", servico.get("idServico"));
		result.put("tpModal", tpModal.get("value"));
		result.put("tpAbrangencia", tpAbrangencia.get("value"));

		result.put("idParcelaPreco", parcelaPreco.get("idParcelaPreco"));
		result.put("cdParcelaPreco", parcelaPreco.get("cdParcelaPreco"));

		result.put("idServicoAdicional", servicoAdicional.get("idServicoAdicional"));
		result.put("id_arce", servicoAdicional.get("idServicoAdicional"));
		result.put("qtDias", servicoAdicional.get("qtDias"));
		result.put("qtColetas", servicoAdicional.get("qtColetas"));
		result.put("qtPaletes", servicoAdicional.get("qtPaletes"));
		result.put("qtSegurancasAdicionais", servicoAdicional.get("qtSegurancasAdicionais"));
		result.put("nrKmRodado", servicoAdicional.get("nrKmRodado"));
		result.put("psMercadoria", servicoAdicional.get("psMercadoria"));
		result.put("dtPrimeiroCheque", servicoAdicional.get("dtPrimeiroCheque"));
		result.put("qtCheques", servicoAdicional.get("qtCheques"));
		result.put("vlMercadoria", servicoAdicional.get("vlMercadoria"));
		result.put("vlFrete", servicoAdicional.get("vlFrete"));
		
		result.put("idMunicipioFilialUsuarioLogado", SessionUtils.getFilialSessao().getPessoa().getEnderecoPessoa().getMunicipio().getIdMunicipio());
		
		result.put("tpDocumentoServico", tpDocumentoServico.get("value"));
		
		return result;
	}

	public List findFilialEmissaoLookup(Map criteria) {
		List list = filialService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		Filial filial = (Filial)iter.next();
    		Map mapFilial = new HashMap();
    		mapFilial.put("idFilial", filial.getIdFilial());    		
    		mapFilial.put("sgFilial", filial.getSgFilial());
    		mapFilial.put("nmFantasia", filial.getPessoa().getNmFantasia());
    		retorno.add(mapFilial);
    	}
    	return retorno;
	}

	public List findMunicipioLookup(TypedFlatMap criteria) {
		List municipios = municipioService.findLookup(criteria);
		List result = new ArrayList();
		if (municipios != null && !municipios.isEmpty()) {
			for (int i = 0; i < municipios.size(); i++) {
				Municipio municipio = (Municipio) municipios.get(i);
				Map map = new HashMap();
				map.put("idMunicipioServico", municipio.getIdMunicipio());
				map.put("nmMunicipioServico", municipio.getNmMunicipio());
				result.add(map);
			}
		}
		return result;
	}

	public List findServicos(Map param) {
		Map criteria = new HashMap();
		criteria.put("tpSituacao", "A");
		criteria.put("tpAbrangencia", "N");
		List<Servico> servicos = servicoService.find(criteria);
		
		if (servicos != null) {
			List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();
			for (Servico servico : servicos) {
				Map<String, Object> mapServico = new HashMap<String, Object>();
				mapServico.put("idServico", servico.getIdServico());
				mapServico.put("dsServico", servico.getDsServico());
				mapServico.put("tpModal", servico.getTpModal().getValue());
				mapServico.put("tpAbrangencia", servico.getTpAbrangencia().getValue());
				result.add(mapServico);
			}
			return result;
		}
		return null;
	}

	public List findDivisaoCombo(Map criteria) {
		List retorno = null;
		if(ClienteUtils.isParametroClienteEspecial((String) criteria.get("tpCliente"))) {
			DivisaoClienteParam param = new DivisaoClienteParam();
			param.setIdCliente((Long) criteria.get("idCliente"));
			param.setTpSituacao(ConstantesVendas.SITUACAO_ATIVO);
			retorno = divisaoClienteService.findMapByIdClienteMatriz(param);
		}
		return retorno;
	}
	
	/**
	 * Carrega Dados necessários do <b>Cliente Destinatário</b>
	 * @param criteria
	 * @return
	 */
	public List findDadosDestinatario(Map criteria) {
		List result = findCliente((String) criteria.get("nrIdentificacaoDestinatario"));
		if(!result.isEmpty()) {
			Map cliente = (Map) result.get(0);
			Map pessoa = (Map) cliente.remove("pessoa");
			cliente.put("nrIdentificacao", pessoa.get("nrIdentificacao"));
			cliente.put("nmPessoa", pessoa.get("nmPessoa"));
			cliente.put("tpClienteValor", ((Map) cliente.remove("tpCliente")).get("value"));
			Map endereco = (Map) pessoa.get("endereco");
			cliente.putAll(endereco);
		}
		return result;
	}

	public List findCotacao(Map params) {
		Long idClienteDestinatario = (Long) params.get("idCliente");
		List cotacoes = cotacaoService.findCotacoes(idClienteDestinatario, null);
		for (Iterator iter = cotacoes.iterator(); iter.hasNext();) {
			Map map = (Map) iter.next();
			map.put("nrCotacao", map.remove("sgFilial") + "-" + map.get("nrCotacao"));
		}
		return cotacoes;
	}

	public List findServicosAdicionais() {
		return parcelaPrecoService.findServicosAdicionaisParcela();
	}

	/**
	 * getRowCountNFS.
	 * @author Andre Valadas
	 * 
	 * @param criteria
	 * @return
	 */
	public Integer getRowCountNFS(Map criteria) {
		return getNotaFiscalServicoService().getRowCountNFS(prepareCriteria(criteria));
	}

	/**
	 * findPaginatedNFS.
	 * @param criteria
	 * @return
	 */
	public ResultSetPage findPaginatedNFS(Map criteria) {
		return getNotaFiscalServicoService().findPaginatedNFS(prepareCriteria(criteria));
	}

	/*
	 * METODOS PRIVADOS
	 */
	private TypedFlatMap prepareCriteria(Map criteria) {
		TypedFlatMap result = new TypedFlatMap();
		result.put("_currentPage", criteria.get("_currentPage"));
    	result.put("_pageSize", criteria.get("_pageSize"));
    	result.put("_order", criteria.get("_order"));
    	result.put("filial.idFilial", criteria.get("idFilial"));
    	result.put("nrNotaFiscalServico", criteria.get("nrNotaFiscalServico"));
    	result.put("dtInicial", criteria.get("dtInicial"));
    	result.put("dtFinal", criteria.get("dtFinal"));
    	result.put("municipio.idMunicipio", criteria.get("idMunicipio"));
    	result.put("clienteByIdClienteDestinatario.idCliente", criteria.get("idCliente"));
    	result.put("servicoAdicional.idServicoAdicional", criteria.get("idServicoAdicional"));
    	result.put("tpDocumentoServico", criteria.get("tpDocumentoServico"));
    	return result;
	}
	
	private List findCliente(String nrIdentificacao) {
		List result = clienteService.findClienteByNrIdentificacao(nrIdentificacao);
		if(!result.isEmpty()) {
			Map cliente = (Map)result.get(0);
			Map pessoa = (Map) cliente.get("pessoa");
			pessoa.put("nrIdentificacao", pessoa.remove("nrIdentificacaoFormatado"));
			cliente.put("inscricaoEstadual", findInscricaoEstadual((Long)cliente.get("idCliente")));
		}
		return result;
	}
	
	private List findInscricaoEstadual(Long idPessoa) {
		if(idPessoa == null) {
			return null;
		}
		List<TipoTributacaoIE> ies = tipoTributacaoIEService.findVigentesByIdPessoa(idPessoa);
		if (ies != null && !ies.isEmpty()) {
			List<Map> result = new ArrayList<Map>();
			for (TipoTributacaoIE tipoTributacaoIE : ies) {
				Map ie = new HashMap<String, Object>();
				ie.put("idInscricaoEstadual", tipoTributacaoIE.getInscricaoEstadual().getIdInscricaoEstadual());
				ie.put("nrInscricaoEstadual", tipoTributacaoIE.getInscricaoEstadual().getNrInscricaoEstadual());
				ie.put("blIndicadorPadrao", tipoTributacaoIE.getInscricaoEstadual().getBlIndicadorPadrao());
				result.add(ie);
			}
			return result;
		}
		return null;
	}

	/*
	 * GETTERS E SETTERS
	 */
	public void setDocumentoServicoFacade(DocumentoServicoFacade documentoServicoFacade) {
		this.documentoServicoFacade = documentoServicoFacade;
	}
	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}
	public void setNotaFiscalServicoService(NotaFiscalServicoService notaFiscalServicoService) {
		this.defaultService = notaFiscalServicoService;
	}
	private NotaFiscalServicoService getNotaFiscalServicoService() {
		return (NotaFiscalServicoService) this.defaultService;
	}
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}
	public void setCotacaoService(CotacaoService cotacaoService) {
		this.cotacaoService = cotacaoService;
	}
	public void setDivisaoClienteService(DivisaoClienteService divisaoClienteService) {
		this.divisaoClienteService = divisaoClienteService;
	}
	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public void setImpostoServicoService(ImpostoServicoService impostoServicoService) {
		this.impostoServicoService = impostoServicoService;
	}
	public void setMunicipioService(MunicipioService municipioService) {
		this.municipioService = municipioService;
	}
	public void setParcelaPrecoService(ParcelaPrecoService parcelaPrecoService) {
		this.parcelaPrecoService = parcelaPrecoService;
	}
	public void setServAdicionalDocServService(ServAdicionalDocServService servAdicionalDocServService) {
		this.servAdicionalDocServService = servAdicionalDocServService;
	}
	public void setServicoService(ServicoService servicoService) {
		this.servicoService = servicoService;
	}
	public void setGerarNFSService(GerarNFSService gerarNFSService) {
		this.gerarNFSService = gerarNFSService;
	}
	public void setTipoTributacaoIEService(TipoTributacaoIEService tipoTributacaoIEService) {
		this.tipoTributacaoIEService = tipoTributacaoIEService;
	}
	public void setEmitirNFSService(EmitirNFSService emitirNFSService) {
		this.emitirNFSService = emitirNFSService;
	}
	
	public ParametroIssMunicipioService getParametroIssMunicipioService() {
		return parametroIssMunicipioService;
	}
	public void setParametroIssMunicipioService(
			ParametroIssMunicipioService parametroIssMunicipioService) {
		this.parametroIssMunicipioService = parametroIssMunicipioService;
	}
	public void setAliquotaIssMunicipioServService(AliquotaIssMunicipioServService aliquotaIssMunicipioServService) {
		this.aliquotaIssMunicipioServService = aliquotaIssMunicipioServService;
	}

	public void setDoctoServicoService(DoctoServicoService doctoServicoService) {
		this.doctoServicoService = doctoServicoService;
	}

	public void setMonitoramentoDocEletronicoService(
			MonitoramentoDocEletronicoService monitoramentoDocEletronicoService) {
		this.monitoramentoDocEletronicoService = monitoramentoDocEletronicoService;
	}

	public ConteudoParametroFilialService getConteudoParametroFilialService() {
		return conteudoParametroFilialService;
	}

	public void setConteudoParametroFilialService(
			ConteudoParametroFilialService conteudoParametroFilialService) {
		this.conteudoParametroFilialService = conteudoParametroFilialService;
	}

	public NFEConjugadaService getNfeConjugadaService() {
		return nfeConjugadaService;
	}

	public void setNfeConjugadaService(NFEConjugadaService nfeConjugadaService) {
		this.nfeConjugadaService = nfeConjugadaService;
	}

	
}