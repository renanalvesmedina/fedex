package com.mercurio.lms.expedicao.swt.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.contratacaoveiculos.model.service.ProprietarioService;
import com.mercurio.lms.entrega.model.service.CancelarManifestoService;
import com.mercurio.lms.expedicao.model.service.ManifestoViagemNacionalService;
import com.mercurio.lms.expedicao.util.ConhecimentoUtils;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.JTFormatUtils;
import com.mercurio.lms.util.session.SessionUtils;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;

/**
 * Generated by: ADSM ActionGenerator
 *
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.expedicao.swt.manterManifestosViagemAction"
 */
public class ManterManifestosViagemAction extends CrudAction {
	private FilialService filialService;
	private ProprietarioService proprietarioService;
	private CancelarManifestoService cancelarManifestoService;
	private ConfiguracoesFacade configuracoesFacade;
	
	public TypedFlatMap findDadosSessao() {
		TypedFlatMap map = new TypedFlatMap();
		map.put("filial.idFilial", SessionUtils.getFilialSessao().getIdFilial());
		map.put("filial.sgFilial", SessionUtils.getFilialSessao().getSgFilial());
		map.put("pessoa.nmFantasia",SessionUtils.getFilialSessao().getPessoa().getNmFantasia());
		map.put("dtInicial",JTFormatUtils.format(JTDateTimeUtils.getDataAtual().minusDays(15)));
		map.put("dtFinal",JTFormatUtils.format(JTDateTimeUtils.getDataAtual()));
		return map;
	}

	public List findFilial(TypedFlatMap criteria) {
    	List list = filialService.findLookupBySgFilial(criteria.getString("sgFilial"), criteria.getString("tpAcesso"));
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		Map mapFilial = (Map)iter.next();
    		
    		Map map = new HashMap();
       		map.put("idFilial", mapFilial.get("idFilial"));    		
    		map.put("sgFilial", mapFilial.get("sgFilial"));
    		Map mapPessoa = (Map)mapFilial.get("pessoa");
    		map.put("nmFantasia", mapPessoa.get("nmFantasia"));
    		retorno.add(map);
    	}
    	return retorno;
	} 

	public ResultSetPage findPaginated(TypedFlatMap criteria) {
		if (criteria.getLong("idFilialOrigem") != null){
			criteria.put("filialOrigem.idFilial", criteria.getLong("idFilialOrigem").toString());
		}
		if (criteria.getLong("idFilialDestino") != null){
			criteria.put("filialDestino.idFilial", criteria.getLong("idFilialDestino").toString());
		}
		if (criteria.getInteger("nrManifesto") != null){
			criteria.put("nrManifesto", String.valueOf(criteria.get("nrManifesto")));
		}
		if (criteria.getString("tpManifestoViagem") != null){
			criteria.put("manifesto.tpManifestoViagem", criteria.get("tpManifestoViagem"));
		}
		ResultSetPage rs = getManifestoViagemNacionalService().findPaginatedManifestoViagem(criteria);
  
		Map mapa = new HashMap();
		List lista = rs.getList();
		for(Iterator i = lista.iterator();i.hasNext();) {
			mapa = (Map)i.next();
			mapa.put("nrManifesto", mapa.get("nrManifestoOrigem"));
			mapa.put("nmManifestoOrigem", mapa.get("sgFilialOrigem") + " " + FormatUtils.fillNumberWithZero(mapa.get("nrManifestoOrigem").toString(), 6));
			mapa.put("filialDestino", mapa.get("sgFilialDestino")+ " - " + mapa.get("nmFantasia"));			
			mapa.put("nmFilialOrigem", mapa.get("nmFantasiaFilialOrigem"));
			mapa.remove("sgFilialDestino");
			mapa.remove("nmFantasia");
		} 
		return rs;  
	} 
 
	public List findPaginatedCadManifestoViagem(TypedFlatMap criteria) {
		return getManifestoViagemNacionalService().findPaginatedCadManifestoViagem(criteria);
	}

	public ResultSetPage findPaginatedConhecimentoManifestoViagem(TypedFlatMap criteria) {
		ResultSetPage rs = getManifestoViagemNacionalService().findPaginatedConhecimentoManifestoViagem(criteria);
		List lista = rs.getList();
		for(Iterator i = lista.iterator();i.hasNext();) {
			criteria = (TypedFlatMap)i.next();
			criteria.put("nrCtrc", ConhecimentoUtils.formatConhecimento(criteria.getString("sgFilialOrigem"), criteria.getLong("nrConhecimento"), criteria.getInteger("dvConhecimento"), 6));
		}
		return rs;
	}

	public Integer getRowCount(TypedFlatMap criteria) {
		if (criteria.getLong("idFilialOrigem") != null){
			criteria.put("filialOrigem.idFilial", criteria.getLong("idFilialOrigem").toString());
		}
		if (criteria.getLong("idFilialDestino") != null){
			criteria.put("filialDestino.idFilial", criteria.getLong("idFilialDestino").toString());
		}
		if (criteria.getInteger("nrManifesto") != null){
			criteria.put("nrManifesto", String.valueOf(criteria.get("nrManifesto")));
		}
		if (criteria.getString("tpManifestoViagem") != null){
			criteria.put("manifesto.tpManifestoViagem", criteria.get("tpManifestoViagem"));
		}
		return getManifestoViagemNacionalService().getRowCountManifestoViagem(criteria);
	}

	public Integer getRowCountConhecimentoManifestoViagem(TypedFlatMap criteria) {
		return getManifestoViagemNacionalService().getRowCountConhecimentoManifestoViagem(criteria);
	}

	/**
	*
	**/
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		getManifestoViagemNacionalService().removeByIds(ids);
	}

	public Serializable findById(java.lang.Long id) {
		return getManifestoViagemNacionalService().findByIdManifestoViagem(id);
	}

	public List findLookupProprietario(TypedFlatMap criteria) {
		return proprietarioService.findLookup(criteria);
	}

	/**
	 * Cancelamento de manifestos de Viagem.
	 * autor Andre Valadas.
	 * @param criteria
	 * @return status do Reaproveitamento dos Dados
	 */
	public TypedFlatMap cancelManifestoViagem(TypedFlatMap criteria) {
		Long idManifestoViagemNacional = criteria.getLong("idManifestoViagemNacional");
		Boolean blReaproveitarDados = criteria.getBoolean("reaproveitarDados");

		/** Validacoes do Form */
		if (idManifestoViagemNacional == null || idManifestoViagemNacional.longValue() < 1) {
			throw new BusinessException("requiredField", new Object[]{configuracoesFacade.getMensagem("cancelamentoManifesto")});
		}
		if (blReaproveitarDados == null) {
			throw new BusinessException("requiredField", new Object[]{configuracoesFacade.getMensagem("reaproveitarDados")});
		}
		return cancelarManifestoService.executeCancelarManifestoViagem(idManifestoViagemNacional, blReaproveitarDados, Boolean.FALSE);
	}

	/**
	 * Verifica se existe Recido de Reembolso para o Manifesto passado.
	 * @author Andre Valadas.
	 * @param criteria
	 * @return
	 */
	public TypedFlatMap existeRecibosReembolso(TypedFlatMap criteria) {
		Long idManifestoViagemNacional = criteria.getLong("idManifestoViagemNacional");

		TypedFlatMap data = new TypedFlatMap();
		data.put("blExisteReembolso", getManifestoViagemNacionalService().validateManifestoReembolso(idManifestoViagemNacional, Boolean.TRUE));
		return data;
	}

	private ManifestoViagemNacionalService getManifestoViagemNacionalService() {
		return (ManifestoViagemNacionalService)this.defaultService; 
	}
	public void setManifestoViagemNacionalService(ManifestoViagemNacionalService manifestoViagemNacionalService) {
		this.defaultService = manifestoViagemNacionalService; 
	}
	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public void setProprietarioService(ProprietarioService proprietarioService) {
		this.proprietarioService = proprietarioService;
	}
	public void setCancelarManifestoService(CancelarManifestoService cancelarManifestoService) {
		this.cancelarManifestoService = cancelarManifestoService;
	}
}