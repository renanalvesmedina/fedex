package com.mercurio.lms.expedicao.swt.action;

import java.util.List;
import java.util.Map;

import org.apache.commons.collections.map.HashedMap;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.lms.configuracoes.model.EnderecoPessoa;
import com.mercurio.lms.configuracoes.model.service.EnderecoPessoaService;
import com.mercurio.lms.expedicao.model.DoctoServico;
import com.mercurio.lms.expedicao.model.service.CancelamentoNotaFiscalService;
import com.mercurio.lms.expedicao.model.service.DoctoServicoService;
import com.mercurio.lms.expedicao.model.service.MotivoCancelamentoService;
import com.mercurio.lms.municipios.model.Municipio;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.service.ClienteService;
/**
 * Generated by: ADSM ActionGenerator
 *
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.expedicao.swt.manterCancelamentoNotaFiscalAction"
 */

public class ManterCancelamentoNotaFiscalAction extends CrudAction {

	private DoctoServicoService doctoServicoService;
	private CancelamentoNotaFiscalService cancelamentoNotaFiscalService;
	private MotivoCancelamentoService motivoCancelamentoService;
	private ClienteService clienteService;
	private EnderecoPessoaService enderecoPessoaService;
	
	public void executeCancelNF(Map map){
		Long idDoctoServico = (Long)map.get("idDoctoServico");
		Long idMotivoCancelamento = (Long)map.get("idMotivoCancelamento");
		cancelamentoNotaFiscalService.executeCancelNF(idDoctoServico, idMotivoCancelamento);
	}

	public Map findDoctoServico(Map criteria){
		Map result = new HashedMap();
		
		DoctoServico doctoServico = doctoServicoService.findByIdWithRemetenteDestinatario((Long)criteria.get("idDoctoServico"));
		if( doctoServico != null ){
			result.put("vlrTotal",doctoServico.getVlTotalDocServico());
			if( doctoServico.getClienteByIdClienteRemetente() != null){
				Cliente cliente = clienteService.findByIdComPessoa(doctoServico.getClienteByIdClienteRemetente().getIdCliente());
				result.put("nrPessoaRemetente",cliente.getPessoa().getNrIdentificacao());
				result.put("nmPessoaRemetente",cliente.getPessoa().getNmPessoa());
				
				
				EnderecoPessoa enderecoPessoa = enderecoPessoaService.findByIdPessoa(cliente.getPessoa().getIdPessoa());
				if( enderecoPessoa != null ){
					result.put("nrCepRemetente",enderecoPessoa.getNrCep());
					result.put("dsEndereco",enderecoPessoa.getDsEndereco());
					result.put("nrEndereco",enderecoPessoa.getNrEndereco());
					result.put("dsComplemento",enderecoPessoa.getDsComplemento());
					Municipio municipio = enderecoPessoa.getMunicipio();
					if( municipio != null ){
						result.put("nmMunicipio",municipio.getNmMunicipio());
						result.put("sgUnidadeFederativa",municipio.getUnidadeFederativa().getSgUnidadeFederativa());
					}
				}
			}
		}
		return result;
	}

	public List findComboMotivoCancelamento(Map criteria){
		return motivoCancelamentoService.find(criteria);
	}

	public void setCancelamentoNotaFiscalService(
			CancelamentoNotaFiscalService cancelamentoNotaFiscalService) {
		this.cancelamentoNotaFiscalService = cancelamentoNotaFiscalService;
	}

	public void setMotivoCancelamentoService(
			MotivoCancelamentoService motivoCancelamentoService) {
		this.motivoCancelamentoService = motivoCancelamentoService;
	}

	public void setDoctoServicoService(DoctoServicoService doctoServicoService) {
		this.doctoServicoService = doctoServicoService;
	}

	public void setEnderecoPessoaService(EnderecoPessoaService enderecoPessoaService) {
		this.enderecoPessoaService = enderecoPessoaService;
	}

	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}	
}
