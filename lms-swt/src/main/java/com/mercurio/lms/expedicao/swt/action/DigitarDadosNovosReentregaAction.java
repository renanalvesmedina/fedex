package com.mercurio.lms.expedicao.swt.action;

import java.io.Serializable;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.session.SessionContext;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.entrega.model.NotaFiscalOperada;
import com.mercurio.lms.entrega.model.service.NotaFiscalOperadaService;
import com.mercurio.lms.expedicao.model.Conhecimento;
import com.mercurio.lms.expedicao.model.NotaFiscalConhecimento;
import com.mercurio.lms.expedicao.model.ObservacaoDoctoServico;
import com.mercurio.lms.expedicao.model.service.ConhecimentoReentregaService;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.util.ConhecimentoUtils;
import com.mercurio.lms.expedicao.util.ConstantesExpedicao;
import com.mercurio.lms.municipios.model.service.FilialService;

/**
 * Generated by: ADSM ActionGenerator
 * 
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * 
 * @spring.bean id="lms.expedicao.swt.digitarDadosNovosReentregaAction"
 */

public class DigitarDadosNovosReentregaAction extends CrudAction {
	private FilialService filialService;
	private ConhecimentoReentregaService conhecimentoReentregaService;
	private ConhecimentoService conhecimentoService;
	
	public List findFilialConhecimento(TypedFlatMap criteria) {
		return filialService.findLookupBySgFilial(criteria.getString("sgFilial"), criteria.getString("tpAcesso"));
	}

	public List findByNrConhecimentoIdFilialOrigem(TypedFlatMap criteria) {
		Long nrDoctoServico = criteria.getLong("nrDoctoServico");
		Long idFilialOrigem = criteria.getLong("idFilial");
		String tpDoctoServico = criteria.getString("tpDocumentoServico");
		return conhecimentoReentregaService.findConhecimentoReentregaLookup(nrDoctoServico, idFilialOrigem, tpDoctoServico);
	}
	
	public Map findConhecimento(Map params){
		Long idDoctoServico = (Long) params.get("idDoctoServico");
		Conhecimento conhecimento = conhecimentoService.findById(idDoctoServico);

		Map retorno = new HashMap();
		retorno.put("conhecimento", conhecimento);
		return retorno;
	}
	
	public Map calcularFrete(Map params){
		Long idDoctoServico = (Long) params.get("idDoctoServico");
		Conhecimento conhecimento = conhecimentoReentregaService.executeCalcularFreteReentrega(idDoctoServico);

		ConhecimentoUtils.setConhecimentoInSession(conhecimento);
		SessionContext.set(ConstantesExpedicao.ID_DOCTO_SERVICO_IN_SESSION, idDoctoServico);

		Map map = new HashMap();
		map.put("vlTotalFrete", conhecimento.getVlTotalDocServico());

		return map;
	}

	public Serializable gravarCRTCReentrega(Map params){
		Conhecimento conhecimento = ConhecimentoUtils.getConhecimentoInSession();
		Long idDoctoServicoOriginal = (Long) SessionContext.get(ConstantesExpedicao.ID_DOCTO_SERVICO_IN_SESSION);
		DomainValue tpDocumentoServico = new DomainValue((String) conhecimento.getTpDocumentoServico().getValue());
		Boolean isEntregaParcial = (Boolean) params.get("isEntregaParcial");
		
		for(int i = 1; i < 5; i++) {
			String ds = (String) params.get("observacao" + i);
			if(StringUtils.isNotBlank(ds)) {
				ObservacaoDoctoServico observacaoDoctoServico = new ObservacaoDoctoServico();
				observacaoDoctoServico.setDsObservacaoDoctoServico(ds);
				conhecimento.addObservacaoDoctoServico(observacaoDoctoServico);
			}
		}

		Boolean isDocumentoEletronico = (Boolean) params.get("isDocumentoEletronico");
		List<NotaFiscalConhecimento> notasFiscaisConhecimento;
		
		if(isDocumentoEletronico != null && isDocumentoEletronico){
			List<Map<String, Object>> mapNotasFiscaisConhecimento = (List<Map<String, Object>>) params.get("notasFiscaisConhecimento");
			notasFiscaisConhecimento = extractNotasFiscaisConhecimento(conhecimento, mapNotasFiscaisConhecimento, isEntregaParcial);
		} else {
			notasFiscaisConhecimento = null;
		}
		
		Serializable retorno = conhecimentoReentregaService.storeConhecimentoReentrega(idDoctoServicoOriginal, conhecimento, notasFiscaisConhecimento, isEntregaParcial);
		
		return retorno;
	}
	
	private List<NotaFiscalConhecimento> extractNotasFiscaisConhecimento(final Conhecimento conhecimento, final List<Map<String, Object>> mapNotasFiscaisConhecimento, Boolean isEntregaParcial) {
		List<NotaFiscalConhecimento> notasFiscaisConhecimento = new ArrayList<NotaFiscalConhecimento>();
		for (Map<String, Object> map : mapNotasFiscaisConhecimento) {
			
			if (isEntregaParcial && (!map.containsKey("blReentregarNf") || !((Boolean) map.get("blReentregarNf")))) {
				continue;
			}
			
			NotaFiscalConhecimento notaFiscalConhecimento = new NotaFiscalConhecimento();
			notaFiscalConhecimento.setIdNotaFiscalConhecimento((Long) map.get("id"));
			notaFiscalConhecimento.setConhecimento(conhecimento);
			notaFiscalConhecimento.setNrChave((String) map.get("nrChave"));
			if(map.get("nrCfop") != null){
				notaFiscalConhecimento.setNrCfop(new BigInteger(String.valueOf(map.get("nrCfop"))));
			}
			notaFiscalConhecimento.setVlBaseCalculo((BigDecimal) map.get("vlBaseCalculo"));
			notaFiscalConhecimento.setVlIcms((BigDecimal) map.get("vlIcms"));
			notaFiscalConhecimento.setVlBaseCalculoSt((BigDecimal) map.get("vlBaseCalculoSt"));
			notaFiscalConhecimento.setVlIcmsSt((BigDecimal) map.get("vlIcmsSt"));
			notaFiscalConhecimento.setVlTotalProdutos((BigDecimal) map.get("vlTotalProdutos"));
			if(map.get("nrPinSuframa") != null){
				notaFiscalConhecimento.setNrPinSuframa(Integer.valueOf(String.valueOf(map.get("nrPinSuframa"))));
			}
			
			notasFiscaisConhecimento.add(notaFiscalConhecimento);
		}
		return notasFiscaisConhecimento;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	
	public void setConhecimentoReentregaService(ConhecimentoReentregaService conhecimentoReentregaService) {
		this.conhecimentoReentregaService = conhecimentoReentregaService;
	}
	
	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
	}
}
