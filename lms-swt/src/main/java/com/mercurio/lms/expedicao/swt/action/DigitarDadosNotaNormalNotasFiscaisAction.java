package com.mercurio.lms.expedicao.swt.action;

import static com.mercurio.lms.util.FormatUtils.fillNumberWithZero;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.joda.time.YearMonthDay;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.service.ConteudoParametroFilialService;
import com.mercurio.lms.configuracoes.model.service.EnderecoPessoaService;
import com.mercurio.lms.expedicao.DoctoServicoValidateFacade;
import com.mercurio.lms.expedicao.model.service.DigitarDadosNotaNormalNotasFiscaisService;
import com.mercurio.lms.expedicao.model.service.DigitarNotaService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.service.ClienteService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.expedicao.swt.digitarDadosNotaNormalNotasFiscaisAction"
 */
public class DigitarDadosNotaNormalNotasFiscaisAction extends CrudAction {
	private EnderecoPessoaService enderecoPessoaService;
	private ConteudoParametroFilialService conteudoParametroFilialService;
	private DigitarDadosNotaNormalNotasFiscaisService digitarDadosNotaNormalNotasFiscaisService;	
	private DoctoServicoValidateFacade doctoServicoValidateFacade;
	private DigitarNotaService digitarNotaService;
	private ClienteService clienteService;
	
	@SuppressWarnings("rawtypes")
    public ResultSetPage findPaginated(Map criteria) {
		return ResultSetPage.EMPTY_RESULTSET;
	}

	@SuppressWarnings({ "rawtypes", "unchecked" })
    public Map getRowCountUfFronteiraRapidaFilial(){
		Long idPessoa = SessionUtils.getFilialSessao().getIdFilial();
		Serializable rowCount = enderecoPessoaService.getRowCountByPessoaUfFronteiraRapida(idPessoa, Boolean.TRUE);
		Map retorno = new HashMap();
		retorno.put("fronteiraRapida", rowCount);
		return retorno;
	}

	/**
	 * Busca LIMITE MAXIMO PESO VOLUME para validação do Calculo de Frete 
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
    public Map findLimitePesoVolume() {
		final BigDecimal limitePesoVolume = doctoServicoValidateFacade.findLimitePesoVolumeCalculoFrete();
		final Map retorno = new TypedFlatMap();
		retorno.put("limitePesoVolume", limitePesoVolume);
		return retorno;
	}

	@SuppressWarnings({ "rawtypes", "unchecked" })
    public Map verificaEmissorNfe(Map parameters) {
		Long idClienteRemetente = (Long)parameters.get("idClienteRemetente");
		Cliente cliente = clienteService.findById(idClienteRemetente);
		final Map retorno = new TypedFlatMap();
		retorno.put("emissorNfe", cliente.getBlEmissorNfe() != null ? cliente.getBlEmissorNfe() : false);
		return retorno;
	}

	private void validateRemetenteChaveNfe(Map parameters, String chaveNfe) {
		Long idClienteRemetente = (Long)parameters.get("idClienteRemetente");
		Cliente cliente = clienteService.findById(idClienteRemetente);
		if(chaveNfe == null || cliente == null || !cliente.getPessoa().getNrIdentificacao().equals(chaveNfe.substring(6, 20))){
			//throw new BusinessException("LMS-04497");
		}
	}

	private void validateNrNotaFiscalChaveNfe(Map parameters, String chaveNfe) {
		Integer nrNotaFiscal = (Integer)parameters.get("numNotaFiscal");
		Integer nrNotaFiscalChave = Integer.valueOf(chaveNfe.substring(25, 34));
		if(nrNotaFiscal == null || !(nrNotaFiscal.equals(nrNotaFiscalChave))){
			throw new BusinessException("LMS-04562");
		}
	}
	
	public void validateDataEmissaoChaveNfe(Map parameters, String chaveNfe){
		YearMonthDay dtEmissao = (YearMonthDay)parameters.get("dataEmissao");
		String dtChaveNfe = chaveNfe.substring(2, 6);
		String formattedDtEmissao = JTDateTimeUtils.getFormattedYearMonth(dtEmissao);
		
		if(dtChaveNfe == null || formattedDtEmissao == null || !dtChaveNfe.equals(formattedDtEmissao)){
			throw new BusinessException("LMS-04563");
		}
	}
	
	/**
	 * Retorna o conteúdo do atributo VL_CONTEUDO_PARAMETRO_FILIAL da tabela CONTEUDO_PARAMETRO_FILIAL 
	 * @deprecated usar o método loadIndicadoresCteNfe.
	 * @return
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
    public Map loadIndicadorCte(){
		Filial filial = SessionUtils.getFilialSessao();

		Object obj = conteudoParametroFilialService.findConteudoByNomeParametro(filial.getIdFilial(), "INDICADOR CTE", false);
		Integer vlConteudoParametroFilial = obj != null ? Integer.valueOf(obj.toString()) : null;
		
		Map retorno = new HashMap();
		retorno.put("indicadorCte", vlConteudoParametroFilial);
		return retorno;
	}
	
	/**
	 * Retorna os valores dos indicadores CTE e NFE da tabela PARAMETRO_FILIAL.
	 * @return mapa com os valores dos indicadores.
	 */
	public Map<String, Object> loadIndicadoresCteNfePinSuframa(Map<String, Object> parameters) {
		Filial filial = SessionUtils.getFilialSessao();

		Object obj = conteudoParametroFilialService.findConteudoByNomeParametro(filial.getIdFilial(), "INDICADOR CTE", false);
		Integer cte = obj != null ? Integer.valueOf(obj.toString()) : null;
		
		obj = conteudoParametroFilialService.findConteudoByNomeParametro(filial.getIdFilial(), "INDICADOR NFE", false);
		Integer nfe = obj != null ? Integer.valueOf(obj.toString()) : null;

		Long idClienteConsignatario;
		Cliente clienteConsignatario = (Cliente) parameters.get("clienteConsignatario");
		if(clienteConsignatario == null){
			idClienteConsignatario = null;
		} else {
			idClienteConsignatario = clienteConsignatario.getIdCliente();
		}
		
		Boolean obrigaPinSuframa = digitarNotaService.findObrigatoriedadePinSuframa((Long) parameters.get("idClienteDestinatario"), idClienteConsignatario);

		Map<String, Object> retorno = new HashMap<String, Object>();
		retorno.put("indicadorCte", cte);
		retorno.put("indicadorNfe", nfe);
		retorno.put("obrigaPinSuframa", obrigaPinSuframa);

		return retorno;
	}
	
	public void keepAlive(){
		// LMSA-1737 Método necessário para manter a sessão ativa;
	}
	
	@SuppressWarnings("rawtypes")
    public void validateChaveNfe(Map parameters) {
        Boolean redespachoIntermediario = (Boolean) parameters.get("redespachoIntermediario");
        String chaveNfeCte = (String) parameters.get("nrChaveNfe");
        Long idClienteRemetente = (Long) parameters.get("idClienteRemetente");
        Integer nrNotaFiscal = (Integer) parameters.get("numNotaFiscal");
        YearMonthDay dtEmissao = (YearMonthDay) parameters.get("dataEmissao");
        //
        digitarDadosNotaNormalNotasFiscaisService.validateChaveNfe(
                redespachoIntermediario, 
                chaveNfeCte, 
                nrNotaFiscal, 
                dtEmissao, 
                idClienteRemetente,
				SessionUtils.getFilialSessao().getIdFilial());
	}
	
	/**
	 * Valida Notas Fiscais Conhecimento
	 * @param criteria
	 * @return Warnings 
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
    public Map validateNotasConhecimento(Map<String, Object> parameters) {
		convertViewMapToModelMap((List<Map<String, Object>>)parameters.get("notasFiscais"), 
		        (Boolean) parameters.get("redespachoIntermediario"));
		return digitarDadosNotaNormalNotasFiscaisService.validateNotasConhecimento(parameters);
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
    public Map storeNotas(Map parameters) {
		convertViewMapToModelMap((List<Map<String, Object>>) parameters.get("notaFiscalConhecimento"),
		        (Boolean) parameters.get("redespachoIntermediario"));
		// Adiciona zeros à esquerda na etiqueta de coleta
		List notasParameters = (List)parameters.get("notaFiscalConhecimento");

		for (int i = 0; i < notasParameters.size(); i++) {
			Map notaFiscal = (Map) notasParameters.get(i);
			List volumeNotaFiscaisParameters = (List)notaFiscal.get("volumeNotaFiscal");
			if (volumeNotaFiscaisParameters != null && volumeNotaFiscaisParameters.size() > 0) {
				for (int j = 0; j < volumeNotaFiscaisParameters.size(); j++) {
					Map volumeNotaFiscalMap = (Map)volumeNotaFiscaisParameters.get(j);
					if (volumeNotaFiscalMap.get("nrVolumeColeta") != null) {
						volumeNotaFiscalMap.put("nrVolumeColeta", fillNumberWithZero(volumeNotaFiscalMap.get("nrVolumeColeta").toString(), 12));
					}
				}
			}
		}
		return digitarDadosNotaNormalNotasFiscaisService.storeNotas(parameters);
	}

	// LMSA-6160
	private static final String TipoDocumentoNFNFeCTe = "01";
    private static final String TipoDocumentoNFNFeCTeRedespachoIntermediario = "99";
    
	private void convertViewMapToModelMap(List<Map<String, Object>> notasFiscais, Boolean redespachoIntermediario) {
		for (Map<String, Object> notaFiscal : notasFiscais) {
			notaFiscal.put("nrNotaFiscal", notaFiscal.get("nrDocumento"));
			notaFiscal.put("dtEmissao", notaFiscal.get("dataEmissao"));
			notaFiscal.put("qtVolumes", notaFiscal.get("quantidadeVolumes2"));
			notaFiscal.put("psMercadoria", notaFiscal.get("pesoDeclarado"));
			notaFiscal.put("psCubado", notaFiscal.get("pesoCubado"));
			notaFiscal.put("vlTotal", notaFiscal.get("valorTotal"));
			notaFiscal.put("nrVolumeEtiquetaInicial", notaFiscal.get("etiquetaInicial"));
			notaFiscal.put("nrVolumeEtiquetaFinal", notaFiscal.get("etiquetaFinal"));
			notaFiscal.put("blProdutoPerigoso", notaFiscal.get("blProdutoPerigoso"));
			notaFiscal.put("blControladoPoliciaCivil", notaFiscal.get("blControladoPoliciaCivil"));
			notaFiscal.put("blControladoPoliciaFederal", notaFiscal.get("blControladoPoliciaFederal"));
			notaFiscal.put("blControladoExercito", notaFiscal.get("blControladoExercito"));
			
			// LMSA-6160
			String tipoDocumento = (String) notaFiscal.get("lbTpLayoutDocumento");
			tipoDocumento = Boolean.TRUE.equals(redespachoIntermediario) && TipoDocumentoNFNFeCTe.equals(tipoDocumento) 
			        ? TipoDocumentoNFNFeCTeRedespachoIntermediario : tipoDocumento;
			notaFiscal.put("tpDocumento", tipoDocumento);
		}
	}
	
	public void setEnderecoPessoaService(EnderecoPessoaService enderecoPessoaService) {
		this.enderecoPessoaService = enderecoPessoaService;
	}
	
	public void setConteudoParametroFilialService(ConteudoParametroFilialService conteudoParametroFilialService) {
		this.conteudoParametroFilialService = conteudoParametroFilialService;
	}
	
	public void setDigitarDadosNotaNormalNotasFiscaisService(DigitarDadosNotaNormalNotasFiscaisService digitarDadosNotaNormalNotasFiscaisService) {
		this.digitarDadosNotaNormalNotasFiscaisService = digitarDadosNotaNormalNotasFiscaisService;
	}		
	public void setDoctoServicoValidateFacade(DoctoServicoValidateFacade doctoServicoValidateFacade) {
		this.doctoServicoValidateFacade = doctoServicoValidateFacade;
	}		

	public void setDigitarNotaService(DigitarNotaService digitarNotaService) {
		this.digitarNotaService = digitarNotaService;
	}		
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}
}
