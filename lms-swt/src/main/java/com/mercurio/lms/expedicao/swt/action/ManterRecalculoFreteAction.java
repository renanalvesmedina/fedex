package com.mercurio.lms.expedicao.swt.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.MapUtils;
import org.apache.commons.lang.StringUtils;

import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.PaginatedQuery;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.lms.configuracoes.util.MapUtilsPlus;
import com.mercurio.lms.expedicao.model.ClienteNaoProcessar;
import com.mercurio.lms.expedicao.model.ClienteProcessar;
import com.mercurio.lms.expedicao.model.RecalculoFrete;
import com.mercurio.lms.expedicao.model.RecalculoFreteArquivoDTO;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.model.service.RecalculoFreteCallerService;
import com.mercurio.lms.expedicao.model.service.RecalculoFreteService;
import com.mercurio.lms.tabelaprecos.model.SubtipoTabelaPreco;
import com.mercurio.lms.tabelaprecos.model.TabelaPreco;
import com.mercurio.lms.tabelaprecos.model.TipoTabelaPreco;
import com.mercurio.lms.tabelaprecos.model.service.TabelaPrecoService;
import com.mercurio.lms.vendas.model.service.ClienteService;
import com.mercurio.lms.vendas.model.service.ParametroClienteService;



/**
 * Generated by: ADSM ActionGenerator
 *
 * Não inserir documentação após ou remover a tag do XDoclet a seguir. O valor
 * do <code>id</code> informado abaixo deve ser utilizado para referenciar
 * este serviço.
 *
 * @spring.bean id="lms.expedicao.swt.manterRecalculoFreteAction"
 */
public class ManterRecalculoFreteAction {

	private RecalculoFreteService recalculoFreteService;
	private RecalculoFreteCallerService recalculoFreteCallerService;
	
	private ConhecimentoService conhecimentoService;
	private ClienteService clienteService;

	private ParametroClienteService parametroClienteService;
	
	private TabelaPrecoService tabelaPrecoService;

	/**
	 * Utiliizado pela grid da tela
	 *
	 * @param id
	 * @return
	 */
	public Map<String, Object> findById(Long id) {

		Map<String, Object> map = getRecalculoFreteService().findById(id).getMap();

		/*Clientes a processar*/
		map.put("clientesProcessar", getRecalculoFreteService().findClientesProcessar(id));

		/*Cliente não processar*/
		map.put("clientesNaoProcessar", getRecalculoFreteService().findClientesNaoProcessar(id));

		return map;
	}

	/**
	 * Paginacao da tela
	 *
	 * @param criteria
	 * @return ResultSetPage
	 */
	public ResultSetPage<Map<String, Object>> findPaginated(Map<String, Object> criteria) {

		ResultSetPage rsp = getRecalculoFreteService().findPaginated(new PaginatedQuery(criteria));

		List<RecalculoFrete> list = rsp.getList();
		List<Map<String, Object>> retorno = new ArrayList<Map<String,Object>>(list.size());

		for(RecalculoFrete recalculo : list){
			retorno.add(recalculo.getMap());
		}
		rsp.setList(retorno);

		return rsp;
	}

	/**
	 * Executa o recálculo de frete através de um layout
	 * "padronizado"
	 *
	 * @param parameters
	 */
	public Map<String, Object> importar(Map map){
		String host = MapUtils.getString(map, "host");
		String user = MapUtils.getString(map, "user");
		String pass = MapUtils.getString(map, "password");
		String fold = MapUtils.getString(map, "folder");

		/*Obtem o arquivo através de um conexão ftp , e o mesmo deve conter o nome
		recalculo.csv*/
		List<RecalculoFreteArquivoDTO> list = recalculoFreteService.getFile(host, user, pass, fold);

		return recalculoFreteCallerService.executeRecalculo(list);
	}

	/**
	 * Obtem o sub tipos da tabela preco
	 *
	 * @param parameters
	 * @return
	 */
	public List findByTpTipoTabelaPreco(Map parameters){
		return getRecalculoFreteService().findByTpTipoTabelaPreco(parameters);
	}

	/**
	 * Gera os resultados do recálculo em um arquivo TXT
	 *
	 * @param parameters
	 */
	public Map gerarResultados(Map parameters){

		Map<String, Object> params = new HashMap<String, Object>();

		Long idRecalculoFrete = MapUtils.getLong(parameters, "idRecalculoFrete");

		if(idRecalculoFrete != null){
			RecalculoFrete recalculoFrete = recalculoFreteService.findById(idRecalculoFrete);
			String fileName = "REC"+StringUtils.leftPad(recalculoFrete.getNrProcesso().toString(), 10, '0');
			String fileBody = recalculoFreteService.executeReport(idRecalculoFrete);
			params.put("fileName", fileName);
			params.put("fileBody", fileBody);
		}

		return params;
	}

	/**
	 * Recalculo de documentos através de dados informados na tela
	 *
	 * @param parameters
	 */
	public Map<String, Object> recalculoFlex(Map<String, Object> parameters){
		RecalculoFrete recalculoFrete = build(parameters);
		
		return recalculoFreteCallerService.executeRecalculo(recalculoFrete);
	}

	/**
	 * RecalculoFrete
	 *
	 * @param parameters
	 * @return
	 */
	private RecalculoFrete build(Map<String, Object> parameters){
		RecalculoFrete recalculoFrete = new RecalculoFrete();
		recalculoFrete.setIdRecalculoFrete(MapUtils.getLong(parameters, "idRecalculoFrete"));
		recalculoFrete.setNrProcesso(MapUtils.getLong(parameters, "nrProcesso"));
		recalculoFrete.setDsProcesso(MapUtils.getString(parameters, "dsProcesso"));
		recalculoFrete.setDtInicial(MapUtilsPlus.getYearMonthDay(parameters, "dtInicial"));
		recalculoFrete.setDtFinal((MapUtilsPlus.getYearMonthDay(parameters, "dtFinal")));
		if( MapUtils.getString(parameters, "tpSituacao") != null ){
			recalculoFrete.setTpSituacaoProcesso(new DomainValue(MapUtils.getString(parameters, "tpSituacao")));
		}
		recalculoFrete.setDtInicio((MapUtilsPlus.getYearMonthDay(parameters, "dtInicio")));
		recalculoFrete.setDtFim((MapUtilsPlus.getYearMonthDay(parameters, "dtFim")));
		recalculoFrete.setBlTabelaAtual(MapUtils.getBoolean(parameters, "blTabelaAtual"));
		recalculoFrete.setBlTabelaOriginal(MapUtils.getBoolean(parameters, "blTabelaOriginal"));
		recalculoFrete.setBlAliquotaOriginal(MapUtils.getBoolean(parameters, "blAliquotaOriginal"));

		Long idTabelaPrecoParametro = MapUtils.getLong(parameters, "idTabelaPrecoParametro");
		if(idTabelaPrecoParametro != null){
			TabelaPreco tabelaPrecoCalculo = new TabelaPreco();
			tabelaPrecoCalculo.setIdTabelaPreco(idTabelaPrecoParametro);
			recalculoFrete.setTabelaPrecoCalculo(tabelaPrecoCalculo);
		}

		Long idTabelaPrecoFiltro = MapUtils.getLong(parameters, "idTabelaPrecoFiltro");
		if(idTabelaPrecoFiltro != null){
			TabelaPreco tabelaPrecoFiltro = new TabelaPreco();
			tabelaPrecoFiltro.setIdTabelaPreco(idTabelaPrecoFiltro);
			recalculoFrete.setTabelaPrecoFiltro(tabelaPrecoFiltro);
		}

		Long idTipoTabelaPreco = MapUtils.getLong(parameters, "idTipoTabelaPreco");
		if(idTipoTabelaPreco != null){
			TipoTabelaPreco tipoTabelaPreco = new TipoTabelaPreco();
			tipoTabelaPreco.setIdTipoTabelaPreco(idTipoTabelaPreco);
			recalculoFrete.setTipoTabelaPreco(tipoTabelaPreco);
		}

		Long idSubtipoTabelaPreco = MapUtils.getLong(parameters, "idSubtipoTabelaPreco");
		if(idSubtipoTabelaPreco != null){
			SubtipoTabelaPreco subtipoTabelaPreco = new SubtipoTabelaPreco();
			subtipoTabelaPreco.setIdSubtipoTabelaPreco(idSubtipoTabelaPreco);
			recalculoFrete.setSubtipoTabelaPreco(subtipoTabelaPreco);
		}

		List<Map> clientesProcessar    = MapUtilsPlus.getList(parameters, "clientesProcessar", null);
		List<Map> clientesNaoProcessar = MapUtilsPlus.getList(parameters, "clientesNaoProcessar", null);

		/*Clientes a processar*/
		if(CollectionUtils.isNotEmpty(clientesProcessar)){
			for (Map map : clientesProcessar) {
				ClienteProcessar cp = new ClienteProcessar();
				cp.setRecalculoFrete(recalculoFrete);
				cp.setCliente(clienteService.findById((Long) map.get("idCliente")));
				recalculoFrete.addClienteProcessar(cp);
			}
		}

		/*Clientes não processar*/
		if(CollectionUtils.isNotEmpty(clientesNaoProcessar)){
			for (Map map : clientesNaoProcessar) {
				ClienteNaoProcessar cnp = new ClienteNaoProcessar();
				cnp.setRecalculoFrete(recalculoFrete);
				cnp.setCliente(clienteService.findById((Long) map.get("idCliente")));
				recalculoFrete.addClientesNaoProcessar(cnp);
			}
		}

		return recalculoFrete;
	}
	
	public List findTabelaPreco(Map criteria) {
		return tabelaPrecoService.findLookup(criteria);
	}

	public RecalculoFreteService getRecalculoFreteService() {
		return recalculoFreteService;
	}

	public void setRecalculoFreteService(RecalculoFreteService recalculoFreteService) {
		this.recalculoFreteService = recalculoFreteService;
	}

	public ConhecimentoService getConhecimentoService() {
		return conhecimentoService;
	}

	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
	}

	public void setParametroClienteService(ParametroClienteService parametroClienteService) {
		this.parametroClienteService = parametroClienteService;
	}

	public ParametroClienteService getParametroClienteService() {
		return parametroClienteService;
	}

	public ClienteService getClienteService() {
		return clienteService;
	}

	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}

	public TabelaPrecoService getTabelaPrecoService() {
		return tabelaPrecoService;
	}

	public void setTabelaPrecoService(TabelaPrecoService tabelaPrecoService) {
		this.tabelaPrecoService = tabelaPrecoService;
	}

	public void setRecalculoFreteCallerService(
			RecalculoFreteCallerService recalculoFreteCallerService) {
		this.recalculoFreteCallerService = recalculoFreteCallerService;
	}

}
