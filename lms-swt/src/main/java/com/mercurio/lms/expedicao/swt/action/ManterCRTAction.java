package com.mercurio.lms.expedicao.swt.action;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.joda.time.DateTime;
import org.joda.time.YearMonthDay;

import com.mercurio.adsm.core.util.ReflectionUtils;
import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.coleta.model.service.PedidoColetaService;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.ConstantesConfiguracoes;
import com.mercurio.lms.configuracoes.model.EnderecoPessoa;
import com.mercurio.lms.configuracoes.model.Moeda;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.configuracoes.model.Servico;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.configuracoes.model.service.EnderecoPessoaService;
import com.mercurio.lms.configuracoes.model.service.MoedaPaisService;
import com.mercurio.lms.configuracoes.model.service.ServicoService;
import com.mercurio.lms.expedicao.model.AduanaCtoInt;
import com.mercurio.lms.expedicao.model.CtoInternacional;
import com.mercurio.lms.expedicao.model.DespachanteCtoInt;
import com.mercurio.lms.expedicao.model.Dimensao;
import com.mercurio.lms.expedicao.model.service.AduanaCtoIntService;
import com.mercurio.lms.expedicao.model.service.CtoInternacionalService;
import com.mercurio.lms.expedicao.model.service.DespachanteCtoIntService;
import com.mercurio.lms.expedicao.model.service.DimensaoService;
import com.mercurio.lms.expedicao.model.service.DocumentoAnexoService;
import com.mercurio.lms.expedicao.model.service.EmbalagemService;
import com.mercurio.lms.expedicao.model.service.ProdutoService;
import com.mercurio.lms.expedicao.util.ConstantesExpedicao;
import com.mercurio.lms.expedicao.util.CtoInternacionalUtils;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.Municipio;
import com.mercurio.lms.municipios.model.Pais;
import com.mercurio.lms.municipios.model.UnidadeFederativa;
import com.mercurio.lms.municipios.model.Zona;
import com.mercurio.lms.municipios.model.service.MunicipioService;
import com.mercurio.lms.tabelaprecos.model.TabelaPreco;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.DivisaoCliente;
import com.mercurio.lms.vendas.model.service.ClienteService;

/**
 * Generated by: ADSM ActionGenerator
 *
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.expedicao.swt.manterCRTAction"
 */
public class ManterCRTAction extends CrudAction {
	private AduanaCtoIntService aduanaCtoIntService;
	private DespachanteCtoIntService despachanteCtoIntService;
	private DimensaoService dimensaoService;

	private ServicoService servicoService;
	private ConfiguracoesFacade configuracoesFacade;
	private MoedaPaisService moedaPaisService;
	private ClienteService clienteService;
	private MunicipioService municipioService;
	private ProdutoService produtoService;
	private EmbalagemService embalagemService;
	private DomainValueService domainValueService;
	private CtoInternacionalService ctoInternacionalService;
	private DocumentoAnexoService documentoAnexoService;
	private EnderecoPessoaService enderecoPessoaService;
	private PedidoColetaService pedidoColetaService;
	private static final String SERVICO_PADRAO_INTERNACIONAL = "SERVICO_PADRAO_INTERNACIONAL";
	private static final String TRANSPORTADORES_SUCESSIVOS = "NIHIL";

	public TypedFlatMap findById(Long id) {
		TypedFlatMap ctoInternacionalMap = getService().findCrtById(id);

		CtoInternacional crt = populateCtoInternacional(ctoInternacionalMap);
		ctoInternacionalMap.put("isEditavel", ctoInternacionalService.isEditavel(crt).booleanValue() ? "S" : "N");

		setCtoInternacionalInSession(crt);

		String dsSiglaMoeda = ctoInternacionalMap.getString("moeda.sgMoeda");
		String dsSimboloMoeda = ctoInternacionalMap.getString("moeda.dsSimbolo");

		String dsMoeda = dsSiglaMoeda != null ? dsSiglaMoeda : "";
		dsMoeda += dsSimboloMoeda != null ? " " + dsSimboloMoeda : "";
		ctoInternacionalMap.put("dsMoeda", dsMoeda);
		
		DateTime dtEmissao = ctoInternacionalMap.getDateTime("dhEmissao");
		if(dtEmissao != null)
			ctoInternacionalMap.put("dhEmissao", dtEmissao.toYearMonthDay());

    	return ctoInternacionalMap;
    }

	public void removeById(java.lang.Long id) {
		super.removeById(id);
	}

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		super.removeByIds(ids);
	}

	public TypedFlatMap storeInSession(CtoInternacional ctoInternacional){
		TypedFlatMap retorno = new TypedFlatMap();
		CtoInternacional crtInSession = getCtoInternacionalInSession();

		if(crtInSession.getIdDoctoServico() != null){
			crtInSession.setDsDadosRemetente(ctoInternacional.getDsDadosRemetente());
			crtInSession.setDsNomeRemetente(ctoInternacional.getDsNomeRemetente());
			crtInSession.setDsDadosDestinatario(ctoInternacional.getDsDadosDestinatario());
			crtInSession.setDsDadosConsignatario(ctoInternacional.getDsDadosConsignatario());
			crtInSession.setDsNotificar(ctoInternacional.getDsNotificar());

			crtInSession.setDsLocalEntrega(ctoInternacional.getDsLocalEntrega());
			crtInSession.setDsLocalEmissao(ctoInternacional.getDsLocalEmissao());
			crtInSession.setDsLocalCarregamento(ctoInternacional.getDsLocalCarregamento());

			crtInSession.setDsDadosMercadoria(ctoInternacional.getDsDadosMercadoria());

			crtInSession.setPsReal(ctoInternacional.getPsReal());
			crtInSession.setPsLiquido(ctoInternacional.getPsLiquido());
			crtInSession.setVlVolume(ctoInternacional.getVlVolume());
			crtInSession.setMoedaValorMercadoria(ctoInternacional.getMoedaValorMercadoria());
			crtInSession.setVlMercadoria(ctoInternacional.getVlMercadoria());

			crtInSession.setDsValorMercadoria(ctoInternacional.getDsValorMercadoria());
			crtInSession.setMoedaValorTotalMercadoria(ctoInternacional.getMoedaValorTotalMercadoria());
			crtInSession.setVlTotalMercadoria(ctoInternacional.getVlTotalMercadoria());

			setCtoInternacionalInSession(crtInSession);
		} else {
			Short nrDiasPrevEntrega = calcularPrazoEntrega(ctoInternacional);
			ctoInternacional.setNrDiasPrevEntrega(nrDiasPrevEntrega);
			retorno.put("nrDiasPrevEntrega", nrDiasPrevEntrega);

			ctoInternacional.setFilialDestinoOperacional(ctoInternacional.getFilialByIdFilialDestino());
			ctoInternacional.setIdDoctoServico(crtInSession.getIdDoctoServico());
			ctoInternacional.setDocumentosAnexos(crtInSession.getDocumentosAnexos());
			ctoInternacional.setAduanasCtoInternacional(crtInSession.getAduanasCtoInternacional());
			ctoInternacional.setObservacaoDoctoServicos(crtInSession.getObservacaoDoctoServicos());
			ctoInternacional.setServAdicionalDocServs(crtInSession.getServAdicionalDocServs());
			ctoInternacional.setDespachantesCtoInternacional(crtInSession.getDespachantesCtoInternacional());
			ctoInternacional.setDimensoes(crtInSession.getDimensoes());
			ctoInternacional.setParcelaDoctoServicos(crtInSession.getParcelaDoctoServicos());
			ctoInternacional.setVlTotalDocServico(crtInSession.getVlTotalDocServico());
			ctoInternacional.setVlTotalParcelas(crtInSession.getVlTotalParcelas());
			ctoInternacional.setVlTotalServicos(crtInSession.getVlTotalServicos());
			ctoInternacional.setVlDesconto(crtInSession.getVlDesconto());
			ctoInternacional.setPsReferenciaCalculo(crtInSession.getPsReferenciaCalculo());
			ctoInternacional.setTabelaPreco(crtInSession.getTabelaPreco());
			ctoInternacional.setMoeda(crtInSession.getMoeda());
			ctoInternacional.setDivisaoCliente(crtInSession.getDivisaoCliente());
			ctoInternacional.setPcAforo(crtInSession.getPcAforo());
			ctoInternacional.setTarifaPreco(crtInSession.getTarifaPreco());
			ctoInternacional.setParametroCliente(crtInSession.getParametroCliente());
			ctoInternacional.setVlFreteExterno(crtInSession.getVlFreteExterno());
			ctoInternacional.setTpDevedorCrt(crtInSession.getTpDevedorCrt());

			ctoInternacional.setObservacaoDoctoServicos(crtInSession.getObservacaoDoctoServicos());
			ctoInternacional.setDsParceiroEntrega(crtInSession.getDsParceiroEntrega());
			ctoInternacional.setTpEntregarEm(crtInSession.getTpEntregarEm());

			ctoInternacional.setUsuarioByIdUsuarioInclusao(SessionUtils.getUsuarioLogado());
			ctoInternacional.setUsuarioByIdUsuarioAlteracao(SessionUtils.getUsuarioLogado());

			setCtoInternacionalInSession(ctoInternacional);
		}
		return retorno;
	}

	private CtoInternacional getCtoInternacionalInSession(){
		return CtoInternacionalUtils.getCtoInternacionalInSession();
	}

	private Short calcularPrazoEntrega(CtoInternacional ctoInternacional){
		Cliente clienteRemetente = ctoInternacional.getClienteByIdClienteRemetente();
		Servico servico = ctoInternacional.getServico();
		EnderecoPessoa enderecoPessoaRemetente = clienteRemetente.getPessoa().getEnderecoPessoa(); 
		EnderecoPessoa enderecoPessoaDestinatario = ctoInternacional.getClienteByIdClienteDestinatario().getPessoa().getEnderecoPessoa(); 

		Long idMunicipioOrigem = enderecoPessoaRemetente.getMunicipio().getIdMunicipio();
		Long idMunicipioDestino = enderecoPessoaDestinatario.getMunicipio().getIdMunicipio();

		String nrCepOrigem = enderecoPessoaRemetente.getNrCep();
		String nrCepDestino = enderecoPessoaDestinatario.getNrCep();

		Long idServico = servico.getIdServico();
		Long idCliente = clienteRemetente.getIdCliente();
		Long idSegmento = null;
		YearMonthDay dtConsulta = JTDateTimeUtils.getDataAtual();

		Short diasPPE = ctoInternacionalService.
							executeCalculoNrDiasPrevEntrega(
						    idMunicipioOrigem
							, idMunicipioDestino
							, idServico
							, idCliente
							, nrCepOrigem
							, nrCepDestino
							, idSegmento
							, dtConsulta
							, "N");


		return diasPPE; 
	}

	private void setCtoInternacionalInSession(CtoInternacional ctoInternacional){
		CtoInternacionalUtils.setCtoInternacionalInSession(ctoInternacional);
	}

	private CtoInternacional populateCtoInternacional(TypedFlatMap ctoInternacionalMap){
		CtoInternacional crt = new CtoInternacional();

		crt.setIdDoctoServico(ctoInternacionalMap.getLong("idCtoInternacional"));
		crt.setDsParceiroEntrega(ctoInternacionalMap.getString("dsParceiroEntrega"));
		crt.setTpEntregarEm(ctoInternacionalMap.getDomainValue("tpEntregarE"));
		crt.setVlMercadoria(ctoInternacionalMap.getBigDecimal("vlMercadoria"));
		crt.setPsReal(ctoInternacionalMap.getBigDecimal("psReal"));
		crt.setPsAforado(ctoInternacionalMap.getBigDecimal("psAforado"));
		crt.setQtVolumes(ctoInternacionalMap.getInteger("qtVolume"));
		crt.setVlVolume(ctoInternacionalMap.getBigDecimal("vlVolume"));
		crt.setVlDesconto(ctoInternacionalMap.getBigDecimal("vlDesconto"));
		crt.setVlTotalDocServico(ctoInternacionalMap.getBigDecimal("vlTotalDocServico"));
		crt.setVlTotalParcelas(ctoInternacionalMap.getBigDecimal("vlTotalParcelas"));
		crt.setVlTotalServicos(ctoInternacionalMap.getBigDecimal("vlTotalServicos"));
		crt.setVlTotalMercadoria(ctoInternacionalMap.getBigDecimal("vlTotalMercadoria"));
		crt.setPcAforo(ctoInternacionalMap.getBigDecimal("pcAforo"));

		crt.setDhInclusao(ctoInternacionalMap.getDateTime("dhInclusao"));
		crt.setDhAlteracao(ctoInternacionalMap.getDateTime("dhAlteracao"));

		Cliente clienteRementente = populateCliente("Remetente", ctoInternacionalMap);
		Cliente clienteDestinatario = populateCliente("Destinatario", ctoInternacionalMap);

		Moeda moeda = new Moeda();
		Usuario usuarioInclusao = new Usuario();
		Usuario usuarioAlteracao = new Usuario();
		
		DivisaoCliente divisaoCliente = new DivisaoCliente();
		Filial filialOrigem = new Filial();
		Pessoa pessoaFilialOrigem = new Pessoa();
		Filial filialDestino = new Filial();
		Pessoa pessoaFilialDestino = new Pessoa();
		EnderecoPessoa enderecoPessoaFilialDestino = new EnderecoPessoa();
		Municipio municipioFilialDestino = new Municipio();
		UnidadeFederativa ufFilialDestino = new UnidadeFederativa();
		Pais paisFilialDestino = new Pais();
		Servico servico = new Servico(); 
		DomainValue tpModal = new DomainValue(); 
		DomainValue tpAbrangencia = new DomainValue();
		TabelaPreco tabelaPreco = new TabelaPreco();

		moeda.setIdMoeda(ctoInternacionalMap.getLong("moeda.idMoeda"));
		moeda.setSgMoeda(ctoInternacionalMap.getString("moeda.sgMoeda"));
		moeda.setDsSimbolo(ctoInternacionalMap.getString("moeda.dsSimbolo"));

		usuarioInclusao.setNmUsuario(ctoInternacionalMap.getString("usuarioByIdUsuarioInclusao.nmUsuario"));
		usuarioAlteracao.setNmUsuario(ctoInternacionalMap.getString("usuarioByIdUsuarioAlteracao.nmUsuario"));

		divisaoCliente.setIdDivisaoCliente(ctoInternacionalMap.getLong("divisaoCliente.idDivisaoCliente"));
		divisaoCliente.setDsDivisaoCliente(ctoInternacionalMap.getString("divisaoCliente.dsDivisaoCliente"));

		filialOrigem.setIdFilial(ctoInternacionalMap.getLong("filialByIdFilialOrigem.idFilial"));
		pessoaFilialOrigem.setIdPessoa(ctoInternacionalMap.getLong("filialByIdFilialOrigem.pessoa.idPessoa"));
		filialOrigem.setPessoa(pessoaFilialOrigem);

		filialDestino.setPessoa(pessoaFilialDestino);
		pessoaFilialDestino.setIdPessoa(ctoInternacionalMap.getLong("filialByIdFilialDestino.pessoa.idPessoa"));
		pessoaFilialDestino.setEnderecoPessoa(enderecoPessoaFilialDestino);
		enderecoPessoaFilialDestino.setMunicipio(municipioFilialDestino);
		municipioFilialDestino.setUnidadeFederativa(ufFilialDestino);
		ufFilialDestino.setPais(paisFilialDestino);
		paisFilialDestino.setIdPais(ctoInternacionalMap.getLong("filialByIdFilialDestino.pessoa.enderecoPessoa.municipio.unidadeFederativa.pais.idPais"));
		filialDestino.setIdFilial(ctoInternacionalMap.getLong("filialByIdFilialDestino.idFilial"));

		servico.setIdServico(ctoInternacionalMap.getLong("servico.idServico"));

		tpModal.setValue(ctoInternacionalMap.getString("servico.tpModal.value"));
		tpModal.setDescription(ctoInternacionalMap.getVarcharI18n("servico.tpModal.description"));
		tpModal.setStatus(ctoInternacionalMap.getBoolean("servico.tpModal.status"));
		servico.setTpModal(tpModal);

		tpAbrangencia.setValue(ctoInternacionalMap.getString("servico.tpAbrangencia.value"));
		tpAbrangencia.setDescription(ctoInternacionalMap.getVarcharI18n("servico.tpAbrangencia.description"));
		tpAbrangencia.setStatus(ctoInternacionalMap.getBoolean("servico.tpAbrangencia.status"));
		servico.setTpAbrangencia(tpAbrangencia);
		
		tabelaPreco.setDsDescricao(ctoInternacionalMap.getString("tabelaPreco.dsDescricao"));

		crt.setMoeda(moeda);
		crt.setUsuarioByIdUsuarioInclusao(usuarioInclusao);
		crt.setUsuarioByIdUsuarioAlteracao(usuarioAlteracao);
		crt.setClienteByIdClienteRemetente(clienteRementente);
		crt.setClienteByIdClienteDestinatario(clienteDestinatario);
		crt.setDivisaoCliente(divisaoCliente);
		crt.setFilialByIdFilialOrigem(filialOrigem);
		crt.setFilialByIdFilialDestino(filialDestino);
		crt.setFilialDestinoOperacional(filialDestino);
		crt.setServico(servico);
		crt.setTabelaPreco(tabelaPreco);
		
		DomainValue tpEntregarEm = new DomainValue();
		tpEntregarEm.setDescription(ctoInternacionalMap.getVarcharI18n("tpEntregarEm.description"));
		tpEntregarEm.setStatus(ctoInternacionalMap.getBoolean("tpEntregarEm.status"));
		tpEntregarEm.setValue(ctoInternacionalMap.getString("tpEntregarEm.value"));
		crt.setTpEntregarEm(tpEntregarEm);

		return crt; 
	}
	
	private Cliente populateCliente(String clienteType, TypedFlatMap criteria){
		String key = "clienteByIdCliente" + clienteType + ".pessoa.enderecoPessoa.municipio";
		
		Cliente cliente = new Cliente();
		Pessoa pessoa = new Pessoa();
		EnderecoPessoa enderecoPessoa = new EnderecoPessoa();
		Municipio municipio = new Municipio();
		UnidadeFederativa unidadeFederativa = new UnidadeFederativa();
		Pais pais = new Pais();
		Zona zona = new Zona();
		
		municipio.setIdMunicipio(criteria.getLong(key + ".idMunicipio"));
		unidadeFederativa.setIdUnidadeFederativa(criteria.getLong(key + ".unidadeFederativa.idUnidadeFederativa"));
		pais.setIdPais(criteria.getLong(key + ".unidadeFederativa.pais.idPais"));
		zona.setIdZona(criteria.getLong(key + ".unidadeFederativa.pais.zona.idZona"));

		cliente.setPessoa(pessoa);
		pessoa.setEnderecoPessoa(enderecoPessoa);
		enderecoPessoa.setMunicipio(municipio);
		municipio.setUnidadeFederativa(unidadeFederativa);
		unidadeFederativa.setPais(pais);
		pais.setZona(zona);

		cliente.setIdCliente(criteria.getLong("clienteByIdCliente"+clienteType+".idCliente"));

		return cliente;
	}

	public List<Map<String, Object>> findPedidoColetaCombo(TypedFlatMap criteria){
		return pedidoColetaService.findLookupPedidoColeta(criteria.getLong("clienteByIdClienteRemetente.idCliente"));
	}

	public List findMunicipioEntrega(Map criteria){
		CtoInternacional crt = getCtoInternacionalInSession();
		List retorno = findMunicipio(criteria);

		if(crt.getIdDoctoServico() != null){//valida se a cidade que esta sendo mudada pertence ao mesmo pais da filial de destino.
			if(retorno != null && !retorno.isEmpty()){
				Map municipioMap = (Map) retorno.get(0);
				Map ufMap = (Map) municipioMap.get("unidadeFederativa");
				Map paisMap = (Map) ufMap.get("pais");
				Long idPais = (Long)paisMap.get("idPais");
				Long idPaisDestino = crt.getFilialByIdFilialDestino().getPessoa().getEnderecoPessoa().getMunicipio().getUnidadeFederativa().getPais().getIdPais();

				if(!idPais.equals(idPaisDestino)) throw new BusinessException("LMS-04191");
			}
		}

		return retorno;
	}

	public List findMunicipioCarregamento(Map criteria){
		return findMunicipio(criteria);
	}
	
	public List findMunicipioEmissao(Map criteria){
		return findMunicipio(criteria);
	}
	
	public List findMunicipio(Map criteria){
		return municipioService.findMunicipioLookup(criteria);
	}

	public List findServicoCombo(){
		List servicos = servicoService.findByTpAbrangencia(ConstantesExpedicao.ABRANGENCIA_INTERNACIONAL);
		Long idPadrao = Long.valueOf(((BigDecimal)configuracoesFacade.getValorParametro(SERVICO_PADRAO_INTERNACIONAL)).longValue());

		for (Iterator iter = servicos.iterator(); iter.hasNext();) {
			Map s = (Map) iter.next();
			if(idPadrao.equals(s.get("idServico"))) {
				s.put("servicoPadrao", Boolean.TRUE);
				break;
			}
		}
		return servicos;
	}
	
	public List findMoedaCombo(){
		return moedaPaisService.findMoedaByPaisUsuarioLogado();
	}
	
	public List findEmbalagemCombo(TypedFlatMap criteria){
		return embalagemService.find(criteria);
	}

	public List findProdutoCombo(TypedFlatMap criteria){
		return produtoService.find(criteria);
	}

	public Integer getRowCountCrt(TypedFlatMap criteria) {
		criteria.put("filialByIdFilialOrigem.idFilial", criteria.get("idFilialOrigem"));
		criteria.remove("idFilialOrigem");
		criteria.put("filialByIdFilialDestino.idFilial", criteria.get("idFilialDestino"));
		criteria.remove("idFilialDestino");
		criteria.put("clienteByIdClienteRemetente.idCliente", criteria.get("idClienteRemetente"));
		criteria.remove("idClienteRemetente");
		criteria.put("clienteByIdClienteDestinatario.idCliente", criteria.get("idClienteDestinatario"));
		criteria.remove("idClienteDestinatario");
		return getService().getRowCountCrt(criteria);
	}

	public ResultSetPage findPaginated(TypedFlatMap criteria){
		criteria.put("filialByIdFilialOrigem.idFilial", criteria.get("idFilialOrigem"));
		criteria.remove("idFilialOrigem");
		criteria.put("filialByIdFilialDestino.idFilial", criteria.get("idFilialDestino"));
		criteria.remove("idFilialDestino");
		criteria.put("clienteByIdClienteRemetente.idCliente", criteria.get("idClienteRemetente"));
		criteria.remove("idClienteRemetente");
		criteria.put("clienteByIdClienteDestinatario.idCliente", criteria.get("idClienteDestinatario"));
		criteria.remove("idClienteDestinatario");
		
		ResultSetPage rsp = getService().findPaginatedCrt(criteria);
		Iterator it = rsp.getList().iterator();

		while(it.hasNext()){
			Map m = (Map)it.next();
			
			TypedFlatMap tfm = new TypedFlatMap();
			ReflectionUtils.flatMap(tfm, m);
			
			String sgPais = (String) m.get("sgPais");
			Integer nrPermisso = (Integer) m.get("nrPermisso");
			Long nrCrt = (Long) m.get("nrCrt");
			m.put("nrCrtFormatado", CtoInternacionalUtils.format(sgPais, nrPermisso, nrCrt));
			
			m.put("nrDoctoServico", tfm.get("nrCrt"));
			m.put("idFilial", tfm.get("filialByIdFilialOrigem.idFilial"));
			m.put("sgFilial", tfm.get("filialByIdFilialOrigem.sgFilial"));
			m.put("nmFantasia", tfm.get("filialByIdFilialOrigem.pessoa.nmFantasia"));

			m.put("sgFilialOrigem", tfm.get("filialByIdFilialOrigem.sgFilial"));
			m.put("sgFilialDestino", tfm.get("filialByIdFilialDestino.sgFilial"));
			m.put("nmPessoaClienteRemetente", tfm.get("clienteByIdClienteRemetente.pessoa.nmPessoa"));
			m.put("nmPessoaClienteDestinatario", tfm.get("clienteByIdClienteDestinatario.pessoa.nmPessoa"));
			
			m.remove("filialByIdFilialOrigem");
			m.remove("filialByIdFilialDestino");
			m.remove("clienteByIdClienteRemetente");
			m.remove("clienteByIdClienteDestinatario");
		}
		
		return rsp;
	}

	public Serializable duplicar(){

		CtoInternacional ctoInternacional = getCtoInternacionalInSession();
		Long idCtoInternacional = ctoInternacional.getIdDoctoServico();

		ctoInternacional.setIdDoctoServico(null);
		ctoInternacional.setMoeda(null);
		ctoInternacional.setParcelaDoctoServicos(null);
		ctoInternacional.setDtPrevEntrega(null);
		ctoInternacional.setDtCarregamento(JTDateTimeUtils.getDataAtual());
		ctoInternacional.setDsAnexos(null);
		ctoInternacional.setUsuarioByIdUsuarioInclusao(SessionUtils.getUsuarioLogado());
		ctoInternacional.setUsuarioByIdUsuarioAlteracao(SessionUtils.getUsuarioLogado());
		ctoInternacional.setBlBloqueado(Boolean.FALSE);
		ctoInternacional.setTpCalculoPreco(new DomainValue("N"));
		ctoInternacional.setBlPrioridadeCarregamento(Boolean.FALSE);
		ctoInternacional.setNrAidf(null);
		ctoInternacional.setLocalizacaoMercadoria(null);
		ctoInternacional.setNrDiasPrevEntrega(null);
		ctoInternacional.setDsEnderecoEntregaReal(null);
		ctoInternacional.setTpEntregarEm(null);
		ctoInternacional.setDsParceiroEntrega(null);
		ctoInternacional.setTpSituacaoPendenciaReemissao(null);

		List aduanasCtoInt = aduanaCtoIntService.findByIdCtoInternacional(idCtoInternacional);
		if(aduanasCtoInt != null && !aduanasCtoInt.isEmpty()){
			for(Iterator it = aduanasCtoInt.iterator(); it.hasNext();) {
				AduanaCtoInt aduanaCtoInt = (AduanaCtoInt) it.next();
				aduanaCtoInt.setIdAduanaCtoInt(null);
			}
		}
		ctoInternacional.setAduanasCtoInternacional(aduanasCtoInt);
		
		List dimensoes = dimensaoService.findByIdCtoInternacional(idCtoInternacional);
		if(dimensoes != null && !dimensoes.isEmpty()){
			for(Iterator it = dimensoes.iterator(); it.hasNext();) {
				Dimensao dimensao = (Dimensao) it.next();
				dimensao.setIdDimensao(null);
			}
		}
		ctoInternacional.setDimensoes(dimensoes);

		List despachantes = despachanteCtoIntService.findByIdCtoInternacional(idCtoInternacional);
		if(despachantes != null && !despachantes.isEmpty()){
			for(Iterator it = despachantes.iterator(); it.hasNext();) {
				DespachanteCtoInt despachanteCtoInt = (DespachanteCtoInt) it.next();
				despachanteCtoInt.setIdDespachanteCtoInt(null);
			}
		}
		ctoInternacional.setDespachantesCtoInternacional(despachantes);

		CtoInternacionalUtils.setCtoInternacionalInSession(ctoInternacional);
		
		TypedFlatMap retorno = new TypedFlatMap();
		
		retorno.put("dataAtual", JTDateTimeUtils.getDataAtual());
		retorno.put("tpSituacaoCrt.description", domainValueService.findDomainValueDescription("DM_STATUS_CRT", "D"));

		return retorno;
	}
	
	public TypedFlatMap findDataToInitialStateWindow(){
		CtoInternacionalUtils.removeCtoInternacionalFromSession();
		CtoInternacionalUtils.setCtoInternacionalInSession(new CtoInternacional());
		Filial filialUsuario = SessionUtils.getFilialSessao();

		Moeda usDollar = configuracoesFacade.getMoeda(ConstantesConfiguracoes.NBR_ISO_US_DOLLAR);

		TypedFlatMap retorno = new TypedFlatMap();
		retorno.put("filialUsuario.sgFilial", filialUsuario.getSgFilial());
		retorno.put("filialUsuario.idFilial", filialUsuario.getIdFilial());
		retorno.put("filialUsuario.pessoa.nmFantasia", filialUsuario.getPessoa().getNmFantasia());
		retorno.put("filialUsuario.pessoa.idPessoa", filialUsuario.getPessoa().getIdPessoa());
		retorno.put("tpSituacaoCrt.description", domainValueService.findDomainValueDescription("DM_STATUS_CRT", "D"));
		retorno.put("dsTransportesSucessivos", TRANSPORTADORES_SUCESSIVOS);
		retorno.put("dataAtual", JTDateTimeUtils.getDataAtual());
		retorno.put("moedaValorMercadoria.idMoeda", usDollar.getIdMoeda());
		retorno.put("moedaValorTotalMercadoria.idMoeda", usDollar.getIdMoeda());

		EnderecoPessoa enderecoPessoa = enderecoPessoaService.findByIdPessoa(filialUsuario.getPessoa().getIdPessoa()); 
		Municipio municipio = enderecoPessoa.getMunicipio();
		retorno.put("endereco.idMunicipio", municipio.getIdMunicipio());
		retorno.put("endereco.nmMunicipio", municipio.getNmMunicipio());
		retorno.put("endereco.sgUnidadeFederativa", municipio.getUnidadeFederativa().getSgUnidadeFederativa());
		retorno.put("endereco.nmPais", municipio.getUnidadeFederativa().getPais().getNmPais());

		return retorno;
	}

	public Serializable store(Object bean) {
		
		CtoInternacional ctoInternacional = getCtoInternacionalInSession();
		
		if (ctoInternacional.getIdDoctoServico() != null && ctoInternacional.getAduanasCtoInternacional() == null){
			List aduanas = aduanaCtoIntService.findByIdCtoInternacional(ctoInternacional.getIdDoctoServico());
			ctoInternacional.setAduanasCtoInternacional(aduanas);
		}
		
		if(ctoInternacional.getIdDoctoServico() != null && ctoInternacional.getDocumentosAnexos() == null){
			List documentosAnexo = documentoAnexoService.findByIdDoctoServico(ctoInternacional.getIdDoctoServico());
			ctoInternacional.setDocumentosAnexos(documentosAnexo);
		}

		Serializable stored = null;
		if(ctoInternacional.getIdDoctoServico() == null){
			stored = super.store(ctoInternacional);
		} else {
			stored = ctoInternacionalService.updateCrt(ctoInternacional);
		}

		CtoInternacional crtStored = populateCtoInternacional(findById((Long)stored));
		ctoInternacional.setDhInclusao(crtStored.getDhInclusao());

		TypedFlatMap retorno = new TypedFlatMap();
		retorno.put("idDoctoServico", stored);
		retorno.put("nrCrt", crtStored.getNrCrt());
		retorno.put("dhInclusao", crtStored.getDhInclusao().toDateTime());
		retorno.put("nmUsuarioInclusao", crtStored.getUsuarioByIdUsuarioInclusao().getNmUsuario());
		if(crtStored.getDhAlteracao() != null){
			retorno.put("dhAlteracao", crtStored.getDhAlteracao().toDateTime());
			retorno.put("nmUsuarioAlteracao", crtStored.getUsuarioByIdUsuarioAlteracao().getNmUsuario());
		}

		return retorno;
	}
	
	public List<Map<String, Object>> findLookupCliente(Map criteria) {
		List<Map<String, Object>> clientes = clienteService.findClienteByNrIdentificacao((String) criteria.get("nrIdentificacao"));
		if (clientes != null && !clientes.isEmpty()) {
			for(Map cliente : clientes) {
				cliente.remove("tpCliente");
				Map pessoa = (Map) cliente.remove("pessoa");
				if (pessoa != null) {
					cliente.put("nmPessoa", pessoa.get("nmPessoa"));
					cliente.put("nrIdentificacao", pessoa.remove("nrIdentificacaoFormatado"));
				}
			}
		}
		return clientes;
	}

	//Getters and Setters
	public void setService(CtoInternacionalService serviceService) {
		this.defaultService = serviceService;
	}

	private CtoInternacionalService getService(){
		return (CtoInternacionalService) defaultService; 
	}

	public void setServicoService(ServicoService servicoService) {
		this.servicoService = servicoService;
	}

	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}

	public void setMoedaPaisService(MoedaPaisService moedaPaisService) {
		this.moedaPaisService = moedaPaisService;
	}

	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}

	public void setMunicipioService(MunicipioService municipioService) {
		this.municipioService = municipioService;
	}

	public void setEmbalagemService(EmbalagemService embalagemService) {
		this.embalagemService = embalagemService;
	}

	public void setProdutoService(ProdutoService produtoService) {
		this.produtoService = produtoService;
	}

	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}

	public void setCtoInternacionalService(CtoInternacionalService ctoInternacionalService) {
		this.ctoInternacionalService = ctoInternacionalService;
	}

	public void setAduanaCtoIntService(AduanaCtoIntService aduanaCtoIntService) {
		this.aduanaCtoIntService = aduanaCtoIntService;
	}

	public void setDespachanteCtoIntService(DespachanteCtoIntService despachanteCtoIntService) {
		this.despachanteCtoIntService = despachanteCtoIntService;
	}

	public void setDimensaoService(DimensaoService dimensaoService) {
		this.dimensaoService = dimensaoService;
	}

	public void setDocumentoAnexoService(DocumentoAnexoService documentoAnexoService) {
		this.documentoAnexoService = documentoAnexoService;
	}

	public void setEnderecoPessoaService(EnderecoPessoaService enderecoPessoaService) {
		this.enderecoPessoaService = enderecoPessoaService;
	}

	public void setPedidoColetaService(PedidoColetaService pedidoColetaService) {
		this.pedidoColetaService = pedidoColetaService;
	}
	
	
}