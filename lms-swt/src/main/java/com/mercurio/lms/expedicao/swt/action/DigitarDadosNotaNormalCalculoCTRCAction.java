package com.mercurio.lms.expedicao.swt.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.util.MapUtilsPlus;
import com.mercurio.lms.expedicao.model.CalculoFrete;
import com.mercurio.lms.expedicao.model.Conhecimento;
import com.mercurio.lms.expedicao.model.service.DigitarDadosNotaNormalCalculoCTRCService;
import com.mercurio.lms.expedicao.util.ConstantesExpedicao;
import com.mercurio.lms.vendas.model.DivisaoCliente;

/**
 * Generated by: ADSM ActionGenerator
 * 
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.expedicao.swt.digitarDadosNotaNormalCalculoCTRCAction"
 */

public class DigitarDadosNotaNormalCalculoCTRCAction extends AbstractCalculoFreteAction {
	
	
	private DigitarDadosNotaNormalCalculoCTRCService digitarDadosNotaNormalCalculoCTRCService;

	/**
	 * Método que chama o serviço para o calculo do frete manual
	 * autor Julio Cesar Fernandes Corrêa
	 * 19/12/2005
	 * @param parameters
	 * @return 
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
    public Map executaCalculoManual(Map parameters) {
		Conhecimento conhecimento = (Conhecimento) parameters.get("conhecimento");

		CalculoFrete calculoFrete = (CalculoFrete) parameters.get(ConstantesExpedicao.CALCULO_SERVICO_IN_SESSION);
		
		conhecimentoNormalService.validateCalculoFreteManual(calculoFrete, conhecimento, parameters);

		TypedFlatMap map = new TypedFlatMap();
		map.put("vlFrete", conhecimento.getVlTotalDocServico());
		doctoServicoService.executeValidacaoLimiteValorFrete(map);
		
		map.put("vlMercadoria", conhecimento.getVlMercadoria());
		doctoServicoService.executeValidacaoPercentualValorMercadoria(map);
		
		return montarParcelasCalculo(conhecimento, calculoFrete);
	}

	/**
	 * Esta rotina tem por objetivo chamar as rotinas de cálculo do preço frete 
	 * e dos serviços adicionais, efetuando o cálculo do valor do CTRC.
	 * 
	 * @param idDivisaoCliente
	 * @return Parcelas Calculadas
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
    public Map executeCalculoFretePrimeiraFase(Map parameters) {
		Long idDivisaoCliente = (Long) parameters.get("idDivisaoCliente");
		Conhecimento conhecimento = (Conhecimento) parameters.get("conhecimento");
		
		if (conhecimento == null && parameters.get("idDoctoServico") != null) {
			conhecimento = conhecimentoService.findById((Long)parameters.get("idDoctoServico"));
		}
		
		if(idDivisaoCliente != null) {
			DivisaoCliente dc = new DivisaoCliente();
			dc.setIdDivisaoCliente(idDivisaoCliente);
			conhecimento.setDivisaoCliente(dc);
		}

		CalculoFrete calculoFrete = (CalculoFrete) parameters.get(ConstantesExpedicao.CALCULO_SERVICO_IN_SESSION);
		calculoFrete.setIdDivisaoCliente(idDivisaoCliente);
		calculoFrete.setDoctoServico(conhecimento);
		try {
			conhecimentoNormalService.executeCalculoFretePrimeiraFase(conhecimento, calculoFrete);			
			parameters.put("conhecimento", conhecimento);
			parameters.put(ConstantesExpedicao.CALCULO_SERVICO_IN_SESSION, calculoFrete);
		} catch (BusinessException businessException) {
			Map<String, Object> result = new HashMap<String, Object>();
			result.put("conhecimento", conhecimento);
			result.put(ConstantesExpedicao.CALCULO_SERVICO_IN_SESSION, calculoFrete);
			result.put("exception", businessException);
			return result;
		}
		return executeCalculoFreteSegundaFase(parameters);
	}

	/**
	 * Validações pós Calculo do Frete
	 * @return Parcelas Calculadas
	 */
	@SuppressWarnings("rawtypes")
    public Map executeCalculoFreteSegundaFase(Map parameters) {
		Conhecimento conhecimento = (Conhecimento) parameters.get("conhecimento");
		CalculoFrete calculoFrete = (CalculoFrete) parameters.get(ConstantesExpedicao.CALCULO_SERVICO_IN_SESSION);
		conhecimentoNormalService.executeCalculoFreteSegundaFase(conhecimento, calculoFrete);
		return montarParcelasCalculo(conhecimento, calculoFrete);
	}

	
	/**
	 * Grava CTRC 1º Fase com o pré calculo de frete.
	 * @return
	 */
	@SuppressWarnings({"unchecked", "rawtypes" })
	public Serializable storeCtrcPrimeiraFasePreCalculoFrete(Map parameters) {
		//LMS-2672
		parameters.put("liberarEmbarqueSemLabelingSemEDI", true);
		return digitarDadosNotaNormalCalculoCTRCService.storeCtrcPrimeiraFasePreCalculoFrete(parameters);
	}
	
	/**
	 * Grava CTRC 2º Fase sem executar o calculo de frete.
	 * @return
	 */
	@SuppressWarnings("rawtypes")
    public Serializable storeCtrcSegundaFasePreCalculoFrete(Map parameters) {
		return digitarDadosNotaNormalCalculoCTRCService.storeCtrcSegundaFasePreCalculoFrete(parameters);
	}
	
	/**
	 * Grava CTRC 1º Fase.
	 * @return
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public Serializable storeCtrcPrimeiraFaseCalculoFrete(Map parameters) {
		//LMS-2672
		parameters.put("liberarEmbarqueSemLabelingSemEDI", true);
		return digitarDadosNotaNormalCalculoCTRCService.storeCtrcPrimeiraFaseCalculoFrete(parameters);
		}
		
	/**
	 * Grava CTRC 2º Fase.
	 * @return
	 */
	@SuppressWarnings("rawtypes")
    public Serializable storeCtrcSegundaFaseCalculoFrete(Map parameters) {
		return digitarDadosNotaNormalCalculoCTRCService.storeCtrcSegundaFaseCalculoFrete(parameters);		
	}
	
	/*
	 * METODOS PRIVADOS
	 */
	
	@SuppressWarnings({ "rawtypes" })
	public Map findDivisaoClienteByCTRC(Map parameters) {
		parameters = digitarDadosNotaNormalCalculoCTRCService.findDivisaoClienteByCTRC(parameters);
	
		return  parameters;
	}


	@SuppressWarnings({ "unused", "unchecked", "rawtypes" })
    private List<Map<String, Object>> filtraDivisaoPorNatureza(Long idNaturezaProduto,List divisoes) {

		List<Map<String, Object>> resultList = new ArrayList<Map<String, Object>>();

		if(idNaturezaProduto != null && divisoes != null){
			for (Object obj : divisoes) {
				Map<String, Object> map = (Map) obj;
				if (map.containsKey("idNaturezaProduto") && MapUtilsPlus.getLong(map,"idNaturezaProduto",null).equals(idNaturezaProduto)) {
					resultList.add(map);
				}
			}
		} else {
			return divisoes;
		}

		return resultList;
	}
	
	/*
	 * GETTERS E SETTERS
	 */
	
	public void setDigitarDadosNotaNormalCalculoCTRCService(DigitarDadosNotaNormalCalculoCTRCService digitarDadosNotaNormalCalculoCTRCService) {
		this.digitarDadosNotaNormalCalculoCTRCService = digitarDadosNotaNormalCalculoCTRCService;
	}
	
}
