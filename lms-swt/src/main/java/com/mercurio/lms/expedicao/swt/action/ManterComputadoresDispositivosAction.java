package com.mercurio.lms.expedicao.swt.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.BooleanUtils;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.session.SessionContext;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.expedicao.model.Impressora;
import com.mercurio.lms.expedicao.model.ImpressoraComputador;
import com.mercurio.lms.expedicao.model.service.ImpressoraComputadorService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.session.SessionKey;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.expedicao.swt.manterComputadoresDispositivosAction"
 */
public class ManterComputadoresDispositivosAction extends CrudAction {
	private FilialService filialService;
	
	public void removeById(java.lang.Long id) {
		((ImpressoraComputadorService)defaultService).removeById(id);
	}

	public ResultSetPage findPaginated(Map criteria) {
		
		Map<String, Object> impressora = new HashMap<String, Object>();
    	impressora.put("idImpressora", criteria.get("idImpressora"));
    	criteria.remove("idImpressora");
    	criteria.remove("idFilial");
    	criteria.put("impressora", impressora);
		ResultSetPage rsp = defaultService.findPaginated(criteria);
		if (rsp != null) {
			List<ImpressoraComputador> controles = rsp.getList();
			List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();
			if (controles != null) {
				for (ImpressoraComputador controle : controles) {
					Map<String, Object> mapControle = new HashMap<String, Object>();
					
					mapControle.put("idImpressora", controle.getImpressora().getIdImpressora());
					mapControle.put("idImpressoraComputador", controle.getIdImpressoraComputador());
					mapControle.put("dsCheckIn", controle.getImpressora().getDsCheckIn());
					mapControle.put("dsLocalizacao", controle.getImpressora().getDsLocalizacao());
					mapControle.put("dsMac", controle.getDsMac());
					mapControle.put("blEstacaoAutomatizada", BooleanUtils.isTrue(controle.getBlEstacaoAutomatizada()));
					
					mapControle.put("sgFilial", controle.getImpressora().getFilial().getSgFilial());
					mapControle.put("idFilial", controle.getImpressora().getFilial().getIdFilial());
					
					result.add(mapControle);
				}
				rsp.setList(result);
			}
		}
		return rsp;
	}
	
	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		((ImpressoraComputadorService)defaultService).removeByIds(ids);
	}

	public Map findById(java.lang.Long id) {
		Map<String, Object> result = new HashMap<String, Object>();
		ImpressoraComputador impressoraComp = ((ImpressoraComputadorService)defaultService).findById(id);

		result.put("idImpressoraComputador", impressoraComp.getIdImpressoraComputador());
		result.put("dsMac", impressoraComp.getDsMac());
		result.put("idImpressora", impressoraComp.getImpressora().getIdImpressora());
		result.put("dsCheckIn", impressoraComp.getImpressora().getDsCheckIn());
		result.put("dsLocalizacao", impressoraComp.getImpressora().getDsLocalizacao());
		result.put("blEstacaoAutomatizada", impressoraComp.getBlEstacaoAutomatizada());

		result.put("sgFilial", impressoraComp.getImpressora().getFilial().getSgFilial());
		result.put("idFilial", impressoraComp.getImpressora().getFilial().getIdFilial());
		result.put("nmFantasia", impressoraComp.getImpressora().getFilial().getSiglaNomeFilial());
		
		return result;
	}

	public Map store(Map data) {
		ImpressoraComputador bean = new ImpressoraComputador();
		
		Impressora impressora = new Impressora();
		bean.setImpressora(impressora);
		bean.getImpressora().setIdImpressora((Long) data.get("idImpressora"));
		bean.getImpressora().setTpImpressora(new DomainValue((String) data.get("tpImpressora")));
		bean.setIdImpressoraComputador((Long) data.get("idImpressoraComputador"));
		bean.setDsMac((String)data.get("dsMac"));
		bean.setBlEstacaoAutomatizada((Boolean) data.get("blEstacaoAutomatizada"));
		
		Long idImpressoraComputador = (Long) ((ImpressoraComputadorService) defaultService).store(bean);
		Map<String, Object> result = new HashMap<String, Object>();
		result.put("idImpressoraComputador", idImpressoraComputador);
		return result;
	}

	public FilialService getFilialService(){
		return this.filialService;
	}

	public void setFilialService(FilialService filialService){
		this.filialService = filialService;
	}

	/**
	 * Metodo que chama o método da lookup respectivo na service de filial
	 * @param criteria
	 * @return
	 */
	public List filialFindLookup(Map criteria) {
		List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();
		List<Filial> filiais = filialService.findLookup(criteria);
		if (filiais != null) {
			for (Filial filial : filiais) {
				Map<String, Object> mapFilial = new HashMap<String, Object>();
				mapFilial.put("sgFilial", filial.getSgFilial());
				mapFilial.put("idFilial", filial.getIdFilial());
				mapFilial.put("nmFantasia", filial.getPessoa().getNmFantasia());
				result.add(mapFilial);
			}
		}
		return result;
	}
	
	public Map findDadosSessao() {
		Map<String, Object> retorno = new HashMap<String, Object>();
		Filial filial = SessionUtils.getFilialSessao();
		retorno.put("sgFilial", filial.getSgFilial());
		retorno.put("idFilial", filial.getIdFilial());
		retorno.put("nmFantasia", filial.getPessoa().getNmFantasia());
		return retorno;
	}

	/**
	 * Função que retorna um mapa com os dados da filial vinculada ao 
	 * usuario que esta logado
	 * 
	 * @return
	 */
	public TypedFlatMap filialFindByUser() {
		Filial filial = null;
		TypedFlatMap retorno = new TypedFlatMap();
		filial = (Filial) SessionContext.get(SessionKey.FILIAL_KEY);
		if(filial != null) {
			retorno.put("idFilial", filial.getIdFilial());
			retorno.put("sgFilial", filial.getSgFilial());
			retorno.put("nmFilial", filial.getPessoa().getNmFantasia());
			retorno.put("empresa.tpEmpresa", filial.getEmpresa().getTpEmpresa().getValue());
		}
		return retorno;
	}

	public void setImpressoraComputadorService(ImpressoraComputadorService impressoraComputadorService) {
		this.defaultService = impressoraComputadorService;
	}

}
