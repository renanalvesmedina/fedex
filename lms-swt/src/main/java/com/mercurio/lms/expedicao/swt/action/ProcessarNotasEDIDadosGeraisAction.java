package com.mercurio.lms.expedicao.swt.action;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.coleta.model.PedidoColeta;
import com.mercurio.lms.coleta.model.service.PedidoColetaService;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.service.TipoTributacaoIEService;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteService;
import com.mercurio.lms.edi.model.LogEDIDetalhe;
import com.mercurio.lms.edi.model.NotaFiscalEdi;
import com.mercurio.lms.edi.model.service.ClienteEDIFilialEmbarcadoraService;
import com.mercurio.lms.edi.model.service.LogEDIDetalheService;
import com.mercurio.lms.expedicao.edi.model.service.NotaFiscalEDIService;
import com.mercurio.lms.expedicao.edi.model.service.NotaFiscalExpedicaoEDIService;
import com.mercurio.lms.expedicao.edi.model.service.ProcessarNotaFiscalEDIService;
import com.mercurio.lms.expedicao.model.Conhecimento;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.model.service.ContingenciaService;
import com.mercurio.lms.expedicao.model.service.DoctoServicoService;
import com.mercurio.lms.expedicao.model.service.MonitoramentoDescargaService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.tributos.model.TipoTributacaoIE;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.ValidateUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.ClienteOperadorLogistico;
import com.mercurio.lms.vendas.model.DivisaoCliente;
import com.mercurio.lms.vendas.model.service.ClienteOperadorLogisticoService;
import com.mercurio.lms.vendas.model.service.ClienteService;
import com.mercurio.lms.vendas.model.service.DivisaoClienteService;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.BooleanUtils;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Generated by: ADSM ActionGenerator
 *
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.expedicao.swt.processarNotasEDIDadosGeraisAction"
 */
public class ProcessarNotasEDIDadosGeraisAction extends CrudAction {

	private static final String TP_CLIENTE_FILIAL = "F";
	
	private TipoTributacaoIEService tipoTributacaoIEService;
	private ClienteService clienteService;
	private MeioTransporteService meioTransporteService;
	private ClienteEDIFilialEmbarcadoraService clienteEDIFilialEmbarcadoraService;
	private NotaFiscalExpedicaoEDIService notaFiscalExpedicaoEDIService;
	private ProcessarNotaFiscalEDIService processarNotaFiscalEDIService;
	private FilialService filialService;
	private PedidoColetaService pedidoColetaService;
	private NotaFiscalEDIService notaFiscalEDIService;
	private MonitoramentoDescargaService monitoramentoDescargaService;
	private ClienteOperadorLogisticoService clienteOperadorLogisticoService;
	private ConhecimentoService conhecimentoService;
	private ContingenciaService contingenciaService;
	private DoctoServicoService doctoServicoService; 
	private DivisaoClienteService divisaoClienteService;
	private LogEDIDetalheService logEDIDetalheService;
	private ConfiguracoesFacade configuracoesFacade;
	
	public Map<String, Object> executeFiltroNotasFiscaisEdi(final Map criteria) {
		return processarNotaFiscalEDIService.executeFiltroNotasFiscaisEdi(criteria);
	}
	
	public Map<String, Object> executeRecarregarListaValicadaoEdi(Map criteria){
		return processarNotaFiscalEDIService.executeRecarregarListaValicadaoEdi(criteria);
	}
	
	public Map<String, Object> executePreValidacaoNotaEDI(final Map criteria) {
		return processarNotaFiscalEDIService.executePreValidacaoNotaEDI(criteria);
	}
	
	public Map<String, Object> executePreValidacaoVolumeEDI(final Map criteria) {
		return processarNotaFiscalEDIService.executePreValidacaoVolumeEDI(criteria);
	}
	
	public List findNotasEDIParaAjuste(TypedFlatMap criteria) {
		return processarNotaFiscalEDIService.findNotasEDIParaAjuste(criteria);
	}
	
	public Map<String, Object> executeAjustarNotasEDI(final Map criteria) {
		return processarNotaFiscalEDIService.executeAjustarNotasEDI(criteria);
	}
	
	public Map<String, Object> executeAjustarVolumesEDI(final Map criteria) {
		return processarNotaFiscalEDIService.executeAjustarVolumesEDI(criteria);
	}
	
	public Map<String, Object> executeValidacaoEdiItem(final Map criteria) {
		return processarNotaFiscalEDIService.executeValidacaoEdiItem(criteria);
	}
	
	public Map<String, Object> executePrepararAgruparNotasFiscaisEdi(final Map criteria) {
		return processarNotaFiscalEDIService.executePrepararAgruparNotasFiscaisEdi(criteria);
	}
	
	public Map<String, Object> executeProcessarNotasFiscaisEdiItem(final Map criteria) {
		return processarNotaFiscalEDIService.executeProcessarNotasFiscaisEdiItem(criteria);
	}
	
	public void executeOpenMonitoramentoDescarga(final Map criteria) {
		processarNotaFiscalEDIService.executeOpenMonitoramentoDescarga(criteria);
	}

	public List<Map<String,Object>> findConhecimentosSemPesagem(final Map criteria){
		return processarNotaFiscalEDIService.findConhecimentosSemPesagem(criteria);
				}

	public void finalizaConhecimentoSemPesagem(final Map criteria){
		Conhecimento conhecimento = conhecimentoService.findById((Long)criteria.get("idConhecimento"));
		Boolean blContingencia = (Boolean)criteria.get("blContingencia");
		monitoramentoDescargaService.executeFechaConhecimento(conhecimento, blContingencia);
		doctoServicoService.executeValidacoesParaBloqueioValores(conhecimento.getIdDoctoServico());
	}
	
	public void finalizaProcessamentoEDI(final Map criteria) {
		Long idPedidoColeta = (Long) criteria.get("idPedidoColeta");
		Long idMonitoramentoDescarga = (Long) criteria.get("idMonitoramentoDescarga");
		String tpProcessamento = (String) criteria.get("tpProcessamento");
		processarNotaFiscalEDIService.finalizaProcessamentoEDI(idPedidoColeta, idMonitoramentoDescarga, tpProcessamento);
			}

	public String getValidatedNrIdentificacao(String nrIdentificacao) {
		if(nrIdentificacao.trim().length() <= 11) {
			nrIdentificacao = FormatUtils.fillNumberWithZero(nrIdentificacao, 11);
			if(ValidateUtils.validateCpfOrCnpj(nrIdentificacao)) {
				return nrIdentificacao;
			}
		}
		return FormatUtils.fillNumberWithZero(nrIdentificacao, 14);
	}

	/**
	 * Verifica atraves do parametro_geral ClientesSemValidaçãoIntervaloEtiqueta
	 * se o cliente passado por parametro não possue validação de intervalo de
	 * etiqueta
	 * 
	 * @param cliente
	 * @return Boolean
	 */
	public Map<String, Boolean> validateClienteSemIntervaloEtiqueta(final Map criteria) {
		Map<String, Boolean> result = new HashMap<String, Boolean>();
		result.put("clienteSemIntervalo", processarNotaFiscalEDIService.validateIntervaloEtiqueta(criteria));
		return result;
	}

	public Map verificarPendenciaAtualizacao(Map criteria){
		return notaFiscalEDIService.executeValidatePendenciaAtualizacao(criteria);
	}
	
	public Map validateResponsavelPaleteFechado(Map criteria){
		return notaFiscalEDIService.validateResponsavelPaleteFechado(criteria);
	}
	
	public Map validateResponsavelEtiquetaPorVolume(Map criteria){
		return notaFiscalEDIService.validateResponsavelEtiquetaPorVolume(criteria);
	}

	public List<Map<String, Object>> findLookupFilial(Map criteria) {
		if(criteria.get("sgFilialResponsavelPedidoColeta") != null) {
			criteria.put("sgFilial", criteria.get("sgFilialResponsavelPedidoColeta"));
		}
		List<Filial> filiais = filialService.findLookup(criteria);
		if (filiais != null) {
			List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();
			for (Filial filial : filiais) {
				Map<String, Object> mapFilial = new HashMap<String, Object>();
				mapFilial.put("sgFilial", filial.getSgFilial());
				mapFilial.put("idFilial", filial.getIdFilial());
				mapFilial.put("idFilialResponsavelPedidoColeta", filial.getIdFilial());
				mapFilial.put("sgFilialResponsavelPedidoColeta", filial.getSgFilial());
				mapFilial.put("nmFantasia", filial.getPessoa().getNmFantasia());
				result.add(mapFilial);
			}
			return result;
		}
		return null;
    }
	
	public List<Map<String, Object>> findDadosRemetente(Map<String, Object> criteria) {
		List<Map<String, Object>> result = findCliente((Long) criteria.get("idCliente"), (String) criteria.get("nrIdentificacaoRemetente"));
		if(!result.isEmpty()) {
			Map<String, Object> cliente = (Map<String, Object>) result.get(0);
			Map<String, Object> pessoa = (Map<String, Object>) cliente.remove("pessoa");
			String nrIdentificacao = (String)pessoa.remove("nrIdentificacao");
			cliente.put("nrIdentificacaoNaoFormatado", nrIdentificacao);
			pessoa.put("nrIdentificacao", pessoa.remove("nrIdentificacaoFormatado"));
			
			contingenciaService.validateProcessarClienteEdi((Long) cliente.get("idCliente"));

			cliente.put("blPermiteCte", pessoa.get("blPermiteCte"));
			cliente.put("nrIdentificacao", pessoa.get("nrIdentificacao"));
			cliente.put("nmPessoa", pessoa.get("nmPessoa"));
			cliente.put("tpCliente", ((Map<String, Object>) cliente.remove("tpCliente")).get("value"));
			Map<String, Object> endereco = (Map<String, Object>) pessoa.get("endereco");
			endereco.put("dsEndereco", endereco.get("dsTipoLogradouro") + " " + endereco.get("dsEndereco"));
			cliente.putAll(endereco);
			Long idCliente = (Long) cliente.get("idCliente");
			cliente.put("pedidoColeta", findPedidosColetaByIdCliente(idCliente));
			cliente.put("isDanfeSimplificada", clienteService.validateIsDanfeSimplificada((Long) criteria.get("idCliente")));
		}
		return result;
	}

	private List<Map<String,Object>> findPedidosColetaByIdCliente(Long idCliente){
		List<Map<String,Object>> result = new ArrayList<Map<String,Object>>();
		List<ClienteOperadorLogistico> operadores = clienteOperadorLogisticoService.findByIdClienteOperado(idCliente);
		if (operadores != null && operadores.size() >0){
			for (ClienteOperadorLogistico clienteOperadorLogistico:operadores){
				result.addAll(pedidoColetaService.findLookupPedidoColeta(clienteOperadorLogistico.getClienteOperador().getIdCliente()));
			}
		}
		result.addAll(pedidoColetaService.findLookupPedidoColeta(idCliente));
		return result;
	}

	public void removeLogEdiProcessado(Map parameters) {
		processarNotaFiscalEDIService.removeLogEdiProcessado(parameters);
	}
	
	private List clienteEDIFilialEmbarcadora(String nrIdentificacao, Long idFilial) {
		return clienteEDIFilialEmbarcadoraService.findByNrIdentificacaoByIdFilial(nrIdentificacao, idFilial);
	}
	
	private List<Map<String, Object>> findCliente(Long idCliente, String nrIdentificacao) {
		List<Map<String, Object>> result = null;
		if(idCliente != null){
			result = clienteService.findLookupClienteEndereco(idCliente);
		} else {
			result = clienteService.findClienteByNrIdentificacao(nrIdentificacao);
		}
		if(!result.isEmpty()) {
			Map<String, Object> cliente = (Map<String, Object>)result.get(0);
			cliente.put("inscricaoEstadual", findInscricaoEstadual((Long)cliente.get("idCliente")));
			
			Cliente clienteRem = clienteService.findById((Long)cliente.get("idCliente"));
			Boolean blDivisao = null != clienteRem.getBlDivisao() ? clienteRem.getBlDivisao() : Boolean.FALSE;
			cliente.put("blDivisao", Boolean.TRUE.equals(blDivisao));
			cliente.put("divisaoCliente", findDivisaoCliente(clienteRem, blDivisao));
			cliente.put("blProdutoPerigoso", BooleanUtils.isTrue(clienteRem.getBlProdutoPerigoso()));
			cliente.put("blControladoPoliciaCivil", BooleanUtils.isTrue(clienteRem.getBlControladoPoliciaCivil()));
			cliente.put("blControladoPoliciaFederal", BooleanUtils.isTrue(clienteRem.getBlControladoPoliciaFederal()));
			cliente.put("blControladoExercito", BooleanUtils.isTrue(clienteRem.getBlControladoExercito()));
		} else {
			throw new BusinessException("LMS-00061");
		}
		return result;
	}
	
	public List findDivisaoCliente(Cliente cliente, boolean blDivisao) {
		
		if(!Boolean.TRUE.equals(blDivisao)){
			return null;
		}
		
		Long idClienteTomador = cliente.getIdCliente();
		if(cliente.getTpCliente() != null && TP_CLIENTE_FILIAL.equals(cliente.getTpCliente().getValue())){
			idClienteTomador = cliente.getClienteMatriz().getIdCliente();
		}
		
		List<DivisaoCliente> divisoes = divisaoClienteService.findDivisaoClienteByClienteAndSituacao(idClienteTomador, "A");
		if (CollectionUtils.isNotEmpty(divisoes)) {
			List<Map> result = new ArrayList<Map>();
			for (DivisaoCliente divisaoCliente : divisoes) {
				Map<String, Object> dc = new HashMap<String, Object>();
				dc.put("idDivisaoCliente", divisaoCliente.getIdDivisaoCliente());
				dc.put("dsDivisaoCliente", divisaoCliente.getDsDivisaoCliente());
				result.add(dc);
			}
			return result;
		}
		return null;
	}

	private List findInscricaoEstadual(Long idPessoa) {
		if(idPessoa == null) {
			return null;
		}
		List<TipoTributacaoIE> ies = tipoTributacaoIEService.findVigentesByIdPessoa(idPessoa);
		if (ies != null && !ies.isEmpty()) {
			List<Map> result = new ArrayList<Map>();
			for (TipoTributacaoIE tipoTributacaoIE : ies) {
				Map ie = new HashMap<String, Object>();
				ie.put("idInscricaoEstadual", tipoTributacaoIE.getInscricaoEstadual().getIdInscricaoEstadual());
				ie.put("nrInscricaoEstadual", tipoTributacaoIE.getInscricaoEstadual().getNrInscricaoEstadual());
				ie.put("blIndicadorPadrao", tipoTributacaoIE.getInscricaoEstadual().getBlIndicadorPadrao());
				result.add(ie);
			}
			return result;
		}
		return null;
	}

	public void validateEDI(Map parameters){
		processarNotaFiscalEDIService.validateEDI(parameters);
	}
	
	/**
	 *  Valida se existe dados para processamento "Especial por documento do Cliente", retornando sua descrição  
	 * @param idCliente
	 */
	public String findInformacaoDoctoClienteDescription(final Map criteria) {
		final Long idCliente = (Long) criteria.get("idCliente");
		return processarNotaFiscalEDIService.findInformacaoDoctoClienteDescription(idCliente);
	}
	
	public String findInformacaoDoctoClienteConsolidadoDescription(final Map criteria) {
		final Long idCliente = (Long) criteria.get("idCliente");
		return processarNotaFiscalEDIService.findInformacaoDoctoClienteConsolidadoDescription(idCliente);
	}

	/**
	 * Busca as Notas Fiscais EDI relacionadas ao Docto do Cliente 
	 * @param criteria
	 * @return
	 */
	public Map<String, Object> findNotasFiscaisDoctoCliente(final Map criteria) {
		final Long idCliente = (Long) criteria.get("idCliente");
		final String valorComplemento = (String) criteria.get("doctoClienteValue");
		final String tpProcessamento = (String)criteria.get("tpProcessamento");
		Object habilitaReprocessamento = configuracoesFacade.getValorParametro(SessionUtils.getFilialSessao().getIdFilial(), "REPROCESSA_EDI");
		if ("S".equals(habilitaReprocessamento)){
			List<LogEDIDetalhe> listLogReprocessamento = logEDIDetalheService.findByDoctoClienteReprocessamento(idCliente,valorComplemento,tpProcessamento);
			if (listLogReprocessamento != null && listLogReprocessamento.size()>0){
				for (LogEDIDetalhe logEdiDetalhe: listLogReprocessamento){
					notaFiscalEDIService.executeRecargaNotaEDI(logEdiDetalhe, idCliente);
				}
			}
		}
		
		List<NotaFiscalEdi> notas = notaFiscalExpedicaoEDIService.findNotaFiscalByDoctoCliente(idCliente, valorComplemento);		
		final Map<String, Object> mapReturn = new HashMap<String, Object>();
		mapReturn.put("notas", notas);
		mapReturn.put("dataHora", JTDateTimeUtils.getDataHoraAtual());
		return mapReturn;
	}
	
	/**
	 * Busca as Notas Fiscais EDI relacionadas ao Docto do Cliente 
	 * @param criteria
	 * @return
	 */
	public Map<String, Object> findNotasFiscaisDoctoClienteConsolidado(final Map criteria) {
		final Long idCliente = (Long) criteria.get("idCliente");
		final String valorComplemento = (String) criteria.get("doctoClienteValue");
		List<NotaFiscalEdi> notas = notaFiscalExpedicaoEDIService.findNotaFiscalByDoctoClienteConsolidado(idCliente, valorComplemento);
		
		final Map<String, Object> mapReturn = new HashMap<String, Object>();
		mapReturn.put("notas", notas);
		mapReturn.put("dataHora", JTDateTimeUtils.getDataHoraAtual());
		return mapReturn;
	}
	
	public Map<String, Object> findNotasFiscaisCCE(final Map criteria) {
		final String nrCCE = (String) criteria.get("nrCCE");
		
		List<NotaFiscalEdi> notas = notaFiscalExpedicaoEDIService.findByCCE(nrCCE);

		final Map<String, Object> mapReturn = new HashMap<String, Object>();
		mapReturn.put("notas", notas);
		mapReturn.put("dataHora", JTDateTimeUtils.getDataHoraAtual());
		return mapReturn;
	}
	
	public void removeRegistrosProcessados(Map parameters){
		processarNotaFiscalEDIService.removeRegistrosProcessados(parameters);
	}
	
    public List findLookupMeioTransporte(Map criteria) {
    	return meioTransporteService.findLookup(criteria);
    }
	public void setTipoTributacaoIEService(TipoTributacaoIEService tipoTributacaoIEService) {
		this.tipoTributacaoIEService = tipoTributacaoIEService;
	}
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}
	public void setClienteEDIFilialEmbarcadoraService(ClienteEDIFilialEmbarcadoraService clienteEDIFilialEmbarcadoraService) {
		this.clienteEDIFilialEmbarcadoraService = clienteEDIFilialEmbarcadoraService;
	}
	public void setMeioTransporteService(MeioTransporteService meioTransporteService) {
		this.meioTransporteService = meioTransporteService;
	}
	public void setNotaFiscalExpedicaoEDIService(NotaFiscalExpedicaoEDIService notaFiscalExpedicaoEDIService) {
		this.notaFiscalExpedicaoEDIService = notaFiscalExpedicaoEDIService;
	}	
	public void setProcessarNotaFiscalEDIService(ProcessarNotaFiscalEDIService processarNotaFiscalEDIService) {
		this.processarNotaFiscalEDIService = processarNotaFiscalEDIService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public void setPedidoColetaService(PedidoColetaService pedidoColetaService) {
		this.pedidoColetaService = pedidoColetaService;
	}
	public void setNotaFiscalEDIService(NotaFiscalEDIService notaFiscalEDIService) {
		this.notaFiscalEDIService = notaFiscalEDIService;
	}	
	public void setMonitoramentoDescargaService(MonitoramentoDescargaService monitoramentoDescargaService) {
		this.monitoramentoDescargaService = monitoramentoDescargaService;
	}
	
	public void setClienteOperadorLogisticoService(
            ClienteOperadorLogisticoService clienteOperadorLogisticoService) {
    	this.clienteOperadorLogisticoService = clienteOperadorLogisticoService;
    }
	
	public ConhecimentoService getConhecimentoService() {
		return conhecimentoService;
	}
	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
	}

	public void setContingenciaService(ContingenciaService contingenciaService) {
		this.contingenciaService = contingenciaService;
	}

	public void setDoctoServicoService(DoctoServicoService doctoServicoService) {
		this.doctoServicoService = doctoServicoService;
	}

	public void setDivisaoClienteService(DivisaoClienteService divisaoClienteService) {
		this.divisaoClienteService = divisaoClienteService;
	}
	
	public TypedFlatMap findInfoColeta(TypedFlatMap criteria){
		Long idPedidoColeta = criteria.getLong("idPedidoColeta");
		PedidoColeta pedidoColeta = pedidoColetaService.findById(idPedidoColeta);
		criteria.put("blProdutoDiferenciado", pedidoColeta.getBlProdutoDiferenciado());
		return criteria;
	}
	

	public void setLogEDIDetalheService(LogEDIDetalheService logEDIDetalheService) {
		this.logEDIDetalheService = logEDIDetalheService;
	}

	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}
}
