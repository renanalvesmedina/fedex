package com.mercurio.lms.expedicao.swt.action;

import static com.mercurio.lms.expedicao.util.ConstantesExpedicao.CD_EMISSAO;
import static com.mercurio.lms.expedicao.util.ConstantesExpedicao.CD_EMISSAO_NFT;
import static com.mercurio.lms.expedicao.util.ConstantesExpedicao.CD_GERACAO_CTE;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import net.sf.jasperreports.engine.JasperPrint;

import org.apache.commons.collections.MapUtils;
import org.apache.commons.lang.StringUtils;
import org.joda.time.DateTime;
import org.joda.time.YearMonthDay;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.ConteudoParametroFilial;
import com.mercurio.lms.configuracoes.model.InscricaoEstadual;
import com.mercurio.lms.configuracoes.model.service.ConteudoParametroFilialService;
import com.mercurio.lms.configuracoes.model.service.InscricaoEstadualService;
import com.mercurio.lms.configuracoes.model.service.ParametroGeralService;
import com.mercurio.lms.configuracoes.model.service.UsuarioService;
import com.mercurio.lms.contasreceber.model.service.FaturaService;
import com.mercurio.lms.expedicao.model.Conhecimento;
import com.mercurio.lms.expedicao.model.Contingencia;
import com.mercurio.lms.expedicao.model.MonitoramentoDescarga;
import com.mercurio.lms.expedicao.model.VolumeNotaFiscal;
import com.mercurio.lms.expedicao.model.service.ConhecimentoCancelarService;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.model.service.ContingenciaService;
import com.mercurio.lms.expedicao.model.service.IntegracaoNDDigitalService;
import com.mercurio.lms.expedicao.model.service.MonitoramentoDescargaService;
import com.mercurio.lms.expedicao.model.service.MonitoramentoDocEletronicoService;
import com.mercurio.lms.expedicao.model.service.NFEConjugadaService;
import com.mercurio.lms.expedicao.model.service.NotaFiscalEletronicaService;
import com.mercurio.lms.expedicao.report.EmitirCTRService;
import com.mercurio.lms.expedicao.util.ConstantesExpedicao;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.sim.ConstantesSim;
import com.mercurio.lms.sim.model.EventoDocumentoServico;
import com.mercurio.lms.sim.model.service.EventoDocumentoServicoService;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.LongUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.service.ClienteService;

/**
 * Generated by: ADSM ActionGenerator
 * 
 * Não inserir documentação após ou remover a tag do XDoclet a seguir. O valor
 * do <code>id</code> informado abaixo deve ser utilizado para referenciar
 * este serviço.
 * 
 * @spring.bean id="lms.expedicao.swt.emitirCTRAction"
 */

public class EmitirCTRAction extends CrudAction {
	private EmitirCTRService emitirCTRService;
	private UsuarioService usuarioService;
	private ClienteService clienteService;
	private MonitoramentoDescargaService monitoramentoDescargaService;
	private ConhecimentoService conhecimentoService;
	private ParametroGeralService parametroGeralService;
	private ConhecimentoCancelarService conhecimentoCancelarService;
	private IntegracaoNDDigitalService integracaoNDDigitalService;
	private ConteudoParametroFilialService conteudoParametroFilialService;
	private FilialService filialService;
	private FaturaService faturaService;
	private InscricaoEstadualService inscricaoEstadualService;
	private NotaFiscalEletronicaService notaFiscalEletronicaService;
	private ContingenciaService contingenciaService;
	private EventoDocumentoServicoService eventoDocumentoServicoService;
	private MonitoramentoDocEletronicoService monitoramentoDocEletronicoService;
	private NFEConjugadaService nfeConjugadaService;

	public List findDescargasByFilialUsuarioLogado(Map<String, Object> criteria) {
		
		Long idFilial = SessionUtils.getFilialSessao().getIdFilial();
		Long idMonitoramentoDescarga = (Long) criteria.get("idMonitoramentoDescarga");
		Long idMeioTransporte = (Long) criteria.get("idMeioTransporte");
		String nrFrota = MapUtils.getString(criteria, "nrFrota");
		nrFrota = nrFrota != null ? nrFrota.toUpperCase() : nrFrota;
		String nrPlaca = (String) criteria.get("nrPlaca");
		nrPlaca = nrPlaca != null ? nrPlaca.toUpperCase() : nrPlaca;
		String tpOperacao = (String) criteria.get("tpOperacaoEmissao");
		
		Filial filial = filialService.findById(idFilial);
		boolean isFilialWithSorter = false;
		if(CD_EMISSAO.equals(tpOperacao) || CD_EMISSAO_NFT.equals(tpOperacao) || CD_GERACAO_CTE.equals(tpOperacao)){
			isFilialWithSorter = filial.getBlSorter();
		}
		
		Integer tmpExc = ((BigDecimal) parametroGeralService.findConteudoByNomeParametro("TMP_MONIT_DESC_COL_EXC", false)).intValue();
		
		DateTime sysDate = JTDateTimeUtils.getDataHoraAtual();
		DateTime dhTmpExc = sysDate.minusHours(tmpExc);
		Boolean isCancelamento = false;
		List result = monitoramentoDescargaService.findDescargasFinalizadas(idFilial, idMeioTransporte, idMonitoramentoDescarga, nrPlaca, nrFrota, tpOperacao, dhTmpExc, isCancelamento);
		
		if(isFilialWithSorter){
			result.addAll(monitoramentoDescargaService.findDescargasByFilialSorter(idFilial, idMeioTransporte, idMonitoramentoDescarga, nrPlaca, nrFrota));
		}
		if(result == null || result.size() <= 0) {
			
			if (Boolean.TRUE.equals((Boolean) criteria.get("ignorarGrigVazia"))) {
				return new ArrayList();
			}
			
			if(ConstantesExpedicao.CD_EMISSAO.equals(tpOperacao)) { 
				throw new BusinessException("LMS-04220");
			} else {
				throw new BusinessException("LMS-04251");
			}
		}
		return result;
	}
	
	public List findDescargasByFilialSorter(Map<String, Object> criteria) {
		criteria.put("isFilialWithSorter", true);
		return findDescargasByFilialUsuarioLogado(criteria);
	}
	
	public List findLookupUsuarioFuncionario(Map criteria){
		return usuarioService.findLookupUsuarioFuncionario(
				null,
				(String) criteria.get("nrMatricula"), 
				null, 
				null, 
				null, 
				null,
				true); 
	}

	public List findCliente(Map criteria) {
		List<Map> clientes = clienteService.findClienteByNrIdentificacao((String) criteria.get("nrIdentificacao"));
		if (clientes != null && !clientes.isEmpty()) {
			for(Map cliente : clientes) {
				cliente.remove("tpCliente");
				
				Map pessoa = (Map) cliente.remove("pessoa");
				if (pessoa != null) {
					cliente.put("nmPessoa", pessoa.get("nmPessoa"));
					cliente.put("nrIdentificacao", pessoa.remove("nrIdentificacaoFormatado"));
				}
			}
		}
		
		return clientes;
	}

	public Map findFilialSession() {
		Map result = new HashMap();
		result.put("idFilial", SessionUtils.getFilialSessao().getIdFilial());
		result.put("sgFilial", SessionUtils.getFilialSessao().getSgFilial());

		//LMS-4048 - aproveitando a chamada
		result.put("tempoRespostaSefaz", parametroGeralService.findConteudoByNomeParametro("TEMPO_RESPOSTA_SEFAZ", false));
		
		return result;
	}

	public Map<String, Boolean> validadeNewEmissao(Long idFilial) {
		Object obj = conteudoParametroFilialService.findConteudoByNomeParametro(idFilial, "EMISSAO_CONHECI_NOVO", false);
		Map<String, Boolean> retorno = new HashMap<String, Boolean>();
		retorno.put("isNewsEmissao",  obj != null ? "S".endsWith(obj.toString()) : Boolean.FALSE);
		return retorno;
	}
	
	public Map<String, Object> findParamemtros(Long idFilial) {
		Map<String, Object> result = new HashMap<String, Object>();
		
		Contingencia contingenciaFilial = contingenciaService.findByFilial(idFilial, "A", "C");
		result.put("emContingencia", contingenciaFilial == null ? Boolean.FALSE : Boolean.TRUE);
		
		Object nrVias = conteudoParametroFilialService.findConteudoByNomeParametro(idFilial, "NRO_VIAS_RPS", false);
		result.put("nrViasRps", nrVias == null ? 1 : Integer.valueOf(nrVias.toString()));
		
		result.put("tempoRespostaSefaz", parametroGeralService.findConteudoByNomeParametro("TEMPO_RESPOSTA_SEFAZ", false));
		result.put("numeroThreadsEmissao", parametroGeralService.findConteudoByNomeParametro("NUMERO_THREADS_EMISSAO_CTE", false));
		
		return result;
	}
	
	/**
	 * Verifica se a filial estï¿½ com a emissï¿½o de CTe em modo contingnencia
	 * 
	 * @param idFilial
	 * @return 
	 */
	public Map findContingenciaFilial(Long idFilial) {
		Contingencia contingenciaFilial = contingenciaService.findByFilial(idFilial, "A", "C");
		
		Map result = new HashMap();
		result.put("emContingencia", contingenciaFilial == null ? "false" : "true");
		
		return result;
	}

	/**
	 * Retorna o conteúdo do atributo VL_CONTEUDO_PARAMETRO_FILIAL da tabela CONTEUDO_PARAMETRO_FILIAL 
	 * @param Map idFilial
	 * @return Map indicadorCte
	 */
	public Map loadIndicadorCte(Map map){

		Object obj = conteudoParametroFilialService.findConteudoByNomeParametro((Long)map.get("idFilial"), "INDICADOR CTE", false);
		Integer vlConteudoParametroFilial = obj != null ? Integer.valueOf(obj.toString()) : null;
		
		Map retorno = new HashMap();
		retorno.put("indicadorCte", vlConteudoParametroFilial);
		return retorno;
	}

	/**
	 * Executa a emissão do conhecimento através da tela do SWT
	 * 
	 * Emitir CTRCs 
	 * 
	 * @param parameters
	 */	
	public Map<String, Object> executePreEmitirConhecimentoNew(TypedFlatMap parameters) {

		Long idMonitoramentoDescarga = null;
		Long nrConhecimento = null;
		String tpOperacaoEmissao = parameters.getString("tpOperacaoEmissao");
		Boolean needConfirmation = parameters.getBoolean("needConfirmation");
		
		
		/*Verifica se é um emissao dependendo do tipo de operação*/
		if(isEmissao(tpOperacaoEmissao)) {
			idMonitoramentoDescarga = parameters.getLong("idMonitoramentoDescarga");
			nrConhecimento = parameters.getLong("nrConhecimento");
		} else {
			idMonitoramentoDescarga = parameters.getLong("idMonitoramentoDescargaReemissao");
			nrConhecimento = parameters.getLong("nrConhecimentoReemissao");
		}

		validateBloqueiaEmissaoCte(tpOperacaoEmissao);
		emitirCTRService.executePendenciaNaoAprovado(needConfirmation, tpOperacaoEmissao, idMonitoramentoDescarga);
		return emitirCTRService.executePreEmitirCTR(
				parameters.getString("tpOperacaoEmissao"), parameters.getString("tpOpcaoEmissao"),
				SessionUtils.getFilialSessao().getIdFilial(), nrConhecimento, idMonitoramentoDescarga);
		
    }

	private boolean isEmissao(String tpOperacaoEmissao) {
		return tpOperacaoEmissao != null && (ConstantesExpedicao.CD_EMISSAO.equals(tpOperacaoEmissao)
						|| ConstantesExpedicao.CD_EMISSAO_NFT.equals(tpOperacaoEmissao) || ConstantesExpedicao.CD_GERACAO_CTE.equals(tpOperacaoEmissao));
	}
	
	public Map<String, Object> executeEmitirConhecimentoNew(TypedFlatMap parameters) {
		Long idMonitoramentoDescarga = null;
		String tpOperacaoEmissao = parameters.getString("tpOperacaoEmissao");
		Boolean semNumeroReservado = (Boolean) parameters.get("semNumeroReservado");
		Object[] item = (Object[]) parameters.get("conhecimento");
		
		/*Verifica se é um emissao dependendo do tipo de operação*/
		if(isEmissao(tpOperacaoEmissao)) {
			idMonitoramentoDescarga = parameters.getLong("idMonitoramentoDescarga");
		} else {
			idMonitoramentoDescarga = parameters.getLong("idMonitoramentoDescargaReemissao");
		}

		Conhecimento conhecimento = (Conhecimento) item[0];
		VolumeNotaFiscal volumeNotaFiscal = (VolumeNotaFiscal) item[1];
		return emitirCTRService.executeEnvioEmissaoSefaz(tpOperacaoEmissao, idMonitoramentoDescarga, semNumeroReservado, conhecimento, volumeNotaFiscal);
    }
	
	/**
	 * Executa a emissão do conhecimento através da tela do SWT
	 * 
	 * Emitir CTRCs 
	 * 
	 * @param parameters
	 */	
	@SuppressWarnings("unchecked")
	public void executeEmitirConhecimento(TypedFlatMap parameters) {

		Long idMonitoramentoDescarga = null;
		Long nrConhecimento = null;
		String tpOperacaoEmissao = parameters.getString("tpOperacaoEmissao");
		Boolean needConfirmation = parameters.getBoolean("needConfirmation");
		
		validateBloqueiaEmissaoCte(tpOperacaoEmissao);
		
		Map map = new HashMap();
		map.put("blProcessando", Boolean.TRUE);
		
		/*Verifica se é um emissao dependendo do tipo de operação*/
		if(isEmissao(tpOperacaoEmissao)) {
			idMonitoramentoDescarga = parameters.getLong("idMonitoramentoDescarga");
			nrConhecimento = parameters.getLong("nrConhecimento");
		} else {
			idMonitoramentoDescarga = parameters.getLong("idMonitoramentoDescargaReemissao");
			nrConhecimento = parameters.getLong("nrConhecimentoReemissao");
		}

		/** 
		 * LMS-1657
		 * Se for reemissão de CTE, buscar os conhecimentos já emitidos 
		 */
		if (ConstantesExpedicao.CD_REEMISSAO_CTE.equals(tpOperacaoEmissao)) {
			emitirCTRService.findConhecimentoCTE(idMonitoramentoDescarga);
		} else {

		emitirCTRService.executePendenciaNaoAprovado(needConfirmation, tpOperacaoEmissao, idMonitoramentoDescarga);

		/** LMS-414 - Busca Eventos de Cancelamento */
		final List<EventoDocumentoServico> eventos = eventoDocumentoServicoService.findEventoDoctoServicoByMonitoramento(idMonitoramentoDescarga, ConstantesSim.EVENTO_DOCUMENTO_CANCELADO);
		verifyCancelamentoObservacaoCTRC(eventos);

		/*Chama o servico para emissao do CTRC*/
		emitirCTRService.executeEmitirCTR(
				parameters.getString("tpOperacaoEmissao"),
				parameters.getString("tpOpcaoEmissao"),
				SessionUtils.getFilialSessao().getIdFilial(),
				parameters.getLong("nrProximoFormulario"),
				parameters.getLong("nrProximoCodigoBarras"),
				nrConhecimento,
				parameters.getString("dsMacAddress"),
				idMonitoramentoDescarga,
			(Double) parameters.get("token"),
				(List<Map>) parameters.get("ctrcsDuplicados"), 
				needConfirmation);
        }
    }

	private void validateBloqueiaEmissaoCte(String tpOperacaoEmissao) {
		ConteudoParametroFilial cpf = conteudoParametroFilialService.findConteudoParametroFilial(SessionUtils.getFilialSessao().getIdFilial(), "BLOQUEIA_EMISSAO_CTE", "S");
		
		if (cpf != null && CD_GERACAO_CTE.equals(tpOperacaoEmissao)) {
			throw new BusinessException("LMS-04541");
		}
	}

	/**
	 * Busca a lista de conhecimentos (CTE) que já estão processados pela receita
	 * @param parameters
	 * @return
	 */
	public Map<String, Object> executeEmitirCTE(TypedFlatMap parameters) {
		Long idMonitoramentoDescarga = parameters.getLong("idMonitoramentoDescarga");

		Map<String, Object> map = emitirCTRService.findConhecimentoCTE(idMonitoramentoDescarga);

		Integer nrVias = null;
		try{
			ConteudoParametroFilial conteudoParametroFilial = conteudoParametroFilialService.findByNomeParametro(SessionUtils.getFilialSessao().getIdFilial(), "NRO_VIAS_CTE", false);
			if (conteudoParametroFilial!=null && StringUtils.isNotEmpty(conteudoParametroFilial.getVlConteudoParametroFilial())){
				nrVias = Integer.valueOf(conteudoParametroFilial.getVlConteudoParametroFilial());
			}
		}catch (BusinessException e) {}
		
		try{
			if (nrVias == null){
				nrVias = ((BigDecimal)parametroGeralService.findConteudoByNomeParametro("NRO_VIAS_CTE", false)).intValue();
			}
		}catch(BusinessException e){}
		
		if (nrVias == null){
			nrVias = Integer.valueOf(1);
		}
		map.put("nrVias", nrVias);

		return map;
	}
	
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public Map executeEmitirNte(TypedFlatMap parameter){
		List<Map<String, Object>> listNtes = null;
		if(parameter.get("ntes") != null){
			listNtes = (List<Map<String, Object>>)parameter.get("ntes");
		}
	
		Map<String, JasperPrint> mapRetorno =  new HashMap<String, JasperPrint>();
		mapRetorno.put("jasperPrint", notaFiscalEletronicaService.createNteJasperPrintNteByList(listNtes));
		
		return mapRetorno;
	}
		
	/**
	 * Executa a consulta do monitoramento do documento eletrônico vinculado a
	 * nota conjugada para se possível criar a impressão.
	 * 
	 * @param parameter
	 * @return Map
	 */
	@SuppressWarnings({ "rawtypes" })
	public Map executeJasperPrintNfeConjugada(TypedFlatMap parameter){		
		return nfeConjugadaService.findXMLData(parameter.get("listNfeConjugada"));
	}
	
	/**
	 * Busca os xmls de conhecimentos (CTE) que já estão processados pela receita
	 * @param parameters
	 * @return
	 */
	public Map<String, Object> findAndExecuteEmitirCTE(TypedFlatMap parameters) {
		String tpOpcaoEmissao = parameters.getString("tpOpcaoEmissao");
		List<Map<String, Object>> ctrcs = null;
		
		if("V".equals(tpOpcaoEmissao)){
		Long idMonitoramentoDescarga = parameters.getLong("idMonitoramentoDescarga");
			ctrcs = (List<Map<String, Object>>) emitirCTRService.findConhecimentoCTE(idMonitoramentoDescarga).get("ctes");
		}else if("F".equals(tpOpcaoEmissao)){
			Long idFatura = parameters.getLong("idFatura");
			ctrcs = emitirCTRService.findConhecimentoCTEbyIdFatura(idFatura);
		}else if("C".equals(tpOpcaoEmissao)){
			Long idCliente = parameters.getLong("idCliente");
			YearMonthDay dhFiltro = parameters.getYearMonthDay("data");
			ctrcs = emitirCTRService.findConhecimentoCTEbyIdCliente(idCliente, dhFiltro);
		}
		
		if (ctrcs != null) {
			List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();
			for (Map<String, Object> m : ctrcs) {
				if (m!=null){
					result.add(integracaoNDDigitalService.findByDoctoServico((Long)m.get("idConhecimento")));
				}
			}
			
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("ctrcs", result);
			Integer nrVias = null;
			try{
				ConteudoParametroFilial conteudoParametroFilial = conteudoParametroFilialService.findByNomeParametro(SessionUtils.getFilialSessao().getIdFilial(), "NRO_VIAS_CTE", false);
				if (conteudoParametroFilial!=null && StringUtils.isNotEmpty(conteudoParametroFilial.getVlConteudoParametroFilial())){
					nrVias = Integer.valueOf(conteudoParametroFilial.getVlConteudoParametroFilial());
				}
			}catch (BusinessException e) {}
			
			try{
				if (nrVias == null){
					nrVias = ((BigDecimal)parametroGeralService.findConteudoByNomeParametro("NRO_VIAS_CTE", false)).intValue();
				}
			}catch(BusinessException e){}
			
			if (nrVias == null){
				nrVias = Integer.valueOf(1);
			}
			map.put("nrVias", nrVias);
			
			return map;
		}

		return null;
	}


	/**
	 * LMS-414
	 * @param idMonitoramentoDescarga
	 */
	private void verifyCancelamentoObservacaoCTRC(final List<EventoDocumentoServico> eventos) {
		/** Caso encontrado cancela cancela conhecimento */
		for (final EventoDocumentoServico eventoDocumentoServico : eventos) {
			conhecimentoCancelarService.storeCancelamentoObservacaoLimiteCalculoFrete(eventoDocumentoServico.getDoctoServico().getIdDoctoServico(), eventoDocumentoServico.getObComplemento());
		}
	}

	private void verifyCancelamentoCTRC(final List<EventoDocumentoServico> eventos) {
		final Long idMotivoCancelamento = Long.valueOf(16);
		final Long idLocalizacaoMercadoria = Long.valueOf(124);
		for (final EventoDocumentoServico eventoDocumentoServico : eventos) {
			// Apaga as notas fiscais relacionadas ao conhecimento
			conhecimentoCancelarService.storeCancelamentoLimiteCalculoFrete(eventoDocumentoServico.getDoctoServico().getIdDoctoServico(), idMotivoCancelamento, idLocalizacaoMercadoria);
			/** Mostra mensagem ao usuário */
			throw new BusinessException("LMS-04359", new Object[]{eventoDocumentoServico.getObComplemento()});
		}
	}
	
	public Map verificaStatusEmissao(Map map) {
		return emitirCTRService.verificaStatusEmissao((Double) map.get("token"));
	}

	public List findConhecimentosEmitir(TypedFlatMap parameters) {
		
		String tpOperacaoEmissao = parameters.getString("tpOperacaoEmissao");
		
		Long idMonitoramentoDescarga = null;
		Long nrConhecimento = null;
		if(tpOperacaoEmissao != null && (ConstantesExpedicao.CD_EMISSAO.equals(tpOperacaoEmissao) || ConstantesExpedicao.CD_EMISSAO_NFT.equals(tpOperacaoEmissao)) ) {
			idMonitoramentoDescarga = parameters.getLong("idMonitoramentoDescarga");
			nrConhecimento = parameters.getLong("nrConhecimento");
		} else {
			idMonitoramentoDescarga = parameters.getLong("idMonitoramentoDescargaReemissao");
			nrConhecimento = parameters.getLong("nrConhecimentoReemissao");
	}
		
		/*Obtem o tipo de documento*/
		String tpDocumento = ConstantesExpedicao.CONHECIMENTO_NACIONAL;
		String tpOperacao  = parameters.getString("tpOperacaoEmissao");
		if(tpOperacao != null && ("N".equals(tpOperacao) || "M".equals(tpOperacao)) ){
			tpDocumento = ConstantesExpedicao.NOTA_FISCAL_TRANSPORTE;
		}		
		
		List<Map> ctrcs = emitirCTRService.findCTRCsAEmitir(
				tpDocumento,
				parameters.getString("tpOperacaoEmissao"),
				parameters.getString("tpOpcaoEmissao"),
				SessionUtils.getFilialSessao().getIdFilial(),
				parameters.getLong("nrProximoFormulario"),
				nrConhecimento,
				parameters.getString("dsMacAddress"),
				idMonitoramentoDescarga
			);
		
		return ctrcs;
	}
	
	public Map updateDadosReenvioSOM(TypedFlatMap parameters) {
		List<String> list = parameters.getList("ctrc_statusx");
		Map result = new HashMap();
		if( list != null ){
			List ctrcs = emitirCTRService.executeFindDadosReenvioSOM(SessionUtils.getFilialSessao().getIdFilial(), list);
		result.put("ctrcs", ctrcs);
		}
		return result;
	}
	
	public void updateTpSituacaoAtualizacaoSOM(Map<String, Object> parameters) {
		if(parameters != null) {
			List<Long> docsServ = (List) parameters.get("docsServ");
			Boolean situacaoAtualizacao = (Boolean) parameters.get("situacaoAtualizacao");
			String tpSituacaoAtualizacao = situacaoAtualizacao != null && situacaoAtualizacao ? "A" : "E";
			conhecimentoService.updateTpSituacaoAtualizacaoSOM(docsServ, tpSituacaoAtualizacao);
		}
	}
	
	public List<Map<String, Object>> findDadosRemetente(Map<String, Object> criteria) {
		Long idCliente = (Long)criteria.get("idCliente");
		String nrIdentificacaoRemetente = (String)criteria.get("nrIdentificacaoRemetente");
		
		List<Map<String, Object>> result = null;
		if(idCliente != null){
			result = clienteService.findLookupClienteEndereco(idCliente);
		} else {
			result = clienteService.findClienteByNrIdentificacao(nrIdentificacaoRemetente);
		}
		
		if(!result.isEmpty()) {
			Map<String, Object> cliente = (Map<String, Object>) result.get(0);
			Map<String, Object> pessoa = (Map<String, Object>) cliente.remove("pessoa");
			String nrIdentificacao = (String)pessoa.remove("nrIdentificacao");
			cliente.put("nrIdentificacaoNaoFormatado", nrIdentificacao);
			pessoa.put("nrIdentificacao", pessoa.remove("nrIdentificacaoFormatado"));
			
			cliente.put("blPermiteCte", pessoa.get("blPermiteCte"));
			cliente.put("nrIdentificacao", pessoa.get("nrIdentificacao"));
			cliente.put("nmPessoa", pessoa.get("nmPessoa"));
			cliente.put("tpCliente", ((Map<String, Object>) cliente.remove("tpCliente")).get("value"));
			Map<String, Object> endereco = (Map<String, Object>) pessoa.get("endereco");
			endereco.put("dsEndereco", endereco.get("dsTipoLogradouro") + " " + endereco.get("dsEndereco"));
			cliente.putAll(endereco);
		} else {
			throw new BusinessException("LMS-00061");
		}	
		return result;
	}

	public List findFilialConhecimento(TypedFlatMap criteria) {
		return filialService.findLookupBySgFilial(criteria.getString("sgFilial"), criteria.getString("tpAcesso"));
	}
	
	/**
     * Busca Fatura para Complemento
     * @param criteria
     * @return
     */
	public List findByNrFaturaIdFilialOrigem(TypedFlatMap criteria) {
		Long nrFatura = LongUtils.getLong(criteria.getInteger("nrFatura"));
    	Long idFilial = criteria.getLong("idFilial");
    	List result = faturaService.findByNrFaturaIdFilialOrigem(nrFatura, idFilial);

    	//Valida Faturas
    	if (criteria.getBoolean("blIgnoreCanceladas") == null || !criteria.getBoolean("blIgnoreCanceladas"))
    	faturaService.validateFaturaCancelada(result);

    	//Carrega Inscricoes Estaduais
		if(result != null && !result.isEmpty()) {
			Map fatura = (Map) result.get(0);
			Long idCliente = MapUtils.getLong((Map) result.get(0), "idCliente");
			InscricaoEstadual inscricaoEstadual = inscricaoEstadualService.findByPessoaIndicadorPadrao(idCliente, Boolean.TRUE);
			if(inscricaoEstadual != null) {
				((Map)fatura.get("remetente")).put("nrInscricaoEstadual",inscricaoEstadual.getNrInscricaoEstadual());
				((Map)fatura.get("destinatario")).put("nrInscricaoEstadual",inscricaoEstadual.getNrInscricaoEstadual());
			}
		}else{
			throw new BusinessException("LMS-04401");
		}
    	return result;
    }
	
	
	
    public List findByNrFaturaIdFilialOrigemTpSituacaoFatura(TypedFlatMap criteria) {
		Long nrFatura = LongUtils.getLong(criteria.getInteger("nrFatura"));
    	Long idFilial = criteria.getLong("idFilial");
    	String tpSituacaoFatura = "CA";
    	List result = faturaService.findByNrFaturaIdFilialOrigemTpSituacaoFatura(nrFatura, idFilial, tpSituacaoFatura);

    	//Carrega Inscricoes Estaduais
		if(result != null && !result.isEmpty()) {
			Map fatura = (Map) result.get(0);
			Long idCliente = MapUtils.getLong((Map) result.get(0), "idCliente");
			InscricaoEstadual inscricaoEstadual = inscricaoEstadualService.findByPessoaIndicadorPadrao(idCliente, Boolean.TRUE);
			if(inscricaoEstadual != null) {
				((Map)fatura.get("remetente")).put("nrInscricaoEstadual",inscricaoEstadual.getNrInscricaoEstadual());
				((Map)fatura.get("destinatario")).put("nrInscricaoEstadual",inscricaoEstadual.getNrInscricaoEstadual());
			}
		}else{
			throw new BusinessException("LMS-04401");
		}
    	return result;
    }
	
    /**
     * LMS-4048
     * 
     * 04.01.01.03 Emitir Conhecimento
     * AO PREENCHER O CAMPO TIPO DE OPERAÇÃO - 1.6:
     * 	Se o tipo selecionado for "Geração de CTE"
     * 		e existir uma contingência em aberto na tabela CONTINGENCIA para a filial do usuário logado 
     * 		(CONTINGENCIA.ID_FILIAL = ID da filial do usuário logado, TP_CONTINGENCIA = 'C' e TP_SITUACAO = 'A') 
     * 		visualizar a mensagem de alerta "LMS-04391", aguardando confirmação.
     * 
     * @param criteria
     */
    public void verificaContingenciaEmAberto(TypedFlatMap criteria) {
    	Long idFilial = criteria.getLong("idFilial");
    	
    	Contingencia contingencia = contingenciaService.findByFilial(idFilial, "A", "C");
    	if (contingencia != null) {
    		throw new BusinessException("LMS-04391");
    	}
    }
    
    public Map<String, Object> getFilial(TypedFlatMap criteria) {
    	Long idFilial = criteria.getLong("idFilial");
    	
    	Map<String, Object> retorno = new HashMap<String, Object>();
		retorno.put("filial", filialService.findById(idFilial));
		return retorno;
    }
    
    public Map<String, Object> getSituacaoDescarga(TypedFlatMap criteria) {
    	Long idMonitoramentoDescarga = criteria.getLong("idMonitoramentoDescarga");
    	
    	MonitoramentoDescarga monitoramentoDescarga = monitoramentoDescargaService.findById(idMonitoramentoDescarga);
    	String tpSituacaoDescarga = monitoramentoDescarga != null && monitoramentoDescarga.getTpSituacaoDescarga() != null ? monitoramentoDescarga.getTpSituacaoDescarga().getValue() : "";
    	
    	Map<String, Object> retorno = new HashMap<String, Object>();
		retorno.put("tpSituacaoDescarga", tpSituacaoDescarga);
		return retorno;
    }
	
	/**
	 * Atualiza Monitoramento Descarga para Emissão Realizada: TpSituacaoDescarga "S"
	 * 
	 * @param idFilial
	 * @param idMonitoramentoDescarga
	 * @return 
	 */
	public void updateMonitoramentoDescargaEmissaoRealizada(TypedFlatMap criteria) {
		Long idFilial = criteria.getLong("idFilial");
		Long idMonitoramentoDescarga = criteria.getLong("idMonitoramentoDescarga");
		if(idFilial!= null && idMonitoramentoDescarga!= null){
			monitoramentoDescargaService.updateSituacaoMonitoramentoByIdMeioTransporte(idMonitoramentoDescarga, idFilial);
		}
	}
	
	/*
	 * GETTERS E SETTERS
	 */
	public void setEmitirCTRService(EmitirCTRService emitirCTRService) {
		this.emitirCTRService = emitirCTRService;
	}
    public void setUsuarioService(UsuarioService usuarioService) {
		this.usuarioService = usuarioService;
	}
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}

	public MonitoramentoDescargaService getMonitoramentoDescargaService() {
		return monitoramentoDescargaService;
}

	public void setMonitoramentoDescargaService(
			MonitoramentoDescargaService monitoramentoDescargaService) {
		this.monitoramentoDescargaService = monitoramentoDescargaService;
	}

	/**
	 * @return the conhecimentoService
	 */
	public ConhecimentoService getConhecimentoService() {
		return conhecimentoService;
	}

	/**
	 * @param conhecimentoService the conhecimentoService to set
	 */
	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
	}

	public ParametroGeralService getParametroGeralService() {
		return parametroGeralService;
	}

	public void setParametroGeralService(ParametroGeralService parametroGeralService) {
		this.parametroGeralService = parametroGeralService;
	}

	/**
	 * @param conhecimentoCancelarService the conhecimentoCancelarService to set
	 */
	public void setConhecimentoCancelarService(ConhecimentoCancelarService conhecimentoCancelarService) {
		this.conhecimentoCancelarService = conhecimentoCancelarService;
	}

	public void setIntegracaoNDDigitalService(IntegracaoNDDigitalService integracaoNDDigitalService) {
		this.integracaoNDDigitalService = integracaoNDDigitalService;
}

	public void setConteudoParametroFilialService(
            ConteudoParametroFilialService conteudoParametroFilialService) {
    	this.conteudoParametroFilialService = conteudoParametroFilialService;
    }

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
}
	
	public void setFaturaService(FaturaService faturaService) {
		this.faturaService = faturaService;
	}
	
	public void setInscricaoEstadualService(InscricaoEstadualService inscricaoEstadualService) {
		this.inscricaoEstadualService = inscricaoEstadualService;
	}

	public void setNotaFiscalEletronicaService(
			NotaFiscalEletronicaService notaFiscalEletronicaService) {
		this.notaFiscalEletronicaService = notaFiscalEletronicaService;
	}

	public void setContingenciaService(ContingenciaService contingenciaService) {
		this.contingenciaService = contingenciaService;
}

	public void setEventoDocumentoServicoService(EventoDocumentoServicoService eventoDocumentoServicoService) {
		this.eventoDocumentoServicoService = eventoDocumentoServicoService;
}

	public MonitoramentoDocEletronicoService getMonitoramentoDocEletronicoService() {
		return monitoramentoDocEletronicoService;
	}

	public void setMonitoramentoDocEletronicoService(
			MonitoramentoDocEletronicoService monitoramentoDocEletronicoService) {
		this.monitoramentoDocEletronicoService = monitoramentoDocEletronicoService;
	}

	public NFEConjugadaService getNfeConjugadaService() {
		return nfeConjugadaService;
	}

	public void setNfeConjugadaService(NFEConjugadaService nfeConjugadaService) {
		this.nfeConjugadaService = nfeConjugadaService;
	}

	
	
}
