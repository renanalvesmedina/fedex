package com.mercurio.lms.expedicao.swt.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.joda.time.DateTime;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.lms.configuracoes.model.AgendaAtualizacaoRobo;
import com.mercurio.lms.configuracoes.model.service.AgendaAtualizacaoRoboService;

/**
 * Generated by: ADSM ActionGenerator
 *
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.configuracoes.swt.manterAgendamentosRoboAction"
 */
public class ManterAgendamentosRoboAction extends CrudAction {


	public ResultSetPage findPaginated(Map criteria) {
		ResultSetPage rsp = getAgendaAtualizacaoRoboService().findPaginated(criteria);
		if (rsp != null) {
			List<Map<String, Object>> agendamentos = rsp.getList();
			List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();
			if (agendamentos != null) {
				for (Map<String, Object> agendamento : agendamentos) {
					Map<String, Object> mapControle = new HashMap<String, Object>();
					mapControle.put("idAgendaAtualizacaoRobo", agendamento.get("idAgendaAtualizacaoRobo"));
					mapControle.put("versao", agendamento.get("nrVersao"));
					mapControle.put("versaoSOM", agendamento.get("nrVersaoSOM"));
					mapControle.put("dhAtualizacao", agendamento.get("dhAtualizacao"));
					mapControle.put("observacoes", agendamento.get("dsObservacoes"));
					result.add(mapControle);
				}
				rsp.setList(result);
			}
		}
		return rsp;
	}
	
	public Integer getRowCount(Map criteria) {
		return getAgendaAtualizacaoRoboService().getRowCount(criteria);
	}
	
	public Map store(Map data) {
		AgendaAtualizacaoRobo bean = new AgendaAtualizacaoRobo();
		bean.setNrVersao((Long) data.get("versao"));
		bean.setNrVersaoSOM((Long) data.get("versaoSOM"));
		bean.setDhAtualizacao((DateTime) data.get("dhAtualizacao"));
		bean.setDsObservacoes((String) data.get("observacoes"));
		String arqZip = (String) data.get("arquivoZip");
		
		if(arqZip != null) {
			arqZip = arqZip.replaceAll("\r", "");
			arqZip = arqZip.replaceAll("\n", "");
			bean.setArquivoZip(arqZip.getBytes());
		}
		Long idAgendaAtualizacaoRobo = (Long) getAgendaAtualizacaoRoboService().store(bean);
		Map<String, Object> result = new HashMap<String, Object>();
		result.put("idAgendaAtualizacaoRobo", idAgendaAtualizacaoRobo);
		return result;
	}
	
	public Map findById(java.lang.Long id) {
		Map<String, Object> result = new HashMap<String, Object>();
		AgendaAtualizacaoRobo agendamento = getAgendaAtualizacaoRoboService().findById(id);
		
		result.put("idAgendaAtualizacaoRobo", agendamento.getIdAgendaAtualizacaoRobo());
		result.put("versao", agendamento.getNrVersao());
		result.put("versaoSOM", agendamento.getNrVersaoSOM());
		result.put("dhAtualizacao", agendamento.getDhAtualizacao());
		result.put("observacoes", agendamento.getDsObservacoes());
		
		return result;
	}
	
	public void setAgendaAtualizacaoRoboService(AgendaAtualizacaoRoboService agendaAtualizacaoRoboService) {
		this.defaultService = agendaAtualizacaoRoboService;
	}
	
	public AgendaAtualizacaoRoboService getAgendaAtualizacaoRoboService() {
		return (AgendaAtualizacaoRoboService) this.defaultService;
	}
}
