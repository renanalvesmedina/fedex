package com.mercurio.lms.expedicao.swt.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.model.service.NotaFiscalServicoService;
import com.mercurio.lms.expedicao.util.ConhecimentoUtils;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.AliasToNestedMapResultTransformer;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.service.ClienteService;

/**
 * Generated by: ADSM ActionGenerator
 *
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.expedicao.swt.pesquisarNotaFiscalServicoAction"
 */
public class PesquisarNotaFiscalServicoAction extends CrudAction {
	private FilialService filialService;
	private ClienteService clienteService;
	private NotaFiscalServicoService notaFiscalServicoService;
	
	public List<Map<String, Object>> findFilial(Map criteria) {
		List<Filial> filiais = filialService.findLookup(criteria);
		if (filiais != null) {
			List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();
			for (Filial filial : filiais) {
				Map<String, Object> mapFilial = new HashMap<String, Object>();
				mapFilial.put("sgFilial", filial.getSgFilial());
				mapFilial.put("idFilial", filial.getIdFilial());
				mapFilial.put("nmFantasia", filial.getPessoa().getNmFantasia());
				result.add(mapFilial);
			}
			return result;
		}
		return null;
    }

	public List findCliente(Map criteria) {
		Map<String, Object> pessoa = new HashMap<String, Object>();
		pessoa.put("nrIdentificacao", criteria.remove("nrIdentificacao"));
		pessoa.put("nmFantasia", criteria.remove("nmFantasia"));
		criteria.put("pessoa", pessoa);
	    List<Cliente> clientes = clienteService.findLookup(criteria);
		if (clientes != null && !clientes.isEmpty()) {
			List<Map<String, Object>> result = new ArrayList<Map<String,Object>>();
			for(Cliente cliente : clientes) {
				Map<String, Object> mapCliente = new HashMap<String, Object>();
				mapCliente.put("idCliente",cliente.getIdCliente());
				mapCliente.put("nmPessoa", cliente.getPessoa().getNmPessoa());
				// já vem formatado do clienteService.
				mapCliente.put("nrIdentificacao", cliente.getPessoa().getNrIdentificacao());
				mapCliente.put("nmFantasia", cliente.getPessoa().getNmFantasia());
				mapCliente.put("nrConta", cliente.getNrConta());
				result.add(mapCliente);
			}
			return result;
		}
		return null;
	}

	public Integer getRowCountNotaFiscalServico(TypedFlatMap criteria) {
		return notaFiscalServicoService.getRowCountNFS(createFindCriteria(criteria));
	}

	public ResultSetPage findNotaFiscalServicoPaginated(TypedFlatMap criteria) {
		
		/** Busca Registros */
		ResultSetPage rsp = notaFiscalServicoService.findPaginatedNFS(createFindCriteria(criteria));
		
		List result = AliasToNestedMapResultTransformer.getInstance().transformListResult(rsp.getList());
		String nrDocumentoServico = null;

		/** Formata nrDocumentos */
		for (Iterator it = result.iterator(); it.hasNext();) {
			Map notaFiscalServico = (Map) it.next();

			nrDocumentoServico = ConhecimentoUtils.formatNotaFiscalServico((Long) notaFiscalServico.get("nrNotaFiscalServico"));
			
			notaFiscalServico.put("idFilial", notaFiscalServico.get("idFilialOrigem"));
			notaFiscalServico.put("sgFilial", notaFiscalServico.get("sgFilialOrigem"));
			
			Map filialOrigem = (Map) notaFiscalServico.get("filialByIdFilialOrigem");
			Map pessoaFilialOrigem = (Map) filialOrigem.get("pessoa");
			notaFiscalServico.put("nmFantasia", pessoaFilialOrigem.get("nmFantasia"));
			
			notaFiscalServico.put("nrDocumentoServico", nrDocumentoServico);
			notaFiscalServico.put("nrDoctoServico", notaFiscalServico.get("nrNotaFiscalServico"));
			
			Map filialDestino = (Map) notaFiscalServico.get("filialByIdFilialDestino");
			Map pessoaFilialDestino = (Map) filialDestino.get("pessoa");
			notaFiscalServico.put("nmFilialDestino", pessoaFilialDestino.get("nmFantasia"));
			
			Map remetente = (Map) notaFiscalServico.remove("filial");
			Map pessoaRemetente = (Map) remetente.get("pessoa");
			notaFiscalServico.put("nmPessoaClienteRemetente", pessoaRemetente.get("nmPessoa"));
			notaFiscalServico.put("nrIdentificacaoRemetente", FormatUtils.formatIdentificacao(pessoaRemetente));
			notaFiscalServico.put("idPessoaRemetente", pessoaRemetente.get("idPessoa"));
			
			Map destinatario = (Map) notaFiscalServico.remove("filialByIdFilialDestino");
			Map pessoaDestinatario = (Map) destinatario.get("pessoa");
			notaFiscalServico.put("nmPessoaClienteDestinatario", pessoaDestinatario.get("nmPessoa"));
			notaFiscalServico.put("nrIdentificacaoDestinatario", FormatUtils.formatIdentificacao(pessoaDestinatario));
			notaFiscalServico.put("idPessoaDestinatario", pessoaDestinatario.get("idPessoa"));

			notaFiscalServico.put("vlTotalDocServico", notaFiscalServico.get("valor"));

		}
		rsp.setList(result);
		return rsp;
	}
	
	public TypedFlatMap findFilialById(Long idFilial) {
		Filial filial = filialService.findById(idFilial);
		TypedFlatMap result = new TypedFlatMap();		
		result.put("filial.sgFilial", filial.getSgFilial());
		result.put("filial.pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
		return result;
	}
	
	/*
	 * Metodos privados
	 */
	
	private TypedFlatMap createFindCriteria(Map criteria) {
		TypedFlatMap tfmCriteria = new TypedFlatMap();
		tfmCriteria.put("dtEmissaoInicial", criteria.get("dtEmissaoInicial"));
		tfmCriteria.put("dtEmissaoFinal", criteria.get("dtEmissaoFinal"));
		tfmCriteria.put("nrNotaFiscalServico", criteria.get("nrNotaFiscalServico"));
		tfmCriteria.put("tpDocumentoServico", criteria.get("tpDocumentoServico"));
		tfmCriteria.put("filialByIdFilialOrigem.idFilial", criteria.get("idFilialOrigem"));
		tfmCriteria.put("filialByIdFilialDestino.idFilial", criteria.get("idFilialDestino"));
		tfmCriteria.put("clienteByIdClienteRemetente.idCliente", criteria.get("idClienteRemetente"));
		tfmCriteria.put("clienteByIdClienteDestinatario.idCliente", criteria.get("idClienteDestinatario"));
    	tfmCriteria.put("_currentPage", criteria.get("_currentPage"));
    	tfmCriteria.put("_pageSize", criteria.get("_pageSize"));
    	tfmCriteria.put("_order", criteria.get("_order"));
    	return tfmCriteria;
	}
	
	/*
	 * Getters e setters
	 */
	public ConhecimentoService getConhecimentoService() {
		return (ConhecimentoService)defaultService;
	}
	
	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.defaultService = conhecimentoService;
	}
	
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}
	
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public void setNotaFiscalServicoService(
			NotaFiscalServicoService notaFiscalServicoService) {
		this.notaFiscalServicoService = notaFiscalServicoService;
	}

}