package com.mercurio.lms.expedicao.swt.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.util.ConhecimentoUtils;
import com.mercurio.lms.expedicao.util.ConstantesExpedicao;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.AliasToNestedMapResultTransformer;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.service.ClienteService;

/**
 * Generated by: ADSM ActionGenerator
 *
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.expedicao.swt.pesquisarConhecimentoAction"
 */
public class PesquisarConhecimentoAction extends CrudAction {
	private FilialService filialService;
	private ClienteService clienteService;
	private DomainValueService domainValueService;
	
	public List<Map<String, Object>> findFilial(Map criteria) {
		List<Filial> filiais = filialService.findLookup(criteria);
		if (filiais != null) {
			List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();
			for (Filial filial : filiais) {
				Map<String, Object> mapFilial = new HashMap<String, Object>();
				mapFilial.put("sgFilial", filial.getSgFilial());
				mapFilial.put("idFilial", filial.getIdFilial());
				mapFilial.put("nmFantasia", filial.getPessoa().getNmFantasia());
				result.add(mapFilial);
			}
			return result;
		}
		return null;
    }

	public List findCliente(Map criteria) {
		Map<String, Object> pessoa = new HashMap<String, Object>();
		pessoa.put("nrIdentificacao", criteria.remove("nrIdentificacao"));
		pessoa.put("nmFantasia", criteria.remove("nmFantasia"));
		criteria.put("pessoa", pessoa);
	    List<Cliente> clientes = clienteService.findLookup(criteria);
		if (clientes != null && !clientes.isEmpty()) {
			List<Map<String, Object>> result = new ArrayList<Map<String,Object>>();
			for(Cliente cliente : clientes) {
				Map<String, Object> mapCliente = new HashMap<String, Object>();
				mapCliente.put("idCliente",cliente.getIdCliente());
				mapCliente.put("nmPessoa", cliente.getPessoa().getNmPessoa());
				// já vem formatado do clienteService.
				mapCliente.put("nrIdentificacao", cliente.getPessoa().getNrIdentificacao());
				mapCliente.put("nmFantasia", cliente.getPessoa().getNmFantasia());
				mapCliente.put("nrConta", cliente.getNrConta());
				result.add(mapCliente);
			}
			return result;
		}
		return null;
	}

	public List findTpSituacaoConhecimento(final Map criteria) {
		List result = new ArrayList();
		List tpSituacoes = domainValueService.findDomainValues("DM_STATUS_CONHECIMENTO", Boolean.TRUE);
		
		boolean emitePreConhecimentos = false;
		if(criteria.get("emitePreConhecimentos") != null){
			emitePreConhecimentos = Boolean.parseBoolean( criteria.get("emitePreConhecimentos").toString() );
		}
		
		Map situacao;
		for (Iterator iter = tpSituacoes.iterator(); iter.hasNext();) {
			situacao = new HashMap();
			DomainValue domainValue = (DomainValue) iter.next();
			
			if(emitePreConhecimentos){
				situacao.put("tpSituacaoConhecimento", domainValue.getValue());
				situacao.put("descriptionTpSituacaoConhecimento", domainValue.getDescription());
				result.add(situacao);
				
			} else if(!"P".equalsIgnoreCase(domainValue.getValue())) {
				situacao.put("tpSituacaoConhecimento", domainValue.getValue());
				situacao.put("descriptionTpSituacaoConhecimento", domainValue.getDescription());
				result.add(situacao);
			}
		}
		return result;
	}

	public Integer getRowCountConhecimento(Map criteria) {
		return getConhecimentoService().getRowCountConhecimento(createFindCriteria(criteria));
	}

	public ResultSetPage findConhecimentoPaginated(Map criteria) {
		/** Busca Registros */
		ResultSetPage rsp = getConhecimentoService().findConhecimentoPaginated(createFindCriteria(criteria));
		List result = AliasToNestedMapResultTransformer.getInstance().transformListResult(rsp.getList());
		String nrDocumentoServico = null;
		String tpDocumentoServico = null;

		/** Formata nrDocumentos */
		for (Iterator it = result.iterator(); it.hasNext();) {
			Map conhecimento = (Map) it.next();

			tpDocumentoServico = (String) ((Map) conhecimento.get("tpDocumentoServico")).get("value");
			
			conhecimento.put("tpDocumentoServico", tpDocumentoServico);
			
			if(ConstantesExpedicao.CONHECIMENTO_NACIONAL.equals(tpDocumentoServico)||ConstantesExpedicao.CONHECIMENTO_ELETRONICO.equals(tpDocumentoServico)) {
				nrDocumentoServico = ConhecimentoUtils.formatConhecimento((String) conhecimento.get("sgFilialOrigem"), (Long) conhecimento.get("nrConhecimento"), (Integer) conhecimento.get("dvConhecimento"));
			} else if(ConstantesExpedicao.NOTA_FISCAL_TRANSPORTE.equals(tpDocumentoServico) || ConstantesExpedicao.NOTA_FISCAL_TRANSPORTE_ELETRONICA.equals(tpDocumentoServico)) {
				nrDocumentoServico = ConhecimentoUtils.formatNotaFiscalServico((Long) conhecimento.get("nrConhecimento"));
			}
			
			conhecimento.put("idFilial", conhecimento.get("idFilialOrigem"));
			conhecimento.put("sgFilial", conhecimento.get("sgFilialOrigem"));
			
			Map filialOrigem = (Map) conhecimento.get("filialByIdFilialOrigem");
			Map pessoaFilialOrigem = (Map) filialOrigem.get("pessoa");
			conhecimento.put("nmFantasia", pessoaFilialOrigem.get("nmFantasia"));
			
			conhecimento.put("nrDocumentoServico", nrDocumentoServico);
			conhecimento.put("nrDoctoServico", conhecimento.get("nrConhecimento"));
			
			Map filialDestino = (Map) conhecimento.get("filialByIdFilialDestino");
			Map pessoaFilialDestino = (Map) filialDestino.get("pessoa");
			conhecimento.put("nmFilialDestino", pessoaFilialDestino.get("nmFantasia"));
			
			Map remetente = (Map) conhecimento.remove("clienteByIdClienteRemetente");
			Map pessoaRemetente = (Map) remetente.get("pessoa");
			conhecimento.put("nmPessoaClienteRemetente", pessoaRemetente.get("nmPessoa"));
			conhecimento.put("nrIdentificacaoRemetente", FormatUtils.formatIdentificacao(pessoaRemetente));
			conhecimento.put("idPessoaRemetente", pessoaRemetente.get("idPessoa"));
			
			Map destinatario = (Map) conhecimento.remove("clienteByIdClienteDestinatario");
			Map pessoaDestinatario = (Map) destinatario.get("pessoa");
			conhecimento.put("nmPessoaClienteDestinatario", pessoaDestinatario.get("nmPessoa"));
			conhecimento.put("nrIdentificacaoDestinatario", FormatUtils.formatIdentificacao(pessoaDestinatario));
			conhecimento.put("idPessoaDestinatario", pessoaDestinatario.get("idPessoa"));
		}
		rsp.setList(result);
		return rsp;
	}
	
	public TypedFlatMap findFilialById(Long idFilial) {
		Filial filial = filialService.findById(idFilial);
		TypedFlatMap result = new TypedFlatMap();		
		result.put("filial.sgFilial", filial.getSgFilial());
		result.put("filial.pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
		return result;
	}
	
	/*
	 * Metodos privados
	 */
	
	private TypedFlatMap createFindCriteria(Map criteria) {
		TypedFlatMap tfmCriteria = new TypedFlatMap();
		tfmCriteria.put("dtEmissaoInicial", criteria.get("dtEmissaoInicial"));
		tfmCriteria.put("dtEmissaoFinal", criteria.get("dtEmissaoFinal"));
		tfmCriteria.put("nrConhecimento", criteria.get("nrConhecimento"));
		tfmCriteria.put("nrDocumentoEletronico", criteria.get("nrDocumentoEletronico"));
		tfmCriteria.put("tpSituacaoConhecimento", criteria.get("tpSituacaoConhecimento"));
		tfmCriteria.put("tpDocumentoServico", criteria.get("tpDocumentoServico"));
		tfmCriteria.put("vlTotalDocServico", criteria.get("vlTotalDocServico"));
		tfmCriteria.put("filialByIdFilialOrigem.idFilial", criteria.get("idFilialOrigem"));
		tfmCriteria.put("filialByIdFilialDestino.idFilial", criteria.get("idFilialDestino"));
		tfmCriteria.put("clienteByIdClienteRemetente.idCliente", criteria.get("idClienteRemetente"));
		tfmCriteria.put("clienteByIdClienteDestinatario.idCliente", criteria.get("idClienteDestinatario"));
		tfmCriteria.put("tpConhecimento", criteria.get("tpConhecimento"));
		tfmCriteria.put("tpConhecimentoIn", criteria.get("tpConhecimentoIn"));
		tfmCriteria.put("nrNotaFiscal", criteria.get("nrNotaFiscal"));
    	tfmCriteria.put("_currentPage", criteria.get("_currentPage"));
    	tfmCriteria.put("_pageSize", criteria.get("_pageSize"));
    	tfmCriteria.put("_order", criteria.get("_order"));
    	return tfmCriteria;
	}
	
	/*
	 * Getters e setters
	 */
	
	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}
	
	public ConhecimentoService getConhecimentoService() {
		return (ConhecimentoService)defaultService;
	}
	
	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.defaultService = conhecimentoService;
	}
	
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}
	
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

}