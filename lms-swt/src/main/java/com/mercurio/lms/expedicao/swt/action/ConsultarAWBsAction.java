package com.mercurio.lms.expedicao.swt.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.joda.time.YearMonthDay;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Moeda;
import com.mercurio.lms.expedicao.model.service.AwbService;
import com.mercurio.lms.expedicao.util.AwbUtils;
import com.mercurio.lms.municipios.model.Empresa;
import com.mercurio.lms.municipios.model.service.AeroportoService;
import com.mercurio.lms.municipios.model.service.EmpresaService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.expedicao.swt.consultarAWBsAction"
 */

public class ConsultarAWBsAction extends CrudAction {
	
	private AeroportoService aeroportoService;
	private EmpresaService empresaService;
	
	/**
	 * Utilizado pela combo de cias aereas.
	 * 
	 * @param criteria
	 * @return
	 */
	public List findCiaAerea(Map criteria) {
		List empresas = empresaService.findCiaAerea(criteria);
		if (empresas != null && !empresas.isEmpty()) {
			List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();
			for (int i = 0; i < empresas.size(); i++) {
				Empresa empresa = (Empresa) empresas.get(i);
				Map<String, Object> e = new HashMap<String, Object>();
				e.put("idEmpresa", empresa.getIdEmpresa());
				e.put("nmPessoa", empresa.getPessoa().getNmPessoa());
				result.add(e);
			}
			return result;
		}
		return null;
	}
	
	/**
	 * Lookups de aeroporto.
	 * 
	 * @param criteria
	 * @return
	 */
	public List findAeroporto(Map criteria) {
		List result = aeroportoService.findLookupAeroporto(criteria);
		if (result != null && !result.isEmpty()) {
			for (int i = 0; i < result.size(); i++) {
				Map aeroporto = (Map) result.get(i);
				Map pessoa = (Map) aeroporto.remove("pessoa");
				aeroporto.put("nmPessoa", pessoa.get("nmPessoa"));
			}
		}
		return result;
	}
	
	/**
	 * Find paginated padrão.
	 * 
	 * @param criteria
	 * @return
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public ResultSetPage findPaginated(Map criteria) {
		ResultSetPage rsp = getAwbService().findPaginated(prepareCriteria(criteria));
		List awbs = rsp.getList();
		if (awbs != null && !awbs.isEmpty()) {
			List<Map<String, Object>> results = new ArrayList<Map<String, Object>>(awbs.size());
			for (int i = 0; i < awbs.size(); i++) {
				TypedFlatMap awb = (TypedFlatMap) awbs.get(i);
				Map<String, Object> result = new HashMap<String, Object>();

				String 	sgEmpresa = awb.getString("ciaFilialMercurio.empresa.sgEmpresa"); 
				
				Moeda moeda = new Moeda();
				moeda.setSgMoeda(awb.getString("moeda.sgMoeda"));
				moeda.setDsSimbolo(awb.getString("moeda.dsSimbolo"));
				
				String nrAwbFormatado = awb.getLong("idAwb").toString();
				String sNrAwb = awb.getLong("idAwb").toString();
				if ("E".equals(awb.getString("tpStatusAwb.value"))) {
					String 	dsSerie = awb.getString("dsSerieAwb");
					Long 	nrAwb = awb.getLong("nrAwb");
					Integer dvAwb = awb.getInteger("dvAwb");
					nrAwbFormatado = sgEmpresa + " " + AwbUtils.getNrAwbFormated(dsSerie, nrAwb, dvAwb);
					sNrAwb = dsSerie + nrAwb + dvAwb;
				}
					
				String siglaDescricao = FormatUtils.concatSiglaSimboloMoeda(moeda);
				
				result.put("idEmpresa", awb.get("ciaFilialMercurio.empresa.idEmpresa"));
				result.put("idCiaAereaAwb", awb.get("ciaFilialMercurio.empresa.idEmpresa"));
				result.put("nmPessoa", awb.get("ciaFilialMercurio.empresa.pessoa.nmPessoa"));
				result.put("nrAwbFormatado", nrAwbFormatado);
				result.put("nrAwb", sNrAwb);
				result.put("tpStatusAwb", awb.get("tpStatusAwb.description"));
				result.put("sgAeroportoOrigem", awb.get("aeroportoByIdAeroportoOrigem.sgAeroporto"));
				result.put("sgAeroportoDestino", awb.get("aeroportoByIdAeroportoDestino.sgAeroporto"));
				result.put("dhEmissao", awb.getDateTime("dhEmissao"));
				result.put("siglaDescricao", siglaDescricao);
				result.put("valorCalculado", awb.get("vlFreteCalculado"));
				result.put("idAwb", awb.getLong("idAwb"));
				result.put("dsSerieAwb", awb.getString("dsSerieAwb"));
				result.put("nrFaturaAwb", awb.getLong("nrFaturaAwb"));
				result.put("tpAwb", awb.get("tpAwb.description"));
				result.put("sgEmpresa", awb.get("ciaFilialMercurio.empresa.sgEmpresa"));
				
				results.add(result);
			}
			rsp.setList(results);
		}

		return rsp;
	}

	public Integer getRowCount(Map criteria) {
		return getAwbService().getRowCount(prepareCriteria(criteria));
	}
	
	public Map getDadosDefault() {
		Map<String, YearMonthDay> result = new HashMap<String, YearMonthDay>();
		result.put("dataInicial", JTDateTimeUtils.getDataAtual().minusDays(10));
		result.put("dataFinal", JTDateTimeUtils.getDataAtual());
		return result;
	}
	
	/*
	 * METODOS PRIVADOS
	 */
	private TypedFlatMap prepareCriteria(Map criteria) {
		TypedFlatMap result = new TypedFlatMap();
		
		result.put("ciaFilialMercurio.empresa.idEmpresa", criteria.get("idEmpresa"));
		if (criteria.get("nrAwb") != null) {
			result.put("nrAwb", ""+criteria.get("nrAwb"));
		}
		if (criteria.get("dsSerieAwb") != null) {
			result.put("dsSerieAwb", ""+criteria.get("dsSerieAwb"));
		}
		result.put("aeroportoByIdAeroportoOrigem.idAeroporto", criteria.get("idAeroportoOrigem"));
		result.put("aeroportoByIdAeroportoDestino.idAeroporto", criteria.get("idAeroportoDestino"));
		result.put("dataInicial", criteria.get("dataInicial"));
		result.put("dataFinal", criteria.get("dataFinal"));
		result.put("tpStatusAwb", criteria.get("tpStatusAwb"));
		result.put("tpAwb", criteria.get("tpStatusAwb"));
		result.put("_currentPage", criteria.get("_currentPage"));
		result.put("_order", criteria.get("_order"));
		result.put("_pageSize", criteria.get("_pageSize"));
		
		return result;
	}
	
	
	/*
	 * GETTERS E SETTERS
	 */

	/**
	 * @param aeroportoService The aeroportoService to set.
	 */
	public void setAeroportoService(AeroportoService aeroportoService) {
		this.aeroportoService = aeroportoService;
	}
	
	/**
	 * @param serviceService The service to set.
	 */
	public void setService(AwbService serviceService) {
		super.defaultService = serviceService;
	}
	
	public AwbService getAwbService() {
		return (AwbService) super.defaultService;
	}

	/**
	 * @param empresaService The empresaService to set.
	 */
	public void setEmpresaService(EmpresaService empresaService) {
		this.empresaService = empresaService;
	}
}
