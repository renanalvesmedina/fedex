package com.mercurio.lms.expedicao.swt.action;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.session.SessionContext;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.expedicao.model.Balanca;
import com.mercurio.lms.expedicao.model.Impressora;
import com.mercurio.lms.expedicao.model.service.ImpressoraService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.session.SessionKey;
import com.mercurio.lms.util.session.SessionUtils;
/**
 * Generated by: ADSM ActionGenerator
 *
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.expedicao.swt.manterImpressorasAction"
 */

public class ManterImpressorasAction extends CrudAction {
	private FilialService filialService;
	
	public void removeById(java.lang.Long id) {
		((ImpressoraService)defaultService).removeById(id);
	}

	public ResultSetPage findPaginated(Map criteria) {
		
		Map<String, Object> filial = new HashMap<String, Object>();
    	filial.put("idFilial", criteria.get("idFilial"));
    	criteria.remove("idFilial");
    	criteria.put("filial", filial);
		ResultSetPage rsp = defaultService.findPaginated(criteria);
		if (rsp != null) {
			List<Impressora> controles = rsp.getList();
			List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();
			if (controles != null) {
				for (Impressora controle : controles) {
					Map<String, Object> mapControle = new HashMap<String, Object>();
					
					mapControle.put("idImpressora", controle.getIdImpressora());
					mapControle.put("dsCheckIn", controle.getDsCheckIn());
					mapControle.put("dsLocalizacao", controle.getDsLocalizacao());
					mapControle.put("tpImpressora", controle.getTpImpressora());
					mapControle.put("dsModelo", controle.getDsModelo());
					mapControle.put("dsFabricante", controle.getDsFabricante());
					mapControle.put("nrPort", controle.getNrPort());
					if(controle.getNrIp() != null) {
						mapControle.put("nrIp", FormatUtils.convertNumberToIp(BigInteger.valueOf(controle.getNrIp())));
					}
					mapControle.put("sgFilial", controle.getFilial().getSgFilial());
					mapControle.put("idFilial", controle.getFilial().getIdFilial());
					mapControle.put("blEtiquetaNova", controle.getBlEtiquetaNova());
					
					result.add(mapControle);
				}
				rsp.setList(result);
			}
		}
		return rsp;
	}
	
	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		((ImpressoraService)defaultService).removeByIds(ids);
	}

	public Map findById(java.lang.Long id) {
		Map<String, Object> result = new HashMap<String, Object>();
		Impressora impressora = ((ImpressoraService)defaultService).findById(id);
		
		result.put("idImpressora", impressora.getIdImpressora());
		result.put("dsCheckIn", impressora.getDsCheckIn());
		result.put("dsLocalizacao", impressora.getDsLocalizacao());
		result.put("tpImpressora", impressora.getTpImpressora().getValue());
		result.put("dsModelo", impressora.getDsModelo());
		result.put("dsFabricante", impressora.getDsFabricante());
		if(impressora.getNrIp() != null) {
			result.put("nrPort", impressora.getNrPort());
			result.put("nrIp", FormatUtils.convertNumberToIp(BigInteger.valueOf(impressora.getNrIp() != null ? impressora.getNrIp() : 0)));
		}
		result.put("sgFilial", impressora.getFilial().getSgFilial());
		result.put("idFilial", impressora.getFilial().getIdFilial());
		result.put("nmFantasia", impressora.getFilial().getSiglaNomeFilial());
		result.put("blEtiquetaNova", impressora.getBlEtiquetaNova());
		if (impressora.getBalanca() != null) {
			result.put("dsBalanca", impressora.getBalanca().getDsBalanca());
			result.put("idBalanca", impressora.getBalanca().getIdBalanca());
		}
		
		return result;
	}

	public Map store(Map data) {
		Impressora bean = new Impressora();
		
		Filial filial = new Filial();
		filial.setIdFilial((Long)data.get("idFilial"));
		bean.setFilial(filial);
		
		if (data.get("idBalanca") != null){
			Balanca balanca = new Balanca();
			balanca.setIdBalanca((Long)data.get("idBalanca"));
			bean.setBalanca(balanca);
		}
		
		bean.setIdImpressora((Long) data.get("idImpressora"));
		bean.setDsCheckIn((String)data.get("dsCheckIn"));
		bean.setDsFabricante((String)data.get("dsFabricante"));
		bean.setDsLocalizacao((String)data.get("dsLocalizacao"));
		bean.setDsModelo((String)data.get("dsModelo"));
		bean.setTpImpressora(new DomainValue((String) data.get("tpImpressora")));

		if(data.get("nrIp") != null) {
			Long nrIp = FormatUtils.convertIpToNumber((String) data.get("nrIp")).longValue();
			if(nrIp != null && nrIp > 0) {
				List<Impressora> impressoras = ((ImpressoraService)defaultService).findValidateIpInformadoImpressora(bean.getIdImpressora(), nrIp);
				if(impressoras != null && impressoras.size() > 0) {
					throw new BusinessException("LMS-04231");
				}
			}
			bean.setNrIp(nrIp);
			bean.setNrPort((Integer)data.get("nrPort"));
		}
		Long idImpressora = (Long) ((ImpressoraService)defaultService).store(bean);
		Map<String, Object> result = new HashMap<String, Object>();
		result.put("idImpressora", idImpressora);
		return result;
	}

	public FilialService getFilialService(){
		return this.filialService;
	}

	public void setFilialService(FilialService filialService){
		this.filialService = filialService;
	}

	/**
	 * Metodo que chama o método da lookup respectivo na service de filial
	 * @param criteria
	 * @return
	 */
	public List filialFindLookup(Map criteria) {
		List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();
		List<Filial> filiais = filialService.findLookup(criteria);
		if (filiais != null) {
			for (Filial filial : filiais) {
				Map<String, Object> mapFilial = new HashMap<String, Object>();
				mapFilial.put("sgFilial", filial.getSgFilial());
				mapFilial.put("idFilial", filial.getIdFilial());
				mapFilial.put("nmFantasia", filial.getPessoa().getNmFantasia());
				result.add(mapFilial);
			}
		}
		return result;
	}
	
	public Map findDadosSessao() {
		Map<String, Object> retorno = new HashMap<String, Object>();
		Filial filial = SessionUtils.getFilialSessao();
		retorno.put("sgFilial", filial.getSgFilial());
		retorno.put("idFilial", filial.getIdFilial());
		retorno.put("nmFantasia", filial.getPessoa().getNmFantasia());
		return retorno;
	}

	/**
	 * Função que retorna um mapa com os dados da filial vinculada ao 
	 * usuario que esta logado
	 * 
	 * @return
	 */
	public TypedFlatMap filialFindByUser() {
		Filial filial = null;
		TypedFlatMap retorno = new TypedFlatMap();
		filial = (Filial) SessionContext.get(SessionKey.FILIAL_KEY);
		if(filial != null) {
			retorno.put("idFilial", filial.getIdFilial());
			retorno.put("sgFilial", filial.getSgFilial());
			retorno.put("nmFilial", filial.getPessoa().getNmFantasia());
			retorno.put("empresa.tpEmpresa", filial.getEmpresa().getTpEmpresa().getValue());
		}
		return retorno;
	}

	public void setImpressoraService(ImpressoraService impressoraService) {
		this.defaultService = impressoraService;
	}

}
