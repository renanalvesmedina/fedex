package com.mercurio.lms.expedicao.swt.action;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.core.util.ReflectionUtils;
import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.report.ReportExecutionManager;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.expedicao.report.EmitirRelatorioMonitoramentoDocEletronicoService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.vendas.model.service.ClienteService;


/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.expedicao.swt.emitirRelatorioMonitoramentoDocEletronicoAction"
 */
public class EmitirRelatorioMonitoramentoDocEletronicoAction {
	
	private FilialService filialService;
	private ClienteService clienteService;
	private EmitirRelatorioMonitoramentoDocEletronicoService emitirRelatorioMonitoramentoDocEletronicoService;
	private ReportExecutionManager reportExecutionManager;
	
	/**
	 * @return the filialService
	 */
	public FilialService getFilialService() {
		return filialService;
	}

	/**
	 * @param filialService the filialService to set
	 */
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	/**
	 * @return the clienteService
	 */
	public ClienteService getClienteService() {
		return clienteService;
	}

	/**
	 * @param clienteService the clienteService to set
	 */
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}

	/**
	 * @return the emitirRelatorioMonitoramentoDocEletronicoService
	 */
	public EmitirRelatorioMonitoramentoDocEletronicoService getEmitirRelatorioMonitoramentoDocEletronicoService() {
		return emitirRelatorioMonitoramentoDocEletronicoService;
	}

	/**
	 * @param emitirRelatorioMonitoramentoDocEletronicoService the emitirRelatorioMonitoramentoDocEletronicoService to set
	 */
	public void setEmitirRelatorioMonitoramentoDocEletronicoService(
			EmitirRelatorioMonitoramentoDocEletronicoService emitirRelatorioMonitoramentoDocEletronicoService) {
		this.emitirRelatorioMonitoramentoDocEletronicoService = emitirRelatorioMonitoramentoDocEletronicoService;
	}

	/**
	 * @param reportExecutionManager the reportExecutionManager to set
	 */
	public void setReportExecutionManager(
			ReportExecutionManager reportExecutionManager) {
		this.reportExecutionManager = reportExecutionManager;
	}
	
	public String execute(Map filters) throws Exception {
		TypedFlatMap tfm = new TypedFlatMap();
		ReflectionUtils.flatMap(tfm, filters);
		
		File file = emitirRelatorioMonitoramentoDocEletronicoService.executeReport(tfm);
		if( file == null ){
			throw new BusinessException("LMS-3736");
		}
		return reportExecutionManager.generateReportLocator(file);
	}	

    public List<Map<String, Object>> findLookupFilial(Map criteria) {
    	if (criteria.get("idEmpresa") != null) {
    		Map<String, Object> empresa = new HashMap<String, Object>();
    		empresa.put("idEmpresa", criteria.get("idEmpresa"));
    		criteria.put("empresa", empresa);
    	}
		List<Filial> filiais = filialService.findLookup(criteria);
		if (filiais != null) {
			List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();
			for (Filial filial : filiais) {
				Map<String, Object> mapFilial = new HashMap<String, Object>();
				mapFilial.put("sgFilial", filial.getSgFilial());
				mapFilial.put("idFilial", filial.getIdFilial());
				mapFilial.put("nmFantasia", filial.getPessoa().getNmFantasia());
				result.add(mapFilial);
			}
			return result;
		}
		return null;
    }
    
	public List<Map<String, Object>> findLookupCliente(Map criteria) {
		List<Map<String, Object>> clientes = clienteService.findClienteByNrIdentificacao((String) criteria.get("nrIdentificacao"));
		if (clientes != null) {
			for (Map cliente : clientes) {
				cliente.remove("tpCliente");
				Map pessoa = (Map) cliente.remove("pessoa");
				if (pessoa != null) {
					cliente.put("nmPessoa", pessoa.get("nmPessoa"));
					cliente.put("nrIdentificacao", pessoa.remove("nrIdentificacaoFormatado"));
				}
			}
		}
		return clientes;
	}	
}
