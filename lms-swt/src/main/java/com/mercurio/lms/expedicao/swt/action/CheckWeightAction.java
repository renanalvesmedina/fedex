package com.mercurio.lms.expedicao.swt.action;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.PaginatedQuery;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.service.ConteudoParametroFilialService;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteService;
import com.mercurio.lms.expedicao.DoctoServicoValidateFacade;
import com.mercurio.lms.expedicao.model.*;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.model.service.ImpressoraService;
import com.mercurio.lms.expedicao.model.service.VolumeNotaFiscalService;
import com.mercurio.lms.expedicao.util.VolumeNotaFiscalHelper;
import com.mercurio.lms.gm.model.service.VolumeService;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.sim.model.service.EventoVolumeService;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;
import org.apache.commons.lang.BooleanUtils;
import org.joda.time.DateTime;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Generated by: ADSM ActionGenerator
 * <p>
 * Não inserir documentação após ou remover a tag do XDoclet a seguir. O valor
 * do <code>id</code> informado abaixo deve ser utilizado para referenciar este
 * serviço.
 *
 * @spring.bean id="lms.expedicao.swt.checkWeightAction"
 */
public class CheckWeightAction extends CrudAction {

    private static final String ID_DOCTO_SERVICO = "idDoctoServico";
    private static final String NR_VOLUME_COLETA = "nrVolumeColeta";
    private static final String ID_CONHECIMENTO = "idConhecimento";
    private static final String NR_SEQUENCIA = "nrSequencia";
    private static final String ID_CLIENTE = "idCliente";
    private static final String NR_NOTA_FISCAL = "nrNotaFiscal";
    private static final String NR_CONHECIMENTO = "nrConhecimento";
    private static final String ID_VOLUME_NOTA_FISCAL = "idVolumeNotaFiscal";
    private static final String ID_NOTA_FISCAL_CONHECIMENTO = "idNotaFiscalConhecimento";
    private static final String PS_AFERIDO = "psAferido";
    private static final String ID_FILIAL_USUARIO = "idFilialUsuario";
    private static final String IS_DIMENSOES_CUBAGEM_OPCIONAL = "isDimensoesCubagemOpcional";
    private static final short CD_EVENTO = (short) 142;

    private VolumeNotaFiscalService volumeNotaFiscalService;
    private MeioTransporteService meioTransporteService;
    private ConhecimentoService conhecimentoService;
    private ImpressoraService impressoraService;
    private FilialService filialService;
    private EventoVolumeService eventoVolumeServie;
    private DoctoServicoValidateFacade doctoServicoValidateFacade;
    private VolumeService volumeService;
    private ConteudoParametroFilialService conteudoParametroFilialService;
    private ConfiguracoesFacade configuracoesFacade;

    public void removeById(java.lang.Long id) {
        ((VolumeNotaFiscalService) defaultService).removeById(id);
    }

    @ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
        ((VolumeNotaFiscalService) defaultService).removeByIds(ids);
    }

    /**
     * Busca LIMITE PESO VOLUME para validação de Pesagem e Emissao de Etiquetas
     *
     * @return
     */
    public Map findLimitePesoVolume() {
        final BigDecimal limitePesoVolume = doctoServicoValidateFacade.findLimitePesoVolume();
        final Map retorno = new TypedFlatMap();
        retorno.put("limitePesoVolume", limitePesoVolume);
        return retorno;
    }

    @SuppressWarnings({"rawtypes", "unchecked"})
    public Map buscarProximoNumeroDocto(Map<String, Object> parameters) {
        Map nrConhMap = new HashMap<String, Object>();

        // Verificar se o volume já tem algum numero de ctrc (se tiver retorna
        // um map com esse numero). Normalmente não cai nesse caso, pois
        // no swt ele já chama o findDadosVolume e só vem nesse método se não
        // tem número de conhecimento, mas pode acontecer que outra
        // máquina já pesou um dos volumes (a máquina atual ainda não sabe que
        // já tem um número de ctrc).
        Map dadosVolumeList = executeFindDadosVolume(parameters);
        List list = (List) dadosVolumeList.get("list");
        Map dadosVolume = (Map) list.get(0);
        if (dadosVolume.get(NR_CONHECIMENTO) != null) {
            nrConhMap.put(NR_CONHECIMENTO, dadosVolume.get(NR_CONHECIMENTO));
            return nrConhMap;
        }

        Long idConhecimento = (Long) parameters.get(ID_DOCTO_SERVICO);
        Conhecimento conhecimento = conhecimentoService.findByIdInitLazyProperties(idConhecimento, false);
        DateTime dhEmissao = JTDateTimeUtils.getDataHoraAtual();

		/* Busca o pr�ximo n�mero de conhecimento e grava nos volumes */
        getVolumeNotaFiscalService().updateNrConhecimentoByPreCT(conhecimento, dhEmissao);

        // Retorna um map somente com o n�mero do conhecimento
        nrConhMap.put(NR_CONHECIMENTO, conhecimento.getNrConhecimento());
        return nrConhMap;
    }

    public Map updateDataById(final Map<String, Object> parameters) {
        return getVolumeNotaFiscalService().updateDataById(parameters);
    }

    public Map store(Map data) {
        VolumeNotaFiscal bean = new VolumeNotaFiscal();

        NotaFiscalConhecimento notaFiscalConhecimento = new NotaFiscalConhecimento();
        notaFiscalConhecimento.setIdNotaFiscalConhecimento((Long) data.get(ID_NOTA_FISCAL_CONHECIMENTO));
        bean.setNotaFiscalConhecimento(notaFiscalConhecimento);

        bean.setIdVolumeNotaFiscal((Long) data.get(ID_VOLUME_NOTA_FISCAL));
        bean.setPsAferido((BigDecimal) data.get(PS_AFERIDO));

        VolumeNotaFiscalHelper.setDimensoes(bean, data);

        Long idVolumeNotaFiscal = (Long) ((VolumeNotaFiscalService) defaultService).store(bean);
        Map<String, Object> result = new HashMap<String, Object>();
        result.put(ID_VOLUME_NOTA_FISCAL, idVolumeNotaFiscal);
        return result;
    }

    public BigDecimal calculaCubagem(TypedFlatMap dimensoes) {
        return volumeNotaFiscalService.calculaCubagem(dimensoes);
    }

    public void setMeioTransporteService(MeioTransporteService meioTransporteService) {
        this.meioTransporteService = meioTransporteService;
    }

    public void setConhecimentoService(ConhecimentoService conhecimentoService) {
        this.conhecimentoService = conhecimentoService;
    }

    public void setImpressoraService(ImpressoraService impressoraService) {
        this.impressoraService = impressoraService;
    }

    public VolumeNotaFiscalService getVolumeNotaFiscalService() {
        return this.volumeNotaFiscalService;
    }

    public void setVolumeNotaFiscalService(VolumeNotaFiscalService volumeNotaFiscalService) {
        this.volumeNotaFiscalService = volumeNotaFiscalService;
    }

    public List findAll() {
        return volumeNotaFiscalService.findAll();
    }

    public Map executeFindDadosVolumes(Map criteria) {
        Long idFilialUsuario = SessionUtils.getFilialSessao().getIdFilial();
        criteria.put(ID_FILIAL_USUARIO, idFilialUsuario);

        List list = volumeNotaFiscalService.executeFindDadosVolumes(new PaginatedQuery(criteria), String.valueOf(criteria.get(NR_VOLUME_COLETA)));
        Map map = new HashMap();
        map.put("list", list);

        return map;
    }

    public Map executeFindDadosVolume(Map criteria) {
        Long idFilialUsuario = SessionUtils.getFilialSessao().getIdFilial();
        criteria.put(ID_FILIAL_USUARIO, idFilialUsuario);
        PaginatedQuery paginatedQuery = new PaginatedQuery(criteria);

        boolean isImprimeEtiquetaReembarque = volumeNotaFiscalService.validateImprimeEtiquetaReembarque(SessionUtils.getFilialSessao().getIdFilial(), String.valueOf(paginatedQuery.getCriteria().get(NR_VOLUME_COLETA)));
        List list = volumeNotaFiscalService.executeFindDadosVolume(paginatedQuery, isImprimeEtiquetaReembarque, String.valueOf(criteria.get("nrVolumeColeta")));

        Map map = new HashMap();
        map.put("list", list);
        return map;
    }

    public Map findInitValues(Map criteria) {
        Map<String, Object> result = new HashMap<>();

        result.putAll(findImpressora(criteria));

        Long idFilial = SessionUtils.getFilialSessao().getIdFilial();
        result.put("vlParamImpDimPesagem", conteudoParametroFilialService
                .findConteudoByNomeParametro(idFilial, "IMP_DIM_PESAGEM", false));

        Object etiqueta = volumeNotaFiscalService.buscarParametroNovaEtiqueta(idFilial);
        result.put("blEtiquetaQRCode", etiqueta);

        return result;
    }

    public Map findImpressora(Map criteria) {
        filialService.validateExisteCodFilial(SessionUtils.getFilialSessao());

        Long idFilial = SessionUtils.getFilialSessao().getIdFilial();

        Map dispositivo = impressoraService.findDispositivoComputadorUsuario(idFilial,
                (String) criteria.get("macAdress"), (String) criteria.get("tpImpressora"));
        Impressora impressora = (Impressora) dispositivo.get("impressora");
        Map map = new HashMap();
        map.put("impressora", impressora);
        map.put("blEtiquetaNova", impressora.getBlEtiquetaNova());
        ImpressoraComputador impressoraComputador = (ImpressoraComputador) dispositivo.get("impressoraComputador");
        map.put("blEstacaoAutomatizada",
                impressoraComputador != null ? BooleanUtils.isTrue(impressoraComputador.getBlEstacaoAutomatizada())
                        : false);
        return map;
    }

    public List findLookupMeioTransporte(Map criteria) {
        return meioTransporteService.findLookup(criteria);
    }

    public Map validateBlPesoAferidoByMeioTransporteColeta(Map parameters) {
        String nrFrota = (String) parameters.get("nrFrota");
        Long idFilialUsuario = SessionUtils.getFilialSessao().getIdFilial();
        try {
            conhecimentoService.validateBlPesoAferidoByMeioTransporteColeta(nrFrota, idFilialUsuario,
                    Boolean.FALSE);
        } catch (BusinessException businessException) {
            Map<String, Object> result = new HashMap<String, Object>();
            result.put("exception", businessException);
            return result;
        }
        return parameters;
    }

    public void setFilialService(FilialService filialService) {
        this.filialService = filialService;
    }

    public Map findDadosVolumeReimpressao(Map criteria) {
        Long idFilialUsuario = SessionUtils.getFilialSessao().getIdFilial();
        criteria.put(ID_FILIAL_USUARIO, idFilialUsuario);
        List<Map<String, Object>> list = volumeNotaFiscalService.findDadosVolumeReimpressao(new PaginatedQuery(criteria));
        Object etiqueta = volumeNotaFiscalService.buscarParametroNovaEtiqueta(idFilialUsuario);
        for (Map<String, Object> map : list) {
            eventoVolumeServie.generateEventoVolume((Long) map.get(ID_VOLUME_NOTA_FISCAL), CD_EVENTO, "LM");
            map.put("blEtiquetaQRCode", etiqueta);
        }
        Map map = new HashMap();
        map.put("list", list);
        return map;
    }

    public List<Long> findDadosVolumesByCTRC(Map criteria) {
        if (("0000").equals(criteria.get(NR_SEQUENCIA).toString())) {
            return volumeNotaFiscalService.findVolumeByIdConhecimentoAndNrSequencia(
                    Long.valueOf(criteria.get(ID_CONHECIMENTO).toString()), null);

        } else {
            return volumeNotaFiscalService.findVolumeByIdConhecimentoAndNrSequencia(
                    Long.valueOf(criteria.get(ID_CONHECIMENTO).toString()),
                    Integer.valueOf(criteria.get(NR_SEQUENCIA).toString()));
        }
    }

    public List<Long> findVolumeByClienteNotaFiscalSequenciaVol(Map criteria) {
        if (("0000").equals(criteria.get(NR_SEQUENCIA).toString())) {
            return volumeNotaFiscalService.findVolumeByClienteNotaFiscalSequenciaVol(
                    Long.valueOf(criteria.get(ID_CLIENTE).toString()),
                    Integer.valueOf(criteria.get(NR_NOTA_FISCAL).toString()), null);

        } else {
            return volumeNotaFiscalService.findVolumeByClienteNotaFiscalSequenciaVol(
                    Long.valueOf(criteria.get(ID_CLIENTE).toString()),
                    Integer.valueOf(criteria.get(NR_NOTA_FISCAL).toString()),
                    Integer.valueOf(criteria.get(NR_SEQUENCIA).toString()));
        }
    }

    public Map<String, Object> findTpDocumentoServicoByCodBarEmbarque(Map<String, Object> criteria) {
        Conhecimento c = conhecimentoService.findTpDocumentoServicoByCodBarEmbarque(criteria);

        Map<String, Object> map = new HashMap<String, Object>();
        map.put("tpDocumentoServico", c.getTpDocumentoServico().getValue());

        return map;
    }

    public Map<String, Object> validateDimensaoOpcionalByFatorDensidade(Map<String, Object> map) {
        Map<String, Object> retorno = new HashMap<String, Object>();
        List list = volumeNotaFiscalService.findByNrVolumeColeta((String) map.get(NR_VOLUME_COLETA));

        if (list != null && !list.isEmpty()) {
            VolumeNotaFiscal volumeNotaFiscal = (VolumeNotaFiscal) list.get(0);

            boolean blDimensoesCubagemTpCliente = volumeNotaFiscalService.validateDimensaoCubagemPorTpCliente(volumeNotaFiscal.getIdVolumeNotaFiscal());
            retorno.put("blDimensoesCubagemTpCliente", blDimensoesCubagemTpCliente);

            boolean isDimensoesCubagemOpcional = volumeNotaFiscalService.validateDimensaoOpcionalByFatorDensidade(volumeNotaFiscal.getIdVolumeNotaFiscal());
            retorno.put(IS_DIMENSOES_CUBAGEM_OPCIONAL, isDimensoesCubagemOpcional);
        }
        return retorno;
    }

    public void setEventoVolumeServie(EventoVolumeService eventoVolumeServie) {
        this.eventoVolumeServie = eventoVolumeServie;
    }

    public EventoVolumeService getEventoVolumeServie() {
        return eventoVolumeServie;
    }

    public void setDoctoServicoValidateFacade(DoctoServicoValidateFacade doctoServicoValidateFacade) {
        this.doctoServicoValidateFacade = doctoServicoValidateFacade;
    }

    public VolumeService getVolumeService() {
        return volumeService;
    }

    public void setVolumeService(VolumeService volumeService) {
        this.volumeService = volumeService;
    }

    public void setConteudoParametroFilialService(ConteudoParametroFilialService conteudoParametroFilialService) {
        this.conteudoParametroFilialService = conteudoParametroFilialService;
    }

	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}
}