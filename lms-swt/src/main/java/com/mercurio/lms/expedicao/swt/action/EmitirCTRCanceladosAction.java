package com.mercurio.lms.expedicao.swt.action;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.MapUtils;
import org.joda.time.DateTime;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.service.ParametroGeralService;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.model.service.MonitoramentoDescargaService;
import com.mercurio.lms.expedicao.report.EmitirCTRCanceladosService;
import com.mercurio.lms.expedicao.util.ConstantesExpedicao;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 * 
 * Não inserir documentação após ou remover a tag do XDoclet a seguir. O valor
 * do <code>id</code> informado abaixo deve ser utilizado para referenciar
 * este serviço.
 * 
 * @spring.bean id="lms.expedicao.swt.emitirCTRCanceladosAction"
 */

public class EmitirCTRCanceladosAction extends CrudAction {
	private EmitirCTRCanceladosService emitirCTRCanceladosService;
	private MonitoramentoDescargaService monitoramentoDescargaService;
	private ConhecimentoService conhecimentoService;
	private ParametroGeralService parametroGeralService;
	
	public List findDescargasByFilialUsuarioLogado(Map<String, Object> criteria) {
		
		Long idFilial = SessionUtils.getFilialSessao().getIdFilial();
		Long idMonitoramentoDescarga = (Long) criteria.get("idMonitoramentoDescarga");
		Long idMeioTransporte = (Long) criteria.get("idMeioTransporte");
		String nrFrota = MapUtils.getString(criteria, "nrFrota");
		nrFrota = nrFrota != null ? nrFrota.toUpperCase() : nrFrota;
		String nrPlaca = (String) criteria.get("nrPlaca");
		nrPlaca = nrPlaca != null ? nrPlaca.toUpperCase() : nrPlaca;
		String tpOperacao = (String) criteria.get("tpOperacaoEmissao");
		
		Integer tmpExc = ((BigDecimal) parametroGeralService.findConteudoByNomeParametro("TMP_MONIT_DESC_COL_EXC", false)).intValue();
		
		DateTime sysDate = JTDateTimeUtils.getDataHoraAtual();
		DateTime dhTmpExc = sysDate.minusHours(tmpExc);
		
		Boolean isCancelamento = true;
		
		List result = monitoramentoDescargaService.findDescargasFinalizadas(idFilial, idMeioTransporte, idMonitoramentoDescarga, nrPlaca, nrFrota, tpOperacao, dhTmpExc, isCancelamento);
		if(result == null || result.size() <= 0) {
			if(ConstantesExpedicao.CD_EMISSAO.equals(tpOperacao)) {
				throw new BusinessException("LMS-04220");
			} else {
				throw new BusinessException("LMS-04251");
			}
		}
		return result;
	}

	public Map findFilialSession() {
		Map result = new HashMap();
		result.put("idFilial", SessionUtils.getFilialSessao().getIdFilial());
		result.put("sgFilial", SessionUtils.getFilialSessao().getSgFilial());

		return result;
	}

	public Map emitirConhecimentosCancelados(TypedFlatMap parameters) {
		String tpOperacaoEmissao = parameters.getString("tpOperacaoEmissao");
		Long idMonitoramentoDescarga = null;
		Long nrConhecimento = null;
		if(tpOperacaoEmissao != null && ConstantesExpedicao.CD_EMISSAO.equals(tpOperacaoEmissao)) {
			idMonitoramentoDescarga = parameters.getLong("idMonitoramentoDescarga");
			nrConhecimento = parameters.getLong("nrConhecimento");
		} else {
			idMonitoramentoDescarga = parameters.getLong("idMonitoramentoDescargaReemissao");
			nrConhecimento = parameters.getLong("nrConhecimentoReemissao");
		}
		Map ctrcs = emitirCTRCanceladosService.executeEmitirCTRCsCancelados(
				parameters.getString("tpOperacaoEmissao"),
				parameters.getString("tpOpcaoEmissao"),
				SessionUtils.getFilialSessao().getIdFilial(),
				parameters.getLong("nrProximoFormulario"),
				nrConhecimento,
				parameters.getString("dsMacAddress"),
				idMonitoramentoDescarga,
				(List<Map>) parameters.get("ctrcsDuplicados")
			);
		return ctrcs;
	}

	public List findConhecimentosCanceladosEmitir(TypedFlatMap parameters) {
		String tpOperacaoEmissao = parameters.getString("tpOperacaoEmissao");
		Long idMonitoramentoDescarga = null;
		Long nrConhecimento = null;
		if(tpOperacaoEmissao != null && ConstantesExpedicao.CD_EMISSAO.equals(tpOperacaoEmissao)) {
			idMonitoramentoDescarga = parameters.getLong("idMonitoramentoDescarga");
			nrConhecimento = parameters.getLong("nrConhecimento");
		} else {
			idMonitoramentoDescarga = parameters.getLong("idMonitoramentoDescargaReemissao");
			nrConhecimento = parameters.getLong("nrConhecimentoReemissao");
		}
		List<Map> ctrcs = emitirCTRCanceladosService.findCTRCsCanceladosAEmitir(
				parameters.getString("tpOperacaoEmissao"),
				parameters.getString("tpOpcaoEmissao"),
				SessionUtils.getFilialSessao().getIdFilial(),
				parameters.getLong("nrProximoFormulario"),
				nrConhecimento,
				parameters.getString("dsMacAddress"),
				idMonitoramentoDescarga
			);
		return ctrcs;
	}
	
	public void updateTpSituacaoAtualizacaoSOM(Map<String, Object> parameters) {
		if(parameters != null) {
			List<Long> docsServ = (List) parameters.get("docsServ");
			Boolean situacaoAtualizacao = (Boolean) parameters.get("situacaoAtualizacao");
			String tpSituacaoAtualizacao = situacaoAtualizacao != null && situacaoAtualizacao ? "A" : "E";
			conhecimentoService.updateTpSituacaoAtualizacaoSOM(docsServ, tpSituacaoAtualizacao);
		}
	}
	
	/*
	 * GETTERS E SETTERS
	 */
	public void setEmitirCTRService(EmitirCTRCanceladosService emitirCTRService) {
		this.emitirCTRCanceladosService = emitirCTRService;
	}

	public MonitoramentoDescargaService getMonitoramentoDescargaService() {
		return monitoramentoDescargaService;
	}

	public void setMonitoramentoDescargaService(
			MonitoramentoDescargaService monitoramentoDescargaService) {
		this.monitoramentoDescargaService = monitoramentoDescargaService;
	}

	/**
	 * @return the conhecimentoService
	 */
	public ConhecimentoService getConhecimentoService() {
		return conhecimentoService;
	}

	/**
	 * @param conhecimentoService the conhecimentoService to set
	 */
	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
	}

	public ParametroGeralService getParametroGeralService() {
		return parametroGeralService;
	}

	public void setParametroGeralService(ParametroGeralService parametroGeralService) {
		this.parametroGeralService = parametroGeralService;
	}
}
