package com.mercurio.lms.expedicao.swt.action;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.service.ParametroGeralService;
import com.mercurio.lms.configuracoes.util.MapUtilsPlus;
import com.mercurio.lms.expedicao.model.Conhecimento;
import com.mercurio.lms.expedicao.model.Contingencia;
import com.mercurio.lms.expedicao.model.MonitoramentoDescarga;
import com.mercurio.lms.expedicao.model.service.ContingenciaService;
import com.mercurio.lms.expedicao.model.service.MonitoramentoDescargaService;
import com.mercurio.lms.expedicao.util.ConstantesExpedicao;
import com.mercurio.lms.gm.report.RelatorioDiscrepanciaService;
import com.mercurio.lms.sim.ConstantesSim;
import com.mercurio.lms.sim.model.EventoDocumentoServico;
import com.mercurio.lms.sim.model.service.EventoDocumentoServicoService;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;
import org.apache.commons.collections.map.HashedMap;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.joda.time.DateTime;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Generated by: ADSM ActionGenerator
 * <p>
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 *
 * @spring.bean id="lms.expedicao.swt.monitorarDescargaColetaAction"
 */
public class MonitorarDescargaColetaAction extends CrudAction {

	public static final String ID_MONITORAMENTO_DESCARGA = "idMonitoramentoDescarga";
	public static final String TP_SITUACAO_DESCARGA = "tpSituacaoDescarga";
	public static final String VALIDAR_CALCULO_FRETE_FINALIZADO = "validarCalculoFreteFinalizado";
	public static final String CONFIRMA_MENSAGEM = "confirmaMensagem";
	public static final String EXISTE_PENDENCIA_WORKFLOW = "existePendenciaWorkflow";
	public static final String ID_CARREGAMENTO_GM = "idCarregamentoGM";
	public static final String ORIGEM = "origem";
	public static final String TIPO_EMITENTE = "tipoEmitente";
	public static final String DATA_FECHAMENTO = "dataFechamento";
	public static final String EMAIL_ENDERECO = "emailEndereco";
	public static final String EMAIL_CC = "emailCC";
	public static final String EMAIL_TITULO = "emailTitulo";
	public static final String EMAIL_CORPO = "emailCorpo";
	private static final String EMAIL_CONTATO_IARDLEI_AGASSI_TNTBRASIL_COM_BR = "iardlei.agassi@tntbrasil.com.br";
	private ParametroGeralService parametroGeralService;
	private MonitoramentoDescargaService monitoramentoDescargaService;
	private EventoDocumentoServicoService eventoDocumentoServicoService;
	private RelatorioDiscrepanciaService relatorioDiscrepanciaService;
	private ContingenciaService contingenciaService;

	private static final Log LOGGER = LogFactory.getLog(MonitorarDescargaColetaAction.class);

	public List<Map<String, Object>> findDescargasByFilial(Map<String, Object> criteria) {

		Long idFilial = SessionUtils.getFilialSessao().getIdFilial();
		Integer tmpExc = ((BigDecimal) parametroGeralService.findConteudoByNomeParametro("TMP_MONIT_DESC_COL_EXC", false)).intValue();
		DateTime sysDate = JTDateTimeUtils.getDataHoraAtual();
		DateTime dhTmpExc = sysDate.minusHours(tmpExc);
		String quantidadeDiasLimpeza = parametroGeralService.findConteudoByNomeParametro("QT_DIAS_LIMPEZA_MONIT_DESC_ERRO", false).toString();
		String novoTpSituacaoDescarga = "S";

		monitoramentoDescargaService.limpezaTelaMonitoramentoDescarga(idFilial, quantidadeDiasLimpeza, novoTpSituacaoDescarga);

		return monitoramentoDescargaService.findMonitoramentoDescargasByAfterDate(dhTmpExc, idFilial);
	}

	public Map<String, Object> updateSituacaoMonitoramentoDescarga(Map<String, Object> parameters) throws Exception {
		Long idMonitoramentoDescarga = (Long) parameters.get(ID_MONITORAMENTO_DESCARGA);
		String tpSituacaoDescarga = (String) parameters.get(TP_SITUACAO_DESCARGA);

		return monitoramentoDescargaService.updateSituacaoMonitoramentoDescarga(idMonitoramentoDescarga, tpSituacaoDescarga);
	}

	public Map<String, Object> updateSituacaoMonitoramento(Map<String, Object> parameters) throws Exception {
		Long idMonitoramentoDescarga = (Long) parameters.get(ID_MONITORAMENTO_DESCARGA);
		Boolean validarCalculoFreteFinalizado = (Boolean) parameters.get(VALIDAR_CALCULO_FRETE_FINALIZADO);
		Boolean confirmaMensagem = (Boolean) parameters.get(CONFIRMA_MENSAGEM);
		Boolean existePendenciaWorkflow = (Boolean) parameters.get(EXISTE_PENDENCIA_WORKFLOW);

		Map<String, Object> param = monitoramentoDescargaService.updateSituacaoMonitoramento(idMonitoramentoDescarga, validarCalculoFreteFinalizado, confirmaMensagem, existePendenciaWorkflow);
		if (param != null && param.get(ID_CARREGAMENTO_GM) != null) {
			ArrayList<String> listIds = new ArrayList<String>();

			Map email = new HashedMap();
			email.put(ORIGEM, SessionUtils.getFilialSessao().getIdFilialConcatenado());
			email.put(TIPO_EMITENTE, "TNT - Descarga");
			email.put(DATA_FECHAMENTO, new DateTime());
			email.put(EMAIL_ENDERECO, EMAIL_CONTATO_IARDLEI_AGASSI_TNTBRASIL_COM_BR);
			email.put(EMAIL_CC, EMAIL_CONTATO_IARDLEI_AGASSI_TNTBRASIL_COM_BR);
			email.put(EMAIL_TITULO, "Relatório de Discrepâncias EDI x RPP");
			email.put(EMAIL_CORPO, "Relatório de Discrepâncias EDI x RPP");
			email.put(ID_MONITORAMENTO_DESCARGA, idMonitoramentoDescarga);
			listIds.add(param.get(ID_CARREGAMENTO_GM).toString());
			email.put("ids", listIds);
			this.relatorioDiscrepanciaService.executeReport(email);
		}


		/** LMS-414 */
		verifyEventoCancelado(idMonitoramentoDescarga);

		return param;
	}

	private void verifyEventoCancelado(final Long idMonitoramentoDescarga) {
		/** Busca Eventos de Cancelamento */
		List<EventoDocumentoServico> eventos = eventoDocumentoServicoService.findEventoDoctoServicoByMonitoramento(idMonitoramentoDescarga, ConstantesSim.EVENTO_DOCUMENTO_CANCELADO);
		/** Caso encontro Mostra mensagem ao usuário */
		for (final EventoDocumentoServico eventoDocumentoServico : eventos) {
			throw new BusinessException("LMS-04359", new Object[]{eventoDocumentoServico.getObComplemento()});
		}
	}

	/**
	 * LMS-3281
	 *
	 * @param param
	 * @return
	 */
	public Map<String, Object> validatePendenciaWorkflow(TypedFlatMap param) {
		return monitoramentoDescargaService.validatePendenciaWorkflow(param);
	}

	/**
	 * LMS-3625
	 *
	 * @param param
	 * @return
	 */
	public Map<String, Object> validateTempoProcessamentoEdi(TypedFlatMap param) {
		return monitoramentoDescargaService.validateTempoProcessamentoEdi(param);
	}

	/**
	 * Finalizar Veículo
	 *
	 * @param parameters <code>Map<String, Object></code>
	 * @throws <code>Exception</code>
	 */
	public void finalizarVeiculo(Map<String, Object> parameters) throws Exception {
		Long idMonitoramentoDescarga = (Long) parameters.get(ID_MONITORAMENTO_DESCARGA);


		if (parameters != null && parameters.get(ID_CARREGAMENTO_GM) != null) {
			ArrayList<String> listIds = new ArrayList<String>();

			Map email = new HashedMap();
			email.put(ORIGEM, SessionUtils.getFilialSessao().getIdFilialConcatenado());
			email.put(TIPO_EMITENTE, "TNT - Veículo");
			email.put(DATA_FECHAMENTO, new DateTime());
			email.put(EMAIL_ENDERECO, EMAIL_CONTATO_IARDLEI_AGASSI_TNTBRASIL_COM_BR);
			email.put(EMAIL_CC, EMAIL_CONTATO_IARDLEI_AGASSI_TNTBRASIL_COM_BR);
			email.put(EMAIL_TITULO, "Relatório de Discrepâncias EDI x MWW");
			email.put(EMAIL_CORPO, "Relatório de Discrepâncias EDI x MWW");
			email.put(ID_MONITORAMENTO_DESCARGA, idMonitoramentoDescarga);
			listIds.add(parameters.get(ID_CARREGAMENTO_GM).toString());
			email.put("ids", listIds);
			this.relatorioDiscrepanciaService.executeReport(email);
		}
	}


	public void continuarEmissao(Map<String, Object> parameters) {
		monitoramentoDescargaService.executeContinuarEmissao((Long) parameters.get(ID_MONITORAMENTO_DESCARGA));
	}

	/**
	 * Busca Monitoramento pelo nrFrota
	 *
	 * @param criteria
	 * @return
	 * @author André Valadas
	 */
	public Map findMonitoramentoDescarga(final Map criteria) {
		final String nrFrota = (String) criteria.get("nrFrota");
		final MonitoramentoDescarga monitoramentoDescarga = monitoramentoDescargaService.find(
				null,
				nrFrota,
				ConstantesExpedicao.TP_SITUACAO_DESCARGA_DIGITACAO_NOTAS_FISCAIS_INICIADA,
				SessionUtils.getFilialSessao().getIdFilial());

		/** Valida Monitoramento */
		if (monitoramentoDescarga == null) {
			throw new BusinessException("LMS-04227");
		}

		final Map parameters = new HashMap();
		parameters.put(ID_MONITORAMENTO_DESCARGA, monitoramentoDescarga.getIdMonitoramentoDescarga());
		return parameters;
	}

	/**
	 * Busca os registros para Finalizar Descarga
	 *
	 * @param idMonitoramentoDescarga
	 * @return
	 * @author André Valadas
	 */
	public Map<String, Object> findConhecimentosEDI(final Map<String, Object> parameters) {
		Contingencia contingencia = contingenciaService.validateContingenciaVencidaFilial(SessionUtils.getFilialSessao());

		final Long idMonitoramentoDescarga = MapUtilsPlus.getLong(parameters, ID_MONITORAMENTO_DESCARGA);
		final Boolean validateWithSOM = MapUtilsPlus.getBoolean(parameters, "validateWithSOM");
		return monitoramentoDescargaService.findConhecimentosEDI(idMonitoramentoDescarga, validateWithSOM, contingencia != null);
	}

	/**
	 * Fecha o DoctoServico
	 *
	 * @param conhecimento
	 * @author André Valadas
	 */
	public void executeFechaConhecimento(final Map<String, Object> parameters) {
		Contingencia contingencia = contingenciaService.findByFilial(SessionUtils.getFilialSessao().getIdFilial(), "A", "E");
		final Conhecimento conhecimento = (Conhecimento) parameters.get("conhecimento");

		monitoramentoDescargaService.executeFechaConhecimento(conhecimento, contingencia != null);
	}

	/**
	 * Atualiza o Monitoramento Descarga
	 *
	 * @param idMonitoramentoDescarga
	 * @param tpSituacaoMonitoramento
	 * @param idCarregamentoGM
	 * @throws Exception
	 * @author André Valadas
	 */
	public void updateMonitoramentoDescarga(final Map<String, Object> parameters) throws Exception {
		final Long idMonitoramentoDescarga = MapUtilsPlus.getLong(parameters, ID_MONITORAMENTO_DESCARGA);
		final String tpSituacaoMonitoramento = MapUtilsPlus.getString(parameters, "tpSituacaoMonitoramento");

		/** Atualiza Monitoramento */
		monitoramentoDescargaService.updateMonitoramentoDescarga(idMonitoramentoDescarga, tpSituacaoMonitoramento);

		/** Envia relatório para Descargas GM */
		finalizarVeiculo(parameters);
	}

	public Map<String, Object> findTempoAtualizacaoDescarga(Map<String, Object> parameters) {
		BigDecimal tempoAtualizacao = (BigDecimal) parametroGeralService.findConteudoByNomeParametro("TMP_ATUAL_DESC_COL", false);
		Map<String, Object> tempo = new HashMap<String, Object>();
		if (tempoAtualizacao != null) {
			tempo.put("tempoAtualizacao", Integer.valueOf(tempoAtualizacao.intValue()));
		}
		return tempo;
	}

	@Override
	public Integer getRowCount(Map criteria) {
		if (criteria == null) {
			criteria = new HashMap<String, Object>();
		}
		Map<String, Object> filial = new HashMap<String, Object>();
		filial.put("idFilial", SessionUtils.getFilialSessao().getIdFilial());
		criteria.put("filial", filial);
		return super.getRowCount(criteria);
	}

	public void setMonitoramentoDescargaService(MonitoramentoDescargaService monitoramentoDescargaService) {
		this.monitoramentoDescargaService = monitoramentoDescargaService;
	}

	public ParametroGeralService getParametroGeralService() {
		return parametroGeralService;
	}

	public void setParametroGeralService(ParametroGeralService parametroGeralService) {
		this.parametroGeralService = parametroGeralService;
	}

	public void setEventoDocumentoServicoService(EventoDocumentoServicoService eventoDocumentoServicoService) {
		this.eventoDocumentoServicoService = eventoDocumentoServicoService;
	}

	public RelatorioDiscrepanciaService getRelatorioDiscrepanciaService() {
		return relatorioDiscrepanciaService;
	}

	public void setRelatorioDiscrepanciaService(
			RelatorioDiscrepanciaService relatorioDiscrepanciaService) {
		this.relatorioDiscrepanciaService = relatorioDiscrepanciaService;
	}

	public void setContingenciaService(ContingenciaService contingenciaService) {
		this.contingenciaService = contingenciaService;
	}
}
