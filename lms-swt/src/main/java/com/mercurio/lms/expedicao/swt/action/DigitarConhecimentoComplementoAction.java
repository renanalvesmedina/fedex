package com.mercurio.lms.expedicao.swt.action;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.MapUtils;
import org.apache.commons.lang.StringUtils;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.InscricaoEstadual;
import com.mercurio.lms.configuracoes.model.service.InscricaoEstadualService;
import com.mercurio.lms.contasreceber.model.service.FaturaService;
import com.mercurio.lms.expedicao.model.Conhecimento;
import com.mercurio.lms.expedicao.model.Densidade;
import com.mercurio.lms.expedicao.model.Dimensao;
import com.mercurio.lms.expedicao.model.DoctoServico;
import com.mercurio.lms.expedicao.model.service.ConhecimentoComplementoService;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.model.service.DensidadeService;
import com.mercurio.lms.expedicao.model.service.DoctoServicoService;
import com.mercurio.lms.expedicao.model.service.NaturezaProdutoService;
import com.mercurio.lms.expedicao.util.ConhecimentoUtils;
import com.mercurio.lms.expedicao.util.ConstantesExpedicao;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.BigDecimalUtils;
import com.mercurio.lms.util.LongUtils;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.expedicao.swt.digitarConhecimentoComplementoAction"
 */
public class DigitarConhecimentoComplementoAction extends CrudAction {
	private DoctoServicoService doctoServicoService;
	private ConhecimentoComplementoService conhecimentoComplementoService;
	private ConhecimentoService conhecimentoService;
	private FilialService filialService;
	private NaturezaProdutoService naturezaProdutoService;
	private DensidadeService densidadeService;
	private FaturaService faturaService;
	private InscricaoEstadualService inscricaoEstadualService;

	public TypedFlatMap findDadosSessao() {
		Filial filialUsuario = SessionUtils.getFilialSessao();
		TypedFlatMap map = new TypedFlatMap();
		map.put("idFilial", filialUsuario.getIdFilial());
		map.put("sgFilial", filialUsuario.getSgFilial());
		map.put("nmFantasia", filialUsuario.getPessoa().getNmFantasia());
		return map;
	}

    /**
     * Busca Conhecimento para Complemento
     * @param criteria
     * @return
     */
	public List findByNrConhecimentoIdFilialOrigem(TypedFlatMap criteria) {
		Long nrConhecimento = criteria.getLong("nrDoctoServico");
		Long idFilialOrigem = criteria.getLong("idFilial");
		List result = conhecimentoService.findByNrConhecimentoIdFilialOrigem(nrConhecimento, idFilialOrigem, ConstantesExpedicao.DOCUMENTO_SERVICO_EMITIDO, criteria.getString("tpDocumentoServico"));

		//Regra 2.3 - Verifica se o conhecimento está cancelado. 
		conhecimentoService.validateCrtCancelado(result);

		//Carrega Inscricoes Estaduais
		if(result != null && !result.isEmpty()) {
			Map mapReturn = (Map) result.get(0);
			conhecimentoComplementoService.configureIEConhecimento(mapReturn);
		}
		//Carrega Enderecos
		return conhecimentoService.findEnderecosClientesConhecimentos(result);
	}

	/**
     * Busca Fatura para Complemento
     * @param criteria
     * @return
     */
    public List findByNrFaturaIdFilialOrigem(TypedFlatMap criteria) {
		Long nrFatura = LongUtils.getLong(criteria.getInteger("nrFatura"));
    	Long idFilial = criteria.getLong("idFilial");
    	List result = faturaService.findByNrFaturaIdFilialOrigem(nrFatura, idFilial);

    	//Valida Faturas
    	if (criteria.getBoolean("blIgnoreCanceladas") == null || !criteria.getBoolean("blIgnoreCanceladas"))
    	faturaService.validateFaturaCancelada(result);

    	//Carrega Inscricoes Estaduais
		if(result != null && !result.isEmpty()) {
			Map fatura = (Map) result.get(0);
			Long idCliente = MapUtils.getLong((Map) result.get(0), "idCliente");
			InscricaoEstadual inscricaoEstadual = inscricaoEstadualService.findByPessoaIndicadorPadrao(idCliente, Boolean.TRUE);
			if(inscricaoEstadual != null) {
				((Map)fatura.get("remetente")).put("nrInscricaoEstadual",inscricaoEstadual.getNrInscricaoEstadual());
				((Map)fatura.get("destinatario")).put("nrInscricaoEstadual",inscricaoEstadual.getNrInscricaoEstadual());
			}
		}
    	return result;
    }

    /**
     * Valida Conhecimento
     * @param criteria
     */
    public void validateCTRCComplemento(TypedFlatMap criteria) {
    	if(StringUtils.isNotBlank(criteria.getString("idConhecimento"))) {
    		
    		criteria.put("psAforado", criteria.get("psAforado").toString());
			criteria.put("valor", criteria.get("vlParcela") == null ? null : criteria.get("vlParcela").toString());
   		
    		conhecimentoComplementoService.validateCTRCComplemento(criteria);
    	}
    }

    /**
     * Calculo para CTRC Complemento
     * @param criteria
     * @return valores Calculados
     */
    public TypedFlatMap calculaCTRCComplemento(TypedFlatMap criteria) {
    	Long idDoctoServicoOriginal = criteria.getLong("idConhecimento");
		Long idFatura = criteria.getLong("idFatura");
		Boolean blGeraReceita = criteria.getBoolean("blGeraReceita");

		Conhecimento conhecimento = new Conhecimento();
		conhecimento.setTpConhecimento(criteria.getDomainValue("tpConhecimento"));
		conhecimento.setPsReal(criteria.getBigDecimal("psReal"));
		conhecimento.setVlMercadoria(BigDecimalUtils.getBigDecimal(criteria.get("vlMercadoria")));
		conhecimento.setTpFrete(criteria.getDomainValue("tpFrete"));
		conhecimento.setTpCalculoPreco(criteria.getDomainValue("tpCalculoPreco"));
		conhecimento.setTpDocumentoServico(new DomainValue(ConstantesExpedicao.CONHECIMENTO_NACIONAL));
		Conhecimento conhecimentoDimensoes = (Conhecimento) criteria.get("conhecimento");
		List<Dimensao> dimensoesInSession;
		if(conhecimentoDimensoes == null){
			dimensoesInSession = null;
		} else {
			dimensoesInSession = conhecimentoDimensoes.getDimensoes();
		}

		if(dimensoesInSession == null || dimensoesInSession.isEmpty()){
			conhecimento.setPsAforado(BigDecimal.valueOf(criteria.getDouble("psAforado")));
		} else {
			conhecimento.setPsAforado(conhecimentoService.calculaPsAforado(ConstantesExpedicao.MODAL_RODOVIARIO, dimensoesInSession));
		}
		conhecimento.setDimensoes(dimensoesInSession);

		DoctoServico doctoServicoOriginal = new DoctoServico();
		doctoServicoOriginal.setIdDoctoServico(idDoctoServicoOriginal);
		conhecimento.setDoctoServicoOriginal(doctoServicoOriginal);

		BigDecimal vlParcela = criteria.getBigDecimal("vlParcela");
		conhecimentoComplementoService.executeCalculoFreteComplemento(conhecimento, idFatura, vlParcela, blGeraReceita);
		if(ConstantesExpedicao.CALCULO_NORMAL.equals(conhecimento.getTpCalculoPreco().getValue())) {
			criteria.put("valor", conhecimento.getVlTotalDocServico());
		}
		criteria.put("totalFrete", conhecimento.getVlTotalDocServico());
		criteria.put("vlImposto", conhecimento.getVlImposto());

		ConhecimentoUtils.setConhecimentoInSession(conhecimento);
		return criteria;
    }

    /**
     * Gera Complemento de Frete/Fatura
     * @param criteria
     * @return
     */
    public Serializable gerarCTRCComplemento(TypedFlatMap criteria) {
    	Boolean blGeraReceita = criteria.getBoolean("blGeraReceita");
    	Conhecimento conhecimento = getConhecimentoInSessionWithliberacaoDocServ(criteria);
    	conhecimento.setBlGeraReceita(blGeraReceita);
    	String dsObservacao = criteria.getString("motivo");
    	conhecimento.addObservacaoDoctoServico(ConhecimentoUtils.createObservacaoDocumentoServico(conhecimento, dsObservacao, Boolean.TRUE));

    	//Complemento de CONHECIMENTO
    	Long idConhecimento = criteria.getLong("idConhecimento");
    	if(idConhecimento != null) {
    		//Conhecimento Original
    		DoctoServico doctoServicoOriginal = new DoctoServico();
    		doctoServicoOriginal.setIdDoctoServico(idConhecimento);
    		conhecimento.setDoctoServicoOriginal(doctoServicoOriginal);
    		return conhecimentoComplementoService.generateCTRCComplementoConhecimento(conhecimento);
    	}

		return null;
    }

    private Conhecimento getConhecimentoInSessionWithliberacaoDocServ(TypedFlatMap criteria){
    	Conhecimento conhecimentoCalculo = ConhecimentoUtils.getConhecimentoInSession();
    	Conhecimento conhecimentoTela = (Conhecimento) criteria.get("conhecimento");
    	if(conhecimentoTela != null){
    		conhecimentoCalculo.setLiberacaoDocServs(conhecimentoTela.getLiberacaoDocServs());
    		conhecimentoCalculo.setTpMotivoLiberacao(conhecimentoTela.getTpMotivoLiberacao());
    	}
    	return conhecimentoCalculo;
    }
    
    public void setConhecimentoInSession() {
    	Conhecimento conhecimento = new Conhecimento();
    	conhecimento.setTpDocumentoServico(new DomainValue(ConstantesExpedicao.CONHECIMENTO_NACIONAL));
		ConhecimentoUtils.setConhecimentoInSession(conhecimento);
	}

	public void removeConhecimentoFromSession(){
		setConhecimentoInSession();
	}

	public List findFilialConhecimento(TypedFlatMap criteria) {
		return filialService.findLookupBySgFilial(criteria.getString("sgFilial"), criteria.getString("tpAcesso"));
	}

	public List findNaturezaProduto(Map criteria) {
		return naturezaProdutoService.find(criteria);
	}

	public List findDensidade(TypedFlatMap map){
		
		List<Densidade> result =  densidadeService.find(map); 
		List retorno  = new ArrayList();
		
		for (Densidade densidade : result) {
			Map dens = new HashMap();

			dens.put("idDensidade", densidade.getIdDensidade());
			dens.put("dsDensidade", ((DomainValue) densidade.getTpDensidade()).getValue());

			retorno.add(dens);

		}
		
		return retorno; 
	}

	public void executeValidacaoLimiteValorMercadoria(TypedFlatMap criteria) {
		doctoServicoService.executeValidacaoLimiteValorMercadoria(criteria);
	}
	
    public List findLookupFilial(TypedFlatMap criteria){
        return filialService.findLookupBySgFilial(criteria.getString("sgFilial"), criteria.getString("tpAcesso"));
    }
 
    private List getDimensoesInSession() {
		Conhecimento conhecimento = ConhecimentoUtils.getConhecimentoInSession();
		List dimensoes = conhecimento.getDimensoes();
		if(dimensoes == null) {
			dimensoes = new ArrayList();
			conhecimento.setDimensoes(dimensoes);
		}
		return dimensoes;
	}

    public void cancelarAll() {
    	removeConhecimentoFromSession();
    }

	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public void setNaturezaProdutoService(NaturezaProdutoService naturezaProdutoService) {
		this.naturezaProdutoService = naturezaProdutoService;
	}
	public void setDensidadeService(DensidadeService densidadeService) {
		this.densidadeService = densidadeService;
	}
	public void setFaturaService(FaturaService faturaService) {
		this.faturaService = faturaService;
	}
	public void setConhecimentoComplementoService(ConhecimentoComplementoService conhecimentoComplementoService) {
		this.conhecimentoComplementoService = conhecimentoComplementoService;
	}
	public void setInscricaoEstadualService(InscricaoEstadualService inscricaoEstadualService) {
		this.inscricaoEstadualService = inscricaoEstadualService;
	}

	public void setDoctoServicoService(DoctoServicoService doctoServicoService) {
		this.doctoServicoService = doctoServicoService;
	}
}