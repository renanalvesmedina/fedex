package com.mercurio.lms.tabelaprecos.swt.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.EnderecoPessoa;
import com.mercurio.lms.configuracoes.model.service.EnderecoPessoaService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.Municipio;
import com.mercurio.lms.municipios.model.MunicipioFilial;
import com.mercurio.lms.municipios.model.Pais;
import com.mercurio.lms.municipios.model.UnidadeFederativa;
import com.mercurio.lms.municipios.model.Zona;
import com.mercurio.lms.municipios.model.service.AeroportoService;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.MunicipioFilialService;
import com.mercurio.lms.municipios.model.service.PaisService;
import com.mercurio.lms.municipios.model.service.TipoLocalizacaoMunicipioService;
import com.mercurio.lms.municipios.model.service.UnidadeFederativaService;
import com.mercurio.lms.municipios.model.service.ZonaService;
import com.mercurio.lms.tabelaprecos.model.RotaPreco;
import com.mercurio.lms.tabelaprecos.model.service.RotaPrecoService;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.tabelaprecos.swt.manterRotasAction"
 */

public class ManterRotasAction extends CrudAction {	
	private FilialService filialService;	
	private EnderecoPessoaService enderecoPessoaService;	
	private AeroportoService aeroportoService;	
	private ZonaService zonaService;	
	private PaisService paisService;	
	private UnidadeFederativaService unidadeFederativaService;	
	private MunicipioFilialService municipioFilialService;	
	private TipoLocalizacaoMunicipioService tipoLocalizacaoMunicipioService;	
	
	
	public TipoLocalizacaoMunicipioService getTipoLocalizacaoMunicipioService() {
		return tipoLocalizacaoMunicipioService;
	}
	public void setTipoLocalizacaoMunicipioService(
			TipoLocalizacaoMunicipioService tipoLocalizacaoMunicipioService) {
		this.tipoLocalizacaoMunicipioService = tipoLocalizacaoMunicipioService;
	}
	public MunicipioFilialService getMunicipioFilialService() {
		return municipioFilialService;
	}
	public void setMunicipioFilialService(
			MunicipioFilialService municipioFilialService) {
		this.municipioFilialService = municipioFilialService;
	}
	public UnidadeFederativaService getUnidadeFederativaService() {
		return unidadeFederativaService;
	}
	public void setUnidadeFederativaService(
			UnidadeFederativaService unidadeFederativaService) {
		this.unidadeFederativaService = unidadeFederativaService;
	}
	public PaisService getPaisService() {
		return paisService;
	}
	public void setPaisService(PaisService paisService) {
		this.paisService = paisService;
	}
	public ZonaService getZonaService() {
		return zonaService;
	}
	public void setZonaService(ZonaService zonaService) {
		this.zonaService = zonaService;
	}
	public AeroportoService getAeroportoService() {
		return aeroportoService;
	}
	public void setAeroportoService(AeroportoService aeroportoService) {
		this.aeroportoService = aeroportoService;
	}
	public EnderecoPessoaService getEnderecoPessoaService() {
		return enderecoPessoaService;
	}
	public void setEnderecoPessoaService(EnderecoPessoaService enderecoPessoaService) {
		this.enderecoPessoaService = enderecoPessoaService;
	}
	public FilialService getFilialService() {
		return filialService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	
	public void setRotaPrecoService(RotaPrecoService rotaPrecoService) {
		this.defaultService = rotaPrecoService;
	}
	
	public RotaPrecoService getRotaPrecoService() {
		return ((RotaPrecoService)defaultService);
	}
	
	public ResultSetPage findPaginated(Map criteria) {
		ResultSetPage resultSetPage = getRotaPrecoService().findPaginated(createFindCriteria(criteria));
		List listReturn = new ArrayList();
		for (Iterator iter = resultSetPage.getList().iterator(); iter.hasNext();) {
			Map mapResult = (HashMap) iter.next();			
			Map mapReturn = new HashMap();
			
			mapReturn.put("idRotaPreco", mapResult.get("idRotaPreco"));
			
			// ORIGEM
			Map mapZonaOrigem = (Map)mapResult.get("zonaByIdZonaOrigem");
			mapReturn.put("dsZonaOrigem", mapZonaOrigem != null ? mapZonaOrigem.get("dsZona") : "");
			Map mapPaisOrigem = (Map)mapResult.get("paisByIdPaisOrigem");
			mapReturn.put("nmPaisOrigem", mapPaisOrigem != null ? mapPaisOrigem.get("nmPais") : "");
			Map mapUfOrigem = (Map)mapResult.get("unidadeFederativaByIdUfOrigem");
			mapReturn.put("sgUnidadeFederativaOrigem", mapUfOrigem != null ? mapUfOrigem.get("sgUnidadeFederativa") : "");
			Map mapFilialOrigem = (Map)mapResult.get("filialByIdFilialOrigem");
			mapReturn.put("sgFilialOrigem", mapFilialOrigem != null ? mapFilialOrigem.get("sgFilial") : "");
			Map mapMunicipioOrigem = (Map)mapResult.get("municipioByIdMunicipioOrigem");
			mapReturn.put("nmMunicipioOrigem", mapMunicipioOrigem != null ? mapMunicipioOrigem.get("nmMunicipio") : "");
			Map mapAeroportoOrigem = (Map)mapResult.get("aeroportoByIdAeroportoOrigem");
			mapReturn.put("sgAeroportoOrigem", mapAeroportoOrigem != null ? mapAeroportoOrigem.get("sgAeroporto") : "");
			Map mapTipoLocalizacaoOrigem = (Map)mapResult.get("tipoLocalizacaoMunicipioByIdTipoLocalizacaoOrigem");
			mapReturn.put("dsTipoLocalizacaoMunicipioOrigem", mapTipoLocalizacaoOrigem != null ? mapTipoLocalizacaoOrigem.get("dsTipoLocalizacaoMunicipio") : "");
			
			// DESTINO
			Map mapZonaDestino = (Map)mapResult.get("zonaByIdZonaDestino");
			mapReturn.put("dsZonaDestino", mapZonaDestino != null ? mapZonaDestino.get("dsZona") : "");
			Map mapPaisDestino = (Map)mapResult.get("paisByIdPaisDestino");
			mapReturn.put("nmPaisDestino", mapPaisDestino != null ? mapPaisDestino.get("nmPais") : "");
			Map mapUfDestino = (Map)mapResult.get("unidadeFederativaByIdUfDestino");
			mapReturn.put("sgUnidadeFederativaDestino", mapUfDestino != null ? mapUfDestino.get("sgUnidadeFederativa") : "");
			Map mapFilialDestino = (Map)mapResult.get("filialByIdFilialDestino");
			mapReturn.put("sgFilialDestino", mapFilialDestino != null ? mapFilialDestino.get("sgFilial") : "");
			Map mapMunicipioDestino = (Map)mapResult.get("municipioByIdMunicipioDestino");
			mapReturn.put("nmMunicipioDestino", mapMunicipioDestino != null ? mapMunicipioDestino.get("nmMunicipio") : "");
			Map mapAeroportoDestino = (Map)mapResult.get("aeroportoByIdAeroportoDestino");
			mapReturn.put("sgAeroportoDestino", mapAeroportoDestino != null ? mapAeroportoDestino.get("sgAeroporto") : "");
			Map mapTipoLocalizacaoDestino = (Map)mapResult.get("tipoLocalizacaoMunicipioByIdTipoLocalizacaoDestino");
			mapReturn.put("dsTipoLocalizacaoMunicipioDestino", mapTipoLocalizacaoDestino != null ? mapTipoLocalizacaoDestino.get("dsTipoLocalizacaoMunicipio") : "");
			
			listReturn.add(mapReturn);
		}
		
		resultSetPage.setList(listReturn);		
		return resultSetPage;
	}
	
	public Integer getRowCount(Map criteria) {
		return getRotaPrecoService().getRowCount(createFindCriteria(criteria));
	}
	
   /**
     * Cria mapa com filtros para pesquisa.
     * @param criteria
     * @return
     */
	private TypedFlatMap createFindCriteria(Map criteria) {
		TypedFlatMap mapCriteria = new TypedFlatMap();
		mapCriteria.put("_currentPage", criteria.get("_currentPage"));
    	mapCriteria.put("_pageSize", criteria.get("_pageSize"));
    	mapCriteria.put("_order", criteria.get("_order"));

    	mapCriteria.put("zonaByIdZonaOrigem.idZona", criteria.get("idZonaOrigem"));
    	mapCriteria.put("paisByIdPaisOrigem.idPais", criteria.get("idPaisOrigem"));
    	mapCriteria.put("unidadeFederativaByIdUfOrigem.idUnidadeFederativa", criteria.get("idUnidadeFederativaOrigem"));
    	mapCriteria.put("filialByIdFilialOrigem.idFilial", criteria.get("idFilialOrigem"));
    	mapCriteria.put("municipioByIdMunicipioOrigem.idMunicipio", criteria.get("idMunicipioOrigem"));
    	mapCriteria.put("aeroportoByIdAeroportoOrigem.idAeroporto", criteria.get("idAeroportoOrigem"));
    	mapCriteria.put("tipoLocalizacaoMunicipioByIdTipoLocalizacaoOrigem.idTipoLocalizacaoMunicipio", criteria.get("idTipoLocalizacaoMunicipioOrigem"));    	
    	mapCriteria.put("zonaByIdZonaDestino.idZona", criteria.get("idZonaDestino"));
    	mapCriteria.put("paisByIdPaisDestino.idPais", criteria.get("idPaisDestino"));
    	mapCriteria.put("unidadeFederativaByIdUfDestino.idUnidadeFederativa", criteria.get("idUnidadeFederativaDestino"));
    	mapCriteria.put("filialByIdFilialDestino.idFilial", criteria.get("idFilialDestino"));
    	mapCriteria.put("municipioByIdMunicipioDestino.idMunicipio", criteria.get("idMunicipioDestino"));
    	mapCriteria.put("aeroportoByIdAeroportoDestino.idAeroporto", criteria.get("idAeroportoDestino"));
    	mapCriteria.put("tipoLocalizacaoMunicipioByIdTipoLocalizacaoDestino.idTipoLocalizacaoMunicipio", criteria.get("idTipoLocalizacaoMunicipioDestino"));
    	mapCriteria.put("tpSituacao", criteria.get("tpSituacao"));
    			
    	return mapCriteria;
	}  	
	
	
    public void removeById(java.lang.Long id) {
    	getRotaPrecoService().removeById(id);
    }

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	getRotaPrecoService().removeByIds(ids);
    }

    public Serializable findById(java.lang.Long id) {
    	return getRotaPrecoService().findById(id);
    }
    
    public List findZona(Map criteria) {
    	List result = getZonaService().find(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = result.iterator(); iter.hasNext();) {
			Zona zona = (Zona)iter.next();
			Map include = new HashMap();
			include.put("idZona" + criteria.get("tipo"), zona.getIdZona());
			include.put("dsZona", zona.getDsZona());
			include.put("tpSituacao", zona.getTpSituacao());
			
			retorno.add(include);
		}
    	
    	return retorno;
    }
    
    public List findLookupPais(Map criteria) {
    	if (criteria.get("idZona") != null) {
        	Map mapZona = new HashMap();
       		mapZona.put("idZona", ((Long)criteria.get("idZona")).toString());
        	criteria.put("zona", mapZona);
        	criteria.remove("idZona");
		}
    	
    	List result = getPaisService().findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = result.iterator(); iter.hasNext();) {
    		Pais pais = (Pais) iter.next();
			Map include = new HashMap();
			include.put("idPais", pais.getIdPais());			
			include.put("nmPais", pais.getNmPais());
			include.put("sgPais", pais.getSgPais());
			include.put("sgResumida", pais.getSgResumida());
			include.put("tpSituacao", pais.getTpSituacao().getValue());			
			include.put("tpBuscaEndereco", pais.getTpBuscaEndereco().getValue());
			include.put("idZona", pais.getZona().getIdZona());
			include.put("dsZona", pais.getZona().getDsZona());
			include.put("tpSituacaoZona", pais.getZona().getTpSituacao().getValue());
			include.put("cdIso", pais.getCdIso());

			retorno.add(include);
		}
		return retorno;
    }
    
    public List findUnidadeFederativaByPais(Map criteria) {
    	Map mapPais = new HashMap();
   		mapPais.put("idPais", ((Long)criteria.get("idPais")).toString());
    	criteria.put("pais", mapPais);
    	criteria.remove("idPais");

    	List result = getUnidadeFederativaService().findByPais(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = result.iterator(); iter.hasNext();) {
			Map mapUF = (HashMap)iter.next();
			Map include = new HashMap();
			include.put("idUnidadeFederativa" + criteria.get("tipo"), mapUF.get("idUnidadeFederativa"));
			include.put("siglaDescricao", mapUF.get("siglaDescricao"));
			include.put("sgUnidadeFederativa", mapUF.get("sgUnidadeFederativa"));
			include.put("nmUnidadeFederativa", mapUF.get("nmUnidadeFederativa"));
			include.put("tpSituacao", mapUF.get("tpSituacao"));
			
			retorno.add(include);
		}
    	
    	return retorno;
    	
    }
    
    public List findLookupMunicipioFilial(Map criteria) {
    	Map mapMunicipio = new HashMap();
    	mapMunicipio.put("nmMunicipio", criteria.get("nmMunicipio"));
    	criteria.put("municipio", mapMunicipio);
    	criteria.remove("nmMunicipio");
    	
    	if (criteria.get("idFilial") != null) {
        	Map mapFilial = new HashMap();
 			mapFilial.put("idFilial", criteria.get("idFilial"));
        	mapFilial.put("sgFilial", criteria.get("sgFilial"));
        	Map mapPessoa = new HashMap();
        	mapPessoa.put("nmFantasia", criteria.get("nmFantasia"));
        	mapFilial.put("pessoa", mapPessoa);
        	criteria.put("filial", mapFilial);
        	criteria.remove("idFilial");
        	criteria.remove("sgFilial");
        	criteria.remove("nmFantasia");
		}
    	    	
    	List l = getMunicipioFilialService().findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = l.iterator(); iter.hasNext();) {
			MunicipioFilial municipioFilial = (MunicipioFilial) iter.next();
			Map include = new HashMap();
			Municipio municipio = municipioFilial.getMunicipio();
			if(municipio != null) {
				include.put("idMunicipio", municipio.getIdMunicipio());
		    	include.put("nmMunicipio", municipio.getNmMunicipio());
		    	UnidadeFederativa uf = municipio.getUnidadeFederativa();
				include.put("idUnidadeFederativa", uf.getIdUnidadeFederativa());
				Pais pais = uf.getPais();
				include.put("idPais", pais.getIdPais());
				include.put("nmPais", pais.getNmPais());
				include.put("idZona", pais.getZona().getIdZona());
			}
			Filial filial = municipioFilial.getFilial();
			include.put("idFilial", filial.getIdFilial());
			include.put("sgFilial", filial.getSgFilial());
			Map mapPessoa = new HashMap();
			mapPessoa.put("nmFantasia", filial.getPessoa().getNmFantasia());
			include.put("pessoa", mapPessoa);
			retorno.add(include);
		}
		return retorno;
    }
    
    public List findTipoLocalizacao(Map criteria){
    	return getTipoLocalizacaoMunicipioService().find(criteria);
    }
    
    public List findLookupFilial(Map criteria) {
    	List filiais = getFilialService().findLookupBySgFilial((String)criteria.get("sgFilial"), null);
    	if(filiais != null && filiais.size() == 1){
    		Map map = (Map)filiais.get(0);
    		map.putAll(findEndereco((Long)map.get("idFilial")));
    	}
    	return filiais;
    }
    
	public List findLookupAeroporto(Map criteria) {
		List aeroportos = getAeroportoService().findLookupAeroporto(criteria);
		if(aeroportos != null && aeroportos.size() == 1){
			Map map = (Map)aeroportos.get(0);
			map.putAll(findEndereco((Long)map.get("idAeroporto")));
		}
		return aeroportos;
	}

	public Map findEndereco(Long idPessoa) {
		EnderecoPessoa ep = findEnderecoPessoa(idPessoa);
		if(ep != null){
			Map include = new HashMap();
	    	UnidadeFederativa uf = ep.getMunicipio().getUnidadeFederativa();
			include.put("idUnidadeFederativa", uf.getIdUnidadeFederativa());
			Pais p = uf.getPais();
			include.put("idPais", p.getIdPais());
			include.put("nmPais", p.getNmPais());
			include.put("idZona", p.getZona().getIdZona());
			return include;
		}
		return null;
	}	 
	 
    public EnderecoPessoa findEnderecoPessoa(Long idPessoa) {
   		return getEnderecoPessoaService()
    			.findEnderecoPessoaPadrao(idPessoa);
    }
    
    public Serializable store(RotaPreco bean) {
    	return getRotaPrecoService().store(bean);
    }

    public Map findRotaById(Long idRota){
    	return getRotaPrecoService().findRotaById(idRota);
    }
}

