package com.mercurio.lms.tabelaprecos.swt.action;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.PaginatedQuery;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.tabelaprecos.model.TabelaPreco;
import com.mercurio.lms.tabelaprecos.model.service.SubtipoTabelaPrecoService;
import com.mercurio.lms.tabelaprecos.model.service.TabelaPrecoService;
import com.mercurio.lms.tabelaprecos.model.service.TipoTabelaPrecoService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.tabelaprecos.swt.manterTabelasPrecoAction"
 */

public class ManterTabelasPrecoAction extends CrudAction {
	private TipoTabelaPrecoService tipoTabelaPrecoService;
	private SubtipoTabelaPrecoService subtipoTabelaPrecoService;
	private TabelaPrecoService tabelaPrecoService;

    public List findTipoTabelaPrecoAtivo() {
    	return tipoTabelaPrecoService.findTipoTabelaPrecoAtivo();
    }
    
    
    public ResultSetPage findPaginated(Map criteria) {
    	ResultSetPage rsp = tabelaPrecoService.findPaginated(new PaginatedQuery(criteria));

    	List<TabelaPreco> listaReturned = rsp.getList();

		//Nova lista que será inserida no ResultSetPage acima
		List<Map<String,Object>> lista = new ArrayList<Map<String,Object>>();
    	
		for (TabelaPreco tabelaPreco : listaReturned) {
			TypedFlatMap tpm = new TypedFlatMap();					
    	
			tpm.put("idTabelaPreco", tabelaPreco.getIdTabelaPreco());
			tpm.put("blEfetivada", tabelaPreco.getBlEfetivada());
			tpm.put("tpTipoTabelaPrecoNrVersao", tabelaPreco.getTipoTabelaPreco().getTpTipoTabelaPrecoNrVersao());
			tpm.put("tpSubtipoTabelaPreco", tabelaPreco.getSubtipoTabelaPreco().getTpSubtipoTabelaPreco());
			tpm.put("nmPessoa", tabelaPreco.getTipoTabelaPreco().getEmpresaByIdEmpresaCadastrada().getPessoa().getNmPessoa());
			tpm.put("dsDescricao", tabelaPreco.getDsDescricao());
			if(tabelaPreco.getBlEfetivada()) {
				tpm.put("blEfetivada","/image/checked.gif");
			}
			tpm.put("dtVigenciaInicial", tabelaPreco.getDtVigenciaInicial());
			tpm.put("dtVigenciaFinal", tabelaPreco.getDtVigenciaFinal());
			tpm.put("tabelaPrecoString", tabelaPreco.getTabelaPrecoString());

			lista.add(tpm);
    }
    
		rsp.setList(lista);
    
		return rsp;
    }
    
    public Integer getRowCountForManterGruposRegioes( Map criteria ){
		return tabelaPrecoService.getRowCountForManterGruposRegioes(criteria);
	}
    
    public List findSubtipoTabelaPreco(Map criteria) {    	
    	return subtipoTabelaPrecoService.findByTpTipoTabelaPreco(criteria);
    }


    //*****************************************************************************************
	public void setTipoTabelaPrecoService(
			TipoTabelaPrecoService tipoTabelaPrecoService) {
		this.tipoTabelaPrecoService = tipoTabelaPrecoService;
	}


	public void setSubtipoTabelaPrecoService(
			SubtipoTabelaPrecoService subtipoTabelaPrecoService) {
		this.subtipoTabelaPrecoService = subtipoTabelaPrecoService;
	}
    

	public void setTabelaPrecoService(TabelaPrecoService tabelaPrecoService) {
		this.tabelaPrecoService = tabelaPrecoService;
		this.setDefaultService(tabelaPrecoService);
	}
}
