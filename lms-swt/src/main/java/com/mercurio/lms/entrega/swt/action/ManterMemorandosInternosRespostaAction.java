package com.mercurio.lms.entrega.swt.action;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.FilterResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.configuracoes.model.service.UsuarioService;
import com.mercurio.lms.entrega.model.Mir;
import com.mercurio.lms.entrega.model.service.MirService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.HistoricoFilial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.session.SessionUtils;


/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.entrega.swt.manterMemorandosInternosRespostaAction"
 */

public class ManterMemorandosInternosRespostaAction extends CrudAction {

	private FilialService filialService;
	private MirService mirService;
    private UsuarioService usuarioService;

    
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	
	public void setMirService(MirService mirService) {
		this.mirService = mirService;
	}
	public void setUsuarioService(UsuarioService usuarioService) {
		this.usuarioService = usuarioService;
	}


	/**
	 * find da lookup de filial.
	 * @param criteria
	 * @return List com filiais encontradas.
	 */
	public List findLookupFilial(Map criteria) {
		if(criteria.get("tpEmpresa")!= null){
			Map mapEmpresa = new HashMap();
			mapEmpresa.put("tpEmpresa",criteria.get("tpEmpresa"));
			criteria.put("empresa", mapEmpresa);
		}
		
		if(criteria.get("sgFilialOrigem")!= null){
			criteria.put("sgFilial",criteria.get("sgFilialOrigem"));
		}
		
		if(criteria.get("sgFilialDestino")!= null){
			criteria.put("sgFilial",criteria.get("sgFilialDestino"));
		}
		
		List lista = filialService.findLookupFilial(criteria);
		if(!lista.isEmpty() && lista.size()==1){
			Map mapFilial = (Map)lista.get(0);
			Map mapNovo = new HashMap();
			mapNovo.put("idFilial", (Long)mapFilial.get("idFilial"));
			mapNovo.put("sgFilial", mapFilial.get("sgFilial").toString());
			mapNovo.put("nmFantasia", ((Map)mapFilial.get("pessoa")).get("nmFantasia").toString());
			lista.clear();
			lista.add(mapNovo);
		}
		return lista;
	}


	/**
	 * Find da lookup de funcionário.
	 * @param criteria
	 * @return List com usuários encontrados.
	 */
	public List findLookupUsuarioFuncionario(TypedFlatMap criteria) {
		Long idUsuario = criteria.getLong("idUsuario");
		String nrMatricula = criteria.getString("nrMatricula");
		Long idFilial = criteria.getLong("filial.idFilial");
		
		return usuarioService.findLookupUsuarioFuncionario(idUsuario,nrMatricula,idFilial,null,null,null,true);
	}

	
	public ResultSetPage findPaginatedCustom(TypedFlatMap criteria) {
		TypedFlatMap newCriteria = this.montaCriteriosPaginatedCustom(criteria);
		ResultSetPage rsp = mirService.findPaginatedCustom(newCriteria);

		FilterResultSetPage frsp = new FilterResultSetPage(rsp) {
			public Map filterItem(Object item) {
				Mir mir = (Mir)item;
				Filial filialOrigem = mir.getFilialByIdFilialOrigem();
				Filial filialDestino = mir.getFilialByIdFilialDestino();
				Pessoa pessoaFilialOrigem = filialDestino.getPessoa();
				Pessoa pessoaFilialDestino = filialDestino.getPessoa();
				
				TypedFlatMap row = new TypedFlatMap();
				row.put("idMir",mir.getIdMir());
				row.put("idgFilialOrigemMir",filialOrigem.getIdFilial());
				row.put("sgFilialOrigemMir",filialOrigem.getSgFilial());
				row.put("nmFantasiaOrigemMir",pessoaFilialOrigem.getNmFantasia());
				row.put("nrMir",mir.getNrMir());
				row.put("idFilialDestino",filialDestino.getIdFilial());
				row.put("sgFilialDestino",filialDestino.getSgFilial());
				row.put("nmFantasiaDestino",pessoaFilialDestino.getNmFantasia());
				row.put("tpMirDescription",mir.getTpMir().getDescription().getValue());
				row.put("tpDocumentoDescription",mir.getTpDocumentoMir().getDescription().getValue());
				row.put("tpDocumentoMir.value",mir.getTpDocumentoMir().getValue());
				row.put("dhEmissao",mir.getDhEmissao());
				row.put("dhEnvio",mir.getDhEnvio());
				row.put("dhRecebimento",mir.getDhRecebimento());
				return row;
			}
		};
		return (ResultSetPage)frsp.doFilter();
	}


	/**
	 * 
	 * @param filtros
	 * @return
	 */
	public Integer getRowCountCustom(TypedFlatMap filtros) {
		TypedFlatMap newCriteria = this.montaCriteriosPaginatedCustom(filtros);
		return mirService.getRowCountCustom(newCriteria);
	}


	/**
	 * 
	 * @param criteria
	 * @return
	 */
	private TypedFlatMap montaCriteriosPaginatedCustom(TypedFlatMap criteria){
		if(criteria.get("idFilialOrigem")!= null)
			criteria.put("filialByIdFilialOrigem.idFilial",criteria.get("idFilialOrigem").toString());
		
		if(criteria.get("idFilialDestino")!= null)
			criteria.put("filialByIdFilialDestino.idFilial",criteria.get("idFilialDestino").toString());
		
		if(criteria.get("idDoctoServico")!= null)
			criteria.put("reciboReembolso.idDoctoServico",criteria.get("idDoctoServico"));
		
		if(criteria.get("idUsuarioOrigem")!= null)
			criteria.put("usuarioByIdUsuarioCriacao.idUsuario",criteria.get("idUsuarioOrigem"));
		
		if(criteria.get("idUsuarioDestino")!= null)
			criteria.put("usuarioByIdUsuarioRecebimento.idUsuario",criteria.get("idUsuarioDestino"));
		
		return criteria;
	}


	/**
	 * 
	 * @return
	 */
	public TypedFlatMap findInfoUsuarioLogado() {
		TypedFlatMap info = new TypedFlatMap();
				
		Filial filial = SessionUtils.getFilialSessao();
		info.put("idFilialSessao",filial.getIdFilial());
		info.put("sgFilialSessao",filial.getSgFilial());
		info.put("nmFilialSessao",filial.getPessoa().getNmFantasia());
		info.put("siglaNomeFilialSessao",filial.getSiglaNomeFilial());
		
		HistoricoFilial historicoFilial = SessionUtils.getUltimoHistoricoFilialSessao();
		info.put("tpFilialSessao",historicoFilial.getTpFilial().getValue());
		
		Usuario usuario = SessionUtils.getUsuarioLogado();
		info.put("idUsuarioSessao",usuario.getIdUsuario());
		info.put("nrMatriculaSessao",usuario.getNrMatricula());
		info.put("nmUsuarioSessao",usuario.getNmUsuario());
		
		return info;
	}
}