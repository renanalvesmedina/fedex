package com.mercurio.lms.entrega.swt.action;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.util.FilterList;
import com.mercurio.adsm.framework.util.FilterResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.entrega.model.service.ChequeReembolsoService;
import com.mercurio.lms.entrega.model.service.ConsultarPosicaoReembolsosService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.service.ClienteService;


/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.entrega.swt.consultarPosicaoReembolsosAction"
 */

public class ConsultarPosicaoReembolsosAction extends CrudAction {
	
	private ConsultarPosicaoReembolsosService consultarPosicaoReembolsosService;
	private FilialService filialService;
	private ClienteService clienteService;
	private DomainValueService domainValueService;
	private ConfiguracoesFacade configuracoesFacade;
	private ChequeReembolsoService chequeReembolsoService;

	/**
	 * Detalhamento do recibo de reembolso
	 * 
	 * @param id
	 * @return
	 */
	public Map<String, Object> findByIdPosicaoReembolso(Long id) {
		TypedFlatMap recibo = consultarPosicaoReembolsosService.findByIdPosicaoReembolso((Long)id);
		if (recibo != null) {
			Map<String, Object> result = new HashMap<String, Object>();
			result.put("idReciboReembolso", recibo.get("idReciboReembolso"));
			result.put("sgFilialOrigemDoctoServico", recibo.get("doctoServicoByIdDoctoServReembolsado.filialByIdFilialOrigem.sgFilial"));
			result.put("idFilialOrigemDoctoServico", recibo.get("doctoServicoByIdDoctoServReembolsado.filialByIdFilialOrigem.idFilial"));
			result.put("idDoctoServicoDoctoServico", recibo.get("doctoServicoByIdDoctoServReembolsado.idDoctoServico"));
			result.put("dsTpDocumentoServicoDoctoServico", recibo.get("doctoServicoByIdDoctoServReembolsado.tpDocumentoServico.description"));
			result.put("tpDocumentoServicoDoctoServico", recibo.get("doctoServicoByIdDoctoServReembolsado.tpDocumentoServico.value"));
			result.put("nrDoctoServicoDoctoServico", recibo.get("doctoServicoByIdDoctoServReembolsado.nrDoctoServico"));
			result.put("dsTpDocumentoServicoReciboReembolso", recibo.get("tpDocumentoServico.description"));
			result.put("tpDocumentoServicoReciboReembolso", recibo.get("tpDocumentoServico.value"));
			result.put("nrDoctoServicoReciboReembolso", recibo.get("nrDoctoServico"));
			result.put("sgFilialOrigemReciboReembolso", recibo.get("filialByIdFilialOrigem.sgFilial"));
			result.put("idFilialOrigemReciboReembolso", recibo.get("filialByIdFilialOrigem.idFilial"));
			result.put("sgFilialOrigem", recibo.get("filialByIdFilialOrigem.sgFilial"));
			result.put("nmFantasiaOrigem", recibo.get("filialByIdFilialOrigem.pessoa.nmFantasia"));
			result.put("sgFilialDestino", recibo.get("filialByIdFilialDestino.sgFilial"));
			result.put("nmFantasiaDestino", recibo.get("filialByIdFilialDestino.pessoa.nmFantasia"));
			result.put("dhEmissao", recibo.get("dhEmissao"));
			result.put("vlReembolso", recibo.get("vlReembolso"));
			result.put("nmPessoaRemetente", recibo.get("doctoServicoByIdDoctoServReembolsado.clienteByIdClienteRemetente.pessoa.nmPessoa"));
			result.put("nmPessoaDestinatario", recibo.get("doctoServicoByIdDoctoServReembolsado.clienteByIdClienteDestinatario.pessoa.nmPessoa"));
			result.put("dsTpSituacaoRecibo", recibo.get("tpSituacaoRecibo.description"));
			
			result.put("nrIdentificacaoDestinatario",
				FormatUtils.formatIdentificacao(
						 recibo.getString("doctoServicoByIdDoctoServReembolsado.clienteByIdClienteDestinatario.pessoa.tpIdentificacao.value")					
						,recibo.getString("doctoServicoByIdDoctoServReembolsado.clienteByIdClienteDestinatario.pessoa.nrIdentificacao"))
			);
			
			result.put("nrIdentificacaoRemetente",
				FormatUtils.formatIdentificacao(
						 recibo.getString("doctoServicoByIdDoctoServReembolsado.clienteByIdClienteRemetente.pessoa.tpIdentificacao.value")					
						,recibo.getString("doctoServicoByIdDoctoServReembolsado.clienteByIdClienteRemetente.pessoa.nrIdentificacao"))
			);
			
		
			if (recibo.get("sgMoeda") != null) {
				StringBuilder moeda = new StringBuilder()
				.append(recibo.getString("sgMoeda"))
				.append(" ")
				.append(recibo.getString("dsSimbolo"));
				
				result.put("sgMoeda", moeda.toString());
			}
			return result;
		}
		return null;
	}
	
	/**
	 * Monta grid de rastreamento de eventos do recibo
	 * @param parametros
	 * @return
	 */
	public List findGridEvento(Long idReciboReembolso){
		List result = new ArrayList(10);
								
		//Linha 1 - Mercadoria no manifesto de entrega
		Map item = consultarPosicaoReembolsosService.findPosReciboMercadoriaManifestoEntrega(idReciboReembolso);
		addLinhaRastreamento(result, criaLinhaRastreamento(item, "mercadoriaManifestoEntrega", "dhEmissaoManifesto"));
		
		//Lina 2 - Aguardando Confirmação dos Cheques
		item = consultarPosicaoReembolsosService.findPosReciboAguardaCheques(idReciboReembolso);
		addLinhaRastreamento(result, criaLinhaRastreamento(item, "aguardandoConfirmCheques", "dhBaixa"));
		
		//Linha 3 - Cheques Digitados (Recebimento do reembolso no destinatário)
		item = consultarPosicaoReembolsosService.findPosReciboRecebimento(idReciboReembolso);
		addLinhaRastreamento(result, criaLinhaRastreamento(item, "chequesDigitados", "dhFechamento"));
				
		List posMir = consultarPosicaoReembolsosService.findPosReciboMIR(idReciboReembolso);
					 
		Map mir = getTpMir(posMir, "EA");
		//Linha 4 - MIR da entrega para o administrativo
		addLinhaRastreamento(result, criaLinhaRastreamento(mir, "MIREntregaAdministrativo", "dhEnvio"));
		//Linha 5 - Recebimento da MIR no administrativo
		addLinhaRastreamento(result, criaLinhaRastreamento(mir, "recebimentoMIRAdministrativo", "dhRecebimento"));
					
		mir = getTpMir(posMir, "DO");
		//Linha 6 - MIR do destino para origem
		addLinhaRastreamento(result, criaLinhaRastreamento(mir, "MIRDestinoOrigem", "dhEnvio"));
		//Linha 7 - Recebimento da MIR na origem
		addLinhaRastreamento(result, criaLinhaRastreamento(mir, "recebimentoMIROrigem", "dhRecebimento"));
			
		mir = getTpMir(posMir, "AE");
		//Linha 8 - MIR do administrativo para entrega
		addLinhaRastreamento(result, criaLinhaRastreamento(mir, "MIRAdministrativoEntrega", "dhEnvio"));
		//Linha 9 - Recebimento da MIR na entrega
		addLinhaRastreamento(result, criaLinhaRastreamento(mir, "recebimentoMIREntrega", "dhRecebimento"));			
		
		//Linha 10 - Reembolso no manifesto de entrega
		item = consultarPosicaoReembolsosService.findPosReciboManifestoEntrega(idReciboReembolso);
		addLinhaRastreamento(result, criaLinhaRastreamento(item, "reembolsoManifestoEntrega", "dhEmissaoManifesto"));
		
		//Linha 11 - Entrega do reembolso ao cliente
		item = consultarPosicaoReembolsosService.findPosReciboEntregaCliente(idReciboReembolso);
		addLinhaRastreamento(result, criaLinhaRastreamento(item, "entregaReembolsoCliente", "dhBaixa"));
			
		//Linha 12 - Reembolso Cancelado
		item = consultarPosicaoReembolsosService.findPosReembolsoCancelado(idReciboReembolso);
		addLinhaRastreamento(result, criaLinhaRastreamento(item, "reembolsoCancelado", "dhCancelamento"));
		
		//Linha 13 - Mercadoria Devolvida
		item = consultarPosicaoReembolsosService.findPosMercadoriaDevolvida(idReciboReembolso);
		addLinhaRastreamento(result, criaLinhaRastreamento(item, "mercadoriaDevolvida", "dhEmissao"));
		
		return result;
	}
	
	/**
	 * Monta grid de cheques do recibo
	 * @param parametros
	 * @return
	 */
	public List findGridCheque(Long idReciboReembolso){
		return chequeReembolsoService.findPaginatedChequesByIdReembolso(idReciboReembolso);
	}
							
	public ResultSetPage findGridPosicaoReembolso(Map<String, Object> parametros){
		if (!validaAcessoUsuario(parametros)) {
			throw new BusinessException("LMS-09085");		
		}
		ResultSetPage rsp = consultarPosicaoReembolsosService.findPaginated(prepareCriteria(parametros));		
		FilterList filterResultSetPage = new FilterResultSetPage(rsp) {
			public Map filterItem(Object item) {
				Object[] linha = (Object[]) item;
				TypedFlatMap retorno = new TypedFlatMap();
				int i = 0;
				
				retorno.put("idReciboReembolso", linha[i++]);    			   			
				retorno.put("tpDocumentoServico", ((DomainValue)linha[i++]).getDescription());   	
				retorno.put("sgFilial", linha[i++]);
				retorno.put("nrDoctoServico", linha[i++]);
				retorno.put("tpDocumentoServicoRR", ((DomainValue)linha[i++]).getDescription());		 
				retorno.put("sgFilialRR", linha[i++]);
				retorno.put("sgFilialOrigem", linha[i++]);
				retorno.put("nrDoctoServicoRR", linha[i++]);
				retorno.put("dhEmissao", linha[i++]);
				retorno.put("nmFilialOrigem", linha[i++]);
				retorno.put("sgFilialDestino", linha[i++]);
				retorno.put("nmFilialDestino", linha[i++]);	    			
				retorno.put("tpIdentificacaoRemetente", linha[i++]);   			   
				retorno.put("nrIdentificacaoRemetente", FormatUtils.formatIdentificacao((String)linha[i-1], (String)linha[i++]));
				retorno.put("nmRemetente", linha[i++]);
				retorno.put("tpIdentificacaoDestinatario", linha[i++]); 
				retorno.put("nrIdentificacaoDestinatario", FormatUtils.formatIdentificacao((String)linha[i-1], (String)linha[i++]));				
				retorno.put("nmDestinatario", linha[i++]);
				if(linha[i]!= null)
					retorno.put("tpSituacao", ((DomainValue)linha[i++]).getDescription());
				retorno.put("vlReembolso", FormatUtils.formatDecimal("#,##0.00", (BigDecimal)linha[i++], true));															
				retorno.put("sgMoeda", linha[i++]);
				retorno.put("dsSimbolo", linha[i++]);
				return retorno;
			}
		};
		return (ResultSetPage) filterResultSetPage.doFilter();
		
	}
	
	public Integer getRowCountGridPosicaoReembolso(Map<String, Object> criteria) {	
		if (validaAcessoUsuario(criteria)) {
			return consultarPosicaoReembolsosService.getRowCount(prepareCriteria(criteria));
		}
		
		return Integer.valueOf(0);
	}
	
	/**
	 * Consulta a filial a partir dos criterios informados.
	 * 
	 * @param criteria criterios de pesquisa
	 * @return filiais que satisfaçam os critérios.
	 */
	public List<Map<String, Object>> findLookupFilial(Map criteria) {
		List<Filial> filiais = filialService.findLookup(criteria);
		if (filiais != null) {
			List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();
			for (Filial filial : filiais) {
				Map<String, Object> mapFilial = new HashMap<String, Object>();
				mapFilial.put("sgFilial", filial.getSgFilial());
				mapFilial.put("idFilial", filial.getIdFilial());
				mapFilial.put("nmFantasia", filial.getPessoa().getNmFantasia());
				result.add(mapFilial);
			}
			return result;
		}
		return null;
    }
	
    /**
     * Busca os clientes de acordo com os criterios informados.
     * 
     * @param criteria
     * @return
     */
	public List<Map<String, Object>> findLookupCliente(Map criteria) {
		List<Map<String, Object>> clientes = clienteService.findClienteByNrIdentificacao((String) criteria.get("nrIdentificacao"));
		if (clientes != null) {
			for(Map cliente : clientes) {
				cliente.remove("tpCliente");
				Map pessoa = (Map) cliente.remove("pessoa");
				if (pessoa != null) {
					cliente.put("nmPessoa", pessoa.get("nmPessoa"));
					cliente.put("nrIdentificacao", pessoa.remove("nrIdentificacaoFormatado"));
				}
			}
		}
		return clientes;
	}
	
	/**
	 * COnsulta os tipos de documentos de servico da tag de docto servico
	 * @param criteria
	 * @return
	 */
	public List findTipoDocumentoServico(Map criteria) {
	    	List dominiosValidos = new ArrayList();
	    	dominiosValidos.add("CTR");	    	
	    	dominiosValidos.add("MDA");
	    	dominiosValidos.add("NFT");	    	    	
	    	List retorno = domainValueService.findByDomainNameAndValues("DM_TIPO_DOCUMENTO_SERVICO", dominiosValidos);
	    	return retorno;
	}
	
	public List findTipoDocumentoServicoRRE(Map criteria) {
    	List dominiosValidos = new ArrayList();    	
    	dominiosValidos.add("RRE");	    	    	
    	List retorno = domainValueService.findByDomainNameAndValues("DM_TIPO_DOCUMENTO_SERVICO", dominiosValidos);
    	return retorno;
	}
	
	public List findLookupFilialByDocumentoServico(Map criteria) {
    	List list = filialService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		Filial filial = (Filial)iter.next();
    		TypedFlatMap typedFlatMap = new TypedFlatMap();
    		typedFlatMap.put("idFilial", filial.getIdFilial());
    		typedFlatMap.put("sgFilial", filial.getSgFilial());
    		typedFlatMap.put("pessoa.nmFantasia", filial.getPessoa().getNmFantasia());
    		retorno.add(typedFlatMap);
    	}
    	return retorno;
	}
	 
	/*
	 * METODOS PRIVADOS
	 */
	
	/**
	 * Valida se o usuario tem acesso as filiais preenchidas na tela e as filiais de origem e operacional do documento de servico
	 * @param parametros
	 */
	private boolean validaAcessoUsuario(Map<String, Object> parametros){
		Long idFilial = SessionUtils.getFilialSessao().getIdFilial();
		
		if(!SessionUtils.isFilialSessaoMatriz()){
			Long idFilialOriginal = (Long) parametros.get("idFilialOrigem");
			Long idFilialDestino = (Long) parametros.get("idFilialDestino");
			
			if ((idFilialOriginal != null && idFilial.equals(idFilialOriginal)) 
					|| (idFilialDestino != null && idFilial.equals(idFilialDestino))) {
				return true;
			}
		} else {
			return true;
		}
		return false;
	}
	
	/**
	 * Retorna o map de um MIR de dentro da list
	 * 
	 * @param listMir
	 * @param tpMir
	 * @return
	 */
	private Map getTpMir(List listMir, String tpMir){
		if (listMir != null){
			for (Iterator iter = listMir.iterator(); iter.hasNext();) {
				Map mir = (Map) iter.next();
				if (((DomainValue) mir.get("tpMir")).getValue().equals(tpMir)){
					return mir;
				}			
			}
		}
		return null;
	}
	
	/**
	 * Adiciona uma linha a grid de rastreamento de eventos da filial
	 * 
	 * @param rastreamento
	 * @param linha
	 */
	private void addLinhaRastreamento(List rastreamento, Map linha){
		if (linha != null){
			rastreamento.add(linha);
		}
	}
	
	/**
	 * Cria uma linha da grid de rastreamento de eventos do recibo
	 * 
	 * @param linha
	 * @param evento
	 * @param dhEvento
	 * @return
	 */
	private Map<String, Object> criaLinhaRastreamento(Map linha, String evento, String dhEvento){
		Map<String, Object> result = new HashMap<String, Object>();				
		result.put("dsEvento", configuracoesFacade.getMensagem(evento));
		if (linha != null && linha.get(dhEvento) != null) {
			result.put("dhEvento", linha.get(dhEvento));
			result.put("nrDocumento", linha.get("nrDocumento"));
			result.put("sgFilial", linha.get("sgFilial"));			
		}
		return result;
	}
	
	private TypedFlatMap prepareCriteria(Map<String, Object> criteria) {
		TypedFlatMap result = new TypedFlatMap();
		result.put("_currentPage", criteria.get("_currentPage"));
		result.put("_pageSize", criteria.get("_pageSize"));
		result.put("_order", criteria.get("_order"));
		result.put("filialByIdFilialOrigem.idFilial", criteria.get("idFilialOrigem"));
		result.put("filialByIdFilialDestino.idFilial", criteria.get("idFilialDestino"));
		result.put("clienteByIdClienteRemetente.idCliente", criteria.get("idClienteRemetente"));
		result.put("clienteByIdClienteDestinatario.idCliente", criteria.get("idClienteDestinatario"));
		result.put("idDoctoServico", criteria.get("idDoctoServicoDoctoServico"));
		result.put("doctoServico.tpDocumentoServico", criteria.get("tpDocumentoServicoDoctoServico"));
		result.put("doctoServico.filialByIdFilialOrigem.idFilial", criteria.get("idFilialOrigemDoctoServico"));
		result.put("reciboReembolso.idDoctoServico", criteria.get("idDoctoServicoReciboReembolso"));
		result.put("reciboReembolso.filialByIdFilialOrigem.idFilial", criteria.get("idFilialOrigemReciboReembolso"));
		result.put("dtEmissaoInicial", criteria.get("dtEmissaoInicial"));
		result.put("dtEmissaoFinal", criteria.get("dtEmissaoFinal"));
		result.put("tpSituacao", criteria.get("tpSituacao"));
		return result;
	}
	
	/*
	 * GETTERS E SETTERS
	 */

	public void setConsultarPosicaoReembolsosService(ConsultarPosicaoReembolsosService consultarPosicaoReembolsosService) {
		this.consultarPosicaoReembolsosService = consultarPosicaoReembolsosService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}
	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}
	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}
	public void setChequeReembolsoService(ChequeReembolsoService chequeReembolsoService) {
		this.chequeReembolsoService = chequeReembolsoService;
	}
}