package com.mercurio.lms.entrega.swt.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.service.AgenciaBancariaService;
import com.mercurio.lms.entrega.model.service.ChequeReembolsoService;
import com.mercurio.lms.entrega.model.service.ReciboReembolsoService;
import com.mercurio.lms.expedicao.model.service.DoctoServicoService;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.service.ClienteService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.entrega.swt.manterReembolsosAction"
 */

public class ManterReembolsosAction extends CrudAction {
	
	private ClienteService clienteService;
	private FilialService filialService;
	private DomainValueService domainValueService;
	private DoctoServicoService doctoServicoService;
	private AgenciaBancariaService agenciaBancariaService;
	private ChequeReembolsoService chequeReembolsoService;
	private ReciboReembolsoService reciboReembolsoService;
		
	public void setReciboReembolsoService(ReciboReembolsoService reciboReembolsoService) {
		this.reciboReembolsoService = reciboReembolsoService;
	}
	public ChequeReembolsoService getChequeReembolsoService() {
		return chequeReembolsoService;
	}
	public void setChequeReembolsoService(ChequeReembolsoService chequeReembolsoService) {
		this.chequeReembolsoService = chequeReembolsoService;
	}
	public AgenciaBancariaService getAgenciaBancariaService() {
		return agenciaBancariaService;
	}
	public void setAgenciaBancariaService(AgenciaBancariaService agenciaBancariaService) {
		this.agenciaBancariaService = agenciaBancariaService;
	}
	public DoctoServicoService getDoctoServicoService() {
		return doctoServicoService;
	}
	public void setDoctoServicoService(DoctoServicoService doctoServicoService) {
		this.doctoServicoService = doctoServicoService;
	}
	public DomainValueService getDomainValueService() {
		return domainValueService;
	}
	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}
	public FilialService getFilialService() {
		return filialService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public ClienteService getClienteService() {
		return clienteService;
	}
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}
	
	
    public List findLookupCLiente(Map criteria){
    	HashMap pessoa = new HashMap();
    	pessoa.put("nrIdentificacao", criteria.get("nrIdentificacao"));
    	criteria.put("pessoa", pessoa);
    	List list = clienteService.findLookup(criteria);
    	
    	List returnList = new ArrayList();
    	for (Object obj : list) {
    		HashMap map = new HashMap();
    		Cliente cliente  = (Cliente)obj;
    		map.put("idCliente", cliente.getIdCliente());
    		if (cliente.getPessoa() != null) {
        		map.put("nrIdentificacao", FormatUtils.formatIdentificacao(cliente.getPessoa().getTpIdentificacao(), cliente.getPessoa().getNrIdentificacao()));
        		map.put("nmPessoa", cliente.getPessoa().getNmPessoa());
    		}
			returnList.add(map);
		}
    	return returnList;
    }


    public List findLookupFilial(TypedFlatMap criteria){
    	List list = filialService.findLookupFilial(criteria);
    	List returnList = new ArrayList();
		for (Iterator iter = list.iterator(); iter.hasNext();) {
			Map mapResult = (Map)iter.next();
			HashMap mapFilial = new HashMap();
			Map mapPessoa = (Map)mapResult.get("pessoa");
			mapFilial.put("idFilial", mapResult.get("idFilial"));
			mapFilial.put("sgFilial", mapResult.get("sgFilial"));
			if (mapPessoa != null) {
				mapFilial.put("nmFantasia", mapPessoa.get("nmFantasia"));
			}
			returnList.add(mapFilial);	
		}    	
    	return returnList;
    }

	
	public ResultSetPage findPaginated(TypedFlatMap criteria) {
		adaptaCriteria(criteria);
		ResultSetPage rsp = reciboReembolsoService.findPaginated(criteria);
		for (Object obj : rsp.getList()) {
			Map map = (Map) obj;
			Map mapFilialOrigem = (Map) map.get("filialByIdFilialOrigem");
			map.put("idFilial", mapFilialOrigem.get("idFilial"));
			map.put("sgFilial", mapFilialOrigem.get("sgFilial"));
			
			Map pessoaFilialOrigem = (Map) mapFilialOrigem.get("pessoa");			
			map.put("nmFantasia", pessoaFilialOrigem.get("nmFantasia"));
			
			map.put("tpDoctoServico", map.remove("tpDocumentoServico"));
		}
		return rsp;
	}
	
	public Integer getRowCount(TypedFlatMap criteria) {
		adaptaCriteria(criteria);
		return reciboReembolsoService.getRowCount(criteria);
	}
	
	private TypedFlatMap adaptaCriteria(TypedFlatMap criteria) {
		criteria.put("filialDestino.idFilial", criteria.get("idFilialDestino"));
		criteria.remove("idFilialDestino");
		criteria.put("filialByIdFilialOrigem.idFilial", criteria.get("idFilialOrigem"));
		criteria.remove("idFilialOrigem");
		criteria.put("idDoctoReembolso", criteria.get("idDoctoServico"));
		criteria.remove("idDoctoServico");
		criteria.put("doctoServicoByIdDoctoServReembolsado.tpDocumentoServico", criteria.get("tpDocumentoServico"));
		criteria.remove("tpDocumentoServico");
		criteria.put("clienteByIdClienteRemetente.idCliente", criteria.get("idClienteRemetente"));
		criteria.remove("idClienteRemetente");
		criteria.put("clienteByIdClienteDestinatario.idCliente", criteria.get("idClienteDestinatario"));
		criteria.remove("idClienteDestinatario");
		criteria.put("periodoEmissaoInicial", criteria.get("periodoEmissaoInicial"));		
		criteria.put("periodoEmissaoFinal", criteria.get("periodoEmissaoFinal"));		
		return criteria;
	}
}
