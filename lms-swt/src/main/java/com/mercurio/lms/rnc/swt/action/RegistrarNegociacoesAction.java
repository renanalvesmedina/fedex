package com.mercurio.lms.rnc.swt.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.FindDefinition;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.rnc.model.Negociacao;
import com.mercurio.lms.rnc.model.OcorrenciaNaoConformidade;
import com.mercurio.lms.rnc.model.service.NegociacaoService;
import com.mercurio.lms.rnc.model.service.OcorrenciaNaoConformidadeService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.rnc.swt.registrarNegociacoesAction"
 */

public class RegistrarNegociacoesAction extends CrudAction {
	
	private NegociacaoService negociacaoService;
	private OcorrenciaNaoConformidadeService ocorrenciaNaoConformidadeService;
	

	public void setNegociacao(NegociacaoService negociacaoService) {
		this.negociacaoService = negociacaoService;
	}
	public void setOcorrenciaNaoConformidadeService(OcorrenciaNaoConformidadeService ocorrenciaNaoConformidadeService) {
		this.ocorrenciaNaoConformidadeService = ocorrenciaNaoConformidadeService;
	}	


    public ResultSetPage findPaginatedCustom(TypedFlatMap criteria) {
    	Long idNaoConformidade = criteria.getLong("idNaoConformidade"); 
    	Long idOcorrenciaNaoConformidade = criteria.getLong("idOcorrenciaNaoConformidade");
    	ResultSetPage rsp = negociacaoService.findPaginatedCustom(idNaoConformidade, idOcorrenciaNaoConformidade, FindDefinition.createFindDefinition(criteria));
    	return rsp;
    }


    public Integer getRowCountCustom(TypedFlatMap criteria) {
    	Long idNaoConformidade = criteria.getLong("idNaoConformidade"); 
    	Long idOcorrenciaNaoConformidade = criteria.getLong("idOcorrenciaNaoConformidade");
    	return negociacaoService.getRowCountCustom(idNaoConformidade, idOcorrenciaNaoConformidade);
    }

    
    public Map findById(java.lang.Long id) {
    	Negociacao negociacao = negociacaoService.findById(id);
    	Map map = new HashMap();
    	map.put("idNegociacao", negociacao.getIdNegociacao());

    	map.put("idFilialNaoConformidade", negociacao.getOcorrenciaNaoConformidade().getNaoConformidade().getFilial().getIdFilial());
    	map.put("sgFilialNaoConformidade", negociacao.getOcorrenciaNaoConformidade().getNaoConformidade().getFilial().getSgFilial());

    	map.put("idOcorrenciaNaoConformidade", negociacao.getOcorrenciaNaoConformidade().getIdOcorrenciaNaoConformidade());
    	map.put("nrOcorrenciaNc", negociacao.getOcorrenciaNaoConformidade().getNrOcorrenciaNc().toString() 
    			+ " - " + negociacao.getOcorrenciaNaoConformidade().getMotivoAberturaNc().getDsMotivoAbertura());

    	map.put("idNaoConformidade", negociacao.getOcorrenciaNaoConformidade().getNaoConformidade().getIdNaoConformidade());
    	map.put("nrNaoConformidade", negociacao.getOcorrenciaNaoConformidade().getNaoConformidade().getNrNaoConformidade());
    	
    	map.put("dhNegociacao", negociacao.getDhNegociacao());

    	map.put("nmUsuario", negociacao.getUsuario().getNmUsuario());

    	map.put("nrRncLegado", negociacao.getOcorrenciaNaoConformidade().getNrRncLegado());
    	map.put("sgFilialLegado", negociacao.getOcorrenciaNaoConformidade().getFilialByIdFilialLegado().getSgFilial());

    	map.put("sgFilialUsuario", negociacao.getFilial().getSgFilial());
    	map.put("nmFantasiaFilialUsuario", negociacao.getFilial().getPessoa().getNmFantasia());

    	map.put("dsOcorrenciaNc", negociacao.getOcorrenciaNaoConformidade().getDsOcorrenciaNc());

    	map.put("dsNegociacao", negociacao.getDsNegociacao());
    	return map;
    }


    public List findOcorrenciaNaoConformidade(TypedFlatMap parameters) {
    	List newOcorrenciasNC = new ArrayList();
    	Long idNaoConformidade = parameters.getLong("idNaoConformidade");
    	if (idNaoConformidade != null){
    		Map mapNc = new HashMap();
    		mapNc.put("idNaoConformidade", idNaoConformidade);

    		Map criteria = new HashMap();
    		criteria.put("naoConformidade", mapNc);

	        List campoOrdenacao = new ArrayList();
	        campoOrdenacao.add("nrOcorrenciaNc:asc");
	        campoOrdenacao.add("motivoAberturaNc_.dsMotivoAbertura:asc");

	    	List ocorrenciasNC = ocorrenciaNaoConformidadeService.findListByCriteria(criteria, campoOrdenacao);
	    	for (Iterator iter = ocorrenciasNC.iterator(); iter.hasNext();) {
	    		OcorrenciaNaoConformidade onc = (OcorrenciaNaoConformidade) iter.next();
	    		TypedFlatMap tfm = new TypedFlatMap();
	    		tfm.put("idOcorrenciaNaoConformidade", onc.getIdOcorrenciaNaoConformidade());
	    		tfm.put("nrOcorrenciaNc", onc.getNrOcorrenciaNc().toString() + " - " + onc.getMotivoAberturaNc().getDsMotivoAbertura());
	    		tfm.put("dsOcorrenciaNc", onc.getDsOcorrenciaNc());
	    		newOcorrenciasNC.add(tfm);
			}
    	}
    	return newOcorrenciasNC;
    }
}