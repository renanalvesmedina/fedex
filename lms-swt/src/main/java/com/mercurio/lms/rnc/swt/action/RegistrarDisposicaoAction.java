package com.mercurio.lms.rnc.swt.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.rnc.model.AcaoCorretiva;
import com.mercurio.lms.rnc.model.CausaNaoConformidade;
import com.mercurio.lms.rnc.model.Disposicao;
import com.mercurio.lms.rnc.model.MotivoDisposicao;
import com.mercurio.lms.rnc.model.OcorrenciaNaoConformidade;
import com.mercurio.lms.rnc.model.service.AcaoCorretivaService;
import com.mercurio.lms.rnc.model.service.CausaNaoConformidadeService;
import com.mercurio.lms.rnc.model.service.DisposicaoService;
import com.mercurio.lms.rnc.model.service.MotivoDisposicaoService;
import com.mercurio.lms.rnc.model.service.OcorrenciaNaoConformidadeService;
import com.mercurio.lms.util.FormatUtils;

/**
 * Generated by: ADSM ActionGenerator 
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.rnc.swt.registrarDisposicaoAction"
 */

public class RegistrarDisposicaoAction extends CrudAction {

	private AcaoCorretivaService acaoCorretivaService;
	private CausaNaoConformidadeService causaNaoConformidadeService;
	private DisposicaoService disposicaoService;
	private MotivoDisposicaoService motivoDisposicaoService;
	private OcorrenciaNaoConformidadeService ocorrenciaNaoConformidadeService;


	public void setAcaoCorretivaService(AcaoCorretivaService acaoCorretivaService) {
		this.acaoCorretivaService = acaoCorretivaService;
	}
	public void setCausaNaoConformidadeService(CausaNaoConformidadeService causaNaoConformidadeService) {
		this.causaNaoConformidadeService = causaNaoConformidadeService;
	}
	public void setDisposicaoService(DisposicaoService disposicaoService) {
		this.disposicaoService = disposicaoService;
	}
	public void setMotivoDisposicaoService(MotivoDisposicaoService motivoDisposicaoService) {
		this.motivoDisposicaoService = motivoDisposicaoService;
	}
	public void setOcorrenciaNaoConformidadeService(OcorrenciaNaoConformidadeService ocorrenciaNaoConformidadeService) {
		this.ocorrenciaNaoConformidadeService = ocorrenciaNaoConformidadeService;
	}


	/**
     * Retorna um TypedFlatMap  contendo o dados necessarios para popular a tela.
     * 
     * @param criteria
     * @return
     */
    public TypedFlatMap findDisposicaoByIdOcorrenciaNaoConformidade(Long idOcorrenciaNaoConformidade) {
    	TypedFlatMap map = disposicaoService.findDisposicaoByIdOcorrenciaNaoConformidade(idOcorrenciaNaoConformidade);
    	List acoesCorretivas = acaoCorretivaService.findAcoesCorretivasByIdOcorrenciaNC(idOcorrenciaNaoConformidade);
    	List retornoAcoes = new ArrayList();
    	for (Iterator iter = acoesCorretivas.iterator(); iter.hasNext();) {
			Map mapAcaoCorretiva = new HashMap();
    		AcaoCorretiva acaoCorretiva = (AcaoCorretiva) iter.next();
    		mapAcaoCorretiva.put("idAcaoCorretiva", acaoCorretiva.getIdAcaoCorretiva());
    		mapAcaoCorretiva.put("dsAcaoCorretiva" , acaoCorretiva.getDsAcaoCorretiva());
    		retornoAcoes.add(mapAcaoCorretiva);
		}
    	map.put("acoesCorretivas", retornoAcoes);
    	return map;
    }


	/**
	 * Recupera uma instância de <code>Disposicao</code> a partir do ID.
	 *
	 * @param id representa a entidade que deve ser localizada.
	 * @return Instância que possui o id informado.
	 * @throws 
	 */
    public Disposicao findById(java.lang.Long id) {
        return (Disposicao)super.findById(id);
    }

    /**
     * Busca 'Ocorrencias de Não Conformidade' que sejam de uma 'Não conformidade'
     * em específico
     * 
     * @param criteria
     * @return
     */
    public List findOcorrenciaNaoConformidade(Map criteria) {
        
    	List campoOrdenacao = new ArrayList();
        campoOrdenacao.add("nrOcorrenciaNc:asc");
        campoOrdenacao.add("motivoAberturaNc_.dsMotivoAbertura:asc");
    	
        //Adiciona o criterio para pegar apenas ocorrencias que estejam abertas.
    	criteria.put("tpStatusOcorrenciaNc", "A");
    	List ocorrenciasNC = ocorrenciaNaoConformidadeService.findListByCriteria(criteria, campoOrdenacao);
    	List newOcorrenciasNC = new ArrayList();
    	
    	if (ocorrenciasNC.size()<1) throw new BusinessException("LMS-12007");
    	
    	for (Iterator iter = ocorrenciasNC.iterator(); iter.hasNext();) {
    		OcorrenciaNaoConformidade onc = (OcorrenciaNaoConformidade) iter.next();
    		
    		Map mapOcorrenciasNC = new HashMap();
    		StringBuffer strOcorrencia = new StringBuffer()
	    		.append(onc.getNrOcorrenciaNc().toString())
	    		.append(" - ")
	    		.append(onc.getMotivoAberturaNc().getDsMotivoAbertura())
	    		.append(" - ")
	    		.append(onc.getFilialByIdFilialLegado().getSgFilial())
	    		.append(" ")
	    		.append(FormatUtils.formatLongWithZeros(Long.valueOf(onc.getNrOcorrenciaNc().intValue()), "00000000")); 

    		mapOcorrenciasNC.put("idOcorrenciaNaoConformidade", onc.getIdOcorrenciaNaoConformidade());
    		mapOcorrenciasNC.put("nrOcorrenciaNc", strOcorrencia.toString());
    		mapOcorrenciasNC.put("dsOcorrenciaNc", onc.getDsOcorrenciaNc());
    		
    		newOcorrenciasNC.add(mapOcorrenciasNC);
		}
    	
    	return newOcorrenciasNC; 
    }
    
    
    
    /**
     * Carregas campos
     * Busca List com os Motivos Disposição relacionados com as 'Ocorrencia Não Conformidade'
     * 
     * @param criteria ids de 'Ocorrencia Não Conformidade'
     * @return List com os Motivos Disposição
     *  
     *
     */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public Map findFieldsByOcorrenciaNC(List criteria) {
    	
    	List causasNaoConformidade = causaNaoConformidadeService.findCausasNaoConformidadeByOcorrenciaNC(criteria);
    	List acoesCorretivas = acaoCorretivaService.findAcoesCorretivasByOcorrenciaNC(criteria);
    	List motivosDisposicao = getMotivosDisposicaoEquivalentes(criteria, motivoDisposicaoService.findMotivoDisposicaoByOcorrenciaNC(criteria));
    	
    	List causasNaoConformidadeView = new ArrayList();
    	List acoesCorretivasView = new ArrayList();
    	List motivosDisposicaoView = new ArrayList();
    	
    	Map mapCausaNaoConformidade = null;
    	
    	for (Iterator iter = causasNaoConformidade.iterator(); iter.hasNext();) {
			CausaNaoConformidade causaNaoConformidade  = (CausaNaoConformidade) iter.next();
			
			mapCausaNaoConformidade = new HashMap();
			mapCausaNaoConformidade.put("idCausaNaoConformidade", causaNaoConformidade.getIdCausaNaoConformidade());
			mapCausaNaoConformidade.put("dsCausaNaoConformidade", causaNaoConformidade.getDsCausaNaoConformidade());
			
			causasNaoConformidadeView.add(mapCausaNaoConformidade);
		}
    	
    	Map mapAcaoCorretiva = null;
    	for (Iterator iter = acoesCorretivas.iterator(); iter.hasNext();) {
			AcaoCorretiva acaoCorretiva = (AcaoCorretiva) iter.next();
			
			mapAcaoCorretiva = new HashMap();
			mapAcaoCorretiva.put("idAcaoCorretiva", acaoCorretiva.getIdAcaoCorretiva());
			mapAcaoCorretiva.put("dsAcaoCorretiva", acaoCorretiva.getDsAcaoCorretiva());
			
			acoesCorretivasView.add(mapAcaoCorretiva);
		}
    	
    	Map mapMotivoDisposicao = null;
    	for (Iterator iter = motivosDisposicao.iterator(); iter.hasNext();) {
			MotivoDisposicao motivoDisposicao = (MotivoDisposicao) iter.next();
			
			mapMotivoDisposicao = new HashMap();
			mapMotivoDisposicao.put("idMotivoDisposicao", motivoDisposicao.getIdMotivoDisposicao());
			mapMotivoDisposicao.put("dsMotivo", motivoDisposicao.getDsMotivo());
			
			motivosDisposicaoView.add(mapMotivoDisposicao);
		}
    	
    	Map mapFields = new HashMap();
    	mapFields.put("causaNaoConformidade", causasNaoConformidadeView);
    	mapFields.put("acoesCorretivas", acoesCorretivasView);
    	mapFields.put("motivosDisposicao", motivosDisposicaoView);
    	
    	return mapFields;
    }

    /**
     * Busca os registros que sao equivalentes para os ids informados.
     * 
     * @param ids
     * @param resultQuery
     * @return
     */
    private List getMotivosDisposicaoEquivalentes(List ids, List resultQuery) {
    	if (ids.size()==1) return resultQuery; 
    	
    	List result = new ArrayList();
	    Long idAnterior = Long.valueOf(0);
		int count = 0;
		
		for (Iterator iter = resultQuery.iterator(); iter.hasNext();) {
			MotivoDisposicao motivoDisposicao = (MotivoDisposicao) iter.next();
			
			if(idAnterior.intValue()==0) idAnterior = motivoDisposicao.getIdMotivoDisposicao(); 
			
			if (motivoDisposicao.getIdMotivoDisposicao().intValue()!=idAnterior.intValue()) {
				count = 1;
				idAnterior = motivoDisposicao.getIdMotivoDisposicao();
			} else {
				count++;
				if (ids.size()==count) result.add(motivoDisposicao);
			}
		}
		return result;
	}
}