package com.mercurio.lms.rnc.swt.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.util.FilterList;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Moeda;
import com.mercurio.lms.configuracoes.model.service.MoedaService;
import com.mercurio.lms.rnc.model.CaractProdutoOcorrencia;
import com.mercurio.lms.rnc.model.CaracteristicaProduto;
import com.mercurio.lms.rnc.model.CausaNaoConformidade;
import com.mercurio.lms.rnc.model.DescricaoPadraoNc;
import com.mercurio.lms.rnc.model.FotoOcorrencia;
import com.mercurio.lms.rnc.model.MotivoAberturaNc;
import com.mercurio.lms.rnc.model.service.CaractProdutoOcorrenciaService;
import com.mercurio.lms.rnc.model.service.CaracteristicaProdutoService;
import com.mercurio.lms.rnc.model.service.CausaNaoConformidadeService;
import com.mercurio.lms.rnc.model.service.DescricaoPadraoNcService;
import com.mercurio.lms.rnc.model.service.DisposicaoService;
import com.mercurio.lms.rnc.model.service.FotoOcorrenciaService;
import com.mercurio.lms.rnc.model.service.MotivoAberturaNcService;
import com.mercurio.lms.rnc.model.service.NegociacaoService;
import com.mercurio.lms.rnc.model.service.OcorrenciaNaoConformidadeService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.rnc.swt.manterOcorrenciasNaoConformidadeAction"
 */

public class ManterOcorrenciasNaoConformidadeAction {
	
	private DomainValueService domainValueService;
	private OcorrenciaNaoConformidadeService ocorrenciaNaoConformidadeService;
	private CaracteristicaProdutoService caracteristicaProdutoService;
	private MotivoAberturaNcService motivoAberturaNcService;
	private DescricaoPadraoNcService descricaoPadraoNcService;
	private CausaNaoConformidadeService causaNaoConformidadeService;
	private MoedaService moedaService;
	private FotoOcorrenciaService fotoOcorrenciaService;
	private CaractProdutoOcorrenciaService caractProdutoOcorrenciaService;
	private NegociacaoService negociacaoService;
	private DisposicaoService disposicaoService;

	
	public void setDisposicaoService(DisposicaoService disposicaoService) {
		this.disposicaoService = disposicaoService;
	}
	public void setNegociacaoService(NegociacaoService negociacaoService) {
		this.negociacaoService = negociacaoService;
	}
	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}
	public void setOcorrenciaNaoConformidadeService(OcorrenciaNaoConformidadeService ocorrenciaNaoConformidadeService) {
		this.ocorrenciaNaoConformidadeService = ocorrenciaNaoConformidadeService;
	}
	public void setCaracteristicaProdutoService(CaracteristicaProdutoService caracteristicaProdutoService) {
		this.caracteristicaProdutoService = caracteristicaProdutoService;
	}
	public void setMotivoAberturaNcService(MotivoAberturaNcService motivoAberturaNcService) {
		this.motivoAberturaNcService = motivoAberturaNcService;
	}
	public void setDescricaoPadraoNcService(DescricaoPadraoNcService descricaoPadraoNcService) {
		this.descricaoPadraoNcService = descricaoPadraoNcService;
	}
	public void setCausaNaoConformidadeService(CausaNaoConformidadeService causaNaoConformidadeService) {
		this.causaNaoConformidadeService = causaNaoConformidadeService;
	}
	public void setMoedaService(MoedaService moedaService) {
		this.moedaService = moedaService;
	}
	public void setCaractProdutoOcorrenciaService(CaractProdutoOcorrenciaService caractProdutoOcorrenciaService) {
		this.caractProdutoOcorrenciaService = caractProdutoOcorrenciaService;
	}
	public void setFotoOcorrenciaService(FotoOcorrenciaService fotoOcorrenciaService) {
		this.fotoOcorrenciaService = fotoOcorrenciaService;
	}

	
    public TypedFlatMap findById(java.lang.Long id) {
    	TypedFlatMap tfm = ocorrenciaNaoConformidadeService.findOcorrenciaNaoConformidadeById(id);
    	
    	TypedFlatMap map = new TypedFlatMap();
    	map.put("idOcorrenciaNaoConformidade", tfm.get("idOcorrenciaNaoConformidade"));
    	map.put("dhInclusao", tfm.get("dhInclusao"));
    	map.put("tpStatusOcorrenciaNcDescription", tfm.get("tpStatusOcorrenciaNc.description"));
    	map.put("nrOcorrenciaNc", tfm.get("nrOcorrenciaNc"));
    	map.put("dsOcorrenciaNc", tfm.get("dsOcorrenciaNc"));
    	map.put("blCaixaReaproveitada", tfm.get("blCaixaReaproveitada"));
    	map.put("dsCaixaReaproveitada", tfm.get("dsCaixaReaproveitada"));
    	map.put("dsCausaNc", tfm.get("dsCausaNc"));
    	map.put("vlOcorrenciaNc", tfm.get("vlOcorrenciaNc"));
    	map.put("qtVolumes", tfm.get("qtVolumes"));
    	map.put("nrRncLegado", tfm.get("nrRncLegado"));
    	map.put("sgFilialLegado", tfm.get("filialByIdFilialLegado.sgFilial"));
    	map.put("idMotivoAberturaNc", tfm.get("motivoAberturaNc.idMotivoAberturaNc"));
    	map.put("dsMotivoAbertura", tfm.get("motivoAberturaNc.dsMotivoAbertura"));
    	map.put("idMoeda", tfm.get("moeda.idMoeda"));
    	map.put("idUsuario", tfm.get("usuario.idUsuario"));
    	map.put("nmUsuario", tfm.get("usuario.nmUsuario"));
    	map.put("idCausaNaoConformidade", tfm.get("causaNaoConformidade.idCausaNaoConformidade"));
    	map.put("idDescricaoPadraoNc", tfm.get("descricaoPadraoNc.idDescricaoPadraoNc"));
    	map.put("idEmpresa", tfm.get("empresa.idEmpresa"));
    	map.put("nrIdentificacaoEmpresa", tfm.get("empresa.pessoa.nrIdentificacao"));
    	map.put("nmPessoaEmpresa", tfm.get("empresa.pessoa.nmPessoa"));
    	map.put("idNaoConformidade", tfm.get("naoConformidade.idNaoConformidade"));
    	map.put("nrNaoConformidade", tfm.get("naoConformidade.nrNaoConformidade"));
    	map.put("dsMotivoAbertura", tfm.get("naoConformidade.dsMotivoAbertura"));
    	
    	map.put("idDoctoServico", tfm.get("naoConformidade.doctoServico.idDoctoServico"));
    	map.put("nrDoctoServico", tfm.get("naoConformidade.doctoServico.nrDoctoServico"));
    	map.put("tpDocumentoServico", tfm.get("naoConformidade.doctoServico.tpDocumentoServico.value"));
    	map.put("idFilialOrigem", tfm.get("naoConformidade.doctoServico.filialByIdFilialOrigem.idFilial"));
    	map.put("sgFilialOrigem", tfm.get("naoConformidade.doctoServico.filialByIdFilialOrigem.sgFilial"));
    	
    	map.put("sgFilialNaoConformidade", tfm.get("naoConformidade.filial.sgFilial"));
    	map.put("idFilialResponsavel", tfm.get("filialByIdFilialResponsavel.idFilial"));
    	map.put("sgFilialResponsavel", tfm.get("filialByIdFilialResponsavel.sgFilial"));
    	map.put("nmFantasiaFilialResponsavel", tfm.get("filialByIdFilialResponsavel.pessoa.nmFantasia"));
    	map.put("idControleCarga", tfm.get("controleCarga.idControleCarga"));
    	map.put("nrControleCarga", tfm.get("controleCarga.nrControleCarga"));
    	map.put("idFilialOrigemControleCarga", tfm.get("controleCarga.filialByIdFilialOrigem.idFilial"));
    	map.put("sgFilialOrigemControleCarga", tfm.get("controleCarga.filialByIdFilialOrigem.sgFilial"));
    	map.put("nrFrotaMeioTransportado", tfm.get("controleCarga.meioTransporteByIdTransportado.nrFrota"));
    	map.put("nrIdentificadorMeioTransportado", tfm.get("controleCarga.meioTransporteByIdTransportado.nrIdentificador"));
    	map.put("nrFrotaSemiRebocado", tfm.get("controleCarga.meioTransporteByIdSemiRebocado.nrFrota"));
    	map.put("nrIdentificadorSemiRebocado", tfm.get("controleCarga.meioTransporteByIdSemiRebocado.nrIdentificador"));
    	map.put("idManifesto", tfm.get("manifesto.idManifesto"));

    	if (tfm.get("manifesto.tpManifesto.value") != null) {
        	String tpManifesto = (String)tfm.get("manifesto.tpManifesto.value") + (String)tfm.get("manifesto.tpAbrangenciaViagem.value");
        	map.put("tpManifestoValue", tpManifesto);
        	map.put("idFilialOrigemManifesto", tfm.get("manifesto.filialByIdFilialOrigem.idFilial"));
        	map.put("sgFilialOrigemManifesto", tfm.get("manifesto.filialByIdFilialOrigem.sgFilial"));
        	if (tpManifesto.equals("EN"))
        		map.put("nrManifesto", tfm.get("manifesto.manifestoEntrega.nrManifestoEntrega"));
        	else if (tpManifesto.equals("VN"))
        		map.put("nrManifesto", tfm.get("manifesto.manifestoViagemNacional.nrManifestoOrigem"));
        	else if (tpManifesto.equals("VI"))
        		map.put("nrManifesto", tfm.get("manifesto.manifestoInternacional.nrManifestoInt"));
    	}

    	List retornoNF = new ArrayList();
    	List listaNotas = tfm.getList("notaOcorrenciaNcs");
    	for (Iterator iter = listaNotas.iterator(); iter.hasNext();) {
			Map mapNF = (Map)iter.next();
			Map mapRetornoNF = new HashMap();
			mapRetornoNF.put("idNotaOcorrenciaNc", mapNF.get("idNotaOcorrenciaNc"));
			mapRetornoNF.put("nrNotaFiscal", mapNF.get("nrNotaFiscal"));
			retornoNF.add(mapRetornoNF);
		}
    	map.put("notaOcorrenciaNcs", retornoNF);
    	
    	String str = "";
    	str.toUpperCase();
    	
    	Long idNaoConformidade = map.getLong("idNaoConformidade"); 
    	Long idOcorrenciaNaoConformidade = map.getLong("idOcorrenciaNaoConformidade");
    	
    	Integer nrNegociacoes = negociacaoService.getRowCountCustom(idNaoConformidade, idOcorrenciaNaoConformidade);
    	if (nrNegociacoes != null && nrNegociacoes <= 0) {
    		map.put("disableNegociacoes", Boolean.TRUE);
    	}
    	TypedFlatMap disposicao = disposicaoService.findDisposicaoByIdOcorrenciaNaoConformidade(idOcorrenciaNaoConformidade);
    	if (disposicao == null || disposicao.isEmpty()) {
    		map.put("disableDisposicoes", Boolean.TRUE);
    	}
    	
    	
    	return map;
    }

	
    /**
     * 
     * @param criteria
     * @return
     */
    public List findMotivoAberturaNc(Map criteria) {
    	List lista = motivoAberturaNcService.findOrderByDsMotivoAbertura(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = lista.iterator(); iter.hasNext();) {
			MotivoAberturaNc maNC = (MotivoAberturaNc)iter.next();
			TypedFlatMap tfm = new TypedFlatMap();
    		tfm.put("idMotivoAberturaNc", maNC.getIdMotivoAberturaNc());
    		tfm.put("dsMotivoAbertura", maNC.getDsMotivoAbertura().toString());
	    	tfm.put("blExigeDocServico", maNC.getBlExigeDocServico());
	    	tfm.put("blExigeValor", maNC.getBlExigeValor());
	    	tfm.put("blExigeQtdVolumes", maNC.getBlExigeQtdVolumes());
			retorno.add(tfm);
    	}
    	return retorno;
    }
    
    
    /**
     * 
     * @param criteria
     * @return
     */
    public List findDescricaoPadraoNc(Map criteria) {
        List campoOrdenacao = new ArrayList();
        campoOrdenacao.add("dsPadraoNc:asc");
    	FilterList filter = new FilterList(descricaoPadraoNcService.findListByCriteria(criteria, campoOrdenacao)) {
			public Map filterItem(Object item) {
				DescricaoPadraoNc descricaoPadraoNc = (DescricaoPadraoNc)item;
    			TypedFlatMap typedFlatMap = new TypedFlatMap();
	    		typedFlatMap.put("idDescricaoPadraoNc", descricaoPadraoNc.getIdDescricaoPadraoNc());
		    	typedFlatMap.put("dsPadraoNc", descricaoPadraoNc.getDsPadraoNc());
				return typedFlatMap;
			}
    	};
    	return (List)filter.doFilter();
    }

    
    /**
     * 
     * @param criteria
     * @return
     */
    public List findMoeda(Map criteria) {
    	List list = moedaService.find(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		Moeda moeda = (Moeda)iter.next();
    		TypedFlatMap typedFlatMap = new TypedFlatMap();
    		typedFlatMap.put("idMoeda", moeda.getIdMoeda());
    		typedFlatMap.put("siglaSimbolo", moeda.getSiglaSimbolo());
    		typedFlatMap.put("sgMoeda", moeda.getSgMoeda());
    		retorno.add(typedFlatMap);
    	}
    	return retorno;
    }

    
    /**
     * 
     * @param criteria
     * @return
     */
    public List findCausaNaoConformidade(Map criteria) {
        List campoOrdenacao = new ArrayList();
        campoOrdenacao.add("dsCausaNaoConformidade:asc");
    	FilterList filter = new FilterList(causaNaoConformidadeService.findListByCriteria(criteria, campoOrdenacao)) {
			public Map filterItem(Object item) {
				CausaNaoConformidade causaNaoConformidade = (CausaNaoConformidade)item;
    			TypedFlatMap typedFlatMap = new TypedFlatMap();
	    		typedFlatMap.put("idCausaNaoConformidade", causaNaoConformidade.getIdCausaNaoConformidade());
		    	typedFlatMap.put("dsCausaNaoConformidade", causaNaoConformidade.getDsCausaNaoConformidade());
				return typedFlatMap;
			}
    	};
    	return (List)filter.doFilter();
    }
    
    
    public ResultSetPage findPaginatedCaractProdutoOcorrencia(Map criteria) {
    	ResultSetPage rsp = caractProdutoOcorrenciaService.findPaginated(filtraParametros(criteria));
    	List lista = new ArrayList();
    	for (Iterator iter = rsp.getList().iterator(); iter.hasNext();) {
    		CaractProdutoOcorrencia cpo = (CaractProdutoOcorrencia)iter.next();
    		Map map = new HashMap();
    		map.put("idCaractProdutoOcorrencia", cpo.getIdCaractProdutoOcorrencia());
    		map.put("dsCaractProdutoOcorrencia", cpo.getDsCaractProdutoOcorrencia());
    		map.put("dsCaracteristicaProduto", cpo.getCaracteristicaProduto().getDsCaracteristicaProduto());
    		lista.add(map);
    	}
    	rsp.setList(lista);
    	return rsp;
    }

    public Integer getRowCountCaractProdutoOcorrencia(Map criteria) {
    	return caractProdutoOcorrenciaService.getRowCount(filtraParametros(criteria));
    }

	public ResultSetPage findPaginatedFotoOcorrencia(Map criteria) {
    	ResultSetPage rsp = fotoOcorrenciaService.findPaginated(filtraParametros(criteria));
    	List lista = new ArrayList();
    	for (Iterator iter = rsp.getList().iterator(); iter.hasNext();) {
    		FotoOcorrencia fo = (FotoOcorrencia)iter.next();
    		Map map = new HashMap();
    		map.put("idFotoOcorrencia", fo.getIdFotoOcorrencia());
    		map.put("dsFotoOcorrencia", fo.getDsFotoOcorrencia());
    		map.put("foto", fo.getFoto().getFoto());
    		lista.add(map);
    	}
    	rsp.setList(lista);
    	return rsp;
    }


    public Integer getRowCountFotoOcorrencia(Map criteria) {
    	return fotoOcorrenciaService.getRowCount(filtraParametros(criteria));
    }

    /**
     * 
     * @param criteria
     * @return
     */
    public List findCaracteristicaProduto(Map criteria) {
        List campoOrdenacao = new ArrayList();
        campoOrdenacao.add("dsCaracteristicaProduto:asc");
    	FilterList filter = new FilterList(caracteristicaProdutoService.findListByCriteria(criteria, campoOrdenacao)) {
			public Map filterItem(Object item) {
				CaracteristicaProduto caracteristicaProduto = (CaracteristicaProduto)item;
    			TypedFlatMap typedFlatMap = new TypedFlatMap();
	    		typedFlatMap.put("idCaracteristicaProduto", caracteristicaProduto.getIdCaracteristicaProduto());
		    	typedFlatMap.put("dsCaracteristicaProduto", caracteristicaProduto.getDsCaracteristicaProduto());
				return typedFlatMap;
			}
    	};
    	return (List)filter.doFilter();
    }

    
      
    public List findTipoManifesto(Map criteria) {
    	List dominiosValidos = new ArrayList();
    	dominiosValidos.add("EN");
    	dominiosValidos.add("VN");
    	dominiosValidos.add("VI");
    	
    	List retorno = new ArrayList();
    	List lista = domainValueService.findByDomainNameAndValues("DM_TAG_MANIFESTO", dominiosValidos);
    	for (Iterator iter = lista.iterator(); iter.hasNext();) {
    		DomainValue dv = (DomainValue)iter.next();
    		Map map = new HashMap();
    		map.put("tpManifestoValue", dv.getValue());
    		map.put("tpManifestoDescription", dv.getDescription().toString());
    		retorno.add(map);
    	}
    	return retorno;
    }

    
	private Map filtraParametros(Map criteria) {
		Map mapOcorrencia = new HashMap();
		mapOcorrencia.put("idOcorrenciaNaoConformidade", criteria.get("idOcorrenciaNaoConformidade"));

		Map map = new HashMap();
		map.put("ocorrenciaNaoConformidade", mapOcorrencia);
		map.put("_currentPage", criteria.get("_currentPage"));
		map.put("_pageSize", criteria.get("_pageSize"));
		map.put("_order", criteria.get("_order"));
		return map;
	}

    public TypedFlatMap findByIdCaractProdutoOcorrencia(Long id) {
    	CaractProdutoOcorrencia cpo = caractProdutoOcorrenciaService.findById(id);
    	TypedFlatMap tfm = new TypedFlatMap();
    	tfm.put("idCaractProdutoOcorrencia", cpo.getIdCaractProdutoOcorrencia());
    	tfm.put("idCaracteristicaProduto", cpo.getCaracteristicaProduto().getIdCaracteristicaProduto());
    	tfm.put("dsCaractProdutoOcorrencia", cpo.getDsCaractProdutoOcorrencia());
    	return tfm;
    }

    public TypedFlatMap findByIdFotoOcorrencia(Long id) {
    	FotoOcorrencia fo = fotoOcorrenciaService.findById(id);
    	TypedFlatMap tfm = new TypedFlatMap();
    	tfm.put("idFotoOcorrencia", fo.getIdFotoOcorrencia());
    	tfm.put("dsFotoOcorrencia", fo.getDsFotoOcorrencia());
    	return tfm;
    }
}