 package com.mercurio.lms.carregamento.swt.action;

import java.io.IOException;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mercurio.adsm.core.util.ReflectionUtils;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.masterdetail.ItemList;
import com.mercurio.adsm.framework.model.masterdetail.ItemListConfig;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailAction;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailFactory;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailKey;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntry;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntryConfig;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.CarregamentoDescarga;
import com.mercurio.lms.carregamento.model.ControleCarga;
import com.mercurio.lms.carregamento.model.FotoCarregmtoDescarga;
import com.mercurio.lms.carregamento.model.service.CarregamentoDescargaService;
import com.mercurio.lms.carregamento.model.service.FotoCarregmtoDescargaService;
import com.mercurio.lms.carregamento.model.service.LacreControleCargaService;
import com.mercurio.lms.configuracoes.model.Foto;
import com.mercurio.lms.configuracoes.model.service.ConteudoParametroFilialService;
import com.mercurio.lms.util.session.SessionUtils;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import sun.misc.BASE64Decoder;

/**
 * Generated by: ADSM ActionGenerator
 * 
 * Não inserir documentação após ou remover a tag do XDoclet a seguir. O valor
 * do <code>id</code> informado abaixo deve ser utilizado para referenciar
 * este serviço.
 * 
 * @spring.bean id="lms.carregamento.swt.finalizarCarregamentoControleCargasAction"
 */

public class FinalizarCarregamentoControleCargasAction extends MasterDetailAction {

	private Logger log = LogManager.getLogger(this.getClass());
	private LacreControleCargaService lacreControleCargaService;
	private FotoCarregmtoDescargaService fotoCarregmtoDescargaService;
	private ConteudoParametroFilialService conteudoParametroFilialService;
	
	/**
	 * Busca a Service default desta Action
	 * 
	 * @param carregamentoDescargaService
	 */
	
	//###############################
	// Setters e getters
	//###############################
	
	public CarregamentoDescargaService getCarregamentoDescargaService() {
		return (CarregamentoDescargaService) super.getMasterService();
	}	
	
	public void setCarregamentoDescargaService(CarregamentoDescargaService carregamentoDescargaService) {
		this.setMasterService(carregamentoDescargaService);
	}
	
	public LacreControleCargaService getLacreControleCargaService() {
		return lacreControleCargaService;
	}

	public void setLacreControleCargaService(LacreControleCargaService lacreControleCargaService) {
		this.lacreControleCargaService = lacreControleCargaService;
	}
	
	public FotoCarregmtoDescargaService getFotoCarregmtoDescargaService() {
		return fotoCarregmtoDescargaService;
	}

	public void setFotoCarregmtoDescargaService(FotoCarregmtoDescargaService fotoCarregmtoDescargaService) {
		this.fotoCarregmtoDescargaService = fotoCarregmtoDescargaService;
	}
	
	//###############################
	// Pesquisa dos objetos
	//###############################
	
	public CarregamentoDescarga findById(Long id) {
		Object masterObj = this.getCarregamentoDescargaService().findById(id);
		putMasterInSession(masterObj); 		
		return (CarregamentoDescarga) masterObj;
	}

	public List findLacreControleCarga(Map criteria) {
		criteria = new HashMap();
		criteria.put("tpStatusLacre", "FE");
		return this.getLacreControleCargaService().find(criteria);
	}
	
	public Map loadBlRncAutomaticaNovo(Map criteria) {
		Map<String, Object> retorno = new HashMap<String, Object>();
		retorno.put("blRncAutomaticaNovo", getParametroRncAutomaticaNovo(SessionUtils.getFilialSessao().getIdFilial()));
		return retorno;
	}
	
	private boolean getParametroRncAutomaticaNovo(Long idFilialUsuario) {
		String parametroRncAutomaticaNovo = (String) conteudoParametroFilialService.findConteudoByNomeParametro(idFilialUsuario, "RNC_AUTOMATICA_NOVO", false);
		return "S".equals(parametroRncAutomaticaNovo);
	}
	
	/**
	 * Gera um newMaster e carrega o objetos pai para a sessao.
	 * 
	 * @param criterias
	 * @return
	 */
	public Map loadCarregamentoDescarga(Map criteria) {
		CarregamentoDescarga carregamentoDescarga = this.getCarregamentoDescargaService().
					findById((Long)criteria.get("idCarregamentoDescarga"));		
		newMaster();
		putMasterInSession(carregamentoDescarga);
		
		Map<String,Object> retorno = new HashMap<String, Object>();
		
		ControleCarga cc = carregamentoDescarga.getControleCarga();
		if(cc != null) {
			if(cc.getPcOcupacaoInformado() != null) {
				retorno.put("pcOciosidadeVisual", (new BigDecimal(100)).subtract(carregamentoDescarga.getControleCarga().getPcOcupacaoInformado()));
	}
	
			List lacres = lacreControleCargaService.findByControleCarga(cc.getIdControleCarga());
			//List<Map<String,Object>> macresMaooed = new ArrayList<Map<String,Object>>()
			if(lacres != null && lacres.size() > 0) {						
				retorno.put("idsLacreControleCarga", lacres);
			}
		}
					
		return retorno;
	}
	
	//###############################
	// Metedos de negocio
	//###############################

	/**
	 * Chama a service de carregamentoDescarga para finalizar o carregamento de um
	 * determinado manifesto.
	 * 
	 * @param TypedFlatMap bean
	 * @return
	 */
	public void storeFinalizarCarregamento(Map criteria) {		 
		MasterEntry masterEntry = getMasterFromSession(null, false);
    	CarregamentoDescarga carregamentoDescarga = this.getCarregamentoDescargaService().findById((Long)criteria.get("idCarregamentoDescarga"));
    	ItemList itemsFotos = getItemsFromSession(masterEntry, "fotos");
    	ItemListConfig config = getMasterConfig().getItemListConfig("fotos");
    	
    	TypedFlatMap tfmCriteria = new TypedFlatMap();
    	tfmCriteria.put("controleCarga.idControleCarga", criteria.get("idControleCarga"));
    	tfmCriteria.put("lacreControleCarga.idsLacreControleCarga", criteria.get("idsLacreControleCarga"));    	    	
    	tfmCriteria.put("controleCarga.pcOcupacaoInformado", criteria.get("pcOcupacaoInformado"));
    	tfmCriteria.put("carregamentoDescarga.obOperacao", criteria.get("obOperacao"));
    	tfmCriteria.put("doctosPriorizacaoEmbarque", criteria.get("doctosPriorizacaoEmbarque"));
    	tfmCriteria.put("lacresRemovidos", criteria.get("lacresRemovidos"));
    	
    	this.getCarregamentoDescargaService().storeFinalizarCarregamento(carregamentoDescarga, tfmCriteria, itemsFotos, config);
    	updateMasterInSession(masterEntry);
	}
	
	/**
     * Remoção de um conjunto de registros Master.
     * 
     * @param ids
     */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIdsFotos(List ids) {
    	super.removeItemByIds(ids, "fotos");
    }
    
    /**
     * Salva um item na sessão.
     * 
     * @param bean
     * @return
     */
    public Serializable saveFotos(TypedFlatMap parameters) {
    	return saveItemInstance(parameters, "fotos");
    }
   
    /**
     * Faz o findPaginated do filho
     * Possui uma chamada 'interna' para o findPaginated(initialize) 
     * contido dentro do 'createMasterConfig'
     * 
     * @param parameters
     * @return
     */
    public ResultSetPage findPaginated(Map parameters) {
    	parameters.put("masterId", null);
    	ResultSetPage result = findPaginatedItemList(parameters, "fotos");
    	//FIXME: não deve enviar para a tela o objeto foto (é muito grande)
    	//Sugiro fazer uma cópia do result e devolver esta cópia sem a foto
    	return result;
    }
    
    /**
     * Método que valida se já não existe o número de lacre incluido para o Controle de Carga em questão.
     * @param criteria
     */
    public void validateLacreControleCarga(Map criteria) {
    	Long idControleCarga = (Long)criteria.get("idControleCarga");
    	String nrLacres = (String)criteria.get("nrLacres");
    	this.getCarregamentoDescargaService().validateLacreControleCarga(idControleCarga, nrLacres);
    }

    /**
     * Faz o getRowCount do filho
     * Possui uma chamada 'interna' para o getRowCount contido dentro 
     * do 'createMasterConfig'
     * 
     * @param parameters
     * @return
     */
    public Integer getRowCount(Map parameters){
    	parameters.put("masterId", null);
    	return getRowCountItemList(parameters, "fotos");
    }
    
    public Object findByIdFotos(MasterDetailKey key) {
    	FotoCarregmtoDescarga fotoCarregmtoDescarga = (FotoCarregmtoDescarga)findItemById(key, "fotos");
    	
    	return fotoCarregmtoDescarga;
    }
    
    //####################################
    // Dados da DF2
    //####################################
    
	protected MasterEntryConfig createMasterConfig(MasterDetailFactory masterFactory) { 
		
		//Declaracao da classe pai
		MasterEntryConfig config = masterFactory.createMasterEntryConfig(CarregamentoDescarga.class);
		
    	Comparator fotoComparator = new Comparator() {
			public int compare(Object obj1, Object obj2) {
				FotoCarregmtoDescarga fotoCarregmtoDescarga1 = (FotoCarregmtoDescarga)obj1;
				FotoCarregmtoDescarga fotoCarregmtoDescarga2 = (FotoCarregmtoDescarga)obj2;
        		return fotoCarregmtoDescarga1.getDsFoto().compareTo(fotoCarregmtoDescarga2.getDsFoto());  		
			}    		
    	};
    	    	
    	//########################
    	// Primeira aba
    	//########################
    	/**
    	 * ItemConfig para FotoCarregmtoDescarga
    	 */
    	ItemListConfig fotoItemList = new ItemListConfig() {
    		
			public List initialize(Long masterId, Map parameters) {				
				return getFotoCarregmtoDescargaService().findFotoCarregmtoDescarga(masterId);				
			}
		
			public Integer getRowCount(Long masterId, Map parameters) {				
				return getFotoCarregmtoDescargaService().getRowCountFotoCarregmtoDescarga(masterId);				
			}
			
			/**
			 * Seta um pai para o itemConfig de LacreControleCarga
			 */
			public void setMasterOnItem(Object master, Object itemBean) {
				CarregamentoDescarga CarregamentoDescarga = new CarregamentoDescarga();
				((FotoCarregmtoDescarga) itemBean).setCarregamentoDescarga(CarregamentoDescarga);								
			}

			public void modifyItemValues(Object newBean, Object bean) {
		        Set ignore = new HashSet();
		        ignore.add("idFotoCarregmtoDescarga"); // id do filho
		        ignore.add("versao");
		        ignore.add("carregamentoDescarga "); // classe pai
		        
		        ReflectionUtils.syncObjectProperties(bean, newBean, ignore);
		    }	

			public Object populateNewItemInstance(Map parameters, Object bean) {
				FotoCarregmtoDescarga fotoCarregmtoDescarga = (FotoCarregmtoDescarga) bean;

				TypedFlatMap criteria = (TypedFlatMap) parameters;	
				fotoCarregmtoDescarga.setDsFoto(criteria.getString("dsFoto"));

				Foto foto = new Foto();
				foto.setIdFoto(null);
				try {
					foto.setFoto(new BASE64Decoder().decodeBuffer(criteria.getString("flFoto")));
				} catch (IOException e) {
					log.error(e);
				}
				fotoCarregmtoDescarga.setFoto(foto);
				return fotoCarregmtoDescarga;
			}			
    	};   

    	//Seta as configuracoes do filho...
		config.addItemConfig("fotos", FotoCarregmtoDescarga.class, fotoItemList, fotoComparator); 
		return config;
	}

	/**
	 * Verifica se existe algum controle de carga entre os controles de carga
	 * da tela que ja foram cadastrados. 
	 * 
	 * @param criteria
	 * @return
	 */
	public TypedFlatMap validateLacresControleCarga(TypedFlatMap criteria) {
		return new TypedFlatMap();
	}

    /**
     * 
     * @param criteria
     * @return
     */
	public ResultSetPage findPaginatedfindDoctoServicoWithServicoPrioritario(TypedFlatMap criteria) {
		List lista = getCarregamentoDescargaService().findDoctoServicoWithServicoPrioritario(criteria.getLong("idControleCarga"));
		return new ResultSetPage(Integer.valueOf(1), lista); 
	}

    /**
     * 
     * @param criteria
     * @return
     */
	public ResultSetPage findPaginatedDoctoServicoWithDpeAtrasado(TypedFlatMap criteria) {
		List lista = getCarregamentoDescargaService().findDoctoServicoWithDpeAtrasado(criteria.getLong("idControleCarga"));
		return new ResultSetPage(Integer.valueOf(1), lista); 
	}

    /**
     * 
     * @param criteria
     * @return
     */
	public ResultSetPage findDoctoServicoWithWithPriorizacaoEmbarque(TypedFlatMap criteria) {
		List lista = getCarregamentoDescargaService().findDoctoServicoWithWithPriorizacaoEmbarque(criteria.getLong("idControleCarga"));
		return new ResultSetPage(Integer.valueOf(1), lista); 
	}

	public void setConteudoParametroFilialService(ConteudoParametroFilialService conteudoParametroFilialService) {
		this.conteudoParametroFilialService = conteudoParametroFilialService;
	}

}
