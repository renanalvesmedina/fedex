package com.mercurio.lms.carregamento.swt.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.FindDefinition;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.report.ReportExecutionManager;
import com.mercurio.adsm.framework.util.FilterList;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.CargoOperacional;
import com.mercurio.lms.carregamento.model.ControleCarga;
import com.mercurio.lms.carregamento.model.ControleTrecho;
import com.mercurio.lms.carregamento.model.EquipeOperacao;
import com.mercurio.lms.carregamento.model.IntegranteEqOperac;
import com.mercurio.lms.carregamento.model.LacreControleCarga;
import com.mercurio.lms.carregamento.model.LocalTroca;
import com.mercurio.lms.carregamento.model.Manifesto;
import com.mercurio.lms.carregamento.model.PagtoProprietarioCc;
import com.mercurio.lms.carregamento.model.service.CargoOperacionalService;
import com.mercurio.lms.carregamento.model.service.ControleCargaService;
import com.mercurio.lms.carregamento.model.service.ControleTrechoService;
import com.mercurio.lms.carregamento.model.service.EquipeOperacaoService;
import com.mercurio.lms.carregamento.model.service.EquipeService;
import com.mercurio.lms.carregamento.model.service.EventoControleCargaService;
import com.mercurio.lms.carregamento.model.service.IntegranteEqOperacService;
import com.mercurio.lms.carregamento.model.service.LacreControleCargaService;
import com.mercurio.lms.carregamento.model.service.LocalTrocaService;
import com.mercurio.lms.carregamento.model.service.ManifestoService;
import com.mercurio.lms.carregamento.model.service.MotoristaControleCargaService;
import com.mercurio.lms.carregamento.model.service.PagtoPedagioCcService;
import com.mercurio.lms.carregamento.model.service.PagtoProprietarioCcService;
import com.mercurio.lms.carregamento.model.service.SemiReboqueCcService;
import com.mercurio.lms.carregamento.model.service.VeiculoControleCargaService;
import com.mercurio.lms.carregamento.report.EmitirRelatorioControleCargaManifestoColetaService;
import com.mercurio.lms.carregamento.report.EmitirRelatorioControleCargaManifestoEntregaService;
import com.mercurio.lms.carregamento.report.EmitirRelatorioControleCargaManifestoViagemService;
import com.mercurio.lms.configuracoes.model.ConteudoParametroFilial;
import com.mercurio.lms.configuracoes.model.Moeda;
import com.mercurio.lms.configuracoes.model.service.ConteudoParametroFilialService;
import com.mercurio.lms.configuracoes.model.service.MoedaService;
import com.mercurio.lms.configuracoes.model.service.PessoaService;
import com.mercurio.lms.configuracoes.model.service.UsuarioService;
import com.mercurio.lms.contratacaoveiculos.model.MeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.Motorista;
import com.mercurio.lms.contratacaoveiculos.model.SolicitacaoContratacao;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTranspProprietarioService;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteService;
import com.mercurio.lms.contratacaoveiculos.model.service.MotoristaService;
import com.mercurio.lms.contratacaoveiculos.model.service.SolicitacaoContratacaoService;
import com.mercurio.lms.expedicao.model.service.DoctoServicoService;
import com.mercurio.lms.expedicao.util.ConstantesExpedicao;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.TabelaFcValores;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.service.TabelaFreteCarreteiroCeService;
import com.mercurio.lms.fretecarreteirocoletaentrega.model.service.TipoTabelaColetaEntregaService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.Municipio;
import com.mercurio.lms.municipios.model.PontoParada;
import com.mercurio.lms.municipios.model.Rodovia;
import com.mercurio.lms.municipios.model.service.EmpresaService;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.MeioTransporteRotaViagemService;
import com.mercurio.lms.municipios.model.service.MunicipioService;
import com.mercurio.lms.municipios.model.service.PontoParadaService;
import com.mercurio.lms.municipios.model.service.RodoviaService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.carregamento.swt.manterControleCargasJanelasAction"
 */

public class ManterControleCargasJanelasAction {
	
	private CargoOperacionalService cargoOperacionalService;
	private ControleCargaService controleCargaService;
	private ControleTrechoService controleTrechoService;
	private DoctoServicoService doctoServicoService;
	private DomainValueService domainValueService;
	private EmpresaService empresaService;
	private EquipeOperacaoService equipeOperacaoService;
	private EquipeService equipeService;
	private EventoControleCargaService eventoControleCargaService;
	private FilialService filialService;
	private IntegranteEqOperacService integranteEqOperacService;
	private LacreControleCargaService lacreControleCargaService;
	private LocalTrocaService localTrocaService;
	private ManifestoService manifestoService;
	private MeioTransporteRotaViagemService meioTransporteRotaViagemService;
	private MeioTransporteService meioTransporteService;
	private MeioTranspProprietarioService meioTranspProprietarioService;
	private MoedaService moedaService;
	private MotoristaControleCargaService motoristaControleCargaService;
	private MotoristaService motoristaService;
	private MunicipioService municipioService;
	private PagtoPedagioCcService pagtoPedagioCcService;
	private PagtoProprietarioCcService pagtoProprietarioCcService;
	private PessoaService pessoaService;
	private PontoParadaService pontoParadaService;
	private RodoviaService rodoviaService;
	private SemiReboqueCcService semiReboqueCcService;
	private SolicitacaoContratacaoService solicitacaoContratacaoService;
	private TipoTabelaColetaEntregaService tipoTabelaColetaEntregaService;
	private UsuarioService usuarioService;
	private VeiculoControleCargaService veiculoControleCargaService;
	private ReportExecutionManager reportExecutionManager;
	private EmitirRelatorioControleCargaManifestoColetaService emitirRelatorioControleCargaManifestoColetaService;
	private EmitirRelatorioControleCargaManifestoEntregaService emitirRelatorioControleCargaManifestoEntregaService;
	private EmitirRelatorioControleCargaManifestoViagemService emitirRelatorioControleCargaManifestoViagemService;
	
	private ConteudoParametroFilialService conteudoParametroFilialService;
	private TabelaFreteCarreteiroCeService tabelaFreteCarreteiroCeService;
	
	private static final String PARAMETRO_FILIAL = "ATIVA_CALCULO_PADRAO";
	private static final String SIM = "S";
	

	public void setEventoControleCargaService(EventoControleCargaService eventoControleCargaService) {
		this.eventoControleCargaService = eventoControleCargaService;
	}
	public void setPagtoPedagioCcService(PagtoPedagioCcService pagtoPedagioCcService) {
		this.pagtoPedagioCcService = pagtoPedagioCcService;
	}
	public void setTipoTabelaColetaEntregaService(TipoTabelaColetaEntregaService tipoTabelaColetaEntregaService) {
		this.tipoTabelaColetaEntregaService = tipoTabelaColetaEntregaService;
	}
	public void setMeioTransporteRotaViagemService(MeioTransporteRotaViagemService meioTransporteRotaViagemService) {
		this.meioTransporteRotaViagemService = meioTransporteRotaViagemService;
	}
	public void setDoctoServicoService(DoctoServicoService doctoServicoService) {
		this.doctoServicoService = doctoServicoService;
	}
	public void setManifestoService(ManifestoService manifestoService) {
		this.manifestoService = manifestoService;
	}
	public void setControleCargaService(ControleCargaService controleCargaService) {
		this.controleCargaService = controleCargaService;
	}
	public void setUsuarioService(UsuarioService usuarioService) {
		this.usuarioService = usuarioService;
	}
	public void setEmpresaService(EmpresaService empresaService) {
		this.empresaService = empresaService;
	}
	public void setCargoOperacionalService(CargoOperacionalService cargoOperacionalService) {
		this.cargoOperacionalService = cargoOperacionalService;
	}
	public void setPessoaService(PessoaService pessoaService) {
		this.pessoaService = pessoaService;
	}
	public void setIntegranteEqOperacService(IntegranteEqOperacService integranteEqOperacService) {
		this.integranteEqOperacService = integranteEqOperacService;
	}
	public void setEquipeOperacaoService(EquipeOperacaoService equipeOperacaoService) {
		this.equipeOperacaoService = equipeOperacaoService;
	}
	public void setEquipeService(EquipeService equipeService) {
		this.equipeService = equipeService;
	}
	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}
	public void setLacreControleCargaService(LacreControleCargaService lacreControleCargaService) {
		this.lacreControleCargaService = lacreControleCargaService;
	}
	public void setMoedaService(MoedaService moedaService) {
		this.moedaService = moedaService;
	}
	public void setPagtoProprietarioCcService(PagtoProprietarioCcService pagtoProprietarioCcService) {
		this.pagtoProprietarioCcService = pagtoProprietarioCcService;
	}
	public void setMotoristaService(MotoristaService motoristaService) {
		this.motoristaService = motoristaService;
	}
	public void setMeioTranspProprietarioService(MeioTranspProprietarioService meioTranspProprietarioService) {
		this.meioTranspProprietarioService = meioTranspProprietarioService;
	}
	public void setControleTrechoService(ControleTrechoService controleTrechoService) {
		this.controleTrechoService = controleTrechoService;
	}
	public void setPontoParadaService(PontoParadaService pontoParadaService) {
		this.pontoParadaService = pontoParadaService;
	}
	public void setMunicipioService(MunicipioService municipioService) {
		this.municipioService = municipioService;
	}
	public void setRodoviaService(RodoviaService rodoviaService) {
		this.rodoviaService = rodoviaService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public void setSolicitacaoContratacaoService(SolicitacaoContratacaoService solicitacaoContratacaoService) {
		this.solicitacaoContratacaoService = solicitacaoContratacaoService;
	}
	public void setMeioTransporteService(MeioTransporteService meioTransporteService) {
		this.meioTransporteService = meioTransporteService;
	}
	public void setLocalTrocaService(LocalTrocaService localTrocaService) {
		this.localTrocaService = localTrocaService;
	}
	public void setMotoristaControleCargaService(MotoristaControleCargaService motoristaControleCargaService) {
		this.motoristaControleCargaService = motoristaControleCargaService;
	}
	public void setSemiReboqueCcService(SemiReboqueCcService semiReboqueCcService) {
		this.semiReboqueCcService = semiReboqueCcService;
	}
	public void setVeiculoControleCargaService(VeiculoControleCargaService veiculoControleCargaService) {
		this.veiculoControleCargaService = veiculoControleCargaService;
	}


	/**
     * 
     * @param criteria
     * @return
     */
    public ResultSetPage findPaginatedVeiculo(TypedFlatMap criteria) {
    	Long idControleCarga = criteria.getLong("idControleCarga");
    	ResultSetPage rsp = veiculoControleCargaService.findPaginatedByIdControleCarga(idControleCarga, FindDefinition.createFindDefinition(criteria));
    	for (Iterator iter = rsp.getList().iterator(); iter.hasNext(); ){
    		TypedFlatMap map = (TypedFlatMap)iter.next();
    		String sgFilialOrigem = map.getString("sgFilialOrigem");
    		String sgFilialDestino = map.getString("sgFilialDestino");
    		if (sgFilialOrigem != null && !sgFilialOrigem.equals("") && sgFilialDestino != null && !sgFilialDestino.equals("")) {
    			map.put("trecho", sgFilialOrigem + " - " + sgFilialDestino);
    			map.remove("sgFilialOrigem");
    			map.remove("sgFilialDestino");
    		}
    	}
    	return rsp;
    }

    /**
     * 
     * @param criteria
     * @return
     */
    public Integer getRowCountVeiculo(TypedFlatMap criteria) {
    	return veiculoControleCargaService.getRowCountFindPaginatedByIdControleCarga(criteria.getLong("idControleCarga"));
    }


	/**
     * 
     * @param criteria
     * @return
     */
    public ResultSetPage findPaginatedSemiReboque(TypedFlatMap criteria) {
    	Long idControleCarga = criteria.getLong("idControleCarga");
    	ResultSetPage rsp = semiReboqueCcService.findPaginatedByIdControleCarga(idControleCarga, FindDefinition.createFindDefinition(criteria));
    	for (Iterator iter = rsp.getList().iterator(); iter.hasNext(); ){
    		TypedFlatMap map = (TypedFlatMap)iter.next();
    		String sgFilialOrigem = map.getString("sgFilialOrigem");
    		String sgFilialDestino = map.getString("sgFilialDestino");
    		if (sgFilialOrigem != null && !sgFilialOrigem.equals("") && sgFilialDestino != null && !sgFilialDestino.equals("")) {
    			map.put("trecho", sgFilialOrigem + " - " + sgFilialDestino);
    			map.remove("sgFilialOrigem");
    			map.remove("sgFilialDestino");
    		}
    	}
    	return rsp;
    }

    /**
     * 
     * @param criteria
     * @return
     */
    public Integer getRowCountSemiReboque(TypedFlatMap criteria) {
    	return semiReboqueCcService.getRowCountFindPaginatedByIdControleCarga(criteria.getLong("idControleCarga"));
    }


	/**
     * 
     * @param criteria
     * @return
     */
    public ResultSetPage findPaginatedMotorista(TypedFlatMap criteria) {
    	Long idControleCarga = criteria.getLong("idControleCarga");
    	ResultSetPage rsp = motoristaControleCargaService.findPaginatedByIdControleCarga(idControleCarga, FindDefinition.createFindDefinition(criteria));
    	for (Iterator iter = rsp.getList().iterator(); iter.hasNext(); ){
    		TypedFlatMap map = (TypedFlatMap)iter.next();
    		String sgFilialOrigem = map.getString("sgFilialOrigem");
    		String sgFilialDestino = map.getString("sgFilialDestino");
    		if (sgFilialOrigem != null && !sgFilialOrigem.equals("") && sgFilialDestino != null && !sgFilialDestino.equals("")) {
    			map.put("trecho", sgFilialOrigem + " - " + sgFilialDestino);
    			map.remove("sgFilialOrigem");
    			map.remove("sgFilialDestino");
    		}
    		map.put("nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(map.getString("tpIdentificacao.value"), map.getString("nrIdentificacao")) );
    		map.remove("nrIdentificacao");
    	}
    	return rsp;
    }

    /**
     * 
     * @param criteria
     * @return
     */
    public Integer getRowCountMotorista(TypedFlatMap criteria) {
    	return motoristaControleCargaService.getRowCountFindPaginatedByIdControleCarga(criteria.getLong("idControleCarga"));
    }


    public Map findDescricaoLocalTroca(Long idLocalTroca) {
    	LocalTroca localTroca = localTrocaService.findById(idLocalTroca);
    	Map map = new HashMap();
    	map.put("dsTroca", localTroca.getDsTroca());
    	return map;
    }


    public List findLookupMeioTransporteSemiRebocado(Map criteria) {
    	criteria.put("tipoMeioTransporte", "semiRebocado");
    	return findLookupMeioTransporte(criteria);
    }


    public List findLookupMeioTransporteTransportado(Map criteria) {
    	criteria.put("tipoMeioTransporte", "transportado");
    	return findLookupMeioTransporte(criteria);
    }
    

    private List findLookupMeioTransporte(Map criteria) {
    	List list = meioTransporteService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		MeioTransporte meioTransporte = (MeioTransporte)iter.next();
    		TypedFlatMap tfm = new TypedFlatMap();
    		tfm.put("idMeioTransporte", meioTransporte.getIdMeioTransporte());
    		tfm.put("nrIdentificador", meioTransporte.getNrIdentificador());
    		tfm.put("nrFrota", meioTransporte.getNrFrota());
    		tfm.put("tpVinculo", meioTransporte.getTpVinculo().getValue());
    		tfm.put("idTipoMeioTransporte", meioTransporte.getModeloMeioTransporte().getTipoMeioTransporte().getIdTipoMeioTransporte());
    		tfm.put("nrAnoFabricao", meioTransporte.getNrAnoFabricao());
    		retorno.add(tfm);
    	}
    	return retorno;
    }


    public List findLookupFilial(Map criteria) {
    	List list = filialService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		Filial filial = (Filial)iter.next();
    		TypedFlatMap typedFlatMap = new TypedFlatMap();
    		typedFlatMap.put("idFilial", filial.getIdFilial());
    		typedFlatMap.put("sgFilial", filial.getSgFilial());
    		typedFlatMap.put("nmFantasia", filial.getPessoa().getNmFantasia());
    		retorno.add(typedFlatMap);
    	}
    	return retorno;
    }

    
	public List findLookupSolicitacaoContratacao(Map criteria) {
		if (criteria.get("idFilial") != null) {
			Map mapFilial = new HashMap();
			mapFilial.put("idFilial", criteria.get("idFilial"));
			criteria.put("filial", mapFilial);
			criteria.remove("idFilial");
		}
		criteria.remove("idFilial");
		String tpSolicitacaoContratacao = (String)criteria.get("tpSolicitacaoContratacao");
		
		List list = solicitacaoContratacaoService.findLookup(criteria);
		if (list.isEmpty()) {
			if (!StringUtils.isBlank((String)criteria.get("nrIdentificacaoMeioTransp"))) {
				criteria.put("tpSolicitacaoContratacao", tpSolicitacaoContratacao);
				criteria.remove("nrIdentificacaoMeioTransp");
				List novaLista = solicitacaoContratacaoService.findLookup(criteria);
				if (!novaLista.isEmpty()) {
					throw new BusinessException("LMS-05180");
				}
			}
		}

    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		SolicitacaoContratacao solicitacaoContratacao = (SolicitacaoContratacao)iter.next();
    		TypedFlatMap typedFlatMap = new TypedFlatMap();
    		typedFlatMap.put("idSolicitacaoContratacao", solicitacaoContratacao.getIdSolicitacaoContratacao());
    		typedFlatMap.put("nrSolicitacaoContratacao", solicitacaoContratacao.getNrSolicitacaoContratacao());
    		typedFlatMap.put("idFilial", solicitacaoContratacao.getFilial().getIdFilial());
    		typedFlatMap.put("sgFilial", solicitacaoContratacao.getFilial().getSgFilial());
    		typedFlatMap.put("nmFantasia", solicitacaoContratacao.getFilial().getPessoa().getNmFantasia());
    		retorno.add(typedFlatMap);
    	}
    	return retorno;
    }

	
	public List findLookupMunicipio(Map criteria){
		List lista = municipioService.findLookup(criteria);
		List listaRetorno = new ArrayList();
		for (Iterator iter = lista.iterator(); iter.hasNext();) {
			Municipio municipio = (Municipio)iter.next();
			Map map = new HashMap();
			map.put("idMunicipio", municipio.getIdMunicipio());
			map.put("nmMunicipio", municipio.getNmMunicipio());
			map.put("sgUnidadeFederativa", municipio.getUnidadeFederativa().getSgUnidadeFederativa());
			listaRetorno.add(map);
		}
		return listaRetorno;
	}


	public List findLookupRodovia(Map criteria) {
		List lista = rodoviaService.findLookup(criteria);
		List listaRetorno = new ArrayList();
		for (Iterator iter = lista.iterator(); iter.hasNext();) {
			Rodovia rodovia = (Rodovia)iter.next();
			Map map = new HashMap();
			map.put("idRodovia", rodovia.getIdRodovia());
			map.put("sgRodovia", rodovia.getSgRodovia());
			map.put("dsRodovia", rodovia.getDsRodovia());
			listaRetorno.add(map);
		}
		return listaRetorno;
	}


    public List findLookupMotorista(Map criteria) {
   		TypedFlatMap tfm = new TypedFlatMap();
   		tfm.put("pessoa.nrIdentificacao", criteria.get("nrIdentificacao"));
   		tfm.put("tpSituacao", criteria.get("tpSituacao"));
   		
    	List list = motoristaService.findLookupMotorista(tfm);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		Motorista motorista = (Motorista)iter.next();
    		TypedFlatMap typedFlatMap = new TypedFlatMap();
    		typedFlatMap.put("idMotorista", motorista.getIdMotorista());
    		typedFlatMap.put("nrIdentificacao", FormatUtils.formatIdentificacao(motorista.getPessoa()));
    		typedFlatMap.put("nmPessoa", motorista.getPessoa().getNmPessoa());
    		retorno.add(typedFlatMap);
    	}
    	return retorno;
    }
	
	public List findControleTrecho(TypedFlatMap criteria) {
		List lista = controleTrechoService.findControleTrechoByControleCarga(criteria.getLong("idControleCarga"), null, null, null);
		List retorno = new ArrayList();
		for (Iterator iter = lista.iterator(); iter.hasNext();) {
			ControleTrecho controleTrecho = (ControleTrecho)iter.next();
			TypedFlatMap map = new TypedFlatMap();
			map.put("idControleTrecho", controleTrecho.getIdControleTrecho());
			map.put("trecho", 	controleTrecho.getFilialByIdFilialOrigem().getSgFilial() + " - " + 
								controleTrecho.getFilialByIdFilialDestino().getSgFilial());
			retorno.add(map);
		}
		return retorno;
	}

	
	public List findPontoParada(Long idRotaIdaVolta) {
		List lista = pontoParadaService.findPontoParadaByRotaIdaVolta(idRotaIdaVolta);
		List retorno = new ArrayList();
		for (Iterator iter = lista.iterator(); iter.hasNext();) {
			PontoParada pontoParada = (PontoParada)iter.next();
			TypedFlatMap map = new TypedFlatMap();
			map.put("idPontoParada", pontoParada.getIdPontoParada());
			map.put("nmPontoParada", pontoParada.getNmPontoParada());
			retorno.add(map);
		}
		return retorno;
	}
	
	
    public TypedFlatMap findDadosVeiculo(TypedFlatMap criteria) {
    	Long idControleCarga = criteria.getLong("idControleCarga");
    	Long idMeioTransporte = criteria.getLong("idMeioTransporte");
    	Long idTipoMeioTransporteTransportado = criteria.getLong("idTipoMeioTransporteTransportado");
    	String tpVinculo = criteria.getString("tpVinculo");
    	Long idProprietarioNovoVeiculo = null;

    	// valida o veículo
    	controleCargaService.validateVeiculoControleCarga(idMeioTransporte, false);

    	TypedFlatMap tfm = new TypedFlatMap();
    	Map mapResultado = meioTranspProprietarioService.findProprietarioByMeioTransporte(idMeioTransporte);
    	if (mapResultado != null) {
	    	Map mapProprietario = (Map)mapResultado.get("proprietario");
	    	if (mapProprietario != null) {
	    		Map mapPessoa = (Map)mapProprietario.get("pessoa");
	    		tfm.put("idProprietario", mapProprietario.get("idProprietario"));
	    		tfm.put("nrIdentificacaoFormatadoProprietario", FormatUtils.formatIdentificacao(
		    			(String)((Map)mapPessoa.get("tpIdentificacao")).get("value"), (String)mapPessoa.get("nrIdentificacao"))); 
		    	tfm.put("nmPessoaProprietario", mapPessoa.get("nmPessoa"));
		    	idProprietarioNovoVeiculo = (Long)mapProprietario.get("idProprietario");
		    }
    	}
   		ControleCarga cc = controleCargaService.findByIdControleCarga(idControleCarga);
   		String tpControleCarga = cc.getTpControleCarga().getValue();

    	TypedFlatMap mapVeiculoAtual = veiculoControleCargaService.findVeiculoAtualByIdControleCarga(idControleCarga);
   		tfm.put("idVeiculoControleCarga", mapVeiculoAtual.getLong("idVeiculoControleCarga"));
   		
    	boolean blDesabilitaSolicitContratacao = true;
    	if (tpControleCarga.equals("V")) { 
	    	if (tpVinculo.equals("E")) {
	    		blDesabilitaSolicitContratacao = false;
	    	}
	    	else if (tpVinculo.equals("A") || tpVinculo.equals("P")) {
	        	if (cc.getTpRotaViagem().getValue().equals("EV")) {
	        		if (mapVeiculoAtual.getString("tpVinculo.value").equals("E"))
	        			blDesabilitaSolicitContratacao = false;
	        		else
	    			if (mapVeiculoAtual.getLong("idProprietario").compareTo(idProprietarioNovoVeiculo) != 0)
	    				blDesabilitaSolicitContratacao = false;
	        	} else if (cc.getTpRotaViagem().getValue().equals("EX") || cc.getTpRotaViagem().getValue().equals("EC")) {
	        		if (tpVinculo.equals("P") && !idTipoMeioTransporteTransportado.equals( 
	        			cc.getRotaIdaVolta().getRotaViagem().getTipoMeioTransporte().getIdTipoMeioTransporte())) {
	        			blDesabilitaSolicitContratacao = false;
	        		} else {
	            		Boolean blExisteVeiculoCadastradoParaRotaViagem = meioTransporteRotaViagemService.
		    				validateMeioTransporteWithRotaViagem(cc.getRotaIdaVolta().getRotaViagem().getIdRotaViagem(), idMeioTransporte);
	        			
	        			if (tpVinculo.equals("A") && !blExisteVeiculoCadastradoParaRotaViagem)
	        				blDesabilitaSolicitContratacao = false;
	        		}
	        	}
	        }
    	} else {
    		boolean calculoPadrao = false;
    		ConteudoParametroFilial conteudoParametroFilial = conteudoParametroFilialService.findByNomeParametro(SessionUtils.getFilialSessao().getIdFilial(), PARAMETRO_FILIAL, false, true);
    		if (conteudoParametroFilial != null && SIM.equalsIgnoreCase(conteudoParametroFilial.getVlConteudoParametroFilial())) {
    			calculoPadrao = true;
    		}
    		
	    	if(calculoPadrao){	
	    		String[] tipoOperacao = new String[] {"E","D","CE"};
	    		List<TabelaFcValores> tabelas = tabelaFreteCarreteiroCeService.findByIdFilial(SessionUtils.getFilialSessao().getIdFilial(),tipoOperacao);
	    		
	    		if(tabelas.isEmpty()){
	    			throw new BusinessException("LMS-25117");
	    		}
	    		tfm.put("padrao", true);
	    	}	
    		tfm.put("tabelas", tipoTabelaColetaEntregaService.findTipoTabelaColetaEntregaWithTabelaColetaEntrega(
    				SessionUtils.getFilialSessao().getIdFilial(), idMeioTransporte, cc.getRotaColetaEntrega() != null ? cc.getRotaColetaEntrega().getIdRotaColetaEntrega(): null));
    		if(tfm.get("tabelas")!=null && !tfm.getList("tabelas").isEmpty() ){
    			tfm.put("tpCalculoTabelas", ((Map)tfm.getList("tabelas").get(0)).get("tpCalculo"));
    		}	    	
    	}

    	tfm.put("blDesabilitaSolicitContratacao", Boolean.valueOf(blDesabilitaSolicitContratacao));
    	return tfm;
    }


    /**
     * 
     * @param map
     * @return
     */
    public TypedFlatMap storeTrocarVeiculo(TypedFlatMap map) {
    	
    	Boolean isUsuarioDivop = Boolean.FALSE;
    	if(!controleCargaService.validateManutencaoEspecialCC(SessionUtils.getUsuarioLogado())){    		
			isUsuarioDivop = Boolean.TRUE;
		}
    	
		Long idControleCarga = map.getLong("idControleCarga");

		TypedFlatMap tfm = new TypedFlatMap();
		
		try {
		
			tfm.putAll(veiculoControleCargaService.storeTrocarVeiculo( map.getInteger("nrKmRodoviaTroca"),
											    			map.getString("dsTroca"),
											    			map.getDateTime("dhTroca"),
											    			map.getLong("idMunicipio"),
											    			map.getLong("idControleTrecho"),
											    			map.getLong("idPontoParada"),
											    			map.getLong("idRodovia"),
											    			map.getLong("idVeiculoControleCarga"),
											    			idControleCarga, 
											    			map.getLong("idMeioTransporte"), 
											    			map.getLong("idSolicitacaoContratacao"),
											    			map.getLong("idProprietario"),
											    			map.getLong("idTabelaColetaEntrega"),
											    			map.getLong("idTipoTabelaColetaEntrega"),
											    			isUsuarioDivop));
		} catch (BusinessException e) {
    		if ("LMS-26044".equals(e.getMessageKey()) && e.getMessageArguments() != null) {
    			Object[] args = e.getMessageArguments();
    			controleCargaService.storeBloqueioViagemEventual(Long.parseLong(args[0].toString()), Long.parseLong(args[1].toString()), Boolean.parseBoolean(args[2].toString()));
    		}
    		throw e;
    	}

    	List listaEventos = eventoControleCargaService.findEventoControleCargaByIdFilialByIdControleCargaByTpEvento(
    			SessionUtils.getFilialSessao().getIdFilial(), idControleCarga, "EM");
    	tfm.put("blReemitirControleCarga", !listaEventos.isEmpty());

    	if (pagtoPedagioCcService.validateExisteCartaoPedagioNaoPreenchidoByIdControleCarga(idControleCarga)) {
    		tfm.put("blNecessitaCartaoPedagio", Boolean.TRUE);
    	}
    	return tfm;
    }


    /**
     * 
     * @param map
     * @return
     */
    public TypedFlatMap storeTrocarSemiReboque(TypedFlatMap map) {
    	Long idControleCarga = map.getLong("idControleCarga");
    	
    	TypedFlatMap tfm = new TypedFlatMap();
    	
    	tfm.putAll(semiReboqueCcService.storeTrocarSemiReboque(map.getInteger("nrKmRodoviaTroca"),
										    		map.getString("dsTroca"),
									    			map.getDateTime("dhTroca"),
									    			map.getLong("idMunicipio"),
									    			map.getLong("idControleTrecho"),
									    			map.getLong("idPontoParada"),
									    			map.getLong("idRodovia"),
									    			idControleCarga, 
									    			map.getLong("idMeioTransporte")));

    	
    	List listaEventos = eventoControleCargaService.findEventoControleCargaByIdFilialByIdControleCargaByTpEvento(
    			SessionUtils.getFilialSessao().getIdFilial(), idControleCarga, "EM");
    	tfm.put("blReemitirControleCarga", !listaEventos.isEmpty());

    	if (pagtoPedagioCcService.validateExisteCartaoPedagioNaoPreenchidoByIdControleCarga(idControleCarga)) {
    		tfm.put("blNecessitaCartaoPedagio", Boolean.TRUE);
    	}
    	return tfm;
    }


    public TypedFlatMap storeTrocarMotorista(TypedFlatMap map) {
    	Long idControleCarga = map.getLong("idControleCarga");
    	
    	TypedFlatMap tfm = new TypedFlatMap();
    	
    	tfm.putAll(motoristaControleCargaService.storeTrocarMotorista( map.getInteger("nrKmRodoviaTroca"),
												    		map.getString("dsTroca"),
											    			map.getDateTime("dhTroca"),
											    			map.getLong("idMunicipio"),
											    			map.getLong("idControleTrecho"),
											    			map.getLong("idPontoParada"),
											    			map.getLong("idRodovia"),
											    			idControleCarga,
											    			map.getLong("idMotorista")));

    	List listaEventos = eventoControleCargaService.findEventoControleCargaByIdFilialByIdControleCargaByTpEvento(
    			SessionUtils.getFilialSessao().getIdFilial(), idControleCarga, "EM");
    	tfm.put("blReemitirControleCarga", !listaEventos.isEmpty());

    	if (pagtoPedagioCcService.validateExisteCartaoPedagioNaoPreenchidoByIdControleCarga(idControleCarga)) {
    		tfm.put("blNecessitaCartaoPedagio", Boolean.TRUE);
    	}
    	return tfm;
    }


	/**
     * 
     * @param criteria
     * @return
     */
    public ResultSetPage findPaginatedPagtoProprietario(TypedFlatMap criteria) {
    	Long idControleCarga = criteria.getLong("idControleCarga");
    	ResultSetPage rsp = pagtoProprietarioCcService.findPaginatedPagtoProprietarioCc(idControleCarga, FindDefinition.createFindDefinition(criteria));
    	
    	List listaRetorno = new ArrayList();
    	for (Iterator iter = rsp.getList().iterator(); iter.hasNext(); ){
    		TypedFlatMap map = (TypedFlatMap)iter.next();
    		
    		Map mapRetorno = new HashMap();
    		if (map.get("moeda.sgMoeda") != null && map.get("vlPagamento") != null) {
    			mapRetorno.put("siglaSimbolo", map.getString("moeda.sgMoeda") + " " + map.getString("moeda.dsSimbolo"));
    			mapRetorno.put("vlPagamento", map.get("vlPagamento"));
    		}
    		mapRetorno.put("nrIdentificacaoFormatado", 
    				FormatUtils.formatIdentificacao(map.getString("proprietario.pessoa.tpIdentificacao.value"), 
    						map.getString("proprietario.pessoa.nrIdentificacao")) );
    		
    		mapRetorno.put("idPagtoProprietarioCc", map.get("idPagtoProprietarioCc"));
    		mapRetorno.put("tpIdentificacao", map.get("proprietario.pessoa.tpIdentificacao.description"));
    		mapRetorno.put("nmPessoaProprietario", map.get("proprietario.pessoa.nmPessoa"));
    		
    		listaRetorno.add(mapRetorno);
    	}
    	rsp.setList(listaRetorno);
    	return rsp;
    }

    
    /**
     * 
     * @param criteria
     * @return
     */
    public Integer getRowCountPagtoProprietario(TypedFlatMap criteria) {
    	return pagtoProprietarioCcService.getRowCountPagtoProprietarioCc(criteria.getLong("idControleCarga"));
    }
    
    /**
     * 
     * @param criteria
     * @return
     */
    public List findMoeda(Map criteria) {
    	FilterList filter = new FilterList(moedaService.find(criteria)) {
			public Map filterItem(Object item) {
				Moeda moeda = (Moeda)item;
    			TypedFlatMap typedFlatMap = new TypedFlatMap();
	    		typedFlatMap.put("idMoeda", moeda.getIdMoeda());
	    		typedFlatMap.put("siglaSimbolo", moeda.getSiglaSimbolo());
		    	typedFlatMap.put("sgMoeda", moeda.getSgMoeda());
				return typedFlatMap;
			}
    	};
    	return (List)filter.doFilter();
    }


    public TypedFlatMap findByIdPagtoProprietario(Long idPagtoProprietarioCc) {
    	PagtoProprietarioCc bean = pagtoProprietarioCcService.findByIdByControleCarga(idPagtoProprietarioCc);
    	TypedFlatMap map = new TypedFlatMap();
    	map.put("idPagtoProprietarioCc", bean.getIdPagtoProprietarioCc());
    	if (bean.getControleCarga().getVlFreteCarreteiro() != null) {
	    	map.put("siglaSimboloVlFreteCarreteiro", bean.getControleCarga().getMoeda().getSiglaSimbolo());
	    	map.put("vlFreteCarreteiro", bean.getControleCarga().getVlFreteCarreteiro());
    	}
    	map.put("idProprietario", bean.getProprietario().getIdProprietario());
    	map.put("nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(bean.getProprietario().getPessoa()));
    	map.put("nmPessoaProprietario", bean.getProprietario().getPessoa().getNmPessoa());
    	if (bean.getVeiculoControleCarga().getSolicitacaoContratacao() != null) {
    		map.put("sgFilialSolicitacaoContratacao", bean.getVeiculoControleCarga().getSolicitacaoContratacao().getFilial().getSgFilial());
    		map.put("nrSolicitacaoContratacao", bean.getVeiculoControleCarga().getSolicitacaoContratacao().getNrSolicitacaoContratacao());
    	}
    	if (bean.getMoeda() != null) {
    		map.put("idMoeda", bean.getMoeda().getIdMoeda());
    	}
    	map.put("vlPagamento", bean.getVlPagamento());
    	map.put("tpVinculo", bean.getVeiculoControleCarga().getMeioTransporte().getTpVinculo().getValue());
    	return map;
    }

    
	/**
     * 
     * @param criteria
     * @return
     */
    public ResultSetPage findPaginatedLacre(TypedFlatMap criteria) {
    	Long idControleCarga = criteria.getLong("idControleCarga");
    	ResultSetPage rsp = lacreControleCargaService.findPaginatedByControleCarga(idControleCarga, FindDefinition.createFindDefinition(criteria));
    	
    	List retorno = new ArrayList();
    	for (Iterator iter = rsp.getList().iterator(); iter.hasNext();) {
    		LacreControleCarga lcc = (LacreControleCarga)iter.next();
    		TypedFlatMap map = new TypedFlatMap();
    		map.put("idLacreControleCarga", lcc.getIdLacreControleCarga());
    		map.put("nrLacres", lcc.getNrLacres());
    		map.put("dhInclusao", lcc.getDhInclusao());
    		map.put("tpStatusLacre", lcc.getTpStatusLacre());
    		map.put("sgFilialByIdFilialInclusao", lcc.getFilialByIdFilialInclusao().getSgFilial());
    		map.put("obInclusaoLacre", lcc.getObInclusaoLacre());
    		map.put("dhAlteracao", lcc.getDhAlteracao());
    		if (lcc.getFilialByIdFilialAlteraStatus() != null) {
    			map.put("sgFilialByIdFilialAlteraStatus", lcc.getFilialByIdFilialAlteraStatus().getSgFilial());
    		}
    		map.put("obConferenciaLacre", lcc.getObConferenciaLacre());
    		map.put("nmUsuarioByIdFuncInclusao", lcc.getUsuarioByIdFuncInclusao().getNmUsuario());
    		if (lcc.getUsuarioByIdFuncAlteraStatus() != null) {
    			map.put("nmUsuarioByIdFuncAlteraStatus", lcc.getUsuarioByIdFuncAlteraStatus().getNmUsuario());
    		}
    		retorno.add(map);
    	}
    	rsp.setList(retorno);
    	return rsp;
    }

    
    /**
     * 
     * @param criteria
     * @return
     */
    public Integer getRowCountLacre(TypedFlatMap criteria) {
    	return lacreControleCargaService.getRowCountByControleCarga(criteria.getLong("idControleCarga"));
    }
    

    public TypedFlatMap findByIdLacre(Long idLacreControleCarga) {
    	LacreControleCarga bean = lacreControleCargaService.findByIdByControleCarga(idLacreControleCarga);
    	TypedFlatMap map = new TypedFlatMap();
    	map.put("idLacreControleCarga", bean.getIdLacreControleCarga());
    	map.put("nrLacres", bean.getNrLacres());
    	map.put("dsLocalInclusao", bean.getDsLocalInclusao());
    	map.put("dsLocalConferencia", bean.getDsLocalConferencia());
    	map.put("obInclusaoLacre", bean.getObInclusaoLacre());
    	map.put("obConferenciaLacre", bean.getObConferenciaLacre());
    	map.put("tpStatusLacre", bean.getTpStatusLacre().getDescription().toString());
    	map.put("sgFilialByIdFilialInclusao", bean.getFilialByIdFilialInclusao().getSgFilial());
    	map.put("nmFantasiaFilialByIdFilialInclusao", bean.getFilialByIdFilialInclusao().getPessoa().getNmFantasia());
    	if (bean.getFilialByIdFilialAlteraStatus() != null) {
	    	map.put("sgFilialByIdFilialAlteraStatus", bean.getFilialByIdFilialAlteraStatus().getSgFilial());
	    	map.put("nmFantasiaFilialByIdFilialAlteraStatus", bean.getFilialByIdFilialAlteraStatus().getPessoa().getNmFantasia());
    	}
    	return map;
    }

    
    public void storeLacres(TypedFlatMap criteria) {
    	lacreControleCargaService.storeByControleCarga(	criteria.getLong("idControleCarga"),
    													criteria.getString("nrLacres"),
    													criteria.getString("obInclusaoLacre"), 
    													criteria.getString("dsLocalInclusao"));
    }
    
    /**
     * 
     * @param criteria
     * @return
     */
    public TypedFlatMap getDadosIniciaisByLacre(TypedFlatMap criteria) {
    	DomainValue dv = domainValueService.findDomainValueByValue("DM_STATUS_LACRE_VEICULO", "FE");
    	TypedFlatMap tfm = new TypedFlatMap();
    	tfm.put("tpStatusLacre", dv.getDescription().toString());
    	return tfm;
    }


    public List findTipoStatusLacre(Map criteria) {
    	List dominiosValidos = new ArrayList();
    	dominiosValidos.add("CA");
    	dominiosValidos.add("NE");
    	dominiosValidos.add("NC");
    	dominiosValidos.add("RA");
    	dominiosValidos.add("VI");
    	List retorno = domainValueService.findByDomainNameAndValues("DM_STATUS_LACRE_VEICULO", dominiosValidos);
    	return retorno;
    }
    

    public void storeConferenciaLacre(TypedFlatMap criteria) {
    	lacreControleCargaService.storeByConferenciaLacre(	criteria.getLong("idLacreControleCarga"),
															criteria.getString("tpStatusLacre"),
															criteria.getString("dsLocalConferencia"), 
															criteria.getString("obConferenciaLacre"));
    }


    public void storePagamentoProprietario(TypedFlatMap criteria) {
    	pagtoProprietarioCcService.storeByControleCarga(criteria.getLong("idPagtoProprietarioCc"),
    	    											criteria.getLong("idMoeda"),
    	    											criteria.getBigDecimal("vlPagamento"));
    }

	public List findLookupEquipe(Map criteria) {
    	Map mapFilial = new HashMap();
    	mapFilial.put("idFilial", SessionUtils.getFilialSessao().getIdFilial());
    	
    	criteria.put("filial", mapFilial);
    	return equipeService.findLookup(criteria);
	}

	public ResultSetPage findPaginatedEquipe(TypedFlatMap criteria) {
		Long idControleCarga = criteria.getLong("idControleCarga");
		ResultSetPage rsp = equipeOperacaoService.findPaginatedByIdControleCarga(
				null, idControleCarga, null, Boolean.TRUE, FindDefinition.createFindDefinition(criteria));
		List retorno = new ArrayList();
		for (Iterator iter = rsp.getList().iterator(); iter.hasNext();) {
			EquipeOperacao equipeOperacao = (EquipeOperacao) iter.next();
			TypedFlatMap map = new TypedFlatMap();
			map.put("idEquipeOperacao", equipeOperacao.getIdEquipeOperacao());
			map.put("dsEquipe", equipeOperacao.getEquipe().getDsEquipe());
			map.put("dhInicioOperacao", equipeOperacao.getDhInicioOperacao());
			map.put("dhFimOperacao", equipeOperacao.getDhFimOperacao());
			retorno.add(map);
		}
		rsp.setList(retorno);
		return rsp; 
	}


	public Integer getRowCountEquipe(TypedFlatMap criteria) {
		Long idControleCarga = criteria.getLong("idControleCarga");
		Integer integer = equipeOperacaoService.getRowCountByIdControleCarga(null, idControleCarga);
		return integer;
	}

	public List findLookupPessoa(TypedFlatMap criteria) {
		Map pessoa = new HashMap();
		pessoa.put("tpPessoa", criteria.getString("pessoa.tpPessoa"));
		pessoa.put("nrIdentificacao", criteria.getString("pessoa.nrIdentificacao"));
		pessoa.put("tpIdentificacao", criteria.getString("pessoa.tpIdentificacao"));
		pessoa.remove("pessoa.nrIdentificacao");
		pessoa.remove("pessoa.tpIdentificacao");
		return pessoaService.findLookup(pessoa);
	}
	

	public ResultSetPage findPaginatedIntegranteEqOperac(TypedFlatMap criteria) {
		Long idEquipeOperacao = criteria.getLong("idEquipeOperacao");
		ResultSetPage rsp = integranteEqOperacService.findPaginatedByIdEquipeOperacao(idEquipeOperacao, FindDefinition.createFindDefinition(criteria));

		List retorno = new ArrayList();
		for (Iterator iter = rsp.getList().iterator(); iter.hasNext();) {
			IntegranteEqOperac bean = (IntegranteEqOperac)iter.next();
			TypedFlatMap map = new TypedFlatMap();
			map.put("idIntegranteEqOperac", bean.getIdIntegranteEqOperac());
			map.put("tpIntegrante", bean.getTpIntegrante());

			if (bean.getUsuario() != null) {
				map.put("nmIntegranteEquipe", bean.getUsuario().getNmUsuario());
				map.put("nrMatricula", bean.getUsuario().getNrMatricula());
	        }
			else
			if (bean.getPessoa() != null) {
				map.put("nmIntegranteEquipe", bean.getPessoa().getNmPessoa());
				map.put("nrIdentificacaoFormatadoIntegrante", FormatUtils.formatIdentificacao(bean.getPessoa()) );
				map.put("dhInclusaoIntegrante", bean.getPessoa().getDhInclusao() );
	        }

			if (bean.getCargoOperacional() != null) {
	        	map.put("dsCargo", bean.getCargoOperacional().getDsCargo());
	        }
	        if (bean.getEmpresa() != null) {
	        	map.put("nmPessoaEmpresa", bean.getEmpresa().getPessoa().getNmPessoa());
	        }
			retorno.add(map);
		}
		rsp.setList(retorno);
		return rsp;
	}

	public Integer getRowCountIntegranteEqOperac(TypedFlatMap criteria){
		Long idEquipeOperacao = criteria.getLong("idEquipeOperacao");
				return integranteEqOperacService.getRowCountByIdEquipeOperacao(idEquipeOperacao);
	}

	public TypedFlatMap findByIdEquipeOperacao(Long id) {
		EquipeOperacao equipeOperacao = equipeOperacaoService.findById(id);
		TypedFlatMap map = new TypedFlatMap();
		map.put("idEquipeOperacao", equipeOperacao.getIdEquipeOperacao());
		map.put("idEquipe", equipeOperacao.getEquipe().getIdEquipe());
		map.put("dsEquipe", equipeOperacao.getEquipe().getDsEquipe());
		map.put("dhInicioOperacao", equipeOperacao.getDhInicioOperacao());
		map.put("dhFimOperacao", equipeOperacao.getDhFimOperacao());
		return map;
	}
	
	public List findCargo(Map criteria) {
		return cargoOperacionalService.findCargo(criteria);
	}
	
	public List findLookupEmpresa(Map criteria) {
		return empresaService.findLookup(criteria);
	}

    public List findLookupUsuarioFuncionario(TypedFlatMap tfm){
    	String nrMatricula = tfm.getString("nrMatricula");
    	if (!StringUtils.isBlank(nrMatricula)){
    		nrMatricula = StringUtils.leftPad(nrMatricula, 9, '0');
    	}
    	return usuarioService.findLookupUsuarioFuncionario(tfm.getLong("idUsuario"), nrMatricula, null, null, null, null, true);
    }

    
    public List findCargoOperacional(Map criteria) {
    	List list = cargoOperacionalService.findCargo(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		CargoOperacional cargoOperacional = (CargoOperacional)iter.next();
    		TypedFlatMap typedFlatMap = new TypedFlatMap();
    		typedFlatMap.put("idCargoOperacional", cargoOperacional.getIdCargoOperacional());
    		typedFlatMap.put("dsCargo", cargoOperacional.getDsCargo());
    		retorno.add(typedFlatMap);
    	}
    	return retorno;
    }
	
	
    public TypedFlatMap findByIdIntegranteEqOperac(Long id) {
    	IntegranteEqOperac bean = integranteEqOperacService.findById(id);
    	TypedFlatMap map = new TypedFlatMap();
    	map.put("idIntegranteEqOperac", bean.getIdIntegranteEqOperac());
        map.put("tpIntegranteValue", bean.getTpIntegrante().getValue());
        map.put("idEquipeOperacao", bean.getEquipeOperacao().getIdEquipeOperacao());

        if (bean.getTpIntegrante().getValue().equals("F")) {
              map.put("idUsuario", bean.getUsuario().getIdUsuario());
              map.put("nrMatricula", bean.getUsuario().getNrMatricula());
              map.put("nmUsuario", bean.getUsuario().getNmUsuario());
        }
        else
        	if (bean.getTpIntegrante().getValue().equals("T")) {
				map.put("idPessoa", bean.getPessoa().getIdPessoa());
				map.put("nrIdentificacaoPessoa", bean.getPessoa().getNrIdentificacao());
				map.put("nrIdentificacaoFormatadoPessoa", FormatUtils.formatIdentificacao(bean.getPessoa()));
				map.put("tpIdentificacaoValuePessoa", bean.getPessoa().getTpIdentificacao().getValue());
				map.put("nmPessoa", bean.getPessoa().getNmPessoa());
				map.put("dhInclusao", bean.getPessoa().getDhInclusao());
        	}  

        if (bean.getCargoOperacional() != null) {
              map.put("idCargoOperacional", bean.getCargoOperacional().getIdCargoOperacional());
              map.put("dsCargo", bean.getCargoOperacional().getDsCargo());
        }  
        if (bean.getEmpresa() != null) {
              map.put("idEmpresa", bean.getEmpresa().getIdEmpresa());
              map.put("nmPessoaEmpresa", bean.getEmpresa().getPessoa().getNmPessoa());
              map.put("nrIdentificacaoEmpresa", bean.getEmpresa().getPessoa().getNrIdentificacao());
              map.put("nrIdentificacaoFormatadoEmpresa", FormatUtils.formatIdentificacao(bean.getEmpresa().getPessoa()));
        }
    	return map;
    }


    public TypedFlatMap storeIntegranteEqOperac(TypedFlatMap criteria) {
    	Long idEquipeOperacao = criteria.getLong("idEquipeOperacao");
    	String tpIntegrante = criteria.getString("tpIntegrante");
    	Long idIntegranteEqOperac = criteria.getLong("idIntegranteEqOperac");
    	Long idUsuario = criteria.getLong("idUsuario");
    	Long idEmpresa = criteria.getLong("idEmpresa");
    	Long idPrestadorServico = criteria.getLong("idPrestadorServico");
    	Long idCargoOperacional = criteria.getLong("idCargoOperacional");
    	String nmIntegranteEquipe = criteria.getString("nmIntegranteEquipe");

    	IntegranteEqOperac integranteEqOperac = new IntegranteEqOperac();
    	if (idIntegranteEqOperac != null) {
    		integranteEqOperac = integranteEqOperacService.findById(idIntegranteEqOperac);
    	}
    	else {
    		integranteEqOperac.setEquipeOperacao( equipeOperacaoService.findById(idEquipeOperacao) );
    	}

    	integranteEqOperac.setTpIntegrante( new DomainValue(tpIntegrante) );
    	integranteEqOperac.setNmIntegranteEquipe(nmIntegranteEquipe);
    	if (tpIntegrante.equals("T")) {
    		integranteEqOperac.setCargoOperacional( cargoOperacionalService.findById(idCargoOperacional) );
    		integranteEqOperac.setEmpresa( empresaService.findById(idEmpresa) );
    		integranteEqOperac.setPessoa( pessoaService.findById(idPrestadorServico) );
    		integranteEqOperac.setUsuario(null);
    	}
    	else {
    		integranteEqOperac.setCargoOperacional(null);
    		integranteEqOperac.setEmpresa(null);
    		integranteEqOperac.setPessoa(null);
    		integranteEqOperac.setUsuario(usuarioService.findById(idUsuario));
    	}
    	idIntegranteEqOperac = (Long)integranteEqOperacService.store(integranteEqOperac);

    	TypedFlatMap map = new TypedFlatMap();
    	map.put("idIntegranteEqOperac", idIntegranteEqOperac);
    	return map;
    }

    
	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIdsIntegranteEqOperac(List ids) {
    	integranteEqOperacService.removeIntegranteEqOperacaoByControleCarga(ids);
    }
    
    
    public TypedFlatMap generateTrocaEquipe(TypedFlatMap criteria) {
    	Map map = equipeOperacaoService.generateTrocaEquipeByControleCarga(criteria.getLong("idEquipe"), criteria.getLong("idControleCarga"));
    	EquipeOperacao equipeOperacao = (EquipeOperacao)map.get("equipeOperacao");
    	
		TypedFlatMap tfm = new TypedFlatMap();
		tfm.put("idEquipeOperacao", equipeOperacao.getIdEquipeOperacao());
		tfm.put("idEquipe", equipeOperacao.getEquipe().getIdEquipe());
		tfm.put("dsEquipe", equipeOperacao.getEquipe().getDsEquipe());
		tfm.put("dhInicioOperacao", equipeOperacao.getDhInicioOperacao());
		tfm.put("dhFimOperacao", equipeOperacao.getDhFimOperacao());
		tfm.put("msgErro", map.get("msgErro"));
		return tfm;
    }
    
    
	/**
     * 
     * @param criteria
     * @return
     */
    public List findPaginatedManifestos(TypedFlatMap criteria) {
    	Long idControleCarga = criteria.getLong("idControleCarga");
    	List lista = manifestoService.findPaginatedManifestoByControleCarga(idControleCarga);
    	return lista;
    }


    /**
     * 
     * @param criteria
     * @return
     */
    public ResultSetPage findPaginatedDocumentos(TypedFlatMap criteria) {
    	Boolean blPreManifesto = criteria.get("dhEmissaoManifesto") == null;
    	ResultSetPage rsp = doctoServicoService.findPaginatedDoctoServicoByManifesto(
														    			criteria.getString("tpManifesto"), 
														    			blPreManifesto, criteria.getLong("idManifesto"), 
														    			criteria.getLong("idDoctoServico"), 
														    			criteria.getString("tpDocumentoServico"), 
														    			criteria.getLong("idFilialOrigemDoctoServico"),
														    			FindDefinition.createFindDefinition(criteria));
    	List lista = rsp.getList();
    	for (Iterator iter = lista.iterator(); iter.hasNext();) {
    		Map map = (Map)iter.next();
    		if (map.get("vlMercadoria") == null) {
    			map.remove("sgMoeda");
    			map.remove("dsSimbolo");
    		}
    		if (map.get("vlTotalDocServico") != null) {
    			map.put("sgMoedaVlTotal", map.get("sgMoeda"));
    			map.put("dsSimboloVlTotal", map.get("dsSimbolo"));
    		}
    	}
    	rsp.setList(lista);
    	return rsp;
    }

    /**
     * 
     * @param criteria
     * @return
     */
    public Integer getRowCountDocumentos(TypedFlatMap criteria) {
    	Boolean blPreManifesto = criteria.get("dhEmissaoManifesto") == null;
    	return doctoServicoService.getRowCountDoctoServicoByManifesto(criteria.getString("tpManifesto"), 
    																  blPreManifesto, criteria.getLong("idManifesto"), 
    																  criteria.getLong("idDoctoServico"), 
    																  criteria.getString("tpDocumentoServico"), 
    																  criteria.getLong("idFilialOrigemDoctoServico"));
    }


    /**
     * 
     * @param criteria
     * @return
     */
    public TypedFlatMap findDadosManifesto(TypedFlatMap criteria) {
    	Manifesto manifesto = manifestoService.findById(criteria.getLong("idManifesto"));

    	TypedFlatMap map = new TypedFlatMap();
    	Long nrManifesto = manifesto.getNrPreManifesto();
    	String tpManifesto = manifesto.getTpManifesto().getValue();
    	map.put("idManifesto", manifesto.getIdManifesto());
    	map.put("sgFilialByIdFilialOrigem", manifesto.getFilialByIdFilialOrigem().getSgFilial());
    	map.put("dhEmissaoManifesto", manifesto.getDhEmissaoManifesto());

    	if (tpManifesto.equals("E")) {
    		map.put("tpManifestoDescription", domainValueService.findDomainValueDescription("DM_TAG_MANIFESTO", "EN"));
    		if (manifesto.getDhEmissaoManifesto() != null) {
    			nrManifesto = Long.valueOf(manifesto.getManifestoEntrega().getNrManifestoEntrega().toString());
    		}
    	}
    	else {
    		tpManifesto += manifesto.getTpAbrangencia().getValue();
	    	if (tpManifesto.equals("VN")) {
	    		map.put("tpManifestoDescription", domainValueService.findDomainValueDescription("DM_TAG_MANIFESTO", "VN"));
	    		if (manifesto.getDhEmissaoManifesto() != null) {
	    			nrManifesto = Long.valueOf(manifesto.getManifestoViagemNacional().getNrManifestoOrigem().toString());
	    		}
	    	}
	    	else
	    	if (tpManifesto.equals("VI")) {
	    		map.put("tpManifestoDescription", domainValueService.findDomainValueDescription("DM_TAG_MANIFESTO", "VI"));
	    		if (manifesto.getDhEmissaoManifesto() != null) {
	    			nrManifesto = manifesto.getManifestoInternacional().getNrManifestoInt();
	    		}
	    	}
    	}
    	
    	map.put("nrManifesto", nrManifesto);
    	map.put("tpManifestoValue", tpManifesto);
    	return map;
    }
    

    public void validateSemiReboqueToLocalTroca(TypedFlatMap criteria) {
    	controleCargaService.validateSemiReboqueControleCarga(criteria.getLong("idMeioTransporte"));
    }


    /**
     * 
     * @param criteria
     * @return
     */
	public void findDadosSolicitacaoContratacao(TypedFlatMap criteria) {
		Long idSolicitacaoContratacao = criteria.getLong("idSolicitacaoContratacao");
		Long idControleCarga = criteria.getLong("idControleCarga");
		
		solicitacaoContratacaoService.
			validateExistSolicitacaoContratacao(SessionUtils.getFilialSessao().getIdFilial(), idSolicitacaoContratacao);
		
		SolicitacaoContratacao sc = solicitacaoContratacaoService.findById(idSolicitacaoContratacao);

		if (sc.getControleCarga() == null || !sc.getControleCarga().getIdControleCarga().equals( idControleCarga )) {
			throw new BusinessException("LMS-05315");
		}
		ControleCarga cc = controleCargaService.findById(idControleCarga);

		if (sc.getRota() != null && cc.getRota() != null && sc.getRota().getIdRota().compareTo(cc.getRota().getIdRota()) != 0) {
			throw new BusinessException("LMS-05120");
		}

	}


	public Map validateExisteManifestoEmitido(TypedFlatMap criteria) {
		String tpManifesto = null;
		String origem = criteria.getString("origem");
		if (!StringUtils.isBlank(origem) && origem.equals("motorista")) {
			tpManifesto = "V";
		}

		List lista = manifestoService.findManifestoByIdControleCarga(
				criteria.getLong("idControleCarga"), SessionUtils.getFilialSessao().getIdFilial(), "ME", tpManifesto);

		Map map = new HashMap();
		map.put("blExisteManifestoEmitido", !lista.isEmpty());
		return map;
	}
	
	public String emitirRelatorioDocumentos(TypedFlatMap parameters) throws Exception {
		String tpManifesto = parameters.getString("tpManifesto");
		
		if(ConstantesExpedicao.TP_RELATORIO_CONTROLE_CARGA_COLETA.equalsIgnoreCase(tpManifesto)){
			return this.reportExecutionManager.generateReportLocator(this.emitirRelatorioControleCargaManifestoColetaService, parameters);
		}else if(ConstantesExpedicao.TP_RELATORIO_CONTROLE_CARGA_ENTREGA.equalsIgnoreCase(tpManifesto)){
			return this.reportExecutionManager.generateReportLocator(this.emitirRelatorioControleCargaManifestoEntregaService, parameters);
		}else if( ConstantesExpedicao.TP_RELATORIO_CONTROLE_CARGA_VIAGEM.equalsIgnoreCase(tpManifesto) ){
			return this.reportExecutionManager.generateReportLocator(this.emitirRelatorioControleCargaManifestoViagemService, parameters);
		}
		
		return null;
	}
	
	public ReportExecutionManager getReportExecutionManager() {
		return reportExecutionManager;
	}
	
	public void setReportExecutionManager(
			ReportExecutionManager reportExecutionManager) {
		this.reportExecutionManager = reportExecutionManager;
	}
	
	
	public EmitirRelatorioControleCargaManifestoColetaService getEmitirRelatorioManifestoColetaEntregaService() {
		return emitirRelatorioControleCargaManifestoColetaService;
	}
	
	public void setEmitirRelatorioManifestoColetaEntregaService(EmitirRelatorioControleCargaManifestoColetaService emitirRelatorioManifestoColetaEntregaService) {
		this.emitirRelatorioControleCargaManifestoColetaService = emitirRelatorioManifestoColetaEntregaService;
	}
	
	public EmitirRelatorioControleCargaManifestoEntregaService getEmitirRelatorioControleCargaManifestoEntregaService() {
		return emitirRelatorioControleCargaManifestoEntregaService;
	}
	public void setEmitirRelatorioControleCargaManifestoEntregaService(
			EmitirRelatorioControleCargaManifestoEntregaService emitirRelatorioControleCargaManifestoEntregaService) {
		this.emitirRelatorioControleCargaManifestoEntregaService = emitirRelatorioControleCargaManifestoEntregaService;
	}
	public EmitirRelatorioControleCargaManifestoViagemService getEmitirRelatorioControleCargaManifestoViagemService() {
		return emitirRelatorioControleCargaManifestoViagemService;
	}
	public void setEmitirRelatorioControleCargaManifestoViagemService(
			EmitirRelatorioControleCargaManifestoViagemService emitirRelatorioControleCargaManifestoViagemService) {
		this.emitirRelatorioControleCargaManifestoViagemService = emitirRelatorioControleCargaManifestoViagemService;
	}
	public void setConteudoParametroFilialService(
			ConteudoParametroFilialService conteudoParametroFilialService) {
		this.conteudoParametroFilialService = conteudoParametroFilialService;
	}
	public void setTabelaFreteCarreteiroCeService(
			TabelaFreteCarreteiroCeService tabelaFreteCarreteiroCeService) {
		this.tabelaFreteCarreteiroCeService = tabelaFreteCarreteiroCeService;
	}
	
}