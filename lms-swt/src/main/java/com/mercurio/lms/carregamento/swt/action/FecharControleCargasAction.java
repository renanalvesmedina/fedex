package com.mercurio.lms.carregamento.swt.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.ControleCarga;
import com.mercurio.lms.carregamento.model.ControleTrecho;
import com.mercurio.lms.carregamento.model.service.ControleCargaService;
import com.mercurio.lms.carregamento.model.service.ControleTrechoService;
import com.mercurio.lms.carregamento.model.service.ManifestoService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.FormatUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.carregamento.swt.fecharControleCargasAction"
 */

public class FecharControleCargasAction {
	
	private ControleCargaService controleCargaService;
	private ControleTrechoService controleTrechoService;
	private FilialService filialService;
	private ManifestoService manifestoService;


	public void setControleTrechoService(ControleTrechoService controleTrechoService) {
		this.controleTrechoService = controleTrechoService;
	}
	public void setManifestoService(ManifestoService manifestoService) {
		this.manifestoService = manifestoService;
	}
	public void setControleCargaService(ControleCargaService controleCargaService) {
		this.controleCargaService = controleCargaService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}


	public Map findDataControleCarga(Long idControleCarga) {
		Map map = new HashMap();
		ControleCarga cc = controleCargaService.findByIdControleCarga(idControleCarga);

    	if (!cc.getTpControleCarga().getValue().equals("V"))
    		throw new BusinessException("LMS-05027");

		if (cc.getTpStatusControleCarga().getValue().equals("CA"))
			throw new BusinessException("LMS-05123");

		if (cc.getTpStatusControleCarga().getValue().equals("FE"))
			throw new BusinessException("LMS-05168");
		
		map.put("tpControleCargaDescription", cc.getTpControleCarga().getDescription().toString());
		if (cc.getSolicitacaoContratacao() != null) {
			map.put("sgFilialSolicitacaoContratacao", cc.getSolicitacaoContratacao().getFilial().getSgFilial());
			map.put("nrSolicitacaoContratacao", cc.getSolicitacaoContratacao().getNrSolicitacaoContratacao());
			if (cc.getRota() != null) {
				map.put("dsRota", cc.getRota().getDsRota());
			}
		}
		if (cc.getTpRotaViagem() != null) {
			map.put("tpRotaViagemDescription", cc.getTpRotaViagem().getDescription().toString());
		}
    	if (cc.getRotaIdaVolta() != null) {
        	map.put("nrRotaIdaVolta", cc.getRotaIdaVolta().getNrRota());
        	map.put("dsRotaIdaVolta", cc.getRotaIdaVolta().getRota().getDsRota());
    	}
		if (cc.getMeioTransporteByIdTransportado() != null) {
			map.put("nrFrotaMeioTransportado", cc.getMeioTransporteByIdTransportado().getNrFrota());
			map.put("nrIdentificadorMeioTransportado", cc.getMeioTransporteByIdTransportado().getNrIdentificador());
		}
		if (cc.getMeioTransporteByIdSemiRebocado() != null) {
			map.put("nrFrotaSemiRebocado", cc.getMeioTransporteByIdSemiRebocado().getNrFrota());
			map.put("nrIdentificadorSemiRebocado", cc.getMeioTransporteByIdSemiRebocado().getNrIdentificador());
		}
		if (cc.getProprietario() != null) {
			map.put("nrIdentificacaoProprietario", FormatUtils.formatIdentificacao(cc.getProprietario().getPessoa()));
			map.put("nmPessoaProprietario", cc.getProprietario().getPessoa().getNmPessoa());
		}
		if (cc.getMotorista() != null) {
			map.put("nrIdentificacaoMotorista", FormatUtils.formatIdentificacao(cc.getMotorista().getPessoa()) );
			map.put("nmPessoaMotorista", cc.getMotorista().getPessoa().getNmPessoa());
		}
    	if (cc.getVlFreteCarreteiro() != null && cc.getMoeda() != null) {
    		map.put("moedaVlFreteCarreteiro", cc.getMoeda().getSgMoeda() + " " + cc.getMoeda().getDsSimbolo());
    		map.put("vlFreteCarreteiro", cc.getVlFreteCarreteiro());
    	}
    	if (cc.getNrTempoViagem() != null) {
	    	map.put("hrTempoViagem", FormatUtils.converteMinutosParaHorasMinutos(Long.valueOf(cc.getNrTempoViagem()), FormatUtils.ESCALA_HHH));
    	}

		ControleTrecho ct = controleTrechoService.findControleTrechoByIdControleCargaByIdFilialOrigemByIdFilialDestino(
				cc.getIdControleCarga(), cc.getFilialByIdFilialOrigem().getIdFilial(), null);
		if (ct != null) {
			map.put("dhSaida", ct.getDhSaida());
		}

    	if (cc.getFilialByIdFilialAtualizaStatus() != null) {
        	map.put("tpStatusControleCargaDescription", cc.getTpStatusControleCarga().getDescription().toString());
        	if (!cc.getTpStatusControleCarga().getValue().equals("EV"))
        		map.put("sgFilialAtualizaStatus", cc.getFilialByIdFilialAtualizaStatus().getSgFilial());
    	}
    	map.put("blDesabilitaBotaoFechar", !controleCargaService.validatePermiteFecharControleCarga(idControleCarga));
		return map;
	}
	
	
	public List findLookupFilialByControleCarga(Map criteria) {
    	List list = filialService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		Filial filial = (Filial)iter.next();
    		TypedFlatMap tfm = new TypedFlatMap();
    		tfm.put("idFilial", filial.getIdFilial());
    		tfm.put("sgFilial", filial.getSgFilial());
    		tfm.put("nmFantasia", filial.getPessoa().getNmFantasia());
    		retorno.add(tfm);
    	}
    	return retorno;
    }


    public List findLookupControleCarga(Map criteria) {
    	List list = controleCargaService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		ControleCarga cc = (ControleCarga)iter.next();
    		Map map = new HashMap();
    		map.put("idControleCarga", cc.getIdControleCarga());
    		map.put("nrControleCarga", cc.getNrControleCarga());
    		map.put("idFilialOrigem", cc.getFilialByIdFilialOrigem().getIdFilial());
    		map.put("sgFilialOrigem", cc.getFilialByIdFilialOrigem().getSgFilial());
    		map.put("nmFantasiaFilialOrigem", cc.getFilialByIdFilialOrigem().getPessoa().getNmFantasia());
    		retorno.add(map);
    	}
    	return retorno;
    }

    
    public void generateFecharControleCarga(TypedFlatMap tfm) {
    	controleCargaService.generateFechamentoControleCarga(tfm.getLong("idControleCarga"));
    }
    

    public List findPaginatedManifestos(TypedFlatMap criteria) {
    	Long idControleCarga = criteria.getLong("idControleCarga");
    	List lista = manifestoService.findPaginatedManifestoByControleCarga(idControleCarga);
    	return lista;
    }
}