package com.mercurio.lms.carregamento.swt.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mercurio.adsm.core.util.ReflectionUtils;
import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.hibernate.VarcharI18n;
import com.mercurio.adsm.framework.model.masterdetail.ItemList;
import com.mercurio.adsm.framework.model.masterdetail.ItemListConfig;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailAction;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailFactory;
import com.mercurio.adsm.framework.model.masterdetail.MasterDetailKey;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntry;
import com.mercurio.adsm.framework.model.masterdetail.MasterEntryConfig;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.CargoOperacional;
import com.mercurio.lms.carregamento.model.EquipeOperacao;
import com.mercurio.lms.carregamento.model.IntegranteEqOperac;
import com.mercurio.lms.carregamento.model.PrestadorServico;
import com.mercurio.lms.carregamento.model.service.CargoOperacionalService;
import com.mercurio.lms.carregamento.model.service.CarregamentoDescargaService;
import com.mercurio.lms.carregamento.model.service.ControleCargaService;
import com.mercurio.lms.carregamento.model.service.EquipeService;
import com.mercurio.lms.carregamento.model.service.IntegranteEqOperacService;
import com.mercurio.lms.carregamento.model.service.PrestadorServicoService;
import com.mercurio.lms.configuracoes.model.Pessoa;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.configuracoes.model.service.PessoaService;
import com.mercurio.lms.configuracoes.model.service.UsuarioService;
import com.mercurio.lms.municipios.model.Empresa;
import com.mercurio.lms.municipios.model.service.EmpresaService;
import com.mercurio.lms.portaria.model.service.BoxService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.PessoaUtils;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 * 
 * Não inserir documentação após ou remover a tag do XDoclet a seguir. O valor
 * do <code>id</code> informado abaixo deve ser utilizado para referenciar
 * este serviço.
 * 
 * @spring.bean id="lms.carregamento.swt.iniciarCarregamentoAction"
 */

public class IniciarCarregamentoAction extends MasterDetailAction {
	private IntegranteEqOperacService integranteEqOperacService;
	private EquipeService equipeService;
	private BoxService boxService;
	private CargoOperacionalService cargoOperacionalService;
	private UsuarioService usuarioService;
	private PessoaService pessoaService;
	private PrestadorServicoService prestadorServicoService;
	private EmpresaService empresaService;
	private ControleCargaService controleCargaService;
	
	
	/**
	 * Chama a service de carregamentoDescarga para gerar o registro de 
	 * inicio de carregamento.
	 * 
	 * @param Map criteria
	 * @return
	 */
	public Serializable storeIniciarCarregamento(Map criteria) {
    	TypedFlatMap tfmCriteria = new TypedFlatMap();
    	tfmCriteria.put("controleCarga.idControleCarga", criteria.get("idControleCarga"));
    	tfmCriteria.put("box.idBox", criteria.get("idBox"));
    	tfmCriteria.put("equipe.idEquipe", criteria.get("idEquipe"));		
		
		MasterEntry entry = getMasterFromSession(null, true);
    	EquipeOperacao equipeOperacao = (EquipeOperacao) entry.getMaster();    	
    	ItemList items = getItemsFromSession(entry, "integrantes");
    	
    	StringBuffer sb = new StringBuffer();
    	boolean isError = false;
    	if (items.isInitialized() == false) {
			List result = integranteEqOperacService.findIntegranteEqOperacao(tfmCriteria.getLong("equipe.idEquipe"));						
			items.initialize(new ArrayList());			
			for (Iterator iter = result.iterator(); iter.hasNext();) {				
				IntegranteEqOperac integranteEqOperac = (IntegranteEqOperac) iter.next();
				
				Long idPrestadorServico = null;
				Long idUsuario = null;
				if (integranteEqOperac.getPessoa() != null) {
					idPrestadorServico = integranteEqOperac.getPessoa().getIdPessoa();		
				}
				if (integranteEqOperac.getUsuario() != null) {
					idUsuario = integranteEqOperac.getUsuario().getIdUsuario();		
				}
				List listResult = controleCargaService.findIntegranteEmEquipesComControleCarga(tfmCriteria.getLong("controleCarga.idControleCarga"), idPrestadorServico, idUsuario);
				if (listResult.isEmpty()) {
					super.saveItemInstanceOnSession(null, integranteEqOperac, "integrantes");	
				} else {
					isError = true;
					Map mapResult = (Map)listResult.get(0);
		    		String siglaNumero = FormatUtils.formatSgFilialWithLong((String)mapResult.get("sgFilial"), (Long)mapResult.get("nrControleCarga"), "00000000");
		    		sb.append("\n- ").append((String)mapResult.get("nmIntegrante")).append(" (").append(siglaNumero).append(")");
				}
			}
    	}
    	
		if (isError) {
			throw new BusinessException("LMS-05173", new Object[]{sb.toString()});
		}
    	
    	ItemListConfig config = getMasterConfig().getItemListConfig("integrantes");
    	Serializable idCarregamentoDescarga = this.getCarregamentoDescargaService().storeInicioCarregamento(tfmCriteria, equipeOperacao, items, config);
    	
    	items.resetItemsState(); 
    	updateMasterInSession(entry);
		
		return idCarregamentoDescarga;
	}
    
    /***
     * Remoção de um conjunto de registros Master.
     * 
     * @param ids
	 *
     */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	equipeService.removeByIds(ids);
    }

    /**
     * Remoção de um registro Master.
     * @param id
     */
    public void removeById(Long id) {
    	this.getCarregamentoDescargaService().removeById(id);
		super.newMaster();
    }
    
	/**	 
	 * Salva a referencia do objeto Master na sessão.
	 * não devem ser inicializadas as coleções que representam os filhos
	 * já que o usuário pode vir a não utilizar a aba de filhos, evitando assim
	 * a carga desnecessária de objetos na sessão e a partir do banco de dados.
	 * 
	 * @param id
	 */
    public Object findById(Long id) {
		Object masterObj = this.getCarregamentoDescargaService().findById(id);
		putMasterInSession(masterObj); 
		return masterObj;
    }
    
    /**
     * Salva um item na sessão.
     * 
     * @param bean
     * @return
     */
    public Serializable saveIntegranteEqOperac(Map criteria) {
    	Long idControleCarga = (Long)criteria.get("idControleCarga");
		String tpIntegrante = (String)criteria.get("tpIntegrante");
		Long idIntegranteEqOperac = (Long)criteria.get("idIntegranteEqOperac");
		Long idUsuario = (Long)criteria.get("idUsuario");
		Long idPrestadorServico = (Long)criteria.get("idPrestadorServico");
		
    	MasterEntry entry = getMasterFromSession(null, true);
    	ItemList itemsIntegrantes = getItemsFromSession(entry, "integrantes");    	
    	ItemListConfig itensIntegrantesConfig = getMasterConfig().getItemListConfig("integrantes");
    	for (Iterator iter = itemsIntegrantes.iterator(null, itensIntegrantesConfig); iter.hasNext();) {
    		IntegranteEqOperac integranteEqOperac = (IntegranteEqOperac) iter.next();
			
    		if (!integranteEqOperac.getIdIntegranteEqOperac().equals(idIntegranteEqOperac)) {
	    		if (tpIntegrante.equals(integranteEqOperac.getTpIntegrante().getValue())){
		    		if (tpIntegrante.equals("F")){
		    			if (integranteEqOperac.getUsuario().getIdUsuario().equals(idUsuario)) {
		    				throw new BusinessException("LMS-05023");
		    			}
		    		} else {
		    			if (integranteEqOperac.getPessoa().getIdPessoa().equals(idPrestadorServico)) {
		    				throw new BusinessException("LMS-05023");
		    			}
		    		}
	    		}
    		}
		}
    	
		controleCargaService.validateIntegranteEmEquipesComControleCarga(idControleCarga, idPrestadorServico, idUsuario);
		if (tpIntegrante.equals("T")) {
			Pessoa pessoa = pessoaService.findById(idPrestadorServico);
			equipeService.validateTerceiroIsFuncionario(FormatUtils.formatIdentificacao(pessoa));
		}
    	
    	return saveItemInstance(criteria, "integrantes");
    }
   
    /**
     * Faz o findPaginated do filho
     * Possui uma chamada 'interna' para o findPaginated(initialize) 
     * contido dentro do 'createMasterConfig'
     * 
     * @param parameters
     * @return
     */
    public Map findPaginatedIntegranteEqOperac(Map parameters) {
    	Long masterId = getMasterId(parameters);
    	MasterEntry entry = getMasterFromSession(masterId, true);
		ItemList listIntegrantes = entry.getItems("integrantes");
		
		//Na primeira passada ele se obriga a carregar a tela...
		List listParamsError = new ArrayList();
		if (listIntegrantes.isInitialized() == false) {
			Long idControleCarga = (Long)parameters.get("idControleCarga");
			Long idEquipe = (Long)parameters.get("idEquipe");
			List result = integranteEqOperacService.findIntegranteEqOperacao(idEquipe);
						
			listIntegrantes.initialize(new ArrayList());			
			for (Iterator iter = result.iterator(); iter.hasNext();) {				
				IntegranteEqOperac integranteEqOperac = (IntegranteEqOperac) iter.next();
				
				Long idPrestadorServico = null;
				Long idUsuario = null;
				if (integranteEqOperac.getPessoa() != null) {
					idPrestadorServico = integranteEqOperac.getPessoa().getIdPessoa();		
				}
				if (integranteEqOperac.getUsuario() != null) {
					idUsuario = integranteEqOperac.getUsuario().getIdUsuario();		
				}
				List listResult = controleCargaService.findIntegranteEmEquipesComControleCarga(idControleCarga, idPrestadorServico, idUsuario);
				if (listResult.isEmpty()) {
					super.saveItemInstanceOnSession(masterId, integranteEqOperac, "integrantes");	
				} else {
					Map mapResult = (Map)listResult.get(0);
					mapResult.put("siglaNumero", FormatUtils.formatSgFilialWithLong((String)mapResult.get("sgFilial"), (Long)mapResult.get("nrControleCarga"), "00000000"));
					listParamsError.add(mapResult);
				}
			}
		}
		
    	ResultSetPage resultSetPage = findPaginatedItemList(parameters, "integrantes");    	
    	List listIntegranteEqOperac = new ArrayList();
    	for(int i=0; i< resultSetPage.getList().size(); i++) {
    		IntegranteEqOperac integranteEqOperac = (IntegranteEqOperac) resultSetPage.getList().get(i);    	
			Map mapIntegranteEqOperac = new HashMap();
			
			mapIntegranteEqOperac.put("idIntegranteEqOperac", integranteEqOperac.getIdIntegranteEqOperac());
			mapIntegranteEqOperac.put("nmIntegranteEquipe", integranteEqOperac.getNmIntegranteEquipe());
			
			Map mapTpIntegrante = new HashMap();
			mapTpIntegrante.put("value", integranteEqOperac.getTpIntegrante().getValue());
			mapTpIntegrante.put("description", ((VarcharI18n)integranteEqOperac.getTpIntegrante().getDescription()).toString());
			mapTpIntegrante.put("status", integranteEqOperac.getTpIntegrante().getStatus());
			mapIntegranteEqOperac.put("tpIntegrante", mapTpIntegrante);
			
			if (integranteEqOperac.getUsuario() != null) {
				mapIntegranteEqOperac.put("nrMatricula", integranteEqOperac.getUsuario().getNrMatricula());
			}
			if (integranteEqOperac.getCargoOperacional() != null) {
				mapIntegranteEqOperac.put("dsCargo", integranteEqOperac.getCargoOperacional().getDsCargo());
			}
			if (integranteEqOperac.getPessoa() != null) {
				mapIntegranteEqOperac.put("nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(integranteEqOperac.getPessoa()));
			}
			if (integranteEqOperac.getEmpresa() != null) {
				mapIntegranteEqOperac.put("nmEmpresa", integranteEqOperac.getEmpresa().getPessoa().getNmPessoa());
			}
    		
    		listIntegranteEqOperac.add(mapIntegranteEqOperac);
    	}    	
    	    	
    	Map mapResultSetPage = new HashMap();
    	mapResultSetPage.put("currentPage", resultSetPage.getCurrentPage());
    	mapResultSetPage.put("hasNextPage", resultSetPage.getHasNextPage());
    	mapResultSetPage.put("hasPriorPage", resultSetPage.getHasPriorPage());
    	mapResultSetPage.put("list", listIntegranteEqOperac);
    	
    	Map mapReturn = new HashMap();
    	mapReturn.put("resultSetPage", mapResultSetPage);
    	if (!listParamsError.isEmpty()) {
    		mapReturn.put("paramsError", listParamsError);
		}
    	
    	return mapReturn;
    }
    
    /**
     * Faz o getRowCount do filho
     * Possui uma chamada 'interna' para o getRowCount contido dentro 
     * do 'createMasterConfig'
     * 
     * @param parameters
     * @return
     */
    public Integer getRowCountIntegranteEqOperac(Map parameters) {
    	return getRowCountItemList(parameters, "integrantes");
    }
    
    public Object findByIdIntegranteEqOperac(MasterDetailKey key) {
    	IntegranteEqOperac integranteEqOperac = (IntegranteEqOperac)findItemById(key, "integrantes");
    	
    	Map mapIntegranteEqOperac = new HashMap();
    	
    	mapIntegranteEqOperac.put("idIntegranteEqOperac", integranteEqOperac.getIdIntegranteEqOperac());
        mapIntegranteEqOperac.put("nmIntegranteEquipe", integranteEqOperac.getNmIntegranteEquipe());
        mapIntegranteEqOperac.put("tpIntegrante", integranteEqOperac.getTpIntegrante().getValue());
 
        if (integranteEqOperac.getUsuario() != null) {        	
        	mapIntegranteEqOperac.put("idUsuario", integranteEqOperac.getUsuario().getIdUsuario());
        	mapIntegranteEqOperac.put("nrMatricula", integranteEqOperac.getUsuario().getNrMatricula());
        	mapIntegranteEqOperac.put("nmUsuario", integranteEqOperac.getUsuario().getNmUsuario());
        }

        if (integranteEqOperac.getPessoa() != null) {
			mapIntegranteEqOperac.put("idPrestadorServico", integranteEqOperac.getPessoa().getIdPessoa());
			mapIntegranteEqOperac.put("nrIdentificacao", FormatUtils.formatIdentificacao(integranteEqOperac.getPessoa()));
			mapIntegranteEqOperac.put("nmPessoa", integranteEqOperac.getPessoa().getNmPessoa());
        }  

        if (integranteEqOperac.getCargoOperacional() != null) {
			mapIntegranteEqOperac.put("idCargoOperacional", integranteEqOperac.getCargoOperacional().getIdCargoOperacional());
			mapIntegranteEqOperac.put("dsCargo", integranteEqOperac.getCargoOperacional().getDsCargo());
        }  

        if (integranteEqOperac.getEmpresa() != null) {
			mapIntegranteEqOperac.put("idEmpresa", integranteEqOperac.getEmpresa().getIdEmpresa());
			mapIntegranteEqOperac.put("tpSituacao", integranteEqOperac.getEmpresa().getTpSituacao().getValue());
			mapIntegranteEqOperac.put("nmEmpresa", integranteEqOperac.getEmpresa().getPessoa().getNmPessoa());
        }
    	
    	return mapIntegranteEqOperac;
    }
    
    /***
     * Remove uma lista de registros items.
     *  
     * @param ids ids dos registros item a serem removidos.
     * 
	 *
     */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIdsIntegranteEquipe(List ids) {
    	super.removeItemByIds(ids, "integrantes");
    }

	protected MasterEntryConfig createMasterConfig(MasterDetailFactory masterFactory) { 
		
		//Declaracao da classe pai
		MasterEntryConfig config = masterFactory.createMasterEntryConfig(EquipeOperacao.class);

		/*
		 * Esta classe e reponsavel por ordenar a List dos filhos que estao
		 * em memoria de acordo com as regras de negocio
		 */
    	Comparator descComparator = new Comparator() {
			public int compare(Object obj1, Object obj2) {
				IntegranteEqOperac integranteEqOperac1 = (IntegranteEqOperac)obj1;
				IntegranteEqOperac integranteEqOperac2 = (IntegranteEqOperac)obj2;
				
				if (integranteEqOperac1.getCargoOperacional()==null) return -1;
				if (integranteEqOperac2.getCargoOperacional()==null) return 1;
				
				return integranteEqOperac1.getCargoOperacional().getDsCargo().compareTo(integranteEqOperac2.getCargoOperacional().getDsCargo());		
			}    		
    	};
    	    	
    	/*
    	 * Esta instancia é responsavel por carregar os 
    	 * items filhos na sessão a partir do banco de dados.
    	 */
    	ItemListConfig itemInit = new ItemListConfig() {
 
    		/**
    		 * Find paginated do filho
    		 * Passa por este ponto apenas na primeira vez em que a list filha e chamada.
    		 * Apos a primeira vez ela e carregada da memoria
    		 * 
    		 *  @param masterId id do pai
    		 *  @param parameters todos os parametros vindo da tela pai
    		 */
			public List initialize(Long masterId, Map parameters) {

				return null;
			}
			
			/**
			 * Busca rowCount da grid da tela filha
			 * Passa por este ponto apenas na primeira vez em que a list filha e chamada.
    		 * Apos a primeira vez ela e carregada da memoria
			 * 
			 * @param masterId id do pai
			 */
			public Integer getRowCount(Long masterId, Map parameters) {
				return null;
			}			

			/**
			 * Todos os dados a serem carregados na grid pelo form passam antes por este
			 * metodo. Para se fazer uma validacao...
			 * Recomenda-se que o bean em questao seja gerado nesta classe a partir dos
			 * parametros enviados da tela para se evitar um 'ReflectionUtils'
			 * 
			 * @param parameters 
			 * @param bean a ser istanciado
			 * @return Object bean instanciado
			 */
			public Object populateNewItemInstance(Map parameters, Object object) {
				IntegranteEqOperac integranteEqOperac = (IntegranteEqOperac) object;
				integranteEqOperac.setIdIntegranteEqOperac((Long)parameters.get("idIntegranteEqOperac"));
								
				DomainValue domainValue = getDomainValueService().findDomainValueByValue("DM_INTEGRANTE_EQUIPE", (String)parameters.get("tpIntegrante"));				
				integranteEqOperac.setTpIntegrante(domainValue);
				
				if (integranteEqOperac.getTpIntegrante().getValue().equals("F")) {
					Usuario usuario = usuarioService.findById((Long)parameters.get("idUsuario")) ;
					
					//Gera um objeto cargoOperacional apenas para visualizacao e ordenacao.
					CargoOperacional cargoOperacional = new CargoOperacional();
					cargoOperacional.setDsCargo((String)parameters.get("dsFuncao"));
					
					integranteEqOperac.setCargoOperacional(cargoOperacional);
					integranteEqOperac.setNmIntegranteEquipe(usuario.getNmUsuario());
					integranteEqOperac.setUsuario(usuario);
				} else {
					//Busca os ids...
					final Long idPrestadorServico = (Long)parameters.get("idPrestadorServico");
					final Long idCargoOperacional = (Long)parameters.get("idCargoOperacional");
					final Long idEmpresa = (Long)parameters.get("idEmpresa");
					
					//Busca e seta os objetos...
					if (idPrestadorServico!=null) { 
						integranteEqOperac.setPessoa(pessoaService.findById(idPrestadorServico));
						integranteEqOperac.setNmIntegranteEquipe(integranteEqOperac.getPessoa().getNmPessoa()); 
					}
					if (idCargoOperacional!=null) integranteEqOperac.setCargoOperacional(cargoOperacionalService.findById(idCargoOperacional));
					if (idEmpresa!=null) integranteEqOperac.setEmpresa(empresaService.findById(idEmpresa));					
				}
				return integranteEqOperac;
			}
			
			/**
			 * Chama esta funcao depois de editar um item da grid filho
			 * E retira atributos desnecessarios para o filho
			 * 
			 * @param newBean 
			 * @param oldBean 
			 */
			public void modifyItemValues(Object newBean, Object oldBean) {
				Set ignore = new HashSet();
				ignore.add("versao");
				ignore.add("idIntegranteEqOperac");
				ignore.add("equipeOperacao");				
				ReflectionUtils.syncObjectProperties(oldBean, newBean, ignore);				
			}

			/**
			 * Mapeia atributos de dominio do pojo filho
			 */
			public Map configItemDomainProperties() {
				return null;
			}

    	};
    	//Seta as configuracoes do filho...
		config.addItemConfig("integrantes", IntegranteEqOperac.class, itemInit, descComparator);
		return config;
	}

	/*
	 * Chamadas para metodos diversos da tela
	 */
	
	public List findEquipes(Map criteria) {
		return this.equipeService.findLookup(criteria);
	}

	public List findBox(Map criteria) {
		return boxService.findBoxVigentePorFilial(SessionUtils.getFilialSessao().getIdFilial());
	}
	
	public List findCargos(Map criteria) {
    	List result = this.cargoOperacionalService.findCargo(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = result.iterator(); iter.hasNext();) {
			CargoOperacional cargoOperacional = (CargoOperacional)iter.next();
			Map include = new HashMap();
			include.put("idCargoOperacional", cargoOperacional.getIdCargoOperacional());
			include.put("dsCargo", cargoOperacional.getDsCargo());
			include.put("tpSituacao", cargoOperacional.getTpSituacao());
			
			retorno.add(include);
		}
    	
    	return retorno;
	}
	
	public List findEmpresas(Map criteria) {
		Map mapPessoa = new HashMap();
		mapPessoa.put("nmPessoa", criteria.get("nmPessoa"));
		criteria.put("pessoa", mapPessoa);
		criteria.remove("nmPessoa");
			
		List result = empresaService.findLookup(criteria);
		List listReturn = new ArrayList();		
		for (Iterator iter = result.iterator(); iter.hasNext();) {
			Empresa empresa = (Empresa) iter.next();

			Map mapReturn = new HashMap();			
			mapReturn.put("idEmpresa", empresa.getIdEmpresa());
			mapReturn.put("nmPessoa", empresa.getPessoa().getNmPessoa());
						
			listReturn.add(mapReturn);
		}
		return listReturn;		
	}
	
	/**
	 * Busca para o objeto pessoa da Prestadora de Serviço.
	 * 
	 * @param criteria
	 * @return
	 */
    public List findLookupPrestadorServico(Map criteria) {
    	Map mapPessoa = new HashMap();
		mapPessoa.put("nrIdentificacao", PessoaUtils.clearIdentificacao((String)criteria.get("nrIdentificacao")));
		mapPessoa.put("tpIdentificacao", criteria.get("tpIdentificacao"));
		mapPessoa.put("nmPessoa", criteria.get("nmPessoa"));
		mapPessoa.put("tpPessoa", "F");
		criteria.put("pessoa", mapPessoa);

		criteria.remove("nrIdentificacao");
		criteria.remove("tpIdentificacao");
		criteria.remove("nmPessoa");
    	List result = prestadorServicoService.findLookup(criteria);

    	List lista = new ArrayList();
		for (Iterator iter = result.iterator(); iter.hasNext();) {
			PrestadorServico ps = (PrestadorServico)iter.next();
			Map map = new HashMap();
			map.put("idPrestadorServico", ps.getIdPrestadorServico());
			map.put("tpIdentificacao", ps.getPessoa().getTpIdentificacao());
			map.put("nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(ps.getPessoa()) );
			map.put("nmPessoa", ps.getPessoa().getNmPessoa());
			map.put("tpSituacao", ps.getTpSituacao());
			lista.add(map);
		}
		return lista;
    }	

	/**
	 * Busca para o objeto usuário.
	 * @param criteria
	 * @return
	 */
	public List findLookupUsuarioFuncionario(Map criteria){
		return usuarioService.findLookupUsuarioFuncionario(
			null,
			FormatUtils.fillNumberWithZero(((Integer)criteria.get("nrMatricula")).toString(), 9),
			(Long)criteria.get("idFilial"),
			null,
			null,
			null,
			true
		);
	}

	/**
	 * Busca a Service default desta Action
	 * 
	 * @param carregamentoDescargaService
	 */
	private CarregamentoDescargaService getCarregamentoDescargaService() {
		return (CarregamentoDescargaService) super.getMasterService();
	}	
	public void setCarregamentoDescargaService(CarregamentoDescargaService carregamentoDescargaService) {
		this.setMasterService(carregamentoDescargaService);
	}
	public void setIntegranteEqOperacService(IntegranteEqOperacService integranteEqOperacService) {
		this.integranteEqOperacService = integranteEqOperacService;
	}
	public void setBoxService(BoxService boxService) {
		this.boxService = boxService;
	}
	public void setEquipeService(EquipeService equipeService) {
		this.equipeService = equipeService;
	}
	public void setCargoOperacionalService(CargoOperacionalService cargoOperacionalService) {
		this.cargoOperacionalService = cargoOperacionalService;
	}
	public void setUsuarioService(UsuarioService usuarioService) {
		this.usuarioService = usuarioService;
	}
	public void setEmpresaService(EmpresaService empresaService) {
		this.empresaService = empresaService;
	}
	public void setPessoaService(PessoaService pessoaService) {
		this.pessoaService = pessoaService;
	}
	public void setPrestadorServicoService(PrestadorServicoService prestadorServicoService) {
		this.prestadorServicoService = prestadorServicoService;
	}
	public void setControleCargaService(ControleCargaService controleCargaService) {
		this.controleCargaService = controleCargaService;
	}
	
}
