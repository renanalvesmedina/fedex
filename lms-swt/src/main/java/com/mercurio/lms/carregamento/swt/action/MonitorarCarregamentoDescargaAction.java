package com.mercurio.lms.carregamento.swt.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.PaginatedQuery;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.service.CarregamentoDescargaService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.carregamento.swt.monitorarCarregamentoDescargaAction"
 */

public class MonitorarCarregamentoDescargaAction {

	private CarregamentoDescargaService carregamentoDescargaService;
	private FilialService filialService;

	public ResultSetPage<Map<String, Object>> findPaginated(Map<String, Object> criteria) {
		return carregamentoDescargaService.findPaginatedMap(new PaginatedQuery(criteria));
	}
	
	public TypedFlatMap findManifestosByIdControleCarga(Map<String, Object> criteria) {
		TypedFlatMap typedFlatMap = new TypedFlatMap();
		typedFlatMap.put("grid", carregamentoDescargaService.findManifestosByIdControleCarga(criteria));
		typedFlatMap.put("nrIdentificador", criteria.get("nrIdentificador"));
		typedFlatMap.put("nrIdentificadorSemiReboque", criteria.get("nrIdentificadorSemiReboque"));
		return typedFlatMap;
	}
     
	public List findLookupFilial(Map criteria) {
		List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();
		List<Filial> filiais = filialService.findLookup(criteria);
		if (filiais != null) {
			for (Filial filial : filiais) {
				Map<String, Object> mapFilial = new HashMap<String, Object>();
				mapFilial.put("sgFilial", filial.getSgFilial());
				mapFilial.put("idFilial", filial.getIdFilial());
				mapFilial.put("nmFantasia", filial.getPessoa().getNmFantasia());
				result.add(mapFilial);
			}
		}
		return result;
	}
	
	public void setCarregamentoDescargaService(
			CarregamentoDescargaService carregamentoDescargaService) {
		this.carregamentoDescargaService = carregamentoDescargaService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}	
}