package com.mercurio.lms.carregamento.swt.action;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.FindDefinition;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.util.FilterList;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.CarregamentoDescarga;
import com.mercurio.lms.carregamento.model.PreManifestoDocumento;
import com.mercurio.lms.carregamento.model.service.CarregamentoDescargaService;
import com.mercurio.lms.carregamento.model.service.PreManifestoDocumentoService;
import com.mercurio.lms.entrega.model.service.ReciboReembolsoService;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.model.service.CtoInternacionalService;
import com.mercurio.lms.expedicao.model.service.DoctoServicoService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.pendencia.model.service.MdaService;

/**
 * Generated by: ADSM ActionGenerator
 * 
 * Não inserir documentação após ou remover a tag do XDoclet a seguir. O valor
 * do <code>id</code> informado abaixo deve ser utilizado para referenciar
 * este serviço.
 * 
 * @spring.bean id="lms.carregamento.swt.carregarVeiculoDocumentosAction"
 */

public class CarregarVeiculoDocumentosAction extends CrudAction {
 
	private DomainValueService domainValueService;
	private FilialService filialService;
	private CarregamentoDescargaService carregamentoDescargaService;
	private ConhecimentoService conhecimentoService;
	private CtoInternacionalService ctoInternacionalService; 
	private MdaService mdaService;
	private ReciboReembolsoService reciboReembolsoService;
	private PreManifestoDocumentoService preManifestoDocumentoService;
	private DoctoServicoService doctoServicoService;
	
	public DomainValueService getDomainValueService() {
		return domainValueService;
	}

	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}

	public CarregamentoDescargaService getCarregamentoDescargaService() {
		return carregamentoDescargaService;
	}

	public void setCarregamentoDescargaService(
			CarregamentoDescargaService carregamentoDescargaService) {
		this.carregamentoDescargaService = carregamentoDescargaService;
	}

	public FilialService getFilialService() {
		return filialService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	
	public ConhecimentoService getConhecimentoService() {
		return conhecimentoService;
	}

	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
	}

	public CtoInternacionalService getCtoInternacionalService() {
		return ctoInternacionalService;
	}

	public void setCtoInternacionalService(
			CtoInternacionalService ctoInternacionalService) {
		this.ctoInternacionalService = ctoInternacionalService;
	}

	public MdaService getMdaService() {
		return mdaService;
	}

	public void setMdaService(MdaService mdaService) {
		this.mdaService = mdaService;
	}

	public ReciboReembolsoService getReciboReembolsoService() {
		return reciboReembolsoService;
	}

	public void setReciboReembolsoService(ReciboReembolsoService reciboReembolsoService) {
		this.reciboReembolsoService = reciboReembolsoService;
	}

	public PreManifestoDocumentoService getPreManifestoDocumentoService() {
		return preManifestoDocumentoService;
	}

	public void setPreManifestoDocumentoService(
			PreManifestoDocumentoService preManifestoDocumentoService) {
		this.preManifestoDocumentoService = preManifestoDocumentoService;
	}

	/**
	 * Busca a Service default desta Action
	 * 
	 * @param carregamentoDescargaService
	 */
	public void setService(CarregamentoDescargaService carregamentoDescargaService) {
		this.defaultService = carregamentoDescargaService;
	}

	public CarregamentoDescargaService getService() {
		return (CarregamentoDescargaService) this.defaultService;
	}

	public DoctoServicoService getDoctoServicoService() {
		return doctoServicoService;
	}

	public void setDoctoServicoService(DoctoServicoService doctoServicoService) {
		this.doctoServicoService = doctoServicoService;
	}

	public CarregamentoDescarga findById(java.lang.Long id) {
		return ((CarregamentoDescargaService) defaultService).findById(id);
	}

	/**
	 * Apaga várias entidades através do Id. E para os mesmos gera um e
	 *
	 * @param ids lista com as entidades que deverão ser removida.
	 *
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {		
		if (!this.getPreManifestoDocumentoService().validateRemoveByIds(ids)) throw new BusinessException("LMS-05072");
		
		for (Iterator iter = ids.iterator(); iter.hasNext();) {
			Long idPreManifestoDocumento = (Long) iter.next();
			PreManifestoDocumento preManifestoDocumento = preManifestoDocumentoService.findById(idPreManifestoDocumento);
			Long idManifesto = preManifestoDocumento.getManifesto().getIdManifesto();
			Long idDoctoServico = preManifestoDocumento.getDoctoServico().getIdDoctoServico();
			this.getPreManifestoDocumentoService().generateEventoDoctoServicoByIdManifestoByIdDoctoServico(idManifesto, idDoctoServico);
		}		
		this.getPreManifestoDocumentoService().removeByIds(ids);				
	}

	/**
	 * Busca a quantidade de dados da grid de carregamentos
	 */
	public Integer getRowCount(Map criteria) {
		
		return preManifestoDocumentoService.getRowCountPreManifestosDoctoServicoByidManifestoSQL(
				(Long)criteria.get("idManifesto"), 
    			(Long)criteria.get("idDoctoServico"),
    			(String)criteria.get("tpDocumentoServico") );
	}
	
	/**
	 * Busca os registros da grid de carregamento.
	 * 
	 */
	public ResultSetPage findPaginated(Map criteria) {
				
		ResultSetPage resultSetPage = preManifestoDocumentoService.findPaginatedPreManifestosDoctoServicoByidManifestoSQL(
	    			(Long)criteria.get("idManifesto"), 
	    			(Long)criteria.get("idDoctoServico"),
	    			(String)criteria.get("tpDocumentoServico"),
	    			FindDefinition.createFindDefinition(criteria));		
		
		List list = new ArrayList();
		for(int i=0; i< resultSetPage.getList().size(); i++) {
    		Object[] obj = (Object[]) resultSetPage.getList().get(i);
    		TypedFlatMap mapResult = mountMap(obj);
    		list.add(mapResult);
			}
		
		resultSetPage.setList(list);
		return resultSetPage;
	}

	private TypedFlatMap mountMap(Object[] objResult) {
		
		TypedFlatMap mapResult = new TypedFlatMap();
		mapResult.put("dvDoctoServico", objResult[0]);
		mapResult.put("idPreManifestoDocumento", objResult[1]);
		mapResult.put("idDoctoServico", objResult[2]);
		mapResult.put("nrDoctoServico", objResult[3]);
		mapResult.put("vlMercadoria", objResult[4]);
		mapResult.put("vlTotalDocServico", objResult[5]);
		mapResult.put("dtPrevEntrega", objResult[6]);
		mapResult.put("qtVolumes", objResult[7]);
		mapResult.put("psReal", objResult[8]);
		mapResult.put("tpDocumento", objResult[9]);
		mapResult.put("sgMoeda", objResult[10]);
		mapResult.put("dsSimbolo", objResult[11]);
		mapResult.put("sgMoedaFrete", objResult[12]);
		mapResult.put("dsSimboloFrete", objResult[13]);
		mapResult.put("sgServico", objResult[14]);
		mapResult.put("sgFilialOrigem", objResult[15]);
		mapResult.put("sgFilialDestino", objResult[16]);
		mapResult.put("nmFantasiaFilialDestino", objResult[17]);
		mapResult.put("clienteRemetente", objResult[18]);
		mapResult.put("clienteDestinatario", objResult[19]);

		return mapResult;
	}

	/**
     * Método que popula a combo de tipos de documento apenas com CTR, CRT, MDA.
     * 
     * @param criteria
     * @return List
     */
    public List findTipoDocumentoServico(Map criteria) {
        List dominiosValidos = new ArrayList();
        dominiosValidos.add("CTR");
        dominiosValidos.add("CRT");
        dominiosValidos.add("MDA");
        dominiosValidos.add("RRE");
        dominiosValidos.add("NFT");
        List retorno = getDomainValueService().findByDomainNameAndValues("DM_TIPO_DOCUMENTO_SERVICO", dominiosValidos);
        return retorno;
    }
	
	/** 
     * Busca a filial baseado no documento de serviço
     * @param criteria
     * @return
     */
    public List findLookupFilialByDocumentoServico(Map criteria) {
    	
    	FilterList filter = new FilterList(getFilialService().findLookup(criteria)) {
			public Map filterItem(Object item) {
	    			Filial filial = (Filial)item;
	    			TypedFlatMap typedFlatMap = new TypedFlatMap();
		    		typedFlatMap.put("idFilial", filial.getIdFilial());
			    	typedFlatMap.put("sgFilial", filial.getSgFilial());
				return typedFlatMap;
			}
    	};
    	
    	return (List)filter.doFilter();
    }
    
    //
    public List findLookupServiceDocumentFilialCTR(Map criteria) {
        return findLookupFilialByDocumentoServico(criteria);
    }
    
    public List findLookupServiceDocumentNumberCTR(TypedFlatMap criteria) {
    	
    	Long nrConhecimento = criteria.getLong("CHAVE");
  	  	Long idFilial = criteria.getLong("idFilial");
    	
        return getConhecimentoService().findLookupDocumentNumberCTR(nrConhecimento, idFilial, "CTR");
     }
    
    public List findLookupServiceDocumentFilialCRT(Map criteria) {
        return findLookupFilialByDocumentoServico(criteria);
    }
    
     public List findLookupServiceDocumentNumberCRT(Map criteria) {
        return getCtoInternacionalService().findLookup(criteria);
     }
     
     public List findLookupServiceDocumentFilialMDA(Map criteria) {
         return findLookupFilialByDocumentoServico(criteria);
     }
     
     public List findLookupServiceDocumentNumberMDA(Map criteria) {
        return getMdaService().findLookup(criteria);
     }
     
     public List findLookupServiceDocumentoFilialRRE(Map criteria) {
     	return findLookupFilialByDocumentoServico(criteria);
     }
     
     public List findLookupServiceDocumentNumberRRE(Map criteria) {
         return getReciboReembolsoService().findLookup(criteria);
     }
     
     public List findLookupServiceDocumentoFilialNFT(Map criteria) {
      	return findLookupFilialByDocumentoServico(criteria);
      }
      
      public List findLookupServiceDocumentNumberNFT(TypedFlatMap criteria) {
    	  
    	  Long nrConhecimento = criteria.getLong("CHAVE");
    	  Long idFilial = criteria.getLong("idFilial");
    	  
          return getConhecimentoService().findLookupDocumentNumberCTR(nrConhecimento, idFilial, "NFT");
      }
     
     public List findLookupServiceNotaFiscalTranporte(Map criteria) {
    	 criteria.put("tpDocumentoServico", "NFT");
    	 return getConhecimentoService().find(criteria);
     }
}
