package com.mercurio.lms.carregamento.swt.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.lms.carregamento.model.HistoricoMpc;
import com.mercurio.lms.carregamento.model.HistoricoVolume;
import com.mercurio.lms.carregamento.model.RejeitoMpc;
import com.mercurio.lms.carregamento.model.service.HistoricoMpcService;
import com.mercurio.lms.carregamento.model.service.RejeitoMpcService;
import com.mercurio.lms.util.JTDateTimeUtils;

/**
 * Generated by: ADSM ActionGenerator
 * 
 * Não inserir documentação após ou remover a tag do XDoclet a seguir. O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * 
 * @spring.bean id="lms.carregamento.swt.manterMotivoRejeicaoAction"
 */

public class ManterMotivoRejeicaoAction extends CrudAction {

	private HistoricoMpcService historicoMpcService;

	public void removeById(java.lang.Long id) {
		((RejeitoMpcService) defaultService).removeById(id);
	}

	public ResultSetPage findPaginated(Map criteria) {

		ResultSetPage rsp = ((RejeitoMpcService) defaultService).findPaginated(criteria);

		if (rsp != null) {
			List<RejeitoMpc> rejeitos = rsp.getList();
			List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();
			if (rejeitos != null) {
				for (RejeitoMpc rejeito : rejeitos) {
					result.add(populateMap(rejeito));
				}
				rsp.setList(result);
			}
		}
		return rsp;
	}

	private Map<String, Object> populateMap(RejeitoMpc rejeito) {
		Map<String, Object> map = new HashMap<String, Object>();

		map.put("idRejeitoMPC", rejeito.getIdRejeitoMPC());
		map.put("dsRejeitoMPC", rejeito.getDsRejeitoMPC());
		map.put("stRejeito", rejeito.getStRejeito().getDescription());
		map.put("tpAbrangencia", rejeito.getTpAbrangencia().getDescription());
		map.put("tpAutorizacao", rejeito.getTpAutorizacao().getDescription());
		map.put("tpRejeito", rejeito.getTpRejeito().getDescription());
		map.put("dhCriacao", rejeito.getDhCriacao());
		return map;
	}

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		((RejeitoMpcService) defaultService).removeByIds(ids);
	}

	public Map findById(java.lang.Long id) {
		RejeitoMpc rejeito = (RejeitoMpc) ((RejeitoMpcService) defaultService).findById(id);
		return populateMap(rejeito);
	}

	/**
	 * Find para a tela de Cadastro, para trazer os values dos combos e aparecer corretamente.
	 * 
	 * @param id
	 * @return
	 */
	public Map findByIdCad(java.lang.Long id) {
		RejeitoMpc rejeito = (RejeitoMpc) ((RejeitoMpcService) defaultService).findById(id);

		Map<String, Object> map = new HashMap<String, Object>();

		map.put("idRejeitoMPC", rejeito.getIdRejeitoMPC());
		map.put("dsRejeitoMPC", rejeito.getDsRejeitoMPC());
		map.put("stRejeito", rejeito.getStRejeito().getValue());
		map.put("tpAbrangencia", rejeito.getTpAbrangencia().getValue());
		map.put("tpAutorizacao", rejeito.getTpAutorizacao().getValue());
		map.put("tpRejeito", rejeito.getTpRejeito().getValue());
		map.put("dhCriacao", rejeito.getDhCriacao());
		return map;
	}

	/**
	 * Método responsavel por chamar os servições que validão se o motivo já foi usado e esta em algum histórico.
	 * 	
	 * @param map
	 * @return
	 */
	public Map<String, Object> validaHistorico(Map map) {
		Long id = (Long) map.get("idRejeitoMPC");

		Map<String, Object> mapResult = new HashMap<String, Object>();

		List<HistoricoMpc> historicosMpc = historicoMpcService.findByIdRejeitaMpc(id);
		List<HistoricoVolume> historicoVolumes = historicoMpcService.findHistorivoVolumeByIdRejeita(id);

		if (historicosMpc.size() > 0 || historicoVolumes.size() > 0) {
			mapResult.put("isValido", true);
		} else {
			mapResult.put("isValido", false);
		}

		return mapResult;
	}

	public List findRejeitaMpcs(Map criteria) {
		List<RejeitoMpc> rejeitos = ((RejeitoMpcService) defaultService).find(criteria);
		List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();

		if (rejeitos != null && !rejeitos.isEmpty()) {
			for (int i = 0; i < rejeitos.size(); i++) {
				RejeitoMpc rejeito = (RejeitoMpc) rejeitos.get(i);
				Map<String, Object> ramo = new HashMap<String, Object>();
				ramo.put("idRejeitoMPC", rejeito.getIdRejeitoMPC());
				ramo.put("dsRejeitoMPC", rejeito.getDsRejeitoMPC());
				result.add(ramo);
			}
		}

		return result;
	}

	public Map store(Map data) {
		RejeitoMpc rejeito = new RejeitoMpc();

		if (data.get("idRejeitoMPC") != null) {
			rejeito.setIdRejeitoMPC((Long) data.get("idRejeitoMPC"));
		}
		rejeito.setDsRejeitoMPC((String) data.get("dsRejeitoMPC"));
		rejeito.setStRejeito(new DomainValue((String) data.get("stRejeito")));
		rejeito.setTpAbrangencia(new DomainValue((String) data.get("tpAbrangencia")));
		rejeito.setTpAutorizacao(new DomainValue((String) data.get("tpAutorizacao")));
		rejeito.setTpRejeito(new DomainValue((String) data.get("tpRejeito")));
		rejeito.setDhCriacao(JTDateTimeUtils.getDataHoraAtual());

		Long id = (Long) ((RejeitoMpcService) defaultService).store(rejeito);
		

		Map<String, Object> resultMap = new HashMap<String, Object>();

		resultMap.put("idRejeitoMPC", id);
		return resultMap;
	}

	public void setRejeitoMpcService(RejeitoMpcService rejeitoMpcService) {
		this.defaultService = rejeitoMpcService;
	}

	public void setHistoricoMpcService(HistoricoMpcService historicoMpcService) {
		this.historicoMpcService = historicoMpcService;
	}
}