package com.mercurio.lms.carregamento.swt.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.lms.carregamento.model.Equipe;
import com.mercurio.lms.carregamento.model.service.EquipeService;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.carregamento.swt.manterEquipesAction"
 */

public class ManterEquipesAction {

	private EquipeService equipeService;

	public void setEquipeService(EquipeService equipeService) {
		this.equipeService = equipeService;
	}

    public void removeById(java.lang.Long id) {
        equipeService.removeById(id);
    }

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
		equipeService.removeByIds(ids);
    }

	
	
	
	public Object findById(java.lang.Long id) {
		return equipeService.findById(id);
    }
	

    /**
     * Cria mapa com filtros para pesquisa.
     * @param criteria
     * @return
     */
	private Map createFindCriteria(Map criteria) {
		Map mapCriteria = new HashMap();
		mapCriteria.put("_currentPage", criteria.get("_currentPage"));
    	mapCriteria.put("_pageSize", criteria.get("_pageSize"));
    	mapCriteria.put("_order", criteria.get("_order"));

		Map mapSetor = new HashMap();
		if (criteria.get("idSetor") != null) {
			mapSetor.put("idSetor", criteria.get("idSetor"));
			mapCriteria.put("setor", mapSetor);
		}
		
		Map mapFilial = new HashMap();
		mapFilial.put("idFilial", SessionUtils.getFilialSessao().getIdFilial());
		
		mapCriteria.put("filial", mapFilial);
		mapCriteria.put("tpSituacao", criteria.get("tpSituacao"));
		mapCriteria.put("dsEquipe", criteria.get("dsEquipe"));
		return mapCriteria;
	}     

	
	
    /**
     * FindPaginated de Paises.
     * @param criteria
     * @return
     */
    public ResultSetPage findPaginatedEquipe(Map criteria) {
    	Map mapCriteria = createFindCriteria(criteria);
		ResultSetPage resultSetPage = equipeService.findPaginated(mapCriteria);
		
		List listaRetorno = new ArrayList();
		for (Iterator iter = resultSetPage.getList().iterator(); iter.hasNext();) {
			Equipe equipe = (Equipe) iter.next();
			
			Map map = new HashMap();			
			map.put("idEquipe", equipe.getIdEquipe());
			map.put("dsEquipe", equipe.getDsEquipe());
			map.put("idFilial", equipe.getFilial().getSgFilial());
			map.put("sgFilial", equipe.getFilial().getSgFilial());
			map.put("idSetor", equipe.getSetor().getIdSetor());
			map.put("dsSetor", equipe.getSetor().getDsSetor());
			map.put("tpSituacao", equipe.getTpSituacao());
			listaRetorno.add(map);
		}
		resultSetPage.setList(listaRetorno);
		return resultSetPage;
    }
    
    /**
     * getRowCount de Paises.
     * @param criteria
     * @return
     */
    public Integer getRowCountEquipe(Map criteria) {
    	Map mapCriteria = createFindCriteria(criteria);
    	return equipeService.getRowCount(mapCriteria);
    }

}