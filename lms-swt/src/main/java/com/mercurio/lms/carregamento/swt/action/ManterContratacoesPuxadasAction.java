package com.mercurio.lms.carregamento.swt.action;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.joda.time.DateTime;
import org.springframework.util.CollectionUtils;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.lms.carregamento.model.ControleCarga;
import com.mercurio.lms.carregamento.model.EventoControleCarga;
import com.mercurio.lms.carregamento.model.LocalTroca;
import com.mercurio.lms.carregamento.model.VeiculoControleCarga;
import com.mercurio.lms.carregamento.model.service.ControleCargaService;
import com.mercurio.lms.carregamento.model.service.EventoControleCargaService;
import com.mercurio.lms.carregamento.model.service.LocalTrocaService;
import com.mercurio.lms.carregamento.model.service.VeiculoControleCargaService;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.service.MoedaPaisService;
import com.mercurio.lms.contratacaoveiculos.model.EventoPuxada;
import com.mercurio.lms.contratacaoveiculos.model.MeioTransporte;
import com.mercurio.lms.contratacaoveiculos.model.Motorista;
import com.mercurio.lms.contratacaoveiculos.model.Proprietario;
import com.mercurio.lms.contratacaoveiculos.model.SolicitacaoContratacao;
import com.mercurio.lms.contratacaoveiculos.model.service.EventoPuxadaService;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTranspProprietarioService;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteRodoviarioService;
import com.mercurio.lms.contratacaoveiculos.model.service.MeioTransporteService;
import com.mercurio.lms.contratacaoveiculos.model.service.MotoristaService;
import com.mercurio.lms.contratacaoveiculos.model.service.SolicitacaoContratacaoService;
import com.mercurio.lms.expedicao.model.service.ManifestoViagemNacionalService;
import com.mercurio.lms.fretecarreteiroviagem.model.ReciboFreteCarreteiro;
import com.mercurio.lms.fretecarreteiroviagem.model.service.ReciboFreteCarreteiroService;
import com.mercurio.lms.municipios.model.Municipio;
import com.mercurio.lms.municipios.model.service.MunicipioService;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *   
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.carregamento.swt.manterContratacoesPuxadasAction"
 */
public class ManterContratacoesPuxadasAction {
	  
	private SolicitacaoContratacaoService contratacaoService;
	private EventoPuxadaService eventoPuxadaService;
	private ControleCargaService controleCargaService;
	private EventoControleCargaService eventoControleCargaService;
	private MeioTransporteService meioTransporteService;
	private MotoristaService motoristaService;
	private MeioTranspProprietarioService meioTranspProprietarioService;	
	private MunicipioService municipioService;
	private LocalTrocaService localTrocaService;
	private VeiculoControleCargaService veiculoControleCargaService;
	private ReciboFreteCarreteiroService reciboFreteCarreteiroService;
	private MoedaPaisService moedaPaisService;
	private MeioTransporteRodoviarioService meioTransporteRodoviarioService;
	private ConfiguracoesFacade configuracoesFacade;
	private ManifestoViagemNacionalService manifestoViagemNacionalService; 
	
	
	
	/**
	 * @return the veiculoControleCargaService
	 */
	public VeiculoControleCargaService getVeiculoControleCargaService() {
		return veiculoControleCargaService;
	}

	/**
	 * @param veiculoControleCargaService the veiculoControleCargaService to set
	 */
	public void setVeiculoControleCargaService(
			VeiculoControleCargaService veiculoControleCargaService) {
		this.veiculoControleCargaService = veiculoControleCargaService;
	}

	/**
	 * @return the reciboFreteCarreteiroService
	 */
	public ReciboFreteCarreteiroService getReciboFreteCarreteiroService() {
		return reciboFreteCarreteiroService;
	}

	/**
	 * @param reciboFreteCarreteiroService the reciboFreteCarreteiroService to set
	 */
	public void setReciboFreteCarreteiroService(
			ReciboFreteCarreteiroService reciboFreteCarreteiroService) {
		this.reciboFreteCarreteiroService = reciboFreteCarreteiroService;
	}

	public ResultSetPage findPaginated(Map filtros) {
		
		return this.contratacaoService.findSolicitacoesContratacaoControleCarga(filtros);
	}
	
	public EventoPuxada findByLastSolicitacaoContratacao(Long idSolicitacaoContratacao) {
		return this.eventoPuxadaService.findByLastSolicitacaoContratacao(idSolicitacaoContratacao);
	}
	
	public Map storeEventoPuxada(Map param){
		
		String tpEvento = (String)param.get("tpStatus");
		
		Long idSolicitacaoContratacao = (Long)param.get("idSolicitacaoContratacao");
		
		SolicitacaoContratacao sc= (SolicitacaoContratacao)contratacaoService.findById(idSolicitacaoContratacao);
		
		contratacaoService.validateMotoristaVigentePuxada(sc);
		 
		Long idControleCarga = (Long)param.get("idControleCarga");
		
		String tpStatus = (String)param.get("tpStatus");
		
		String tpStatusControleCarga = (String)param.get("tpStatusControleCarga");
		
		ControleCarga controleCarga = this.controleCargaService.findById(idControleCarga);
		
		String[] statusColeta = {"EV","TP"};
		if(controleCarga != null){
			if(!CollectionUtils.arrayToList(statusColeta).contains(controleCarga.getTpStatusControleCarga().getValue())){
				throw new BusinessException("LMS-26116");
			}
		} else {
			throw new BusinessException("LMS-10001");
		}
		
		eventoPuxadaService.generateEventoPuxada(sc, tpEvento); 
		
		if("EP".equals(tpStatus)) {
		
			this.storeControleCarga(sc, controleCarga);
			
			this.gerarHistoricoVeiculo(sc, controleCarga);
			
		} else if("PF".equals(tpStatus)) {
			
			this.generateReciboFreteCarreteiro(sc,controleCarga);
			
		}

		this.storeEventoControleCarga(controleCarga,tpStatusControleCarga);
		
		return param;
		
	}
	
	private void storeEventoControleCarga(ControleCarga controleCarga,String tpStatusControleCarga) {
		
		EventoControleCarga eventoControleCarga = new EventoControleCarga();
		eventoControleCarga.setDhEvento(new DateTime());
		eventoControleCarga.setUsuario(SessionUtils.getUsuarioLogado());
		eventoControleCarga.setFilial(SessionUtils.getFilialSessao());		
		eventoControleCarga.setTpEventoControleCarga(new DomainValue(tpStatusControleCarga));
		eventoControleCarga.setControleCarga(controleCarga);
		eventoControleCarga.setMeioTransporte(controleCarga.getMeioTransporteByIdTransportado());
		
		eventoControleCargaService.store(eventoControleCarga);
	}
	
	private void storeControleCarga(SolicitacaoContratacao sc,ControleCarga controleCarga) {
		
		MeioTransporte meioTransporte = new MeioTransporte();
		
		meioTransporte.setNrIdentificador(sc.getNrIdentificacaoMeioTransp());
		
		meioTransporte = meioTransporteService.findMeioTransporteByIdentificacao(meioTransporte.getNrIdentificador());
		
		if(meioTransporte != null) {
		
			List motoristas = motoristaService.findReferenciasByIdMeioTransporte(meioTransporte.getIdMeioTransporte());
			
			Map proprietarios = meioTranspProprietarioService.findProprietarioByMeioTransporte(meioTransporte.getIdMeioTransporte());
			
			if(motoristas!=null && motoristas.size() > 0) {
				
				Motorista motorista =  (Motorista) motoristas.get(0);
				
				controleCarga.setMotorista(motorista);
				
				Map mapProprietario = (HashMap) proprietarios.get("proprietario");
				
				Proprietario proprietario = new Proprietario();
				
				Long idProprietario = (Long) mapProprietario.get("idProprietario");
				
				proprietario.setIdProprietario(idProprietario);
				
				controleCarga.setProprietario(proprietario);
				
				controleCarga.setMeioTransporteByIdTransportado(meioTransporte);
				
				controleCargaService.store(controleCarga);
				
			}	
		
		}
		
	}
	
	private void gerarHistoricoVeiculo(SolicitacaoContratacao sc,ControleCarga controleCarga) {
		
		LocalTroca localTroca = new LocalTroca();
		
		Municipio municipio = municipioService.findMunicipioByFilial(SessionUtils.getFilialSessao().getIdFilial());
		
		if(municipio!=null) {
			
			localTroca.setMunicipio(municipio);
			
			localTroca.setDsTroca(this.getConfiguracoesFacade().getMensagem("LMS-05335"));
			
			localTrocaService.store(localTroca);
			
			VeiculoControleCarga veiculoControleCarga = new VeiculoControleCarga();
			
			veiculoControleCarga.setControleCarga(controleCarga);
			
			veiculoControleCarga.setLocalTroca(localTroca);
			
			veiculoControleCarga.setSolicitacaoContratacao(sc);
			
			veiculoControleCarga.setDhTroca(new DateTime());
			
			controleCarga = controleCargaService.findById(controleCarga.getIdControleCarga());
			
			veiculoControleCarga.setMeioTransporte(controleCarga.getMeioTransporteByIdTransportado());
			
			veiculoControleCargaService.store(veiculoControleCarga);
			
		}
		
	}
	
	private void generateReciboFreteCarreteiro(SolicitacaoContratacao solicitacaoContratacao,ControleCarga controleCarga) {
		
		ReciboFreteCarreteiro reciboFreteCarreteiro = new ReciboFreteCarreteiro();
		reciboFreteCarreteiro.setFilial(SessionUtils.getFilialSessao());
		reciboFreteCarreteiro.setTpReciboFreteCarreteiro(new DomainValue("P"));
		reciboFreteCarreteiro.setMoedaPais(moedaPaisService.findMoedaPaisUsuarioLogado());
		reciboFreteCarreteiro.setVlBruto(solicitacaoContratacao.getVlFreteNegociado());
		reciboFreteCarreteiro.setBlAdiantamento(false);
		reciboFreteCarreteiro.setControleCarga(solicitacaoContratacao.getControleCarga());
		reciboFreteCarreteiro.setMotorista(controleCarga.getMotorista());
		reciboFreteCarreteiro.setMeioTransporteRodoviario(meioTransporteRodoviarioService.findById(controleCarga.getMeioTransporteByIdTransportado().getIdMeioTransporte()));
		reciboFreteCarreteiro.setControleCarga(controleCarga);
		reciboFreteCarreteiro.setVlPremio(null);
		reciboFreteCarreteiro.setVlPostoPassagem(null);
		reciboFreteCarreteiro.setReciboComplementado(null);
		reciboFreteCarreteiro.setObReciboFreteCarreteiro(this.getConfiguracoesFacade().getMensagem("LMS-05335"));
		reciboFreteCarreteiro.setNrNfCarreteiro(null);
		reciboFreteCarreteiro.setPcAdiantamentoFrete(null);
		reciboFreteCarreteiro.setProprietario(controleCarga.getProprietario());
		reciboFreteCarreteiro.setManifestoViagemNacional(manifestoViagemNacionalService.findByFilialDestino(controleCarga.getIdControleCarga(), SessionUtils.getFilialSessao().getIdFilial()));
		reciboFreteCarreteiro.setFilialDestino(SessionUtils.getFilialSessao());
		this.reciboFreteCarreteiroService.generateReciboFreteCarreteiro(reciboFreteCarreteiro, "CA");
		
		
	}
	
	public Integer getRowCount(Map criteria) {
		return this.contratacaoService.getRowCount(criteria);
	}
	 
	



	public SolicitacaoContratacaoService getContratacaoService() {
		return contratacaoService;
	}



	public void setContratacaoService(
			SolicitacaoContratacaoService contratacaoService) {
		this.contratacaoService = contratacaoService;
	}

	public EventoPuxadaService getEventoPuxadaService() {
		return eventoPuxadaService;
	}

	public void setEventoPuxadaService(EventoPuxadaService eventoPuxadaService) {
		this.eventoPuxadaService = eventoPuxadaService;
	}

	

	public EventoControleCargaService getEventoControleCargaService() {
		return eventoControleCargaService;
	}

	public void setEventoControleCargaService(
			EventoControleCargaService eventoControleCargaService) {
		this.eventoControleCargaService = eventoControleCargaService;
	}

	public void setMeioTransporteService(MeioTransporteService meioTransporteService) {
		this.meioTransporteService = meioTransporteService;
	}

	/**
	 * @return the motoristaService
	 */
	public MotoristaService getMotoristaService() {
		return motoristaService;
	}

	/**
	 * @param motoristaService the motoristaService to set
	 */
	public void setMotoristaService(MotoristaService motoristaService) {
		this.motoristaService = motoristaService;
	}

	/**
	 * @return the meioTransporteService
	 */
	public MeioTransporteService getMeioTransporteService() {
		return meioTransporteService;
	}

	/**
	 * @return the meioTranspProprietarioService
	 */
	public MeioTranspProprietarioService getMeioTranspProprietarioService() {
		return meioTranspProprietarioService;
	}

	/**
	 * @param meioTranspProprietarioService the meioTranspProprietarioService to set
	 */
	public void setMeioTranspProprietarioService(
			MeioTranspProprietarioService meioTranspProprietarioService) {
		this.meioTranspProprietarioService = meioTranspProprietarioService;
	}

	/**
	 * @return the controleCargaService
	 */
	public ControleCargaService getControleCargaService() {
		return controleCargaService;
	}

	/**
	 * @param controleCargaService the controleCargaService to set
	 */
	public void setControleCargaService(ControleCargaService controleCargaService) {
		this.controleCargaService = controleCargaService;
	}



	/**
	 * @return the municipioService
	 */
	public MunicipioService getMunicipioService() {
		return municipioService;
	}

	/**
	 * @param municipioService the municipioService to set
	 */
	public void setMunicipioService(MunicipioService municipioService) {
		this.municipioService = municipioService;
	}

	/**
	 * @return the localTrocaService
	 */
	public LocalTrocaService getLocalTrocaService() {
		return localTrocaService;
	}

	/**
	 * @param localTrocaService the localTrocaService to set
	 */
	public void setLocalTrocaService(LocalTrocaService localTrocaService) {
		this.localTrocaService = localTrocaService;
	}

	/**
	 * @param moedaPaisService the moedaPaisService to set
	 */
	public void setMoedaPaisService(MoedaPaisService moedaPaisService) {
		this.moedaPaisService = moedaPaisService;
	}

	/**
	 * @param meioTransporteRodoviarioService the meioTransporteRodoviarioService to set
	 */
	public void setMeioTransporteRodoviarioService(
			MeioTransporteRodoviarioService meioTransporteRodoviarioService) {
		this.meioTransporteRodoviarioService = meioTransporteRodoviarioService;
	}

	/**
	 * @return the configuracoesFacade
	 */
	public ConfiguracoesFacade getConfiguracoesFacade() {
		return configuracoesFacade;
	}

	/**
	 * @param configuracoesFacade the configuracoesFacade to set
	 */
	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}


	/**
	 * @return the manifestoViagemNacionalService
	 */
	public ManifestoViagemNacionalService getManifestoViagemNacionalService() {
		return manifestoViagemNacionalService;
	}

	/**
	 * @param manifestoViagemNacionalService the manifestoViagemNacionalService to set
	 */
	public void setManifestoViagemNacionalService(
			ManifestoViagemNacionalService manifestoViagemNacionalService) {
		this.manifestoViagemNacionalService = manifestoViagemNacionalService;
	}
	
	
	
}
