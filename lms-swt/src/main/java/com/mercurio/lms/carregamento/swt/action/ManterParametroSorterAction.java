package com.mercurio.lms.carregamento.swt.action;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.PaginatedQuery;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;

import com.mercurio.lms.carregamento.model.ParametroSorter;
import com.mercurio.lms.carregamento.model.service.CarregamentoDescargaService;
import com.mercurio.lms.carregamento.model.service.ParametroSorterService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.portaria.model.MacroZona;
import com.mercurio.lms.portaria.model.Terminal;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * 
 * @spring.bean id="lms.carregamento.swt.manterParametroSorterAction"
 */   

public class ManterParametroSorterAction extends CrudAction {
	
	private FilialService filialService;
	
	public ManterParametroSorterAction(){
	}
	
	public FilialService getFilialService() {
		return filialService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	
	/**
	 * Busca a Service default desta Action
	 * 
	 * @param carregamentoDescargaService
	 */
	public void setService(ParametroSorterService parametroSorterService) {
		this.defaultService = parametroSorterService;
	}

	public ParametroSorterService getService() {
		return (ParametroSorterService) this.defaultService;
	}
  


	/**
	 * Método que responsável por chamar a camada service, metodo enviarParaSorter, 
	 * passando como parâmetro uma lista de ParametroSorter, que estão selecionados, 
	 * pelo checkbox ou consultados na aba de detalhamento, Se o retorno da rotina foi TRUE, 
	 * então apresentar mensagem de que a geração foi bem sucedida (LMS-05327 ? Arquivo(s) gerado(s) com sucesso), 
	 * caso contrario, apresentar mensagem de falha na geração (LMS-05326 ? Ocorreram problemas na geração dos arquivos para o SORTER). 
	 * Habilitar os controles da tela que foram desabilitados anteriormente	
	 */
	
	private Map prepareCriteria(Map criteria) {
		Map result = new HashMap();
		result.put("_currentPage", criteria.get("_currentPage"));
    	result.put("_pageSize", criteria.get("_pageSize"));
    	result.put("_order", criteria.get("_order"));
    	
    	Map<String, Object> filial = new HashMap<String, Object>();
    	filial.put("idFilial", criteria.get("idFilial"));
    	result.put("filial", filial);
		
    	return result;
	}
	
	
	public void enviarParaSorter(Map criteria){
		List listaParametros = (List)criteria.get("listParametroSorter");
		getService().executeEnviarParaSorter(listaParametros);
	}
	
	public Integer getRowCount(Map criteria) {
		return getService().getRowCount(prepareCriteria(criteria));
	}
	
	public List findLookupFilial(Map criteria) {
		List list = getService().findLookupFilial(criteria);
		List retorno = new ArrayList();
		if (list.size()>0){
			Map map = (Map)list.get(0);
			map.put("idFilial", map.get("idFilial"));
			map.put("nmFantasia", (String)((Map)map.get("pessoa")).get("nmFantasia"));
			map.put("sgFilial", (String)map.get("sgFilial"));			
			retorno.add(map);
		}		
		return retorno;
	}
		
	public ResultSetPage findPaginated(Map criteria) {
		
		
		TypedFlatMap tfmCriteria = new TypedFlatMap();
		
		tfmCriteria.put("idFilial", criteria.get("idFilial"));
    	tfmCriteria.put("_currentPage", criteria.get("_currentPage"));
    	tfmCriteria.put("_pageSize", criteria.get("_pageSize"));
    	tfmCriteria.put("_order", criteria.get("_order"));
		
		ResultSetPage rsp = getService().findPaginatedParametroSorter(tfmCriteria);
		return rsp;
	}
	
	
		
		 public Map findById(Map criteria) {
			 Long id = (Long)criteria.get("idParametroSorter");
			 ParametroSorter parametroSorter = getService().findById(id);
		    	
		    Map retorno = new HashMap();
		    retorno.put("idParametroSorter", parametroSorter.getIdParametroSorter());
		    retorno.put("idFilial", parametroSorter.getFilial().getIdFilial());
		    retorno.put("sgFilial", parametroSorter.getFilial().getSgFilial());
		    retorno.put("nmFantasia",parametroSorter.getFilial().getPessoa().getNmFantasia());
		    retorno.put("nmAereo",parametroSorter.getNmAereo() );
		    retorno.put("nmAgendamento", parametroSorter.getNmAgendamento());
		    
		    return retorno;
		 }
	
		
	
	
	public Map store(Map map) {
		Terminal terminal = new Terminal();
		terminal.setIdTerminal((Long)map.get("idTerminal"));

		ParametroSorter bean = new ParametroSorter();
		Filial filial = new Filial();
		filial.setIdFilial((Long)map.get("idFilial"));
		
		if (map.get("idParametroSorter")!= null){
			bean.setIdParametroSorter((Long)map.get("idParametroSorter"));
		}
		
		bean.setFilial(filial);
		bean.setNmAereo((String)map.get("nmAereo"));
		bean.setNmAgendamento((String)map.get("nmAgendamento"));
		
		getService().store(bean);

		Map retorno = new HashMap();
    	retorno.put("idParametroSorter",bean.getIdParametroSorter());
    	return retorno;
    }
	
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
	}

	
}
