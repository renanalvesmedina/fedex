package com.mercurio.lms.carregamento.swt.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.DispositivoUnitizacao;
import com.mercurio.lms.carregamento.model.service.DispositivoUnitizacaoService;
import com.mercurio.lms.carregamento.model.service.TipoDispositivoUnitizacaoService;
import com.mercurio.lms.municipios.model.Empresa;
import com.mercurio.lms.municipios.model.service.EmpresaService;
import com.mercurio.lms.util.FormatUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.carregamento.swt.manterDispositivosUnitizacaoAction"
 */

public class ManterDispositivosUnitizacaoAction extends CrudAction {

	private EmpresaService empresaService;
	private TipoDispositivoUnitizacaoService tipoDispositivoUnitizacaoService;
	
	public void setDispositivoUnitizacao(DispositivoUnitizacaoService dispositivoUnitizacaoService) {
		this.defaultService = dispositivoUnitizacaoService;
	}

    public void removeById(java.lang.Long id) {
        ((DispositivoUnitizacaoService)defaultService).removeById(id);
    }
    
	/**
	 * Rodrigo Eschner
	 * 
	 * Método criado para buscar os Dispositivos de Utilização
	 * 
	 * @see lms.carregamento.swt.manterDispositivosUnitizacaoAction.findPaginated
	 */
    public ResultSetPage findPaginated(Map criteria) {
    	if(criteria.get("idTipoDispositivoUnitizacao")!= null){
    		criteria.put("tipoDispositivoUnitizacao.idTipoDispositivoUnitizacao", criteria.get("idTipoDispositivoUnitizacao"));
    	}
	
    	if(criteria.get("idEmpresa")!= null){
    		criteria.put("empresa.idEmpresa", criteria.get("idEmpresa"));
    	}
    	
    	criteria.put("nrIdentificacao", criteria.get("nrIdentificacaoEmpresa"));
    	
    	ResultSetPage rsp = super.findPaginated(criteria);
    	List listDispositivos = rsp.getList();
    	List listRetorno = new ArrayList();
    	
    	Map map = null;
    	for (Iterator iter = listDispositivos.iterator(); iter.hasNext();) {
    		map = new TypedFlatMap();
    		DispositivoUnitizacao dispositivoUnitizacao = (DispositivoUnitizacao) iter.next();
    		map.put("idDispositivoUnitizacao", dispositivoUnitizacao.getIdDispositivoUnitizacao());
    		map.put("dsTipoDispositivoUnitizacao", dispositivoUnitizacao.getTipoDispositivoUnitizacao().getDsTipoDispositivoUnitizacao());
    		map.put("nrIdentificacaoEmpresa", dispositivoUnitizacao.getNrIdentificacao());
    		map.put("nmPessoa", dispositivoUnitizacao.getEmpresa().getPessoa().getNmPessoa());
    		map.put("tpSituacao", dispositivoUnitizacao.getTpSituacao());
    		listRetorno.add(map);
    	}
    	
    	rsp.setList(listRetorno);
    	
    	return rsp;
	}
    
	public List findLookupEmpresa(Map criteria) {
		Map<String, Object> pessoa = new HashMap<String, Object>();
		pessoa.put("nrIdentificacao", criteria.remove("nrIdentificacao"));
		criteria.put("pessoa", pessoa);
		List<Empresa> empresas = empresaService.findLookup(criteria);
		if (empresas != null) {
			List<Map<String, Object>> result = new ArrayList<Map<String,Object>>();
			for(Empresa empresa : empresas) {
				Map<String, Object> mapEmpresa = new HashMap<String, Object>();
				String nrIdentificacaoFormatado = FormatUtils.formatIdentificacao(empresa.getPessoa());
				mapEmpresa.put("idEmpresa", empresa.getIdEmpresa());
				mapEmpresa.put("nrIdentificacao", nrIdentificacaoFormatado);
				mapEmpresa.put("nmPessoa", empresa.getPessoa().getNmPessoa());
				result.add(mapEmpresa);
			}
			return result;
		}
		return null;
	}
	
	public List findTipoDispositivoIdentificacao(final Map criteria) {
		criteria.put("tpControleDispositivo", "I");
		return tipoDispositivoUnitizacaoService.findTipoDispositivoOrdenado(criteria);
	}

	
	
	public void setEmpresaService(final EmpresaService empresaService) {
		this.empresaService = empresaService;
	}

	public void setTipoDispositivoUnitizacaoService(final TipoDispositivoUnitizacaoService tipoDispositivoUnitizacaoService) {
		this.tipoDispositivoUnitizacaoService = tipoDispositivoUnitizacaoService;
	}
}