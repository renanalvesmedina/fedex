package com.mercurio.lms.carregamento.swt.action;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.FindDefinition;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.lms.carregamento.model.CarregamentoDescarga;
import com.mercurio.lms.carregamento.model.service.CarregamentoDescargaService;
import com.mercurio.lms.carregamento.model.service.ControleCargaConhScanService;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.util.LongUtils;

/**
 * Generated by: ADSM ActionGenerator
 * 
 * Não inserir documentação após ou remover a tag do XDoclet a seguir. O valor
 * do <code>id</code> informado abaixo deve ser utilizado para referenciar
 * este serviço.
 * 
 * @spring.bean id="lms.carregamento.swt.carregarVeiculoDocumentoServicoAction"
 */
public class CarregarVeiculoDocumentoServicoAction {

	private ControleCargaConhScanService controleCargaConhScanService;
	private ConhecimentoService conhecimentoService;
	private CarregamentoDescargaService carregamentoDescargaService;

	public void store(Map parameters) {
		Long idControleCarga = (Long) parameters.get("idControleCarga");
		Long idCarregamentoDescarga = (Long) parameters.get("idCarregamentoDescarga");
		String nrCodigoBarras = (String) parameters.get("nrCodigoBarras");
		
		controleCargaConhScanService.store(idControleCarga, nrCodigoBarras, idCarregamentoDescarga , "C");
	}
	
	/**
	 * Apaga várias entidades através do Id. E para os mesmos gera um e
	 *
	 * @param ids lista com as entidades que deverão ser removida.
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {		
		controleCargaConhScanService.removeByIds(ids);				
	}

	/**
	 * Busca a quantidade de dados da grid de carregamentos
	 */
	public Integer getRowCount(Map criteria) {
		return controleCargaConhScanService.getRowCountByControleCargaAndCarregamentoDescarga((Long) criteria.get("idControleCarga"), (Long) criteria.get("idCarregamentoDescarga"));
	}
	
	/**
	 * Busca os registros da grid de carregamento.
	 */
	public ResultSetPage findPaginatedByControleCarga(Map criteria) {
		Long idControleCarga = Long.parseLong(criteria.get("idControleCarga").toString());
		Long idCarregamentoDescarga = Long.parseLong(criteria.get("idCarregamentoDescarga").toString());
		FindDefinition createFindDefinition = FindDefinition.createFindDefinition(criteria);
		return controleCargaConhScanService.findPaginatedByControleCargaAndCarregamentoDescarga(idControleCarga, idCarregamentoDescarga, createFindDefinition);
	}

	public Map<String, Object> validateDoctoServicoCC(Map criteria) {
		final String tpOperacao = String.valueOf("C");//Carregamento
		final Long idControleCarga = (Long) criteria.get("idControleCarga");
		final Long idFilial = (Long) criteria.get("idFilial");
		final CarregamentoDescarga carregamentoDescarga = getCarregamentoDescargaService().findCarregamentoDescarga(idControleCarga, idFilial, tpOperacao);
		
		final Map<String, Object> toReturn = new HashMap<String, Object>();
		if(LongUtils.hasValue(idControleCarga) && carregamentoDescarga != null) {
			final Long idCarregamentoDescarga = carregamentoDescarga.getIdCarregamentoDescarga();
			toReturn.put("totDocCarregadoConferido", controleCargaConhScanService.getRowCountDocCarregadoConferido(idControleCarga, idCarregamentoDescarga));
			toReturn.put("totDocCarregadoNaoConferido", controleCargaConhScanService.getRowCountDocCarregadoNaoConferido(idControleCarga, idCarregamentoDescarga));
			toReturn.put("totDocNaoCarregadoConferido", controleCargaConhScanService.getRowCountDocNaoCarregadoConferido(idControleCarga, idCarregamentoDescarga));
		} else {
			toReturn.put("totDocCarregadoConferido", LongUtils.ZERO);
			toReturn.put("totDocCarregadoNaoConferido", LongUtils.ZERO);
			toReturn.put("totDocNaoCarregadoConferido", LongUtils.ZERO);
	}
		toReturn.put("totDocCarregadoSemDoc", conhecimentoService.getRowCountCarregadosSemPreManifestoDocumento(idControleCarga));
		toReturn.put("totDocCarregadoIncompleto", conhecimentoService.getRowCountCarregadosIncompletos(idControleCarga));
		return toReturn;
	}
	
	public ControleCargaConhScanService getControleCargaConhScanService() {
		return controleCargaConhScanService;
	}

	public void setControleCargaConhScanService(ControleCargaConhScanService controleCargaConhScanService) {
		this.controleCargaConhScanService = controleCargaConhScanService;
	}

	/**
	 * @param conhecimentoService the conhecimentoService to set
	 */
	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
}

	/**
	 * @return the conhecimentoService
	 */
	public ConhecimentoService getConhecimentoService() {
		return conhecimentoService;
	}

	public void setCarregamentoDescargaService(CarregamentoDescargaService carregamentoDescargaService) {
		this.carregamentoDescargaService = carregamentoDescargaService;
	}

	public CarregamentoDescargaService getCarregamentoDescargaService() {
		return carregamentoDescargaService;
	}
}