package com.mercurio.lms.carregamento.swt.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.util.FilterList;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.ControleCarga;
import com.mercurio.lms.carregamento.model.MotivoCancelamentoCc;
import com.mercurio.lms.carregamento.model.service.ControleCargaService;
import com.mercurio.lms.carregamento.model.service.MotivoCancelamentoCcService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTFormatUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.carregamento.swt.cancelarControleCargasAction"
 */

public class CancelarControleCargasAction {
	
	private ControleCargaService controleCargaService;
	private FilialService filialService;
	private MotivoCancelamentoCcService motivoCancelamentoCcService;


	public void setControleCargaService(ControleCargaService controleCargaService) {
		this.controleCargaService = controleCargaService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public void setMotivoCancelamentoCcService(MotivoCancelamentoCcService motivoCancelamentoCcService) {
		this.motivoCancelamentoCcService = motivoCancelamentoCcService;
	}


	public Map findDataControleCarga(Long idControleCarga) {
		Map map = new HashMap();
		ControleCarga cc = controleCargaService.findByIdControleCarga(idControleCarga);
		map.put("tpccDescription", cc.getTpControleCarga().getDescription().toString());
		if (cc.getSolicitacaoContratacao() != null) {
			map.put("scfSgFilial", cc.getSolicitacaoContratacao().getFilial().getSgFilial());
			map.put("scNrSolicitacaoContratacao", cc.getSolicitacaoContratacao().getNrSolicitacaoContratacao());
			if (cc.getRota() != null) {
				map.put("scDsRota", cc.getRota().getDsRota());
			}
		}
		if (cc.getMeioTransporteByIdTransportado() != null) {
			map.put("mttNrFrota", cc.getMeioTransporteByIdTransportado().getNrFrota());
			map.put("mttNrIdentificador", cc.getMeioTransporteByIdTransportado().getNrIdentificador());
		}
		if (cc.getMeioTransporteByIdSemiRebocado() != null) {
			map.put("mtisrNrFrota", cc.getMeioTransporteByIdSemiRebocado().getNrFrota());
			map.put("mtisrNrIdentificador", cc.getMeioTransporteByIdSemiRebocado().getNrIdentificador());
		}
		if (cc.getProprietario() != null) {
			map.put("ppNrIdentificacaoFormatado", FormatUtils.formatIdentificacao(cc.getProprietario().getPessoa()));
			map.put("ppNmPessoa", cc.getProprietario().getPessoa().getNmPessoa());
		}
		if (cc.getTpRotaViagem() != null) {
			map.put("tprvDescription", cc.getTpRotaViagem().getDescription().toString());
		}
		if (cc.getRotaIdaVolta() != null) {
			map.put("rivNrRota", cc.getRotaIdaVolta().getNrRota());
			map.put("rivrDsRota", cc.getRotaIdaVolta().getRota().getDsRota());
		}
		if (cc.getRotaColetaEntrega() != null) {
			map.put("rceNrRota", cc.getRotaColetaEntrega().getNrRota());
			map.put("rceDsRota", cc.getRotaColetaEntrega().getDsRota());
		}

		map.put("hrTempoViagem", cc.getNrTempoViagem() == null ? null : JTFormatUtils.formatTime((cc.getNrTempoViagem().longValue() * 60), 2, 1));
    	if (cc.getNrTempoViagem() != null) {
	    	map.put("hrTempoViagem", FormatUtils.converteMinutosParaHorasMinutos(Long.valueOf(cc.getNrTempoViagem()), FormatUtils.ESCALA_HHH));
    	}

    	map.put("hrPrevisaoSaida", cc.getDhPrevisaoSaida() == null ? null : JTFormatUtils.format(cc.getDhPrevisaoSaida(), JTFormatUtils.SHORT, JTFormatUtils.TIMEOFDAY));
		return map;
	}
	
	
    public List findMotivoCancelamentoCc(Map criteria) {
    	FilterList filter = new FilterList(motivoCancelamentoCcService.findOrderByDsMotivoCancelamentoCc(criteria)) {
			public Map filterItem(Object item) {
				MotivoCancelamentoCc motivoCancelamentoCc = (MotivoCancelamentoCc)item;
    			TypedFlatMap tfm = new TypedFlatMap();
	    		tfm.put("idMotivoCancelamentoCc", motivoCancelamentoCc.getIdMotivoCancelamentoCc());
	    		tfm.put("dsMotivoCancelamentoCc", motivoCancelamentoCc.getDsMotivoCancelamentoCc().toString());
				return tfm;
			}
    	};
    	return (List)filter.doFilter();
    }

    
	public List findLookupFilialByControleCarga(Map criteria) {
    	List list = filialService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		Filial filial = (Filial)iter.next();
    		TypedFlatMap tfm = new TypedFlatMap();
    		tfm.put("idFilial", filial.getIdFilial());
    		tfm.put("sgFilial", filial.getSgFilial());
    		tfm.put("nmFantasia", filial.getPessoa().getNmFantasia());
    		retorno.add(tfm);
    	}
    	return retorno;
    }


    public List findLookupControleCarga(Map criteria) {
    	List list = controleCargaService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		ControleCarga cc = (ControleCarga)iter.next();
    		Map map = new HashMap();
    		map.put("idControleCarga", cc.getIdControleCarga());
    		map.put("nrControleCarga", cc.getNrControleCarga());
    		map.put("tpControleCarga", cc.getTpControleCarga());
    		if (cc.getMeioTransporteByIdTransportado() != null) {
    			map.put("mttIdMeioTransporte", cc.getMeioTransporteByIdTransportado().getIdMeioTransporte());  
    			map.put("mttNrFrota", cc.getMeioTransporteByIdTransportado().getNrFrota());
    			map.put("mttNrIdentificador", cc.getMeioTransporteByIdTransportado().getNrIdentificador());
    		}
    		map.put("idFilialOrigem", cc.getFilialByIdFilialOrigem().getIdFilial());
    		map.put("sgFilialOrigem", cc.getFilialByIdFilialOrigem().getSgFilial());
    		map.put("nmFantasiaFilialOrigem", cc.getFilialByIdFilialOrigem().getPessoa().getNmFantasia());
    		map.put("proprietario",cc.getProprietario());
    		retorno.add(map);
    	}
    	return retorno;
    }

    
    public void generateCancelamentoControleCarga(TypedFlatMap tfm) {
    	controleCargaService.generateCancelamentoControleCarga( tfm.getLong("idControleCarga"),
												    			tfm.getLong("idMotivoCancelamentoCc"),
												    			tfm.getString("dsEvento"));
    }
    
    //LMS-3544
    @SuppressWarnings("rawtypes")
	public Map generateCancelamentoControleCargaAndMdfe(TypedFlatMap tfm) {
    	return controleCargaService.generateCancelamentoControleCargaAndMdfe( tfm.getLong("idControleCarga"),
    			tfm.getLong("idMotivoCancelamentoCc"),
    			tfm.getString("dsEvento"));
    }
}