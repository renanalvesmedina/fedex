package com.mercurio.lms.vendas.swt.action;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.PaginatedQuery;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.Municipio;
import com.mercurio.lms.municipios.model.Pais;
import com.mercurio.lms.municipios.model.UnidadeFederativa;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.MunicipioFilialService;
import com.mercurio.lms.municipios.model.service.PaisService;
import com.mercurio.lms.municipios.model.service.UnidadeFederativaService;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.vendas.model.MunicipioDestinoCalculo;
import com.mercurio.lms.vendas.model.service.MunicipioDestinoCalculoService;


/**
 * Generated by: ADSM ActionGenerator
 *
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.vendas.swt.manterMunicipioDestinoCalculoAction"
 */

public class ManterMunicipioDestinoCalculoAction extends CrudAction {
	private MunicipioDestinoCalculoService municipioDestinoCalculoService;
	private FilialService filialService;
	private UnidadeFederativaService unidadeFederativaService;
	private PaisService paisService;
	private MunicipioFilialService municipioFilialService;


    public void removeById(Long id) {
    	municipioDestinoCalculoService.removeById(id);
    }

    @ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		super.removeByIds(ids);
	}


	@Override
    public ResultSetPage findPaginated(Map criteria) {
		return municipioDestinoCalculoService.findPaginated(new PaginatedQuery(criteria));
	}


    @SuppressWarnings("rawtypes")
	public Map findById(Long id) {
    	MunicipioDestinoCalculo mdc = municipioDestinoCalculoService.findById(id);
    	Map mapped = new HashMap();

    	UnidadeFederativa ufo = unidadeFederativaService.findUFByIdMunicipio(mdc.getMunicipioOriginal().getIdMunicipio());
    	UnidadeFederativa ufd = unidadeFederativaService.findUFByIdMunicipio(mdc.getMunicipioDestino().getIdMunicipio());

    	Pais po = paisService.findPaisByIdMunicipio(mdc.getMunicipioOriginal().getIdMunicipio());
    	Pais pd = paisService.findPaisByIdMunicipio(mdc.getMunicipioDestino().getIdMunicipio());

    	List<Map> fo = (List<Map>)municipioFilialService.findMunicipioFilialVigenteAtualByMunicipio(mdc.getMunicipioOriginal().getIdMunicipio());
    	List<Map> fd = (List<Map>)municipioFilialService.findMunicipioFilialVigenteAtualByMunicipio(mdc.getMunicipioDestino().getIdMunicipio());

    	mapped.put("idMunicipioDestinoCalculo", mdc.getIdMunicipioDestinoCalculo());
    	mapped.put("idMunicipioOrigem", mdc.getMunicipioOriginal().getIdMunicipio());
    	mapped.put("nmMunicipioOrigem", mdc.getMunicipioOriginal().getNmMunicipio());
    	mapped.put("idMunicipioDestino", mdc.getMunicipioDestino().getIdMunicipio());
    	mapped.put("nmMunicipioDestino", mdc.getMunicipioDestino().getNmMunicipio());
    	mapped.put("idUnidadeFederativaOrigem", ufo.getIdUnidadeFederativa());
    	mapped.put("sgUnidadeFederativaOrigem", ufo.getSgUnidadeFederativa());
    	mapped.put("nmUnidadeFederativaOrigem", ufo.getNmUnidadeFederativa());
    	mapped.put("idUnidadeFederativaDestino", ufd.getIdUnidadeFederativa());
    	mapped.put("sgUnidadeFederativaDestino", ufd.getSgUnidadeFederativa());
    	mapped.put("nmUnidadeFederativaDestino", ufd.getNmUnidadeFederativa());
    	mapped.put("idPaisOrigem", po.getIdPais());
    	mapped.put("nmPaisOrigem", po.getNmPais());
    	mapped.put("idPaisDestino", pd.getIdPais());
    	mapped.put("nmPaisDestino", pd.getNmPais());
    	mapped.put("dtVigenciaInicial", mdc.getDtVigenciaInicial());
    	mapped.put("dtVigenciaFinal", mdc.getDtVigenciaFinal());

    	if (fo != null && fo.size() > 0) {
	    	mapped.put("idFilialOrigem", fo.get(0).get("idFilial"));
	    	mapped.put("sgFilialOrigem", fo.get(0).get("sgFilial"));
	    	mapped.put("nmFantasiaOrigem", fo.get(0).get("nmFilial"));
    	}

    	if (fd != null && fd.size() > 0) {
	    	mapped.put("idFilialDestino", fd.get(0).get("idFilial"));
	    	mapped.put("sgFilialDestino", fd.get(0).get("sgFilial"));
	    	mapped.put("nmFantasiaDestino", fd.get(0).get("nmFilial"));
    	}

    	return mapped;
    }


    public Serializable store(TypedFlatMap bean) {
    	validateStore(bean);

    	MunicipioDestinoCalculo municipioDestinoCalculo = new MunicipioDestinoCalculo();
    	Municipio municipioOriginal = new Municipio();
    	Municipio municipioDestino = new Municipio();

    	municipioOriginal.setIdMunicipio(bean.getLong("idMunicipioOrigem"));
    	municipioDestino.setIdMunicipio(bean.getLong("idMunicipioDestino"));
    	municipioDestinoCalculo.setIdMunicipioDestinoCalculo(bean.getLong("idMunicipioDestinoCalculo"));
    	municipioDestinoCalculo.setMunicipioOriginal(municipioOriginal);
    	municipioDestinoCalculo.setMunicipioDestino(municipioDestino);
    	municipioDestinoCalculo.setDtVigenciaInicial(bean.getYearMonthDay("dtVigenciaInicial"));
    	municipioDestinoCalculo.setDtVigenciaFinal(bean.getYearMonthDay("dtVigenciaFinal"));

    	return municipioDestinoCalculoService.store(municipioDestinoCalculo);
	}


    private void validateStore(TypedFlatMap bean) {
    	if (bean.getLong("idMunicipioOrigem") == null || bean.getLong("idMunicipioDestino") == null)
    		throw new BusinessException("LMS-04304");

    	if (bean.getYearMonthDay("dtVigenciaInicial") == null)
    		throw new BusinessException("LMS-27055");

    	if (bean.getLong("idMunicipioDestinoCalculo") == null &&
    		bean.getYearMonthDay("dtVigenciaInicial").isBefore(JTDateTimeUtils.getDataAtual()))
    		throw new BusinessException("LMS-00006");

    	if (bean.getYearMonthDay("dtVigenciaFinal") != null) {
    		if (bean.getYearMonthDay("dtVigenciaFinal").isBefore(JTDateTimeUtils.getDataAtual()))
    			throw new BusinessException("LMS-00007");

    		if (bean.getYearMonthDay("dtVigenciaFinal").isBefore(bean.getYearMonthDay("dtVigenciaInicial")))
    			throw new BusinessException("LMS-00008");
    	}

		validateAtivo(bean);
    }


    private void validateAtivo(TypedFlatMap bean) {
    	Map criteria = new HashMap();
    	criteria.put("idMunicipioDestinoCalculo", bean.getLong("idMunicipioDestinoCalculo"));
    	criteria.put("idMunicipioOriginal", bean.getLong("idMunicipioOrigem"));
    	criteria.put("idMunicipioDestino", bean.getLong("idMunicipioDestino"));
    	criteria.put("dtVigenciaInicial", bean.getYearMonthDay("dtVigenciaInicial"));
    	criteria.put("dtVigenciaFinal", bean.getYearMonthDay("dtVigenciaFinal"));

    	if (municipioDestinoCalculoService.validateMunicipioDestino(criteria))
    		throw new BusinessException("LMS-00003");
    }


    public List findLookupFilial(Map criteria) {
		List<Filial> filiais = filialService.findLookup(criteria);
		if (filiais != null) {
			List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();
			for (Filial filial : filiais) {
				Map<String, Object> mapFilial = new HashMap<String, Object>();
				Filial f = filialService.findLocalizacaoFilialById(filial.getIdFilial());
				UnidadeFederativa uf = f.getMunicipioFiliais().get(0).getMunicipio().getUnidadeFederativa();

				mapFilial.put("sgFilial", filial.getSgFilial());
				mapFilial.put("idFilial", filial.getIdFilial());
				mapFilial.put("nmFantasia", filial.getPessoa().getNmFantasia());
				mapFilial.put("nmUnidadeFederativa", uf.getNmUnidadeFederativa());
				mapFilial.put("sgUnidadeFederativa", uf.getSgUnidadeFederativa());
				mapFilial.put("idUnidadeFederativa", uf.getIdUnidadeFederativa());
				mapFilial.put("nmPais", uf.getPais().getNmPais());
				mapFilial.put("idPais", uf.getPais().getIdPais());

				result.add(mapFilial);
			}
			return result;
		}
		return null;
	}


    public void setDefaultService(MunicipioDestinoCalculoService municipioDestinoCalculoService) {
    	super.defaultService = municipioDestinoCalculoService;
    	this.municipioDestinoCalculoService = municipioDestinoCalculoService;
    }


	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}


	public void setUnidadeFederativaService(UnidadeFederativaService unidadeFederativaService) {
		this.unidadeFederativaService = unidadeFederativaService;
	}


	public void setPaisService(PaisService paisService) {
		this.paisService = paisService;
	}


	public void setMunicipioFilialService(
			MunicipioFilialService municipioFilialService) {
		this.municipioFilialService = municipioFilialService;
	}
}