package com.mercurio.lms.vendas.swt.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.service.ParametroGeralService;
import com.mercurio.lms.edi.model.ClienteLayoutEDI;
import com.mercurio.lms.sim.model.service.TemplateRelatorioService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.vendas.model.AgrupadorCliente;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.EnvioCteCliente;
import com.mercurio.lms.vendas.model.service.ClienteService;
import com.mercurio.lms.vendas.model.service.ManterParametrizacaoEnvioService;


/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.vendas.swt.manterParametrizacaoEnvioAction"
 */

public class ManterParametrizacaoEnvioAction extends CrudAction {
	
	private ClienteService clienteService;
	private ManterParametrizacaoEnvioService manterParametrizacaoEnvioService;
	private ParametroGeralService parametroGeralService;
	private TemplateRelatorioService templateRelatorioService;
	
    /**
     * Busca os clientes de acordo com os criterios informados.
     * 
     * @param criteria
     * @return
     */
	public List<Map<String, Object>> findLookupCliente(Map criteria) {
		List<Map<String, Object>> clientes = clienteService.findClienteByNrIdentificacao((String) criteria.get("nrIdentificacao"));
		if (clientes != null) {
			for(Map cliente : clientes) {
				cliente.remove("tpCliente");
				Map pessoa = (Map) cliente.remove("pessoa");
				if (pessoa != null) {
					cliente.put("nmPessoa", pessoa.get("nmPessoa"));
					cliente.put("nrIdentificacao", pessoa.remove("nrIdentificacaoFormatado"));
				}
			}
		}
		return clientes;
	}
	
	public List findLookupTemplateRelatorio(TypedFlatMap map) {
		return templateRelatorioService.findLookup(map);
	}
	
	
	public Map findById(java.lang.Long id) {	
		Map retorno = this.manterParametrizacaoEnvioService.findByIdCustom(id); 
		if ("O".equals(retorno.get("tpEnvio"))){
			retorno.putAll(findOutrosEnvios((Long)retorno.get("idClienteRemetente")));
		}
		if("F".equals(retorno.get("tpParametrizacao")) || "R".equals(retorno.get("tpParametrizacao")) || "D".equals(retorno.get("tpParametrizacao"))){
			List<Map<String, Object>> cnpjsAgrupamento = this.manterParametrizacaoEnvioService.findAgrupamentoClienteByIdParametrizacaoEnvio((Long) retorno.get("idEnvioCteCliente"));
			retorno.put("cnpjs", cnpjsAgrupamento);
		}
		return retorno;
	}

	
	public Map store(Map data) {
		List<Map<String, Object>> cnpjs = (List<Map<String, Object>>)data.get("cnpjs");
		data.remove("cnpjs");
		
		Long idEnvioCteCliente =(Long) ((ManterParametrizacaoEnvioService)defaultService).store(data);
		Map<String, Object> result = new HashMap<String, Object>();
		
		manterParametrizacaoEnvioService.removeAgrupadorClienteByIdParametrizacaoEnvio(idEnvioCteCliente);
		
		EnvioCteCliente envio =  new EnvioCteCliente();
		envio.setIdEnvioCteCliente(idEnvioCteCliente);
		if(cnpjs != null){
			storeAgrupadorCliente(envio, cnpjs);
		}
		result.put("idEnvioCteCliente", idEnvioCteCliente);
		
		return result;
	}
	
	public List findClienteByNrIdentificacao(Map criteria){
		return clienteService.findClienteByNrIdentificacaoForAgrupamento((String) criteria.get("nrIdentificacao"));
	}
	
	private void storeAgrupadorCliente(EnvioCteCliente envio, List<Map<String, Object>> cnpjs) {
		for(Map<String, Object> map :  cnpjs){
			AgrupadorCliente agrupadorCliente = new AgrupadorCliente();
			agrupadorCliente.setEnvioCteCliente(envio);
			
			Cliente cliente  = (Cliente) clienteService.findClienteByNrIdentificacaoForAgrupamento((String) map.get("nrIdentificacao")).get(0);
			agrupadorCliente.setCliente(cliente);
			manterParametrizacaoEnvioService.storeAgrupadorCliente(agrupadorCliente);
		}
	}

	public void removeById(java.lang.Long id) {
		((ManterParametrizacaoEnvioService)defaultService).removeById(id);
	}
	
	@Override
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		((ManterParametrizacaoEnvioService)defaultService).removeByIds(ids);
	}
	
	
	/**
	 * Busca a quantidade de dados da grid de carregamentos
	 */
	public Integer getRowCount(Map criteria) {
		TypedFlatMap tfmCriteria = new TypedFlatMap(criteria);
		return manterParametrizacaoEnvioService.getRowCountManterParametrizacaoEnvio(tfmCriteria);
	}

	public Map findAssuntoEmailCte() {
		Map<String, Object> dsAssuntoMailCte = new HashMap<String, Object>();
		dsAssuntoMailCte.put("txtDsTextoEmail", parametroGeralService.findDsConteudoByNmParametro("ASSUNTO_EMAIL_CTE"));
		return dsAssuntoMailCte;
	}	
	
	public TypedFlatMap findOutrosEnvios(Long idCliente) {
		TypedFlatMap tfmClienteLayoutEdi = new TypedFlatMap();
		if (idCliente != null){
			ClienteLayoutEDI clienteLayoutEdi = manterParametrizacaoEnvioService.findOutrosEnvios(idCliente);
			if(clienteLayoutEdi!= null){
				tfmClienteLayoutEdi.put("tpTransmissao", clienteLayoutEdi.getTransmissaoEDI().getNome());
				tfmClienteLayoutEdi.put("ftpServidor", clienteLayoutEdi.getFtpServidor());
				tfmClienteLayoutEdi.put("ftpPasta", clienteLayoutEdi.getFtpCaminho()+"\\"+clienteLayoutEdi.getNmPasta());
				tfmClienteLayoutEdi.put("ftpUsuario", clienteLayoutEdi.getFtpUser());
			}
		}
		return tfmClienteLayoutEdi;
	}	
	
	public ResultSetPage findPaginated(TypedFlatMap criteria) {
		ResultSetPage rsp = manterParametrizacaoEnvioService.findPaginatedManterParametrizacaoEnvio(criteria);

		if (rsp != null) {
			List<Map> controles = rsp.getList();
			List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();
			if (controles != null) {
				for (Map map : controles) {
					Map<String, Object> mapControle = new HashMap<String, Object>();
					mapControle.put("tpParametrizacao", map.get("tpParametrizacao"));
					mapControle.put("nmPessoa", map.get("nmPessoa"));
					mapControle.put(
							"nrIdentificacao",
							FormatUtils.formatIdentificacao(((DomainValue) map.get("tpIdentificacao")).getValue(),
									(String) map.get("nrIdentificacao")));
					mapControle.put("idEnvioCteCliente", map.get("idEnvioCteCliente"));
					result.add(mapControle);
				}
				rsp.setList(result);
			}
		}
		return rsp;
	}
	
	/*
	 * GETTERS E SETTERS
	 */

	public void setService(ManterParametrizacaoEnvioService manterParametrizacaoEnvioService) {
		this.defaultService = manterParametrizacaoEnvioService;
	}

	public ManterParametrizacaoEnvioService getService() {
		return (ManterParametrizacaoEnvioService) this.defaultService;
	}
	
	public void setManterParametrizacaoEnvioService(
			ManterParametrizacaoEnvioService manterParametrizacaoEnvioService) {
		this.manterParametrizacaoEnvioService = manterParametrizacaoEnvioService;
	}
	
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}

	public ParametroGeralService getParametroGeralService() {
		return parametroGeralService;
	}

	public void setParametroGeralService(ParametroGeralService parametroGeralService) {
		this.parametroGeralService = parametroGeralService;
	}

	public void setTemplateRelatorioService(TemplateRelatorioService templateRelatorioService) {
		this.templateRelatorioService = templateRelatorioService;
	}
	
	
}