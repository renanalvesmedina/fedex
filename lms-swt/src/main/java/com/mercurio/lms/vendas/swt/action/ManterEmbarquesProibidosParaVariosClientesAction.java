package com.mercurio.lms.vendas.swt.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.MapUtils;
import org.joda.time.DateTime;
import org.joda.time.YearMonthDay;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.model.pojo.PerfilUsuario;
import com.mercurio.adsm.framework.model.service.PerfilUsuarioService;
import com.mercurio.adsm.framework.util.FilterList;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.MotivoProibidoEmbarque;
import com.mercurio.lms.vendas.model.service.EmbarquesProibidosParaVariosClientesService;
import com.mercurio.lms.vendas.model.service.MotivoProibidoEmbarqueService;

/**
 * Generated by: ADSM ActionGenerator
 * 
 * Não inserir documentação após ou remover a tag do XDoclet a seguir. O valor
 * do <code>id</code> informado abaixo deve ser utilizado para referenciar este
 * serviço.
 * 
 * @spring.bean id="lms.vendas.swt.ManterEmbarquesProibidosParaVariosClientesAction"
 */

public class ManterEmbarquesProibidosParaVariosClientesAction {
	
	private MotivoProibidoEmbarqueService motivoProibidoEmbarqueService;
	private EmbarquesProibidosParaVariosClientesService embarquesProibidosParaVariosClientesService;
	private PerfilUsuarioService perfilUsuarioService;
	
    public List findMotivoProibidoEmbarque(Map criteria) {
    	FilterList filter = new FilterList(motivoProibidoEmbarqueService.findMotivoProibidoEmbarque(criteria)) {
			public Map filterItem(Object item) {
				MotivoProibidoEmbarque motivoProibidoEmbarque = (MotivoProibidoEmbarque)item;
    			TypedFlatMap tfm = new TypedFlatMap();
	    		tfm.put("idMotivoProibidoEmbarque", motivoProibidoEmbarque.getIdMotivoProibidoEmbarque());
	    		tfm.put("dsMotivoProibidoEmbarque", motivoProibidoEmbarque.getDsMotivoProibidoEmbarque().toString());
				return tfm;
			}
    	};
    	return (List)filter.doFilter();
    }
    
    /**
     *  Executa a importação arquivo TXT
     *  @param parameters
     */
    @SuppressWarnings({ "rawtypes", "unchecked" })
	public Map importarArquivoTXT(TypedFlatMap parameters) {
    	Map result = this.getEmbarquesProibidosParaVariosClientesService().importarArquivoTXT(parameters);
		List<Object[]> listaCnpjCpf = (List) result.get("listaCnpjCpf");
		List<Map> lista = new ArrayList();
		
		Map rowData = null;
		
		for (Object[] cnpjCpf : listaCnpjCpf) {
			YearMonthDay dsDataBloqueio = null;
			YearMonthDay dsDataDesbloqueio = null;
			if (cnpjCpf[3] != null) {
				dsDataBloqueio = new YearMonthDay(cnpjCpf[3]);
			}
			if (cnpjCpf[7] != null) {
				dsDataDesbloqueio = new YearMonthDay(cnpjCpf[7]);
			}
			rowData = new HashMap<String, Object>();

			rowData.put("tpIdentificacao", cnpjCpf[0]);
			rowData.put("dsIdentificacao", cnpjCpf[1]);
				
			rowData.put("dsNome", cnpjCpf[2]);
			rowData.put("dsDataBloqueio",  dsDataBloqueio);
			rowData.put("dsMotivoBloqueio", cnpjCpf[4]);
			rowData.put("idMotivoProibidoEmbarque", cnpjCpf[5]);
			rowData.put("dsRespBloqueio", cnpjCpf[6]);
			rowData.put("dsDataDesbloqueio", dsDataDesbloqueio);
			rowData.put("idPessoa", cnpjCpf[8]);
			rowData.put("idProibidoEmbarque", cnpjCpf[9]);
			
			lista.add(rowData);
		}

		rowData = new HashMap<String, Object>();
		rowData.put("listaCnpjCpf", lista);
		return rowData;
    }
    
	/**
	 * Este método inclui um bloqueio ou desbloqueio, de acordo com a “Função” selecionada 
	 * para cada cliente listado na Grid da aba Listagem
	 *
	 * @param Map
	 */
	public void validaExecutar(Map map){
		DateTime dateAtual = new DateTime(JTDateTimeUtils.getDataAtual().toString());
		
		DateTime dsData = new DateTime(MapUtils.getString(map, "dsData"));
		String funcao = MapUtils.getString(map, "funcao");
		Long idMotivoProibidoEmbarque = MapUtils.getLong(map, "idMotivoProibidoEmbarque");
		List<Map> listGrid = (List<Map>)map.get("listGrid");
		
		if ("B".equals(funcao) && dsData.isBefore(dateAtual)) {
			throw new BusinessException("LMS-01008");
		}
		MotivoProibidoEmbarque motivoProibidoEmbarque = motivoProibidoEmbarqueService.findById(idMotivoProibidoEmbarque);
		List<PerfilUsuario> listaPerfisUsuario = perfilUsuarioService.findByIdUsuarioPerfilUsuario(SessionUtils.getUsuarioLogado().getIdUsuario());
		
		if (motivoProibidoEmbarque.getBlFinanceiro()) {
			Boolean valido = Boolean.TRUE;
			for(PerfilUsuario perfil : listaPerfisUsuario){
				if (perfil != null && perfil.getPerfil() != null && "Financeiro LMS - Liberação Embarque".equals(perfil.getPerfil().getDsPerfil())) {
					valido = Boolean.FALSE;
				}
			}
			if (valido) {
				throw new BusinessException("LMS-01204");
			}
		}
		if (listGrid == null || listGrid.isEmpty()) {
			throw new BusinessException("LMS-01224");
		}
	}
	
	public Map executaEmbarquesProibidosVariosClientes(Map map) {
		return embarquesProibidosParaVariosClientesService.executar(map);
	}

	public MotivoProibidoEmbarqueService getMotivoProibidoEmbarqueService() {
		return motivoProibidoEmbarqueService;
	}

	public void setMotivoProibidoEmbarqueService(
			MotivoProibidoEmbarqueService motivoProibidoEmbarqueService) {
		this.motivoProibidoEmbarqueService = motivoProibidoEmbarqueService;
	}

	public EmbarquesProibidosParaVariosClientesService getEmbarquesProibidosParaVariosClientesService() {
		return embarquesProibidosParaVariosClientesService;
	}

	public void setEmbarquesProibidosParaVariosClientesService(
			EmbarquesProibidosParaVariosClientesService embarquesProibidosParaVariosClientesService) {
		this.embarquesProibidosParaVariosClientesService = embarquesProibidosParaVariosClientesService;
	}

	public PerfilUsuarioService getPerfilUsuarioService() {
		return perfilUsuarioService;
	}

	public void setPerfilUsuarioService(PerfilUsuarioService perfilUsuarioService) {
		this.perfilUsuarioService = perfilUsuarioService;
	}
	
}
