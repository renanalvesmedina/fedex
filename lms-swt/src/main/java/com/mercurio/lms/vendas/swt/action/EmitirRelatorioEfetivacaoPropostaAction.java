package com.mercurio.lms.vendas.swt.action;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.mercurio.adsm.framework.report.ReportActionSupport;
import com.mercurio.adsm.framework.session.SessionContext;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.configuracoes.model.service.UsuarioService;
import com.mercurio.lms.franqueados.util.FranqueadoReportUtils;
import com.mercurio.lms.municipios.model.Regional;
import com.mercurio.lms.municipios.model.service.RegionalService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.service.ClienteService;
import com.mercurio.lms.vendas.report.EmitirRelatorioEfetivacaoPropostaService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.vendas.emitirRelatorioEfetivacaoPropostaAction"
 */
public class EmitirRelatorioEfetivacaoPropostaAction extends ReportActionSupport{

	private EmitirRelatorioEfetivacaoPropostaService emitirRelatorioEfetivacaoPropostaService;
	private RegionalService regionalService;
	private ClienteService clienteService;
	private UsuarioService usuarioService;
	
	public void setEmitirRelatorioEfetivacaoPropostaService(EmitirRelatorioEfetivacaoPropostaService emitirRelatorioEfetivacaoPropostaService) {
		this.reportServiceSupport = emitirRelatorioEfetivacaoPropostaService;
		this.emitirRelatorioEfetivacaoPropostaService = emitirRelatorioEfetivacaoPropostaService;
	}
	
	public Object executeSWT(TypedFlatMap parameters) throws Exception {
		if(parameters.containsKey("tpFormatoRelatorio") && StringUtils.equalsIgnoreCase(parameters.getString("tpFormatoRelatorio"),FranqueadoReportUtils.EXPORT_TYPE_CSV)){
			return getReportExecutionManager().generateReportLocator(this.emitirRelatorioEfetivacaoPropostaService.executeCsv(parameters,getReportExecutionManager().generateOutputDir()));
		} else {
			return this.executeGenerateLocator(parameters);
		}
	}
	
	public List<Map<String,Object>> findComboRegional(){
		Usuario usuarioSessao = (Usuario) SessionContext.getUser();			
		List<Regional> regionais = getRegionalService().findRegionaisVigentesByIdUsuario(usuarioSessao.getIdUsuario());		
		List<Map<String,Object>> retorno = new ArrayList<Map<String,Object>>();
		
		for (Regional regional:regionais){
			Map<String,Object> regionalMap = new HashMap<String,Object>();
			regionalMap.put("idRegional", regional.getIdRegional());
			regionalMap.put("dsRegional", regional.getSiglaDescricao());
			retorno.add(regionalMap);
		}
		return retorno;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
    public List findLookupCliente(Map criteria){
		Map mapPessoa = new HashMap();
		mapPessoa.put("nrIdentificacao", criteria.get("nrIdentificacao"));
		criteria.put("pessoa", mapPessoa);
		criteria.remove("nrIdentificacao");

		List clientes = clienteService.findLookup(criteria);
		List retorno = new ArrayList();
		if (clientes != null) {
			for (Iterator iter = clientes.iterator(); iter.hasNext();) {
				Map map = new HashMap();
				Cliente cliente = (Cliente) iter.next();
				map.put("idCliente", cliente.getIdCliente());
				map.put("tpSituacao", cliente.getTpSituacao());
				map.put("nmPessoa", cliente.getPessoa().getNmPessoa());
				map.put("nrIdentificacao", cliente.getPessoa().getNrIdentificacao());
				map.put("nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(cliente.getPessoa()));
				map.put("tpIdentificacao", cliente.getPessoa().getTpIdentificacao());
				map.put("tpCliente", cliente.getTpCliente());
				retorno.add(map);
			}
		}
		return retorno;
    }
	
	
	public List<Map<String, Object>> findLookupUsuario(TypedFlatMap criteria) {
		@SuppressWarnings("unchecked")
		List<Map<String, Object>> usuarios = usuarioService.findLookupFuncionarioPromotor((String) criteria.get("nrMatricula"));
		return usuarios;			
	}	
	
	public RegionalService getRegionalService() {
		return regionalService;
	}

	public void setRegionalService(RegionalService regionalService) {
		this.regionalService = regionalService;
	}

	public ClienteService getClienteService() {
		return clienteService;
	}

	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}

	public UsuarioService getUsuarioService() {
		return usuarioService;
	}

	public void setUsuarioService(UsuarioService usuarioService) {
		this.usuarioService = usuarioService;
	}
}
