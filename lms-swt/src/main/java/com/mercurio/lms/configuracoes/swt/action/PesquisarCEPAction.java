package com.mercurio.lms.configuracoes.swt.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.FindDefinition;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.lms.configuracoes.model.Cep;
import com.mercurio.lms.configuracoes.model.TipoLogradouro;
import com.mercurio.lms.configuracoes.model.param.PesquisarCepParam;
import com.mercurio.lms.configuracoes.model.service.CepService;
import com.mercurio.lms.configuracoes.model.service.TipoLogradouroService;
import com.mercurio.lms.municipios.model.Municipio;
import com.mercurio.lms.municipios.model.Pais;
import com.mercurio.lms.municipios.model.UnidadeFederativa;
import com.mercurio.lms.municipios.model.service.MunicipioService;
import com.mercurio.lms.municipios.model.service.PaisService;
import com.mercurio.lms.municipios.model.service.UnidadeFederativaService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.configuracoes.swt.pesquisarCEPAction"
 */

public class PesquisarCEPAction extends CrudAction {
	
	private PaisService paisService;
	private UnidadeFederativaService unidadeFederativaService;
	private MunicipioService municipioService;
	private TipoLogradouroService tipoLogradouroService;

	public void setTipoLogradouroService(TipoLogradouroService tipoLogradouroService) {
		this.tipoLogradouroService = tipoLogradouroService;
	}

	public void setMunicipioService(MunicipioService municipioService) {
		this.municipioService = municipioService;
	}

	public void setUnidadeFederativaService(
			UnidadeFederativaService unidadeFederativaService) {
		this.unidadeFederativaService = unidadeFederativaService;
	}

	public void setPaisService(PaisService paisService) {
		this.paisService = paisService;
	}

	public List findLookupPais(Map criteria){
		List lista = paisService.findLookup(criteria);
		if(!lista.isEmpty() && lista.size()==1){
			Pais pais = (Pais)lista.get(0);
			Map mapa = new HashMap();
			mapa.put("nmPais", pais.getNmPais().toString());
			mapa.put("idPais", pais.getIdPais());
			lista.add(mapa);
			lista.remove(pais);
		}
		return lista;
	}
	
	public List findLookupByNmPais(Map criteria){
		List lista = paisService.findByNmPais((String)criteria.get("nmpais"));
		if (!lista.isEmpty() && lista.size()==1)
			return lista;
		return null;
	}
	
	public List findLookupUF(Map criteria){
		if(criteria.get("idPais")!= null){
			Map pais = new HashMap();
			pais.put("idPais", criteria.get("idPais"));
			criteria.put("pais", pais);
		}
		
		List lista = unidadeFederativaService.findLookup(criteria);
		
		if(!lista.isEmpty() && lista.size()==1){
			UnidadeFederativa uf = (UnidadeFederativa)lista.get(0);
			Map mapa = new HashMap();
			mapa.put("nmUnidadeFederativa", uf.getNmUnidadeFederativa());
			mapa.put("idUnidadeFederativa", uf.getIdUnidadeFederativa());
			mapa.put("sgUnidadeFederativa", uf.getSgUnidadeFederativa());
			if (uf.getMunicipio() != null) {
				mapa.put("idMunicipio", uf.getMunicipio().getIdMunicipio());
				mapa.put("nmMunicipio", uf.getMunicipio().getNmMunicipio());
			}
			lista.add(mapa);
			lista.remove(uf);
		}
		return lista;
	}
	
	public List findLookupMunicipio(Map criteria){
		
		if(criteria.get("idPais")!= null){
			Map idPais = new HashMap();
			Map pais = new HashMap();
			idPais.put("idPais", criteria.get("idPais"));
			pais.put("pais", idPais);
			criteria.put("unidadeFederativa", pais);
		}
		criteria.remove("idPais");
		
		if(criteria.get("idUnidadeFederativa")!= null){
			Map idUnidadeFederativa = new HashMap();
			idUnidadeFederativa.put("idUnidadeFederativa", criteria.get("idUnidadeFederativa"));
			criteria.put("unidadeFederativa", idUnidadeFederativa);
		}
		criteria.remove("idUnidadeFederativa");
		
		List lista = municipioService.findLookup(criteria);
		if(!lista.isEmpty() && lista.size()==1){
			Municipio municipio = (Municipio)lista.get(0);
			Map mapa = new HashMap();
			mapa.put("nmMunicipio", municipio.getNmMunicipio());
			mapa.put("idMunicipio", municipio.getIdMunicipio());
			lista.add(mapa);
			lista.remove(municipio);
		}
		return lista;
	}
	
	public List findTipoLogradouro(Map criteria){
		List lista = tipoLogradouroService.find(criteria);
		if(!lista.isEmpty() && lista.size()==1){
			TipoLogradouro tipoLogradouro = (TipoLogradouro)lista.get(0);
			
			Map mapa = new HashMap();
			mapa.put("dsTipoLogradouro", tipoLogradouro.getDsTipoLogradouro().toString());
			mapa.put("idTipoLogradouro", tipoLogradouro.getIdTipoLogradouro());
						
			lista.add(mapa);
			lista.remove(tipoLogradouro);
		}
		return lista;
		
	}
	
	public void setCep(CepService cepService) {
		this.defaultService = cepService;
	}
	
	public CepService getCepService(){
		return ((CepService)defaultService);
	}
	
    public void removeById(java.lang.Long id) {
        ((CepService)defaultService).removeById(id);
    }
    

	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	((CepService)defaultService).removeByIds(ids);
    }

    public Cep findById(java.lang.Long id) {
    	return ((CepService)defaultService).findById(id);
    }
    
    /**
	 * Rowcount substituto do método padrão necessário para complemento 
	 * do número do CEP caso o país informado seja BRASIL
	 *
	 * @author José Rodrigo Moraes
	 * @since 23/01/2007
	 *
	 * @param param javaBean de critérios de pesquisa (setado na action)
	 * @return 
	 */
    public Integer getRowCountEspecific(Map criteria) {
    	return getCepService().getRowCountEspecific(createPesquisarCepParam(criteria));
    }
    
    /**
	 * FindPaginated substituto do método padrão necessário para complemento
	 * do número do CEP caso o país informado seja BRASIL
	 *
	 * @author José Rodrigo Moraes
	 * @since 23/01/2007
	 *
	 * @param param javaBean de critérios de pesquisa (setado na action)
	 * @return
	 */
    public ResultSetPage findPaginatedEspecific(Map criteria) {
    	
    	Map map = new HashMap();
    	map.put("_currentPage", criteria.get("_currentPage"));
    	map.put("_pageSize", criteria.get("_pageSize"));
    	map.put("_order", criteria.get("_order"));    	
    	
    	ResultSetPage rs = getCepService().findPaginatedEspecific(createPesquisarCepParam(criteria),FindDefinition.createFindDefinition(map));
    	List listaNova = new ArrayList();
    	for(Iterator iter = rs.getList().iterator(); iter.hasNext();){
    		Cep cep  = (Cep)iter.next();
    		Map mapa = new HashMap();
    		if(cep.getMunicipio()!= null) {
    			mapa.put("nmMunicipio", cep.getMunicipio().getNmMunicipio());
    			mapa.put("idMunicipio", cep.getMunicipio().getIdMunicipio());
    			mapa.put("idPais", cep.getMunicipio().getUnidadeFederativa().getPais().getIdPais());
    			mapa.put("nmPais", cep.getMunicipio().getUnidadeFederativa().getPais().getNmPais());
    			mapa.put("tpSituacaoMunicipio", cep.getMunicipio().getTpSituacao().getValue());
    			
    			if(cep.getMunicipio().getUnidadeFederativa()!= null){
    				mapa.put("sgUnidadeFederativa", cep.getMunicipio().getUnidadeFederativa().getSgUnidadeFederativa());
    				mapa.put("idUnidadeFederativa", cep.getMunicipio().getUnidadeFederativa().getIdUnidadeFederativa());
    				mapa.put("tpSituacaoUnidadeFederativa", cep.getMunicipio().getUnidadeFederativa().getTpSituacao().getValue());
    				}
    			}
    		
    		mapa.put("nmBairro", cep.getNmBairro());
    		mapa.put("nmLogradouro", cep.getNmLogradouro());
    		mapa.put("dsLogComplemento", cep.getDsLogComplemento());
    		mapa.put("nrCep", cep.getNrCep());
    		mapa.put("dsTipoLogradouro", cep.getDsTipoLogradouro());
    		listaNova.add(mapa);
    	}
    	rs.setList(listaNova);
    	return rs;
    	
    }
    
    /**
     * Monta o javaBean de parâmetros da tela
     * 
     *
     * @author José Rodrigo Moraes
     * @since 23/01/2007
     *
     * @param tfm Critérios de pesquisa
     * @return javaBean com os dados
     */
	private PesquisarCepParam createPesquisarCepParam(Map criteria) {
    	PesquisarCepParam param = new PesquisarCepParam();
    	
    	param.setNrCep((String)criteria.get("nrCep"));
    	param.setIdPais((Long)criteria.get("idPais"));
    	param.setIdUnidadeFederativa((Long)criteria.get("idUnidadeFederativa"));
    	param.setIdMunicipio((Long)criteria.get("idMunicipio"));
    	param.setNmBairro((String)criteria.get("nmBairro"));
    	param.setDsTipoLogradouro((String)criteria.get("dsTipoLogradouro"));
    	param.setDsLogradouro((String)criteria.get("nmLogradouro"));
    	
		return param;
	}

}
