package com.mercurio.lms.configuracoes.swt.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.FindDefinition;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.ConfiguracoesFacade;
import com.mercurio.lms.configuracoes.model.Funcionario;
import com.mercurio.lms.configuracoes.model.RHFuncao;
import com.mercurio.lms.configuracoes.model.Usuario;
import com.mercurio.lms.configuracoes.model.service.RHCargoService;
import com.mercurio.lms.configuracoes.model.service.RHFuncaoService;
import com.mercurio.lms.configuracoes.model.service.UsuarioService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.configuracoes.swt.manterUsuarioFuncionarioAction"
 */
public class ManterUsuarioFuncionarioAction extends CrudAction {
	public static final String MODE_PROMOTOR_VENDAS = "PROMOTOR_VENDAS";
	
	private UsuarioService usuarioService;
	private ConfiguracoesFacade configuracoesFacade;
	private RHCargoService rhCargoService;
	private FilialService filialService;
	private RHFuncaoService rhFuncaoService;

	/**
	 * Andresa Vargas
	 * 
	 * Método criado para tratar os parâmetros recebidos da pesquisa de usuarios/funcionarios
	 * 
	 * @see lms.com.mercurio.lms.configuracoes.model.service.UsuarioService.findPaginatedCustom
	 */
	public ResultSetPage findPaginatedCustom(TypedFlatMap criteria) {
		Long idFilial = criteria.getLong("idFilial");
		String nrMatricula = criteria.get("nrMatricula") != null ? criteria.getString("nrMatricula") : "";
		String nmFuncionario = criteria.get("nmUsuario") != null ? criteria.getString("nmUsuario") : "";
		String cdCargo = criteria.get("codigo") != null ? criteria.getString("codigo") : "";
		String cdFuncao = criteria.get("codigoFuncao") != null ? criteria.getString("codigoFuncao") : "";
		String cdMotorista = criteria.get("codigoCargoMotorista") != null ? criteria.getString("codigoCargoMotorista") : "";
		String tpSituacaoFuncionario = criteria.get("tpSituacaoFuncionario") != null ? criteria.getString("tpSituacaoFuncionario") : "";
		String cdSetor = criteria.get("codigoSetor") != null ? criteria.getString("codigoSetor") : "";		
		String nrCpf = criteria.get("nrIdentificacao") != null ? ((String)criteria.getString("nrIdentificacao")).replace(".", "").replace("-", "") : "";
		String mode = criteria.getString("mode");

		if (StringUtils.isNotBlank(cdMotorista)) {
			cdCargo = (String)getConfiguracoesFacade().getValorParametro("CD_CARGO_MOTORISTA");
		}

		ResultSetPage rsp = null;
		
		if(MODE_PROMOTOR_VENDAS.equals(mode)) {
			rsp = getUsuarioService().findPaginatedPromotor(idFilial, 
	   												 nrMatricula,
	   												 nmFuncionario,
						 tpSituacaoFuncionario,
						 cdSetor,
						 nrCpf,
						 true,
						 FindDefinition.createFindDefinition(criteria));
		} else {
			rsp =  getUsuarioService().findPaginatedCustom(idFilial, 
	   												 nrMatricula,
	   												 nmFuncionario,
	   												 cdCargo,
	   												 cdFuncao,
	   												 tpSituacaoFuncionario,
	   												 cdSetor,
	   												 nrCpf,
	   												 true,
	   												 FindDefinition.createFindDefinition(criteria));
		}
		
		List newList = new ArrayList();
		for(Iterator i = rsp.getList().iterator() ; i.hasNext() ; ) {
	   		Usuario usuario = (Usuario)i.next();
    		TypedFlatMap tfm = new TypedFlatMap();

       		Funcionario vfuncionario = usuario.getVfuncionario();
    		tfm.put("idUsuario", usuario.getIdUsuario());
       	 	tfm.put("nrMatricula", usuario.getNrMatricula());
    		tfm.put("nmUsuario", usuario.getNmUsuario());
    		tfm.put("login", usuario.getLogin());
    		if (vfuncionario != null){
    			tfm.put("nmFuncionario", vfuncionario.getNmFuncionario());
	    		tfm.put("nmFantasia",vfuncionario.getFilial().getPessoa().getNmFantasia());
	    		tfm.put("dsFuncao",vfuncionario.getDsFuncao());
	    		tfm.put("dsSituacao",vfuncionario.getDsSituacao()); 
	    		tfm.put("nrCpf", vfuncionario.getNrCpf());
	    		tfm.put("dtNascimento", vfuncionario.getDtNascimento());
	    		//Adicionado teste para evitar casos de NullPointerException
	    		if (vfuncionario.getTpSexo() != null){
	    		tfm.put("tpSexo", vfuncionario.getTpSexo().getValue());
	    		}
	    		tfm.put("nrRg", vfuncionario.getNrRg());
	    		tfm.put("dsOrgaoEmissor", vfuncionario.getDsOrgaoEmissor());
	    		tfm.put("dtEmissaoRg", vfuncionario.getDtEmissaoRg());
	    		tfm.put("nrCnh", vfuncionario.getNrCnh());
	    		tfm.put("tpCategoriaCnh", vfuncionario.getTpCategoriaCnh());
	    		tfm.put("dtVencimentoHabilitacao", vfuncionario.getDtVencimentoHabilitacao());
	    		tfm.put("dsEmail", vfuncionario.getDsEmail());
    		}
    		newList.add(tfm);
		}
		rsp.setList(newList);
	   	return rsp;
	}
	
	/**
	 * Andresa Vargas
	 * 
	 * Método criado para tratar os parâmetros recebidos da pesquisa de usuarios/funcionarios
	 * 
	 * @see lms.com.mercurio.lms.configuracoes.model.service.UsuarioService.getRowCountCustom
	 */	
	public Integer getRowCountCustom(TypedFlatMap criteria) {
		Long idFilial = criteria.getLong("idFilial");
		String nrMatricula = criteria.get("nrMatricula") != null ? criteria.getString("nrMatricula") : "";
		String nmFuncionario = criteria.get("nmUsuario") != null ? criteria.getString("nmUsuario") : "";
		String cdCargo = criteria.get("codigo") != null ? criteria.getString("codigo") : "";
		String cdFuncao = criteria.get("codigoFuncao") != null ? criteria.getString("codigoFuncao") : "";
		String cdMotorista = criteria.get("codigoCargoMotorista") != null ? criteria.getString("codigoCargoMotorista") : "";
		String tpSituacaoFuncionario = criteria.get("tpSituacaoFuncionario") != null ? criteria.getString("tpSituacaoFuncionario") : "";
		String cdSetor = criteria.get("codigoSetor") != null ? criteria.getString("codigoSetor") : "";
		String nrCpf = criteria.get("nrIdentificacao") != null ? ((String)criteria.getString("nrIdentificacao")).replace(".", "").replace("-", "") : "";
		String mode = criteria.getString("mode");

		if (StringUtils.isNotBlank(cdMotorista)) {
			cdCargo = (String)getConfiguracoesFacade().getValorParametro("CD_CARGO_MOTORISTA");
		}

		if(MODE_PROMOTOR_VENDAS.equals(mode)) {
			return getUsuarioService().getRowCountPromotor(idFilial, nrMatricula, nmFuncionario, 
					tpSituacaoFuncionario, cdSetor, nrCpf, true);	
		} else {
		return getUsuarioService().getRowCountCustom(idFilial, nrMatricula, nmFuncionario, 
			cdCargo, cdFuncao, tpSituacaoFuncionario, cdSetor, nrCpf, true);
	}
	}

	/**
	 * Andresa Vargas
	 * 
	 * FindCargo
	 * 
	 * @param criteria
	 * @return
	 */
	public List findCargo(TypedFlatMap criteria){
		return rhCargoService.findByOrder(criteria);
	}
	
	public List findLookupFilial(Map criteria) {
    	List list = this.getFilialService().findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		Filial filial = (Filial)iter.next();
    		Map map = new HashMap();

       		map.put("idFilial", filial.getIdFilial());    		
    		map.put("sgFilial", filial.getSgFilial());
    		map.put("nmFantasia", filial.getPessoa().getNmFantasia());
    		retorno.add(map);
    	}
    	return retorno;
	}
	
	public List findLookupRHFuncao(Map criteria) {
		List list = getRhFuncaoService().findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = list.iterator(); iter.hasNext();) {
    		RHFuncao rhFuncao = (RHFuncao)iter.next();
    		Map map = new HashMap();

       		map.put("codigoFuncao", rhFuncao.getCodigo());    		
    		map.put("idCodigo", rhFuncao.getIdCodigo());
    		map.put("nmFuncao", rhFuncao.getNome());
    		retorno.add(map);
    	}
    	return retorno;
	}
	
	public RHCargoService getRhCargoService() {
		return rhCargoService;
	}

	public void setRhCargoService(RHCargoService rhCargoService) {
		this.rhCargoService = rhCargoService;
	}

	public UsuarioService getUsuarioService() {
		return usuarioService;
	}

	public void setUsuarioService(UsuarioService usuarioService) {
		this.usuarioService = usuarioService;
	}

	public ConfiguracoesFacade getConfiguracoesFacade() {
		return configuracoesFacade;
	}

	public void setConfiguracoesFacade(ConfiguracoesFacade configuracoesFacade) {
		this.configuracoesFacade = configuracoesFacade;
	}

	public FilialService getFilialService() {
		return filialService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public RHFuncaoService getRhFuncaoService() {
		return rhFuncaoService;
	}

	public void setRhFuncaoService(RHFuncaoService rhFuncaoService) {
		this.rhFuncaoService = rhFuncaoService;
	}




}
