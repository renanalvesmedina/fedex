package com.mercurio.lms.contasreceber.swt.action;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.report.ReportActionSupport;
import com.mercurio.adsm.framework.report.ReportExecutionManager;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.service.ConteudoParametroFilialService;
import com.mercurio.lms.configuracoes.model.service.ParametroGeralService;
import com.mercurio.lms.contasreceber.report.EmitirFaturasNacionaisService;
import com.mercurio.lms.expedicao.model.service.MonitoramentoDocEletronicoService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.session.SessionUtils;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contasreceber.swt.emitirFaturasNacionaisAction"
 */

public class EmitirFaturasNacionaisAction extends ReportActionSupport {

	private FilialService filialService;
	private MonitoramentoDocEletronicoService monitoramentoDocEletronicoService;
	private ConteudoParametroFilialService conteudoParametroFilialService;
	private ReportExecutionManager reportExecutionManager;
	private ParametroGeralService parametroGeralService;
	
	public Map executeSWT(TypedFlatMap parameters) throws Exception {
		Map result = new HashMap<String,Object>();
		File reportFile = execute(parameters);
		reportExecutionManager.generateReportLocator(reportFile);
		
		FileInputStream  fi = new FileInputStream(reportFile);
		final ByteArrayOutputStream buffer = new ByteArrayOutputStream();
		byte[] temp = new byte[1024];
		int read;
		while((read = fi.read(temp)) >= 0){
		   buffer.write(temp, 0, read);
		}
		result.put("File", buffer.toByteArray());
		result.put("FileName", reportFile.getName());
	    return result;
	}
	
	public Integer findQtdQuebraFatura(){
		Integer qtdQuebra = 0;
		
		qtdQuebra = ((BigDecimal) parametroGeralService.findConteudoByNomeParametro("QT_QUEBRA_CTES_FATURA", false)).intValue();
		
		return qtdQuebra;
	}
	
	public Map executeEmitirCTE(TypedFlatMap parameters){
		Map result = new HashMap<String,Object>();
		
		EmitirFaturasNacionaisService emitirFaturasNacionaisService = (EmitirFaturasNacionaisService)getReportServiceSupport();
		List<Long> faturas = emitirFaturasNacionaisService.findFaturasByCriteria(parameters);
		
		Integer nrVias = null;
		Object param = conteudoParametroFilialService.findConteudoByNomeParametro(SessionUtils.getFilialSessao().getIdFilial(), "NRO_VIAS_CTE", false);
		if (param != null){
			nrVias = ((BigDecimal) param).intValue();
		}else{
			nrVias = Integer.valueOf(1);
		}
		
		result.put("nrVias", nrVias);
		result.put("ctes", monitoramentoDocEletronicoService.findByListFatura(faturas,null));
		result.put("quebra",findQtdQuebraFatura());
		return result; 
	}
	

	public void setEmitirFaturasNacionaisService(EmitirFaturasNacionaisService emitirFaturasNacionaisService) {
		this.reportServiceSupport = emitirFaturasNacionaisService;
	}
	
	@SuppressWarnings("rawtypes")
	public List findLookupFilial(TypedFlatMap criteria) {
		return filialService.findLookup(criteria);
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

    /**
     * Busca a filial do usuario logado
     * @return Filial
     */
    public Filial findFilialUsuario(){
    	return SessionUtils.getFilialSessao();
    } 
	
	public void setMonitoramentoDocEletronicoService(
            MonitoramentoDocEletronicoService monitoramentoDocEletronicoService) {
    	this.monitoramentoDocEletronicoService = monitoramentoDocEletronicoService;
    }

	public void setConteudoParametroFilialService(
            ConteudoParametroFilialService conteudoParametroFilialService) {
    	this.conteudoParametroFilialService = conteudoParametroFilialService;
    }

	public void setReportExecutionManager(
            ReportExecutionManager reportExecutionManager) {
    	this.reportExecutionManager = reportExecutionManager;
    }

	public ParametroGeralService getParametroGeralService() {
		return parametroGeralService;
	}

	public void setParametroGeralService(ParametroGeralService parametroGeralService) {
		this.parametroGeralService = parametroGeralService;
	}

}