package com.mercurio.lms.contasreceber.swt.action;

import static com.mercurio.lms.expedicao.util.ConstantesExpedicao.CONHECIMENTO_NACIONAL;
import static com.mercurio.lms.expedicao.util.ConstantesExpedicao.NOTA_FISCAL_SERVICO;
import static com.mercurio.lms.expedicao.util.ConstantesExpedicao.NOTA_FISCAL_TRANSPORTE;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.Moeda;
import com.mercurio.lms.configuracoes.model.Servico;
import com.mercurio.lms.configuracoes.model.service.MoedaService;
import com.mercurio.lms.contasreceber.model.Desconto;
import com.mercurio.lms.contasreceber.model.DevedorDocServFat;
import com.mercurio.lms.contasreceber.model.MotivoDesconto;
import com.mercurio.lms.contasreceber.model.param.DevedorDocServFatLookupParam;
import com.mercurio.lms.contasreceber.model.service.DescontoService;
import com.mercurio.lms.contasreceber.model.service.DevedorDocServFatLookUpService;
import com.mercurio.lms.contasreceber.model.service.DevedorDocServFatService;
import com.mercurio.lms.contasreceber.model.service.MotivoDescontoService;
import com.mercurio.lms.expedicao.model.Conhecimento;
import com.mercurio.lms.expedicao.model.NotaFiscalServico;
import com.mercurio.lms.expedicao.model.service.DoctoServicoService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.service.ClienteService;
import com.mercurio.lms.workflow.model.service.WorkflowPendenciaService;



/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contasreceber.swt.manterDescontosAction"
 */
public class ManterDescontosAction extends CrudAction {
    
    private MotivoDescontoService motivoDescontoService;
    private ClienteService clienteService;
    private FilialService filialService;
    private DoctoServicoService doctoServicoService;
    private WorkflowPendenciaService workflowPendenciaService;
    private MoedaService moedaService;
    private DevedorDocServFatService devedorDocServFatService;
    private DevedorDocServFatLookUpService devedorDocServFatLookUpService;
    private DescontoService descontoService;
    
    /**
     * Método de pesquisa da grid
     * @param criteria Critérios de pesquisa
     * @return Dados da listagem e de paginação
     */
    public ResultSetPage findPaginated(Map criteria) {        
        ResultSetPage rsp = descontoService.findPaginated(prepareCriteria(criteria));
        List<Object[]> descontos = rsp.getList();
        if (descontos != null) {
        	List<Map<String, Object>> result = new ArrayList<Map<String,Object>>();
        	for (Object[] desconto : descontos) {
				Map<String, Object> mapDesconto = new HashMap<String, Object>();
				mapDesconto.put("idDesconto", (Long) desconto[0]);
	            mapDesconto.put("clienteResponsavel",FormatUtils.formatIdentificacao((String)desconto[2],(String)desconto[1]) + " - " + (String) desconto[3]);
	            mapDesconto.put("tpDoctoServico",(String) desconto[9]);            
	            mapDesconto.put("filialNumeroDocumento", FormatUtils.formatAndConcatBySgFilialAndNrConhecimento((String)desconto[5],Long.valueOf((String)desconto[6])));
	            mapDesconto.put("tpDocumentoServico", (String) desconto[9]);
	            mapDesconto.put("sgFilialOrigem", (String)desconto[5]);
	            mapDesconto.put("nrDocumentoServico", FormatUtils.formataNrDocumento((String)desconto[6],(String) desconto[4]));
	            mapDesconto.put("motivo", (String) desconto[7]);
	            mapDesconto.put("tpSituacaoAprovacao", (String) desconto[8]);
				result.add(mapDesconto);
			}
        	rsp.setList(result);
        }
        return rsp;
    }
    
    /**
     * Método que conta quantos dados serão apresentados na listagem
     * @param tfm Critérios de pesquisa
     * @return Inteiro informando a quantidade de registros exibidos na grid
     */
    public Integer getRowCount(Map criteria) {        
        return descontoService.getRowCount(prepareCriteria(criteria));
    }
    
    /**
     * Valida o valor de desconto que não pode ser maior que o valor do documento e calcula o 
     * percentual do desconto
     * @param tfm Valor do desconto (vlDesconto) e o valor do documento (vlDocumento)
     * @return Valor o percentual de desconto
     */
    public TypedFlatMap validateValores(TypedFlatMap tfm){
        
        BigDecimal vlDocumento = tfm.getBigDecimal("vlDocumento");
        BigDecimal vlDesconto  = tfm.getBigDecimal("vlDesconto");
        
        BigDecimal percentual = descontoService.calculaPorcentagemDesconto(vlDesconto, vlDocumento);
        
        TypedFlatMap tfmRetorno = new TypedFlatMap();
        
        tfmRetorno.put("percentualDesconto",percentual.setScale(3,BigDecimal.ROUND_DOWN));
        
        return tfmRetorno; 
        
    }
    
    /**
     * Busca a lista de motivos de desconto para a combo de motivos desconto
     * @param criteira Critérios da pesquisa
     * @return Lista de Motivos do Desconto
     */
    public List<Map<String, Object>> findComboMotivoDesconto(Map criteria) {
    	List<MotivoDesconto> motivos = motivoDescontoService.findMotivoDescontoByTpSituacaoAndIdDesconto((String) criteria.get("tpSituacao"), (Long) criteria.get("idDesconto"));  
    	
		if (motivos != null) {
			List<Map<String, Object>> result = new ArrayList<Map<String,Object>>();
			for (MotivoDesconto motivo : motivos) {
				StringBuilder dsMotivoDesconto = new StringBuilder()
				.append(motivo.getCdMotivoDesconto())
				.append(" - ")
				.append(motivo.getDsMotivoDesconto().getValue());
				
				Map<String, Object> mapMotivo = new HashMap<String, Object>();
				mapMotivo.put("idMotivoDesconto", motivo.getIdMotivoDesconto());
				mapMotivo.put("dsMotivoDesconto", dsMotivoDesconto.toString());
				
				result.add(mapMotivo);
			}
			return result;
		}
		return null;
	}
    
    /**
	 * Remove um registro que esteja sendo detalhando no Manter Descontos
	 * 
	 * @param tfm
	 *            Identificador do Desconto
	 */
    public void removeById(TypedFlatMap tfm) {
        
        Boolean temPermissao = validatePermissaoDocumentoUsuario(tfm);
        
        String tpSituacaoAprovacao = tfm.getString("tpSituacaoAprovacao");

        
        if( temPermissao.booleanValue() ){
            //tpSituacaoAprovacao = 'E' - Em Aprovação
                    Desconto d = (Desconto) descontoService.findById(tfm.getLong("idDesconto"));
            if( tpSituacaoAprovacao.equals("E") ){
                	//Chamar a rotina : 39.01.03.05 - Cancelar Pendência
               	descontoService.cancelPendenciaDesconto(d);
                }
            }
        
        descontoService.removeById(tfm.getLong("idDesconto"));
    }    
    
    /**
     * Remove os registros selecionados na grid
     * @param ids Lista de ids dos registros selecionados
     *
     */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
        
        boolean temPermissao = false;
        
        List descontos = new ArrayList();
        
        for (Iterator iter = ids.iterator(); iter.hasNext();) {
            
            Long idDesconto = (Long) iter.next();            
            Desconto desconto = (Desconto) descontoService.findById(idDesconto);
            
            TypedFlatMap tfm = new TypedFlatMap();
            
            tfm.put("idDoctoServico",desconto.getDevedorDocServFat().getDoctoServico().getIdDoctoServico());
            tfm.put("idFilial",desconto.getDevedorDocServFat().getFilial().getIdFilial());
            
            temPermissao = validatePermissaoDocumentoUsuario(tfm).booleanValue();
            
            if( !temPermissao ){                
                return;         
            }            
            
            descontos.add(desconto);
            
        }
        
        for (Iterator iter = descontos.iterator(); iter.hasNext();) {
            
            Desconto desconto = (Desconto) iter.next();
            Long idDesconto = desconto.getIdDesconto();
            
            TypedFlatMap tfm = new TypedFlatMap();
            
            tfm.put("idDoctoServico",desconto.getDevedorDocServFat().getDoctoServico().getIdDoctoServico());
            tfm.put("idFilial",desconto.getDevedorDocServFat().getFilial().getIdFilial());
            
            if( tfm.getString("devedorDocServFat.doctoServico.tpDocumentoServico").equals("NFS") ){
            	if( desconto.getTpSituacaoAprovacao().getValue().equals("E") && desconto.getIdPendencia() != null ){//Em Aprovação
//              Chamar a rotina : 39.01.03.05 - Cancelar Pendência
            		workflowPendenciaService.cancelPendencia(desconto.getIdPendencia());
            }
            } else {
            	descontoService.cancelPendenciaDesconto(desconto);
            }
            
            idDesconto = desconto.getIdDesconto();
            desconto = null;
            
            descontoService.removeById(idDesconto);
            
        }
        
    }
    
    /**
     * Busca um registro de Desconto quando este é selecionado na lista da grid
     * @param id Identificador do registro de Desconto
     * @return Desconto encontrado na pesquisa
     */
    public Map<String, Object> findById(Long id) {
    	Map<String, Object> retorno = new HashMap<String, Object>();
    	
    	Desconto desconto = (Desconto) descontoService.findById(id);
    	
    	retorno.put("idDesconto", desconto.getIdDesconto());
    	retorno.put("tpDocumentoServico", desconto.getDevedorDocServFat().getDoctoServico().getTpDocumentoServico().getValue());
    	retorno.put("idFilialOrigem", desconto.getDevedorDocServFat().getDoctoServico().getFilialByIdFilialOrigem().getIdFilial());
    	retorno.put("sgFilialOrigem", desconto.getDevedorDocServFat().getDoctoServico().getFilialByIdFilialOrigem().getSgFilial());
    	retorno.put("idDoctoServico", desconto.getDevedorDocServFat().getIdDevedorDocServFat());
    	retorno.put("nrDoctoServico", desconto.getNrDocumento());
    	retorno.put("nrDocumento", desconto.getNrDocumento());
    	retorno.put("idFilialCobranca", desconto.getDevedorDocServFat().getFilial().getIdFilial());
    	retorno.put("sgFilialCobranca", desconto.getDevedorDocServFat().getFilial().getSgFilial());
    	retorno.put("nmFantasiaCobranca", desconto.getDevedorDocServFat().getFilial().getPessoa().getNmFantasia());
    	retorno.put("idMotivoDesconto", desconto.getMotivoDesconto().getIdMotivoDesconto());
    	retorno.put("idClienteResponsavel", desconto.getDevedorDocServFat().getCliente().getIdCliente());
    	retorno.put("nrIdentificacaoResponsavel", FormatUtils.formatIdentificacao(desconto.getDevedorDocServFat().getCliente().getPessoa()));
    	retorno.put("nmPessoaResponsavel", desconto.getDevedorDocServFat().getCliente().getPessoa().getNmPessoa());
    	retorno.put("tpSituacaoAprovacao", desconto.getTpSituacaoAprovacao().getValue());
    	retorno.put("vlDesconto", desconto.getVlDesconto());
    	retorno.put("idMoeda", desconto.getDevedorDocServFat().getDoctoServico().getMoeda().getIdMoeda());
    	retorno.put("siglaSimboloMoeda", desconto.getDevedorDocServFat().getDoctoServico().getMoeda().getSiglaSimbolo());
    	retorno.put("vlDevido", desconto.getDevedorDocServFat().getVlDevido());
    	retorno.put("percentualDesconto", desconto.getPercentualDesconto());
    	retorno.put("obDesconto", desconto.getObDesconto());
    	retorno.put("idDoctoServicoDevedorDocServFat", desconto.getDevedorDocServFat().getDoctoServico().getIdDoctoServico());
    	
    	if (desconto.getDevedorDocServFat().getDoctoServico().getServico() != null){
	    	retorno.put("devedorDocServFat.doctoServico.servico.idServico", desconto.getDevedorDocServFat().getDoctoServico().getServico().getIdServico());
	    	retorno.put("devedorDocServFat.doctoServico.servico.tpModal", desconto.getDevedorDocServFat().getDoctoServico().getServico().getTpModal().getValue());
	    	retorno.put("devedorDocServFat.doctoServico.servico.tpAbrangencia", desconto.getDevedorDocServFat().getDoctoServico().getServico().getTpAbrangencia().getValue());
    	}
    	
    	retorno.put("devedorDocServFat.doctoServico.idDoctoServico", desconto.getDevedorDocServFat().getDoctoServico().getIdDoctoServico());
    	
    	if (desconto.getIdPendencia() != null) {
    		retorno.put("idPendencia", desconto.getIdPendencia());
    	}
    	
    	//Se a filial de cobrança é a mesma que a filial da sessão
    	if (desconto.getDevedorDocServFat().getFilial().getIdFilial().equals(SessionUtils.getFilialSessao().getIdFilial())){
    		retorno.put("blDesabilitar", false);
    	} else {
    		retorno.put("blDesabilitar", true);
    	}
    	
    	return retorno;
    }
    
    /**
     * Salva um registro criado pelo detalhamento do Manter Desconto
     * @param data Dados do Desconto
     * @return Instância do Desconto salvo
     */
    public Serializable store(Map<String, Object> data) {
        BigDecimal vlDesconto = (BigDecimal) data.get("vlDesconto");
        BigDecimal vlDocumento = (BigDecimal) data.get("vlDevido");
        
        String tpDocumentoServico = (String) data.get("devedorDocServFat.doctoServico.tpDocumentoServico");
        Long idDoctoServico = (Long) data.get("devedorDocServFat.doctoServico.idDoctoServico");

        MotivoDesconto motivoDesconto = motivoDescontoService.findById((Long) data.get("idMotivoDesconto"));
        
        Long idFilialOrigem = null;
        idFilialOrigem = (Long) data.get("devedorDocServFat.doctoServico.filialByIdFilialOrigem.idFilial");
        if( idFilialOrigem == null ){
        	idFilialOrigem = (Long) data.get("devedorDocServFat.filialByIdFilialOrigem.idFilial");
        }
        
        Filial filialOrigem = filialService.findById(idFilialOrigem);
        
        Servico servico = new Servico();
        servico.setIdServico((Long) data.get("devedorDocServFat.doctoServico.servico.idServico"));
        servico.setTpModal(new DomainValue((String) data.get("devedorDocServFat.doctoServico.servico.tpModal")));
        servico.setTpAbrangencia(new DomainValue((String) data.get("devedorDocServFat.doctoServico.servico.tpAbrangencia")));
        
        Moeda moeda = moedaService.findById((Long) data.get("devedorDocServFat.doctoServico.moeda.idMoeda"));
        
        Cliente cliente = new Cliente();
        cliente.setIdCliente((Long) data.get("devedorDocServFat.cliente.idCliente"));
        
        Filial filialDevedor = new Filial();
        filialDevedor.setIdFilial((Long) data.get("devedorDocServFat.filial.idFilial"));
        
        DevedorDocServFat devedorDocServFat = new DevedorDocServFat();
        devedorDocServFat.setIdDevedorDocServFat((Long) data.get("devedorDocServFat.idDevedorDocServFat"));
        devedorDocServFat.setVlDevido(vlDocumento);
        devedorDocServFat.setCliente(cliente);        
        devedorDocServFat.setFilial(filialDevedor);
        
        if (NOTA_FISCAL_SERVICO.equals(tpDocumentoServico)) {
        	NotaFiscalServico nfs = new NotaFiscalServico();
            nfs.setIdDoctoServico(idDoctoServico);
            nfs.setFilialByIdFilialOrigem(filialOrigem);
            nfs.setTpDocumentoServico(new DomainValue(tpDocumentoServico));
            nfs.setMoeda(moeda);
            nfs.setServico(servico);
            devedorDocServFat.setDoctoServico(nfs);
        } else if (CONHECIMENTO_NACIONAL.equals(tpDocumentoServico) 
        		|| NOTA_FISCAL_TRANSPORTE.equals(tpDocumentoServico)) {
        	
        	Conhecimento conhecimento = new Conhecimento();
            conhecimento.setIdDoctoServico(idDoctoServico);
            conhecimento.setFilialByIdFilialOrigem(filialOrigem);
            conhecimento.setTpDocumentoServico(new DomainValue(tpDocumentoServico));
            conhecimento.setMoeda(moeda);
            conhecimento.setServico(servico);
            devedorDocServFat.setDoctoServico(conhecimento);
        }       
        
        Desconto desconto = new Desconto();
        if (data.get("idDesconto") != null) {
            desconto.setIdDesconto((Long) data.get("idDesconto"));
        }
        
        BigDecimal percentualDesconto = (BigDecimal) data.get("percentualDesconto");
        if (percentualDesconto == null) {
            percentualDesconto = descontoService.calculaPorcentagemDesconto(vlDesconto, vlDocumento);                
        }

        if (data.get("idPendencia") != null) {
	        desconto.setIdPendencia((Long) data.get("pendencia.idPendencia"));
        }

        desconto.setDevedorDocServFat(devedorDocServFat);
        desconto.setMotivoDesconto(motivoDesconto);
        desconto.setTpSituacaoAprovacao(new DomainValue((String) data.get("tpSituacaoAprovacao")));
        desconto.setVlDesconto(vlDesconto);
        desconto.setPercentualDesconto(percentualDesconto);
       desconto.setNrDocumento((String) data.get("nrDocumento"));
        
        if (StringUtils.isNotBlank((String) data.get("obDesconto"))) {
            desconto.setObDesconto((String) data.get("obDesconto"));
        }        
        
        descontoService.store(desconto);
        
        return mountMap(desconto);
    }
  
    /**
     * Verifica se o usuário logado possui permissões de acesso ao documento de serviço
     * @param tfm : idDoctoServico : Identificador do documento de serviço
     *              idFilial : Identificador da filial
     * @return <code>TRUE</code> Se o usuário logado possui permissões de acesso ao documento de serviço informado ou <code>FALSE</code> 
     *         caso contrário.
     */
    public Boolean validatePermissaoDocumentoUsuario(TypedFlatMap tfm){
        
        Long idDoctoServico = tfm.getLong("idDoctoServico");
        Long idFilial       = tfm.getLong("idFilial");

        return this.doctoServicoService.validatePermissaoDocumentoUsuario(idDoctoServico, idFilial);
    }
    
    /**
     * Busca os dados do responsável e o valor do documento
     * @param tfm Critérios de pesquisa
     * @return Desconto com os dados necessários aninhados
     */
    public Serializable findDadosClienteEValores(TypedFlatMap tfm){
    	TypedFlatMap mapRetorno = new TypedFlatMap();
    	
    	DevedorDocServFat devedorDocServFat = devedorDocServFatService.findByIdWithDocumento(tfm.getLong("idDevedorDocServFat"));
    	
    	mapRetorno.put("devedorDocServFat.filial.idFilial", devedorDocServFat.getFilial().getIdFilial());
    	mapRetorno.put("devedorDocServFat.filial.sgFilial", devedorDocServFat.getFilial().getSgFilial());
    	mapRetorno.put("devedorDocServFat.filial.pessoa.nmFantasia", devedorDocServFat.getFilial().getPessoa().getNmFantasia());
    	mapRetorno.put("devedorDocServFat.cliente.idCliente", devedorDocServFat.getCliente().getIdCliente());
    	mapRetorno.put("devedorDocServFat.cliente.pessoa.nrIdentificacao", FormatUtils.formatIdentificacao(devedorDocServFat.getCliente().getPessoa()));
    	mapRetorno.put("devedorDocServFat.cliente.pessoa.nmPessoa", devedorDocServFat.getCliente().getPessoa().getNmPessoa());
    	mapRetorno.put("devedorDocServFat.doctoServico.moeda.idMoeda", devedorDocServFat.getDoctoServico().getMoeda().getIdMoeda());
    	mapRetorno.put("devedorDocServFat.doctoServico.moeda.siglaSimbolo", devedorDocServFat.getDoctoServico().getMoeda().getSiglaSimbolo());
    	mapRetorno.put("devedorDocServFat.vlDevido", devedorDocServFat.getVlDevido());
    	
    	if (devedorDocServFat.getDoctoServico().getServico() != null) {
	    	mapRetorno.put("devedorDocServFat.doctoServico.servico.idServico", devedorDocServFat.getDoctoServico().getServico().getIdServico());
	    	mapRetorno.put("devedorDocServFat.doctoServico.servico.tpModal", devedorDocServFat.getDoctoServico().getServico().getTpModal().getValue());
	    	mapRetorno.put("devedorDocServFat.doctoServico.servico.tpAbrangencia", devedorDocServFat.getDoctoServico().getServico().getTpAbrangencia().getValue());
    	}
    	
    	mapRetorno.put("devedorDocServFat.doctoServico.idDoctoServico", devedorDocServFat.getDoctoServico().getIdDoctoServico());

        return mapRetorno;
    }
    
    /**
	 * Consulta a filial a partir dos criterios informados.
	 * 
	 * @param criteria criterios de pesquisa
	 * @return filiais que satisfaçam os critérios.
	 */
	public List<Map<String, Object>> findLookupFilial(Map criteria) {
		List<Filial> filiais = filialService.findLookup(criteria);
		if (filiais != null) {
			List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();
			for (Filial filial : filiais) {
				Map<String, Object> mapFilial = new HashMap<String, Object>();
				mapFilial.put("sgFilial", filial.getSgFilial());
				mapFilial.put("idFilial", filial.getIdFilial());
				mapFilial.put("nmFantasia", filial.getPessoa().getNmFantasia());
				result.add(mapFilial);
			}
			return result;
		}
		return null;
    }
	
    /**
     * Busca os clientes de acordo com os criterios informados.
     * 
     * @param criteria
     * @return
     */
	public List<Map<String, Object>> findLookupCliente(Map criteria) {
		List<Map<String, Object>> clientes = clienteService.findClienteByNrIdentificacao((String) criteria.get("nrIdentificacao"));
		if (clientes != null) {
			for(Map cliente : clientes) {
				cliente.remove("tpCliente");
				Map pessoa = (Map) cliente.remove("pessoa");
				if (pessoa != null) {
					cliente.put("nmPessoa", pessoa.get("nmPessoa"));
					cliente.put("nrIdentificacao", pessoa.remove("nrIdentificacaoFormatado"));
				}
			}
		}
		return clientes;
	}
    
    /**
	 * Retorna a lista de devedores a partir do tipo de documento informado. 
	 * O parametro tpDocumento é obrigatório!
	 * 
	 * @author José Rodrigo Moraes
	 * @since  26/06/2006
	 * 
	 * @param Long nrDocumento Número do documento informado
	 * @param String tpDocumento Tipo do Documento CTR - CRT - NFS e NFT
	 * @param Long idFilial Identificador da filial de origem associada ao documento de serviço
	 * @return Lista de dados para a lookup de documento de serviço do manter descontos
	 * 
	 */	
    public List<Map<String, Object>> findDevedorServDocFat(Map<String, Object> map){
    	Long idFilial = (Long) map.get("idFilial");	
		Long nrDocumento = (Long) map.get("nrDoctoServico");
		String tpDocumentoServico = (String) map.get("tpDocumentoServico");
		DevedorDocServFatLookupParam devedorDocServFatLookupParam = new DevedorDocServFatLookupParam();
		devedorDocServFatLookupParam.setIdFilial(idFilial);
		devedorDocServFatLookupParam.setNrDocumentoServico(nrDocumento);
		devedorDocServFatLookupParam.setTpDocumentoServico(tpDocumentoServico);
		
		List<Map<String, Object>> docsServ = devedorDocServFatLookUpService.findDevedorDocServFat(devedorDocServFatLookupParam, "LMS-36006");
		if (docsServ != null) {
			List<Map<String,Object>> result = new ArrayList<Map<String,Object>>();
			for (Map<String, Object> docServ : docsServ) {
				Map<String, Object> mapDocServ = new HashMap<String, Object>();
				mapDocServ.put("idDoctoServico", docServ.get("idDevedorDocServFat"));
				mapDocServ.put("nrDoctoServico", docServ.get("nrDoctoServico"));
				result.add(mapDocServ);
			}
			return result;
		}
		
		return null;
	}
    
	/**
	 * @author José Rodrigo Moraes
	 * @since  01/06/2006
     * 
     * Verifica se o documento de serviço informado está Emitido ou Bloqueado
     * @param tfm idDoctoServico Identificador do Documento de servico e tpDocumentoServico Tipo do documento de serviço
     * @return <code>true</code> se o documento de serviço está Emitido ou Bloqueado, caso contrário levanta a BusinessException LMS-36142
     * @exception com.mercurio.adsm.framework.BusinessException LMS-36142
     */
    public TypedFlatMap validateDoctoEmitidoBloqueado(TypedFlatMap tfm){
    	
    	Long idDoctoServico = tfm.getLong("idDoctoServico");    	
    	String tpDocumentoServico = tfm.getString("tpDocumentoServico.value");
    	
    	Boolean retorno = descontoService.validateDoctoEmitidoBloqueado(idDoctoServico, tpDocumentoServico);
    	
    	TypedFlatMap mapRetorno = new TypedFlatMap();
    	mapRetorno.put("_value", retorno);
    	
    	return mapRetorno;
    }
    
    /*
     * METODOS PRIVADOS
     */
    
    private TypedFlatMap mountMap(Desconto desconto){
    	TypedFlatMap retorno = new TypedFlatMap();
    	
    	retorno.put("idDesconto", desconto.getIdDesconto());
    	retorno.put("devedorDocServFat.doctoServico.tpDocumentoServico", desconto.getDevedorDocServFat().getDoctoServico().getTpDocumentoServico().getValue());
    	retorno.put("devedorDocServFat.doctoServico.filialByIdFilialOrigem.idFilial", desconto.getDevedorDocServFat().getDoctoServico().getFilialByIdFilialOrigem().getIdFilial());
    	retorno.put("devedorDocServFat.doctoServico.filialByIdFilialOrigem.sgFilial", desconto.getDevedorDocServFat().getDoctoServico().getFilialByIdFilialOrigem().getSgFilial());
    	retorno.put("devedorDocServFat.idDevedorDocServFat", desconto.getDevedorDocServFat().getIdDevedorDocServFat());
    	retorno.put("devedorDocServFat.doctoServico.nrDoctoServico", FormatUtils.formataNrDocumento(desconto.getDevedorDocServFat().getDoctoServico().getNrDoctoServico().toString(), desconto.getDevedorDocServFat().getDoctoServico().getTpDocumentoServico().getValue()));
    	retorno.put("nrDocumento", FormatUtils.formataNrDocumento(desconto.getDevedorDocServFat().getDoctoServico().getNrDoctoServico().toString(), desconto.getDevedorDocServFat().getDoctoServico().getTpDocumentoServico().getValue()));
    	retorno.put("tpDocumentoHidden", desconto.getDevedorDocServFat().getDoctoServico().getTpDocumentoServico().getValue());
    	retorno.put("tpDocumentoServicoHidden", desconto.getDevedorDocServFat().getDoctoServico().getTpDocumentoServico().getValue());
    	retorno.put("devedorDocServFat.filial.idFilial", desconto.getDevedorDocServFat().getFilial().getIdFilial());
    	retorno.put("devedorDocServFat.filial.sgFilial", desconto.getDevedorDocServFat().getFilial().getSgFilial());
    	retorno.put("devedorDocServFat.filial.pessoa.nmFantasia", desconto.getDevedorDocServFat().getFilial().getPessoa().getNmFantasia());
    	retorno.put("motivoDesconto.idMotivoDesconto", desconto.getMotivoDesconto().getIdMotivoDesconto());
    	retorno.put("devedorDocServFat.cliente.idCliente", desconto.getDevedorDocServFat().getCliente().getIdCliente());
    	retorno.put("devedorDocServFat.cliente.pessoa.nrIdentificacao", FormatUtils.formatIdentificacao(desconto.getDevedorDocServFat().getCliente().getPessoa()));
    	retorno.put("devedorDocServFat.cliente.pessoa.nmPessoa", desconto.getDevedorDocServFat().getCliente().getPessoa().getNmPessoa());
    	retorno.put("tpSituacaoAprovacao", desconto.getTpSituacaoAprovacao().getValue());
    	retorno.put("vlDesconto", desconto.getVlDesconto());
    	retorno.put("devedorDocServFat.doctoServico.moeda.idMoeda", desconto.getDevedorDocServFat().getDoctoServico().getMoeda().getIdMoeda());
    	retorno.put("devedorDocServFat.doctoServico.moeda.siglaSimbolo", desconto.getDevedorDocServFat().getDoctoServico().getMoeda().getSiglaSimbolo());
    	retorno.put("devedorDocServFat.vlDevido", desconto.getDevedorDocServFat().getVlDevido());
    	retorno.put("percentualDesconto", desconto.getPercentualDesconto());
    	retorno.put("obDesconto", desconto.getObDesconto());
    	
    	if (desconto.getDevedorDocServFat().getDoctoServico().getServico() != null){
	    	retorno.put("devedorDocServFat.doctoServico.servico.idServico", desconto.getDevedorDocServFat().getDoctoServico().getServico().getIdServico());
	    	
	    	if (desconto.getDevedorDocServFat().getDoctoServico().getServico().getTpModal() != null){
	    		retorno.put("devedorDocServFat.doctoServico.servico.tpModal", desconto.getDevedorDocServFat().getDoctoServico().getServico().getTpModal().getValue());
	    	}
	    	
	    	if (desconto.getDevedorDocServFat().getDoctoServico().getServico().getTpAbrangencia() != null){
	    		retorno.put("devedorDocServFat.doctoServico.servico.tpAbrangencia", desconto.getDevedorDocServFat().getDoctoServico().getServico().getTpAbrangencia().getValue());
	    	}
    	}
    	
    	retorno.put("devedorDocServFat.doctoServico.idDoctoServico", desconto.getDevedorDocServFat().getDoctoServico().getIdDoctoServico());
    	
    	if (desconto.getIdPendencia() != null){
    		retorno.put("idPendencia", desconto.getIdPendencia());
    	}

    	return retorno;
    }
    
    private TypedFlatMap prepareCriteria(Map criteria) {
    	TypedFlatMap result = new TypedFlatMap();
    	result.put("_currentPage", criteria.get("_currentPage"));
		result.put("_pageSize", criteria.get("_pageSize"));
		result.put("_order", criteria.get("_order"));
    	result.put("devedorDocServFat.idDevedorDocServFat", criteria.get("idDoctoServico"));
    	result.put("devedorDocServFat.doctoServico.tpDocumentoServico", criteria.get("tpDocumentoServico"));
    	result.put("devedorDocServFat.doctoServico.filialByIdFilialOrigem.idFilial", criteria.get("idFilialOrigem"));
    	result.put("motivoDesconto.idMotivoDesconto", criteria.get("idMotivoDesconto"));
    	result.put("devedorDocServFat.cliente.idCliente", criteria.get("idClienteResponsavel"));
    	result.put("situacaoAprovacao", criteria.get("situacaoAprovacao"));
    	
    	Map<String, Object> filialCobranca = new HashMap<String, Object>();
    	filialCobranca.put("idFilial", criteria.get("idFilialCobranca"));
    	result.put("filialCobranca", filialCobranca);
    	
    	return result;
    }
    
    public TypedFlatMap findValorMinimoDocumentoDesconto(){
    	TypedFlatMap result = new TypedFlatMap();
    	return (TypedFlatMap) result.put("valorMinimoDocumentoDesconto", descontoService.findValorMinimoDocumentoDesconto());
    }
    
    /*
     * GETTERS E SETTERS
     */
    
    public void setDescontoService(DescontoService descontoService){
        this.descontoService = descontoService;
    }
    public void setMotivoDescontoService(MotivoDescontoService motivoDescontoService) {
        this.motivoDescontoService = motivoDescontoService;
    }
    public void setClienteService(ClienteService clienteService) {
        this.clienteService = clienteService;
    }
    public void setFilialService(FilialService filialService) {
        this.filialService = filialService;
    }
    public void setDoctoServicoService(DoctoServicoService doctoServicoService) {
        this.doctoServicoService = doctoServicoService;
    }
    public void setWorkflowPendenciaService(WorkflowPendenciaService workflowPendenciaService) {
        this.workflowPendenciaService = workflowPendenciaService;
    }
    public void setMoedaService(MoedaService moedaService) {
        this.moedaService = moedaService;
    }
	public void setDevedorDocServFatLookUpService(DevedorDocServFatLookUpService devedorDocServFatLookUpService) {
		this.devedorDocServFatLookUpService = devedorDocServFatLookUpService;
	}
	public void setDevedorDocServFatService(DevedorDocServFatService devedorDocServFatService) {
		this.devedorDocServFatService = devedorDocServFatService;
	}
}