package com.mercurio.lms.contasreceber.swt.action;

import static com.mercurio.lms.expedicao.util.ConstantesExpedicao.RECIBO_REEMBOLSO;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.joda.time.DateTime;
import org.joda.time.YearMonthDay;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.PaginatedQuery;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.report.ReportExecutionManager;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.UsuarioLMS;
import com.mercurio.lms.contasreceber.model.AgendaTransferencia;
import com.mercurio.lms.contasreceber.model.BloqueioFaturamento;
import com.mercurio.lms.contasreceber.model.Desconto;
import com.mercurio.lms.contasreceber.model.DevedorDocServFat;
import com.mercurio.lms.contasreceber.model.Fatura;
import com.mercurio.lms.contasreceber.model.MotivoOcorrencia;
import com.mercurio.lms.contasreceber.model.Transferencia;
import com.mercurio.lms.contasreceber.model.service.AgendaTransferenciaService;
import com.mercurio.lms.contasreceber.model.service.BloqueioFaturamentoService;
import com.mercurio.lms.contasreceber.model.service.DescontoService;
import com.mercurio.lms.contasreceber.model.service.DevedorDocServFatService;
import com.mercurio.lms.contasreceber.model.service.FaturaService;
import com.mercurio.lms.contasreceber.model.service.ItemTransferenciaService;
import com.mercurio.lms.contasreceber.model.service.MotivoOcorrenciaService;
import com.mercurio.lms.contasreceber.model.service.TransferenciaService;
import com.mercurio.lms.contasreceber.report.ExportarBloqueioFaturamentoService;
import com.mercurio.lms.expedicao.model.Conhecimento;
import com.mercurio.lms.expedicao.model.DoctoServico;
import com.mercurio.lms.expedicao.model.NotaFiscalServico;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.expedicao.model.service.DoctoServicoService;
import com.mercurio.lms.expedicao.model.service.NotaFiscalServicoService;
import com.mercurio.lms.expedicao.util.ConstantesExpedicao;
import com.mercurio.lms.util.AliasToTypedFlatMapResultTransformer;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.JTDateTimeUtils;
import com.mercurio.lms.util.session.SessionUtils;


/**
 * Generated by: ADSM ActionGenerator
 *
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contasreceber.swt.manterBloqueioFaturamentoAction"
 */

public class ManterBloqueioFaturamentoAction extends CrudAction {

	private BloqueioFaturamentoService bloqueioFaturamentoService;
	private DevedorDocServFatService devedorDocServFatService;
	private DescontoService descontoService;
	private ConhecimentoService conhecimentoService;
	private NotaFiscalServicoService notaFiscalServicoService;
	private ItemTransferenciaService itemTransferenciaService;
	private TransferenciaService transferenciaService;
	private AgendaTransferenciaService agendaTransferenciaService;
	private DoctoServicoService doctoServicoService;
	private MotivoOcorrenciaService motivoOcorrenciaService;
	private FaturaService faturaService;

	private ReportExecutionManager reportExecutionManager;
	private ExportarBloqueioFaturamentoService exportarBloqueioFaturamentoService;

	public Serializable desbloquearFaturamento(Map criteria) {
		Long idBloqueioFaturamento = (Long)criteria.get("idBloqueioFaturamento");

    	BloqueioFaturamento bloqueioFaturamento = bloqueioFaturamentoService.findById(idBloqueioFaturamento);

		UsuarioLMS usuario = new UsuarioLMS();
		usuario.setIdUsuario(SessionUtils.getUsuarioLogado().getIdUsuario());

		bloqueioFaturamento.setUsuarioDesbloqueio(usuario);
		bloqueioFaturamento.setDhDesbloqueio(JTDateTimeUtils.getDataHoraAtual());

    	return bloqueioFaturamentoService.store(bloqueioFaturamento);
	}


	@ParametrizedAttribute(type = java.lang.Long.class)
	public void desbloquearFaturamentoByIds(List<Long> ids) {
		for (Long id : ids) {
			if (validarDesbloqueio(id)) {
				Map map = new HashMap();
				map.put("idBloqueioFaturamento", id);
				desbloquearFaturamento(map);
			}
		}
	}


    public void removeById(Long id) {
    	bloqueioFaturamentoService.removeById(id);
    }


    @SuppressWarnings({ "rawtypes", "unchecked" })
	@Override
    public ResultSetPage findPaginated(Map criteria) {
    	if (criteria.get("idFatura") != null) {
    		Fatura fatura = faturaService.findById((Long)criteria.get("idFatura"));
    		if (!"CA".equals(fatura.getTpSituacaoFatura().getValue()))
    			throw new BusinessException("LMS-36265"); 
    	}
    	
		return bloqueioFaturamentoService.findPaginated(new PaginatedQuery(criteria));
	}

    public void findDesbloquearTudo(Map criteria){
    	if (criteria.get("idFatura") != null) {
    		Fatura fatura = faturaService.findById((Long)criteria.get("idFatura"));
    		if (!"CA".equals(fatura.getTpSituacaoFatura().getValue()))
    			throw new BusinessException("LMS-36265"); 
    	}

    	List<Map<String, Object>> listBloqueioFaturamento = bloqueioFaturamentoService.find(criteria);
    	List<Long> listIds = new ArrayList<Long>();
    	
    	for(int i = 0; i < listBloqueioFaturamento.size(); i++){
    		listIds.add((Long)listBloqueioFaturamento.get(i).get("idBloqueioFaturamento"));
    	}
    	
    	desbloquearFaturamentoByIds(listIds);
    }


    @SuppressWarnings("rawtypes")
	public Map findById(Long id) {
    	BloqueioFaturamento bloqueio = bloqueioFaturamentoService.findById(id);
    	Map mapped = new HashMap();

    	mapped.put("idBloqueioFaturamento", bloqueio.getIdBloqueioFaturamento());
    	mapped.put("tpDocumentoServico", bloqueio.getDevedorDocServFat().getDoctoServico().getTpDocumentoServico().getValue());
    	mapped.put("sgFilialOrigem", bloqueio.getDevedorDocServFat().getDoctoServico().getFilialByIdFilialOrigem().getSgFilial());
    	mapped.put("idDoctoServico", bloqueio.getDevedorDocServFat().getDoctoServico().getIdDoctoServico());
    	mapped.put("nrDoctoServico", bloqueio.getDevedorDocServFat().getDoctoServico().getNrDoctoServico());
    	mapped.put("dtPrevisao", bloqueio.getDtPrevisao());
    	mapped.put("dsBloqueio", bloqueio.getDsBloqueio());
    	mapped.put("dtBloqueio", bloqueio.getDhBloqueio());
    	mapped.put("dtDesbloqueio", bloqueio.getDhDesbloqueio());
    	mapped.put("nmUsuarioBloqueio", bloqueio.getUsuarioBloqueio().getUsuarioADSM().getNmUsuario());
    	
    	if (bloqueio.getUsuarioDesbloqueio() != null)
    		mapped.put("nmUsuarioDesbloqueio", bloqueio.getUsuarioDesbloqueio().getUsuarioADSM().getNmUsuario());
    	
    	mapped.put("idMotivoOcorrencia", bloqueio.getMotivoOcorrencia().getIdMotivoOcorrencia());

    	return mapped;
    }


    public Serializable store(TypedFlatMap bean) {

    	validarBloqueio(bean);

    	BloqueioFaturamento bloqueioFaturamento = null;
    	if (bean.getLong("idBloqueioFaturamento") != null) {
    		bloqueioFaturamento = bloqueioFaturamentoService.findById(bean.getLong("idBloqueioFaturamento"));
    	} else {
    		bloqueioFaturamento = new BloqueioFaturamento();
    	UsuarioLMS usuario = new UsuarioLMS();
    	usuario.setIdUsuario(SessionUtils.getUsuarioLogado().getIdUsuario());
    	bloqueioFaturamento.setUsuarioBloqueio(usuario);
    		bloqueioFaturamento.setDhBloqueio(JTDateTimeUtils.getDataHoraAtual());
    	}

    	MotivoOcorrencia motivoOcorrencia = new MotivoOcorrencia();
    	motivoOcorrencia.setIdMotivoOcorrencia(bean.getLong("idMotivoOcorrencia"));
    	bloqueioFaturamento.setMotivoOcorrencia(motivoOcorrencia);

    	bloqueioFaturamento.setDsBloqueio(bean.getString("dsBloqueio"));
    	bloqueioFaturamento.setDtPrevisao(new YearMonthDay(bean.get("dtPrevisao")));
    	bloqueioFaturamento.setDevedorDocServFat(findDevedorDocServFatByDoctoServico(bean.getLong("idDoctoServico")));

    	bloqueioFaturamentoService.store(bloqueioFaturamento);
    	
    	return bloqueioFaturamento;
    }


    private void validarBloqueio(TypedFlatMap bean) {
		DateTime newDate = new DateTime(bean.get("dtPrevisao").toString());
		DateTime date = new DateTime(JTDateTimeUtils.getDataAtual().toString());

		if (newDate.isBefore(date) || newDate.isAfter(date.plusDays(30)))
			throw new BusinessException("LMS-36263");

		DevedorDocServFat devedor = getDevedorDocServFatService().findById(
				findDevedorDocServFatByDoctoServico(bean.getLong("idDoctoServico")).getIdDevedorDocServFat()
		);
		Long idDevedorDocServFat = devedor.getIdDevedorDocServFat();
		DoctoServico doctoServico = getDoctoServicoService().findById(bean.getLong("idDoctoServico"));
		bean.put("idDevedorDocFat", idDevedorDocServFat);

		List<BloqueioFaturamento> result = getBloqueioFaturamentoService().findBloqueioFaturamentoAtivo(idDevedorDocServFat, bean.getLong("idBloqueioFaturamento"));
		if (result != null && result.size() > 0) {
			throw new BusinessException("LMS-36260", new Object[]{result.get(0).getDevedorDocServFat().getDoctoServico().getFilialByIdFilialOrigem().getSgFilial(), result.get(0).getDevedorDocServFat().getDoctoServico().getNrDoctoServico()});
		}

		if (!devedor.getFilial().getIdFilial().equals(SessionUtils.getFilialSessao().getIdFilial())
			&& !SessionUtils.isFilialSessaoMatriz()) {
			throw new BusinessException("LMS-36264");
		}

		List tipos = Arrays.asList(new String[]{"P", "C"});
		if (!tipos.contains(devedor.getTpSituacaoCobranca().getValue())) {
			throw new BusinessException("LMS-36006");
		}

		Desconto desconto = getDescontoService().findByDevedorDocServFat(idDevedorDocServFat);
		if (desconto != null) {
			if (desconto.getTpSituacaoAprovacao() != null && !"A".equals(desconto.getTpSituacaoAprovacao()))
				throw new BusinessException("LMS-36010");
		}

		tipos = Arrays.asList(new String[]{"CTR", "CTE", "NFT", "NTE"});
		if (tipos.contains(doctoServico.getTpDocumentoServico().getValue())) {
			Conhecimento conhecimento = getConhecimentoService().findById(doctoServico.getIdDoctoServico());
			tipos = Arrays.asList(new String[]{"E", "B"});
			if (!tipos.contains(conhecimento.getTpSituacaoConhecimento().getValue()))
				throw new BusinessException("LMS-36007");
		}

		tipos = Arrays.asList(new String[]{"NFS", "NSE"});
		if (tipos.contains(doctoServico.getTpDocumentoServico().getValue())) {
			NotaFiscalServico notaFiscalServico = getNotaFiscalServicoService().findById(doctoServico.getIdDoctoServico());
			tipos = Arrays.asList(new String[]{"E"});
			if (!tipos.contains(notaFiscalServico.getTpSituacaoNf().getValue()))
				throw new BusinessException("LMS-36007");
		}

		List<Map> lista = getItemTransferenciaService().findItemTransferenciaByDevedorDocServFat(idDevedorDocServFat);
		if (lista.size() > 0) {
			for (int i = 0; i < lista.size(); i++) {
				Transferencia trans = getTransferenciaService().findById((Long)lista.get(i).get("idTransferencia"));

				if (trans != null && "PR".equals(trans.getTpSituacaoTransferencia().getValue()))
					throw new BusinessException("LMS-36019");
			}
		}

		lista = getAgendaTransferenciaService().findByDevedorDocServFat(idDevedorDocServFat);
		if (lista.size() > 0) {
			AgendaTransferencia agenda = (AgendaTransferencia)lista.get(0);
			if (agenda != null)
				throw new BusinessException("LMS-36022", new Object[]{agenda.getFilialByIdFilialOrigem().getIdFilial()});
		}
    }


    public Boolean validarDesbloqueio(Long id) {
    	if (id == null) {
    		return false;
    	}

    	BloqueioFaturamento bloqueioFaturamento = bloqueioFaturamentoService.findById(id);

    	if (bloqueioFaturamento.getDhBloqueio() == null) {
    		return false;
    	}

    	if (bloqueioFaturamento.getDhDesbloqueio() != null) {
    		return false;
    	}

    	DevedorDocServFat devedor = getDevedorDocServFatService().findById(bloqueioFaturamento.getDevedorDocServFat().getIdDevedorDocServFat());
    	if (!devedor.getFilial().getIdFilial().equals(SessionUtils.getFilialSessao().getIdFilial())
			&& !SessionUtils.isFilialSessaoMatriz()) {
    		return false;
    	}

    	return true;
    }


    public Boolean validarDesbloqueio(Map map) {
		return validarDesbloqueio((Long)map.get("idBloqueioFaturamento"));
    }


    private DevedorDocServFat findDevedorDocServFatByDoctoServico(Long id) {
    	List result = getDevedorDocServFatService().findDevedorDocServFatByDoctoServico(id);
    	DevedorDocServFat devedorDocServFat = new DevedorDocServFat();
    	devedorDocServFat.setIdDevedorDocServFat((Long)((Map)result.get(0)).get("idDevedorDocServFat"));
    	return devedorDocServFat;
    }
    
    public List findDoctoServico(Map criteria) {
		Long nrConhecimento = (Long) criteria.get("nrDoctoServico");  
		Long idFilialOrigem = (Long) criteria.get("idFilial");
		String tpDocumento = (String) criteria.get("tpDocumentoServico");
		List<Map<String, Object>> result;
		if(ConstantesExpedicao.CONHECIMENTO_NACIONAL.equals(tpDocumento) || ConstantesExpedicao.CONHECIMENTO_ELETRONICO.equals(tpDocumento) || ConstantesExpedicao.NOTA_FISCAL_TRANSPORTE.equals(tpDocumento) || ConstantesExpedicao.NOTA_FISCAL_TRANSPORTE_ELETRONICA.equals(tpDocumento)){
			result = conhecimentoService.findByNrConhecimentoIdFilialOrigem(nrConhecimento, idFilialOrigem, "", tpDocumento);
		} else if(ConstantesExpedicao.NOTA_FISCAL_SERVICO.equals(tpDocumento) || ConstantesExpedicao.NOTA_FISCAL_SERVICO_ELETRONICA.equals(tpDocumento)) {
			result = notaFiscalServicoService.findByNrNotaFiscalServicoIdFilialOrigem(nrConhecimento, idFilialOrigem, tpDocumento);
	    } else {
	    	throw new IllegalArgumentException("tpDocumento nao mapeado na action");
	    }
		return result;
	}
    
	public String exportar(Map parameters) throws Exception{
		return reportExecutionManager.generateReportLocator(exportarBloqueioFaturamentoService, parameters);
	}


    public List findMotivoOcorrenciaBloqueio(Map criteria) {
    	return motivoOcorrenciaService.findMotivoOcorrenciaDeBloqueio();
    }


	public void setBloqueioFaturamentoService(BloqueioFaturamentoService bloqueioFaturamentoService) {
		super.defaultService = bloqueioFaturamentoService;
		this.bloqueioFaturamentoService = bloqueioFaturamentoService;
	}


	public BloqueioFaturamentoService getBloqueioFaturamentoService() {
		return bloqueioFaturamentoService;
	}


	public DevedorDocServFatService getDevedorDocServFatService() {
		return devedorDocServFatService;
	}


	public void setDevedorDocServFatService(DevedorDocServFatService devedorDocServFatService) {
		this.devedorDocServFatService = devedorDocServFatService;
	}


	public DescontoService getDescontoService() {
		return descontoService;
	}


	public void setDescontoService(DescontoService descontoService) {
		this.descontoService = descontoService;
	}


	public ConhecimentoService getConhecimentoService() {
		return conhecimentoService;
	}


	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
	}


	public NotaFiscalServicoService getNotaFiscalServicoService() {
		return notaFiscalServicoService;
	}


	public void setNotaFiscalServicoService(NotaFiscalServicoService notaFiscalServicoService) {
		this.notaFiscalServicoService = notaFiscalServicoService;
	}


	public ItemTransferenciaService getItemTransferenciaService() {
		return itemTransferenciaService;
	}


	public void setItemTransferenciaService(ItemTransferenciaService itemTransferenciaService) {
		this.itemTransferenciaService = itemTransferenciaService;
	}


	public AgendaTransferenciaService getAgendaTransferenciaService() {
		return agendaTransferenciaService;
	}


	public void setAgendaTransferenciaService(AgendaTransferenciaService agendaTransferenciaService) {
		this.agendaTransferenciaService = agendaTransferenciaService;
	}


	public DoctoServicoService getDoctoServicoService() {
		return doctoServicoService;
	}


	public void setDoctoServicoService(DoctoServicoService doctoServicoService) {
		this.doctoServicoService = doctoServicoService;
	}


	public ReportExecutionManager getReportExecutionManager() {
		return reportExecutionManager;
	}


	public void setReportExecutionManager(ReportExecutionManager reportExecutionManager) {
		this.reportExecutionManager = reportExecutionManager;
	}


	public ExportarBloqueioFaturamentoService getExportarBloqueioFaturamentoService() {
		return exportarBloqueioFaturamentoService;
	}


	public void setExportarBloqueioFaturamentoService(ExportarBloqueioFaturamentoService exportarBloqueioFaturamentoService) {
		this.exportarBloqueioFaturamentoService = exportarBloqueioFaturamentoService;
	}


	public void setMotivoOcorrenciaService(MotivoOcorrenciaService motivoOcorrenciaService) {
		this.motivoOcorrenciaService = motivoOcorrenciaService;
	}


	public void setTransferenciaService(TransferenciaService transferenciaService) {
		this.transferenciaService = transferenciaService;
	}


	public TransferenciaService getTransferenciaService() {
		return transferenciaService;
	}
	
	public void setFaturaService(FaturaService faturaService) {
		this.faturaService = faturaService;
}
}

