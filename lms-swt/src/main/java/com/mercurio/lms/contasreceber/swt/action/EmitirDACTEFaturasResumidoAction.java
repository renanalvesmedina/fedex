package com.mercurio.lms.contasreceber.swt.action;


import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.joda.time.YearMonthDay;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.report.ReportActionSupport;
import com.mercurio.adsm.framework.report.ReportExecutionManager;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.contasreceber.report.EmitirDACTEFaturasResumidoService;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.service.ClienteService;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contasreceber.swt.emitirDACTEFaturasResumidoAction"
 */
public class EmitirDACTEFaturasResumidoAction extends ReportActionSupport{
	
	private ReportExecutionManager reportExecutionManager;
	private FilialService filialService;
	private ClienteService clienteService;
	
	public void setReportExecutionManager(ReportExecutionManager reportExecutionManager) {
		this.reportExecutionManager = reportExecutionManager;
	}
	

	public void setEmitirRelatorioEfetivacaoPropostaService(EmitirDACTEFaturasResumidoService emitirDACTEFaturasResumidoService) {
		this.reportServiceSupport = emitirDACTEFaturasResumidoService;
	}
	
	public List findLookupFilial(Map criteria){
		return filialService.findLookup(criteria);
	}
	
	public List findLookupCliente(Map criteria){
    	List clientes = clienteService.findLookup(criteria);
    	List retorno = new ArrayList();
    	for (Iterator iter = clientes.iterator(); iter.hasNext();) {
			Cliente cliente = (Cliente) iter.next();
			TypedFlatMap typedFlatMap = new TypedFlatMap();
			typedFlatMap.put("idCliente", cliente.getIdCliente());
			typedFlatMap.put("nmPessoa", cliente.getPessoa().getNmPessoa());
			typedFlatMap.put("nrIdentificacao", cliente.getPessoa().getNrIdentificacao());
			typedFlatMap.put("nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(cliente.getPessoa()));
			retorno.add(typedFlatMap);
		}
    	return retorno;
    }
	
	public String executeSWT(TypedFlatMap parameters) throws Exception {
		validaFiltro(parameters);
		return reportExecutionManager.generateReportLocator(this.reportServiceSupport, parameters);
	}


	private void validaFiltro(TypedFlatMap parameters) {
		Long nroFaturaInicial = parameters.getLong("nroFaturaInicial");
		Long nroFaturaFinal = parameters.getLong("nroFaturaFinal");
		
		YearMonthDay dtInicial = parameters.getYearMonthDay("dtDataInicial");
		YearMonthDay dtFinal = parameters.getYearMonthDay("dtDataFinal");
		
		Long idCliente = parameters.getLong("idCliente");
		
		boolean opcaoFiltroUmOk = (nroFaturaInicial != null && nroFaturaInicial.longValue() > 0) && (nroFaturaFinal != null && nroFaturaFinal.longValue() > 0);    
		boolean opcaoFiltroDoisOk = dtInicial != null && dtFinal != null && idCliente != null ;
		
		boolean filtroInvalido = ! (opcaoFiltroUmOk || opcaoFiltroDoisOk) ;
		
		if ( filtroInvalido ){
			throw new BusinessException("LMS-36279");
		}
		
	}


	public FilialService getFilialService() {
		return filialService;
	}


	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}


	public ClienteService getClienteService() {
		return clienteService;
	}


	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}
}
