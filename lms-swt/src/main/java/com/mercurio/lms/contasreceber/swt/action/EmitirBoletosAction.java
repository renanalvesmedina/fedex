package com.mercurio.lms.contasreceber.swt.action;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.report.MultiReportCommand;
import com.mercurio.adsm.framework.report.ReportActionSupport;
import com.mercurio.adsm.framework.report.ReportExecutionManager;
import com.mercurio.adsm.framework.session.SessionContext;
import com.mercurio.adsm.framework.util.FilterList;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.service.ConteudoParametroFilialService;
import com.mercurio.lms.configuracoes.model.service.ParametroGeralService;
import com.mercurio.lms.contasreceber.model.Boleto;
import com.mercurio.lms.contasreceber.model.Fatura;
import com.mercurio.lms.contasreceber.model.service.BoletoService;
import com.mercurio.lms.contasreceber.model.service.CedenteService;
import com.mercurio.lms.contasreceber.model.service.FaturaService;
import com.mercurio.lms.contasreceber.report.EmitirBoletoService;
import com.mercurio.lms.expedicao.model.service.MonitoramentoDocEletronicoService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.util.session.SessionKey;
import com.mercurio.lms.util.session.SessionUtils;
/**
 * Generated by: ADSM ActionGenerator
 *  
 * @author HectorJ
 * @since 09/06/2006
 * 
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contasreceber.swt.emitirBoletosAction"
 */

public class EmitirBoletosAction extends ReportActionSupport {

	private ReportExecutionManager reportExecutionManager;
	private ConteudoParametroFilialService conteudoParametroFilialService;
	private MonitoramentoDocEletronicoService monitoramentoDocEletronicoService;
	private ParametroGeralService parametroGeralService;


	public void setReportExecutionManager(
			ReportExecutionManager reportExecutionManager) {
		this.reportExecutionManager = reportExecutionManager;
	}
	
	/** Set filialService - Inversion of control */
	private FilialService filialService;
	public void setFilialService(FilialService filialService){
		this.filialService = filialService;
	}
	
	/** Set faturaService - Inversion of control */
	private FaturaService faturaService;
	public void setFaturaService(FaturaService faturaService){
		this.faturaService = faturaService;
	}
	
	/** Set cedenteService - Inversion of control */
	private CedenteService cedenteService;
	public void setCedenteService(CedenteService cedenteService){
		this.cedenteService = cedenteService;
	}
	
	/** Set boletoService - Inversion of control */
	private BoletoService boletoService;
	public void setBoletoService(BoletoService boletoService){
		this.boletoService = boletoService;
	}
	
	public void setEmitirBoletoService(EmitirBoletoService emitirBoletoService) {
		this.reportServiceSupport = emitirBoletoService;
	}  

	public Map executeSWT(TypedFlatMap tfm) throws Exception {
		Map result = new HashMap<String,Object>();
		File reportFile;
		if( tfm.get("boletoInicial") != null){
			tfm.put("boletoInicial",tfm.get("boletoInicial").toString());
		}
		if( tfm.get("boletoFinal") != null){
			tfm.put("boletoFinal",tfm.get("boletoFinal").toString());
		}
		
		if(tfm.getLong("cedente.idCedente") != null){
			reportFile = super.execute(tfm);
		}else{
			
			validateIntervalBoletos(tfm);
			
			/** Objeto que agrupa n relatórios em um único */
			MultiReportCommand mrc = new MultiReportCommand("emitirBoletos"); 
			
			/** Busca os ids dos cedentes */
			List<Map> idsCedentesMap = cedenteService.findCedentesAtivos();
			
			/** Itera os ids dos cedentes e adiciona comandos(relatórios) */
			for(Map element : idsCedentesMap){
				tfm = new TypedFlatMap(tfm);
				tfm.put("cedente.idCedente", element.get("idCedente"));
				
				mrc.addCommand("lms.contasreceber.emitirBoletoService", tfm);
				
			}
			reportFile = this.reportExecutionManager.executeMultiReport(mrc);
		}
		reportExecutionManager.generateReportLocator(reportFile); 
		
		FileInputStream  fi = new FileInputStream(reportFile);
		final ByteArrayOutputStream buffer = new ByteArrayOutputStream();
		byte[] temp = new byte[1024];
		int read;
		while((read = fi.read(temp)) >= 0){
		   buffer.write(temp, 0, read);
		}
		
		result.put("File", buffer.toByteArray());
		result.put("FileName", reportFile.getName());
		return result;
	}
	
	public Integer findQtdQuebraFatura(){
		Integer qtdQuebra = 0;
		
		qtdQuebra = ((BigDecimal) parametroGeralService.findConteudoByNomeParametro("QT_QUEBRA_CTES_FATURA", false)).intValue();
		
		return qtdQuebra;
	}
	
	
	public Map executeEmitirCTE(TypedFlatMap typedFlatMap){
		Map result = new HashMap<String,Object>();
		if( typedFlatMap.get("boletoInicial") != null){
			typedFlatMap.put("boletoInicial",typedFlatMap.get("boletoInicial").toString());
		}
		if( typedFlatMap.get("boletoFinal") != null){
			typedFlatMap.put("boletoFinal",typedFlatMap.get("boletoFinal").toString());
		}
		
		if(typedFlatMap.getLong("cedente.idCedente") == null){
			
			validateIntervalBoletos(typedFlatMap);
		}
		
		EmitirBoletoService emitirBoletoService = (EmitirBoletoService)reportServiceSupport;
		List<Long> idsFaturas = emitirBoletoService.findFaturasBoletoByCriteria(typedFlatMap);
		
		Integer nrVias = null;
		Object param = conteudoParametroFilialService.findConteudoByNomeParametro(SessionUtils.getFilialSessao().getIdFilial(), "NRO_VIAS_CTE", false);
		if (param != null){
			nrVias = ((BigDecimal) param).intValue();
		}else{
			nrVias = Integer.valueOf(1);
		}
		
		result.put("nrVias", nrVias);
		result.put("ctes", monitoramentoDocEletronicoService.findByListFatura(idsFaturas,null));
		result.put("quebra",findQtdQuebraFatura());
		return result; 
	}

	/**
	 * Valida o intervalo de boletos
	 *
	 * @author Hector Julian Esnaola Junior
	 * @since 08/03/2007
	 *
	 * @param tfm
	 *
	 */
	private void validateIntervalBoletos(TypedFlatMap tfm) {
		
		if (tfm.getLong("idManifesto") == null) {
			if(tfm.getBoolean("reemissao") != null && tfm.getBoolean("reemissao").equals(Boolean.FALSE)){
				if(StringUtils.isNotBlank(tfm.getString("boletoInicial")) && StringUtils.isNotBlank(tfm.getString("boletoFinal"))){
					// Caso o cedente seja nulo lança a exception
					if( tfm.getLong("cedente.idCedente") == null ){
						throw new BusinessException("LMS-36235");
					}
					
				}
			}
		}
		
	}

	/**
     * Consulta a filial pela sigla informada 
     * @param map
     * @return
     */
    public List findLookupFilial(Map map) {
    	FilterList filter = new FilterList(filialService.findLookup(map)) {
			public Map filterItem(Object item) {
				Filial filial = (Filial)item;
    			TypedFlatMap typedFlatMap = new TypedFlatMap();
	    		typedFlatMap.put("idFilial", filial.getIdFilial());
		    	typedFlatMap.put("sgFilial",  filial.getSgFilial());
		    	typedFlatMap.put("pessoa.nmFantasia",  filial.getPessoa().getNmFantasia());
				return typedFlatMap;
			}
    	};
    	return (List)filter.doFilter();
    }
	
    /**
     * Busca a fatura de acordo com a filial e o número da fatura digitados nas lookup's
     * @param criteria
     * @return List
     */
    public List findLookupFatura(TypedFlatMap criteria){
    	Long nrFatura = criteria.getLong("nrFatura");
    	Long idFilial = criteria.getLong("idFilial");
    	
    	List lst = faturaService.findByNrFaturaByFilial(nrFatura, idFilial);
    	
    	this.findCedenteOnFatura(lst);
    	
    	return lst;
    }
    
    /**
     * Seta o cedete na fatura
     *
     * @author Hector Julian Esnaola Junior
     * @since 11/10/2006
     *
     * @param lst
     *
     */
    public void findCedenteOnFatura(List lst){
    	
    	if(lst != null && !lst.isEmpty()){
    		Fatura fatura = (Fatura)lst.get(0);
    		
    		if(fatura.getCedente() == null){
    			Boleto boleto = boletoService.findByFatura(fatura.getIdFatura());
    			
    			if(boleto != null)
    				fatura.setCedente(boleto.getCedente());
    		}
    		
    	}
    	
    }
    /**
     * Busca a filial de acordo a sigla passada digitada na lookup
     * @param criteria
     * @return List
     */
    public List findLookupFilial(TypedFlatMap criteria){
        return filialService.findLookupBySgFilial(criteria.getString("sgFilial"), criteria.getString("tpAcesso"));
    } 
    
    /**
	 * Popula a combo Cedente com os Cedentes 
	 * @param criteria
	 * @return List 
	 */
	public List findCedentes(TypedFlatMap criteria){
		return cedenteService.findCombo(criteria);
	}
	
	/**
	 * 
	 *
	 * @author Hector Julian Esnaola Junior
	 * @since 05/10/2006
	 *
	 * @return
	 *
	 */
    public Filial findFilialUsuarioLogado() {
    	Filial filial = (Filial)SessionContext.get(SessionKey.FILIAL_KEY);
    	filial.setFilialByIdFilialResponsavalAwb(null);
    	filial.setEmpresa(null);
    	return filial;
    }
    
    /**
    * Busca o cedente de acordo com a fatura
    *
    * @author Hector Julian Esnaola Junior
    * @since 11/10/2006
    *
    * @param criteria
    * @return
    *
    */
   public Map findCedenteByFatura(TypedFlatMap criteria){
   	
		Map map = new HashMap();
		
		Long nrFatura = criteria.getLong("nrFatura");
		Long idFilial = criteria.getLong("filialByIdFilial.idFilial");
		
		List lst = faturaService.findByNrFaturaByFilial(nrFatura, idFilial);
		this.findCedenteOnFatura(lst);
		
		map.put("idCedente", ((Fatura)lst.get(0)).getCedente().getIdCedente());
		
		return map;
   }
	
	public void setConteudoParametroFilialService(
            ConteudoParametroFilialService conteudoParametroFilialService) {
    	this.conteudoParametroFilialService = conteudoParametroFilialService;
}

	public void setMonitoramentoDocEletronicoService(
            MonitoramentoDocEletronicoService monitoramentoDocEletronicoService) {
    	this.monitoramentoDocEletronicoService = monitoramentoDocEletronicoService;
    }
	
	public ParametroGeralService getParametroGeralService() {
		return parametroGeralService;
	}

	public void setParametroGeralService(ParametroGeralService parametroGeralService) {
		this.parametroGeralService = parametroGeralService;
	}
}
