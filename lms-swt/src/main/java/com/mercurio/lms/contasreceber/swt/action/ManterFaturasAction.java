package com.mercurio.lms.contasreceber.swt.action;

import com.mercurio.adsm.core.util.Base64Util;
import com.mercurio.adsm.core.util.ReflectionUtils;
import com.mercurio.adsm.framework.BusinessException;
import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;
import com.mercurio.adsm.framework.model.DomainValue;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.hibernate.VarcharI18n;
import com.mercurio.adsm.framework.model.masterdetail.*;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.session.SessionContext;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.configuracoes.model.CotacaoMoeda;
import com.mercurio.lms.configuracoes.model.Moeda;
import com.mercurio.lms.configuracoes.model.service.CotacaoMoedaService;
import com.mercurio.lms.contasreceber.model.*;
import com.mercurio.lms.contasreceber.model.param.DevedorDocServFatLookupParam;
import com.mercurio.lms.contasreceber.model.param.DivisaoClienteParam;
import com.mercurio.lms.contasreceber.model.param.FaturaLookupParam;
import com.mercurio.lms.contasreceber.model.service.*;
import com.mercurio.lms.contasreceber.util.DataVencimentoService;
import com.mercurio.lms.expedicao.model.service.ConhecimentoService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.municipios.model.service.HistoricoFilialService;
import com.mercurio.lms.util.AliasToNestedMapResultTransformer;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.AgrupamentoCliente;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.TipoAgrupamento;
import com.mercurio.lms.vendas.model.service.AgrupamentoClienteService;
import com.mercurio.lms.vendas.model.service.ClienteService;
import com.mercurio.lms.vendas.model.service.DivisaoClienteService;
import com.mercurio.lms.vendas.model.service.TipoAgrupamentoService;
import org.apache.commons.lang.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.joda.time.DateTime;
import org.joda.time.YearMonthDay;

import java.io.*;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.*;

/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.contasreceber.swt.manterFaturasAction"
 */

public class ManterFaturasAction extends MasterDetailAction {

	private Logger log = LogManager.getLogger(this.getClass());

	private FilialService filialService;  
	
	private ZerarDescontoService zerarDescontoService;
	
	private HistoricoFilialService historicoFilialService;
	
	private ClienteService clienteService;
	
	private CedenteService cedenteService;
	
	private DivisaoClienteService divisaoClienteService;
	
	private AgrupamentoClienteService agrupamentoClienteService;
	
	private TipoAgrupamentoService tipoAgrupamentoService;
	
	private CotacaoMoedaService cotacaoMoedaService;
	
	private DomainValueService domainValueService;
	
	private DevedorDocServFatService devedorDocServFatService;
	
	private DevedorDocServFatLookUpService devedorDocServFatLookUpService;
	
	private DescontoService descontoService;
	
	private MotivoDescontoService motivoDescontoService;
	
	private BoletoService boletoService;
	
	private RedecoService redecoService;
	
	private ReciboService reciboService;
	
	private GerarFaturaFaturaService gerarFaturaFaturaService;
	
	private DataVencimentoService dataVencimentoService;
	
	private ConhecimentoService conhecimentoService;
	
	private FaturaAnexoService faturaAnexoService;
	
	private static String FATURA_ANEXO_CONFIG_ALIAS = "faturaAnexo";
	
	public void setMotivoDescontoService(MotivoDescontoService motivoDescontoService) {
		this.motivoDescontoService = motivoDescontoService;
	}
	
	public Map findNavigatedItemFatura(TypedFlatMap parameters){
		TypedFlatMap retorno = null;

		Long idDevedorDocServFat = parameters.getLong("idDevedorDocServFat");
		
		Long idFatura = parameters.getLong("idFatura");
		
		Long posAtualTmp = 0L;
		
		Long posFinal = null;
		
		MasterDetailKey mdk = new MasterDetailKey();
		
		MasterEntry entry = getMasterFromSession(idFatura, true);		
		
		mdk.setMasterId(idFatura);
		List lstItemTmp = new ArrayList();
		ItemListConfig config = getMasterConfig().getItemListConfig("itemFatura");
		ItemList items = getItemsFromSession(entry, "itemFatura");
		for (Iterator iter = items.iterator(idFatura, config); iter.hasNext();) {
			ItemFatura itemFatura = (ItemFatura)iter.next();
			lstItemTmp.add(itemFatura);
		}
		
		Collections.sort(lstItemTmp, getMasterConfig().getItemComparator("itemFatura"));
		
		for (Iterator iter = lstItemTmp.iterator(); iter.hasNext();) {
			posAtualTmp++;
			
			ItemFatura itemFatura = (ItemFatura)iter.next();
			
			if (itemFatura.getDevedorDocServFat().getIdDevedorDocServFat().equals(idDevedorDocServFat)){
				BigDecimal posAtual = new BigDecimal(posAtualTmp);
				
				posFinal = posAtual.divide(parameters.getBigDecimal("_pageSize"), 0, BigDecimal.ROUND_UP).longValue();
				
				mdk.setDetailId(itemFatura.getIdItemFatura());
			}			
		}
		
		//Se achou a posição do item de fatura
		if (posFinal != null) {
			retorno = (TypedFlatMap)findByIdItemFatura(mdk);
			retorno.put("currentPage", posFinal);
		//Senão, mandar uma exception
		} else {
			throw new BusinessException("LMS-36204");
		}
		
		return retorno;
	}

	public List findTipoDocumentoServico(Map criteria){
        List dominiosValidos = new ArrayList();
        dominiosValidos.add("CTR");
        dominiosValidos.add("CRT");
        dominiosValidos.add("NFS");
        dominiosValidos.add("NDN");
        dominiosValidos.add("NFT");
        List retorno = domainValueService.findByDomainNameAndValues("DM_TIPO_DOCUMENTO_SERVICO", dominiosValidos);
        return retorno;
	}
	
    public Serializable storeAnexo(TypedFlatMap parameters) {
		return saveItemInstance( parameters, FATURA_ANEXO_CONFIG_ALIAS);
    }
    
	public YearMonthDay findDataVencimento(TypedFlatMap map){
		return dataVencimentoService.generateDataVencimento(
				map.getLong("filialByIdFilial.idFilial"),
				map.getLong("divisaoCliente.idDivisaoCliente"),
				map.getString("tpFreteValue"),
				map.getYearMonthDay("dtEmissao"),
				map.getString("tpModal"),
				map.getString("tpAbrangencia"),
				map.getLong("servico.idServico"));
		
	}
	
	public Map executeRetransmitirFatura(TypedFlatMap tfm){
		Long idFatura = tfm.getLong("idFatura");
		gerarFaturaFaturaService.executeRetransmitirFatura(idFatura);
		
		return tfm;
	}
		
	/**
	 * Retorno os valores necessário para inicializar a tela de fatura
	 * 
     * @author Mickaël Jalbert
     * 03/03/2006
     * 
	 * @return Map map de objetos para preencher os dados inicias da tela
	 * */
	public Map findInitialValue(){
		TypedFlatMap retorno = new TypedFlatMap();
		Fatura fatura = new Fatura();
		gerarFaturaFaturaService.executeInicializeDadosFatura(fatura);
		fatura.setFilialByIdFilial(SessionUtils.getFilialSessao());
		retorno.put("dtEmissao", fatura.getDtEmissao());
		retorno.put("filialByIdFilial.idFilial", fatura.getFilialByIdFilial().getIdFilial());
		retorno.put("filialByIdFilial.sgFilial", fatura.getFilialByIdFilial().getSgFilial());
		retorno.put("filialByIdFilial.pessoa.nmFantasia", fatura.getFilialByIdFilial().getPessoa().getNmFantasia());
		
		if (fatura.getFilialByIdFilialCobradora() != null) {
			retorno.put("filialByIdFilialCobradora.idFilial", fatura.getFilialByIdFilialCobradora().getIdFilial());
			retorno.put("filialByIdFilialCobradora.sgFilial", fatura.getFilialByIdFilialCobradora().getSgFilial());
			retorno.put("filialByIdFilialCobradora.pessoa.nmFantasia", fatura.getFilialByIdFilialCobradora().getPessoa().getNmFantasia());
		}
		retorno.put("tpFatura", fatura.getTpFatura().getValue());
		retorno.put("tpSituacaoFatura", fatura.getTpSituacaoFatura());
		retorno.put("blGerarEdi", fatura.getBlGerarEdi());
		// Caso a filial do usuário logado seja uma sucursal, deve desabilitar o campo 'gerar boleto'.
		if (!historicoFilialService.validateFilalIsSucursal(SessionUtils.getFilialSessao().getIdFilial())) {
			retorno.put("blGerarBoleto", fatura.getBlGerarBoleto());
		}
		retorno.put("blFaturaReemitida", fatura.getBlFaturaReemitida());
		retorno.put("blIndicadorImpressao", fatura.getBlIndicadorImpressao());
		retorno.put("vlJuroCalculado", fatura.getVlJuroCalculado());
		retorno.put("vlJuroRecebido", fatura.getVlJuroRecebido());
		retorno.put("vlTotalRecebido", fatura.getVlTotalRecebido());
		retorno.put("vlIva", fatura.getVlIva());
		
		retorno.put("tpSetorCausadorAbatimento", fatura.getTpSetorCausadorAbatimento());
		retorno.put("obAcaoCorretiva", fatura.getObAcaoCorretiva());
		retorno.put("motivoDesconto", fatura.getMotivoDesconto());
		
		retorno.put("idPaisCotacao", SessionUtils.getPaisSessao().getIdPais());
		retorno.put("nmPaisCotacao", SessionUtils.getPaisSessao().getNmPais());
		
		TypedFlatMap item = null;
		DomainValue domainValue = null;
		List lstStatusFatura = this.getDomainValueService().findDomainValues("DM_STATUS_ROMANEIO");
		
		List lstStatusFaturaDesc = new ArrayList();
		
		for (Iterator iter = lstStatusFatura.iterator(); iter.hasNext();) {
			domainValue = (DomainValue) iter.next();
			item = new TypedFlatMap();
			
			item.put("value",domainValue.getValue());
			item.put("description",domainValue.getDescription());
			lstStatusFaturaDesc.add(item);
		}
		
		retorno.put("tpSituacaoFatura", lstStatusFaturaDesc);

		newMaster();
		
		return retorno;
	}
	
	public Map findFilialSessao(){
		TypedFlatMap mapRetorno = new TypedFlatMap();
		
		mapRetorno.put("idFilial", SessionUtils.getFilialSessao().getIdFilial());
		mapRetorno.put("sgFilial", SessionUtils.getFilialSessao().getSgFilial());
		mapRetorno.put("nmFilial", SessionUtils.getFilialSessao().getPessoa().getNmFantasia());
		
		return mapRetorno;
	}
	
	/**
	 * Retorno os valores necessário para inicializar a tela de fatura
	 * 
     * @author Mickaël Jalbert
     * 11/03/2006
	 * 
	 * @return Map map de objetos para preencher os dados inicias da tela
	 * */
	public List findInitialValueItem(){

		Map item = null;
		DomainValue domainValue = null;
		List lstTpSituacaoAprovacao = this.getDomainValueService().findDomainValues("DM_STATUS_WORKFLOW");
		
		List lstTpSituacaoAprovacaoRet = new ArrayList();
		
		for (Iterator iter = lstTpSituacaoAprovacao.iterator(); iter.hasNext();) {
			domainValue = (DomainValue) iter.next();
			item = new HashMap();
			
			item.put("value",domainValue.getValue());
			item.put("description",domainValue.getDescription());
			lstTpSituacaoAprovacaoRet.add(item);
		}
			
		return lstTpSituacaoAprovacaoRet;
	}	
	
	public Map findFilialCliente(TypedFlatMap map){
		Map retorno = new HashMap();
		Cliente cliente = clienteService.findById(map.getLong("idCliente"));
		Filial filial = cliente.getFilialByIdFilialCobranca();

		if (map.getLong("idFatura") == null){
	    	//Valida se a filial de cobrança é centralizada, se é tem que ser igual a filial da sessão
	    	clienteService.validateCobrancaCentralizada(cliente);
		}
		
		if (filial != null) {
			retorno.put("idFilial",filial.getIdFilial());
			retorno.put("sgFilial",filial.getSgFilial());
			retorno.put("nmFantasia",filial.getPessoa().getNmFantasia());
		}
		
		return retorno;
	}
	
	public List<Map<String, Object>> findFilial(Map criteria) {
		List<Filial> filiais = filialService.findLookup(criteria);
		if (filiais != null) {
			List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();
			for (Filial filial : filiais) {
				Map<String, Object> mapFilial = new HashMap<String, Object>();
				mapFilial.put("sgFilial", filial.getSgFilial());
				mapFilial.put("idFilial", filial.getIdFilial());
				mapFilial.put("nmFantasia", filial.getPessoa().getNmFantasia());
				result.add(mapFilial);
			}
			return result;
		}
		return null;
    }

	public Long findCedente(TypedFlatMap map){
		Cedente cedente = cedenteService.findByIdCliente(map.getLong("cliente.idCliente"));
		
		if (cedente == null){
			cedente = cedenteService.findByIdFilial(SessionUtils.getFilialSessao().getIdFilial());
		}
		
		if (cedente != null){
			return cedente.getIdCedente();
		} else {
			return null;
		}
	}
	
	
	/**
	 * Método que salva as alterações feitas no mestre e nos detalhes
	 * 
	 * author Mickaël Jalbert
	 * 31/01/2006
	 * 
	 * @param tipoRegistroComplementoTela
	 * @return id gerado para o mestre
	 */
	public Serializable store(TypedFlatMap map) {
		
		MasterEntry entry = getMasterFromSession(map.getLong("idFatura"), true);				

		Fatura fatura = (Fatura) entry.getMaster();
		mountFatura(fatura, map);	

		ItemListConfig config = null;
		ItemList items = getItemsFromSession(entry, "itemFatura");
		ItemList listFaturaAnexo = getItemsFromSession(entry, FATURA_ANEXO_CONFIG_ALIAS);
		
		Integer versao = fatura.getVersao();
		
		if (items.isInitialized()){
			if (fatura.getIdFatura() == null){
				fatura = getFaturaService().beforeInsertFatura(fatura, items);
			}
		}
			
			config = getMasterConfig().getItemListConfig("itemFatura");
		try {
			fatura = (Fatura)getFaturaService().store(fatura, items, listFaturaAnexo, config);
			
		} catch (RuntimeException e) {
			fatura.setVersao(versao);
			updateMasterInSession(entry);
			throw e;
		}
		items.resetItemsState(); 
    	updateMasterInSession(entry);
		
		TypedFlatMap mapRetorno = mountMap(fatura);
		
		return mapRetorno;
	}
	
	/**
	 * Valida se a filial do usuário logado é uma sucursal, caso seja, 
	 * desabilita o campo gerarBoleto, para que não seja possivel gerar boleto.
	 * 
	 * @param criteria
	 * @return
	 */
	public Map validateFilialUser(TypedFlatMap criteria){
		Map retorno = new HashMap<String, Object>();
		Long idFilialUsuarioLogado = SessionUtils.getFilialSessao().getIdFilial();
		
		// Caso a filial do usuário logado seja uma sucursal, deve desabilitar o campo 'gerar boleto'.
		if (historicoFilialService.validateFilalIsSucursal(idFilialUsuarioLogado)) {
			retorno.put("disableBlGeraBoleto", Boolean.TRUE);
		}
		
		return retorno;
	}
	
	private TypedFlatMap mountMap(Fatura fatura){
		TypedFlatMap map = new TypedFlatMap();
		
		Long idFilialUsuarioLogado = SessionUtils.getFilialSessao().getIdFilial();
		// Caso o a filial do usuário logado seja MTZ ou a filial de origem da 
		// fatura seja a mesma do usuário logado, habilita o botão de zerar descontos.
		if (SessionUtils.isFilialSessaoMatriz() 
				|| fatura.getFilialByIdFilial().getIdFilial().equals(idFilialUsuarioLogado)) {
			map.put("enableZerarDesconto", Boolean.TRUE);
		}
		
		map.put("idFatura", fatura.getIdFatura());	
		map.put("filialByIdFilial.idFilial", fatura.getFilialByIdFilial().getIdFilial());
		map.put("filialByIdFilial.sgFilial", fatura.getFilialByIdFilial().getSgFilial());
		map.put("filialByIdFilial.pessoa.nmFantasia", fatura.getFilialByIdFilial().getPessoa().getNmFantasia());	
		map.put("nrFatura", fatura.getNrFatura());
		map.put("cliente.pessoa.nrIdentificacao", fatura.getCliente().getPessoa().getNrIdentificacao());
		map.put("cliente.pessoa.nrIdentificacaoFormatado", fatura.getCliente().getPessoa().getNrIdentificacaoFormatado());
		map.put("cliente.pessoa.nmPessoa", fatura.getCliente().getPessoa().getNmPessoa());		
		map.put("cliente.idCliente", fatura.getCliente().getIdCliente()); 	
		map.put("cliente.filialByIdFilialCobranca.idFilial", fatura.getCliente().getFilialByIdFilialCobranca().getIdFilial());
		map.put("cliente.filialByIdFilialCobranca.sgFilial", fatura.getCliente().getFilialByIdFilialCobranca().getSgFilial());
		map.put("cliente.filialByIdFilialCobranca.pessoa.nmFantasia", fatura.getCliente().getFilialByIdFilialCobranca().getPessoa().getNmFantasia());	
		map.put("filialByIdFilialCobradora.idFilial", fatura.getFilialByIdFilialCobradora().getIdFilial());
		map.put("filialByIdFilialCobradora.sgFilial", fatura.getFilialByIdFilialCobradora().getSgFilial());
		map.put("filialByIdFilialCobradora.pessoa.nmFantasia", fatura.getFilialByIdFilialCobradora().getPessoa().getNmFantasia());			
		map.put("nrPreFatura", fatura.getNrPreFatura());
		map.put("blConhecimentoResumo", fatura.getBlConhecimentoResumo());
		
		map.put("nrFaturaFormatada", fatura.getFilialByIdFilial().getSgFilial() + " " + FormatUtils.formataNrDocumento(fatura.getNrFatura().toString(),"FAT"));
		
		if (fatura.getDivisaoCliente() != null){
			if (!fatura.getDivisaoCliente().getTpSituacao().getValue().equals("A")){
				map.put("divisaoCliente.idDivisaoClienteInativo", fatura.getDivisaoCliente().getIdDivisaoCliente());
			}
			
			map.put("divisaoCliente.idDivisaoClienteTmp", fatura.getDivisaoCliente().getIdDivisaoCliente());
		}
		
		if (fatura.getCedente() != null) {
			map.put("cedente.idCedente", fatura.getCedente().getIdCedente());
		}
		
		map.put("tpModal", fatura.getTpModal().getValue());
		
		if (fatura.getTpFrete() != null){
			map.put("tpFreteDescription", fatura.getTpFrete().getDescription());
		}
		
		if (fatura.getServico() != null){
			map.put("servico.dsServico", fatura.getServico().getDsServico());
			map.put("servico.idServico", fatura.getServico().getIdServico());
		}		
		
		map.put("tpAbrangencia", fatura.getTpAbrangencia().getValue());
		
		if (fatura.getAgrupamentoCliente() != null ){
			map.put("agrupamentoCliente.idAgrupamentoClienteTmp", fatura.getAgrupamentoCliente().getIdAgrupamentoCliente());
		}
		
		if (fatura.getTipoAgrupamento() != null){
			map.put("tipoAgrupamento.idTipoAgrupamentoTmp", fatura.getTipoAgrupamento().getIdTipoAgrupamento());
		}
		
		map.put("tpSituacaoFatura", fatura.getTpSituacaoFatura().getValue());
		
		if (fatura.getTpSituacaoAprovacao() != null){
			map.put("tpSituacaoAprovacao", fatura.getTpSituacaoAprovacao().getDescription());
		} else {
			map.put("tpSituacaoAprovacao", "");
		}
		
		if (fatura.getCotacaoMoeda() != null) {
			map.put("simboloMoedaPais", fatura.getCotacaoMoeda().getMoedaPais().getMoeda().getSiglaSimbolo()); 		
			map.put("dtCotacaoMoeda", fatura.getCotacaoMoeda().getDtCotacaoMoeda()); 
			map.put("cotacaoMoeda.idCotacaoMoeda", fatura.getCotacaoMoeda().getIdCotacaoMoeda());
			map.put("cotacaoMoeda.vlCotacaoMoeda", fatura.getCotacaoMoeda().getVlCotacaoMoeda());
		}
		
		map.put("vlCotacaoMoeda", fatura.getVlCotacaoMoeda());
		map.put("dtEmissao", fatura.getDtEmissao());
		map.put("dtVencimento", fatura.getDtVencimento());
		map.put("blGerarEdi", fatura.getBlGerarEdi());
		// Caso a filial do usuário logado seja uma sucursal, deve desabilitar o campo 'gerar boleto'.
		if (!historicoFilialService.validateFilalIsSucursal(SessionUtils.getFilialSessao().getIdFilial())) {
			map.put("blGerarBoleto", fatura.getBlGerarBoleto());
		}
		map.put("dtTransmissaoEdi", fatura.getDtTransmissaoEdi());
		
		Boleto boleto = boletoService.findByFatura(fatura.getIdFatura());
		
		if (boleto != null){
			map.put("boleto.idBoleto", boleto.getIdBoleto());
			map.put("boleto.nrBoleto", boleto.getNrBoleto());
		}

		Redeco redeco = redecoService.findByFatura(fatura.getIdFatura());
		
		if (redeco != null) {
			map.put("redeco.idRedeco", redeco.getIdRedeco());
			map.put("redeco.filial.sgFilial", redeco.getFilial().getSgFilial());
			map.put("redeco.nrRedeco", redeco.getNrRedeco());
			map.put("redeco.tpFinalidade", redeco.getTpFinalidade().getDescription());
		}
		
		Recibo recibo = reciboService.findByFatura(fatura.getIdFatura());
		
		if (recibo != null) {
			map.put("recibo.idRecibo", recibo.getIdRecibo());
			map.put("recibo.filial.sgFilial", recibo.getFilialByIdFilialEmissora().getSgFilial());
			map.put("recibo.nrRecibo", recibo.getNrRecibo());
		}		
		
		if (fatura.getPendencia() != null) {
			map.put("pendencia.idPendencia", fatura.getPendencia().getIdPendencia());
		}
		
		if (fatura.getIdPendenciaDesconto() != null) {
			map.put("pendenciaDesconto.idPendencia", fatura.getIdPendenciaDesconto());
			map.put("isQuestionamentoFatura", getFaturaService().findIsQuestionamentoFatura(fatura));
		}		
		
		map.put("dtLiquidacao", fatura.getDtLiquidacao());
		
		if (fatura.getRelacaoCobranca() != null) {
			map.put("relacaoCobranca.idRelacaoCobranca", fatura.getRelacaoCobranca().getIdRelacaoCobranca());
			map.put("relacaoCobranca.nrRelacaoCobrancaFilial", fatura.getRelacaoCobranca().getNrRelacaoCobrancaFilial());
			map.put("relacaoCobranca.filial.sgFilial", fatura.getRelacaoCobranca().getFilial().getSgFilial());
		}
		
		map.put("dhReemissao", fatura.getDhReemissao());
		
		if (fatura.getUsuario() != null){
			map.put("usuario.nmUsuario", fatura.getUsuario().getNmUsuario());
		}
		map.put("qtDocumentos", fatura.getQtDocumentos());
		map.put("vlBaseCalcPisCofinsCsll", fatura.getVlBaseCalcPisCofinsCsll());
		map.put("vlBaseCalcIr", fatura.getVlBaseCalcIr());
		map.put("vlPis", fatura.getVlPis());
		map.put("vlCofins", fatura.getVlCofins());
		map.put("vlCsll", fatura.getVlCsll());
		map.put("vlIva", fatura.getVlIva());
		map.put("vlIr", fatura.getVlIr());
		map.put("vlTotal", fatura.getVlTotal());
		map.put("vlDesconto", fatura.getVlDesconto());
		map.put("vlJuroCalculado", fatura.getVlJuroCalculado());
		map.put("vlCobrar", fatura.getVlTotal().add(fatura.getVlJuroCalculado()).add(fatura.getVlIva()).subtract(fatura.getVlDesconto()));
		
		if (fatura.getTpSituacaoFatura().getValue().equals("LI")){
			map.put("vlJuroRecebido", fatura.getVlJuroRecebido());
			map.put("vlTotalRecebido", fatura.getVlTotal().add(fatura.getVlJuroRecebido()).add(fatura.getVlIva()).subtract(fatura.getVlDesconto()));
		} else {
			map.put("vlJuroRecebido", new BigDecimal("0"));
			map.put("vlTotalRecebido", new BigDecimal("0"));
		}
		map.put("blFaturaReemitida", fatura.getBlFaturaReemitida());
		map.put("blIndicadorImpressao", fatura.getBlIndicadorImpressao());
		map.put("tpFatura", fatura.getTpFatura().getValue()); 
		map.put("tpOrigem", fatura.getTpOrigem().getValue());			
		map.put("obFatura", fatura.getObFatura());
		
		if (fatura.getMoeda() != null) {
			map.put("moeda.idMoeda", fatura.getMoeda().getIdMoeda());
		}
		
		if(fatura.getMotivoDesconto() != null && fatura.getMotivoDesconto().getIdMotivoDesconto() != null){
			map.put("devedorDocServFat.desconto.motivoDesconto.idMotivoDesconto", fatura.getMotivoDesconto().getIdMotivoDesconto());
		}
		
		if(fatura.getObAcaoCorretiva() != null){
			map.put("obAcaoCorretiva", fatura.getObAcaoCorretiva());
		}		
		
		if(fatura.getTpSetorCausadorAbatimento() != null && fatura.getTpSetorCausadorAbatimento().getValue() != null){
			map.put("tpSetorCausadorAbatimento", fatura.getTpSetorCausadorAbatimento().getValue());
		}
		
		map.put("idPaisCotacao", SessionUtils.getPaisSessao().getIdPais());
		map.put("nmPaisCotacao", SessionUtils.getPaisSessao().getNmPais());
		
		return map;
	}
	
	/**
	 * Método que monta uma fatura a partir do map que vem da tela.
	 * 
	 * author Mickaël Jalbert
	 * 31/01/2006
	 * 
	 * @param Fatura fatura 
	 * @param TypedFlatMap map
	 * @return Fatura
	 */	
	private Fatura mountFatura(Fatura fatura, TypedFlatMap map) {
		fatura.setFilialByIdFilial(filialService.findById(map.getLong("filialByIdFilial.idFilial")));

		fatura.setCliente(clienteService.findById(map.getLong("cliente.idCliente")));	

		if (map.getLong("filialByIdFilialCobradora.idFilial") != null){
			fatura.setFilialByIdFilialCobradora(filialService.findById(map.getLong("filialByIdFilialCobradora.idFilial")));
		}
		
		if (map.getLong("divisaoCliente.idDivisaoCliente") != null){
			fatura.setDivisaoCliente(divisaoClienteService.findById(map.getLong("divisaoCliente.idDivisaoCliente")));
		}
		
		Cedente cedente = new Cedente();
		cedente.setIdCedente(map.getLong("cedente.idCedente"));
		fatura.setCedente(cedente);
		
		if (map.getLong("agrupamentoCliente.idAgrupamentoCliente") != null){
			AgrupamentoCliente agrupamentoCliente = new AgrupamentoCliente();
			agrupamentoCliente.setIdAgrupamentoCliente(map.getLong("agrupamentoCliente.idAgrupamentoCliente"));
			fatura.setAgrupamentoCliente(agrupamentoCliente);
		}
		
		if (map.getLong("tipoAgrupamento.idTipoAgrupamento") != null){
			TipoAgrupamento tipoAgrupamento = new TipoAgrupamento();
			tipoAgrupamento.setIdTipoAgrupamento(map.getLong("tipoAgrupamento.idTipoAgrupamento"));
			fatura.setTipoAgrupamento(tipoAgrupamento);
		}
		
		if (map.getLong("moeda.idMoeda") != null) {
			Moeda moeda = new Moeda();
			moeda.setIdMoeda(map.getLong("moeda.idMoeda"));
			fatura.setMoeda(moeda);
		// Quando a fatura for inutilizada, não terá itemFatura e 
		// consequentemente não terá moeda, logo é setada a moeda
		// da sessão do usuário logado.
		} else {
			fatura.setMoeda(SessionUtils.getMoedaSessao());
		}
		
		if (map.getLong("cotacaoMoeda.idCotacaoMoeda") != null){
			CotacaoMoeda cotacaoMoeda = new CotacaoMoeda();
			cotacaoMoeda.setIdCotacaoMoeda(map.getLong("cotacaoMoeda.idCotacaoMoeda"));
			fatura.setCotacaoMoeda(cotacaoMoeda);		
			
		} else {
			fatura.setCotacaoMoeda(null);
		}

		fatura.setTpSetorCausadorAbatimento(map.getDomainValue("tpSetorCausadorAbatimento"));
		
		fatura.setObAcaoCorretiva(map.getString("obAcaoCorretiva"));
	
		if(map.getLong("devedorDocServFat.desconto.motivoDesconto.idMotivoDesconto") != null) {
			MotivoDesconto motivoDesconto = new MotivoDesconto();
			motivoDesconto.setIdMotivoDesconto(map.getLong("devedorDocServFat.desconto.motivoDesconto.idMotivoDesconto"));
			fatura.setMotivoDesconto(motivoDesconto);
		}
		
		fatura.setIdFatura(map.getLong("idFatura"));
		fatura.setNrFatura(map.getLong("nrFatura"));
		fatura.setNrPreFatura(map.getString("nrPreFatura"));
		fatura.setTpModal(map.getDomainValue("tpModal"));
		fatura.setTpAbrangencia(map.getDomainValue("tpAbrangencia"));		
		fatura.setTpSituacaoFatura(map.getDomainValue("tpSituacaoFatura"));
		fatura.setVlCotacaoMoeda(map.getBigDecimal("vlCotacaoMoeda"));
		fatura.setDtEmissao(map.getYearMonthDay("dtEmissao"));
		fatura.setDtVencimento(map.getYearMonthDay("dtVencimento"));
		fatura.setBlGerarBoleto(map.getBoolean("blGerarBoleto"));
		fatura.setBlGerarEdi(map.getBoolean("blGerarEdi"));
		fatura.setBlFaturaReemitida(map.getBoolean("blFaturaReemitida"));
		fatura.setBlIndicadorImpressao(map.getBoolean("blIndicadorImpressao"));		
		fatura.setDhTransmissao(map.getDateTime("dhTransmissao"));
		fatura.setDhReemissao(map.getDateTime("dhReemissao"));
		fatura.setTpFatura(map.getDomainValue("tpFatura"));
		fatura.setTpOrigem(map.getDomainValue("tpOrigem"));
		fatura.setTpFrete(new DomainValue(map.getString("tpFreteValue")));
		fatura.setObFatura(map.getString("obFatura"));		

		return fatura;
	}
	
	
	/**
	 * Método que monta uma item fatura a partir do map que vem da tela.
	 * 
	 * author Mickaël Jalbert
	 * 11/03/2006
	 * 
	 * @param TypedFlatMap map
	 * @return ItemFatura
	 */	
	private ItemFatura mountItemFatura(TypedFlatMap map, ItemFatura itemFatura){
		DevedorDocServFat devedorDocServFat = devedorDocServFatService.findById(map.getLong("devedorDocServFat.idDevedorDocServFat"));
		
		//Se tem desconto
		if (StringUtils.isNotBlank(map.getString("devedorDocServFat.desconto.vlDesconto"))){
			Desconto desconto = descontoService.findByDevedorDocServFat(devedorDocServFat.getIdDevedorDocServFat());
			
			if (desconto == null){
				desconto = new Desconto();
				desconto.setDevedorDocServFat(devedorDocServFat);
			} else if (desconto.getVlDesconto().compareTo(map.getBigDecimal("devedorDocServFat.desconto.vlDesconto")) != 0){
				desconto.setIdPendencia(null);
			}
			
			desconto.setVlDesconto(map.getBigDecimal("devedorDocServFat.desconto.vlDesconto"));
			
			if(map.getLong("devedorDocServFat.desconto.motivoDesconto.idMotivoDescontoItem") != null){
			MotivoDesconto motivoDesconto = new MotivoDesconto();			
				motivoDesconto.setIdMotivoDesconto(map.getLong("devedorDocServFat.desconto.motivoDesconto.idMotivoDescontoItem"));			
			desconto.setMotivoDesconto(motivoDesconto);
			}
			
			desconto.setTpSituacaoAprovacao(map.getDomainValue("devedorDocServFat.desconto.tpSituacaoAprovacao"));
			
			desconto.setObDesconto(map.getString("devedorDocServFat.desconto.obDesconto"));
			
			List lstDesconto = new ArrayList(1);
			
			lstDesconto.add(desconto);
			
			devedorDocServFat.setDescontos(lstDesconto);
		}

		itemFatura.setDevedorDocServFat(devedorDocServFat);
		itemFatura.setIdItemFatura(map.getLong("idItemFatura"));		
		return itemFatura;
	}	
	
	/**
	 * Busca um mestre pelo seu id e armazena-o na sessão do usuário
	 * 
	 * author Mickaël Jalbert
	 * 31/01/2006
	 * 
	 * @param id
	 * @return Fatura, objeto mestre
	 */
	public Map findById(java.lang.Long id) {
		Object masterObj = this.getFaturaService().findByIdTela(id);
		putMasterInSession(masterObj);
		
		Fatura fatura = (Fatura)masterObj;
		
		TypedFlatMap mapRetorno = mountMap(fatura);
		
		return mapRetorno;
	}
	
	public ResultSetPage findPaginatedFaturaAnexo(TypedFlatMap criteria) {
		ResultSetPage rspItemAnexo = findPaginatedItemList(criteria, FATURA_ANEXO_CONFIG_ALIAS);
		List lista = new ArrayList();
		for (Object faturaAnexoObject: rspItemAnexo.getList()) {
			FaturaAnexo faturaAnexo = (FaturaAnexo) faturaAnexoObject;

			Map map = new HashMap();
			map.put("idFaturaAnexo" , faturaAnexo.getIdFaturaAnexo());
			map.put("descricao" , faturaAnexo.getDsAnexo());
			map.put("dhinclusao" , faturaAnexo.getDhCriacao());
			map.put("nmusuario" , faturaAnexo.getUsuario().getNmUsuario() );

			try {
				// pega o nome do arquivo
				ByteArrayInputStream ba = new ByteArrayInputStream( faturaAnexo.getDcArquivo() );
				BufferedReader in = new BufferedReader(new InputStreamReader(ba));
				String linha = in.readLine();
				map.put("nmarquivo", linha.substring(0,1024));
				
			} catch (Exception e) {
				// nao encontrou nome ???
				map.put("nmarquivo", "");
			}
			
			lista.add(map);
		} 
		
		rspItemAnexo.setList(lista);
    	return rspItemAnexo;
	}	
	
	/**
	 * Monta o objeto FaturaLookupParam de acordo com os parâmetros vindos da tela
	 *
	 * @author Hector Julian Esnaola Junior
	 * @since 28/11/2006
	 *
	 * @param criteria
	 * @return
	 *
	 */
	private FaturaLookupParam mountFaturaLookupParam(TypedFlatMap criteria){
		
		FaturaLookupParam faturaLookupParam = new FaturaLookupParam();
		
		/** Seta os atributos da FaturaLookupParam */
		
		faturaLookupParam.setDtEmissaoInicialFatura(criteria.getYearMonthDay("dtEmissaoInicial"));
		faturaLookupParam.setDtEmissaoFinalFatura(criteria.getYearMonthDay("dtEmissaoFinal"));
		faturaLookupParam.setDtVencimentoInicialFatura(criteria.getYearMonthDay("dtVencimentoInicial"));
		faturaLookupParam.setDtVencimentoFinalFatura(criteria.getYearMonthDay("dtVencimentoFinal"));
		faturaLookupParam.setDtLiquidacaoInicialFatura(criteria.getYearMonthDay("dtLiquidacaoInicial"));
		faturaLookupParam.setDtLiquidacaoFinalFatura(criteria.getYearMonthDay("dtLiquidacaoFinal"));
		faturaLookupParam.setIdBancoFatura(criteria.getLong("idCedente"));
		faturaLookupParam.setIdClienteFatura(criteria.getLong("idCliente"));
		faturaLookupParam.setIdFilialCobrancaFatura(criteria.getLong("idFilialDestino"));
		faturaLookupParam.setSgFilialCobrancaFatura(criteria.getString("sgFilialDestino"));
		faturaLookupParam.setIdFilialFaturamentoFatura(criteria.getLong("idFilialOrigem"));
		faturaLookupParam.setSgFilialFaturamentoFatura(criteria.getString("sgFilialOrigem"));
		faturaLookupParam.setNrFatura(criteria.getLong("nrFatura"));
		faturaLookupParam.setNrPreFatura(criteria.getString("nrPreFatura"));
		faturaLookupParam.setTpAbrangemciaFatura(criteria.getDomainValue("tpAbrangencia") == null ? "" : criteria.getDomainValue("tpAbrangencia").getValue());
		faturaLookupParam.setTpModalFatura(criteria.getDomainValue("tpModal") == null ? "" : criteria.getDomainValue("tpModal").getValue());
		faturaLookupParam.setTpSituacaoFatura(criteria.getDomainValue("tpSituacaoFatura") == null ? "" : criteria.getDomainValue("tpSituacaoFatura").getValue());
		faturaLookupParam.setTpSituacaoFaturaValido(criteria.getInteger("tpSituacaoFaturaValido"));
		
		return faturaLookupParam;
	}
	
	/**
	 * 
	 *
	 * @author Hector Julian Esnaola Junior
	 * @since 28/11/2006
	 *
	 * @param criteria
	 * @return
	 *
	 */
	public ResultSetPage findPaginatedFatura(TypedFlatMap criteria) {
		ResultSetPage rsp = getFaturaService().findPaginated(mountFaturaLookupParam(criteria), criteria);
		
		List list = rsp.getList();
		
		for (Iterator iter = list.iterator(); iter.hasNext();){
			HashMap mapRet = (HashMap) iter.next();
			
			((Map)((Map)mapRet.get("cliente")).get("pessoa")).put("nrIdentificacao",FormatUtils.formatIdentificacao((String)((Map)((Map)((Map)mapRet.get("cliente")).get("pessoa")).get("tpIdentificacao")).get("value"), (String)((Map)((Map)mapRet.get("cliente")).get("pessoa")).get("nrIdentificacao")));

			mapRet.put("sgFilialCobranca", (String) ((Map) mapRet.get("filialByIdFilialCobradora")).get("sgFilial"));
			mapRet.put("idFilialFatura", (Long) ((Map) mapRet.get("filialByIdFilial")).get("idFilial"));
			mapRet.put("sgFilialFatura", (String) ((Map) mapRet.get("filialByIdFilial")).get("sgFilial"));
			mapRet.put("nmFilialFatura", (String) ((Map)((Map) mapRet.get("filialByIdFilial")).get("pessoa")).get("nmFantasia"));
			mapRet.put("nrIdentificacaoCliente", (String) ((Map)((Map) mapRet.get("cliente")).get("pessoa")).get("nrIdentificacao"));
			mapRet.put("nmCliente", (String) ((Map)((Map) mapRet.get("cliente")).get("pessoa")).get("nmPessoa"));
		}
		return rsp;
		
	}
	
	/**
	 * Busca a total de faturas de acordo com os filtros
	 *
	 * @author Hector Julian Esnaola Junior
	 * @since 29/11/2006
	 *
	 * @param criteria
	 * @return
	 *
	 */
	public Integer getRowCountFatura(TypedFlatMap criteria) {
		return getFaturaService().getRowCount(mountFaturaLookupParam(criteria));
	}

	public Integer getRowCountFaturasAnexo(TypedFlatMap criteria) {
		return getRowCountItemList(criteria, FATURA_ANEXO_CONFIG_ALIAS);
	}
	
	public Map cancelFatura(TypedFlatMap map){
		getFaturaService().cancelFatura(map.getLong("idFatura"));

		return findById(map.getLong("idFatura"));
	}
		
    /**
     * Busca a lista de motivos de desconto para a combo de motivos desconto
     * @param map Critérios da pesquisa
     * @return Lista de Motivos do Desconto
     */
    public List findComboMotivoDesconto(TypedFlatMap criteria){
        List<MotivoDesconto> motivos = this.motivoDescontoService
        		.findMotivoDescontoByTpSituacaoAndIdDesconto(
        				criteria.getString("tpSituacao"), 
        				criteria.getLong("desconto.idDesconto"));  
    	
        for (MotivoDesconto m : motivos) {
        	m.setDsMotivoDesconto(new VarcharI18n(m.getCdMotivoDesconto() + " - " + m.getDsMotivoDesconto().getValue()));
        }
        
    	return motivos;
    } 
	
	/**
	 * Remove uma listra de registros mestres
	 * author Mickaël Jalbert
	 * 31/01/2006
	 * @param ids
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIds(List ids) {
		this.getFaturaService().removeByIds(ids);
	}
	
	/**
	 * Remove um registro mestre
	 * author Mickaël Jalbert
	 * 31/01/2006
	 * @param id
	 */
	public void removeById(Long id) {	
		this.getFaturaService().removeById(id);
		newMaster();			
	}
	
	/***
	 * Remove uma lista de item fatura.
	 * 
	 * author Mickaël Jalbert
	 * 31/01/2006
	 * @param List ids
	 * 
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
	public void removeByIdsItemFatura(List ids) {
		MasterEntry entry = (MasterEntry) SessionContext.get(getClass().getName());
		
		//Validar se o usuário tem direito de modificar a fatura
		if ((Long)entry.getMasterId() != null) {
			this.getFaturaService().validateFatura((Long)entry.getMasterId());
		}
		
		super.removeItemByIds(ids, "itemFatura");
	}	
	
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIdsAnexoFatura(List ids) {
    	super.removeItemByIds(ids, FATURA_ANEXO_CONFIG_ALIAS);
    }
	
	/**
	 * Salva um registro detalhe/filho na sessão.
	 * author Mickaël Jalbert
	 * 31/01/2006
	 * @param parameters Parametros utilizado para montar o detalhe
	 * @return id do detalhe (temporário no caso de inserção)
	 */
	public Serializable storeItemFatura(TypedFlatMap map) {
		Serializable idItemFatura = saveItemInstance(map, "itemFatura");
		Long idFatura = (Long) getMasterId(map);
		
		MasterDetailKey key = new MasterDetailKey();
		
		key.setDetailId((Long)idItemFatura);
		key.setMasterId(idFatura);
		
		ItemFatura itemFatura = (ItemFatura)findItemById(key, "itemFatura");
		
		TypedFlatMap mapRetorno = new TypedFlatMap();
		
		DomainValue tpFrete = conhecimentoService.findTpFreteByIdConhecimento(itemFatura.getDevedorDocServFat().getDoctoServico().getIdDoctoServico());
		
		if (tpFrete != null) {
			mapRetorno.put("tpFreteValue", tpFrete.getValue());
			mapRetorno.put("tpFreteDescription", tpFrete.getDescription());
		}
		
		mapRetorno.put("devedorDocServFat.doctoServico.moeda.idMoeda", itemFatura.getDevedorDocServFat().getDoctoServico().getMoeda().getIdMoeda());
		

		if (itemFatura.getDevedorDocServFat().getDoctoServico().getServico() != null){
			mapRetorno.put("devedorDocServFat.doctoServico.servico.idServico", itemFatura.getDevedorDocServFat().getDoctoServico().getServico().getIdServico());
		}
		
		if (itemFatura.getDevedorDocServFat().getDivisaoCliente() != null){
			mapRetorno.put("devedorDocServFat.divisaoCliente.idDivisaoCliente", itemFatura.getDevedorDocServFat().getDivisaoCliente().getIdDivisaoCliente());
		}

		mapRetorno.put("devedorDocServFat.doctoServico.servico.dsServico", itemFatura.getDevedorDocServFat().getDoctoServico().getServico().getDsServico());
		mapRetorno.put("devedorDocServFat.doctoServico.servico.tpModal", itemFatura.getDevedorDocServFat().getDoctoServico().getServico().getTpModal().getValue());
		mapRetorno.put("devedorDocServFat.doctoServico.servico.tpAbrangencia", itemFatura.getDevedorDocServFat().getDoctoServico().getServico().getTpAbrangencia().getValue());
		if(itemFatura.getDevedorDocServFat().getDesconto() != null){
			mapRetorno.put("devedorDocServFat.desconto.tpSituacaoAprovacao", itemFatura.getDevedorDocServFat().getDesconto().getTpSituacaoAprovacao().getValue());
		}
		mapRetorno.put("idItemFatura", itemFatura.getIdItemFatura());
		
		return mapRetorno;
	}
	
	public Map findSomatorios(Long idFatura){
		Map map = new HashMap();

		MasterEntry entry = getMasterFromSession(idFatura, true);			
		ItemList items = getItemsFromSession(entry, "itemFatura");
		ItemListConfig config = getMasterConfig().getItemListConfig("itemFatura");
		
		BigDecimal vlDocumentoTotal = new BigDecimal("0.00");
		BigDecimal vlDescontoTotal = new BigDecimal("0.00");
		vlDocumentoTotal = vlDocumentoTotal.setScale(2, RoundingMode.HALF_UP);
		vlDescontoTotal = vlDescontoTotal.setScale(2, RoundingMode.HALF_UP);
		
		for (Iterator iter = items.iterator(idFatura, config); iter.hasNext();) {
			ItemFatura itemFatura = (ItemFatura)iter.next();
			vlDocumentoTotal = vlDocumentoTotal.add(itemFatura.getDevedorDocServFat().getVlDevido());
			
			if (itemFatura.getDevedorDocServFat().getDescontos() != null && itemFatura.getDevedorDocServFat().getDescontos().size() > 0){
				vlDescontoTotal = vlDescontoTotal.add(((Desconto)itemFatura.getDevedorDocServFat().getDescontos().get(0)).getVlDesconto());
			}	
		}
		
		map.put("qtdeTotalDocumentos", Integer.valueOf(items.size()));
		map.put("valorTotalDocumentos",vlDocumentoTotal);
		map.put("valorTotalDesconto",vlDescontoTotal);	

		return map;
	}
	
	protected MasterEntryConfig createMasterConfig(MasterDetailFactory masterFactory) {
		MasterEntryConfig config = masterFactory.createMasterEntryConfig(Fatura.class);
		configItemFatura(config);
		configFaturaAnexo(config);		
		return config;
	}
		
	private void configItemFatura(MasterEntryConfig config) {
		// Comparador para realizar a ordenação dos items filhos de acordo com a regra de negócio.
		Comparator descComparator = new Comparator() {
			
			public int compare(Object o1, Object o2) {				
				ItemFatura d1 = (ItemFatura) o1;
				ItemFatura d2 = (ItemFatura) o2;
				
				int retorno = 0;
				
				retorno = d1.getDevedorDocServFat().getDoctoServico().getFilialByIdFilialOrigem().getSgFilial().compareTo(d2.getDevedorDocServFat().getDoctoServico().getFilialByIdFilialOrigem().getSgFilial());
				
				if (retorno == 0){
					retorno = d1.getDevedorDocServFat().getDoctoServico().getNrDoctoServico().compareTo(d2.getDevedorDocServFat().getDoctoServico().getNrDoctoServico());
				}
				return retorno;
			}
			
		};
		
		
		// Esta instancia será responsavel por carregar os items filhos na sessão a partir do banco de dados.
		ItemListConfig itemInit = new ItemListConfig() {
			
			//Chamado para carregar os filhos na sessão
			public List initialize(Long masterId) {
				if (masterId == null) {
					return Collections.EMPTY_LIST;
				}
				return getFaturaService().findItemFatura(masterId);
			}

			public Integer getRowCount(Long masterId) {
				return getFaturaService().getRowCountItemFatura(masterId);
			}

			public void modifyItemValues(Object newBean, Object bean) {
				Set ignore = new HashSet(2);
				ignore.add("idItemFatura");
				ignore.add("versao");
				ReflectionUtils.syncObjectProperties(bean, newBean, ignore);
			}

			public Map configItemDomainProperties() {
				Map props = new HashMap(1);
				props.put("tpDocumentoServico", "DM_TIPO_DOCUMENTO_SERVICO");
				return props;
			}

			public Object populateNewItemInstance(Map parameters, Object bean) {
				ItemFatura itemFaturaNew = mountItemFatura((TypedFlatMap)parameters, (ItemFatura)bean);
				
				resolveDomainValueProperties(itemFaturaNew);
				ItemList items = getItemsFromSession(getMasterFromSession(getMasterId(parameters), true), "itemFatura");
				ItemListConfig config = getMasterConfig().getItemListConfig("itemFatura");
				
				MasterEntry entry = getMasterFromSession(getMasterId(parameters), true);
				
				//Regras de negócio
				getFaturaService().storeBeforeItemFatura((Fatura)entry.getMaster(), items, config, itemFaturaNew);				

				return itemFaturaNew;
			}
			
		};
		
		config.addItemConfig("itemFatura",ItemFatura.class, itemInit, descComparator);
	}	
	
	private void configFaturaAnexo(MasterEntryConfig config) {
		// Comparador para realizar a ordenação dos items filhos de acordo com a regra de negócio.
    	Comparator descComparator = new Comparator() {
			public int compare(Object obj1, Object obj2) {
        		return 0; 		
			}
    	};		
    	/**
    	 * Esta instancia é responsavel por carregar os 
    	 * items filhos na sessão a partir do banco de dados.
    	 */
    	ItemListConfig itemInit = new ItemListConfig() {
    		
    		/**
    		 * Find paginated do filho
    		 * Passa por este ponto apenas na primeira vez em que a list filha e chamada.
    		 * Apos a primeira vez ela e carregada da memoria
    		 * 
    		 * @param masterId id do pai
    		 * @param parameters todos os parametros vindo da tela pai
    		 */    		
			public List initialize(Long masterId, Map parameters) {	
				return getFaturaAnexoService().findFaturaAnexosByIdFatura(masterId);
			}

			/**
			 * Busca rowCount da grid da tela filha
			 * Passa por este ponto apenas na primeira vez em que a list filha e chamada.
    		 * Apos a primeira vez ela e carregada da memoria
			 * 
			 * @param masterId id do pai
			 * @param parameters todos os parametros vindo da tela pai
			 */			
			public Integer getRowCount(Long masterId, Map parameters) {
				return Integer.valueOf(getFaturaAnexoService().findFaturaAnexosByIdFatura(masterId).size());
			}
			
			/**
			 * Chama esta funcao depois de editar um item da grid filho
			 * E retira atributos desnecessarios para o filho
			 * 
			 * @param newBean 
			 * @param oldBean 
			 */
			public void modifyItemValues(Object newBean, Object bean) {
		        FaturaAnexo anexoModified = (FaturaAnexo) newBean;
		        FaturaAnexo baseAnexo = (FaturaAnexo) bean;
		        
		        baseAnexo.setDsAnexo(anexoModified.getDsAnexo());
		        baseAnexo.setDcArquivo(anexoModified.getDcArquivo());
		        baseAnexo.setBlEnvAnexoQuestFat(anexoModified.getBlEnvAnexoQuestFat());
		        
		        baseAnexo.setDhModificacao( new DateTime() );
			}
			
			/**
			 * Todos os dados a serem carregados na grid pelo form passam antes por este
			 * metodo. Para se fazer uma validacao...
			 * Recomenda-se que o bean em questao seja gerado nesta classe a partir dos
			 * parametros enviados da tela para se evitar um 'ReflectionUtils'
			 * 
			 * @param mapParameter 
			 * @param bean a ser istanciado
			 * @return Object bean instanciado
			 */
			public Object populateNewItemInstance(Map mapParameter, Object bean) {
				FaturaAnexo faturaAnexo = (FaturaAnexo) bean;				
				TypedFlatMap parameters = (TypedFlatMap) mapParameter;
				
		    	
		    	faturaAnexo.setIdFaturaAnexo( parameters.getLong("idFaturaAnexo") );
		    	faturaAnexo.setDsAnexo( parameters.getString("dsAnexo") );
		    	try {
					faturaAnexo.setDcArquivo(Base64Util.decode(parameters.getString("dcArquivo")));
				} catch (IOException e) {
					log.error(e);
				}
		    	faturaAnexo.setBlEnvAnexoQuestFat(parameters.getBoolean("blEnvAnexoQuestFat"));
				faturaAnexoService.prepareValuesToStore(faturaAnexo);
				return faturaAnexo;
			}			

    	};    	    		
		config.addItemConfig(FATURA_ANEXO_CONFIG_ALIAS,FaturaAnexo.class, itemInit, descComparator);
	}	
		
	public ResultSetPage findPaginatedItemFatura(Map parameters) {

		ResultSetPage rsp = findPaginatedItemList(parameters, "itemFatura");			
		List list = rsp.getList();			
		List listRet = new ArrayList();			
		
		for (Iterator iter = list.iterator(); iter.hasNext();){
			ItemFatura itemFatura = (ItemFatura)iter.next();		
			List listDescontos = itemFatura.getDevedorDocServFat().getDescontos();
			Map map = new TypedFlatMap();
			
			map.put("idItemFatura",itemFatura.getIdItemFatura());
			map.put("tpDocumentoServico",itemFatura.getDevedorDocServFat().getDoctoServico().getTpDocumentoServico());
			map.put("sgFilial",itemFatura.getDevedorDocServFat().getDoctoServico().getFilialByIdFilialOrigem().getSgFilial());
			map.put("nmFantasia",itemFatura.getDevedorDocServFat().getDoctoServico().getFilialByIdFilialOrigem().getPessoa().getNmFantasia());				
			map.put("nrDoctoServico",FormatUtils.formataNrDocumento(itemFatura.getDevedorDocServFat().getDoctoServico().getNrDoctoServico().toString(),itemFatura.getDevedorDocServFat().getDoctoServico().getTpDocumentoServico().getValue()));
			map.put("siglaSimbolo",itemFatura.getDevedorDocServFat().getDoctoServico().getMoeda().getSiglaSimbolo());
			map.put("siglaSimboloDesconto",itemFatura.getDevedorDocServFat().getDoctoServico().getMoeda().getSiglaSimbolo());
			map.put("vlTotalDocServico",itemFatura.getDevedorDocServFat().getVlDevido());
			map.put("idMoeda",itemFatura.getDevedorDocServFat().getDoctoServico().getMoeda().getIdMoeda());
			
			if (itemFatura.getDevedorDocServFat().getDivisaoCliente() != null){
				map.put("idDivisaoCliente",itemFatura.getDevedorDocServFat().getDivisaoCliente().getIdDivisaoCliente());
			}
			
			if (itemFatura.getDevedorDocServFat().getDoctoServico().getServico() != null){
				map.put("idServico",itemFatura.getDevedorDocServFat().getDoctoServico().getServico().getIdServico());
				map.put("tpModal",itemFatura.getDevedorDocServFat().getDoctoServico().getServico().getTpModal().getValue());		
				map.put("tpAbrangencia",itemFatura.getDevedorDocServFat().getDoctoServico().getServico().getTpAbrangencia().getValue());
			}
			
			
			map.put("idCliente",itemFatura.getDevedorDocServFat().getCliente().getIdCliente());			
			
			if (listDescontos != null && !listDescontos.isEmpty() && !"C".equals(((Desconto)listDescontos.get(0)).getTpSituacaoAprovacao().getValue())) {
				map.put("vlDesconto",((Desconto)listDescontos.get(0)).getVlDesconto());
				map.put("tpSituacaoAprovacao", ((Desconto)listDescontos.get(0)).getTpSituacaoAprovacao());
			} else {
				map.put("vlDesconto", BigDecimal.ZERO);
				map.put("tpSituacaoAprovacao", "A");
			}
			
			listRet.add(map);
		}
			
			rsp.setList(listRet);
		
		return rsp;
	}	
	
	public Integer getRowCountItemFatura(Map parameters){
		return getRowCountItemList(parameters, "itemFatura");
	}
	
	public Map findByIdItemFatura(MasterDetailKey key) {
		ItemFatura itemFatura = (ItemFatura)findItemById(key, "itemFatura");
		TypedFlatMap map = new TypedFlatMap();
		
		map.put("idItemFatura", itemFatura.getIdItemFatura());
		map.put("idCliente",itemFatura.getDevedorDocServFat().getCliente().getIdCliente());
		map.put("devedorDocServFat.idDevedorDocServFat",itemFatura.getDevedorDocServFat().getIdDevedorDocServFat());
		
		map.put("devedorDocServFat.doctoServico.nrDoctoServico",itemFatura.getDevedorDocServFat().getDoctoServico().getNrDoctoServico());
		map.put("devedorDocServFat.doctoServico.idDoctoServico",itemFatura.getDevedorDocServFat().getDoctoServico().getIdDoctoServico());
		map.put("devedorDocServFat.doctoServico.nrDoctoServicoTmp",itemFatura.getDevedorDocServFat().getDoctoServico().getNrDoctoServico());
		map.put("devedorDocServFat.doctoServico.vlTotalDocServico",itemFatura.getDevedorDocServFat().getVlDevido());
		map.put("devedorDocServFat.doctoServico.tpDocumentoServico.description",itemFatura.getDevedorDocServFat().getDoctoServico().getTpDocumentoServico().getDescription());
		map.put("devedorDocServFat.doctoServico.tpDocumentoServico.value",itemFatura.getDevedorDocServFat().getDoctoServico().getTpDocumentoServico().getValue());
		map.put("devedorDocServFat.doctoServico.moeda.idMoeda",itemFatura.getDevedorDocServFat().getDoctoServico().getMoeda().getIdMoeda());		
		map.put("devedorDocServFat.doctoServico.filialByIdFilialOrigem.idFilial",itemFatura.getDevedorDocServFat().getDoctoServico().getFilialByIdFilialOrigem().getIdFilial());
		map.put("devedorDocServFat.doctoServico.filialByIdFilialOrigem.sgFilial",itemFatura.getDevedorDocServFat().getDoctoServico().getFilialByIdFilialOrigem().getSgFilial());
		map.put("devedorDocServFat.doctoServico.filialByIdFilialOrigem.pessoa.nmFantasia",itemFatura.getDevedorDocServFat().getDoctoServico().getFilialByIdFilialOrigem().getPessoa().getNmFantasia());		
		if (itemFatura.getDevedorDocServFat().getDesconto() != null) {
			map.put("devedorDocServFat.desconto.idDesconto",((Desconto)itemFatura.getDevedorDocServFat().getDescontos().get(0)).getIdDesconto());				
			map.put("devedorDocServFat.desconto.tpSituacaoAprovacao",((Desconto)itemFatura.getDevedorDocServFat().getDescontos().get(0)).getTpSituacaoAprovacao().getValue());
			map.put("devedorDocServFat.desconto.vlDesconto",((Desconto)itemFatura.getDevedorDocServFat().getDescontos().get(0)).getVlDesconto());
			if(itemFatura.getDevedorDocServFat().getDesconto().getMotivoDesconto() != null){
				map.put("devedorDocServFat.desconto.motivoDesconto.idMotivoDescontoItem",itemFatura.getDevedorDocServFat().getDesconto().getMotivoDesconto().getIdMotivoDesconto());
			}
			map.put("devedorDocServFat.desconto.obDesconto",((Desconto)itemFatura.getDevedorDocServFat().getDescontos().get(0)).getObDesconto());
		}
		
		
		return map;
	}	
	
	
	/**
	 * Find da tag Devedor
	 * */
	public List findDevedorServDocFat(TypedFlatMap map){
		DevedorDocServFatLookupParam devedorDocServFatLookupParam = new DevedorDocServFatLookupParam();
		
		devedorDocServFatLookupParam.setIdFilial(map.getLong("doctoServico.filialByIdFilialOrigem.idFilial"));
		devedorDocServFatLookupParam.setNrDocumentoServico(map.getLong("doctoServico.nrDoctoServico"));
		devedorDocServFatLookupParam.setTpDocumentoServico(map.getString("doctoServico.tpDocumentoServico"));
		devedorDocServFatLookupParam.setIdCliente(map.getLong("cliente.idCliente"));
		devedorDocServFatLookupParam.setIdMoeda(map.getLong("idMoeda"));
		devedorDocServFatLookupParam.setIdServico(map.getLong("idServico"));
		devedorDocServFatLookupParam.setTpModal(map.getString("tpModal"));
		devedorDocServFatLookupParam.setTpAbrangencia(map.getString("tpAbrangencia"));
		devedorDocServFatLookupParam.setTpSituacaoDevedorDocServFatValido(map.getInteger("tpSituacaoDevedorDocServFatValido"));
		devedorDocServFatLookupParam.setTpFrete(map.getString("tpFrete"));
		devedorDocServFatLookupParam.setIdDivisaoCliente(map.getLong("idDivisaoCliente"));
		
		if (devedorDocServFatLookupParam.getIdCliente() != null){
			Cliente cliente = clienteService.findByIdComPessoa(devedorDocServFatLookupParam.getIdCliente());			
			devedorDocServFatLookupParam.setCliente(cliente);
			
			/*Se o indicador BL_SEPARA_FATURA_MODAL for diferente de S remove os campos abaixo da consulta*/
			if(cliente.getBlSeparaFaturaModal() != null && !cliente.getBlSeparaFaturaModal()){
				devedorDocServFatLookupParam.setTpModal(null);
				devedorDocServFatLookupParam.setIdServico(null);
				devedorDocServFatLookupParam.setTpFrete(null);
				devedorDocServFatLookupParam.setIdDivisaoCliente(null);				
		}
		
		}
		
		List list = this.devedorDocServFatLookUpService.findDevedorDocServFat(devedorDocServFatLookupParam, "LMS-36006");
			
		List listRet = new ArrayList();			
		
		for (Iterator iter = list.iterator(); iter.hasNext();){
			Map mapRet = (Map)iter.next();		
			
			mapRet.put("devedorDocServFat.desconto.idDesconto",mapRet.get("idDesconto"));
			mapRet.put("devedorDocServFat.doctoServico.filialByIdFilialOrigem.pessoa.nmFantasia",mapRet.get("nmFantasia"));
			mapRet.put("tpModal",((DomainValue)mapRet.get("tpModal")).getValue());
			mapRet.put("tpAbrangencia",((DomainValue)mapRet.get("tpAbrangencia")).getValue());

			listRet.add(mapRet);
		}
		
		return AliasToNestedMapResultTransformer.getInstance().transformListResult(listRet);
	}		
	
	
	
		
	public List findLookupFilial(TypedFlatMap map){
		return this.getFilialService().findLookup(map);
	}
	
	public List findLookupFilialCobradora(TypedFlatMap map){
		return this.getFilialService().findLookup(map);
	}
	
	public List findLookupCliente(Map criteria){
		List lstCliente = this.getClienteService().findLookup(criteria);
		TypedFlatMap mapRetorno = null;
		if (lstCliente != null && lstCliente.size() == 1){
			Cliente cliente = (Cliente)lstCliente.get(0);
			
			mapRetorno = new TypedFlatMap();
			
			mapRetorno.put("pessoa.nrIdentificacaoFormatado", cliente.getPessoa().getNrIdentificacaoFormatado());
			mapRetorno.put("idCliente", cliente.getIdCliente());
			mapRetorno.put("pessoa.nmPessoa", cliente.getPessoa().getNmPessoa());
			mapRetorno.put("blReemitirFatura", getFaturaService().isCnpjIsIn(cliente.getPessoa().getNrIdentificacao()));
			lstCliente = new ArrayList();
			
			lstCliente.add(mapRetorno);
		}

		return lstCliente;
	}

	public List findComboCedentes(TypedFlatMap criteria){
		return this.getCedenteService().findComboValues(criteria);
	}	
	
	public List findComboCedentesActive(TypedFlatMap criteria){
		Long idFatura = criteria.getLong("faturas.idFatura");
		
    	List rs = getCedenteService().findCedenteAtivoByIdFatura(idFatura);
    	List retorno = new ArrayList();
    	
		for(Iterator iter = rs.iterator(); iter.hasNext();) {
			Cedente cedente = (Cedente)iter.next();
			Map mapRetorno = new HashMap();
			mapRetorno.put("idCedente", cedente.getIdCedente());
			mapRetorno.put("comboText", cedente.getDsCedente());
			retorno.add(mapRetorno);
		}
    	return retorno;
	}	
	
	public List findComboDivisaoCliente(TypedFlatMap criteria){
		if (criteria != null && criteria.getLong("idCliente") != null){
			return this.getDivisaoClienteService().findByIdClienteMatriz(populateDivisaoClienteParam(criteria));
		} else {
			return new ArrayList();
		}
	}	
	
	/**
	 * Popula a DivisaoClienteparam para ser usado como filtro na busca por divisao
	 *
	 * @author Hector Julian Esnaola Junior
	 * @since 24/01/2007
	 *
	 * @param tfm
	 * @return
	 *
	 */
	public DivisaoClienteParam populateDivisaoClienteParam(TypedFlatMap tfm){
		
		DivisaoClienteParam dcp = new DivisaoClienteParam();
		
		dcp.setIdCliente(tfm.getLong("idCliente"));
		dcp.setIdDivisaoCliente(tfm.getLong("idDivisao"));
		dcp.setTpModal(tfm.getString("tpModal"));
		dcp.setTpAbrangencia(tfm.getString("tpAbrangencia"));
		
		return dcp;		
	}
	
	public List findComboTipoAgrupamento(TypedFlatMap criteria){
		if (criteria.getLong("agrupamentoCliente.idAgrupamentoCliente") != null){
			return this.getTipoAgrupamentoService().find(criteria);
		} else {
			return null;
		}
	}	
	
	public void mountFaturaInSesion(TypedFlatMap criteria){
		MasterEntry entry = getMasterFromSession(criteria.getLong("idFatura"), true);
		mountFatura((Fatura)entry.getMaster(), criteria);
	}
	
	public List findAgrupamentoCliente(Map criteria){
		return this.getAgrupamentoClienteService().find(criteria);
	}
	
	public List findLookupCotacaoMoeda(TypedFlatMap criteria){
		return this.getCotacaoMoedaService().findLookup(criteria);
	}
	
	public FilialService getFilialService() {
		return filialService;
	}

	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}

	public ClienteService getClienteService() {
		return clienteService;
	}

	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}

	public CedenteService getCedenteService() {
		return cedenteService;
	}

	public void setCedenteService(CedenteService cedenteService) {
		this.cedenteService = cedenteService;
	}

	public DivisaoClienteService getDivisaoClienteService() {
		return divisaoClienteService;
	}

	public void setDivisaoClienteService(DivisaoClienteService divisaoClienteService) {
		this.divisaoClienteService = divisaoClienteService;
	}

	public TipoAgrupamentoService getTipoAgrupamentoService() {
		return tipoAgrupamentoService;
	}

	public void setTipoAgrupamentoService(
			TipoAgrupamentoService tipoAgrupamentoService) {
		this.tipoAgrupamentoService = tipoAgrupamentoService;
	}

	public AgrupamentoClienteService getAgrupamentoClienteService() {
		return agrupamentoClienteService;
	}

	public void setAgrupamentoClienteService(
			AgrupamentoClienteService agrupamentoClienteService) {
		this.agrupamentoClienteService = agrupamentoClienteService;
	}

	public CotacaoMoedaService getCotacaoMoedaService() {
		return cotacaoMoedaService;
	}

	public void setCotacaoMoedaService(CotacaoMoedaService cotacaoMoedaService) {
		this.cotacaoMoedaService = cotacaoMoedaService;
	}

	public void setFaturaService(FaturaService faturaService) {
		super.setMasterService(faturaService);
	}
	
	public FaturaService getFaturaService() {
		return (FaturaService)super.getMasterService();
	}

	public DomainValueService getDomainValueService() {
		return domainValueService;
	}

	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}		

	public List findLookupServiceDocumentFilialCTR(TypedFlatMap map) {
		return filialService.findLookupBySgFilial(map);
	}

	public List findLookupServiceDocumentFilialCRT(TypedFlatMap criteria) {
		return filialService.findLookupBySgFilial(criteria);
	}

	public List findLookupServiceDocumentFilialNFS(TypedFlatMap criteria) {
		return filialService.findLookupBySgFilial(criteria);
	}

	public List findLookupServiceDocumentFilialNFT(TypedFlatMap criteria) {
		return null;
	}

	public List findLookupServiceDocumentFilialMDA(TypedFlatMap criteria) {
		return null;
	}

	public List findLookupServiceDocumentFilialRRE(TypedFlatMap criteria) {
		return null;
	}

	public List findLookupServiceDocumentFilialNDN(TypedFlatMap criteria) {
		return filialService.findLookupBySgFilial(criteria);
	}

	/**
	 * Zera o desconto da fatura.
	 *
	 * @author Hector Julian Esnaola Junior
	 * @since 19/07/2007
	 *
	 * @param tfm
	 *
	 */
	public Map zerarDescontoFatura(TypedFlatMap tfm){
		Long idFatura = tfm.getLong("idFatura");
		zerarDescontoService.executeProcess(idFatura); 
		return findById(idFatura);
	}
	
	public List findLookupServiceDocumentNumberCRT(TypedFlatMap criteria) {
		return devedorDocServFatService.findNrDocumentoCRT(criteria);
	}

	public List findLookupServiceDocumentNumberNFS(TypedFlatMap criteria) {
		return devedorDocServFatService.findNrDocumentoNFS(criteria);
	}

	public List findLookupServiceDocumentNumberNFT(TypedFlatMap criteria) {
		return null;
	}

	public List findLookupServiceDocumentNumberMDA(TypedFlatMap criteria) {
		return null;
	}

	public List findLookupServiceDocumentNumberRRE(TypedFlatMap criteria) {
		return null;
	}

	public List findLookupServiceDocumentNumberNDN(TypedFlatMap criteria) {
		return devedorDocServFatService.findNrDocumentoNDN(criteria);
	}

    public Object findAnexos(MasterDetailKey key) {
    	FaturaAnexo faturaAnexo = (FaturaAnexo) findItemById(key, FATURA_ANEXO_CONFIG_ALIAS);    	
    	TypedFlatMap mapItemMda = new TypedFlatMap();   		
    	
    	mapItemMda.put("idFaturaAnexo",faturaAnexo.getIdFaturaAnexo()); 
		mapItemMda.put("dsAnexo", faturaAnexo.getDsAnexo());
		mapItemMda.put("dcArquivo", Base64Util.encode(faturaAnexo.getDcArquivo()) );
		mapItemMda.put("blEnvAnexoQuestFat", faturaAnexo.getBlEnvAnexoQuestFat());
		
		return mapItemMda;   	
    }    	

	public DevedorDocServFatService getDevedorDocServFatService() {
		return devedorDocServFatService;
	}

	public void setDevedorDocServFatService(
			DevedorDocServFatService devedorDocServFatService) {
		this.devedorDocServFatService = devedorDocServFatService;
	}

	public DescontoService getDescontoService() {
		return descontoService;
	}

	public void setDescontoService(DescontoService descontoService) {
		this.descontoService = descontoService;
	}

	public DevedorDocServFatLookUpService getDevedorDocServFatLookUpService() {
		return devedorDocServFatLookUpService;
	}

	public void setDevedorDocServFatLookUpService(
			DevedorDocServFatLookUpService devedorDocServFatLookUpService) {
		this.devedorDocServFatLookUpService = devedorDocServFatLookUpService;
	}
	public void setBoletoService(BoletoService boletoService) {
		this.boletoService = boletoService;
	}

	public void setRedecoService(RedecoService redecoService) {
		this.redecoService = redecoService;
	}

	public void setReciboService(ReciboService reciboService) {
		this.reciboService = reciboService;
	}

	public void setGerarFaturaFaturaService(
			GerarFaturaFaturaService gerarFaturaFaturaService) {
		this.gerarFaturaFaturaService = gerarFaturaFaturaService;
	}

	public void setDataVencimentoService(DataVencimentoService dataVencimentoService) {
		this.dataVencimentoService = dataVencimentoService;
	}

	public void setConhecimentoService(ConhecimentoService conhecimentoService) {
		this.conhecimentoService = conhecimentoService;
	}

	public void setHistoricoFilialService(
			HistoricoFilialService historicoFilialService) {
		this.historicoFilialService = historicoFilialService;
	}

	public void setZerarDescontoService(ZerarDescontoService zerarDescontoService) {
		this.zerarDescontoService = zerarDescontoService;
	}

	public void setFaturaAnexoService(FaturaAnexoService faturaAnexoService) {
		this.faturaAnexoService = faturaAnexoService;
	}
	
	public FaturaAnexoService getFaturaAnexoService() {
		return faturaAnexoService;
	}
	
	public void clearSessionItens(){
		super.removeMasterFromSession();
}

}

