package com.mercurio.lms.pendencia.swt.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.mercurio.adsm.framework.model.CrudAction;
import com.mercurio.adsm.framework.model.ResultSetPage;
import com.mercurio.adsm.framework.model.service.DomainValueService;
import com.mercurio.adsm.framework.util.TypedFlatMap;
import com.mercurio.lms.carregamento.model.Manifesto;
import com.mercurio.lms.carregamento.model.PreManifestoDocumento;
import com.mercurio.lms.carregamento.model.service.ManifestoService;
import com.mercurio.lms.carregamento.model.service.PreManifestoDocumentoService;
import com.mercurio.lms.configuracoes.model.EnderecoPessoa;
import com.mercurio.lms.configuracoes.model.service.MoedaService;
import com.mercurio.lms.configuracoes.model.service.SetorService;
import com.mercurio.lms.expedicao.model.service.NaturezaProdutoService;
import com.mercurio.lms.municipios.model.Filial;
import com.mercurio.lms.municipios.model.service.FilialService;
import com.mercurio.lms.pendencia.model.ItemMda;
import com.mercurio.lms.pendencia.model.Mda;
import com.mercurio.lms.pendencia.model.service.ItemMdaService;
import com.mercurio.lms.pendencia.model.service.MdaService;
import com.mercurio.lms.util.FormatUtils;
import com.mercurio.lms.util.session.SessionUtils;
import com.mercurio.lms.vendas.model.Cliente;
import com.mercurio.lms.vendas.model.service.ClienteService;

import com.mercurio.adsm.framework.annotations.ParametrizedAttribute;


/**
 * Generated by: ADSM ActionGenerator
 *  
 * Não inserir documentação após ou remover a tag do XDoclet a seguir.
 * O valor do <code>id</code> informado abaixo deve ser utilizado para referenciar este serviço.
 * @spring.bean id="lms.pendencia.swt.consultarMDAAction"
 */

public class ConsultarMDAAction extends CrudAction {
	private ItemMdaService itemMdaService;
	private ClienteService clienteService;
	private FilialService filialService;
	private SetorService setorService;
	private MoedaService moedaService;
	private NaturezaProdutoService naturezaProdutoService;
	private DomainValueService domainValueService;
	private PreManifestoDocumentoService preManifestoDocumentoService;
	private ManifestoService manifestoService;
	
	
	public void setMdaService(MdaService mdaService) {
		this.defaultService = mdaService;
	}
	public MdaService getMdaService() {
		return ((MdaService)defaultService);
	}
	
    public void removeById(java.lang.Long id) {
        ((MdaService)defaultService).removeById(id);
    }
	/**
	 *
	 */
	@ParametrizedAttribute(type = java.lang.Long.class)
    public void removeByIds(List ids) {
    	((MdaService)defaultService).removeByIds(ids);
    }

    /**
     * Método que retorna um object de MDA a partir do ID do registro selecionado.
     * 
     * @param long id
     * @return Object
     */
    public Object findById(Long id) {
    	Mda mda = ((MdaService)defaultService).findMdaByIdDoctoServico(id);
    	
    	TypedFlatMap mapMda = new TypedFlatMap();
		    	
		mapMda.put("idDoctoServico", mda.getIdDoctoServico());		
		mapMda.put("siglaNrDoctoServico", FormatUtils.formatSgFilialWithLong(mda.getFilialByIdFilialOrigem().getSgFilial(), mda.getNrDoctoServico()));
		mapMda.put("nrDoctoServico", mda.getNrDoctoServico());
		mapMda.put("tpStatusMda.value", mda.getTpStatusMda().getValue());
		mapMda.put("tpStatusMda.description", mda.getTpStatusMda().getDescription());
		
		if (mda.getLocalizacaoMercadoria() != null) {
			String dsLocalizacaoMercadoria = mda.getLocalizacaoMercadoria().getDsLocalizacaoMercadoria().getValue();
			if (mda.getObComplementoLocalizacao() != null){
				dsLocalizacaoMercadoria += " " + mda.getObComplementoLocalizacao();
			}
			mapMda.put("localizacaoMercadoria.dsLocalizacaoMercadoria", dsLocalizacaoMercadoria);
		}
		
		if (mda.getClienteByIdClienteConsignatario() != null) {
			mapMda.put("clienteByIdClienteConsignatario.pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(mda.getClienteByIdClienteConsignatario().getPessoa()));
			mapMda.put("clienteByIdClienteConsignatario.pessoa.nmPessoa", mda.getClienteByIdClienteConsignatario().getPessoa().getNmPessoa());
		}
				
		mapMda.put("moeda1.siglaSimbolo", mda.getMoeda().getSiglaSimbolo());
		mapMda.put("vlTotalDocServico", mda.getVlTotalDocServico());
		mapMda.put("moeda2.siglaSimbolo", mda.getMoeda().getSiglaSimbolo());
		mapMda.put("vlMercadoria", mda.getVlMercadoria());
		
		if (mda.getDhRecebimento() == null) {
			if (mda.getDhRecebimentoMatriz() != null) {
				mapMda.put("dataEntrega", mda.getDhRecebimentoMatriz());
			}
		} else {
			mapMda.put("dataEntrega", mda.getDhRecebimento());
		}		
		
		mapMda.put("obMda", mda.getObMda());
		mapMda.put("tpRemetenteMda", mda.getTpRemetenteMda().getDescription());
		
		if (mda.getFilialByIdFilialOrigem() != null) {
			mapMda.put("filialByIdFilialOrigem.idFilial", mda.getFilialByIdFilialOrigem().getIdFilial());
			mapMda.put("filialByIdFilialOrigem.sgFilial", mda.getFilialByIdFilialOrigem().getSgFilial());
			mapMda.put("filialByIdFilialOrigem.pessoa.nmFantasia", mda.getFilialByIdFilialOrigem().getPessoa().getNmFantasia());
		}
		
		if (mda.getClienteByIdClienteRemetente() != null) {
			mapMda.put("clienteByIdClienteRemetente.pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(mda.getClienteByIdClienteRemetente().getPessoa()));
			mapMda.put("clienteByIdClienteRemetente.pessoa.nmPessoa", mda.getClienteByIdClienteRemetente().getPessoa().getNmPessoa());
		}
		
		if (mda.getEnderecoRemetente() != null) {
			EnderecoPessoa endereco = mda.getEnderecoRemetente();
			String enderecoCompleto = endereco.getDsEndereco() + ", nº.: " + endereco.getNrEndereco();
			if(endereco.getDsComplemento() != null) {
				enderecoCompleto += " / compl.: " + endereco.getDsComplemento();
			}
			if(endereco.getDsBairro() != null) {
				enderecoCompleto += "\nBairro: " + endereco.getDsBairro();
			}			
			enderecoCompleto += "\nCEP: " + endereco.getNrCep();
						
			mapMda.put("enderecoRemetente.enderecoCompleto", enderecoCompleto);			
			mapMda.put("enderecoRemetente.municipio.nmMunicipio", endereco.getMunicipio().getNmMunicipio());
			mapMda.put("enderecoRemetente.municipio.unidadeFederativa.sgUnidadeFederativa", 
													endereco.getMunicipio().getUnidadeFederativa().getSgUnidadeFederativa());						
		}
		
		mapMda.put("tpDestinatarioMda", mda.getTpDestinatarioMda().getDescription());
				
		if (mda.getFilialByIdFilialDestino() != null) {
			mapMda.put("filialByIdFilialDestino.sgFilial", mda.getFilialByIdFilialDestino().getSgFilial());
			mapMda.put("filialByIdFilialDestino.pessoa.nmFantasia", mda.getFilialByIdFilialDestino().getPessoa().getNmFantasia());
		}
		
		if (mda.getClienteByIdClienteDestinatario() != null) {
			mapMda.put("clienteByIdClienteDestinatario.pessoa.nrIdentificacaoFormatado", FormatUtils.formatIdentificacao(mda.getClienteByIdClienteDestinatario().getPessoa()));
			mapMda.put("clienteByIdClienteDestinatario.pessoa.nmPessoa", mda.getClienteByIdClienteDestinatario().getPessoa().getNmPessoa());
		}
		
		if (mda.getSetor() != null) {
			mapMda.put("setor.dsSetor", mda.getSetor().getDsSetor());
		}
		
		if (mda.getUsuarioByIdUsuarioDestino() != null) {
			mapMda.put("usuarioByIdUsuarioDestino.nrMatricula", mda.getUsuarioByIdUsuarioDestino().getNrMatricula());
			mapMda.put("usuarioByIdUsuarioDestino.nmUsuario", mda.getUsuarioByIdUsuarioDestino().getNmUsuario());
		}
		
		if (mda.getEnderecoDestinatario() != null) {
			EnderecoPessoa endereco = mda.getEnderecoDestinatario();
			String enderecoCompleto = endereco.getDsEndereco() + ", nº.: " + endereco.getNrEndereco();
			if(endereco.getDsComplemento() != null) {
				enderecoCompleto += " / compl.: " + endereco.getDsComplemento();
			}
			if(endereco.getDsBairro() != null) {
				enderecoCompleto += "\nBairro: " + endereco.getDsBairro();
			}
			enderecoCompleto += "\nCEP: " + endereco.getNrCep();			

			mapMda.put("enderecoDestinatario.enderecoCompleto", enderecoCompleto);			
			mapMda.put("enderecoDestinatario.municipio.nmMunicipio", endereco.getMunicipio().getNmMunicipio());
			mapMda.put("enderecoDestinatario.municipio.unidadeFederativa.sgUnidadeFederativa", 
													endereco.getMunicipio().getUnidadeFederativa().getSgUnidadeFederativa());						
		}
		
		return mapMda;    	
    }
    
    public Object findByIdItemMda(TypedFlatMap map) {
    	Long idItemMda = map.getLong("detailId");
    	
    	ItemMda itemMda = this.getItemMdaService().findItemMdaById(idItemMda);
		TypedFlatMap mapItemMda = new TypedFlatMap();
		
		mapItemMda.put("idItemMda", itemMda.getIdItemMda());
		if (itemMda.getDoctoServico() != null) {
			mapItemMda.put("doctoServico.tpDocumentoServico", itemMda.getDoctoServico().getTpDocumentoServico().getDescription());
			mapItemMda.put("doctoServico.filialByIdFilialOrigem.sgFilial", itemMda.getDoctoServico().getFilialByIdFilialOrigem().getSgFilial());
			mapItemMda.put("doctoServico.nrDoctoServico", itemMda.getDoctoServico().getNrDoctoServico());
		}		
		mapItemMda.put("naturezaProduto.dsNaturezaProduto", itemMda.getNaturezaProduto().getDsNaturezaProduto());
		mapItemMda.put("qtVolumes", itemMda.getQtVolumes());
		mapItemMda.put("psItem", itemMda.getPsItem());
		mapItemMda.put("moeda.siglaSimbolo", itemMda.getMoeda().getSiglaSimbolo());
		mapItemMda.put("vlMercadoria", itemMda.getVlMercadoria());
		mapItemMda.put("dsMercadoria", itemMda.getDsMercadoria());
		mapItemMda.put("obItemMda", itemMda.getObItemMda());
		
		return mapItemMda;
    }
    

    
	public List findLookupFilial(Map criteria) {
		return this.getFilialService().findLookup(criteria); 
	}
	
	public List findLookupCliente(Map criteria) {
		Map nrIdentificacao = new HashMap();
		nrIdentificacao.put("nrIdentificacao", criteria.get("nrIdentificacao"));
		criteria.put("pessoa", nrIdentificacao);
		criteria.remove("nrIdentificacao");
		
		List listReturn = new ArrayList();
		List listResult = this.getClienteService().findLookup(criteria);		
		for (Iterator iter = listResult.iterator(); iter.hasNext();) {
			Cliente cliente = (Cliente) iter.next();
			Map mapReturn = new HashMap();
			mapReturn.put("idCliente", cliente.getIdCliente());
			mapReturn.put("nrIdentificacao", FormatUtils.formatIdentificacao(cliente.getPessoa()));
			mapReturn.put("nmPessoa", cliente.getPessoa().getNmPessoa());			
			listReturn.add(mapReturn);			
		}
		return listReturn;
	}
	
	public List findSetor(Map criteria) {
		return this.getSetorService().find(criteria);
	}
	
	public List findMoeda(Map criteria) {		
		return this.getMoedaService().find(criteria);
	}
	
	public List findNaturezaProduto(Map criteria) {		
		return this.getNaturezaProdutoService().find(criteria);
	}	
	
	/**
	 * Busca os tipos de documento serviço.
	 * @param criteria
	 * @return
	 */
    public List findTipoDocumentoServico(TypedFlatMap criteria) {
    	List dominiosValidos = new ArrayList();
    	dominiosValidos.add("CTR");
    	dominiosValidos.add("CRT");
    	dominiosValidos.add("NFT");
    	dominiosValidos.add("MDA");
    	dominiosValidos.add("RRE");
    	List retorno = this.getDomainValueService().findByDomainNameAndValues("DM_TIPO_DOCUMENTO_SERVICO", dominiosValidos);
    	return retorno;
    }	
	
		
	/**
	 * Pega o usuario logado na sessão com sua respectiva filial. 
	 */
	public TypedFlatMap getDadosSessao() {
		TypedFlatMap map = new TypedFlatMap();
		Boolean blMatriz = Boolean.FALSE;
		
		Filial filial = SessionUtils.getFilialSessao();
		
		// Verifica se a filial em questão é uma Matriz.
		blMatriz = Boolean.valueOf(SessionUtils.isFilialSessaoMatriz());
		
		map.put("blMatriz", blMatriz);
		map.put("idFilialSessao", filial.getIdFilial());
		map.put("sgFilialSessao", filial.getSgFilial());
		map.put("nmFilialSessao", filial.getPessoa().getNmFantasia());
						
		return map;
	}		

	
    /**
     * Retorna um ResultSetPage com os objetos de MDA a serem mostrados na grid.
     * 
     * @param TypedFlatMap criteria
     * @return
     */
    public ResultSetPage findPaginatedMda(TypedFlatMap criteria) {
    	criteria.put("filialByIdFilialDestino.idFilial", criteria.get("idFilialDestino"));
    	criteria.put("filialByIdFilialOrigem.idFilial", criteria.get("idFilialMDA"));
    	criteria.put("clienteByIdClienteRemetente.idCliente", criteria.get("idClienteRemetente"));
    	criteria.put("clienteByIdClienteDestinatario.idCliente", criteria.get("idClienteDestinatario"));
    	criteria.put("clienteByIdClienteConsignatario.idCliente", criteria.get("idClienteConsignatario"));
    	criteria.put("setor", criteria.get("idSetor"));    	    	    	
    	    	
    	ResultSetPage resultSetPage = this.getMdaService().findPaginatedMda(criteria);
    	
    	List listMda = new ArrayList();
    	for (Iterator iter = resultSetPage.getList().iterator(); iter.hasNext();) {
			Mda mda = (Mda) iter.next();			
    		TypedFlatMap mapMda = new TypedFlatMap();    		
    		
    		mapMda.put("idDoctoServico", mda.getIdDoctoServico());
    		mapMda.put("nrDoctoServico", mda.getNrDoctoServico());
    		mapMda.put("dhEmissao", mda.getDhEmissao());
    		mapMda.put("dhRecebimento", mda.getDhRecebimento());
    		mapMda.put("dhCancelamento", mda.getDhCancelamento());
    		mapMda.put("tpRemetenteMda.description", mda.getTpRemetenteMda().getDescription());
    		mapMda.put("tpRemetenteMda.value", mda.getTpRemetenteMda().getValue());
    		mapMda.put("tpRemetenteMda.status", mda.getTpRemetenteMda().getStatus());    		
    		mapMda.put("tpDestinatarioMda.description", mda.getTpDestinatarioMda().getDescription());
    		mapMda.put("tpDestinatarioMda.value", mda.getTpDestinatarioMda().getValue());
    		mapMda.put("tpDestinatarioMda.status", mda.getTpDestinatarioMda().getStatus());
    		mapMda.put("tpStatusMda.description", mda.getTpStatusMda().getDescription());
    		mapMda.put("tpStatusMda.value", mda.getTpStatusMda().getValue());
    		mapMda.put("tpStatusMda.status", mda.getTpStatusMda().getStatus());
    		mapMda.put("tpStatusMda", mda.getTpStatusMda().getDescription());
    		    		
    		
    		mapMda.put("moeda.siglaSimbolo", mda.getMoeda().getSiglaSimbolo());
    		mapMda.put("vlTotalDocServico", mda.getVlTotalDocServico());
    		
    		if (mda.getFilialByIdFilialOrigem() != null) {
    			mapMda.put("idFilialOrigem", mda.getFilialByIdFilialOrigem().getIdFilial());
    			mapMda.put("sgFilialOrigem", mda.getFilialByIdFilialOrigem().getSgFilial());    			
			}    		
    		if (mda.getFilialByIdFilialDestino() != null) {
    			mapMda.put("idFilialDestino", mda.getFilialByIdFilialDestino().getIdFilial());
    			mapMda.put("sgFilialDestino", mda.getFilialByIdFilialDestino().getSgFilial());
			}
       		if (mda.getClienteByIdClienteRemetente() != null) {
    			mapMda.put("idClienteRemetente", mda.getClienteByIdClienteRemetente().getIdCliente());
    			mapMda.put("nmPessoaClienteRemetente", mda.getClienteByIdClienteRemetente().getPessoa().getNmPessoa());
			}
    		if (mda.getClienteByIdClienteDestinatario() != null) {
    			mapMda.put("idClienteDestinatario", mda.getClienteByIdClienteDestinatario().getIdCliente());
    			mapMda.put("nmPessoaClienteDestinatario", mda.getClienteByIdClienteDestinatario().getPessoa().getNmPessoa());
			}
    		if (mda.getClienteByIdClienteConsignatario() != null) {
    			mapMda.put("idClienteConsignatario", mda.getClienteByIdClienteConsignatario().getIdCliente());
    			mapMda.put("nmPessoaClienteConsignatario", mda.getClienteByIdClienteConsignatario().getPessoa().getNmPessoa());
			}
    		if (mda.getLocalizacaoMercadoria() != null) {
    			mapMda.put("idLocalizacaoMercadoria", mda.getLocalizacaoMercadoria().getIdLocalizacaoMercadoria());
    			String dsLocalizacaoMercadoria = mda.getLocalizacaoMercadoria().getDsLocalizacaoMercadoria().getValue();
   				if (mda.getObComplementoLocalizacao() != null){
   					dsLocalizacaoMercadoria += " " + mda.getObComplementoLocalizacao();
   				}
    			mapMda.put("dsLocalizacaoMercadoria", dsLocalizacaoMercadoria);
			}
    		if (mda.getNmRecebedorCliente() != null) {
    			mapMda.put("nmRecebedorCliente", mda.getNmRecebedorCliente());
			}    		
    		
			if (mda.getDhRecebimento() == null) {
				if (mda.getDhRecebimentoMatriz() != null) {
					mapMda.put("dataEntrega", mda.getDhRecebimentoMatriz());
				}
			} else {
				mapMda.put("dataEntrega", mda.getDhRecebimento());
			}
			
    		/*
    		 * Busca o PreManifestoDocumento e verifica se existe um documento associado a um manifesto.
    		 * Caso não exista, retorna TRUE. Caso exista, verifica se o manifesto possui tpStatusManifesto igual
    		 * a 'CA', 'EC' ou 'PM'.
    		 */
    		if (mda.getTpStatusMda().getValue().equals("E")) {
	    		List listPreManifestoDocto = this.getPreManifestoDocumentoService().
	    														findPreManifestoDocumentoByIdDoctoServico(mda.getIdDoctoServico());
	    		if (listPreManifestoDocto.isEmpty()) {
	    			mapMda.put("blManifesto", Boolean.TRUE);
	    		} else if (listPreManifestoDocto.size() > 0) {
	    			for (Iterator iterator = listPreManifestoDocto.iterator(); iterator.hasNext();) {
	    				PreManifestoDocumento preManifestoDocumento = (PreManifestoDocumento) iterator.next();
						Manifesto manifesto = this.getManifestoService().findByIdInitLazyProperties(preManifestoDocumento.getManifesto().getIdManifesto(), false);
						if ( manifesto.getTpStatusManifesto().getValue().equals("CA") || 
								manifesto.getTpStatusManifesto().getValue().equals("EC") ||
									manifesto.getTpStatusManifesto().getValue().equals("PM") ) {
							mapMda.put("blManifesto", Boolean.TRUE);
						}
					}
	    		}
    		}			
			
			listMda.add(mapMda);
		}
    	
    	resultSetPage.setList(listMda);
    	
    	return resultSetPage;
    }
    
    /**
     * Faz a consulta ao banco, retornando o numero de registros encontrados 
     * para determinados parametros.
     * 
     * @param TypedFlatMap criteria
     * @return
     */
    public Integer getRowCountMda(TypedFlatMap criteria) {
    	criteria.put("filialByIdFilialDestino.idFilial", criteria.get("idFilialDestino"));
    	criteria.put("filialByIdFilialOrigem.idFilial", criteria.get("idFilialMDA"));
    	criteria.put("clienteByIdClienteRemetente.idCliente", criteria.get("idClienteRemetente"));
    	criteria.put("clienteByIdClienteDestinatario.idCliente", criteria.get("idClienteDestinatario"));
    	criteria.put("clienteByIdClienteConsignatario.idCliente", criteria.get("idClienteConsignatario"));
    	criteria.put("setor", criteria.get("idSetor"));    	    	    	
    	return this.getMdaService().getRowCountMda(criteria);
    }	
	
	
    /**
     * Retorna um ResultSetPage com os objetos de ItemMDA a serem mostrados na grid.
     * 
     * @param TypedFlatMap criteria
     * @return
     */
    public ResultSetPage findPaginatedItemMda(TypedFlatMap criteria) {
    	ResultSetPage resultSetPage = this.getItemMdaService().findPaginatedItemMda(criteria);
    	
    	List listItemMda = new ArrayList();
    	for (Iterator iter = resultSetPage.getList().iterator(); iter.hasNext();) {
    		ItemMda itemMda = (ItemMda) iter.next();			
    		TypedFlatMap mapItemMda = new TypedFlatMap();
    		
    		mapItemMda.put("idItemMda", itemMda.getIdItemMda());
    		if (itemMda.getDoctoServico() != null) {
        		mapItemMda.put("doctoServico.tpDocumentoServico.description", itemMda.getDoctoServico().getTpDocumentoServico().getDescription());
        		mapItemMda.put("doctoServico.tpDocumentoServico.value", itemMda.getDoctoServico().getTpDocumentoServico().getValue());
        		mapItemMda.put("doctoServico.tpDocumentoServico.status", itemMda.getDoctoServico().getTpDocumentoServico().getStatus());
        		mapItemMda.put("doctoServico.filialByIdFilialOrigem.sgFilial", itemMda.getDoctoServico().getFilialByIdFilialOrigem().getSgFilial());
        		mapItemMda.put("doctoServico.nrDoctoServico", itemMda.getDoctoServico().getNrDoctoServico());				
			}
    		mapItemMda.put("naturezaProduto.dsNaturezaProduto", itemMda.getNaturezaProduto().getDsNaturezaProduto());
    		mapItemMda.put("qtVolumes", itemMda.getQtVolumes());
    		mapItemMda.put("psItem", itemMda.getPsItem());
    		mapItemMda.put("moeda.siglaSimboloMoeda", itemMda.getMoeda().getSiglaSimbolo());
    		mapItemMda.put("vlMercadoria", itemMda.getVlMercadoria());
    		
    		listItemMda.add(mapItemMda);
    	}
    	resultSetPage.setList(listItemMda);
    	
    	return resultSetPage;
    }
    
    /**
     * Faz a consulta ao banco, retornando o numero de registros encontrados 
     * para determinados parametros.
     * 
     * @param TypedFlatMap criteria
     * @return
     */
    public Integer getRowCountItemMda(TypedFlatMap criteria) {
    	return this.getItemMdaService().getRowCountItemMda(criteria);    	
    }
    
    
	
	public ItemMdaService getItemMdaService() {
		return itemMdaService;
	}	
	public void setItemMdaService(ItemMdaService itemMdaService) {
		this.itemMdaService = itemMdaService;
	}
	public ClienteService getClienteService() {
		return clienteService;
	}
	public void setClienteService(ClienteService clienteService) {
		this.clienteService = clienteService;
	}
	public FilialService getFilialService() {
		return filialService;
	}
	public void setFilialService(FilialService filialService) {
		this.filialService = filialService;
	}
	public SetorService getSetorService() {
		return setorService;
	}
	public void setSetorService(SetorService setorService) {
		this.setorService = setorService;
	}
	public MoedaService getMoedaService() {
		return moedaService;
	}
	public void setMoedaService(MoedaService moedaService) {
		this.moedaService = moedaService;
	}
	public NaturezaProdutoService getNaturezaProdutoService() {
		return naturezaProdutoService;
	}
	public void setNaturezaProdutoService(
			NaturezaProdutoService naturezaProdutoService) {
		this.naturezaProdutoService = naturezaProdutoService;
	}
	public DomainValueService getDomainValueService() {
		return domainValueService;
	}
	public void setDomainValueService(DomainValueService domainValueService) {
		this.domainValueService = domainValueService;
	}
	public ManifestoService getManifestoService() {
		return manifestoService;
	}
	public void setManifestoService(ManifestoService manifestoService) {
		this.manifestoService = manifestoService;
	}
	public PreManifestoDocumentoService getPreManifestoDocumentoService() {
		return preManifestoDocumentoService;
	}
	public void setPreManifestoDocumentoService(PreManifestoDocumentoService preManifestoDocumentoService) {
		this.preManifestoDocumentoService = preManifestoDocumentoService;
	}	
}